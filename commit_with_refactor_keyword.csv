Commit messages
refactor storyreporterbuilder usage to be just-in-time
Refactor abstract component classes
Refactored for more logical structure
"support for labels/break/continue, refactored switch blocks"
Refactor data model to use better names
refactor(history): make historic external task log tests more robust
EMAILPLT-70:  Some refactoring to support the DEMO service better
ROO-2928: Post 1.2.0.RC1 code refactor and clean up - changed ItdTypeDetailsBuilder.addMethod calls to use MethodMetadataBuilder objects rather than MethodMetadata variant to avoid the unecessary conversion from MethodMetdata to MethodMetdataBuilder which happens regardless
"Add module, refactory to multiple small packages"
Refactoring to keep old signatures
Refactored out the coloring. Work on the product configuration.
Refactor to use pull-shared module.
"- new analysis strip at the right of the text pane (errors and warnings) - fixed some bugs in the auto-completion (would not complete for only one item) - refactored the multi-line tooltip used by the ""tips"" and analysis strip"
Refactor DateTimePrinter to take DateTimeFormatSymbols
refactor
"Some refactoring of Check, changed under and over to less and greater, added value name fields for less and greater checks, fixed failed method name reporting, fixed bug in identifier check, wrote unit tests for all Check methods."
Refactor BiZZdesign Import/Export into separate plug-in
[PAXEXAM-768] Java 8 refactoring
Refactor ListGroups: Move code to format output into command class
"Monitoring of task status - Refactoring, more tests, fixing some bugs - more TODO"
[task #8] Refactor: extract common project property modification code into abstract template class.
refactored code
refactoring...
minor refactor to create marshalString helper method
Database Refactor
Minor further refactoring of Theory ParameterSupplier setup
OPENNLP-483: Refactor the DefaultTokenContextGenerator to make it easier to create a sub-class
 added ability to generate/edit control file content - minor refactor - save auth details on lose focus event
[MGN-56] Refactor: delete redundant AbstractRedisHistoricalTimeSeriesSource and add appropiate methods to RedisSimulationSeriesSource
made proper tests for each category + some refactoring
"ACT-1553: Refactor BpmnParse to use separate handlers for each bpmn element (first cut, working, but needs some extra cleanup love)"
refactor Edge
[MIN] some refactorings
included review comments and minor refactorings
Restructure/refactor package hierarchy
refactored XSLContentAssistProcessor
"works well, save for a refactor"
core: Fixing/refactoring buildAndCheckDestStorageDomains
Reflects changes made by RedDeer Refactor RequirementsRunner issue number 1275
refactoring and cleaning up SES UI
Refactoring: DesignElement mappings loading is done in Java without PL-SQL
completing the memory -> buffered refactor
some refactorings
OperatorContext refactoring
#NAME?
"Lab 06_home, Stage III & further refactoring."
Player Event rescue and package refactor
srm: Refactor representation of SURLs and paths
"Refactor XaLogicalLog to do read, apply and write entry in separate code sections."
Issue #36: refactoring of help command. Not there yet.
"Refactoring DropDownMenu/DropDownItem, closes #9"
refactored method name
Refactoring
"Refactored ChiIndexUtils to make it package private. Cleans up public API, since it is only used by chi descriptor code. Updated all dependent classes. Moved test code (which needs to be filled in!) as well"
OPENEJB-1076 Allow end users to use ciphered passwords in datasource configuration (openejb.xml). --> Avoid code duplication --> refactoring --> Add a command line tool to use a PasswordCodec
Refactoring to be match Camels API.
Small refactoring.
refactor sql parser.
Timer service refactoring
Some simple name refactoring
Refactor and fix debug according to recent changes
Refactored a lot of the other scanner stuff into the partitioner.scanners package and added SQL scanners from Chris Bradford
refactor CensusDialog -> AbstractDialog
Complete refactor removing Google HTTP Client (#131)
refactor package op to operaton
Minor code/package refactoring for EntityProvider structure
Refactoring
"refactored, fixed"
General refactoring and code tidying
refactor out common codes from *APIs
set refactoring
Refactored away the core TypeStore dependency in M3
Refactored EntityMetaDataFactory to EntityTypeFactory
graph layout : refactoring (renamed some package and pucshed attribute value classes to values package)
small refactorings added hamcrest-collections like MiniApi moved common Expr types to querydsl-core
Refactor: Moving out a method
"Minor refactoring, package-level javadoc, pom updates"
refactor
Refactor Header class
Refactoring from Interface /  Impl package structure
WIP Thrift refactoring:  - Replace PageDefinitionMapping with ThriftToReflectionLookup
Make mandatory parameters constructor arguments. Refactor ColorDialog into mvc classes.
refactored methods
terminal: added wireless. - Refactoring and cleanups.
refactored StockOrderTicket to separate UI code from other code
Issue 101: refactor client examples
"Refactored messy UI setup into named methods, renamed variables, general cleanup for readability."
gp:ConstructMode refactoring
refactor
Fixing grammars after refactory from a couple months ago. Removing support to # single line comments. Fixing parsing of inline nested expressions.
Refactoring in the Deployer class to use the java concurrent package
Refactored Authentication constants so that they can be reused. Added Spring Security call to the alarm browser in the topology UI so that it only allows non-read-only users to ack/clear alarms. Fixes bug SPC-692.
Refactoring to introduce new module
CDB improvements:   - Added AbstractParameterCommandDescriptorBlock and AbstractTransferCommandDescriptorBlock  - Updated CDB's to extend the correct abstract CDB  - Fixed member names to reflect specifications  - Fixed getters/setters for all CDBs  - Other minor refactoring/cleanups
More WAR work - primarily refactoring tests so they work with a context path
Refactored person from group (RAVE-729)
Refactoring and testing fix features
Reverted some changes and refactored the builder to work with the changed API.
REFACTOR: moved various Adapter<*SearchResult> into org.archive.wayback.resourceindex.adapters
"refactored cycle API, added RenderInfo to provide standard set of available views for plug-ins, changed the content-type definition by using a mixin interface to add extensibility to the set of standard content-types, refactored API according to these changes, adapted the UI/REST component accordingly"
Significant refactoring of Security related classes.  See the package documentation for org.springframework.richclient.security for details.
Reativando solução após refactoring que corrige os testes.
issue 71: added a possibility to generate a trivial PDF report; some refactoring and cleanup; updated Guava to 14.0 because of the Splitter.on slowness bug
MAGNOLIA-1586 - minor refactoring
[refactor] Improve names of integration tests for basic limitations of Tycho
refactor the paginator at webshop page
"[PLAT-1296] Refactor time-series master; New database, stage 8"
Refactor StaticTrackPainter
refactoring
Refactor LoggerOutputStream into two classes: LoggerOutputStream and LoggerFilterOutputStream. The old LoggerOutputStream is like the new LoggerFilterOutputStream which subclasses FilterOutputStream. The idea behind the new LoggerOutputStream is that it does not need to carry and write to another wrapped OutputStream. This parallels the recent changes to LoggerWriter with LoggerFilterWriter.
"refactored into two assemblies, core and app"
refactor config
Refactor for clarity
Code refactoring JPA-store.
JSON Refactor - move EJson into text.json package
Refactoring ui outside of model
#JC-1185 Logging filter was refactored to more clear solution.
refactor jsp code
Refactor GetPrivateGroupsByUserId to new mapper design. (B-07683)
refactor and rename tests to prepare for JAXBElements scanning tests
refactored view related properties from Map into Viewport class
Refactored: renamed multiplexers to replicators
"javadoc, refactoring"
Refactored builders for supporting multi inputs and named outputs seamlessly
Refactored classes to avoid that thread instances of invalid states can be created.
Fix TXT content type detection + Refactoring
Refactored model and fixed tests
refactor some code in UISpaceMember
PLXUTILS-103 refactored DirectoryScanner to allow custom directory structure traversal
getMLDataSet method refactored.
refactoring
[KARAF-3051] Refactoring of features module (commands/MBean) to use Karaf 3.x syntax/wording
refactor BundleStrings
Refactored TransferEnvelopeReceiverList
"New feature: - implemented the first time cycle inquiries for all the cycles, and the login warning - refactored the answers hierarchy classes"
REFACTORING Issue #10 Changed root package from org.blogspot to com.blogspot
- Fixed issue 219   https://jersey.dev.java.net/issues/show_bug.cgi?id=219   Refactored com.sun.jersey.spi.container.servlet.ServletContainer to   inherit from HttpServlet. - Fixed issue 217   https://jersey.dev.java.net/issues/show_bug.cgi?id=217   SpringServlet was failing when used as a filter.
Refactor test of websocket examples.
Feature #907 : fixing display attachments for validated suggestions (refactoring back Transaction mechanism introduced by Miguel to handled the finest as possible the JPA transaction into a service)
refactored methods names to readOld and readBolonha
Refactor GenerateServiceMetadata
Resolves Spec Issue 155: Refactor CacheEntryListenerDefinition to CacheEntryListenerConfiguration
"Big refactoring of ParsedResult: now split into ResultParser and ParsedResult classes, per Christian's suggestion. This unifies the parsed results that are produced from various input, simplifying client handling of different types."
"refactored ParameterizedMessage::recursiveDeepToString into smaller methods to enable inlining: after running a test with -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining I found ""...ParameterizedMessage::recursiveDeepToString (836 bytes) hot method too big""."
Refactoring
Refactored list resources from a Network
"ComponentHibernateDaoTest refactored, returned value in 'getDuplicatedFieldsFor' replaced onto empty list instead of null - and the service along with view changed accordingly"
"name refactor, TagAttr to TagAttribute"
Refactored object spawning
[MOD] Repository management: refactorings
Refactored
Finished most of the remaining polling consumers.  Created a few new static utilities. Minor refactoring.
Feature #8622: refactoring a little the server notification PUSH by SSE in order to handle rightly the user session expiration.
Refactoring
[CLEANUP] - Refactored code to facilitate creation of unit tests - Set security helper as PluginService instance dependency instead of global static variable access - Set document builder as PluginService instance dependency instead of global static variable access - Refactored access to metadata plugins list to a separate service
ongoing refactoring
Made a refactoring of connections to master (multiple channels per client).
"Refactored JPA demos, renamed all demos."
refactored configuration and setup to test with build 4.1.8
 refactored out introspection based toString() logic to the IntrospectionSupport class - Durable subscriptions are now eagerly loaded when a topic is created. - fixed the *TransactionTest
minor refactorings
refactoring
NXP-5612 finish refactoring and reactivate tests
XLC-238 Service privileges checks refactored. Added methods for getting entities by id collections.
Refactoring convert method in JarConverter.
minor refactoring and code cleanup
Directory tree refactor
refactor for preject renaming
Refactoring
refactoring serviceclient to persistence
Analyse: detection of Parameters (and related Type Parameters) refactored. Works in C# the same now as in Java.
"Complete refactor, changes include (not exhaustive): - New annotations (Cookie, Multipart, Accepts, ContentType, Matrix, Encoded) - Path and PathParam behaves as specified in JAX-RS - Added support for SimpleXml - JAXB serializer/deserializer don't requires the context path to be supplied anymore. It will auto-detect classes involved and create jaxb context for it. Works for most cases, if not, user can still provide the context path or object factory. - Improved multi-part support (user can specify part content-type and filename) - Response deserialization is now automatically choosing the deserializer to pick (given ContentType is present in the response). Behavior can be overriden - Http entity writing has been abstracted, 4 implementations are given: UrlEncodedFormEntityWriter, MultiPartEntityWriter, XmlEntityWriter, JsonEntityWriter. Can be customized."
story #23 (optional states config item refactor)
refactoring behavior into the DOM
IDE-1663 refactoring pulled up methods to base class
Refactor: - TextureData to handle Pixmap and Custom TextureType - TextureData consumeCompressedData to consumeCustomData - GLTexture function to uploadImageData to custom mipmap level
final test and code refactoring
Introduced Database class as a facade to db test code Various renamed and minor refactorings
Refactored to use conversation scope.
bug; 3123689; iterate() field mapping type is missing; bug; 2856035; mapping primitive collections with iterate feature; refactoring; internal builder api changes;
Refactoring. Introduced a plugin interface. 2 advantages: * both the plugin and the plugin API can implement it and thus don't have to copy paste the Javadoc (except here the mailsender plugin was not implemented following the rule that the API must delegate its calls to the plugin proper) * allows to clearly see what's the plugin API and even create links to it in the documentation.
Refactoring
"beta federation, some refactor"
Make new unit tests compatible with all targets; refactor Generator to take cmd-line arg or current dir. rename some methods. add some output.
"massive refactoring for better names, added spring test for archives"
Refactor code to prepare for custom label attributes. #39
refactored
Minor smoke test refactoring
1. Minor refactoring 2. Added QuickSelectTest 3. TODO Fix quick select
"Updated to OptaPlanner 6.0.1.  Refactored source data to use separate teams, venues, and rankings files."
refactored error on current transaction
Refactor of some test method names.
Refactored classes to util package.
"Refactor UI clustering test, add test for view context"
JBRULES-720 Clips Parser -Refactored functions so all functions are now added by the PackageBuilder into the RuleBase -All functions now live in the MAIN namespace and the factory is always retrieved from there.
"further Grade Refactoring (see Enrolment.getGrade,setGrade,setGradeValue) - now implements ICurriculum - getCurriculum - EctsCredits and Weight for curriculum calculus must not take into account isExtraCurricular or isPropaedeutic"
"suspend/resume tests, and test refactoring"
 Rehauled and refactored the InputHandler!Ok time for bed now.
RF-12900: refactored org.richfaces.util.core.base64 to org.richfaces.base64
refactoring: rename method
"Some refactorings and cleanup, namely: - Moved all relevant null checks into Resource - Made create firewall use FirewallOptions instead of a Firewall obj - Consolidated a lot of the HttpRequests in the expect tests to allow for reuse (in compute)"
Refactored
refactor class name
refactor the channel manager
#JC-538 Refactoring. Optimizing contacts DTO
Refactoring
Refactoring the way image representations are built for better reuse + actually filter attachments on images
Refactor LocalMapStatsTest
Refactoring package structure
Refactor and finalize framework IPC java package structure
Title: refactor more ui test utils Description: @bug W-1576512@ @rev rpack@
DATACMNS-20 - Adapted refactoring of Repository.findById(…) to findOne(…).
Refactor and rename concretization passes.
"Major Refactor, change Spoutcraft to Client"
Backup worklog Refactoring
Refactoring and cleaning
Feature #2815 : adding data storage quota handling on spaces (collaboratives and personals) - adding a link to go back homepage of application from which the data storage quota exception has been generated - modifying paste done treatment (Clipboard EJB) - refactoring unit tests about FileHandler treatments
refactoring and refine test based on sonar and pitest
CDI EL Refactoring and Searchers don't look for ELs in dependent project https://issues.jboss.org/browse/JBIDE-10331
Refactoring: 'property' (=variable/constant only) -> 'member' (including method)
refactored code to ease understanding: extracted methods interpolate<type>Field
refactoring
PC optimization refactoring (Only unit tests. Missing IT tests refactoring.)
HDFS-2180. Refactor NameNode HTTP server into new class. Contributed by Todd Lipcon.
Minor refactorings
Minor refactoring to address points made by @cos.
[SPARK-15296][MLLIB] Refactor All Java Tests that use SparkSession
Initial refactoring of invoice tests
Refactor test
Refactored routes somewhat
Refactored the HA branch to facilitate using different implementations of LockManagers and IdGenerators.
Refactored code.
[Archi4] Refactor Viewpoints
Xpath processing refactored
Refactoring.
filled out JsonDocumentDefinition with basic implementations to guide the next pass of refactoring and deeper implementation
property-transfer refactoring and improvements
refactor-rename of some methods to simplify and clarify (2)
Refactoring sobjectSync
refactored new template wizard
refactor to have better names
refactor api
binomikekoa refactoroitu selkeämmäksi
Minor refactoring.  HttpRequest and URIInfo not needed in BaseResource.
added start/stop/tree/uninstall fab commands; refactored the module commands into a 'mod' shell for now until we think of a better name for the discovery/search/install module stuff
Fix errai-cdi refactoring: move shared generator to errai-cdi-shared.
Refactor subtitle parsing/exporting code.
"Shortcuts for most used tags (see issue #7), some refactoring and more power to the plain text url"
refactor ES indexes - SONAR-6255
Minor refactoring.
refactor
finish refactor of eml components.
 Refactor changes and remove testprotoversions  This change refactors the PerChannelBookieClient to provide support for request types other than Read and Add entry requests. The bookie protocol has been changed to use unique transaction ids per connection.
Refactored around a bit but also added automated vacuum analysis on postgres when new shapefile is imported
issue 384: NetworkSpec refactored - Adrian comments addressed
Refactored
- fixed 36837 - refactor label providers to viewsupport and removed old IAdormentProvider
Great Refactoring for managing Geocoding and Reverse Geocoding Event
"JBMAR-75 - heavy refactoring, add ExceptionListener interface, make sure river unmarshaller has comprehensive and correct trace info"
Refactoring of state designator handling
Refactor name of utility class.
"More refactoring to accommodate security updates.  The end goal is to push more of this common code further down so that we are not repeating it all over the place, but this current revision still has it at the top layer for now."
"Added Javadoc. Refactored StageDependencyCondition: no longer an abstract class, its now an Interface. Added test class for MultipleStageDependencyCondition"
SAK-8613 refactoring package name from .util to .util.api
refactoring for better readability
11:00 checkpoint for the WikipediaLoader Looks like the varbinary are going to mess up HSQLDB... Not sure how I'm going to work around that... Refactored all the queries so they use WikipediaConstants.TABLENAME_* now Cleaning up the DDL files.
Refactor registration of metrics at server startup
some methods refactoring
CXF-5370 Refactor STS logging to split mapping from log writing
"[CXF-6739] Refactor to reduce memory pressure in org.apache.cxf.attachment.AttachmentDeserializer:  * reset and reuse the same StringBuilder for fetching each line from the message input stream, instead of allocating a new one (using 128 bytes) every time  * avoid the ArrayList<String> intermediate model and directly convert the StringBuilder into entries for the resulting TreeMap object  * remove part of the special treatment of lines strating with spaces, as with the existing code there's no way such a line could be added to the headerLines list while the buffer is empty unless it's the first line from the stream (which means the headerLines will be empty and hence there's no need to worry about appending it to the previous one)."
Refactoring tests: moved helper classes around
"JNAerator: added raw bindings generation for BridJ, slightly refactoring type resolution"
Refactored the detectTargets method into InputUtil
minor test refactoring
refactoring
RF-12900: refactored org.richfaces.ui.util to org.richfaces.util
Refactor worldmap demo to use main code
Renaming and refactoring of authorization classes.
42439 Moving a private static method should change the visibility [refactoring] 44115 Moving private static field does not update visibility appropriately [refactoring] Patch von Philip Mayer
"Refactoring, more tests"
refactored to support pre-honeycomb devices
"refactor the alert, fix rule bug"
refactoring of dialog messaging infrastrucutre jgoodies 1.0.5 spin 1.3 polishing
"Merge the Poller Unit Tests and Refactoring from bug-709-branchbefore forrmatting the code"
refactor the compilation stuff into a separate package
IMPROVE: Refactor package for avoid server client dependency IMPROVE: Remove client classes from final war
Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (inline of MeasurementUtil functionality to MeasurementOperator)
Refactoring to streamline injector creation and provide consistent logging.
"Refactored @HttpMethod:   - @HttpMethod is now a meta-annotation   - Specific annotations @HEAD, @GET, @PUT, @DELETE and @POST replace @HttpMethod(""<method"")     and @HttpMethod with the actual HTTP method derived from the Java method name"
somewhat extensive refactor of the ontology library support to allow users simple access to the xml catalog
Refactor for significant speed boost for checking for permissions to view activity. Added Organizations to advanced search
refactoring more stuff.
"Create, update, delete added and other refactoring"
Refactoring and new REST functionalities
Refactored the remaining commands   - Unit tests added
CSPACE-6935: Refactor some of the Java client classes to be more useful for call the Shared Authority Server to sync authority data.
Refactoring to have an independant handler manager
"[models] Refactored EclipseDependencyListener, ProjectCoordinateProvider"
Refactorings. Improved internals of device frames etc.
refactoring the main method. Now it just looks for the anagram in the cache map and request the generation for the non-cached ones
[MOD] Simple refactoring.
refactored weld-extensions structure
"Revert ""Refactor RoleUser to Membership."""
Issue 101: refactor client examples
Refactor: RecoverHoles extract a function that recovers one image
[TEST] BACKLOG-774 - refactoring PublishTest and moved to core module and rename to SolutionPublisherTest
demo meeting refactoring
refactored uri and method accessor methods to icaprequest interface. renamed icapheader to icapheaders
TrackMate_: Refactoring the track display in 3D
 added preference page to select a source parser - refactored the debugging engine manager to use the base classes it helped spawn - made the selector implementations more generic - synced language implementations with required changes
[KARAF-786] Refactoring of the Karaf management modules. Improve Maven3 support.
refactor and rename session manager to session store
DRILL-1025: Refactoring - Define function holder and registry interfaces
"Fixed minor issues, refactored configuration layout, added new integration tests, upgraded to Thymeleaf 2.1.1"
refactor tests that read resources from files to read from classpath
DDF-285 Refactored first iteration of cache implementation.
refactor overlays Focusable -> Selectable
Refactoring path integral framework.
Updated Command + UpdateTest2 + refactored
Refactored both Option instances into one.
refactor(migration-test): project structure
Refactored to use a TargetRegistry instead of a default Map.
"refactoring, restructuring"
refactoring the rest of the jaxb model for javac api
o Removed an unecessary await call that was disallowed in Netty. o Fixed a reading bug in BlockLogReader. o Refactored tests to allow starting master and slaves at different times.
[DROOLS-264] refactor reteoo specific method out of core Scheduler
Refactoring and enhancing the GUI
"Refactored Controller2D to be depended on SimpleController2D and AbstractController2D. SimpleContoller2D will eventually be able to work just with a single AtomContainer instead of a ChemModel. Currently, these changes are not yet done."
Ugly XPath fix refactored into a new method
Refactored WebClosure (now LinkedDataCache) to make the API cleaner.
Refactored voidedNotification to voidNotification to fit recurlys object.  Also fixed ability to parse the void_payment_notification webhook.
"Revert ""Mercurial Integration is now done with java native library hg4j. Refactoring to clean up the code and to allow easy adoption of other java native libraries in the future. Some unit tests added and classes moved to dedicated packages for better maintainability"""
Refactoring in order to use it by an other plugin such as the scripttrigger plugin.
Resource adapters were slightly refactored. An IHierarchyAdapter was created.
Refactor PrinterVisitor
"code formatting, refactoring & comments"
Refactoring
Refactor to allow InputStream as database input as instead of String.
[refactor] Wallet renamed to Balance
refactor LayeredRangeTree's constructor
refactoring to extract browser-dependent tests into a separate profile.
Refactor common code to abstract Disks class
[SUREFIRE] refactoring
More refactoring of PermissionDao/PermissionService.
"MEDIUM / Refactored DE/DG modules editors (browsers, perspectives, etc...) / Work in progress"
refactor super class to allow sub adaptors to override function
FIX #334 fixed completion after comma + several other bug fixes + some refactoring
TrackMate_: begin refactoring event and sync management
MX-8 cleaning up the refactored selection panel
Mini refactor
Unit tests and refactoring.
"refactor the OrderItem, Training, Membership services' test"
More lexer refactoring.
Refactored poms and properties files to handle MySql has prod DB. Id generation strategy set to AUTO.
PAXURL-29 some larger offline refactorings. Not finalized.
"Refactor SendMailSSL, rename 'stoping' to 'stopping', - Refactor SendMailSSL into smaller portions and with proper exception handling (do not catch the Exception superclass and do not nest try-catch blocks; always pass on the exception type and message) - Clean prose in config.yml"
api cleanup and a refactor of some getCallbackScript methods. its now much more obvious what to call and what to override when you want something. (success or failure scripts)
added preference page to select a source parser - refactored the debugging engine manager to use the base classes it helped spawn - made the selector implementations more generic - synced language implementations with required changes
Refactored application. Fixed errors in logs. Got many new. +700 different logs. Todo: Statistics.
"ISIS-1603: refactors the html for SclarPanelTextField, introduce a div and moves the a href into that div"
refactor the package name
Refactor PPTX text to take TextLineArea and InlineTextArea
Constraints Refactoring (solver)
new refactoring
Post SVN COPY refactoring
Refactorized profile classes in order to better complain d20 system.
"refactoring, Grant password renamed, package changed from de to org"
[TACHYON-1199] Refactor the code about extracting mLineageWorker to super class
Preparing to refactor and retrofit regression tests.
refactor MethodHandler to be extensible
"* Dimensionality separated from Dimensions * refactored Dimensionality.getNumDimensions() to   numDimensions() * split Iterator and LinkableIterator * split Positionable and LinkablePositionable * split RasterPositionable and LinkableRasterPositionable * implemented links, changed LinearInterpolator to make use   of a specialized Link * removed Localizable3D and Positionable3D"
refactor: Extract interface from StdWarehouse
refactoring of the spring projet to use cleaner package names
Refactoring
"Refactor client 	modified:   src/main/java/ru/cinimex/client/view/CellEditor.java 	modified:   src/main/java/ru/cinimex/client/view/Panel.java 	modified:   src/main/java/ru/cinimex/client/view/View.java 	modified:   src/main/java/ru/cinimex/connector/FieldInBody.java 	modified:   src/main/java/ru/cinimex/data/ClientData.java 	modified:   src/main/java/ru/cinimex/data/Field.java"
Moved all of the files to a new package structure to facilitate further refactoring.
Refactor dynamic variable lookup
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
"#970 massive refactor of sip-creator to work with FileSet which handles all files related to an input XML file, some things still broken like autocomplete"
Refactor Assembly to ComputerSystem and implement on remaining platforms
"More refactoring, including a few bugs introduced in earlier commits."
ROO-2745: Post 1.2.0.M1 code refactor and clean up - move injected PersistenceMemberLocator to super type
Refactoring Workbench service managers  - Creating genreic WorkbenchServiceManager/Listener interface with default implementation  - Adding MBeanProvider WorkbenchServiceManager/Listener  - Converting JMXServiceManager to be a WorkbenchServiceManager/Listener  - Making all Listeners extend from EventListener  - Removing separate IJMXService* interfaces
Trac #77: Refactor Ant task tests.
"MAHOUT-294: - modified most DisplayClustering subclasses to use the new sequential method on drivers. (Not Dirichlet yet) - using file system to transmit Clusters required a rework since they were not serializing needed state - refactored Canopy, Cluster, SoftCluster and MeanShiftCanopy significantly, abstracting shared behavior to new AbstractCluster class. - deleted ClusterBase after moving static method to AbstractCluster - added ClusterObservations to replace KMeansInfo and FuzzyKMeansInfo - changed all cluster identifier formatting to include type indication - upshot of new clusters is improved posterior statistics for all with radius() now returning stdDev(), a vector - new radius() used in Display examples to show elliptical clusters - adjusted unit tests and all pass"
core: refactorings related to update cluster flow.
Refactor Packages and add ignore for bin folder.
refactoring
"refactored a bit, create chatresponse in a factory class"
code refactor and fix consume & produce issue
NXP-3167: refactored fulltext extraction to use Nuxeo post-commit async event listener
[C#] Refactored rule repository and profile importer
radio button groups and check box button groups refactored.
"Import API documentation and minor refactoring. Add TimeRepresentation setting into Container, also fixing #1146"
"refactor frontEnd in preparation for adding pausing, reloading and deleting"
refactored to send host down threshold
getMediaTypes().getWritable() instead of getMediaTypes().forClass() MediaTypesProvider refactoring JSONLDWriterAdapter wired into IO_Jena
CAY-926 Refactoring class generator classes
MAHOUT-251: Generalized and refactored Dirichlet models and model distributions to  remove 2-d and dense vector assumptions by introducing a new abstract  VectorModelDistribution to provide a modelProtootype and size to the distributions for  creating prior models of arbitrary vector size and flavor.
"refactoring (changed package name to guru.drinkit, fileNames)"
"DDF-1506: Unit Tests, Refactoring, and Documentation"
Refactoring. AbstractStatsChartDataProvider + LiveStatsChartDataProvider
Fix style issues and refactor some code.
core: Refactor AuditLogDirector
refactored PlayingField to use a HashMap for fields
core: Refactor of setting disk attributes.
Refactoring of packages
"config refactoring, add new config properties for kod device"
"Resource Ancestry (Disambiguation) Work Incorporate feedback into design and perform some refactoring to clean up impl. - Keep Name and Ancestry fields simple with only linked resource names displayed - Enhance hover values for both Name (with type info) and Ancestry (with hierarchy and type info) - Move more logic to AncestryUtil for simplified Impl. Use standard Record   attributes, defined here, across Ancestry using datasources and views. - Remove Ancestry and in some places, Type as DS fields. These should be DS   fields, only, if necessary, ListGrid fields. - Add Ancestry to AlertDataSource and its users - Fix issue with the Ancestry hover for Assigned resources in Resource   Selector. - Added Resource filtering prior to gwt serialization for Alerts."
Minor refactorings required for the perf project
BST methods refactor
refactored count and constructor to querydsl-hibernate made HqlSerializer use String.format templates instead of operator string + operator position
Some refactoring and compressing of data before sending
Refs #2626: Refactors ColorUtil and add ColorScheme class. Also adds color-blind safe and print friendly 3-class Colorbrewer schemes.
Refactoring
refactor
ASNN-602 Create service for public Assignment2 access Initial set-up and refactoring
Refactoring: moving classes to appropriate packages
"Refactor export, add CSV Links export and add other changes on DAO and DbIterator"
... refactoring
"""Refactor game speedup/ difficulty progression"" complete"
Small refactoring But DataSnaphshot were it belongs
SONARJAVA-1170 Refactor AstScanner with JavaAstScanner
Refactoring to use Gradle with a multi-project build.
refactor TableSection to allow for records to be used to build detail views refactor the alert def code to use the new TableSection
refactoring.
getUser method slightly refactored
use List in Argument model. minor refactoring
refactor: use constructor/final instead of setup()
MAHOUT-479: Refactored Model and Cluster hierarchies to include DistanceMeasure in cluster state. All unit tests run
Refactoring out jpa specifics to leave only jsf and cdi specifics
"SAK-2122 - Entity Model extension and refactoring, phase I."
Refactor - more consistent naming of actions
[TACHYON-1199] Refactor hostname for LocalTachyonCluster*.java
Small refactoring in load profile. Corrected bug that was considering millisecons as seconds
refactor package
refactored test classes and service extenstion as well
refactored crypto system
refactored
refactor to prepare performance improvements
"introduced UnmodifiableLazyList, refactored SerailizableCollection accordingly"
Fix 89432 -- support action structure serialization for chart and refactor test codes.
implemented disabled adapters; updated configuration; further refining adapter idioms; refactored response handlers and renamed some classes in related packages to better reflect domain intent
#694 - Refactor - Rename IdGenerator to PlatformIdGenerator ... with a view to support customer Id generators
Refactor OpenEmpiPatientImporter to use PatientBuilder instead of PatientQueryMapper. Remove redundant method for converting Patient from PatientQueryMapper.
Refactored some of the injection point metadata bean code.
Refactoring.
"Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (introduce MeasurementUtil, FontUtil and TextSizeUtil, renamed several classes)"
Refactor filefilter directory to remove dependency on lang
MNGECLIPSE-810: refactor JDT support out of m2e core plugin
Resolved lazy initialization problem on GPUser class when running tests Refactor on KeystorePasswordCallback classes Modified .properties files of keystore
more refactoring
Refactor: move ThriftTypeInferringColumnQuery to the thrift package and rename internal members in HectorTemplateFactory
"CSPACE-2542 Modified the handling of Authorities to support range of specifiers for authority and item, across operations. Modified authorities that support contact sub-resources to support all specifier forms for the authority and item, across operations. Refactored the AuthorityResource classes for the authorities that support contact sub-resources, to simplify code and ensure consistent support."
Refactored execution proxy classes; entity enclosing requests are enhanced only when necessary
Refactored code exposing patient/person data definitions as calculations - REPORT-461
"expaning writer abstractions, refactor packages, removed unused"
Refactorization of MetricDatabase to reduce number of instances and to use CachingDatabase for caching and optional preloading
Refactoring createSnapshot to new API framework.
Refactor the providers to a common module so that it can be used anywhere
[Refactoring] Extract code into a separate method
refactor job
"[ENG-85] Refactor position master, including type-safe identifiers"
Refactored Paymill class to allow the instantiation of services with different api keys
"Refactored Shortcuts screen to use ListWidget Also made the textarea for the command/shortcut huuuge The items now show more information (for example how many commands and text messages, or if the item is a command or a text message)"
Issue 101: refactor client examples
Minor refactoring
Refactoring CommandLineProcess and CommandLineTools classes:  - Added CommandLineProcessCommand  - Added CommandLineProccessInput  - Added CommandLineProccessOuput  - Added CommandLineProccessReadeInput  - Added CommandLineProccessStringIntput  - Added CommandLineProccessTest
did not like the fact that the method was getting big; refactored my logic to a private method to increase readability
Refactor build management and fix Xcode scan-build to work alongside Release configurations
plotview *some major and minor changes *refactoring *style *axes (esp log scale)
NXP-4346 refactor CommentManagerActionsBean
Refactored to com.araeosia
"Refactored Composite into AbstractComposite, Composite, and DynamicComposite, to disambiguate usage"
Builder JSP alpha support. Builder refactoring.
Refactoring
refactor(wildfly/subsystem): make it fully compatible with WF8/10.
"#POULPE-404 Refactored checkEffect* tests, removed 'test' prefix from methods."
[PLINK-128] - Initial refactoring to the Configuration API.
More layout refactoring.
"remove network info from business rules, refactor AlertConfigManager"
refactor: rename MoorClassLoader to BootstrapClassLoader
RF-12900: refactored org.richfaces.ui to org.richfaces.ui.common
Refactors the code which analyze the word in the content of the pages and the sites
refactor
[Refactoring] Tests refactoring for taking into account the new infrastructure based on Restlet + JAX-RS + JAXB
REFACTOR: moved PeekableIterator into it's own class TWEAK: added type safety
refactor bean property util classes to do work in constructor
Refactor support for reading neostore files as generic static method and used that to implement a reader for txid
Refactor chapter13-samples
Refactor TmfTrace and dependencies - minor changes
Job xml loader refactoring
refactored code to get Groovy dependency from project dependencies
"CAS-1116 Refactor KryoTranscoder to use an initial buffer size and add explicit buffer overflow protection to handle what should be edge cases with proper buffer sizing.  Also, correct improper usage of ByteBuffer#array(), which caused entire backing buffer to be stored in cache instead of just used bytes. Unfortunately the fix requires byte array copying with the resulting object allocation overhead."
refactored data layer project structure
Added new getInstance() with externally supplied Properties; refactored parts of protected WikiEngine() into getWebappProperties().
"Refactoring of DSS and Definition, for performance"
Refactor Graphite URL into environment variable
Refactoring of descriptor generation towards high-level API
Minor refactoring
"Refactoring Core, move all the Docking management to the DockingManager."
refactor SceneManager.
Refactor Periods to increase coverage
ItEr38S17ArquitecturaServidorItEr37S07: General refactoring to Spring Security integration and passwords encoded with SHA-2 (SHA-512).
refactor: split into 3 modules
General Code Refactoring
* refactored out FitFixtureException from RestFixture * fixed bug on handling js expressions
refactor view into BaseModel
"The ""Merry Christmas"" commit. This is a first stage of web interface refactoring process."
Refactoring packages. Searching for unit test problems
"MONDRIAN: Allow members to be referenced by key, for example [Employees].&[1].     This required a big refactoring to convert representation of identifiers in lookup methods from String to Id.Segment and String[] to List<Id.Segment>. Contributed by Luis F. Canals.     Also add notices that certain deprecated methods will be removed in next release."
Refactored the proxy storage so that it can fully use the spring configuration and can be referenced  by its interface.
renamed GenericizeContainerClients Refactoring to AugmentRawContainerClients - added test (not active)
REFACTOR: SearchResult => (Url|Capture)SearchResult INTERFACE: changed names of two render* methods to match Capture/Url scheme. TWEAK: Moved query specific .jsps to /query/ directory in webapp TWEAK: allow separate XML renderers for Url/Capture results.
refactoring
Refactored ModelMeta.
Small refactoring and Graph API documentation.
Refactoring
417561 Refactor annotation related code -  make annotation phase able to be multithreaded
"New ""API Services"" Front-End GUI, and little refactoring of API Engine"
Misc logging-cleanup/refactoring * CrawlerJournal.java     improve exception logging     combine writeLine() methods to use varargs * FrontierJournal.java     improve exception logging * ArchiveUtils.java     replace ignored  count parameter with meaingful boolean one * CrawlURI.java     use updated ArchiveUtils method
"OPENNLP-429: Refactored the POSModel, moving everything related to the factory to BaseModel, so it will be reused by other model implementations. Eliminated the necessity of calling methods from sub-class constructor. Moved the methods to instantiate factories to POSTaggerFactory and BaseToolFactory."
Refactor
"Refactored JC 115, 117, 118, 119, 120. Rewrited JC118 according test case."
refactor network info
General cleanup and refactoring.
"Refactoring: adding better service/finder methods, removing code from REST endpoint"
"Refactoring the task engine in order to handle as a better way the task running, especially on severe error which stops the thread."
Still refactoring.
Refactor the timeline contribution to match more closely with the style in maven-build-utils
refactor mvc
Refactored SpringSecurityUserProvider to allow customization by subclassing
"Code maintenance for refactoring by Emanuel Graf, bug 234348."
refactor serializer byte code gen
refactored and cleaned up stmt builder interfaces
refactoring
Refactor IdentificationRequest and associated factories.
WFLY-1899 Refactor the way the securuty context is setup by the Undertow handler chain
"Refactor code, put current distro manager into default plugin"
1) Refactor problem reporting service to better handle missing values in database
refactored the use of 'headers' on the Exchange to 'properties' as headers are usually protocol dependent (e.g. strings in HTTP) whereas properties can be arbitrary things
Refactor the strutter again to something that makes more sense
[MOD] XQuery: minor refactoring
"refactoring to build a neo4j bundle, and test it in a separate maven project"
lots of refactoring. Made Traverse step able to do in/out patterns. Added self loop filering.
OOZIE-1315 Refactor classes from launcher jar into Oozie sharelib (rkanter)
WebUI::Refactoring::
Refactored View Point model using bindings
"Changed validation check on registration pages that compares email and confirmed email, so that it is now case insensitive. Also, refactored registration pages so that there is now only one registration form class."
major refactoring and bugs corrections in the logic of type inference and type reification
General ExtDoc refactorings + test improvement.
SONAR-4896 refactor SearchNode
"Removed unused methods, moved startup page code to RWTStartupPageCreator - bug 340927: Cleanup and refactor HtmlResponseWriter https://bugs.eclipse.org/bugs/show_bug.cgi?id=340927"
refactor decouple tree menu and data
Refactoring of Lightweight JSO classes and more.
Editor refactoring
Refactored service registry package structure and class visibilities to prepare central service registry instance caching and sharing
"Refactored event handling for tabbed hiearchies, to fix issue where a class can appear in more than one tab resulting in sporadic tab switching. Now event handling takes place int the tabbed pane, rather than each individual tree, giving priority to selecting the class in the current selected tab (if available)."
"Refactoring service / controller hierarchy. Instead of using org.deegree.controller.XYZ, the controller (protocol-specific classes) are not put below org.deegree.XYZ together with the reset of the service classes."
Refactored to use annotations instead of inheritance.
Refactor CacheStatisticsProvider to use generics
#428 - Add attribute length validator. Some refactoring.
refactor source
refactored runScript logic
"A bit of refactoring, maybe fixed the ""can't edit config file"" bug, handle MC 1.0 versions better."
Refactored to remove getBatchManager from Configuration. Added unit tests.
#NAME?
More fun IntelliJ-suggested refactorings and small tweaks
Refactored TestEnvironment: renamed deploymentDir to serverHomeDir
Refactor and add more core UI utilities
refactor(engine): centralize execution parent-child relationship
Refactored to make sendRequest readable
refactored to uppercases
Switched rename refactorings to descriptor API
Refactor packages.
Refactor unit tests because of refactoring of Interfaces
KERN-1720 Refactored finder tests to enable non better control over non comliant drivers (memory and cassandra). Modified the setup of the test to ensure that if the tests fail in batch they also fail when run alone.
 - refactor so that it builds correctly
Refactoring of JML test execution functionality
Refactored: combined DuplicateOnTestFoundEventFilter and SuiteListenerAdapter into RunEventNormalizer
Refactored to permit partial evaluation of scripts
refactor move
Refactored bean names
Refactoring: Extract method
RIO-326: Refactoring Resolver
* Adding bulk revocation script * Refactoring Pinsetter to use common config code
Integrated nREPL; add new REPL view; refactoring of editor/source viewer; simplified launch process
Refactor existing implementation to use delegate pattern
Refactoring
Bug 245603 Refactor Service Layer
Major refactoring to make the Robot use the a chain of responsibility in its thought process.
Refactor RecentURLsListener and related classes (and rename them to RecentResourceNameListener and similar) merge with new commit
Refactor daysUntil to allow more control for exit condition
"Refactored configuration so that configs are static, but config changed callbacks are per editor window instance. That is, any change to config will affect all open windows."
- [#4] Improved logging separation - do some refactoring - improved logging information
Moving another Javadoc check to see what is involved. A suprisingly small amount. Love the Eclipse refactoring support having the smarts to do the CVS operations.
model code refactory
refactored roundtripping files
Refactor event store benchmark and benchmark tracking performance as well
TURMERIC-1350: refactor services into core and ui.
"AMEC-1943, AMEC-1877 refractored the code to display the correction article citation in the article correction box the refactoring affects the ""download citation"" page as well"
"Refactor to use ui code rather than proxy code. Rather than explicitly state the script sessions, have it as part of the environment in Browser."
[FIX] Set correct amount of health when healing. See #431 [REFACTOR] Moving the SetPlayerHealth method in PlayerCommand.
[FIN-111] Refactor SecurityMaster
BuildTest: refactored the workaround for IDEA compiling all modules with the same language level
"Fix UUID of HEARTBEAT state - D'oh.  Refactor delta state update logic to be a bit more clear.  Fix examine() to request state that's missing from the local node.  Fix logging of digests in examine().  Only update failure detector on heartbeat state update. Send heartbeat state around the ring upon update.  Fix GossipTest to directly notify, rather than using the gossip dispatcher to eliminate flapping."
Diameter Testsuite refactoring.
refactoring and cleanup
extract delete tag refactoring into a reusable static method
refactoring Hole
MODE-681 - Committed  JcrResultSet and related testcase changes.   This added support for getDates and refactoring so that currentvalue to support wasNull can be managed.
"#586 - Refactor the UUID ScalarTypes (Native, Varchar and Binary) to have a common base"
Refactoring.
New feature: added the QUC Coordinator report and results view - refactored existing renderers - create a new class for the global comments on UC (and it's prepared for the comments on the teachers)
"refactored to eliminate duplicate names for Bundle, BundleContext, PackageAdmin, Filter, PermissionAdmin, ServiceReference, ServiceRegistration, BundleLocalization, PermissionStorage, StartLevel"
Temporarily reverted me.neatmonster -> net.xereo refactor.
"refactor ComplexModelFactory, add stopAreas and timetables"
"Upgrades and changes to LeftAlignVariants, motivated by 1000G consensus indel production: -- Added ability to trim common bases in front of indels before left-aligning. Otherwise, records may not be left-aligned if they have common bases, as they will be mistaken by complext records. -- Added ability to split multiallelic records and then left align them, otherwise we miss a lot of good left-aligneable indels. -- Motivated by this, renamed walker to LeftAlignAndTrimVariants. -- Code refactoring, cleanup and bring up to latest coding standards. -- Added unit testing to make sure left alignment is performed correctly for all offsets. -- Changed phase 3 HC script to new syntax. Add command line options, more memory and reduce alt alleles because jobs keep crashing."
Refactor database init process
Refactoring Privacy Parameter
[OPENENGSB-1565] refactor SecureSampleApp a bit
Refactor: Moved packages to comply with the backend package name conventions.   * p.i.ff.pstm -> p.i.ff.b.j.pstm   * OJB related classes moved to p.i.ff.b.j.ojb   * dml.runtime moved to the backend package   * Code Generators moved to p.i.ff.b.j.codeGenerator   * DB related classes moved to p.i.ff.b.j.repository
Refactoring and picking winners
"UI refactoring, changes and fixes"
further refactoring; experiment.save() method; fixed DataReleaseService
MAGNOLIA-3620: refactoring better (hopefully) names for methods.
"Major progress on LOCI plugins refactoring.   * New options management package, loci.plugins.prefs.   * Split each dialog into its own class.   * Eliminated reflection for hyperstacks and composite images     (most plugins now require ImageJ v1.39+).   * Seems functional, but not yet well tested. In particular, Slicer and     Colorizer need work, and the upgrade logic is temporarily disabled."
refactor xEssentialsApi to xEssentialsAPI
Refactored interface HasAssociationRules to HasRuleValues
small refactoring of the Unity3dBUilder
"Sample refactoring, moved the event and command classes to the api package"
refactoring
Refactored RestoreTaskTest to enable reuse of common features inside the class.
SONAR-2501 add preconditions and refactor some method names
TEIID-917 TEIID-913 refactoring to further simplify buffermanagement and xml stream handling
Refactored clickatell api
add - refactor craft-atom-nio component#re-design
Refactor - tidy up - better error responses
o Refactored code
"refactoring for Gipps, Krauss and Newell: model parameter dt is now taken directly from the simulation update timestep which is fix for one simulation"
"JERSEY-1694: NameBound interceptors fixed 	- Interceptors refactored (removed from MessageBodyWorkers, removed WrapperInterceptor on the client, ProcessingProviders are injectable) 	- added tests for name bound interceptors 	PS2, PS3: copyright fixed"
Refactoring - pushed property mgmt functionality into new superclass now shared by the report renderers
Refactoring of query parsing creating new OSQLTarget class to get the target. Now it's cleaner and parses correctly nested contexts. Contexts now are structured as a tree.
refactor output-reader and make test verifying the output as well.
Refactoring sur package et docs
"Refactorings, mainly package renames. Example code."
Issue 176: size can now test compatibility with images; refactored vcloud config logic; updated to support latest bluelock
Delete duplicate AllTest.java file and refactor abtest package name
Finish refactoring the config to be a single hash instead of a large collection of classes
Refactored 'ODataExceptionMapperImpl'.
renaming and refactoring. Documentation added/changed.
"refactoring, tests and logging"
refactor recorded and upcoming data load
refactor MBObjectParser into an object for reuse of FilterFactory and StyleFactory state
add detach method. refactoring of the remove() method to be compliant with jQuery documentation add test for remove and detach methods. Don't try to clean GQuery events if no one EventListener exists + correct bug in event cleaning 
Refactoring to separate Bugzilla/Github/Jira functionality
Project refactored: package changed from net.pbernard.flattr to com.flattr4android
[PLAT-2499] Refactor: move EHCachingConfigSource from master package to core package and reworked the test case not to use master
"More work toward STS-614. TypeHandlerCache is now even more general-purpose and includes the class hierarchy scanning capabilities from DefaultFormatterFactory. Hierarchy scanning can now be turned on or off, as required by DefaultTypeConverterFactory. DefaultFormatterFactory has been refactored to use TypeHandlerCache with hierarchy scanning enabled."
"Lots of API refactoring for Victor 2.0. Sorry, all."
Refactored variant selection into a new class.
Feature #5157 - refactoring of album view page (adding some string templates) (modifying homepage) (modifying the view of a photo) (fixing search result display problems)
EST-256: add reporting flags to occupancy; some refactoring on occupancy
further unit test refactoring
Refactored and improved loading of inventories and item schemata
"Refactoring, import bug fixed."
Refactoring
"Bit of refactoring, Add depend: Multiverse-Core"
Refactor out propagators class.
finished mapshard refactoring
*NON-COMPILING COMMIT* Refactoring the tool structure to the standard API/IMPL/PACK/TOOL model
HBASE-4015 Refactor the TimeoutMonitor to make it less racy -- REVERT.  Ram says I have applied wrong patch.  Redoing.
"HIVE-17069 Refactor OrcRawRecrodMerger.ReaderPair (Eugene Koifman, reviewed by Alan Gates)"
Refactored TextViewer to new EmbeddedViewer class. 
created line tokenizer refactoring classes to use new structure
DefaultTreeItem constructors refactored. Fixes #837
add SimpleBasketService and SimpleBasketServiceTest + refactor
Refactored package names
WELD-1947 Probe refactoring (simplify integration)
EST-371: refactoring fixtures in order to reuse in test
Refactoring .core to .common and updating for .api
"1. Delay calculation fixed. Now the generated delay is always within the interval <minProcessorDelayMs, maxProcessorDelayMs> 2. Refactoring to make the run() method of worker more readable"
Refactor to clearly delineate generated and custom code in case we need to re-generate due to database changes
"refactored DAOs, implemented managers"
Refactor using standard interfaces
[cexio] started refactoring the API to use application/json rather than form encoded parameters (as per the spec: https://cex.io/rest-api).  I've started with the ArchviedOrders call because that one wasn't working with the previous implemention
Refactor listener code. Add description to commands.
Refactor into packages
DataManager refactoring
app cofig refactor
Refactoring.
"Add TIMESHEET_ENTRY_SEGMENT table, Entity and Data Access Object. Refactored code to save, calculate and retrieve TIMESHEET_ENTRY.HOURS as BigDecimal. Add lombok."
Refactored the PingRequest class so that it implements a generic interface. This should allow us to write very similar implementations of the RequestTrackers for JNI ICMP and JNA ICMP/ICMPv6.
refactoring + clean code
Refactor to use stream events
Refactor to create primitive package
continue refactoring noAnswer
"Update to 0.9, refactored @FormValues"
"CSPACE-3175 Refactored *Resource classes to use functionality in two main base classes: ResourceBase, and SecurityResourceBase. Also, changed how some responses are now response code 400, BAD_REQUEST, where previously they were incorrectly sent as server error, 500.  See extensive notes here: http://issues.collectionspace.org/browse/CSPACE-3175 "
Refactoring of Toc and Catalog trees
Refactor journal to always write through contexts
refactoring of Abstract*DataSet to delete duplicate code
Refactoring
thread package refactor
Refactor to improve readability of comparisons
Refactoring to tidy up resolving and combine object factory and manager - complete - released to DSFA 14/7/05
after huge refactoring
Refactoring.
added feature to drop entities some refactoring and bug fixes
refactor class generators using asm
DDF-1584 refactored idp and sp code
Refactored AbstractDialog buttons (DialogButton)
kie-server-tests: refactoring to enable REST-only and JMS-only tests
GTFS Validation : Refactoring 1
Fix bugs in refactoring of UURI->UsableURI
"DRY refactoring of island and vehicle, and final fix to physics, at least while there is only one vehicle and island"
* Renamed FacebookPost class from FacebookPost to FacebookMention. * Refactored code to be conform with the previous change.
- Large change to add dynamic pattern loading from files - Renamed packages to be all lower case - Changed bukkit version to 1.6.2-R0.2-SNAPSHOT - Refactoring
Feature #907 : continuing the refactor of request router mechanism.
[TEST] Refactored package name - moved all tests from “org.pentaho.test.platform” to “org.pentaho.platform”
XWIKI-4619: Refactor rendering submodules to sort by syntax instead of by parser/renderer
"Refactored Record implementations and Record creation, RecordStatistics and SizeEstimators"
unit test refactoring
Port refactored Netty Channel pool on master
refactoring finished
Make the test work in offline mode + some refactorings
"backend refactoring, step2; and fix for: HSEARCH-272 Improve contention on DirectoryProviders in lucene backend HSEARCH-263 Wrong analyzers used in IndexWriter HSEARCH-271 Wrong Similarity used when sharing index among entities (sorry, it's not practical to split them)"
Refactored case handling packages
minor refactor of plugin unit tests
"fixes, refactor parser - TODO performance check"
CAY-753: Lifecycle Callback API Refactoring moving callback definition constants to the LifecycleListener interface
refactored base test classes for our own internal test suite
Refactor to bring in line with Master
"Refactored packages, updated Update and Stop form handlers."
Last piece of refactoring to remove need for `PathType` from ClusterMate
Refactor code for clarity
Refactor tests of UTCoverageSensor
refactor/organize imports of all resources. fixed a problem with the decoratingheaderreponse where plain JS was rendered first while it should be rendered last...
#NAME?
Refactored WS machinery: use more declarative approach for defining components
factory + core - REFACTOR - refactor Annotation Processors
#JC-1129. Code review browsing. Final tests. Refactoring.
"Refactor demos for readability, better comments and configuration"
ClassPathScanner refactoring to make it more robust
Refactored some code.
Refactoring
"SONAR-6065 Enhance coverage on IssueQueryService, refactor a bit"
HSEARCH-2069 Refactor test and use assertions
refactoring and reorganizing tests in features sub-packages
Some refactoring & cleanup
Refactor internals of batch lazy loading and query fetches
refactor to support generic components
Refactored the packages on several classes to be more specific.
Functionality extended to include HUSACCT in build process. Furthermore refactoring improvement of the batch process + removal of password protection (since it did not work).
Refactoring of SlidingWindow class in RR to reduce complexity and fix important bug.
Refactor activity listener option schemas hierarchy
refactoring
refactor and comments #110
REFACTORING Extracted loadTraditionalPropertyFiles and loadXmlPropertiesFiles methods
PreviewGraphFactory refactoring.
"Refactored RuntimeInvoker to use common path for most invocations, centralized handling of attribute copying from arguments"
Refactor for new master branch
Refactoring de clase CtaMayor a CuentaMayor [#25202479]
Refactor IdeDocumentListener and IdeProjectListener internals
[MSC-21] More refactoring.
"Foundation + Further work on parsing action-based extension points. + Introduction of CommandAction, which emulates the IAction interface using command-based managers + Moved the uncategorized category down to CommandManager from CommandService + Renamed all the IHandlerState related objects to be IState.  The ""handler"" qualifier, while indicating the primary use case, is an unnecessary qualification. + Made the state identifier a more integral part of how state works.  The id is used to identify which piece of state applies in a particular scenario.  This is used to distinguish ""name"" and ""description"" label state. + Refactored some common functionality related to property change listeners from Action to a new class AbstractAction. + Extracted some label parsing utilities (related to mnemonics and accelerators) from Action to LegacyActionTools. + Extracted some common constants into CommonCommandPersistence. + Created SelectionEnablerExpression to wrap the legacy SelectionEnabler framework. + Started work on a proxy for pulldown delegates."
refactoring of umltrans
Refactored statistics recording API
"This change adds support in Bogus Feed for all query types except OpenHighLowClose, to wit, Level II, OpenView, and TotalView in addition to continuing support for TopOfBook.  The change was accomplished by factoring out the old BogusFeed logic and creating a stand-alone class in core called SimulatedExchange.  Other changes include moving DateUtils from an interior class to a top-level class (still in core, might one day graduate to utils) and adding unit tests for the event classes.  The event classes themselves were expanded and refactored to support the new types of market data being requested."
Refactoring of package name 'controller' to 'bean'.
refactor api and service layers
"Implemented [JACKSON-776], refactoring of DeserializationContext"
Refactored AbstractSpringJerseyRestTestCase into a REST test library. Updated the HSQLDB test database Spring contexts in core/test-api/db.
nfs4: refactor proxy io adapter
Some transport refactoring and some initial work on Netty based SSL transport.  Remove the JMS SSL ConnectionFactory and use only java options or transport URI options to configure the SSL bits. 
Refactoring integration tests
JBPM-6510 - Refactor tests to use only one CountDownProcessEventListener (#1039)
"Added UnderlyingSymbolInfoComposite into the market data section in OptionOrderTicket; which now dynamically updates the market data for the underlying symbol. - Extracted interface IBookComposite, implemented by the existing BookComposite and the newly-added OptionBookComposite - The new OptionBookComposite contains the underlying symbo info and the contract info for the specific option specified in the ticket - Overwrote corresponding methods in ticket and controller classes accordingly - Minor updates to the StockOrderTicketViewTest class due to the IBookComposite addition/refactoring"
add operator factory + update tree structure + refactor
Bug fixes and refactoring for nearby places
"BugFixes,refactorings,unifications (XQTS/BXFS/Updates/..)"
Refactoring/Generalizing Component analysis and generation
Expiration time should not be changed after TTL updates & code refactorings
REFACTORED some code in order to have a cleaner interface. ADDED/UPDATED Javadoc
refactor
#559 - DDL - DB Migration refactor - remove rollback.ddl generation (ultimately not used by FlywayDb etc)
Refactoring of logging listener.
"refactor the old relevance query code, BIG change."
refactor list of playlists
"refactored some code, used relation instead of search all enrolmentEvaluations, create two static methods to create markSheet"
CAY-1912 BatchQueryBuilder refactoring
"Add specialised Translation3 class for 3D vectors, minor refactoring"
refactoring for Variable
srm: Refactor exception handling in Scheduler
Added statistics endpoint. Refactoring of functionality into own packages
refactoring to remove hardcoded ebay values
refactor classifier interface
[ARQ-694] Refactored test lifecycle handling using event-based approach (with chaining using precedence) instead of single entry point.
[tests] minor refactorings and test additions
inf-api refactor
[models] Refactored Models API and Eclipse integration
Refactoring
Refactored XMLReporter
Refactored sopremo schema
CAMEL-10721: Refactored a bit
Substantial refactoring after ispace analysis.
"Refactored packages, got CSS working, and xslt working in a single stylesheet. Modules list now fully working. Icons added instead of main nav links. Few other minor code updates and fixes. Documentation written in readme markdown file. Only unit tests remain."
Refactoring QueryController -> QuerySearchController
refactor
Refactoring
"Refactor the youview ingest to iterate over days, then channels, to allow updating of schedule blocks directly from the ingest job."
refactored api to separate module
Currency setup command. Only 2 left! Also refactored CurrencyDefaultID in currencyDefaultID
Feature #8017: - refactoring Calendar in order to specify the time window searched before getting occurrence list - modifying the deletion of an entity in order to avoid an UPDATE of the entity during a deletion!!!
refactor: a maven module for function-test introduced
Refactored session persistence to be it's own entity so that we may extend it. (v1 TK-08472)
"o Refactored API to move from tree to graph, thereby allowing to fix CPU/memory performance"
Refactor ringbuffer container creation
packages refactoring
"#1478 : correctly doument and rename CPC getters, add a way to retrieve the most recent root node only if typechecked (or null), and use it in refactorings."
Refactoring
refactoring
small refactoring (mostly removing extra methods)
"Cleaned up the search results Activity. Added new ""All"" search type. Misc. refactorings."
SOme extra tests and refactorings
Refactoring wrappers
JBRULES-2351 OSGi Ready  -refactored xml and util directories to avoid split packages -fixed the issue where tests would fail if multiple test classes
Refactor commands into modules Add shell-framework which builds that uber jar
refactoring
Refactor cxf jaxrs testbean of the camel-itest-osgi
"refactor how property value kind is expressed in order to allow the expression of Map<String, List<String>>"
System refactoring: changed group id from com.dreamoval.motech to org.motechproject.mobile. Final commit.
Partial in-memory data structure refactoring.
code refactoring
ISPN-4919 Refactor server resources so that the restartability is exposed as an interface
Refactor creation of DashboardWidgets
refactored a bit
Hopefully the last of the big exceptions refactorings. I went through all of the places we're adding context to our Errors object and made sure we're never doubling-up -- specifing the same injection point or key multiple times.
refactor model and add database changelogs
refactoring
Refactor example packages
FALCON-968 Remove only entities submitted by same test and baseHDFSDir usage refactored. Contributed by Ruslan Ostafiychuk
Refactoring of org.eclipse.ecf.storage and further tests.
refactorings in classes dealing with weak references in the Prolog engine and unification
refactored search requestors; now works for factory methods (with or without factory bean) as expected; fixes #299 
JavaDoc and refactoring
refactored goal classes
CAY-1911 BatchQuery refactoring - make Iterable
test refactoring
[refactor] migrate Unit Tests to assertJ
Refactor
PRFL-300 refactored ProfileService
refactor testcase
Refactoring for clearer boundaries between the core and client/server modules.
Finished refactoring.  The logic for processing an email attachment is now in the processAttachment() method of EmailAttachmentProcessor.
Refactor: getEscapedHead -> getHeadEscaped
refactor(cockpit): add multi-tenacy + various improvements
Refactor Enforcer to stateless object with ValidationResults again.
[Optimisations] Refactor responsiveness of tree nodes update and refresh
refactored the bean descriptor
Refactoring to tidy up resolving and combine object factory and manager - IV
Refactor bit utililies class
1. Major refactor of database related classes. 2. Added global teleport locations
RabbitMQ Tutorials refactoring
Refactored mslbot-api to its own package api
"lib for mapping+sql, refactorings"
Core: refactor type construction pt.3 (#340).
refactor for a more unified templating experieince
#NAME?
Test refactoring; initial work to address #236
Fix a bug in Base58 decoding. Refactor how it is handled and introduce a new DumpedPrivateKey class that can be used to load keys generated by the dumpprivkey RPC. Use a new VersionedChecksummedBytes class to share the code.
"fix(suspension/WAS): Refactor setter to ""setSuspended()"""
Refactor SQL buffering
Completed 2nd algorithm & refactored. Collapsed modules.
"Refactor the way the service of sharing files is obtained. When a ticket is fetched from the data source, additional information like the name of its creator is set to it"
Refactored to remove unncessary callback handler This is now a full implementation - it just doesn't work yet :-)
further refactorings to performance test components
Refactor payment tests to use PaymentTestSuiteNoDB and PaymentTestSuiteWithEmbeddedDB
ROO-301: Choose between data access patterns - refactored repository layer provider and wrote unit test
* Introduced configuration object * Added Indexing to solr * Refactored package structure
"WIP: refactoring to use java.util.concurrent; working, no jar update yet"
refactorings
Refactor Builder.
[SHRINKWRAP-263] Refactor methods name from addDirectory to addAsDirectory and addDirectories to addAsDirectories
Provided some new little refactoring
Refactoring/cleaning up some things in preperations for the delta-importer-2 over http integration. In particular:   * generalizing the notion of the control file   * restructuring code to have a publishers directory   * getting rid of the metadata utility which was largely duplicated code   * getting rid of the integration utility which was an odd mix of util functions basically   * made a utils file to temporarily store odd util functions
Package refactoring
CAMEL-1459: Refactored type converter to allow returning null and introduce getMandatoryBody. Fixed CS.
"andrupal-dao tests, added autowire support for Id fields (IdFieldName annotation) in DrupalEntity, added getAll and saveAll api calls for GenericDaoImpl, refactored GenericDao so that it's mockable, added pom file to parent project for cobertura and mvn site generation for subprojects."
Refactor Spring-Reactor samples
HUGE Refactor of API. 100% fixed MD support. Most API function now require a String/World world variable to be appended after the String/Player pName/player variables in the method call.
Experiment creation + refactoring Added hardware selection into experiment creation. In process refactored displaying and filling lists of detail records and package base was canceled.
Refactoring of snapshot event structure
62654: ConcurrentModificationException in Rename Method [refactoring]
SONARDOTNT-274 Refactor the Gallio Plugin
[MOD] GUI: Various refactorings in main and popup menu structures.
major refactoring of BootstrapDeployer
Javascript: refactor out getting the scope and importing all classes
moved testMapLoaderLoadUpdatingIndex to MapLoaderTest class and refactored
Extract Interface Refactoring #869
[PLAT-1296] Refactor time-series master; Rename history request
EST-792: refactors LinkContributions into a mixin (Object_links).
API JAVA for chouette model : refactor tests
Refactor for customizable testing extensions.
Refactor creator/owner/modifier code (#592).
refactoring to utilize MBean Utility in EJB Monitor; renamed Entry Application Manager to Entry MBean; renamed Entry Application Manager Server to Entry Application Manager - rjrjr
package structure refactored
Refactored similarity service. Updated spring configuration to use Java configuration classes.
"remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
Refactor BusResource --> StopResource
Refactoring of packages.
refactored cursors to improve re-use
refactorings & cleaning
"Constructor refactoring SPARQLResourceBase fix: when requested media type is RDF or SPARQL results, endpoint is loaded from config SPARQLEndpointBase.loadResultSetRewindable() fix"
Stone block place/animation fix SpoutItem Refactor to make more sense
"HV-347: Refactored return  value validation, Implemented cascaded validation of return values (work in progress)"
RESOLVED 345232: Refactor RWTRequestVersionControl
refactored FSID and other classes...
[refactor]: extract write and send method
Refactored and improved performance of validator generator
Refactoring and support for JBehave
"ISIS-1370:  construct the aimDto before calling PublisherService.  Also refactoring property setter facet and OneToOneAssociation to follow the same general structure as for action invocations, in particular for the set up of Command objects."
Package refactoring
refactor
Content Index tests and code refactoring
datasource refactoring. works now. more cleanup with tests etc.coming
Refactor of XMPPChatClient for generality and simplicity
"Added listSpotVMRequests, some common method refactorings"
A little more Blueprints Sail refactoring.
Refactored config distribution in parts of HA. Made unfinished transaction cleanup threshold use client lock timeout (as resolved by HaConfig).
refactor
"update guava to version 17.0, refactor methods that accept InputSupplier --> Readable"
refactor  code
refactor filter rule creation to fix search xref bug
BridJ: minor refactorings
Refactoring
refactor limit order
refactor to report blockage on join
"Migrating current AIP Backup/Restore code (DS-466) from 'aip-external-1_6-prototype' Branch into Trunk!   See https://wiki.duraspace.org/display/DSPACE/AipBackupRestorePrototype for much more details on this work, and how to export/import AIPs.  WARNING -- This changes the PackageIngester and PackageDisseminator interfaces.  Any of your local, custom Packagers will require refactoring to support the updated interfaces (obviously all DSpace out-of-the-box Packagers have already been refactored)."
"Refactor tests, test switching in class as well."
refactoring
refactored index entries as index inclusions and adjusted syntax from |idx|->(foo) to (foo)<=|idx|
NG wip - made examples working again (BufferedWebResponse) - moved already migrated PageManager into core package (packageManager) - refactored PackageManager to be Session dependent instead of Application - added javadocs - changed interface names to (current) Wicket coding standards
refactor out admin tests
add :refactoring code
BAEL-838 Refactord code with Java8 examples. (#1833)
initial refactoring
Refactored value parser and added get index row for index first/last.
"o refactoring to prepare for additional options (the new options to backup archive and next build number can be set, but have no consequences yet)"
continued refactoring of gyroscope impls
"refactoring: renaming class ""ResourceResourceAgentView"" to ""ResourceAgentView"""
Refactored method (and interface) HasReasonCode#getReasonCode(int) to HasReasonCodes#getReasonCodes()
Refactor migration manager exception handling (#1089)
Refactored DefiniteAssignmentAnalysis
refactor jquery plugin example
Refactoring some admin functions to remove code we dont need anymore
Initial work on Under File System refactoring (TACHYON-221)
"#566 - Refactor internals - SpiExpression, add prepareExpression() to merge queryAutoTuneHash() and queryPlanHash() - move to protected calculateQueryPlanHash()"
refactoring: moved duplicated code to prepare sources and classes directory to AbstractModelloJavaGeneratorTest
GWT remote poller app refactor for performance and testing
refactoring
Refactored query class
Refactoring plugins
Ashish|#00|Refactoring and bug fix related to search based on namespace.
MMTM Refactoring
CAY-926 Refactoring class generator classes
"- Reviewed by Toli Kuznets per ENG-79 - Refactored FIXDataDictionaryManager making it a true Utility, ie. not creating any instances of it. - Extracted the concept of Current Data Dictionary from FIXDataDictionaryManager into CurrentFIXDataDictionary, updated all usages. - Introduced a new ""system"" FIX Agnostic data dictionary (that only has the messages we care about and has all the fields from all FIX Versions) with version number 0.0. Added it to FIXVersionEnum. Created a SystemMessageFactory to help set the BeginString to 0.0 on actual 4.4 messages. Added the version to the list of versions that are exercised by unit tests. - Updated classes to fix unit test failures. - Ran all the unit tests (public, private, photon)"
Refactor up-to-date-check
Refactored the transactional aware index
Refactor DND policies and handlers and add new DND feature
Integrated Chef refactor with Flex UI
yet another refactoring
Some more refactoring and added a first implementation for getCommittedTransaction( txId ).
refactored the way entries and statuses are fetched
XWIKI-12917: Refine the refactoring job group definitions to allow for parallelized jobs on non-overlaping paths.
Refactor magic branch values into MagicBranchInput
Further refactoring work for submenu support No submenus yet but infrastructure to support it is there now. Version => 1.9.0
First step of refactoring utilitary package location: move the utilitary classes from com.silverpeas.util to org.silverpeas.util
refactor DoubleScalar to Scalar (breaking change!)
Refactor entities
refactoring prior to introduce better modifier support
"upgrade to httpClient 4.3.x, refactoring code"
#NAME?
tools: notifier: Refactor model and DB mapping of eventNotificationMethods.
"UI refactor for fusion chart project: use normal composite for previewable subtask to resolve scrolled composite issue, so TaskSelectType and TaskSelectData can take up more space."
CAY-1911 BatchQuery refactoring - make Iterable
Refactor how entity skins are set Remove entity manager Update EntityInformation as needed Expose API to set entity skins
"refactored, moved common subclass methods to upper class"
refactored initial conditions
Server-side refactoring to the new JAX-RS API.
Refactored message sender and receiver rather using endpoints
#JC-1261 Refactoring
enhanced sorting of nodes in outline view; refactored BeansJFaceNodeAdapter into a LabelProvider; fixes #201 
Refactor package name to reflect the 'eduzen' origin.
JBIDE-16375: Refactoring
Refactored BaseCollection to top level
Refactoring.
Support for annotations refactored to work on top of the programmatic API
Refactoring of selections framework + tests.
StoreFactory can pass AddressFactory now
"Refactoring: Split KeyDirectory into PrincipalKeyDirectory subclass and KeyDirectory base class. refs #625 Currently the KeyDirectory class also stores links in the directory under principal names. This refactoring splits the basic KeyDirectory funcionality apart, and moves all the principal name aspects into a PrincipalKeyDirectory subclass. This allows reuse of the KeyDirectory class for applications that don't need principal names."
Refactoring to support new test cases in localdiscovery (new) test bundle
"XLC-223	Code review, documentation and refactoring if needed"
[JBRULES-3668] refactor KJarBuilder and KContainer features in a single class
"Major re-write of ReferenceManager. The refactoring included moving little-used WikiEngine.scanWikiLinks() to ReferenceManager.extractLinks(). This method should never have been in WikiEngine to begin with. ReferenceManager is also completely ""unhooked"" from FilterManager/PageEvent events, and instead listens to (new) ContentEvents that are emitted when JCR events happen. This is much, much cleaner and will allow PageRenamer to be eliminated Real Soon Now (and moved to ContentManager, where it belongs). SearchManager is similarly unhooked from FilterManager and listens for ContentEvents. Among other things, this also means that saved pages won't be indexed twice. 10 failing unit tests remain in ReferenceManager, and a few bugs still need to be pounded out. I will make one more major checkin of ReferenceManager, soon, to fix remaining tests. Overall passrate is now nearly 93%."
Refactor some code.
[PLAT-5535] Refactored the bond futures (major currencies type) methods (security and transaction).
MonitoringCapability refactoring
"Implemented strsplit(), refactored other methods to use the @Recycle attribute"
77938 Move Instance Method shows referenced field twice in list [refactoring] [move] 77653 Move method does not work with List<Integer> in method body [refactoring] [move] 77635 Move method uses wrong target name 77631 Move method can result in uncompilable code 77461 Move instance method: strange check boxes [refactoring] [move]
Merge refactoring
small refactoring
https://issues.jboss.org/browse/JBPM-3486 - missing InputSets https://issues.jboss.org/browse/JBPM-3490 - missing OutputSets Also refactor properties adapters
"Updates to the Biojava code to include imporved handling of Entity information. A test has been included to include entity information testing. The way entity information was compiled has been changed so it is included from multiple sources in the mmCIF The type ""Compound"" has been refactored to ""EntityInfo"""
[BZ 802544] Refactorig inventory summary and drift compliance reports code
refactor logFilter
Added file connectors and refactored somewhat
Enhanced and refactored ExamplesTest
Refactored UI addon
"-Refactored (renamed) v3 security model methods to make more senseDavid Hustace"
Feature #907 : finishing listing the suggestions not published (light code refactoring) (modifying defined user role access)
[FLAPI-114] refactor
"Refactored to org.jboss.forge.furnace, org.jboss.forge.test"
Lots of cleanup and refactoring and testing.  Arrays are solid
[nobug] Fixing up EditModel refactors
refactor
More refactoring of the factory api. Added DAOBase helper.
code refactor
PLFM-1326: EntityBundle in repo. Refactoring to Manager-Service-Controller architecture
WebUI:: More refactoring.
"ServerNodeDatasource has been split into two separate, AgentDetailView added, some refactoring of existing code"
Refactored SessionConstants to simplify search for usage of session.
Functional refactoring of OntologyProvider
Refactor: Berserk-based Searchers now implement AutoCompleteProvider
JC-1375 A little refactoring.
refactored method names inside the entity config
HSEARCH-1907 Refactor some JMS integration test helpers to be reused by the JGroups backend tests
"nullable attributes initial implementation (with marshaling, transformers, but no repository generation touched) couple of refactorings and fixed previosly ignored tests refined generation of marshaling contributors (due Eclipse incremental compilation issues)"
minor refactoring: dir -> path
"Standalone Atlas: refactoring to make sure everything uses new package name convention.  Only outstanding use of uk.ac.ebi.microarray.atlas now is in the model, can't change this yet as this would cause conflicts with the version of the model that is there already."
Refactor of annotations.  Almost there... still need to add arrows and bounded annotations back in.  Also will move all of the JPanels to a separate directory.
"[SSHD-235][SSHD-287] Refactor client side authentication API, support partial authentication"
Huge refactor of how SetupTeardown proxy talks to the nodes before during and after session. This should prevent a lot of thread locking when video start/stop/update happens.
Refactored some interfaces and abstract classes
minor refactor to put the language POJOs into a separate package
[SHRINKWRAP-140] Unified entry point for DependencyResolver creation; refactoring to simplify and separate the API.  All tests passing.
#NAME?
"refactored Hits into the org.neo4j.index.impl.lucene package namespace, to ensure it is included and avoid conflicts with lucene itself (which had dropped Hits)"
Database schema init and refactorings
[US 6] Starting to refactor UpdateResourceConfigurationRunner for raw config support and lots of refactoring.
"Refactoring service / controller hierarchy. Instead of using org.deegree.controller.XYZ, the controller (protocol-specific classes) are not put below org.deegree.XYZ together with the reset of the service classes."
"finished refactoring for sopremo-cleansing, ignored InterSourceRecordLinkageTest>>shouldAddSingleClusters and IntraSourceRecordLinkageTest>>shouldAddSingleClusters"
Fiji Build: refactor a bit
Refactor configuration
Refactoring Attributes management
"Improve documentation explaining why decoding is being done when and where it is. Refactor individual logic blocks (fetching the ERAttachment, evaluating if a request is legitimate) into their own methods to make code more digestible and better encapsulated."
Refactored to work with JavaOperaLinkClient library. Enabled building and packaging with Maven.
Remove more deprecated methods and refactor them out of existing code
ModelXSLTWriter refactoring based on state resource
Refactored asset bundle reading code
[Spring Boot] Refactoring.
Refactored pkcsPkiEnvelope.
Refactore into various Maven packages. Got rid of Ant
Fixes #6020. Creates a base class for all CompletableFutures that handles cancellation and callbacks execution. CompletableFutureTask refactored to remove the extension of FutureTask - this way we create less litter and get rid of double state management.
"Partially refactor SmartStringBuilder, draft more methods"
some QueuePool refactoring.
Committed Refactored ForkJoin code
Added SequenceFileDumer - bin/hama seqdumper Refactored PipesApplication w/o peer object
- moved run() methods from MapStub and ReduceStub to MapTask and ReduceTask - changed map() method in MapStub from private to public - adapted MapStub implementation in examples to change in MapStub - move iterator interfaces from pact-common to pact-runtime - adapted runtime classes to iterator refactoring - move stub tests from pact-common to pact-runtime
exception config refactor
Course and CurriculumGroups refactorings
"More refactoring, Schimmy implementation."
MiniMaven: refactor a bit for readability
refactoring  CvTemplateController
rsa refactorings
added editable row example and ace:printer showcase.  Added printer icon image.  Refactored Vehicle Generator & DataTableLazyLoading classes
fully refactored Blueprints for new Vertex methods.
refactoring
Refactor execute path and add debug logging.
core: UpdateStorageServerConnectionCommandTest refactor.
refactor cards to use supertype enum
refactoring : move audi behaviours into the audit subpackage and interceptor to aop subpackage
"[Bug 786416 - Map configuration properties not shown in correct order] Another check-in for this. It seems more code is dependent on an ordered list of map properties than originally thought.  All of this code was in danger of getting an unexpected ordering of map properties. Refactor PropertyDefinitionMap.getProperties() to return the ordered set of map properties, and provide a new getMap() method to be used as needed. Solidify by making it clear whether the calling code is getting an ordered set of properties or accessing the unordered Map. This hopefully will fix a couple test failures and also prevent other potential runtime issues."
Refactoring and enhancing ReservationEventStore
"Add ScanRanges class to abstract CNF of scan ranges, use CNF to form start/stop of scan, refactor key range setting/building to ScanUtil"
more CRS refactorings
Started to refactor Nephele channels
#POULPE-483 Some refactoring 
bug #5154 : incorrect sender for pdc notification - taking the opportunity to fix a little problem around the footer of the mail sent by delayed notification mechanism - refactoring the inheritance of created PDC user notification classes and renaming them in order to be homogeneous with the existing ones
Refactor service batch building
Added Behavioural patterns for IA. Had to refactor Actions
"api_refactor: capacity, hypvsr, alert and cert apis"
"ACT-119: Add web service - Create message, structure classes. - Improve parsing to handle itemDefinitions and structures. - Add a first version of the test for the web service example. - Refactor WebServiceActivity class."
Begin refactoring SymbolTableEntry
Refactor code to make it more flexible and easier to understand.
Massive refactoring of the cache loader strategies
"some minor refactoring in LAP_ImplBase package. Mostly cleaning, and removing old/unused codes. ."
Refactoring to extract CM adaptation code from GBM/DRF to ValidationJob.
"Refactored MessageBox, adjusted code to match new formatting guidelines"
refactor create sentence mtehod
Refs #3123: Hide Delimiter checkboxes (rather than just disabling them) when importing Excel files. Some refactoring.
Refactor - moved MistmeadowWeitchEffect to shared area
minor refactorings
Refactored message transformation into reusable class
refactored SizeLimitException class
frontend: refactor VmListModel#onSave method
Refactor com.gpm.mbean.shop -> com.gpm.mbean.site
"huuge refactoring to support either direct db retrieval or file import for ae1, also file export for ae1"
test refactoring
Bugfixes in MusicDirectoryScanner; Uniqueness-Constraint in Song; some refactoring;
Assists refactored
"Revert ""Revert ""Merge remote-tracking branch 'origin/feature-integration-tests-refactor' into develop"""""
databeans refactorings
 ItEr19S10CUIntroducionPartesTraballoManualmenteItEr18S11: Refactor Grid to Listbox (WorkReport)
Invocation processing refactorings and impl. related to async processing support.
JBEHAVE-492:  Refactored Embedder and StoryRunner to use InjectableStepsFactory to create steps instances per thread in the runner context.  If the InjectableStepsFactory is not set in the Embedder or ConfigurableEmbedder it will default to using the CandidateSteps provided and instantiate out of the story run context.
"One last refactor, change setSelectionInEditor to setSelection"
major refactoring
Fixed a bug in Extract Function refactoring.
Refactor matrix testing
"Refactoring following the promotion of embedded class o.a.c.m.transform.FastFourierTransformer.RootsOfUnity to standalone class o.a.c.m.complex.RootsOfUnity - computeOmega(int n) now computes exp(2 * pi * i * k / n), k = 0, ..., n - 1, instead of exp(-2 * pi * i * k / n) (which was more natural for FFT). - isForward() does not mean anything outside the FFT context. It has been renamed isCounterClockwise(), which refers to the way the roots of unity are ordered. See MATH-677."
* Major refactor in tags and their transformation * A little documentation + tests * Removing commited .class files
refactor builder
refactor
Refactor of addon-security
JNAerator: refactoring of fake ptrs
HIVE-9690 : Refactoring for non-numeric arithmetic operations (Jason Dere via Ashutosh Chauhan)
Refactor a bit.  Prepare for multiple request parameters.
refactoring: split methods
"ISPN-4272 Refactoring of ISPN Server Testsuite 	    Thread.sleep()->eventually 	    Thread.sleep()->sleepForSecs() 	    Some package renaming and structuring 	    Refactor REST security tests 	    Formating in infinispan configuration files 	    Change to rest security xslt transformation"
"Revert ""Revert ""Meta model refactoring"""""
continue refactoring of clientCustAction - refactored editOfMFI information and fixed failing acceptance test
Refactor of Animation constructors and fix of ability to play a game without a name
refs #111 - identity management refactored
"Refactoring of several methods in User system, documentation and bugfixes"
engine : Refactoring in accordance with vdsm patches
refactoring
feature #1266 : Refactoring for test purpose : now we can change the AttachmentBm implementation in the AttachmentController
small refactorings
#NAME?
refactoring of AsyncBAMProducerPool to be a CDI singleton
"Refactoring to make #815 cleaner for 2.6 (and remove 2.5 work-around, annotation from ObjectNode); also need to move #636 fix along since it will be triggered at bit later point."
refactor package
"Bug fixes and support for mutually exclusive options.  Still a bit rough, but will be easier to clean up after a walker refactoring."
refactored routing
Resthub-core refactoring
Finally refactor Initializer away.  Cleaned up CollectorInterface and CollectionSet just a little
Refactoring SVS
Stage 1 of massive Variation/Genotype refactoring.
added spike of a UDP server together with applying the transport refactorings to the UDP transport
Major refactor to the liquibase tasks
Refactored code.
refactored
Initial cut on refactor ui for new MembershipCriteriaDTO.
refactored programs related to template builder
more data server tests and test refactor
refactoring + context on the story
core:refactor: Refactor code to be reused in future patch
Refactoring to remove final
"Added maven wrapper, make tests run again using in-memory h2. Make the fetcher auto-register everytime for the lessons. Some refactoring"
refactored the name
fix(engine): refactor incremental->retry intervals
refactored kwxsync commands and corrected getters for KlocworkXSyncConfig
refactoring 
[refactor] use picocontainer to instanciate jenkins components
refactored tests into project
- Eliminate warnings in tests. - Refactor C3P0ConnectionFactory while I'm here.
Refactor Main test class to have higher abstraction
Refactored JMeterArgumentsArray to use a ProxyConfiguration object
more refactoring
refactoring
refactoring
Refactoring to make Blueprints into a Maven multiproject.  Module structure is now in place.
Refactor TextureLoader
PatternBuilder refactor
Issue 101: refactor client examples
SPARQLResourceBase refactoring
"Introduced DmObject, refactor decorators and test"
Refactor CaseFormat
refactoring of the state
Preview modules refactoring. Add PrviewModel for storing supervisors and workspace's preview data. Change controller to maintain models. Update UI to use model instead of PreviewContoller by lookup to get current supervisors. Update UI controller to refresh PreviewNode when worspace changed.
finish refactor
add testcase & refactor
refactoring
Emails Refactoring    - Creates Messages at Vigilancies instead of Emails    - Changed createNewRecipient to newInstance (name convention)
rename and removing routes refactored
refactoring done:  Now is possible to redefine serviceArgs...
Refactorings for bug 342302: Move AdapterFactory into application scope
"refactored project structure - api moved to impl, folders renamed"
refactored the split tests to remove code duplication
REFACTOR: BDBMap package moved: org.archive.wayback.core => org.archive.wayback.util
Refactor DatabaseMetaDataSupport into Dialect.
[PLAT-1152] WIP - some more refactoring of market data providers; adding Spring infrastructure
Refactor SyncBeanManager to use type names and not types themselves for lookups.
Check: make a little refactor
More refactoring of dynamock package
SONARPLUGINS-1 : GWP API refactorign and small bugfix when no data in DB
forum tests commit + refactoring
Refactored vaadin-jmxconfiggenerator to use classes from core/jmx to fall back to the platform MBeanServer when attempting to connect to the OpenNMS JMX service.
CheckIn: Fix bugzilla bug 290225 Refactor the codes for the script data set output columns page [18267]
"EST-973: refactors to use Country rather than ApplicationTenancy wherever it appeared in the UI, and also anywhere that we used to call ApplicationUser#getTenancy(), we now infer from the atPath."
tr(Structure) Refactor connector structure (#3)
Provider refactoring
"NXP-14008: refactor EP to setup elasticsearch, providing either a local or a remote config, removing controller"
STAT-94: Refactored reports-related source code and resource bundles
[REFACTOR/MOD] Refactor the kit method to be able to maintain it easilly. Added Enchantments to kits Fixes #355 Added Durability to kits Fixes #56
Refactoring roboplexx and HTTP server to run in the same service
refactoring submit-topo to submit to cluster or to run local (when args specified)
"o added a lot of converters, and some more tests o now the property override mechanism works o refactored api somewhat to make it easier to understand o refactored the builder, so that the fluent api stuff did not leak to the public and spi apis"
EMBRYO-22: more package refactoring. Also enabled AIS feature for dma user again. 
refactor package
Refactor Endpoint logic
*NON-COMPILING COMMIT* Refactoring the tool structure to the standard API/IMPL/PACK/TOOL model
"remove @JsonIgnore, remove inheritance of KillBillObject (auditLogs) and refactor worng property names for json building"
refactoring
Major refactoring of FormModel related code: * Reorganized interfaces and implementations * Reorganized package structure * Improved JavaDoc * Introduced validation abstraction * Removed dependency on Rules for validation * Dirty tracking now works for unbuffered form models * Dirty tracking now fires property change events * Revert now works for unbuffered form models * Improved unit test coverage to about 80%
Refactoring of the repository to support Apache Maven builds.
refactoring...
Refactored the preferences stuff so pretty much anything to do with preferences lives in the preference package.
refactory
minor test refactorings for type-related tests
Refactoring: added SettingProperty class (changes)
refactoring
Refactoring preferences organization.
refactor
Refactored main draw method for Modules
"much refactoring of REST index apis, using new index api."
Refactoring and tidying
"Minor change: - refactored some code about the deletion method and its validation, to give more explicit messages and reuse code"
refactoring proxy tests.
"metamer: queues: refactored tests, facelets and clientTimeWatcher"
Small parse test refactoring.
RAVE-631: refactor Page into interface based pattern
Some major refactoring of RPC code.
Issue 61: refactored core S3 to allow different error handling and xml parsing
[refactoring] Separate in more methods to make easier to use for different use cases
Refactored and added output adapter
*renamed packages structure *refactoring *connecting setup and serverSocket
"on feature #5084, refactoring file-based fields to use AbstractFileFieldDisplayer.java"
Added ID_REFACTORING_SET to API (JavaUI)
refactor(cmmn-assertions): improve upon idea of static entry point classes - without deprecating anything
Refactored to make it easier to test with multiple MQTT client providers
Added a margin parameter to the rest service (OBANYC-357). also some of the refactoring i had done a while back when i used the zxing library.
"JBEHAVE-311:  Refactored InstanceStepsFactory to required Configuration to be injected, in line with other factory implementations. Updated javadocs."
"refactored PA updaters, including a schedule-filler for the complete update"
added a jira possibility plus some other refactoring
Refactor Vertx samples (#1554)
dcm4che/dcm4chee-arc-light#651 : Refactor STOW-RS tool
Refactored TrackIO to its own class.  Wrote a utility for rendering a minimap track reference sheet.  Added piece preview to the track editor.  Fixed some bugs in the track editor.
kie-services-tests: fixing tests after AdministrationService refactors
Added a Thucydides Ant task and refactored the reporting to use Java 7 io
"packages for mobile and desktop kitchensink versions refactored, testng suite files altered accordingly, selenium version property removed from kitchensink pom.xml as it is redundant"
Mid refactor for global parameters
Refactored name to Multiverse-Inventories.
Package refactoring
tests for a4j:ajax refactored
Continuation of major refactoring to commands business-logic regarding bugs triggered by unit-testing. Updates #10.
REFACTORING Revisited method factorization in order to avoid code duplication
refactoring
484359 Refactor marker resolutions and quick fixes
CheckIn:Refactor OLAP engine codes.
small client driver api refactoring and adding licence header + javadoc
PlotCommitList: Refactor lane creation and position allocation
TURMERIC-1555: refactor code for easier maintenance.
Refactores the ITextFlow and implementation to package named textflow
"Discovery with working correlation, SoaNodeId & test framework refactorings"
[DOXIA-184] make parser emit tableRows() correctly. Refactor some private methods for code readability.
"major refactoring, bug fixes."
Distributed: refactored the entire locking system to have true parallel transactions
NXP-12479 refactor tests
Start to refactor index page
Refactor database helpers to work with history
refactor
refactored common helper methods for working with cxf into a cxf-utils helper jar
CDI OpenOn test correction + huge refactoring of all CDI tests
Refactoring changes for market data (approved last week)
Refactored and split ItemSessionControl: cleaner.
Refactored ResourceLocator as separate bundle
refactor persisting code into the provision service
"Moved out not-current-store-version check, so that upgrade can be done, into StoreFactory. Because previously NeoStore we instantiated first so the check was there. Now it gets other stores injected, which of course have been instantiated earlier and already run into the version mismatch"
"ENH: DAO refactored with tests, Service refactored, M:N relationship between Biobank and User, M:N relationship between Project and User"
Refactored listeners into separate package
BACKLOG-1644: Refactor IAnalyzer lineage API to be more generic
Refactoring core package naming to make function more obvious.
Some refactoring.
"Core: refactor storage layer, pt.2 (#391)."
"big refactoring including data set based plugins, adapter first approach;"
Minor refactoring
Reflecting the user interface refactoring in the rest of the code base.
Refactor: extract toString() method.
"refactoring cuke step definitions, adding profile for integration testing"
[core] Refactored generators
"Refactor the CustomerStateRequestProcessor to use the session-based customer until that Customer has been persisted. Once persisted, the Customer is removed from session and on subsequent updates the CartState is also refreshed."
"- refactored/restructured AbstractApplicationPage - introduced PageComponentPane interface - introduced new ApplicationPage implementations: 	- TabbedApplicationPage 	- FlexDockApplicationPage - updated DesktopApplicationPage"
"Refactored Message to have a subType property Made getType and getSubType abstract in Message Implemented getType and getSubType in ChatTextMessage Made RosterMessage abstract and implemented getType to return 'ROSTER' Created RosterAddedMessage, extending RosterMessage,and implementing getSubType to return 'ADDED', also added a userName property Created RosterRemovedMessage, extending RosterMessage, and implementing getSubType to return 'REMOVED' Created RosterContentMessage, extending RosterMessage, and implementing getSubType to return 'CONTENT' Refactored PresenceMessage due to Message refactoring Refactored ConcreteConversation to implement new roster message types"
refactored a whole bunch of the foreign source and requisition stuff around to use the new Requisition object in place of the ModelImport object
Refactor Shared to be JsonUtil and expose a proxy binding function
"Refactored IndexerManager to use new command line flags '--all' and '--daily'. Now one of '--all', '--daily', or '--cores=xxx' is required; there is no default behavior if no arguments are specified. Also refactored tests and wrote new ones to reflect the additional arguments."
Refactoring : AddressType => ContactType.
#NAME?
Refactored naming
marshaller refactoring
Refactored BearScript - now script is run in a single thread for each session (draft).
Refactored and extended test of logical evaluator
page-fragments + metamer: hotkey refactoring
Some changes; Saving while I try and fix ChannelChat on my computer... (Refactoring Screwup for the win!)
refactored test for expiration delay of entries on backup partitions cont.
Refactoring in jms transport to implement properties as map
Refactoring of packages structure for managed beans.
"Added UserConfiguration, refactored auth into own package."
Further refactoring: Introduce Parser base class.
Small refactor
refactoring and fixing some some bugs
"SEAMCRON3: Working through module handbook guidelines and checking compliance. Some refactoring going on as well, plus removed the user guide (will incorporate all into the reference guide)"
refactor
"* Support for theme localization * New files module, with support for permanent files events * Some refactorings in the theme module"
refactoring of hermes classes Public API for JMSConnectionHolder can be used in groovy to access queues and topics
Refactorization - introducing types
refactored the com.fusesource -> org.fusesource
ecologylabConceptMapping refactored except training part.
Improvements to concurrency related test results and refactoring of a converter class
Refactored all Maven modules
Refactored OrderProcessor into Engine.
Refactoring completed (for today).
Refactoring and Testing Items
JERSEY-2277: Cleaned deprecated APIs    - MVC refactored in order to remove resolvingClass    - migration guide updated
refactor method name
Remove system.outs in tests; refactor rules
refactoring
Refactored actions the Nephele streaming plugin can take to achieve latency and throughput goals
Refactor time-zone locking to use atomics
refactor drivers
major refactoring of parser and lexer
refactoring
o code refactoring o changed error message to debug o improved error messages
Code refactoring (sugarcrm plugin).
Feature #1710. Refactor the base code for testing the REST-style web services in order to simplify the tests of the REST-based web resources in Silverpeas. The web resources on the comment and on the PdC classification are modified accordingly to support the new way to do unit tests. Add new unit tests on the PdC getting (to classify or to update the existing classification of a content)
"improved unit tests for metric, some refactoring"
#106 began to refactor codegen logic to own modules
fixing problem with null pointer; refactored class to be more readable
"#411 - Refactor AutoFetch, rename to ""AutoTune"", store/load tuning and profiling as XML"
refactorings
IDE-1432 refactored the MobileSDKLibrariesWizard settings mechanism
Correction after refactoring Rest service method
"this doesn't fix anything but it refactors it to look like what AdministrationView code will look like. because the authz check is async, the treeGrids collection isn't populated at the time we need it. this should be fixed in the future"
Refactored: avoid *Impl / BindingRepositoryImpl
more refactoring towards a cassandra abstraction
"added support for each/else; refactored condition handling; 'if', 'unless', ... are required to have blocks; enforcing correct order of 'if', 'else if' and 'else'"
Added CAS support on CAS AOP module and Refactoring on log-in strategies with new  Startup Strategy Module
refactorings wegen geänderter packagestruktur
Refactoring of filters to make better use of inheritance hierarchy.
Fixed bug where rulesets were not being disable properly.  Also added comments and refactored a little.
GTNWCI-44: Refactor code of WebAppContext to enhance reuse between containers
Refactor (simplify) interfaces
Refactored
"Refactoring, moved most operations into CompositeTypeUtils in order to make it easier to use to construct composite types outside of the comparer class, added boolean type"
"cleanup, refactoring"
This change refactors the DataExportTests for gene pages into a more reusable form in preparation for adding phenotype page tests.
refactor TSP example to use Depot and Terminal
Refactored the roles handling
- refactored packages to minimize package cyclic dependecies - removed XmlConditionConfigurationException -> use XmlConfigurationException instead
Refactored the linkdConfig
Code refactoring
refactor(engine): complete remaining review hints
Rename OptionsFileUtil to OptionsFileUtils. #rename #refactor
"Refined implementation of story 679 (view loan products) to conform to acceptance test descriptions. Renamed freemarker pages. Refactored LoanProductController to extend MultiActionController, so that it can handle all requests for loan product services except form submission, which will still be handled by LoanProductFormController."
Refactor index : use FileChannel instead Store.
core: SearchQuery - refactor ldap searches
"Container, ResourceConfig, Programmatic resource builder refactoring."
Refactor Range with lots of new methods
Refactorings:  - PreferencesDialog removed  - new class ServerPreferences
"refactored NodeFactory, added support for negative page number and and offsetId"
Refactoring quick outline (not finished).
"Completed a static analysis pass (using FindBugs and NetBeans Hints) to resolve almost 400 small issues throughout the codebase. There are still a few issues outstanding that are either presumed false-positives from the analysis tools, or require substantial refactoring to resolve. Additional issues are likely arise when better annotation is employed."
properties: refactor the way we fetch system properties
Bugzilla#289318 Enhanced cube query to support different dimension levels in cube filter. Also refactored presentation base.
Renamed AbstractLayerDTO in ShortLayerDTO Added methods to WS for handle ShortLayerDTO and GPLayer Refactoring of tests
Refactor
pool: Refactor mover execution tracking in http and xrootd transfer services
SCRUM-138 :  refactored tests
Refactor InputTextUITest to get coverage on all browsers
AccountAdapter refactored
DDF-1950 CswSource Refactoring - Moved CswSource to AbstractCswSource and added abstract method getAdditionalConsumers - Move all of the current csw source classes to the spacial-csw-common package - Created a new CswSourceImpl that implements the new AbstractCswSource
Various minor improvements and refactoring.
CAMEL-399 - a bit of refactoring to use finallyBlock instead of the misleading handleAll - moved component.uface as component/uface to make eclipse happy
Refactor
Refactor SideBandOutputStream to be buffered
ResultReturner refactor: remove ArrayResultReturner in favor of ArrayCollectorFactory in core; move rowMapperType method to CustomizingStatementHandler; rename method parameters
refactor
Minor refactor
"- Big refactor of the QuickJournal:   - Move it to it's own package org.apache.activemq.store.quick   - Brought in all the latest JournalPersistenceAdaptor enhancements   - It now uses the AsyncDataManager as the Journal implemenation which has better read performance   - Instead of forcing all PersistenceAdaptors to support external references, we now move all the message reference methods to a new set of interface class (MesageReferenceAdaptor)   - Enhanced a few Kaha container classes so that they take advantage of Generics   - Added a Kaha based MesageReferenceAdaptor impementation   - Strategy for deleting old journal log files is now in place so that disk space can be reclaimed."
[refactored] and removed factory classes for extended identifiers; instead use abstract base class for concrete implementations like ICS identifiers
Refactor the test to make the sample works again by not sharing Jersey resources
"[core, client] Fix record count property default value in CoreWorkload, also refactor throttle method in client."
refactor a bit binding provider unit test
"Refactored SAAJ implementation from two separate class hierarchies (SAAJ 1.2 and SAAJ 1.3) into one single hierarchy, using bridge pattern (SaajImplementation)."
Refactor to an ordered chain of bootstrap steps when launching the service
refactoring
Refactoring
Very light refactoring
Refactored: use TestBench in SuiteRunnerIntegrationHelper
Refactoring: modification du nom de la méthode validerFeuilleDeTemps
Refactor the name of both the directories and the artifact ids of the Blog subprojects
"refactored few bits and pieces, added tests for CRestBuilder, updated samples and site"
updated scaladocs and did some class pruning; refactored commons.testing a bit
Refactor tests
Refactoring the LibvirtComputingResource   - Adding LibvirtCopyVolumeCommandWrapper
"Complete. Issue 217: Generators do not look in Ginjector base classes for get methods http://code.google.com/p/jukito/issues/detail?id=217 NOTE: This was already solved, most likely by the processors refactoring. This patch includes a modification to gwtp-sample-tab to exercise this feature."
Refactored Variables usage in TypeContext and PropertyContext
refactor determinant code
Refactored mouse event handling to reduce code duplication and fix bug with MouseWrapperSWTBridge (calling certain Swing methods from SWT thread was causing execution to hang inside native method calls).
refactor & continue McMeta editor
"Further refactored deployment operations to support ""linking"" to existing applications when initially deploying through the deployment wizard."
mid ui refactor with subtabs for components
refactor ui
more test cases. refactored PipeClosure naming. Added JavaDoc. Put LoopPipe related classes as interal classes for cleanliness.
some refactoring
PRFL-653: refactor worksite creation component
Refactoring for new transposition mechanism.
ISIS-1396: minor refactoring of EntityPage (extract method is all).
Refactored into Checkers
aps-34 APS-APIs split refactoring
Refactor packaging to prepare for splitting into smaller jars
Datasource wizard test implemented and some refactoring done
refactor package
refactor metadata signing code
refactoring plugin
Refs #3123: Fixes bug that prevented list-type attributes from having different delimiters. Resizes column that was just edited. Refactoring.
Refactored DestinationsBean
"NXP-5053: refactoring to construct chosen Repository backend from configuration, RepositoryImpl now generic"
Refactor: we don't need the queuedSubscriptions set in ChannelManager at all. We just need to resubscribe to all of the channels in channelNameToChannelMap whenever we get the connected callback. This ensures that all subscriptions are resubscribed (with a fresh auth token) after each connection bounce. Added an end to end test for this scenario.
Refactored: got rid of DaemonParametersTest by merging its responsibilities into ProcessStartingDaemonSummonerTest and ConfigurationTest
refactor(cycle): renaming packages in cycle-tests
Wiring in a fake implementation of the refactored plugin implementation
"Bugfix: JENKINS-10638 Enhancement: JENKINS-10637 Bugfix: JENKINS-10719, including  - New feature: Ignore parent stream - can now tell a project to ignore changes made in the basis stream of the actual stream being built.  This can signficantly reduce the time the plugin takes talking to the accurev server.  - New feature: Get streams singly - more of an accurev client workaround really; the plugin used to call the server and get ""the streams"" which included absolutely everything under the sun, and this turns into many megabytes of data, every poll and every build.  This server setting says to get just the streams we care about (our stream, our parent stream etc), albeit at the cost of potentially making more than one call to the server. Enhancement: Logging improved, which should make debugging accurev client failures a little easier. Enhancement: Now weakly caches the XmlPullParserFactory. Refactor: Extracted out code that runs the accurev client command into its own class, reducing duplicated code and making parsing of command-output more consistent. Refactor: Split out many of AccurevSCM's inner classes into their own files in an attempt to make the main class more maintainable."
Refactor common logic. Don't write stdOut and stdErr xml attributes if empty
"HIVE-13442 : LLAP: refactor submit API to be amenable to signing (Sergey Shelukhin, reviewed by Siddharth Seth)"
Use a signed int for the pointers rather than a long since we can't use a 32bit address space anyway. Refactored some methods to make them a bit clearer
refactor
refactoring: a strange method has been removed from AtlasExperimentImpl class
Package refactoring related to security: * Moved org.mifos.framework.security to org.mifos.security * Moved org.mifos.application.login to org.mifos.security * Moved org.mifos.application.rolesandpermission to org.mifos.security
Small refactoring and code formating change to make the class easier to read and understand.
refactoring for notifications
More refactoring
Refactor People Project & Inheritance Projects
refactored mediabrowser view/models to clearer structure
XWIKI-11940: Make internal the classes and interfaces of the LESS Module that should not have been public and refactor bad designed code.
Refactoring obr plugin
refactored tests to make more sense
Refactoring
Refactoring
Refactor indel format to write a result every million observed bases or so.
UF-177: +added javadocs and refactored type name
Refactored main and test packages to be shorter. Added modernizr .js file to repo
refactor and debug ranking models
Topicmaps: refactor class names (#505).
SONAR-3039 Refactor the LCOM4 viewer with Ruby extension
"add menu to table, and refactor slightly"
Refactoring to the credential test cases.
Refactor generation of detailed help message to use annotations on Operands
refactored some classes into new packages. Added new Operations classes
minor refactorings
"minor refactoring of cycle API in order to display file type (content-type) information in the UI, made ContentType an enum and added a ContentType property to ArtifactType"
More refactoring
Renamed org.eclipse.jdt.internal.core.refactoring to org.eclipse.jdt.internal.corext.refactoring
#NAME?
"Refactored join, grouping, and other base operators"
refactored dictionaries portlet to use wrappers instead of model
"Some test refactoring, more builders tests"
refactor event names
Refactor: Move MethodBehavior and MethodYield classes into 'xproc' package
Small refactoring to the lock check logic. Added comments.
finish up nestedLifeCycle refactoring
Refactored
Massive refactoring of classic IO HTTP data receiver and transmitter classes resulting in 4 fold performance improvement on byte and line read operations
refactoring schema
Refactored the code to set it up in CI environment provided by travis
Refactor CompletableFutureTest
testGetTimestampWhenDepositAndWithdraw_refactor
"Refactored Reader package, AutoMapper facility."
Refactoring directory structure
#NAME?
o Removed an unecessary await call that was disallowed in Netty. o Fixed a reading bug in BlockLogReader. o Refactored tests to allow starting master and slaves at different times.
"Issue 830: refactored MediaClient to not require href arg; refactored VmApi, VAppApi, VAppTemplateApi to use urn"
api_refactor: move usage apis in parts to admin.usage
refactoring... package name changed.
A little refactoring so that it's easier to override and avoid the construction of a multi-part request when in an environment with another filter that's consuming the request stream.
Added CACM integration tests; removed queries that have no qrels; refactored local TREC integrations.
"Refactorings. Implememented subsampled reading for non-compressed imaga data (untested, no test data)."
Refactored RestServerStrategy to RestServerAction
[AS7-2636] Refactor JAXR subsystem into a deployable application - no test integration
"Working IConfigurable implementation, need some refactoring."
#NAME?
"Simple refactoring. Providing TypeInfo in all cases, if it was null."
Refactored Request object to extend DefaultDbSessionFuture to reduce object creation and consolodate functinoality.
"Tidy up save methods a bit - refactored methods, and improved exception handling"
refactored package structure
ImageServing added to ContentPatterns Refactoring
#NAME?
TIKA-1870 refactor RichTextContentHandler into tika-core from tika-server so users if needing it don't need to depend upon tika-server
Refactoring navigator structure.
Removed Kryo.reset() and added automatic context reset when a complete object graph is serialized/deserialized. Kept ReferenceFieldSerializer from allocating a new References instance for each object graph. Refactored Kryo listener. Rewrote BeanSerializer and added a unit test.
"Refactor to add a new property to identify nodes, rather than the file ""mount point"" metaphore.  This makes it far easier to query and operate on the aggregates of mbeans of the whole and subsets of the collection of jmx nodes."
"Continued work on moratorium and schedule generation. * Added unit tests and refactored existing tests for improved readability * Fixed a bug in schedule-generation for recurrence greater than 1 (e.g., bi-weekly schedules)"
ACT-741 refactoring persistence: refactoring RuuntimeSession into ExecutionManager and JobManager
Refactoring of Directed Graph. Development of Breadth-First search and Depth-First search.
Additional refactor for Java Generics
refactorings
Refactored QueryCreator by removing duplicate pieces of code as well as introduced some auxiliary methods for query creation
refactoring sample2
refactor station data structure
Refactored some method names in SwingComponentUtils.
Complete structure refactored and deleted unnecessary domain features
Refactored some of the code. Removed the Json Generator and replaced it with Podam. Added the test script to test the outputted HTML
#1153 - Refactor move SplitName into io.ebean.util
Major refactoring to SceneElement classes concrete in uilayer-core
"JobProcessor Refactor, #265. See CHANGES.md for full details."
Refactor cube query when inherited from xtab
"[MOD] Refactorings of map classes: add(k,v) renamed to put(k,v)"
refactor the State hierarchy
SB-879: Refactor the cron task modules
refactorying bus package
"refactoring - to use content handlers, much neater"
[#LIB-170] refactor org.dcm4che3.net.service.BasicRetrieveTask to facilitate generating of audit log messages from derived classes
130764: [refactoring] rename refactoring updates non-matching FQN
refactored model organization and added initial versions of linear normal
Refactored: removed classes that are not needed after dropping GData and changed query builders to depend only on RestTemplate and not on AbstractGoogleOperations. Added JavaDoc.
unit test refactoring
Some refactoring.
Reworked the rest of the code and examples after the Scala refactorings
Refactor architecture to use middlewares
[jayes] refactoring
Lots of refactoring  - Moved unit tests around  - Added support for object expansion  - Additional code clean up
Refactor non-broker ClientTests to JUnit 4
Refactor indexing mechanism to use the current state of the application instead of using registerd actions to decide wich indexing action needs to be made.
"CAMEL-4358 Refactor management code to remove cycles, introduced support package for base classes"
Refactoring of TSP applet plus more unit test cases.
kie-server-client: refactoring to promote more code reuse
overall refactoring and addition of more unit tests
Refactoring mostly for readability (and small performance improvement)
refactoring login modules tests
Refactor SAGU for easier testability
"Further refactor the new RightService, putting compatibility matters in the XWikiCachingRightService front-end"
"refactoring, calling graduate title according to given locale"
"refactor output format of ""cluster list"""
Network-refactor: move readonly interface NetworkModel into api project so that plugins can stop depending on the server project Network-refactor: accidentally injected NetworkModel twice (revert one of them)
"support remind mass message function(send/delete mass message) TODOs 1. warp EventPushFactory to parse event push message to sub EventPush class(e.g. SubscribeEventPush, LocationEventPush  and so on); 2. refactor send request to reduce too much similar code."
Bug refactoring of the management of indexes: - removed duplicated operations - index is not reloaded when is not necessary
smime and doseta refactoring
" - Refactored to own package structure to avoid conflicting with released j2ssh builds.  - Switched from ant to maven  - Removed the ant plugin code  - Added dependency on Java 1.6 or higher  - Combined common,daemon,j2ssh into a single jar (may split this apart again in the future)"
Refactored configuration and initialization out of DbMigrator into Flyway
Refactoring
WIP: Started refactoring standalone item rendering
Refactor loading of menu items
major refactoring and support to web forms.
Partial refactoring of the Database - AtomStore interface so that the Database no longer needs to know about the AtomStore
Refactored the BaseCounts classes so that they are safer and allow for calculations on the most probable base (which is not necessarily the most common base).
"Docker - add kill pulling job after test finished,code refactoring (#1659)"
Refactored FinancialCalendar to implement ImmutableEntity.
Refactoring edit date D2W component into _ajax package (and name)
refactored maven group
refactoring Tarql API\n\n TarqlQueryExecution class is the main interface now. CSVQueryExecutionFactory is used to get instance of TarqlQueryExecution
Minor refactoring
initial refactoring
AtlasProperties refactoring stage 1:  - get rid of static methods calling and convert class into proper Spring bean - replace all calls getXXProperty(name) with specific getSomeNamePropertyValue() methods with correct return type - introduce update notification API for those beans who cache property values somehow in internal structures
refactoring. change package Action class.
Fiji Updater: refactor cancel handling in the progress dialog
delete duplicate TimeoutTracker and refactor to utils class
refactoring of ws bot tests
"1) More simulation controls 2) Refactored trip status to use block status as its data source 3) Fixed a number of api fields that robert had been asking for 4) Tweaks for the inference engine, including a new (better?) motion model"
Refactoring of UI-Tests; Added UI-Tests for overrides completion
Continuing refactoring for #130. It is moved to new system and tests are passing. No new tests have been created yet and it is still messy.
All daos refactored except for the Universal ones.
"Finished Exit Garage UC, Added Gate & Sign Class, Refactored Update, Finished Tests"
"Merged in performance testing framework, pulled and refactored out of regression test framework"
small refactoring
"code review comments, minor functionality simplifications and refactorings"
Refactor stream plugin feed fetcher (B-05607)
Refactoring name of CommandDistributor to CommandDispatcher
refactorization of methods to create publications
more refactoring
"RedBlackTree: refactored rbDelete, added more unit tests"
Minor refactoring of DefaultInvoiceGenerator
#57 refactor entities
refactored package names to com.dubture
refactoring method cache. store more informations in the cache
ROO-2337: Post 1.1.3.RELEASE code refactor and clean up - simplified accesing Identifier attributes
"Revert ""Refactor toString() impl. into new method getFullName()."""
JBIDE-18670 HTML5 Palette: Palette model refactoring
Refactoring oxalis-persistence.
Refactoring
[LOG4J2-1813] Provide shorter and more intuitive way to switch on Log4j internal debug logging. Refactor current system property query into a private method to avoid duplication.
Step in refactoring of DB building
Refactored the SSH API and JSch implementations into two projects.
Refactored
ROO-2337: Post 1.1.3.RELEASE code refactor and clean up - opened up type location and removed duplicate code from GwtOperationsImpl
ExecShowlet tag refactored to ExecWidget
Refactored exception handling All exceptions now extend a new DandelionDatatablesException which is a RuntimeException A new UnknowGroupException is now thrown when a user use a group not configured in the configuration file A new ExtraFileNotFoundException is now thrown when an extra file is not found
avant refactoring des services
refactoring de la couche dispatcher et debut des enregistrements de services
Some build fixes and code refactoring for redundant router
refactor package
"Refactored ClusterManager* classes to CloudManager* to better represent what those classes do, which is manage the Server Cloud.  The Cluster naming was overloaded and confusing. Cluster should be used when working with clustered resources (i.e. management of clusters)."
Refactored
SONAR-4898 some refactoring
refactor mapping
New byteman-based tests for correct closing of the augeas native resources. The original apache integration tests were refactored a bit so that the setup classes can be reused outside of the UpgradeTestBase class hierarchy.
SONARPLUGINS-2694 Reuse source encoding to generate HTML report and big refactoring to improve code coverage.
Refactored filtering code into its own class.
[PLINK-478] - Extensions refactoring.
Refactoring. This also fixes one checkstyle issue.
BookKeeper: Bookie should allow binding to ephemeral ports For automated unit tests its necessary to be able to use ephemeral ports. I refactored the restart process as follows to enable use of ephemeral ports
Refactor after JPA removal
Refactor CodeGenerator to facilitate the addition of backend-jvstm-common
"ROO-2745: Post 1.2.0.M1 code refactor and clean up - made MonitoringRequestEditor typesafe, fixed trivial bug with parsing blank values, wrote unit test for setAsText method"
refactored DAO -> InstantiableDAO
"add method:getUserInfo(username), refactor"
refactor code
Refactored few classes.
@refactor: organize packages
some more cleanup and refactoring
Some tests added. Small refactoring
refactor packages
did some refactoring for the api project
Function name refactor
refactor method name
[misc] Replaced deprecated method calls. [misc] Use the hidden documents query filter instead of black listed spaces. [misc] Refactor HTMLCleaner tests.
Minor refactoring to clarify intent
[BZ 802544] Refactor PlatformSummaryPortlet to extend Table
More Shell refactoring compilation fixes
Added API to RefactoringContribution to create customizable descriptors
"Add CredentialsProviderImpl test, refactor existing test for some reuse"
Minor: small refactoring on internal API and improved management of mail date adding the new configurable per-profile date format
"Further refactoring of Trapd to enable moving Snmp processing into SnmpUtilsI'd finish it and check it in but Eclipse is acting flaky and I don't want to lose my work.. ;-)"
"TestRunner refactoring, part1"
"Reworked module processing Broke up AOPPRoxyGenerator Refactored ASTAnnotation, specifically getProperty"
Refactoring and attachment improvements
In progress: Using MassiveCraftCore and Allman indentation style and minor refactoring.
"Refactored, to add unit test."
ConfigResourceTest refactored
XWIKI-5554: Generalize Image support and add relative paths support XWiki Syntax 2.1 * Refactor the WYSIWYG editor client code to handle internal and external links in the same way.
Renamed RefactoringSessionFactory
Refactoring the event adapter and adding subscription event translation.
"gui fix, save fix, refactor, fixes"
ItEr60S08CUAsignacionRecursosLimitantesItEr59S08: Refactor.
"Refactoring, recursive package search, tests"
refactoring
[Consistency Predicates] Minor Change: Added missing javadoc [Consistency Predicates] Refactor: Renamed a few methods in the ConsistencyPredicateSupport API. These methods now refers to a batch of existing object ids to return.
Refactor GetOrganizationLeaderIdsByOrgId to new mapper design.  (B-07683)
Old code now deleted. Refactor completed. Still some tests to work on.
refactor
Applied refactoring of DiscoverableServer and Activator to HEAD
SGF-593 - Refactor failing client/server integration tests due to static port allocation.
Refactor AbstractDocumentsQuery to simply DocumentsQuery
"Simpler configuration, AtomPub support, refactoring."
naming refactoring
Refactor method getSpreadIndirectAdvanceAssignmentWithSameType to be used in more places
package refactoring
XWIKI-8689: Add Solr indexing daemon thread to handle the automatic indexing of documents as they are queued for indexing * some refactoring
SONARJAVA-1444 Refactor childrenIterator to return an Iterable
DocumentationDef : refactor HTML parsing : add validation checks : improve API usability : surface errors in examples.app in DEV mode
Refactoring of functionality used to code generate Java specific methods
JBIDE-18426 : Big refactoring to break project-examples dependencies
"Reorganize code, put some ZPermissionsPlugin methods behind interfaces to facilitate future refactoring."
refactor: refactor generic dao
CAY-736: Embeddable class support by Cayenne runtime (refactoring to handle embeddable attributes in select queries)
refactored the jmx of command handling into the new structure
Several refactorings made on the character model. Still I'm missing something...
Changed Lesson Management module. Refactoring ResourceAllocation.
minor refactor of Processor.onExchange() -> Processor.process() which matches the interface name a bit better (and is less exchange-y)
refactor
refactor code to use Spring
[MODEL] Refactor identifier interfaces
"iteration zero, refactor"
XWIKI-11507 : Integrate the ratings system from xwiki-contrib - refactor the ratings api so that it uses DocumentReference instead of Strings (doc.fullName) and XWikiDocument
#POULPE-380 Refactoring. Exception renamed. Javadocs improved.
"Refactor to make use of Java NIO.2, also we now buffer I/O to improve performance"
"Refactoring: ErreurLog, changement de nom de fonction ecrireErreurDansFichier"
major refactoring
More refactoring to clean up the clustering display examples
Refactoring. Property extractors were re-implemented.
Refactoring and javadoc
refactor(authentication): replace cookie-auth with X-Authenticated header
"ISPN-1815 Refactoring: integrate methods, now hand-inlining is possible"
separation of HTTP specific implementations and general API. refactored OAuth. Some package changes
"PT-3061: Annotate ORPHANET disorders with HPO symptoms - Refactored the abstract class to be more useful - changed the [not_]symptom fields to be only indexed, not stored - committed the new orphanet index - more unit tests"
"Fix RSS feed, Start menu handling refactor"
"some minor refactoring; the previous PollingConsumer wasn't really an accurate implementation of the EIP PollingConsumer, so I've renamed this ScheduledPollConsumer, then PollingConsumer is the correct name for the 'synchonous request*() methods' type consumer (rather like the sync API in JMS)"
Refactor native code and implement our own JNI wrapper around zlib.
Refactor into separate packages
Refactored for better comprehension
Refactoring of volatility surfaces.
Refactoring
refactor of the project: now master has the main uCracker app
refactor package
refactor the server plugin test code so its easier to install different test mbeans for different server plugins
Refactoring and fix for tring to write null data to a file.
refactored
HTTP client: refactored response listeners to support lambdas.
Refactored: created DaemonConfiguration and a builder for it
HK2 Factory usage refactorings.
Refactor index names in new SQL parser
90880: [refactoring] AssertionError when running Infer Type Arguments
"[MRM-142, MRM-134] remove timestamp handling and instead simply index records that aren't previously indexed. We can add timestamp checking for updating records later, but this removes the problems associated with relying on filesystem timestamps and a single tracking timestamp. Included in this fix is some refactoring to reduce memory usage, including a hack to flush the project cache periodically. This hack can be removed when the project cache is configurable (see MRM-142). This now indexes the ibiblio repository from scratch in ~23 minutes, and incremental indexing takes 30-60 seconds."
ACT-24 refactored concurrency controlling in ActivityExecution interface
major refactor of RAPTOR code
ISIS-1613: refactors the ActionParameters and PropertyEdit forms and panels
Small refactor (extract methods).
"JBRULES-1625 Create Scheduler API with JDK implementation -Basic refactoring for for TimerService, instead of Scheduler"
refactor search strategies
"IDE-1522 Refactored classes, removed stale code, fixed failing test"
FACES-1897 Develop alloy:inputDate component (Remove alloy:pickDate and refactor alloy:inputDate. Add dateSelect event to inputDate.) FACES-1895 Develop alloy:pickoDate component (Remove alloy:pickDate and refactor alloy:inputDate.)
Version 1.2.1 - Refactored to com.almuradev namespace - Changed references of PlayerInventory to match latest changes in Vanilla Signed-off-by: Steven Downer <grinch@outlook.com>
SingleSessionCommandService.initKsession(..) refactor
intermediate refactoring step
"- Autocomplete refactoring: migrated from text |,$,etc separated text to proper JSON - JSON library classes is back into project as I need some improvements to it - JsonServlet superclass for all JSON-outputting servlets"
Refactoring
"Refactored code which compiles @Bridge methods, @Callback methods and Structs to share more of the marshaling code. Value objects (e.g. Bits) can bow be marshaled and the native type is determined by the return type of the toNative() marshaling method. Enums can now be marshaled as any integer type (long, int, short, byte) and not just int. The native type is determined by the return type of the toNative() marshaling method."
removed prefix line as this can be part of timestamp format; refactored unit tests to use HudsonTestCase; cosmetics
Refactor validation function report category edit. <wenjing&sl>
code refactoring and renaming
Refactor issue indexer (project-agnostic approach)
"Packet refactor, finished network controller, bugfixes"
"deep refactoring of request handling: - virtual uri handling is now moved to a filter (was in EntryServlet) - intercept is now moved to a filter (was the RequestInterceptor servlet) - resource dispatching is handled in EntryServlet (was a separate ResourceDispatcher servlet, but it makes no sense since it was only called by EntryServlet) - Aggregator.collect is now moved to EntryServlet (since it's only used by EntryServlet now). Aggregator has been moved to the core package (it was the only class left in the ""cms"" package - MgnlContextFilter now sets the Context if missing and remove it after the filter chain (removed UnsetContextFilter)"
[MOD] Doing a bit of refactoring. Long way to go ;-)
"working on refactoring GraphOps, and adding a fluent api for configuring recipes."
Refactoring 'output' test base classes
"improvement of wrappers, needs refactoring"
"ROO-2745: Post 1.2.0.M1 code refactor and clean up - deprecated static method MemberFindingUtils#getMethod(MemberDetails, JavaSymbolName, List<JavaType>) in favour of instance method"
Cp.  Lot of refactoring.
NOJIRA incorporate some code review changes. started refactoring seed test in order to convert it to generator and import for all services
Refactor App Engine Cloud plugin by extracting a helper class.
refactor DefaultContext
refactor distr based predictor for MR
Refactor tests
first steps to refactor the database layout code to use class inheritance
"Added a test, minor refactoring"
XSITE-21: Refactored model to support generics.
refactor tx metric assets
further refactoring for Task creation
Refactored to ensure that Spring Security WebMVC works as well as Spring Boot Spring Security WebMVC
more refactoring and fixes
webadmin: refactor - rename VmButtonsImageButtonCell -> AbstractVmButtonsImageButtonCell
"For pull gridftp transfers make use of negotiate GridftpClient checksum type taking advantage of available server side checksums in 3d party gridftp transfers. Add listChecksumTypes interface to pnfs manager. For push transfers, checksum is sent ahead to the receiving end. Chimera implementation returns null disabling pnfs checksum negotiation for push transfers. Some refactoring to limit choice of checksum type selection to MD5,adler32,MD4 (gridftp2 req.)"
[Malini/Pramod] - Refactored GLIM related code in group loan creation flow - Fixed individual loan fields related validation in 'create glim' screen (http://mifos.org/developers/wiki/GLIMVersion2#as-a-user-i-want-to-be-able-to-create-a-glim-account-so-that-i-can-assign-it-to-a-customer)
Fixes ACCUMULO-310 - refactored static methids to Configurations
Start refactoring example to use new API+IMP bundles
Big refactoring improving asynch messages in PUSH mode
added support for update and delete in querydsl-sql removed AggregationFunctions removed deprecated methods from MathFunctions moved SQLTemplates subclasses into own files refactored SQLTemplates into JavaBean compliant form
"Beta version, refactoring of jannovar to include PED file stuff"
refactor project modules for documentation
Refactored public enum names: BorrowType -> BorrowPolicy ExhaustionBehavior -> ExhaustionPolicy LimitBehavior -> LimitPolicy TrackingType -> TrackingPolicy
Cleanup and refactoring for consistent usage of ArrayView in AST.
refactor: user config
Teiid 773 - cleanup and refactoring so that the assumption is there will be 2 datasources required in order to run the test.    
"Initiated as a fix for stack overflow in BugGroup.equals(). A long needed cleanup of ""priority to bug rank"" refactoring in 2.0.0. Cleaner UI separation of confidence vs rank. Different icons for rank and confidence, consistent icons for annotations in editor ruler and bug elements in bug explorer."
Refactoring
clean up and refactor
api_refactor: refactor security group (sg) apis
Extract Page and refactor Sequence.
Further refactoring of Relay functionality
OPENEJB-748 OPENEJB-1739 OPENEJB-1740 refactoring logs to use JUL and its default conf. A custom logger means a custom config so everything should be ok.
347963 [refactor] make local p2 repository index a service
Refactoring and cleanup.
Refactoring into core and ui pieces
Refactored teardownTickets -> teardownRecords.  Renamed TicketResourceCT to RecordsResourceCT
Refactoring YearlyBlog to Year
Refactoring: FileUtils -> IOUtils
Refactor a bit to help reduce redunancy from #110
refactoring
Third step in the refactoring of ResourceLocator. Replace everywhere in the code the direct use of ResourceLocator to get a property/message value by the use of the new API
[refactoring] Renamed DependencyTree#getTargetArtifact() to #getArtifact
Refactoring MonthlyBlog to Month
"Refactor, improve, make consistent and document operations"
Refactoring of core Table component to not build list grid on construction Move to explicit table configuration lifecycle Fix the rest of the list grids that were not extending Table
refactor
refactoring
"extensive url tests, slight refactorings in the code base"
refactoring a testhub for subscriber and publisher 
"Refactoring EntityStateAccessorFactory, fixed bug with GraphEntities being created outside of transaction but with original id"
core: refactor CommonVmPoolWithVmsCommand
Major refactor to reduce thread count
"Export, import refactored and minor fixes"
Refactored.
Refactor DAE to allow range-based computations
Student refactored:
refactored shardinit and login controller
"Lots of refactoring, should have committed more often"
Refactored method name and fixed tabs.
"Added missing LoggerNameUtil, moved ScanException to spi package, minor refactorings"
refactoring necessary for #464
Refactored handlers
Fixed and refactorized pax-exam test
minor refactoring to include some storage tests for levelgraphstorage
Refactored filters to allow richer comparisons
refactor to allow the flow connector to be passed in
Minor code refactorings and basic validation of 'entry/feed' tags.
CAMEL-2375: Refactored ExpressionClause to let it be reusable in builders outside the route definitions.
Code refactoring to the LDAP store. Added support for the Group type when creating Grant relationships.
refactoring beefs simulation initializer
"SOC-899: Upgrade to GateIn-3.1.0-CR01 (Fix build failed, add Clock missing gadget, cleanup, refactoring)"
Refactor populating maps through methods which could be made public later to help [LOG4J2-1025]: Custom java.util.logging.Level gives null Log4j Level.
Refactoring - Fixing some stuff in the Animation API
refactoring
minor refactoring
Refactoring part of component before starting feature #1283
refactor
Bug 246132 Refactor loader layer
"Cleanup and refactor notifd (code formatting, use Java 5 generics and for loops, use dependency injection in BroadcastEventProcessor, add test to ensure that regexp in BroadcastEventProcessor compiles correctly).  brozow will review"
fixed unit tests after refactoring of microchip potentiometer impl
Refactoring and style cleanups for PolymerPass to make things more manageable. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=115406177
HBase locking and ID allocation refactoring
Refactoring and minor fixes
"Refactor Screen, remove ScreenContext"
Refactor
Refactored the way the configuration panel works on SecurityChecks
PDF-967 package and data refactoring to aid in building out form tools.
"Ticket #1146 - Initial refactoring of ReportService.  Mainly addition of method comments and the deprecation of separate create / update methods in favor of a single new save method.  Removal of unused ""getCurrentEvaluationContext"" functionality.  Addition of ""Run Report"" privilege."
Refactored table in Payments tab.
"#61 created a custom tag, surveycontroller refactor"
Refactore Concept.
Refactoring: added Pages
"Another Zell Depot patch: - refactoring query construction; - modified collection lookup to first look up the matching primary keys, then check the cache for hits then look up the remainder from the database; - other small renamery and cleanup."
further clean up and refactoring of content assistance.
"Slight refactor, stubbed out remaining substance entities."
"refactor: spit moor-bootstrap, add moor-system"
Refactored a bunch of stuff
"refactored  Sorta and removed all ontology related stuff, only the matching related code are kept"
XWIKI-4166: API refactoring/cleanup for the Rendering module
XWIKI-3622: Add an automatic redirect when renaming a document * Add an option to the Rename Page UI to create an automatic redirect * Introduce XWiki.RedirectClass to store the redirect on the page that has been renamed or moved. * Refactor the refactoring module to be able to write unit tests more easily. * Add more unit tests.
decision package refactor
refactoring
report refactor part4
Register Vault interface directly from plugin; related changes in plugin.yml; some refactoring
"refactor cluster stop/start/delete to use ClusterBlueprint, also did some refactor on ambari side"
core: Refactor network vlan data in VBOB
phd process: refactored studyplan to support value if candidate is exempted or not
The Meek Math Refactor
[MOD] WebDAV: refactoring
refactor code to reuse the code for getting pattern
refactored undo story test
Refactor issue search stack in order to remove dependency with SearchRequestHandler
further refactoring of fixtures
minor refactoring
Refactored type reference identification and added more scenarios.
core: VmDeviceUtils refactoring
KARAF-1275 Refactor bundle modules
Second part of refactor to new scheme
Incomplete - taskRefactoring 
Code Refactored.
Minor refactoring and cleanup.
refactor serialization package
MONDRIAN-2229 - refactoring for unit tests
Refactored read service of groupings code. Some bug fixes.
SQL executors and CLI refactoring
"Some refactoring of the object model regarding Templates, Resources, and Themes."
Some formatting/refactoring.
Refactored OgreXmlLoader and Model mesh structure
Refactor Counter impl
WIP Thrift refactoring:  - Delegate ExecutorHandler to ExecutorContext
Refactoring.
Refactor - moved ChromaOutrageShamanCount to shared area
"TIKA-1702 Refactor some of the config parser loading to be more re-usable for detectors, and bring the method signature in line WRT Composite vs not (must always be composite)"
Refactoring of Java transformations into transformation series class
#NAME?
Lock down WorkflowScheduler with tests and refactor ini file parsing
SAVARA-252 refactored activity schema
refactored accessing to DB
Refactored I18n classes
code refactoring; updated ant build
Added suport for project online submission. Refactored file support to easily allow extension. Replaced dspace client references to FileManager api. Changed collection renderer to support linkFormat property
[Bug #962] Refactor addNewLineAdvanceAssignment
Massive refactoring to support different HTTP containers.  Added GrizzlyServlet and GrizzlyComet adaptors.
Refactor ResourceLoadController
"- Gene properties display refactoring:  - configurable display names and API field names  - show all available properties   - configurable ability to ignore some properties in API and gene page independently  - configurable gene tooltip properties list  - configurable gene page properties list visible by default, others can be viewed by clicking ""show more"" link  - configurable web links for some property values wrapping (like uniprot) "
[SYNCOPE-331] Refactored ResourceController#getConnectorObject for resolving - rather than requiring - the account id value
Refactored some classnames
refactoring for PR comments
code refactoring
more sse.ui refactoring
Refactor example per Tammo's suggestion
CSPACE-1518 refactoring test: authorization-mgt
refactor Supplements util
Refactor: Rename HDFPlot to MultiHDFPlot and HDFPlot2 to HDFPlot
Add in queue list items.  Delete feature in conext menu over in queue list.  Migrate from C2DM to GCM. New preference ProjectID for GCM. Refactor in notifications and preferences.
refactoring process
PRD-4921 - Refactor HTML output to allow fast-html to hook in
hdfs: refactor naming and namespaces
HBASE-4015 Refactor the TimeoutMonitor to make it less racy
Merge libreplan-business module with ZK branch. Code refactoring.
some code refactor
Unstable commit EditableElement refactor
refactor project to meet git standards
"Roy:Created CustomField orm/daos/test classes, refactored OtherClientDetails orm/test classes"
Mayor refactoring
#NAME?
further refactoring for Task creation
Refactoring for entitlement to remove SubscriptionFactory dependency
Refactor: Standalone & Extra-Curricular Approvement Certificates published
Refactor to handle inputstreams and added logging
"Refactors package names and structure to hs-hannover.de domain (including license headers, procedures, pom.xml, etc.)"
significant refactoring to reorganize modules and allow for native implementations of common key formats
Implementing some basic collision detection logic. Lots of refactorings and simplifications on classes thanks to that.
refactor package org.crsh.term.processor -> org.crsh.processor.term
"fragments + tests: new Tree fragment, tests refactored"
"A little refactoring to make it easier to override the event name lookup code and alter the order of checks (button names, path, eventName param)."
Refactors validation message generation and puts it in private method.
some refactoring
194979: [refactoring] MoveTest reveals AFE in RefactoringHistoryManager (javadoc...)
Refactoring
refactor code
"refactor PageNavEntry a bit, and fix display of node map links in node pages"
alarm and events view repaired... need to re-refactor filter code
code assist refactoring: - added MRU history for right hand sides of class instance creations   - also adds remembered types to zero-length-prefix type completions - added more information to JavaContentAssistInvocationContext - streamlined java proposals based on core CompletionProposal
"Refactoring abstracting the notion of ""entity with handle"" and implementation of update of such object stores."
refactoring + correct TU
Refactored QuestionGenerator to return QuestionSets to prepare for Sorting
"refactoring, add new config option - the size of the software output buffer"
More Refactoring of article block. Moving classes and moving away old code.
Refactored how Bro handles pointers (Ptr). Ptr is now abstract and has to be subclassed for each specific pointer type. Ptr will use the generic superclass info to determine the marshaler to use at runtime. (#229)
Fix #416 + gentle refactor of IMeasures and MeasuresRecorder  + extraction of BoundsManager from ObjectiveManager + AbstractProblem now implements IUpDown (could be removed in a near future)
"MODE-2194 Fixed a number of other issues around the DB binary store; refactored the test profiles and added a generic DB test for both ISPN and binary storage; completed testing against: H2, MySQL 5.5, PostgreSQL 8.x and 9.x, Oracle 10g and 11g and MS SqlServer 2008 R2."
"o check if plugin version is defined o refactor the report execution, it use only the MavenReportConfiguration o obtain reports list via reportManager.getReports"
refactored tests so that admin starts first via @BeforeSuite
Finishing up the refactor merging of the configd
Refactor org.metawidget.test to org.metawidget to allow testing protected methods
ActionDefinition refactoring:  - Removed ActionDefinitionBuilder in favour of ActionDefinitionConfiguration  - AbstractStageState now has a set of available ActionTypes instead of ActionDefinition.  - Refactored *State according to new AbstractStageState methods   - ActionDefinition are obtained from ActionDefinitionConfiguration based on a generated code  - ActionDefinition now uses MessageSourceResolvable to localise its label and description
BOOKKEEPER-658: ledger cache refactor (Robin Dhamankar via sijie)
Introduced mbm-hal module to support common HAL requirements Introduced mbm-testing to support common test fixtures to make API testing more efficient Refactored test references to be more portable across JARs
Improved Remove Unused Declarations refactoring.
"matchOntClass() refactoring: first check resources with gp:uriTemplate that are inBaseModel(), then others gp:Template library ontology"
Refactor variables
"Refactored parseAttrs to GlusterFileAttributes, moved and modified associated unit tests. Added static import of mockStatic() and verifyStatic() to GlusterFileChannelTest."
XHR transport refactoring and buffer alloc optimization
CHUKWA-748.  Refactor Chart and Series package name.  (Eric Yang)
Refactored module structure. Spring conversion.
Refactorizacion del método queryAsignaturas porque era muy largo.
renaming and refactoring
Refactored the typical TransactionWorker and combined Scoped Transactions into a factory
Refactor IOUtils
refactored the code of biobankconnect
test refactoring
Refactoring read/write calls to live in AutoReconnectingChannel.
#POULPE-405 refactoring and improving the tests.
* Added more to the end2end spike * Created some concrete Phase classes * refactored/renamed phases * removed BasePhase to encourage loose coupling * removed dependency on spring from events module
"Completed the locking mechanism and refactored the locking mechanism. The idea is that each proxy is associated to a status that includes a locking object (that is a bare java.lang.Object) on which the proxy can be locked on. The proxy storage drives and leads the locking/unlocking mechanism. Moreover, the proxy storage now uses the proxy status in order to keep synchronized all the proxy's structures. A status wraps the proxy, the lock, some statistical data (e.g., how many manipulation the proxy has done). Finally, the proxy storage no more uses the proxy id, but the proxy directly, from which it can infer the ID (that is supposed to be fixed among manipulations)."
forgot these two classes as part of the datasource refactoring to have separate getFetchCriteria method
[refactoring] Find installable product in seed units
Minor refactor
"Refactored ZooKeeper tests, fixed duplicate registration bug"
ROO-2745: Post 1.2.0.M1 code refactor and clean up - more static imports
packages refactored
refactor code
Refactored macOS system version detection
Refactor of GlobalIncludeManager
Refactor operators + visitors
"refactor code of bugzilla 183920,183753."
"Refactored to differentiate better between ""Screens"" (static content) and ""Editors"" (content loaded from a Path). Also added start of annotation processing for ""Editors""."
CheckIn:Fix bugzilla bug 210969: Result set sharing for XTab report item and refactor DTE to use the same temp dir
More actions in global refactoring menu
MOAR refactoring
refactor for filter
refactoring...
major refactoring to use edgeId in Path for more robost and less complex unpacking. still a lot tests not passing
Refactor Executor to spool the data in byte arrays
As usual I've done a load of refactoring in the rampart extensions package.
finished replication refactoring
Refactor IndexTransactionLogService
135326 Refactorings properties page polish
"Implemented changes for visibility issues. Fixes: 23488 move inner to top level - cannot handle some type accesses [refactoring] 41721 ""Move Member type to New File"" breaks on Inner class reference [refactoring]"
"#POULPE-208 Move from MVC to MVVM - Components page. Code refactoring, javadocs added, hotkeys works now, but not everywhere."
Some refactor to allow have an all-in-one geojson which could show clusterized on Github.
refactor
refactor the package
Fixed jbackpack update and refactored findbugs errors.
Refactored file utility method
"Refactored Exception handling, adding BroweserConnectionException resolving issue 33 and issue 34"
api refactoring
 - refactored and added more inputs/outputs to the debug page
Refactored broadcast to allow for node selection.
Refactor overdue code and introduce a new notificationQ to handle asynchronously all bus events.
multi windows refactoring part1.
* refactor 1
refactoring and reformatting
SWITCHYARD-2397: Upgrade Drools/jBPM to 6.2.0.BetaX and RuntimeEngine refactoring
refactoring- fixed name EnrolmentState
Small refactor/tidy on generating the traffic bar graph
Refactoring with MultiMaps.
refactor: deprecated MavenPluginActivator#getPlexusContainer
Refactor CouchDbObject into DefaultNoSqlObject.
refactor: moved code to retreive curveSpec names to CurveSpecificationBuilderConfiguration class
Refactor - move MoreCardsInHandThanOpponentsCondition to shared file
NXP-10110: remove TypeRef indirection; refactor SchemaManagerImpl registries to recompute everything when changed; cleanups
refactoring records to retrofit interfaces
Service and Controller Refactoring
Did some refactoring work to simplify how we deploy onto underlying Web servers. 
more refactor
"redis-robots-cache: commit remaining refactoring of redis-robots-cache, getting ready to move to public (removing old conn manager, commented out stuff)"
[TACHYON-1058] Journal Entries refactor - using jackson annotations for serializing and deserialising entries - boilerplate code removed
"Finished refactoring tests, proper transactions on service level, fixed schema, switched to hsqldb for development."
Refactored OpenStack pagination. Removed Rackspace pagination. Prefer PaginationOptions.
Refactored RouteSolver classes.
Initial refactoring of read traversal to make it easier to drop in intervalled reads traversal.
"refactor Record, rearrange dump(), change to UTF-8"
[CXF-5902] Initial refactoring to get the utility AesCbcHmac decryption working
Refactor the name of both the directories and the artifact ids of the Gallery subprojects
refactor code to make it easier to understand and use
"#485 - Created NullPaymentGateway Processor to mimic a gateway like Braintree or PayPal to have a default version available to demo site. Refactored the Checkout controllers, and split them into separate billing/shipping/checkout classes. Removing left over references to AmountItem. Adding getTotalAfterAppiiedPayments to OrderImpl to help in the construction of the PaymentRequestDTO"
Refactoring mineur + generisation des actions start phase dans l'interface Player
"Large refactoring of the UGv2 engine so that it is now truly separated into 2 distict phases: GL calculation and AF calculation, where each can be done independently.  This is not yet enabled in UGv2 itself though because I need to work out one last issue or two.  Tested on 1Mb of 1000G Aug allPops low-pass and results are identical as before.  Also, making BQ capping by MQ mandatory."
refactored
refactor tests
"TEIIDDES-1470 Refactored salesforce classes, changed salesforce profile id so that its picked up again"
refactoring
further refactoring of the authentication service
Refactor remaining protocol-plugins to become add-ons
Refactoring NPM to add recipe to node; not totally tested yet
Refactored.
Refactored the BridgeTopologyHelper inner class
refactored common reader code into a abstract base class. added some new variables: sampler.name and reader.host for mod_qos
Refactored OpenShift SWTBot tests.
Minor refactoring
refactoring cont.
Refactoring multi-tenant filters and resolvers.
"page-fragments + metamer: toolbar and toolbar fragments refactor, tests renamed and fixed"
Refactored UserController.java updateRole
refactor - mhuckaby : simplified filter methods; increased coverage
"bug 213775 - XSL specific Syntax Highlighting, Unit Tests and Refactoring"
"create RequestType, created DAO for request model, added count and query methods to abstract DAO and to all children, created new REST interface for Async and Sync Requests, defined new initial values for KB, refactored some code, documented several REST resource classes, added SPARQL prefixes, added interface to query about the KB with SPARQL bindings"
continue refactoring of clientCustAction - refactored updateMfiInfo method to move business knowledge from action class to service facade. created service for updating mfi information.
Refactored BundleRequest model to simply require BundleDirectory.
Refactor calculated subjects to be more useful
first refactorization of retrieval of info curriculum historic
"Refactored event listening, fixed group invalidation, fixed inheritance of rights from main wiki, added unit test."
"Adding test cases, substantial bugfixing, refactored pom file"
First draft of major refactoring to make it easier to support different types of evolutionary algorithms.
Refactored the HA branch to facilitate using different implementations of LockManagers and IdGenerators.
"Refactors AVFrame, ByteBuffer and ByteBufferPool. Prepare to invoke FFmpeg's avcodec_free_frame(AVFrame **) which is the new way to free AVFrames."
"Big refactor to VanillaPlayer, removed a ton of code from it! Could be very wrong..."
- Refactored the configuration module (split in API / impl) + give   access to tenant merged configuration as java objects - Started to work on default front-end theme and bindings
Refs #3123: Fixes some issues with the AttributeEditorPanel's selectors. Some code formatting and refactoring.
mover: refactor ChecksumMover
"Refactored classes into correct packages for better organization.  Also added reverse capability to order fields, however having issues with composite deserialization."
CommandLineRunner can now handle URIs again; refactored some duplicated code
Refactoring of DurationWorkedUtil and related models to a more extensible ResourceManager
HAMA-946: Refactor graph package
Minor refactoring of RI classes
Refactored Login dialog.
unit test refactoring
NAS-2384 Compiles after refactoring
Refactor annotation config
refactored for better code sharing
Refactoring: abstract IP sampler
#SB-137: Implement artifact searches via REST with XML/JSON results - Polished up the code a bit. - Removed commented out code. - Made the search produce proper results that work with multiple repositories and storages. - Refactored the ArtifactClient a bit.
"Refactor close() logic, improve javadoc"
Refactor of FileNameServiceImpl.java to start using the Pattern entity.
B-59299 - Refactoring Categories
Refactored ObjectStream to form an API and SPI. Started to add the new fluent interface for stream.observe.
Refactor DensityMapper to create writer method
test refactoring
Refactorings.
Refactoring: extracted reusable OutputSinkItem helper class to collect and refresh all compilation results.
did a lot of refactoring to make increase performance and useability
Refactoring package name for inlined objenesis
* moved hasDefaultConstructor method to ReflectUtil * refactored handling of custom and default InstanceProviders in order to allow the client to also override the primitive types
refactored to new structure
big refactoring
"SOAP-2214 * Refactored the WsdlProject class to allow creation of a project from an input stream. This had some ripple effects that required other refactoring, which is now handled. * Added CreateDataDrivenTestAction for creating a new project using a * template file. * Improved some naming"
WELD-1345 Major refactoring
REFACTOR: Updating Function method and appropriate tests
Refactor weighted choice interface to use generic
Refactor the Calendar service by merging TodoBackboneAccess with CalendarEJB and rename CalendarEJB to DefaultCalendarService (as it is no more an EJB). DefaultCalendarService implements now the ComponentInstanceDeletion interface and it deletes both all the todos related to a component instance but also the todo's attendees (later was not performed before by the TodoBackboneAccess when a component instance was deleted). Restore integration tests in Calendar and add a new one to test the ComponentInstanceDeletion implementation. Fix some shrink war builder subclasses by correcting the target file name MANIFEST.MF (instead of the mispelling MANIFEST-MF)
Refactor: [CompetenceCourse] Two FenixServices removed. Logic moved to the domain.
Refactoring tests.
CHANGED: Changed the JUpload to use the TempFileService instead of creating a task in the resource class. CHANGED: Changed DcStorage's addFile() method for URL source to use temp File service. CHANGED: Deleted old temp file task classes. CHANGED: The rate calculation algorithm in StopWatch now provides valid values when time elapsed is > 0 millis. Previously it did only when > 0 sec. NEW: Created a SavePartStream task class that extends SaveInputStreamTask. Refactored code in latter to allow for code reuse. CHANGED: Increased the width of the file size column on data files page.
"Refactored graph package to remove circular dependency, Node's no longer directly contain edges. Commented out the body of the Astar classes until they are refactored to use the new graph package structure. Implemented the initial version of the bayesian network (not yet tested)."
Refactored to consolidate satus.
refactoring: QL translation rewritten with the new model
[refactoring + new params] moved db cleanup responsibility to specific classes and added cmd line parametrization for it
Refactor realignment processor to make it possible to reset to default behavior for next peaks in a chromosome.  Mark indels as filtered when they don't make the filter cutoff.
Various refactors to deltaspike-exception-handling quickstart
Refactored dead code elimination
166186: Refactoring undo does not work if APT processor changes derived file
Finished refactoring of FX pricing using local volatility surfaces and adding new outputs
refactor(osgi): renaming packages
XWIKI-4753: Refactor old model to use the new Entity Reference classes
jetty-9 refactored jetty-http to support injected state
Refactoring and formatting
JCBC-814: Refactoring query-related code out of AsyncBucket
Small world generation changes and MatrixMath refactor
NodeGroup refactoring almost complete...
SLICE-71 logger fixed + small refactoring and documentation updated
Refactored ParticipantId
EST-416: refactored new LeasesEtcForAll
"Refactor, get rid of anonymous inner classes"
core: Refactor manage-domains permission handling (#856581)
light refactoring to make extending drunkardmob easier
Some refactoring in MultiValue Object Editor; start of ioSpecification custom property editor - simplify!
Refactor login to Mongo with and without credentials
439194  Refactor mvn jetty:run-forked so that it is configurable the same as the other jetty:run-X goals
Added URL and refactored exceptions somewhat
Refactoring forms
Preparing GraphPanelChart refactoring - it works!
refactord GaussianElimination; fixed couple of bugs
Refactor package structure to something sane!
JavaDoc and refactoring
refactor various
Refactored Principal so authentication modules can add attributes
"refactoring, simplification"
"Refactored ClassResolver, move most logic back into Kryo. Simplified DefaultClassResolver. Added registration tests. Made registering with an explicit ID more sane."
Halfway through refactoring of commands and permissions
some refactoring
more refactor of collection classes
refactoring
"Refactored the command buffer class to act as a proper queue. Issue #26, #12, #22"
#1147 - Refactor move DbMigration internals into io.ebeaninternal - change to use DbMigration.create() - initial move
refactor(task report): make duration report to a parameter
Refactoring Parsers using ThreadLocal to reduce method signature
"Refactored into IRenderer<T extends IChemObject> with modules implementations for IAtomContainer (the existing AtomContainerRenderer), IMoleculeSet, IReaction, IReactionSet, and IChemModel (all for from the existing, overloaded Renderer) (renderextra)."
Refactor model layout
refactor using full PAC now
CheckIn: Fix bugzilla bug 300766 Refactor data source editor pages' codes[21490]
JavaDoc and refactoring
HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.
Add raw metric migration code. Also refactor the code to attempt the migration operation a few times before failure.
Refactoring (moved AttributeInterceptor and AttributeContext).
"Ticket #184; DeviceObserver-interface updated, due to passing a custom DeviceEventListener to DeviceObserverImpl Refactored test-classes; adding of DeviceEventListenerTest"
Server async web app example refactored.
Introduced concept of unknown refactoring
Refactored release notes to use a single web view instead of a list view with multiple web views.
minor refactor
Refactoring the code about the query running on report document
Refactored name.
refactoring- clean up
Refactored to use a sensible MantaMetadata class.
"webadmin, userportal: Post-Frontend-Refactor improvements"
Refactoring of discovery and bootstrap in progress
"Refactor abstract classes into interfaces. Make groups be able to inherit from multiple parents, in priority order"
[JBRULES-3232] refactor asm stubbed builders to avoid dependecies with drools-compiler
improved javadoc and refactored methods according to issue #6
Heavy refactoring for 0.7.0. Please note: Code does currently not compile.
refactoring of triggers to events
Refactor top-level package
Refactor springcommerce to broadleafcommerce
Refactoring of distributed architecture to support multiple database replication
SCRUM-216: implemented preview and admin central button. Some small refactoring needed.
Refactor remaining with/has prefixes in conditions
"refactoring, introduce constants for elements, move some methods to PomHelper"
refactoring the frequency table definitions and locate them in annis-interface
Refactored layers so that they inherit from GenrealLayer
Issue 101 - refactoring fit test suite
code refactor
Refactoring FormGroups
Refactor transforms so that default transforms don't need an object factory. Better lifecycle for stepdefinition objects.
JBRULES-1375 Create initial ePDL language parser implementation -fixed bad refactor
"Refactoring: builder package added, localization package added, questionnaire element visitor pattern added."
"smartsprites: SMARTSPRITES-20: SmartSprites ant task added, some refactorings"
Core: refactor assocDef retrieval/update (#906).
refactoring
refactored mongodb operators to use Connectable interface instead of DBConnector
265188 - Refactor rename popup (border is black and bottom is missing)
Just some refactoring for choreography services (1)
refactoring: split to model view presenter (2)
TAJO-770: Refactor functions to deal with four steps
Initial 1.0 refactor check in
Fixes and refactor
"some refactoring, then added precedence handling. a little tortured"
Refactor: renaming
"[CXF-5311] Fixing compact serialization if OOB ceks are used, refactoring abstract JWE helpers, adding empty encryption and signature properties which can be used to enforce that only specific encryption/sign algo props were used"
Refactoring to make all of the table details available to the jsp
core: refactor vm jobs monitoring
Refactor the displayClassAndMessage method to a shorter name
minor person name refactoring
refactor and fix integration tests
DRILL-2413: FileSystemPlugin refactoring: avoid sharing DrillFileSystem across schemas
refactoring and Content index tests
Add logs + refactor preferences for listening for change
refactored out the parts of the code that use reflection to invoke methods in the action.  I am not sure that interfaces will work well here because I would have an interface explosion.
Refactoring based on Sonar reccomendations.
Move utilities to commmon package.  Intermediate refactoring to allow multiple replicated states per node.
Refactoring. Issues
refactoring
Refactored HTTP transports.
Refactor package.
IMAGING 4.5: Some refactoring after first image.
Refactor ListActionBean into several action beans
"[PLAT-1061] Refactor bond security search, add FinancialSecuritySource"
"Minor change:  - made several adjustments at the course and teacher results interface - added the ""links"" in the delegate result resume table for teacher and course results - refactored some code - added the validation to the delegate at login time to check if it has inquiries to answer"
Refactor Position to Square
Refactoring exception route invocation.
Updating synchronization for providing SSL warning when necessary; step 1: refactoring based in RemoteOperation (STILL IN PROGRESS)
Small refactorings Introduced HazelcastExtraException
srm: refactor SchedulerFactory
Refactoring Open Ons testing functionality
Nearing alpha version following refactor
SymbolModel refactoring
Begin refactoring errai-security into separate client and server modules. Server module tests passing.
Refactor location + context.
"MAHOUT-139 and minor MAHOUT-137: Vector improvements, some utilities and some minor refactoring of common code in Cluster and Canopy"
Refactored: name interfaces based on their role / EntityRepository
refactoring
refactoring :la metode estMoisValide est maintenant isMonthValid
Refactoring by removing service path.
PAXRUNNER-250 Refactor for maintenability
refactor membership and membership type (membershipcontroller isn't done)
"now folders and JARs containing BeansConfig files are decorated too [fixes #416]; introduced extension point for namespace support [fixes #417]; refactored BeansModelLabelProvider and BeansModelImages which leverages the new extension point as namespace ""beans"" [refs #418]"
"Refactored the FireBug support into a separate class, for better testing"
WIP Thrift refactoring:  - Reference method return class by ID to avoid cycle
Finish WINDUP-592 - Code cleanup/slight refactor.
refactoring of URI parser + additional tests
Refactored so that taskExecutor.shutdown() is not called.
"Refactored Conversation to account for a Participant (addParticipant, removeParticipant, deliverMessage)"
[refactor]move monitor to webmagic-extension #98
"refactor to move the useful code for dealing with start/stop lifecycles and the start, closed, closing properties into the base ServiceSupport class"
"Bugfixes, refactored."
core: refactoring in import-vm
Refactoring: moved JAX-RS interceptor scanning into separate method
"refactored to use page items, added page notes"
refactor
Completed refactoring of  coordinate matrix selections
refactoring
Refactored LogMessage table. It now contains ids of user and project instead of username and project attributes.
Minor refactorings in RequestHandler and initial creation of tests
refactoring: ConnectorException closure doesn't need a message
refactorings in tracer
Refactored test suites
refactor mustache into a separate things
Refactoring GetStorageStatsCommand and PrimaryStorageDownloadCommand to cope with the new design Fix the NPE in the constructor that was never used   - Basic tests added for all changes
"TFJ-689 refactor inconsistent method names - delete* to destroy*, add* to create*"
FIX #370 -Severals keys translated -Code for view plugin has been  refactored to make it more comprehensive.
CRS refactorings
refactoring serialization package names
Beginning refactoring of 'flow' and 'rdfflow'.
Reverting jmdns refactoring.
Refactored Maven-plugin-api class names
Refactor and removal og duplicate code.
"-Refactor to use InternalFactHandle - so we can directly get Objects -Remove PrimitiveLongMap from WorkingMemoryImpl, as we now get from the InternalFactHandle -beta node indexing now caches the column int  -Rete and ReteooBuilder now correctly seraliase - via the CompositePackageClassLoader -Note there are still some failing logical assertion tests. -ReteooBuilder and workingMemory actions are now synchronised via a lock on ReteooBuilder -I've added a hard coded conflict resolver, hoping its a little faster than composite."
refactored actions
"Added MimeUtil2 class, refactored MimeUtil to use the new class. Updated unit tests to use the new MimeUtil2 class"
Bug 331985: Failing refactoring test Fix and test case
refactored resolve url mapping from the Service registry to the service endpoint
"Refactored: Namen von Instanzvariablen, Methoden, Listener angepasst. InputElementChangeListener hört auf generelle Operationsänderungen"
#284 fix and refinement to wither methods for Optional + small refactoring to introduce objectsEqual/objectsHashCode templates
Adding custom Jackson Introspector to enable dynamic filters. Also refactoring tests and adding generic domain service.
Refactor lock and persistent writer to write package from common
Refactor configuration management
Refactoring
Fix utest failures and do refactoring.
refactor
Refactor and draft text UI listeners
Refactored.
Big refactoring in table conversion land
Expiration time should not be changed after TTL updates & code refactorings
refactor package
"Refactored validation of URI templates, conflicting templates and conflicting resource methods."
"Refactored rest API and remote service API, so as to allow non-rest usage of IRemoteCallable and IRemoteCallableRequestType"
"some refactoring, also add a nominatim geocoder"
"Did the refactoring necessary to get the client and server to live happily together in one JVM and both interoperate with the AWT thread in a manner so harmonious as to bring a tear to the eye. This was surprisingly much easier that I expected, thanks to my eminently sensible initial design, I'm sure. ;)"
refactor quicksort and extract partition method
"Refactoring. - Replaced old application initialization with a new, cleaner one - Heavily modified cache/database subsystem to use mybatis as the   ""get me the object from database"" system, while retaining computing   cache - Modified code formatting settings - Added secondary thread pool that could be used for parallelizable tasks   in processors (like fetching tweets from multiple accounts in multiple   threads) - Removed protobuf interface - it was too annoying to support at this   stage of this project"
Refactor Interceptors and Event mapping
fix regressions tests errors and code refactoring
some package refactorings
Mega refactoring
refactor
HBASE-18130 Refactor ReplicationSource
"fixing bugs and refactoring  fetch tweets handler, improving it and add tests "
Refactor PathSuffixFilterTest to remove duplication
refactor
refactored Dijkstra
Refactored connection management code in DefaultClientRequestDirector#execute(). Preparing to implement authentication handling for tunneling requests via an authenticating proxy
"Refactoring, Styling of the Manage list"
KARAF-963 Log modules refactored
"refactoring ASM factory, javadocs, commens"
Significant refactoring of module names for clarity and consistency.
Refactoring step 2: Standardize hardware and software packages
[RHQ-1001] this refactors the code so there is a isEmbeddedInServer method - the place where it can be used is commented out - so the behavior is still the same as before... still trying to figure out how to get embedded agent to fully work
refactoring quartz jobs
Refactor and tidy up
#POULPE-469 Testcoverage and refactoring for Database backup functionality - review test for domain and persistence packages
"- STATE now copies buffer data passed to it (https://issues.jboss.org/browse/JGRP-1598) - Implemented up(MessageBatch) in UNICAST, FRAG2, FLUSH, RSVP, - Refactored ENCRYPT and implemented up(MessageBatch)"
TEIIDDES-1214 refactored class names to reflect latest terminology.
refactor a bit unit tests
refactor
Refactored beanloader to use recursive dependency resolving
"Refactor PatientQueryMapper: rename it, use it since now only for creating queries to remove server, remove it from beans, just use new to create it."
VpvSocketProcessor Refactoring
refactored runner for readability
refactor string benchmark core logic
more refactoring work -- now with nonfunctioning functionality!
Refactored the delete user cmd
Mega refactoring
"Refactor to support tagged AutoRefRegions (nobuild, noentry, ...)"
refactor
"- Added support for rotation in our blackbox test framework, and refactored the ways tests are created and run. - Turned on 0 and 180 degree rotation for all 1D formats. - Turned on 0, 90, 180, and 270 degree rotation for QR. - Changed the 1D code to re-enable upside down scanning, with a dramatic improvement in barcodes found and fewer false positives."
Fixed dereference post-pone bug (race condition with rebind()). Fixed reference() rollback. Fixed progress when rebinding a task. Refactored configuration class.
Refactored all abstract classes to begin with the Abstract* prefix.
experimental refactor of selector
"refactorings, rename types to match concepts, ..."
"Renamed our free connection list, fixed some comments, and refactored the initialize checking."
"Move RolapSchema.Pool into top-level (but nevertheless package-protected) class RolapSchemaPool. This will make integration to lagunitas branch easier, since lagunitas has already done the same refactoring."
Refactor PackIndexV2 - extract binarySearchLevelTwo()
Refactored VoyageHandlingLegInsertWaypoint to EPD common
"Lots of refactoring for named arguments and argument guessing. Also, fix for GRECLIPSE-1259 regression tests."
Refactored URLRewriteConfiguration
"refactored Experiment class, it no longer requires configurators it can directly work with configurations"
Refactored the code to allow for better targeting enemy. Now locks onto the first enemy it scans.
SSHD-40: Slightly refactor the Channel api to avoid a call to future.await() in ChannelDirectTcpip which can cause a deadlock exception to be thrown.  This should fix the last problems on tcpip port forwarding hopefully
"moved from ant to maven, rest still the same so far .. more refactorings to follow"
GraphStore(Proxy) refactoring Factory methods renamed
#NAME?
refactored method names
further TxOutCache refactoring
Refactoring with fluent interface
minor modification to autoscale testing. refactored memoryRecord test.
more bible->book refactoring
Refactored undirected graph al test
SONAR-3714 Refactor the bulk change service in order to inject Actions instead of having it hardcoded
refactored the method getDisplayStringForValue to getDisplayStringForResultingObject in the InputHandler interface and added javadoc.
refactored OBO tests tomerge small classes and use parametrized test
"StatusLine, RequestLine and HttpVersion parsing code refactored to make use of CharArrayBuffer"
HBASE-9992 [hbck] Refactor so that arbitrary -D cmdline options are included
Added CreateActionExecutor. Refactorized interface ActionExecutor.
process refactor
#NAME?
#NAME?
refactor
addons - renamed AddonManager to AddonLoader and refactor some methods
refactoring
"One more refactoring of sr - introducting a ""vector-based"" SR base class."
More refactoring + add documentation.
refactor-move test classes
"Refactor Sharpen to remove Eclipse UI dependencies. - class Sharpen no longer inherits from Plugin. - Replace JavaProject with JavaProjectCmd, begin removing dependency on ICompilationUnit, markers, and other UI-context items"
Refactored updateQuality to use a helper method
Refactor the abtest code.
"refactor sql parser, support open/close statement"
Refactor AbstractDuration to remove instance variable
"[ADD] AbsForwardingPageReadTrx, AbsForwardingPageWriteTrx. [MOD] A few things refactored."
"CSPACE-5728: Internal refactoring to split a large method into multiple, smaller and more focused methods."
Refactored
[PLAT-1296] Refactor time-series master; Rename
Refactors the detection classes into NAD and autorxns packages. Moves to 1.0.3 SNAPSHOT.
121200 Leave Delegate feature for move refactorings
small refactoring for better naming of private methods
EST-310: Turnover Rent can be invoiced in advance. Some refactoring of layouts and removing unused imports
ISIS-1324: further small refactorings of EntityModel hints.
Major refactoring; properties are now dependent from Context instance.
refactored UserSettings and added some more PresentationModel tests
"More work on particle rendering, refactored some of the dynamic  geometry stuff."
Created smartwps-wcs module and did some refactoring.
 #135 refactored result container a bit
fix several bugs migrate several new entities to scala refactor serveral beans
refactoring package structures
HSEARCH-278 Added a MBean to monitor the mass indexing progress. Introduced JMXRegistrar and did some refactoring of existing JMX code
"SRAMP-431 moved s-ramp-client/s-ramp-server/s-ramp-wagon integration tests into s-ramp-test, refactored tests for Arquillian, removed RESTEasy test and TJWS dependencies"
"ACT-60 more refactoring configuration, persistence and test"
Refactoring of class ExternalFileDecorator
"added a sleeping into action to show unblocking executor call, also refactored a method out of executor call."
Refactored HttpDestination to allow customization of the request enqueuing. Subclasses may override enqueue() and provide a different algorihtm.
"Update pom version, refactoring names table and column to sql standard"
refactorings
Fixed interaction between refactoring and a team provider.
test refactorings
Refactored DAOs to be cachable
Refactored the scanner and rules stuff into their own packages.
Removing RDFValue.  Refactored RDFLiteral to be LiteralValue and moved it to the common package.  Removes the rdf package.
Refactor sqljet package -> sqlite. Fix pool configuration via JavaBean properties.
"refactoring, mainly re-enabling and cleaning up tests"
"tdd of group update using unit tests, refactor customer update"
Second major refactor of legacy layer.
Refactor.
Refactored a bit.
IntelliJ Inspection refactoring
ring-server refactor
refactor component and upgrade PubNub library
Refactor ReportedBeanRegistry to move away from ObjectName
#NAME?
"Refactored OOV grammar creation, added to phrase decoder"
"[KARAF-2888] Refactor repository validation so that we use a single pass, cache the created Schema"
FieldsPreprocessor - minor refactor (extract method)
"Cleaned up, refactored and documented."
OPENNLP-622 Refactored to remove usage of main methods of Morfologik.
cleaning up / refactoring code preparing for additional autoresolution enhancements
#NAME?
"https://jira.jboss.org/browse/JBIDE-7740, code refactoring moving css functionality into org.jboss.tools.css plugin"
Refactor generics and enable composites and custom serializers.
Refactor helpers in IdeData and IdeGitProjects
Fixed security API and added docType to differentiate attachment from linked docs. Also refactored package names.
Shapes : refactor and simplify configuration
TravelTimes has been refactored to RoadModelSnapshot
major refactoring relates to #39; now OSMReader is clean: moved logic to GraphHopper; less code duplication
refactor main method for #92 #93 parameters passed on command line now overrides global config begin block are executed only one time
Performance improvements - 342978: Refactor Tree widget to make it really virtual https://bugs.eclipse.org/bugs/show_bug.cgi?id=342978
Refactor some of the inheritance providers.
refactor exportDataCollectors
Little bit of refactoring here and there..
jmx support and refactoring
Refactored daos and reps
Refactor alternate object databases below ObjectDirectory
"refactor package structure, small things"
Refactor ConfigFileApplicationListener
Script: refactor signature checking out into separate methods.
"Code style, performance, refactoring"
Refactor generics. Create Collection & Map proxies
"major refactoring of cosmo reports code. introduce the concept of ""single resource"" reports (eg caldav freebusy) vs multistatus reports (eg caldav query, multiget). update to 2006-05-18 build of jcr-server with necessary api changes."
some refactoring
Refactor profile module
63908: Refactorings should inform user about unprecise matches
Code refactoring in SPRedirect and SPPost valves. Fixed the error page redirect.
Further token refactoring.
refactoring annotations. combine all annotations into one.
refactoring
Refactored: uniformed BindingRepositorySpec and EntityRepositorySpec
Do some refactor about the ModuleOption.
"Refactor XaLogicalLog to do read, apply and write entry in separate code sections."
Location to Coordinates refactoring
remove docshare34 plugin and refactored docshare35 to be docshare
Added Hill Climbing local search optimization algorithm. Refactored structure of test packages to match core packages.
"Refactoring, webapp directory structure adjusting and bug fixing in Planet Roller webapp"
changes 11.06  - more refactoring
Added comparator instead of using string key for ordering; added a no op market data source instead of mockito mock; moved holiday source caching into tool rather than function; minor refactors away from using strings in data structures.
SONARPHP-517 Refactor DuplicateBranchImplementationCheck
MIFOS-4657: finished refactor of loan schedule rounding related code.
Update clone() in TemplateElement and refactor namespace manager.
"Big refactor of Data Laboratory necessary utils, moved to Utils module. Mainly adapted NumberColumnStatisticsReport to build the charts and UI using a new reusable utils clasess and UI for this kind of statistics report and be able to reuse it later with the ShowNumberListScatterPlot (to be changed to show a statistics report)."
- Refactored instrinsic support helper class to become the StructuredArrayIntrinsifiableBase base class. This base class now captures both the methods and fields that a JDK's intrinsified/optimized implementation of StructuredArray is expected to change under the hood.
[PLAT-3133] Refactor: Moved BloombergSecurityTypeDefinition classes to com.opengamma.bbg.config package
refactored
Package naming refactor
Refactoru chapter 22 to 15
SONAR-6019 Refactor rules search WS to support selectable facets
more refactoring; added normalization to fitness function
#128 - Severe refactoring regarding LinkDiscoverers.
New tests added and old tests refactored. Documentation supplemented.
"Refs #2939 #3052 #2964: UI improvements to Continuous Mapping Editor dialogs, including default ENTER/ESC key mappings. Also fixes focus issues with modal dialogs. Code refactoring."
Refactored RequestProcessor
refactored FluentLogger and Sender classes
refactor to decouple property from its qualification
"Refactoring quite a lot of the code... I've changed all the formatting to avoid line wrapping at 80 chars and changed to use tabs instead of spaces. I know the netty project wraps and uses spaces, but I don't like it! This can easily be changed back when being pushed to netty anyway. I've consolidated a few classes and tried to make things more consistent in general. I've removed a couple interfaces which were primarily there to make mocking easier - I may add them back later... Fixed some bugs with channels not being correctly closed/marked as closed. Whichever end closes the connection should now result in both ends being correctly handled. This still requires some testing to confirm what happens when the link itself is severed, opposed to 1 end being cleanly shut down."
[refactor]: clean up codes
Update the CompositeType utility class to throw unchecked exceptions instead Exception Minor refactoring of the method parseCompositeType Update unit tests
Refactoring to senseful name WoodCutterNPC
Refactored RequestInterceptor to receive a RequestBuilder. Site updates + started writing javadoc
Refactored and moved ProfileBuilder to Maven-API
Refactor tests
Added the refactored email subsystem
refactor(EjbProcessApplication): pass names to app reference
refactored a bit
"Minor changes in docs and comments, refactored method name."
Add javadoc and refactor
[refactor] consolidate build.properties parsing into BuildProperties
Overriding getVariants() in GraphStoreBase to add (X)HTML (to be refactored) <#DescribeFromGraphWithChildrenTemplate> in GP vocabulary Relative @prefixes not used anymore in Turtle (bug in Jena 2.10.0)
refactor YankPoolManager - properties now correspond to Hikari properties one to one
"Refactored both Updater class names, to make them distinguishable"
Made some minor refactorings
"refactor, new properties file format"
[PLAT-1273] Refactoring Finite differnce PDE solvers and tests
refactor BbcProgrammeGraphExtractor
api_refactor: refactor nat apis
Compiler refactorings. Moved stuff around into separate packages. (#105)
refactor
"Refactoring, and some steps to make management api's easier to use."
refactored for myth-services-api v1.0
code refactoring
-Refactoring getcareNumber() --> getCareNumber() +suppression espaces inutiles
A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:
Refactored: renamed Blob's methods
Refactoring automation for outputRichText
cms-2141(getting started) + cms-2155(code refactoring)
Refactored package structure
[jayes] refactoring
refactor ServerConfigManager dependency instead of serverFilterConfigManager
some refactoring
Some refactoring and reorganizing of methods.
Refactoring on OpenHashMapWritable; add missing PairOfObjectX classes; more test cases.
thread-safe implementation for entityManagers; fully implemented systemService; minor refactorings & bugfixes
"Documented depositSchemaProperty, and refactored duplicate code into a single method within BeanSerializerBase"
"Refactor options loading, activity listener internals, update UI"
"NXP-15010: add class to modelize search tab, search form, search result + refactor"
Refactor openLinkInBrowser() to HTMLUtil
Backing up after a major refactoring
Hibernate ui bot test methods name refactoring and javadoc added
Major improvements in usability. Added support for queries. Lots of refactoring.
"fixes #471 : le marker overlay est chargé en arrière plan,  suppression objet modele Marker,  refs #473 : début refactoring nom des icones des marqueurs. "
Refactoring of launching code.
refactor LDAP
Refactored MessageService api and added unit tests.
Fix wrong directions when scrolling in hotbar Refactored all references of hotbar to quickbar Signed-off-by: Steven Downer <Grinch@outlook.com>
refactoring
v template controller method refactord
Refactored the SQL based repository and DataSource stuff
ENGR-1594  Refactored 'LocationUtils' to more appropriate place
Initial refactoring of the scripting infrastructure to allow language support to be defined in a standalone module (and allow multiple script langs in the future).
refactoring.
JERSEY-1326: Refactored server-side processing runtime.
Refactor
Refactor constants.
* more infrastructure for zooming * zoom to rect implementation in ZoomTool * zoom refactoring in SwingNavigableImageCanvas
OPENNLP-715 refactoring from specific word2vec naming to wordcluster namings
Refactored: inlined unnecessary classes
[ENG-85] Refactor position/security master
NXMOB-21 refactoring of the widget model (switched to stateful model + factorize code in base class) NXMOB-10 improve Blob upload
"Refactoring of logging * removed apache-commons logging (was only wrapping other implementation) * all logging in RadarGun should go through org.radargun.logging.Log * support for log4j (default) and log4j2 (when compiling with -Dlog4j2) * added per node rolling appender and default configuration for log4j2 * jboss-logging is excluded from Infinispan dependencies, version 3.1.4.GA explicitely provided (prior versions don't support log4j2)"
refactored out a separate LocaleListBox component and added dutch translation to the grocery list demo
Help menu frame refactoring.
[refactor]: rename SecureSession methods
String -> byte[] refactoring + changed Commands interfaces + updated Jredis implementation
refactoring TimeBasedRollingTest.java for improved clarity
"Refactoring, Mocked test class, Only external Nuxeo DM is required."
XWIKI-5334: A wiki descriptor pointing to a missing database prevents autoregistering wiki macros for the following wikis Fixed. + refactoring
request processor refactor
Refactoring of OMVRB-Tree to support a parallel provider to store key set. First alpha.
painter refactoring
JENKINS-26797 - Zombie instance created by the EC2 plugins * fixing error code for provisionOndemand - InvalidInstanceID.NotFound * refactoring updateRemoteTags - no code duplication * no exception throwing if remote tagging fails - only logging ** otherwise we got zombie instances which are not shown * adding unit testing
Refactored unit test packages to match up with the new core package structure.
HSEARCH-1296 Refactoring
refactorings
"DelegatingPreparedStatement extends DelegatingStatement DelegatingCallableStatement extends DelegatingPreparedStatement => refactoring to remove duplicate code & other general cleanup => getDelegate methods changed signature (return always ""Statement"")"
Refactored into polling and direct route selection.  Required new abstraction and inheritance.  Simplified/moved data types and utils.  
Refactorslag
Unit test for Gavin fix. Refactor Test class
refactor class name
Refactor unit test
Refactored to use DAO and added unit test for Logger service.
Refactoring event system.
WIP Thrift refactoring: Fix most remote executor unit tests
refactor
"Revert ""ROO-2189: Post 1.1.2.RELEASE code refactor and clean up - use ProjectOperations to get ProjectMetadata"""
WIP Thrift refactoring:  - Fix ExecutorContext to update currentPage as it traverses
TEIID-2467 removing thread waits and refactoring references to the workitem
Refactored the post value storage.
Bug Fix: More reparations caused by teacherNumber refactor miss haps 
Fix Bugzilla #273971 - Refactor AutoScale to reduce inner fields
refactoring: move events.hadoop to hadoop
Refactored test action type resolving
Refactoring
send screen refactor start
Refactoring market data to make feed status behave more helpfully.  Reviewed as ENG-97.
"- Gene properties display refactoring:  - configurable display names and API field names  - show all available properties   - configurable ability to ignore some properties in API and gene page independently  - configurable gene tooltip properties list  - configurable gene page properties list visible by default, others can be viewed by clicking ""show more"" link  - configurable web links for some property values wrapping (like uniprot) "
some refactor
Unidirectional alignments with mismatches now working.  Significant refactoring will be required.
Minor refactorings in code analysis structure.
"Support for switching tree levels, rename function enabled only for planner&solver b., fixed solver renaming bug, refactoring"
Refactor: Erasmus applications
servlet and injection refactoring
Refactor
SearchService refactoring.
Refactoring of validation code for easier reuse
Refactored Driver -> DriverProxy Refactored AbstractObjectFactory -> AbstractDataSourceFactory
improved fetching of triples from queries added experiment setups for more datasets refactored fetching queries and refactored setup of experiments
"- Refactored step code the be more injectable for the upload system - Removed references to Applet from upload wizard steps - Refactored download system to be based on Spring injection - Moved some common code connected with http translation to the HttpSessionClient.  While this might not be where it finally ends up, it can live there for now as it's used for both upload and download. - Added redundancy to download wizard, so we dont try to move on and download something else if we haven't downloaded what we're on"
before refactoring
Refactored more packages to uk.ac.ebi.lipidhome.fastlipid. .
"Refactors into modules, moves provisionally to 1.0.4.5-SNAPSHOT. Nearly there (just one glitch to solve regarding property files)."
refactor ContentPane add page cache to Contentpane
Merging r682:768 from /branches/JobServiceRefactor to /trunk.
"CLEREZZA-437: refactored code, added test, fixed bug in serialization of object bnode, and corrected bnode id"
[refactor]: rename method
adding /wd/hub/capabilities/all for debugging and starting the refactoring of the capabilities.
YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan (cherry picked from commit ba2313d6145a1234777938a747187373f4cd58d9)
"Refactored the tests (sorry to do this on a broken build, but...)"
"Imran: Refactored tests, xform parsing logic"
Refactor journal.
refactorings in abbyy ticket
Refactor a base class out of the WebDAV uploader test
refactoring of the persistence API continued: - invoke startup of the persistence API through spring - split some classes along functionality - use dependency injection for the different persistence API functionalities - prepare for next refactoring step
"Major refactoring; isExternalLink() is now 3x faster, thanks to binary search"
SONAR-5626: Refactor and test task/thread management. Analyze report
"page-fragments + tests: completion of orderingList, test refactored with new fragment"
MAJOR refactoring part 2 (not finished)
DataProvider refactor
"Refactored CommandLineParseResult - moved validate to parser impl, Removed duplicate method definitions in CommandMetadata"
[Refactoring] Ported the previous infrastructure to Restlet + JAX-RS + JAXB and refactored the code accordingly. 
Refactor test code
"refactoring lease terms, added tests and removed add/removeFromCollection attributes"
"Allow PLSQLDesigner to process multiple types - create minimal interface ExecutableCode and refactor the relevant AST classes, graph rule, panel and PLSQDesigner to manipulate ExecutableCode objects."
[jvstm-lf] Several refactorings on the transaction classes
refactor
"XLCLOUD-745: refactoring of JSONObject parsers, simple implementation of EIP and EIPAssociation parsers"
Refactored clone to copy in Types FloatType is split into FloatTypeNative and FloatTypeValue
Refactor package names a bit and simplify the low level STOMP client api.
"More refactoring, fixed a small issue in X12 encodation of \r"
refactoring of new contribution
Refactoring in line with latest CloudPlaylists API
refactor: transitioning FileTask to generic BufferedTask
"NXP-2514: refactor to allow more collection types, low-level ACL storage using that"
"ACT-755 refactored related content UI, added file-upload"
Refactor of decoder code. Add direct use of numeric tags.
REFACTOR: changed to be in line with new mbt based functions for writing path and making interactive executions
 - Manage nested types  - Refactoring of the query helper  - Allow count queries
Cluster service refactor and cleanup (as a preparation step for future refactor)
Refactored data dictionary packages and class names
WyIL: Significant Refactoring of VcGenerator.
"TWEAK: refactored code that loads exclusions from file to separate method, to simplify testing        added type templates to Map."
[BUSINESS] Refactor configuration engine : adding configuration by file (to configure database for exemple...) and implementing configuration DAO for MongoDB.
Refactoring multi-versioned catalog to improve File/URI/URL/Stream behaviour. Also make manifests work.
Refactoring
fixing compilation errors that resulted from itests refactoring
units code refactored.
"refactored onlineguru main-class, looked like a cave of badgers"
Refactor PublicMetrics registration
various changes including documentation and name refactors. Grammar additions include enhancementImplItems.
Refactored transformation policy
Refactored test cases.
lots of refactoring + support for having multiple connections
"ACCUMULO-303 Committing part of per table formatter patch.  Not committing parts that refactor shell, will do this in trunk."
slightly refactored deserializers tests
more refactorings on MailBox class
"Refactoring debug rendering again, now with ShapeRenderer and local coords."
Big refactoring around the way the flags states are intialized
commons refactoring
dcap: refactor PnfsSessionHandler to unify permission check and url handling
Refactoring of BlockReader
Test IO RoundTrip: by default always check equality * and refactored assert methods to throw exception
refactored exception handling
Refactors BaseBlobIntegrationTest and eventual consistency fix
"Revert ""Revert ""refactored to extract example application"""""
raw/generic refactor for issue #270 - bter
"Parameter and Binding simplification/refactoring. Rewrite's Back, All Right\! (All Tests Passing)"
HADOOP-1574 Concurrent creates of a table named 'X' all succeed M src/contrib/hbase/src/test/org/apache/hadoop/hbase/TestTable.java     (testTable): Add checking of actual exceptions thrown and     assertions that we are getting right behavior.  Add a test     that has ten clients concurrently trying to create same table. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HClient.java     javadoc edit. Fix debug message that could give impression     table was found when it wasn't. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HTableDescriptor.java     Added comment on table nameing. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMaster.java     (createTable): Refactored. Bulk moved to a private override.     Changed how check for existance is done. M rc/contrib/hbase/src/java/org/apache/hadoop/hbase/HRegionInfo.java     (getTableNameFromRegionName): Utility method added. A src/contrib/hbase/src/java/org/apache/hadoop/hbase/TableExistsException.java     Added.
Refactor category to folder
PT-3060: Create patient-contacts component to manage patient contacts info Refactoring
Refactored packages.
refactor: remove support for postgresql < 8.2 (#661)
Refactored remoting client
refactored simpledateformatter to super class
"XWIKI-3712: Create an improved Image & Attachment Insertion UI * Refactored old tests to handle new interface * Added new tests for some components (without file upload, and current page attachments selection) XWIKI-3676: Edit link does not set the edited page correctly when the reference is relative * Added tests"
Refactor the project right tests in SSH commands to be more available
ACCUMULO-310 - refactored static methids to Configurations (merged from 1.4)
"Finished refactoring the name ""gel"" out of the project.  They're now Filters."
refactor: cleanup Form view
Refactored deserializing PlayerProfile into FlatFilePlayerData.
Refactor setting process variables to a method so that a subclass can override the behavior.
Try to refactor parent containers code
SONAR-5389 Refactor new issue API
refactor codes about NameExecutor for new feature.
Refactoring: removed dependency to obsolete JavaScriptResponseWriter
"fix some class change, and start refactor webjndi..."
"Implemented a ""bridge"" between the protocolInfo classes and DLNAImageProfile:   - Refactored DLNAImageProfile to be able to hold custom mime-type information   - Implemented a factory method to create a set of DLNAImageProfile instances based on a ProtocolInfo instance   - Implemented Comparable interface in DLNAImageProfile   - Refactored DeviceProtocolInfo to also hold a set of matching DLNAImageProfile instances   - Removed the superfluous static Integer constants from DLNAImageProfile   - Misc fixes to JavaDocs   - Reformatted PROTOCOLINFO_RESPONSE in HTTPXMLHelper and added all supported image profiles"
Refactored tests config creations
Refactoring drift domain and criteria classes to make them pluggable
refactor ; creation and last modification date now at the friendly resource level ; suggestion origin is now a friendly resource. Every neo4j  node in graph is now a friendly resource.
minor refactoring: extracted commonalities between enum formats into AbstractEnumFormat
#5027 refactored flow -> pipeline so the UI is a bit more clear; also added a default pipeline for maven projects
refactoring request parsing; updated git ignore
Refactoring QueryDSL JDBC example and tests
First concept for AtomFeed serialization. Minor refactoring for Serializer API.
Refactoring: https://sbforge.org/jira/browse/NAS-2396
Refactor tmx map loading
Refactored security provider (tests still pending).
refactor the BundleListner into a BundleTracker as it is the best practice
"using JDK logging in the core osgi activator, refactored start method"
refactored some code: moved methods from DegreeModule to CourseGroup and moved verification rules to Context
#NAME?
refactor out some common code
Refactoring while investigating issue JMOCK-129.
Refactoring - Transport => Transit Added locations to route in test
"NXP-2087 - packaging 2parts (stateful/stateless); refactoring on nuxeo-platform-workflow-document, nuxeo-platform-workflow-document-api, nuxeo-platform-workflow-document-facade and nuxeo-platform-workflow-test"
Refactored getting super summaries
"Refactor, improve and fix reflection accessor utilities"
"UserDictionary fix, tokens with whitespace now allowed, minor DoubleArrayTrie refactoring"
"refactored test cases, added test cases for new functionality, fixed bugs"
"#242: Fifth commit deleting a lot of old stuff, cleaning up, refactoring, implementing more nicely"
Refactored load balancers
Finished refactoring of routing rate test
Entity refactor - See new hierarchy at <i.imgur.com/qhSzS.png> Signed-off-by: Windwaker <wjcrouse913@aim.com>
refactored PlaybackProfileDaoHelper to singleton
Refactor duplicated parsing logic into a protected method
Refactored ErraiEntityManager and its generator to make it easier to create multiple instances.
XWIKI-2568: Continue implementing the new Rendering Architecture * completely refactor macro parameters handling using Jakarta BeanUtils
Some comments; CountThenEstimateBytes -> BytesRefUtils refactoring
refactor package
epic refactor: merging meta-repo and api into services
removed IResource from ValidationProblem; refactored signature of error() and warning() in IValidationContext; now current root element and rule id are stored in IValidationContext; now AbstractValidator iterates a list of root elements
refactor SliceArray to impl package
Refactoring Error Handler.
"Refactoring, so that we have a single WikiXMLParser object"
MarketDataRequest Refactoring as follows: - Content and AssetClass become top-level objects - MarketDataRequest objects now built by MarketDataRequestBuilder - Small changes to MarketDataRequest API for consistency - parameters added to MarketDataRequest toString/fromString mechanism
refactored some code in curricularrules and fixed some bugs
Refactored: use custom class loader for whole JUnitCompatibilityDriverFinder instead of just JUnitCompatibilityDriver
Refactored codes to support more advanced name space factory and helper.
"Core: refactor update operation, pt.3 (#935)."
refactored patch from Marc to support pluggable ssh connectors
Refactored for better extensibility
refactoring specific disambiguation test into their own classes so it is easier to debug each in eclipse
moved on with refactoring
Refactored intended route settings
code refactor
EST-336: Change range selection to only use due dates; refactored eagerly mocking values for epoch date; refactored unit tests
Deleted unused/ignored tests; Code Refactoring; Generate Events for connetion states;
first step in repository refactoring
"[MIN] XQuery, dateTime functions, minor refactorings"
refactoring
core: minor refactoring
Code review and refactorings
began refactoring ShellImpl into smaller more maintainable pieces
Refactor - categorize pages and components better.
Refactored and cleaned up some repetitive code. All tests that we wrote up to the hackathon are now working with a Hibernate-like ModelManager. I'm going to add a document explaining the current ModelManager lifecycle into the specification.
"URL -> URI with some refactoring, based on work made by pgaschuetz"
"Volume: refactoring. MMap doesn not sync on file grow, cleaner hack does not use reflection"
Storage REST API refactored
refactoring
#NAME?
refactoring; fix 2 broken tests wrt visibility defaults
refactored all src/test/java classes to have the word Test in the name to ensure exclusion from clover coverage
refactored common code into utility methods
"Big refactoring of Cycle API, compiling and test running but distro not yet checked (impossible in the train without internet). Not yet stable!"
[JBIDE-7035] Refactored bundle filter to generic collection filter
refactoring: addValue -> setValue
"Refactoring Instantiator: extracted creation of PrefabValues, including recursion detection"
"Refactor controllers. Mark not implmeneted methods as deprecated. Deprecate (but not remove) usage of id.ext for processInstances. See javadoc on ProcessInstance.getProcessInstance(String, String) for explanation."
Complete refactoring of the mock device.
#NAME?
"Merging changes for HibernateSearchableCRUD, refactoring package"
refactor how server service discovery is done
Code refactoring.
Refactor TmfTrace and dependencies - introduce ITmfTraceIndexer
"Fixes issue 36, I believe. Refactored VectorStoreWriter to switch properly between text and lucene format so that text vector stores can be created by BuildIndex as well."
minor refactorings
Minor refactoring of RepositoryEntryHealer
JBIDE-2808:  Improve/refactor org.jboss.tools.common.kb plugin.
Added a VoiceImportComponent wrapper CARTPruner around the automatic method of CARTAnalyzer; some refactoring in CARTAnalyzer to make that possible.
refactor
Refactoring.
Refactor to modularize each component.
Some refactoring of use of configurations.
Small refactor DHNS services and tests.
refactoring to use decoration on criteria
Refactor soap client server Java DSL
Refactor: Changed schedule presentation to display the weeks of lesson occurrence.
#NAME?
"CORE 	Added preliminary keyword support into IASTCompletionNode::getKeywords().   	Refactored parser to put keyword string literals in one utility class.  "
Refactor of core domain model classes to align with new design direction
Closes #569 #570 - Refactored metrics reporting and added config for a Grafana Fluo dashboard
Refactored some zoo keeper cluster code
refactored DynamicLayer
CSPACE-1482 refactored authgen and authseed such that these could be invoked from service runtime as well (at startup time).  test authz import
"Massive refactor of ops to use recipes and java8 lambdas, drastically simplifying boilerplate code. Still more to do here to get basic Ops component APIs to full recipe orientation."
Fixed up refactor of NntpWorkPool stuff. All works nicely again.
refactor to share code
Refactored new tax service to be in a different package.
ROO-1270: Post 1.1M3 code refactor and clean up - refactor getManyToOneField() method in DbreMetadata
refactoring Executor. Split it into interfaces
Refactor: Move BloombergHistoricalLoader to com.opengamma.bbg.loader.hts package
"Added ""priority"" attribute in seriesComposite extension point. Refactor seriesComposite implementation for Pie and Line."
SCRUM-415 - Introduced NodeWrapperFactory to detach NodeIterators from ChildWrappingNodeWrapper - renamed FilteringIteratorBase to FilteringRangeIterator - added NodeUtil.deepUnwrap() - ChildWrappingNodeWrapper now copies itself using cloning - refactored DelegateNodeWrapper to make it simple and more efficient - refactored DelegateSessionWrapper to keep instance of target session in a variable
core: Refactor getDiskDAO to getDiskDao
"[OPENENGSB-876] some little refactoring tasks, added some comments and renamed KeyValuePair to JPAEntry"
Refactor Pipeline tests.
Refactored the test cases for remote-graphdb to reuse the same test cases for all transport layer implementations.
refactor OgmLoader methods to adopt Loader's scheme
"composicao, refactoring"
"Refactoring for inventory, GlowInventory implementation to come."
Refactor: Extracting method.
Refactor to make dashboard possible
"Refined ODA Runtime Interfaces: refactored IStatement execution methods; renamed IRowSet to IParameterRowSet, and ICallStatement to IAdvancedStatement"
HBASE-1756  Refactor HLog (changing package first)
major refactoring. not compatible with older version.
update accord with pull-shared refactoring and some fixes in displayed page.
Refactor: Created a new relation between CompetenceCourseInformation and CompetenceCourseGroupUnit. Existing relations from CompetenceCourse migrated to CompetenceCourseInformation. Semantics preserved (I hope).
minor refactor
Refactor test classes.
refactoring: robo tests
minor refactor to move the processors into a separate package
refactored project; removed obsolete code (Java EE 7);
refactoring
More refactoring of indexing code.
Minor configuration related refactorings
Refactor the methods for debug.
Refactor and finish basic operations with stock photo
refactor to clean up using KeyNodes classes and methods
wicket refactors
SONAR-1929 refactor the extension point to define dashboards
TEZ-1049. Refactor - LocationHint need not be passed into TaskAttemptImpl's constructor (bikas)
Refactor class FieldContentParser and create unit tests.
Refactor SkaitvardziaiTextParserConstants
"[7144] first implementation, package structure refactored, eclipse environment refactored to (pluign-) singleton"
Bug 109661 [Presentation] Improve customizable window trim Refactor to use TrimDescriptors
more tests and refactoring
refactor
  * NewImage - simplify 1.4 COMPATIBILITY mode support. Minor refactor.   * ImgLibProcessor - support setting pixels with range > Integer.MAX_VALUE   * other classes - rename Gatherer interface to InfoCollector
added Compression : for files (external stirage mode) and for blobs (db blobs mode) refactoring of packages
"The continuing saga of collectd refactoring... synch lifetimes of data and object Agent and SnmpCollection have a very long life time (one from the db, one from the config file) CollectionSet is being tweaked to have a life time of a single collection"
Some refactoring after merge:x.
refactoring the applied UI of the cv-template-register to compiant with bootstrap . moving the functionalities for the relevant controllers
refactoring - workinghours
api_refactor: move systevm apis to admin pkg
[US 6] Refactoring Configuration.deepCopy() to properly handle hibernate proxies.
refactor the json builder
[MOD] XQuery: refactorings (item -> value package) [MOD] XQuery: Expr.checkType() added (called from analyze and compile)
Refactoring Packages
SCRUM-500 refactored AbstractRegistry to be used with composition rather than inheritance
basic refactoring
"Refactored package contents (still ongoing) and eliminated dependencies from ""api"""
"Cleanup, refactoring * (many)    update license notice to Apache where appropriate    eliminate ProcessorURI, DefaultProcessorURI in favor of CrawlURI (now in modules package)    other comment/warning/unused code cleanup"
Refactoring of functionality used to generate records to Java
Refactored TimeIntervalSequence classes to have better strong typing through an abstract generic class (AbstractTimeIntervalSequence). Fixed several more typing warnings in the web UI.
refactoring
ContactContext refactoring
fixed a bug of accesses to annotation arguments (cont.). did minor refactoring.
[Bug #962] Refactor fillVariables
Rename and code refactoring
Added RunWithBaseWorker annotation and AbstractWorkerTask class. Added new tests for this. Cleaned up reflection related methods and moved them to a ReflectionUtil class. Refactored IntIntMapTest and StringStringMapTest to use new run method.
Refactor bridge maven
refactor CFindSCP Service
Refactor out the getRegCount method into a seperate InvokeInstruction interface
Refactor the name of both the directories and the artifact ids of the Survey subprojects
Finishing the startup refactor
"Api refactor: * Moved ManagementServer interface from ""core"" to ""server"" package * Changed AddConfig, UpdateCfg, UpdateAccount commands"
Minor refactoring.
Big refactoring.
#JC-2023:Refactoried code review to use same table as topic
Big refactor to change the way dependencies are handled.
Code refactoring and cleanup.
Refactor to Glydar
Refactor classes location.
Refactoring visitors
Refactor: getChildren in GroupBMPBean changed to getChildrenIterator and a new method called getChildren with same code created and returns Collection
"Issue 830: refactored MediaClient to not require href arg; refactored VmApi, VAppApi, VAppTemplateApi to use urn"
Check in #193855 to HEAD Caused by script being evaled to HTML. Fixed by script being evaled to JS. Also refactored SimpleDataRowExpressionEvaluator which is for chart integration.
Removed filter keys as we are using start key and limit. Cleanup to fix warnings and minor refactoring.
DLNAMediaSubtitle refactoring (access to deprecated variables removed)
general edge refactoring
 * refactoring thread population
[ENG-85] Refactor security master
[US 2] Refactor LoadRaw and LoadRawTest
HV-84 Introduced a proper implementation for PropertyDescriptor and refactored code. 
refactor to use pointers not lists
some refactoring for group-based security
- Summary: Refactoring code for the expression encoding/decoding.(#27698)
refactor
General cleanup/refactoring/maintentance
refactor for saveResults
"* added LocatorFactory for easy creating typed element locators * changed IterableLocator signature - T getChildren(T), T getDescendants(T) instead of T iterateChilds, T iterateOccurences; added T getAllChildren(); refactored influenced parts * changed samples"
[KARAF-1198] Refactoring of the MvnUrlUtil into MavenUtil in order to add a method dedicated to the metadata generation
Refactored beans
"Refactorings, comments extended."
Refactored HeaderTool acceptance tests slightly
refactored database to serices
Refactored
In the middle of a major refactoring.
#NAME?
Refactored some things
Refactored encodings
Refactor EbeanServerFactory internals - use SpiContainerFactory interface and service loader
"EST-503, EST-504, EST-556: refactoring budgets"
More refactoring for type handling
" - added missing classes, commented out unfinished tests, small refactoring"
core: refactor non-operational flow
Refactored b-cubed evaluation code somewhat.
[MIFOS-3763] Refactored the validators to use Errors instead of ValidationException
Refactored validation code to use the JAXB EjbJar tree so we can begin implementing EJB 3.0 validation rules
"NXP-2225, NXP-2226: fix syndication feeds. Fix syndication when the user has no read access to the documents root. Fix link to feed from the <link> tag of the feed itself. Completely refactored the SyndicationActionsBean for much greater simplicity. Deprecated old APIs. Avoid unneeded injections."
refactoring package names
SONARDOTNT-274 Refactor the NDeps Plugin
Switched service to mtom. Refactored Event model and Webservice model. Introduced property based config on server side. Added integration test with web service call.
Refactor entityMetaMeta variable name to entityTypeMeta
Doing some minor refactoring
Refactor notifciation controller
minor refactoring
"renamed SocketConnectorBase as DefaultSocketConnector, refactoring for improved clarity"
refactor(tasklist) replacing legacy tasklist
Refactor the GerritManagement page and add null checks.
App deployment refactoring
Refactoring package names of Page support classes.
Refactor
minor package refactoring
Refactor component index classes
Refactor Ruby part of YAML implementation into separate files and classes
ACT-60 refactored configuration and test
some improvements/refactoring/test coverage
Refactor SIRI-supporting code into more common module for use by wider range of other modules.
Overlay refactoring + event widget picture now a link
"Refactored IndexerMasterTest to use RepoSetup in stead of LilyProxy. This obsoletes the need for this test to be in a separate package, hence I put it back inside lily-indexer-master."
refactoring
Refactored DebugLog into the com.dumptruckman.minecraft.util package.
[PLAT-6302] Refactor swap coupon conversion allowing for more exotic daycounts
major refactoring in effort havalo-client 0.0.7
More refactoring and testing of volatility surface fitting code.
Refactored IndexerManager return codes and adjusted tests accordingly. Replaced MissingRequiredContextException with MissingRequiredArgumentException.
merge with sync_api_refactor branch
Refactoring: Separation of API and Platform
Finished redesign/refactor of routing logic.
Refactored to a top-level class
refactor VCF samples writing
- 62756: Introduce parameter refactoring: Should update javadoc - 46931: AssertionFailedException on IntroduceParameter on a local type [refactoring] - support for constructors - support for references in other CUs (retains formatting)
Refactoring of JTS stuff into extras modules
"Simplified, refactored formatting API further."
refactoring the apache status parsing a bit. added generic status line parser
Refactor a bit.
Minor refactorings
Refactor the client classes - add a new cli package.
Config refactor.
refactor of package
[MIFOS-4216] LoanBO refactoring
Refactor of the deployment page in server editor
Refactoring
"gave things more appropriate names, refactored out the property comparison out of the config mapper."
GTNWCI-36 : Refactor / simplify / use ARQ for testing
Refactored the futures and put common methos in FutureDHT
fixes and refactorings in hotfolder
Refactored domains to use object types instead of primitives and lists instead of arrays.
Refactor and add more UI helper classes
Massive refactoring for keys/settings
Refactor - moved OpponentsPoisonCountersCount to shared area
refactored entire app.
minor refactor
refactor
Refactors configuration to move database defaults to the implementation instead of being in Core
Refactored contract tests to remove code duplication
refactored to snacktory
Refactored
bit more test refactoring
refactored setupActionbar
Refactore of Eclipse felix wrapper
Refactored the OAI-PMH implementation out of the core.
JPA package structure refactoring and provider class renaming
Parallel import has been implemented and refactoring in parallel export has been made.
Refactorings of the current filtered block tracking code.
KARAF-713 Refactored main 
more refactoring in light of implementing MtGox streaming trade and marketdata service
Refactored event listener from TaskList to GanttPannel
- Refactored WSRPExceptionFactory hierarchy. Would still need some work to prevent v1 factory from creating v2 exceptions but need to move on right now. - Started implementing v1 ServiceDescriptionEndpoint to delegate to v2 producer. Still lots of blanks to fill... :/
Dumper: Add dump method for sorted List<Difference> (refactored) allowing dumping separate diff-types
gui refactoring
Refactored Parcels to use cached reflection if target class cannot be found
"Hosting tests: Comment out assertion that failed during build, refactor"
Refactor calls to be more generic.
Ticket #452. deegree geometry validation is wrong. http://tracker.deegree.org/deegree-services/ticket/452: Refactored geometry validator subsystem to use event classes to improve testability and usability.
Unitary transformations refactored.
refactor to use a mix of executors and guava transforms
Large Refactor - Move all tokens into Mage/src/main/java/mage/game/permanent/token
Comments added. Refactored some code.
core: ActiveStorageDomainCommand refactoring
refactor of export criteria to be more in line with general reporting (and benefit of cheap excel export and report caching)
refactoring: move more classes around
Added 3 cards Added CardsInControllerGraveyardCount Refactoring
Added event types and handlers.  refactored JS objects
Refactoring Client
refactor
Bug 246132 Refactor loader layer
refactoring to have similar naming conventions
map refactoring
"refactoring, performance improvements by using array vs. lists"
"add CategorySearchProvider, refactor searchbox to use criteria, broke some things, fixing them"
"Linear version of the Knn search, using the initial entry provider interface. Tested with two different descriptors (Not working for composite descriptors). Refactored some code in the BTree and other classes (and some code cleaning). (only index for now has entry providers, but resultlist and other elements will also implement this interface). Still must fix the LuceneIndex to the EntryProvider."
Refactoring to support using HttpServletRequest and HttpSession instead of IWContext to be useable in filters.
refactor
Refactored away ivory.core.exception package.
code refactoring
Refactoring
Refactored serial configuration parameters to own class
Refactoring exporters
minor refactoring
refactoring...
Merge branch 'api-refactor'
first push on the massive refactoring of Gremlin into Gremlin-Groovy and Gremlin-Scala. It is still noisy but the structure is there.
refactored batch bolts and collectors into coordination package and added the functionality to drpc
Made indentation style more uniform. Refactored word count test to use common code between avro and text versions.
#10 Refactored hierarchial metric aggregation implementation.
refactor camushourlysweeper
Refactored ArgumentDefinition to absorb functionality from ArgumentDefinition and ArgumentTypeDescriptor.
Refactoring: factor resources URI path elements
#NAME?
Refactoring: Extract Cell Interface.
Refactor grid presenter classes combining shared code (#705)
MobSpawnerEntry additions. Small refactor.
fixed cache replication and some refactor
More refactoring
"Revised Theming of images, removed unneeded ThemeAdapter interfaces, refactored ThemeManager"
refactor dcm4che-tool-getscu
refactor queries
REST API refactorings + introduct pages in the back office
Major refactoring of sync jms communication
refactoring favicon fetcher
"Reports from missing ranges. A lot of package and code refactoring, cutting things to pieces."
Refactored all XXXState into XXX.State
"CacheProxy refactored, cleaned up, (review)"
Refactor linear system solver a bit and add (commented out) jblas implementation.
Phew... there's a lot to dig in this time. Support for the controller is almost done. A lot of code refactoring has been made. Also worth to be noticed is that the railway map is more beatifull painted .
The layout model for table elements. Refactor ActivityStack.
NXP-14996: Refactoring.
refactored the template/email module: - moved all dispatchers under dispatcher package - renamed package conf to parser - moved all Sax parser related files/classes under parser.xml package
some refactoring
Refactored word guesser with interface addition 
refactor due to the main (reteoo/spi/rule) changes + retraction related changes + start of Waltz code (initial development checkin)
Improvements to the test cases. File-based store refactoring and comment.
Refactored
refactored grizzly2 packages
"refactoring: merged now only one time with name of template, not with template class, version bump"
refactoring the report service
"CDIFindObserverForEventTest + CDIFacetTest + huge refactoring + resources, needed for tests, added"
refactor
SONARGROOV-33 refactor project into multimodules
Enter programming mode refactored. Program operation progress fixed.
"Finished conversions of greeks to position greeks and value greeks, and position greeks to value greeks. Also refactored some tests."
Refactoring functionality
Refactoring
Refactored and added request latency graph.
Refactor dependency
refactored CDI integration tests into feature specific modules
EST-404: Automatically remove terms that are out of scope; some refactoring to automatically fill the end date of a term.
ExecuteQuery test and refactoring..
Some refactorings for build system.
Refactor com.viwilo to org.apache.camel
Cleanup (comments mostly and some internal refactoring)
Started refactoring of XmlReaderCreator
rsa refactoring
refactoring some method name
"with this refactoring, resource type definitions become available on the server side - in fact client and server share the same info"
remove fRefactoring from the state - use isAvailable
Refactored to use Jackson for JSON serialization.
"CHUKWA-268. Adaptor manager interface, Agent class refactoring."
data-binding: minor refactoring and cleanup
Refactored stale page removal to a new method
Refactored Insert ID generation strategy for SQLFeatureStore.
#NAME?
- Summary: Refactoring chart report item code for cube query.(#28108)
Refactored GraphDatabaseContext a bit.
refactor package
Refactoring
Refactoring preferences organization.
Platform refactor
Refactor error-prone's entry points to be compatible with javac9.
Added refactoring examples.
Refactor batch test tools (#484).
"Refactored exceptions into one package, Implemented EntityChangeControllerEvent, added protocol to PluginDescrptionFile, small formatting fixes."
Feature #2815 & #3146 : adding transverse file filter - adding a new cache service : cache associated to the current thread - adding new common annotations in order to specify service methods - adding tools to work on annotations - adding a new PasteDetail extension around primary keys (from / to) - adding the possibility to communicate dummy files in order  to take them in account in process management checks - adding annotation associated to an engine that handles simulation action process checks on services - adding dummy handled file Attachment (SimpleDocument) converter - adding dummy handled file Thumbnail converter - centralizing the getting of the MaximumFileSize parameter value - fixing some little problems around the data storage quota (in back-office) - handling document import - migrating ThumbnailService to Spring context - refactoring some code
Implementation of the convexity adjustment (still some tests have to be done). A light refactoring of the inflation products impact by this adjustments.
refactor scp/sftp wagon into a common base class
Refactor some UACA preferences related stuff
pool: Minor refactoring of HsmStorageHandler2
XWIKI-1617: Refactored the implementation of the XMLRPC Confluence API - We are now using the swizzle-confluence data objects on the server too. This simplifies the XML-RPC implementation considerably. XWIKI-1618: Proper exception handling for XML-RPC code - Further improved. XWIKI-1663: Improved support for attachments via XML-RPC - Implemented and tested (XWIKI-1528) XWIKI-1664: Extended the XML-RPC Confluence API - A first skeleton not-yet-working implementation of xwiki objects and classes.
"Refactor Calendrical to interface, adding CalendricalRule"
refactored new project wizard
Refactor:
"[refactoring] Introduced package for ""resolution"" code"
"refactored SVNDebugLog, ISVNDebugLog and DefaultSVNDebugLogger to include methods for different type of loggers  and different logging levels"
"Moved all REST service classes into a new webapp project, opennms-webapp-rest. Refactored some web svclayer interfaces and classes into the opennms-web-api project so that they can be reused between web UI projects."
"PRFL-158 connection and requested connection lists, entityprovider and service methods refactored to suit"
ACT-741 refactoring persistence
refactor(option): in order to comply to new option-related generic utilities
little refactoring of refactorings
Refactored from Portal to Liferay
MAGNOLIA-3375 small refactoring for readability
Refactored GMLReader to be more like the other io implementations
"refactored a couple utility methods from various helper classes into JdtUtils, AjdtUtils and ClassUtils; moved Introspector to eclipse.core plugin"
Committing because I want to pull before continuing to refactor.
Refactored DynamicContainer to ListContainer
"refactored to fix recordings not showing on second access, still needs work"
"Mixed Graph refactoring, Unit tests and Debug."
Refactor main CPD class: migration of command-line arg handling to separate CPDConfiguration class similar to how PMD does it.  Will eventually formalize the parameters in the same way.
Fixes Bug #44 : [filters] get filter global and session serialization working. Also some refactoring. Should fix latest build fail.
refactored crs subsystem; handling of CRSresources as references
refactoring
Refactor to use cascading jmx rather than managing explicit connections
refactoring long method hadleException
Refactor to split off EntityDamageByEntityEvent handler.
refactoring
Refactoring: BitLargeArray -> LogicLargeArray.
[PAXURL-63] Refactoring & zip/jar scanning
Refs #3123: More refactoring and code formatting.
Fudge tweaks and DSL API refactoring
refactoring
"Refactoring for Activiti 5 compatibility + Spring, CXF and Camel unit testing"
minor refactorings
#NAME?
Refactor the way to load QProfiles from WS
beans.Player in beans.User umbenannt (refactor) beans.PlayerList in beans.UserList umbenannt
FALCON-369 Refactor workflow builder. Contributed by Shwetha GS
refactoring
"improved #107 so that when we create a broker profile with mq-create we define at least 1 instance requirement (so that it appears on the Profiles page with a warning if its not running) , refactored API and DTO to focus more on configuration (rather than running status which will be a separate API call) and added a first cut of an ability to load the current (active/required) broker configurations so that we can support tooling to edit them"
Refactorings around DirectoryFixture
refactor package name by accident: org.odata -> org.odata4j
refactored lots of code initial implementation of calculating recall from query triple weights
Message files verifier - refactoring
Major refactoring to use generated implementations
"[WFLY-2957] Refactoring of the SSL services within security realms so that standard Java types e.g. SSLContext, KeyManager[] and TrustManager[] are injected rather than custom types."
SONAR-6466 Refactor create/update methods out of UserService into UserUpdater
"Added OrderedSet, map refactoring."
Refactored: adding asynchrony to IpcCommunicationTest
DROOLS-192 Refactor Drools legacy classes and interfaces
refactored namespace to org.pex.*
code refactor: let common project depends on plugin-common and plugin-default
Move scoreboard stuff to the sscore package in preparation for refactor
"metamer: validator: tests refactoring, fixing assertions to also work with MyFaces"
DO NOT SUBMIT core: refactor at AddVmCommand
Control.presentation.viewcontrol refactored.
"Refactored tests to introduce clear entry points for manipulating VMs, to allow better control when errors occur. Also made tests more resilient to VM failures."
Refactored: relocated IncrementalTask and Retryable to other packages
close the connection with DataSourceUtils.doReleaseConnection() and minor refactor
Refactor transformers
reorg and refactoring of hashCode and equals methods
"FirstPossibleEvent strategy, tiny refactor, example of strategy usage in import controller"
"http://jira.jboss.com/jira/browse/JBIDE-680 Refactor templates. New names: ""with libs"" and ""without libs"""
refactoring
Method name refactoring
Refactoring to allow interpreter info to be updated.
refactor AbstractConfig
Refactored project structure
refactoring
SQL: small refactoring to reuse SQL method outside
"2005-06-27 Alain Magloire 	Refactor the class extending CLICommand to CLIXXXX for more clarity. 	Pass the MIVersion in all of the class extending MICommand, this is 	necessary some command option will not be accepted depending on the version. 	Too much file to enumerate. 	* ..."
"New button - 'reset'. Removed Guava, because it increased size of binaru from 70Kb to 2Mb. Other refactorings"
Started refactoring of controller into a system with more atomic chemical operations
Refactor admin entity services to use the classname instead of a Class<?> object
Refactoring
#NAME?
#NAME?
started transaction refactor
refactor
Refactoring getDefaultWorld()
refactor SimpleDSComponet
refactor the template processing to decouple it from the model processing
Relative URL refactor to improve maintainability and fix the PrependContextPathHandler.
MODE-2202 Refactored multi-session transactional tests to use separate threads rather than a single thread.
Refactor: move all example classed to examples package
1140 - twitter - minor refactoring
Refactored.
Started refactoring expressions in jpeg grammar
Heavy refactored payload parsers into separate classes.
Refactor forge addon: create separate class for transforming xml files.
merged back to the trunk from the b4ga branch r8586 - util refactoring r8617 - _zh -> zh_CN bundle rename r8729 - ContextObserver change
refactoring; reduced logging level; added download from CSS-inline urls
refactoring
URIRewriteFilter refactoring
"Refactored android test package names, updated readmes."
#NAME?
https://jira.jboss.org/browse/RF-9315 - selection refactoring
"Refactor NoFall to reduce code duplication, re-order some arguments."
"Issue 191, Issue 273 refactored opscode api calls into a separate module"
"Refactored for global ParameterStore, take 1, some FIXME and comments until things can be compiled"
Initial refactoring of Spring Roo 2.0
"refactoring of url creation, added filters"
"refactor, rename and comments"
Refactor and move the Websocket code our of the CPR package. No functional change.
Refactoring
"Added logging, extracted interface from EsperTemplate, refactored EsperTemplate from its Spring Bean configuration approach so that it can be used entirely separately from Spring (i.e. no compile-time Spring dependencies required as well)"
BTC-e API v.3 refactoring (split to generic/raw)
#NAME?
refactor all the things again
Refactored demo
Refactored (with some amount of duplicated code) just to avoid auto-boxing
[ABICLOUDPREMIUM-2411]. NC refactor.
googlecharts refactoring
refactor 2
"added export dialog, started moving Filter panel into standalone JPanel class, some refactorings"
EST-777: refactor key table integration test
refactored FluentLogger and Sender classes
"[TMPL-1,TMPL-17] Initial check-in of refactored sensitivity-based PnL series functions for FX forwards, adding individual PnL series ouputs for the nodal points on curves; separated difference series from PnL series function; adding vol-weighted difference series"
"FileReader, FileWriter classes, refactoring"
refactorings
Refactored MTNamed and MTProper
Issue 101: refactor client examples
More refactoring.
Refactor writer and reader classes
Renaming CachingSessionDataStoreFactory
"changes in the project (to make in standalone), small redevelopment of components framework, package refactoring"
Refactor packages and classes
Refactoring
refactoring of security tests
Refactoring of testcases
"Code refactoring Finished coding the paissadtools-http module (handles credentials, proxy authentication, and so forth ...) Added .gitignore file"
small refactoring of roundabout instructions
* extended documentation * refactored builder to contain less duplication * removed unnecessary generics
Working Evaluation framework. About to refactor.
DEV: refactor.
refactor
refactored populator : overal code cleanup and refactored populator executor into an application listener that can also run populators on context end
major refactoring: moved to setters&getters from property-alike access. fixed #81
Added javadoc and refactored Comparator class name
"Used testng-plugin code to refactor classes, adding a more elegant way to store the test results"
refactored BackupSuorce/SourcePattern
jsf-spring-integration - minor refactors
Major API refactoring
Refactoring - Spring now injects Twitter library and other properties
refactor: terminal panel (2)
Addes scripting support to all refactorings except Generalize Type
refactor client
Working on API refactoring.
"refactoring the validation to validate the whole model, not just pieces of it"
"Did some refactoring, renaming and updated the README.  Also added accesibility for field names / methods on getters."
Initial refactor commit
Turned move static refactoring into a processor to allow participation
Issue #54 refactor/tests
Added missing set category in organization constructor. Refactor category property name.
MOAR refactoring. Browser working!!
Code refactoring
Some name refactoring to PutTopCardOfLibararyIntoGraveEffects.
Refactoring of property name conflict resolution: fixes issues #193 and #327
refactor job report
RF-10940 - refactoring
some interface renaming and refactoring
HBASE-10592 Refactor PerformanceEvaluation tool
refactoring
"More refactoring, add a Builder for the server"
Refactored ScatterResult to include information about dispersion and made specularity a double rather than a boolean value (diffuse or specular).
#NAME?
Refactored listener API to provide the full test result at the end of each test
merge tsdb meta support and refactor
Refactoring.
Change Git history parsing to use executor (start of refactoring for easyer testing)
Test refactor
"Lots of changes.  First, added @BugPattern documentation for all refactors. Second, changed directory layout for both refactors and example files. Finally, fixed docgen to correctly generate documentation when there are many refactors."
Added constants for SDK_NAME and SDK_VERSION. Refactored URL into constant BASE_URL.
Refactored script executor: Separated generic script (command) execution from Groovy script execution
Serializer-side refactoring
Refactor to allow isStatic/isFinal etc. on annotateditem
"refactor Segment2D, rename of terms"
Refactor string constants
Grammar refactoring in progress.
Refactoring tokens delivery. @P4CL:11205120@
Refactor IncomingMessageImpl and IncomingMessage interface.moved from com.dreamoval.motech.model.dao.imp to com.dreamoval.motech.imp
1137 - Refactored server-side methods for handling a package sync that's scoped to a particular repo.
ISIS-1613: refactors to reuse EntityModel so far as possible
Refactoring
Refactor step 1
[176565] Enhancements to XML Schema Editor.  Refactor the toolbar.
Refactoring the architecture of aggregation calculation
Refactored to fix a design flaw in how the presenters were being setup during screen initialization. The setup phase for presenters is now more clearly extendible by implementors that wish to tweak behavior or add additional items.
Refactoring: Change method name
"Refactoring : Make a sca importer api free of Nuxeo dependencies, creating new project, tests update."
Refactored commands
"refactor Managers, make them more unified."
refactored client requests used in client executor service
Refactored a little bit
Trying to move away from a facebook only data model Refactored facebookId to id in Profile and Friend Refactored facebookId to externalId in DBProfile
Refactoring
Lots more submenu & view refactoring work. Version => 2.0.0 Some API breakage around view classes.
Refactored: renamed database converters
Refactored initChannel to allow subclasses to have control over adding the channel handlers
Add JavaDoc and ReadMe. Refactoring
Finished GraphPageCategorical refactor of graph page counts comparison to download counts.
Refactoring for Bug 162505 [Markers] DCR: Make MarkerView API
Updated Spock to version 0.6. Updated Maven Groovy Eclipse Compiler. Minor refactorings
fixed #163 custom hierarchy refactoring
<refactoring> ApiUsageCompilableOnlyTest
Refactored JDBC implementations of EventUtil and EventdServiceManager so that they are only used in legacy unit tests. Fixed some Hibernate mapping issues in OnmsPathOutage to make the ID (shared with OnmsNode) work properly.
Slight refactoring of RpcEvent and RcpEventToCallTranslator.
refactor out test session to exist on the suite scope
Further exception refactoring...
code refactored: CallHandler moved to new file; a bit of javadoc added
Scheduler refactor for ticket 2946.
NMS-9290: Refactoring reload operation to handle configuration errors (Part I)
Major code refactoring for better integration of new concepts
Some test utility improvement/refactoring.
[LOG4J2-969] Refactor SyslogAppender so that Layout is a Plugin element.
Heavily refactored market data feed classes
refactoring 1
Simple refactoring.
Refactored for MVN JAR building
"Revert ""Symbolic constraint refactoring"""
" ItEr59S08CUAsignacionRecursosLimitantesItEr58S10: Refactor manual allocation window, set as an independent window"
"Some refactoring, and new partial FAILED-status support"
"Interpolationen und Refactoring. Basis des Frameworks, wenn es von Studenten verwendet werden soll, ist die Framework-Klasse, die entsprechend erweitert wird."
Refactored Join API. Renamed 'type' attribute to 'media'. 
#NAME?
"- SelectionSpecifique.java : correction coquille from/into - correction erreur renommage du conNectionLinkComparator - correction prise en compte timeout ActionLock - correction configuration struts : retrait du controlleur struts principal rajouté lors du refactoring (web.xml), rétablissement configuration spring dans le struts properties et désactivation de l'autowire"
Refactored ProjectUIPlugin ==> ProjectUI
refactor xwiki specific code to the new xwiki module
Package refactoring
Refactor putTransfer method. Add javadocs
refactored DAOs for better code reuse
Refactored UIInput* hierarchy to support getValueType()
yet another attempt to refactor plan generation to something reasonable
Refactor ValaLabelDecorator using CodeVisitor.
Actions name and core refactor (old methods deprecated)
"First stage of job refactoring to executable, timer, suspended and dead letter jobs"
ISIS-1667: refactors ActionParametersPanel and FormExecutorAbstract to understand flow better
"A bit of refactoring to fix password reset, AMEC-2425"
Added templates for rest of the tests. Refactored the Publish command to make it cleaner and more reusable.
Refactoring for imports in the workspace working.
[ARQ-771] DBUnit configuration can be now customized through arquillian.xml Additionally: * Reorganized maven profiles. Updated dependencies. * Initial refactoring for configuration handling. * Restructured provider classes. * Gave MetadataProvider a little bit better name.
Added support to automerge pending refactoring changes
BZ994: Refactor CodeSet so per ORB CodeSet configuration is now stored in the ORB.
"archive-commons: Some refactoring of the SeekableLineReader classes (to be renamed) to support generic reading from inputstream, moved common classes to base When using line buffering iterator, buffer on load"
"refactoring repository returns a git commit instead of a git object, git objects should be repository internals"
[PDI-13172] - MongoDB Output doesn't update fields with null values - handle null values if 'allowNull' flag permits it - add a test - refactor MongoDbOutputTest to shorten it   - use static imports   - use factory methods
Fixing &*$^#%@% thread synchronization bug in storage. Code refactoring and completing JavaDoc thus far.
"Sush,Vinay | Handle error response from Tally, minor refactoring/cleanup"
Refactoring
Refactoring workflow elements.
Refactor: Rename JTSShape to OGCShape
"Refactor, Now we safely move players from a world to be unlaoded, unload actually unloads from memory"
a little refactoring of the jettyserver
* refactoring to fragment based pileups
"Minor refactoring, bump version."
"refactoring, rename input package sound"
refactoring
[GUI-148] Refactor: Rename ClassNameAnnotationScanner to ClassNameAnnotationScannerUtils
layer duplication + a little refactoring
"1. A lot of refactoring - moving often used code snippets into separate functions. 2. Implementation of PluginAdmin.remove() - unfortunately AlitheaPlugin.remove() doesn't work as suggested i.e. ""The DB's referential integrity mechanisms are expected to automatically remove associated records"" doesn't happen. The result is this nice exception:"
Refactor so that GenotypeAnnotation and InfoFieldAnnotation share common superclass VariantAnnotatorAnnotation
refactored for testability
Refactoring to extract bus/notificationQ into killbill-common (first pass)
time stamped objects refactoring
huge refactoring for CLI Main class. Issue #596
Minor refactoring
Refactor and rename classes
NOJIRA:  Refactor IMailStoreDao >> IServiceBroker for clarity and more sustainable design (future-profing)
Refactor writeSchedulingDataChanges() and calculateAdvancePercentage()
Developed the functionality where description of any parameters in the dialog box pops out whenever a icon is clicked. Featured developed by Chintan. Code reviewed & refactored by Micah.
"Refactored command line argument and configuration file handling * Improved and refactored Configuration class * Added extensive unit test for Configuration class * Tried to reduce tight coupling with Main and Configuration class * addresses issues SERVER-43, SERVER-44"
small refactoring to reflect the scope of the class
"Refactor, LoggingService to be generic to log Event with ""type"" and ""category"""
#NAME?
Start refactoring main Layout look and feel
refactor transform method names
More secure input and output stream. Some refactorings.
Refactored the exception classes - TRUNK-4696
[Fixed] problem with NodeEventHandler and [Refactored] some classes
leave room fix closing client fix refactoring
Second round of refactoring of Neo4jTemplate:
Refactored DataChannel to use SocketChannels instead of Sockets
OPENNLP-186 Small refactoring of Arvores Deitadas Format classes
"Refactored Database for open, read, write, and close."
"refactoring, finally intelligible :)"
"Fix for line pasting that are longer than terminal width. This includes a refactoring of wrapping behavior for xterm and rxvt term. Basically they have 'am' and 'xn' wrapping behavior (wrap does not occur until next character is written) and all cursor computations need to be adjusted. Note that I removed the newlineAtWrap method, the only downside I can see is that the cursor seems to remain at the end of the line when user has typed 80 chars (or width chars)."
Package refactoring
Kiran & Sowmya | #569 | Refactored child reporting service.
"[SHRINKWRAP-238] Refactor Container add* methods to denote we are adding *to* an archive, and what we are adding *from* is based on input type"
Refactored Operation member class
langField implementation to store lang tags of literals + refactoring growing methods of TextDatasetFactory
Small refactoring.
Consolidating refactor: eliminating module contract-date-holiday
Test refactoring: eliminate 'bug48' group
Fixed a bug (submit by Hisaji Ono) and refactor the method computing edges-faces relations
Refactored: added includedTestsPattern and excludedTestsPattern parameters to SuiteConfiguration
"SECOAUTH-75, SECOAUTH-135: validate refactoring by adding support for client credentials"
refactor to allow custom ordering of nodes to color
refactor heart beat alert
Refactored Car and Wheel for better reproduction and mutation
A whole lot more refactoring on the setting of properties. I am going to stop now and obey the law of decreasing returns. :-)
Refactoring: Maven has arrived
refactoring
"Refactor ajax / non-ajax method, reorganize html files"
Refactor and add test for french resource bundle
Refactoring test to use more evident data and improving readability of rollRepeatedly
Further message endpoint refactoring in order to find more eai pattern usage
Refactor: improved performence when searching for available rooms. Average search time reduced to about 20% of the original average time.
reverted the configurationhandler changes - made configuration settings Object added debug mode in APK mojo to allow it to include gdbserver - some minor refactoring to move some common variables to abstract mojo
Refactoring
[NTI] Refactor CodingConvention.addSingletonGetter to share the same implementation for both OTI and NTI.
Heavily refactored modules around. Added `RandomEventGenerator`. Added CSS for `EventLogServlet`.
several iterations and refactorings
Refactored HTML dashboard
Abstract tool: refactor the check whether the tool is active
Refs #3704: Code refactoring. Also organizes core-task-impl's CyActivator.
Refactored index storage framework to allow for offset storage Updated source indexer and ctagsindexer to add offset info to index Updated IndexViewer to display offsets Updated Index Tests
Refactored and fixed various ERA PRO connection issues.
Refactor scope api into its own module
refactored
Heavy refactoring ahead!!
"Last of the internal refactoring of custom graphics (for now).  Now, on to adding service listeners into the CustomGraphicsManager!"
Refactored
Refactored shouldResolveWorkspaceProjects and getNonRuntimeProjects()
Refactoring to add custom code-completion in strings.
"Add MemoryPermissionDao, an experimental, memory-only DAO. Refactor ResolverTest and add test for MemoryPermissionDao."
Refactor the Agenda Event model  -Now supports before and after on Activations -Takes Activation as a parameter instead of Tuple and Rule
Refactor DataAccessRegistry - adapt to Geotools Repository interface
Feature #5157 - using the most as possible Gallery REST Web Services : - using SilverpeaFile - modifying some methods of Media class - refactoring Gallery Web Services resources URI
refactoring
refactoring of ws bot tests
Refactoring Behaviors
Simplified and refactored configuration
388566 Refactorings in JREAction(Test)
Refactoring of Properties
[FIN-112] Refactor PositionMaster
Refactored.
MAHOUT-362 last refactorings for now
core: Refactor network bond data in VBOB
"Major refactoring of Configuration management and diskstorage interfaces: - Configuration is read from properties files using comons Configuration - Storage backend specific configuration is removed. StorageManager constructor is assumed to take Configuration as argument and loaded dynamically using reflection - getSlice method makes the assumption that startColumn is inclusive and endColumn is exclusive thereby simplifying the interface - openDatabase returns ordered database, openOrderedDatabase removed (in StorageManager) - added getIDBlock method to StorageManager (through interface IDAuthority). This is used to manage the id pool inside Titan"
Refactored the builder to pass all it's build data around instead of getting it from a local variable. Added the ability to insert introduction text to levels.
refactor
Refactor matrix tests into separate package
"Set up WebEngine test environment, test framwork refactoring"
#NAME?
Refactored: use recursion for Description-to-TestId mapping
Small refactoring.
JBRULES-218: refactoring logical transformation to allow future development of forall
"Refactored: removed TransactionListener, moved entity flushing to EntityFlushingFilter"
"Refactored: extracted SuiteListenerEncoding from SuiteEventSerializer, to separate the interface specific stuff"
"refactored two sets of IHE WS support classes -- with and without WS asynchrony -- into one, made this feature potentially available for all IHE WS transaction in that way "
[ISPN-59] (Add unit test that verifies number of written bytes) Some minor class name refactoring to reflect the new implementation and remove deprecated classes.
[CXF-2759] More refactorings plus adding a demo missed during the original commit
Refactored package names
Remove redundant code. Add creature entity. Add services...some refactoring code in characterData. Change ehcache implementation to hibernate etc.....
Major refactor of database Added geoAPIs
Refactor 6.
"refactored ClassCacheMgr to make a leaner more readable class and prevent bloat, and make parallel work a bit easier"
"small refactor for clarity, add note about exception handling"
Refactoring before disable-verify change
Refactoring: * SolarisTestCommon - added initSampleUser() helper method.   - now all methods are public. * OpCreateImplTest - moved initSampleUser() to SolarisTestCommon.
Update and refactor core UI
continue refactoring of clientCustAction - refactoring of createClient - create static factory method and minimal constructor for creating clients
Refactoring of input parameters.
"CAY-789 return object diff to client in ROP after commit (refactoring of property change handler for DataContext to match that of CayenneContext, and more importantly, pass all events to the GraphManager/ObjectStore)"
refactor
Big refactoring
"refactor to include StackMobRawCallback - all the API methods in the StackMob class take in a StackMobRawCallback, which is a superclass of StackMobCallback - all the API methods in the StackMob class return boolean, which indicates whether or not the request was sent (you still get notified of a response in the callback that you pass, which is called in a background thread) - StackMobCallback is now a wrapper for StackMobRawCallback - stopped using hand-rolled Pair class throughout the codebase in favor of Map.Entry<T, U> - using List<Map.Entry<String, String>> to store headers because it's more correct (ie: you can have 2 of the same ""key"" in HTTP headers) than the previous Map<String, String>"
First cut of linking Packages view actions to Refactoring [db]
DRILL-2280: Refactor ValueVector interface & add an abstract ValueVector implementation
refactoring SLD code
Refactoring the interfaces for statistics collection and extraction.
"Create a CurrencyPairsResolver, refactoring common code out of existing resolver and source interfaces."
refactoring jpa-factory
"Refactored the management of the thread specific WebDriver instances to the WebDriverConfig class, and also pushed up the LoopIterationListener to this class as well"
refactored setup method.
Refactored Scene so that all scene draw components on canvas
further Shrike refactoring to generalize instructions
TAJO-184: Refactor GlobalPlanner and global plan data structure. (hyunsik)
Refactoring of dependencies
"Model refactoring, part I (wip)"
api_refactor: move admin level account apis to admin pkg
#NAME?
HIVE-12902 Refactor TxnHandler to be an interface (gates reviewed by Eugene Koifman)
Refactored Configurators for reuse
refactoring of the server extension feature (see ECLIPSE-966)
"refactored Identity, fix compiler warnings"
Refactoring TreeBuilder structure.
big refactoring
Code refactoring for the LDAP store.
"Refactoring of Handle implementation, which includes the javadocs, proper exception handling, and initial Oracle support.  This, then, includes all the non-identifier stuff which also needed to be updated, plus a change in the configuration to acknowledge a new class implementing the IdentifierAssigner and IdentifierResolver interfaces"
Adding ability to add indexes after the fact. Refactoring.
"ontology expansion refactoring, part 2"
Refactor to enable display of browsing test case source in editor
Gah. Didn't even get these files in the right place after a refactor.
"[MIN] XQuery, refactorings"
Refactored the InboundMessageReceiver.
"Work in progress: refactored commands and book, tests likely to break"
refactoring
refactor service facade
"Refactor OFERTIE NCL to use OFNetwork, instead of SDNNetwork."
Refactor out some common street/walk graph methods.
refactoring of toolbar testcases after moving to different ComponentObject
refactored as comments from @mdogan
refactoring packages
Refactoring.
Refactor
"Mid-work, refactoring domain"
Lots of refactoring in the network code!
Change Entitlement API to use exceptions instaed of null values Remove setChargedThroughDateFromTransaction API and refactor invoice code accordingly
test refactoring : test string occurence suppression
Refactored IService to Service.
Refactoring: moved IWSNServer to package de.uniluebeck.itm.tr.iwsn
page-fragments: lists refactoring
[refactor] Move packages client.sync.* to client.plugin.sync.* and server.sync.* to server.plugin.sync.* because they are specific to the sync plugin (which has both client and server code)
Method name refactoring
kie-aries-blueprint: refactoring of code to integrate kmodule.xml and blueprint.xml. Modifications to Tests
Some refactorings in the portal REST API module
refactor the api so it can be read more fluently
"support for EXEC CICS, EXEC SQL, EXEC SQLIMS, COMMENTRY ENTRY text; refactored preprocessor"
367408 Refactored VerifierServiceImpl
Refactored some code in the ProcessingPreview class.
"Test all the new things, and refactor a bit."
Refactored SelectorManager to make use of java concurrency API. Modified tests accordingly
"Refactored naming to be clearer, shorter and easier to use."
"Major refactor, moving to GWT-RPC, removing Restlet, and many other issues resolved:"
refactor
api_refactor: refactor user (vpn) apis
[refactored] AntScriptExecutor -> BuildScriptExecutor. Will eventually report Java line numbers for gcc error messages.
"Major refactoring to: - Switch the code to GWTP style guide and have it pass checkstyle - Reduce cut and paste - Ensure generated source is formatted according to user's preferences (tabs, line termination...)"
refactor classes
Refactored package structure and added album attachment type for Google+ activity.
"https://issues.jboss.org/browse/JBIDE-8439	Selection Bar dissapears on VPE part when it lost focus for Find/Replace dialogs of content assist proposal list windoe - fixed issue - made refactoring"
create article refactoring
Updated to Twitter4J 2.2.5.  Refactored search URI.  Re-worked all unit tests.
refactor package
refactored
Refactor to introduce PluginTest base class.
Refactored entry scheduler. Code cleanup.
Refactored
refactoring
Working on admin console refactoring.
Refactor start/rebind hooks for overriding
#NAME?
Edm Interface Refactoring
Refactored MavenMarkerManager 
refactoring to get up to standard
Refactored checkpoint planning executor
Refactored to prefer composition over inheritance
refactoring
reporting: Refactoring of DataSet API to include DataSetMetaData to provide column information
Refactor ls-projects code to gerrit-server
REFACTOR: WaybackRequest now has get/set for all standard request values.
First pass at major refactoring.
big refactoring to get rid of CeylonQuickFixAssistant
add TreeMenuController tests and refactor
refactored ToolbarButton and ItemBase code
First pass at some of the changes from the hackathon: - Partially working ModelManager instead of object by object methods - Versioning is partially working - Refactored a lot of methods into a Builder pattern in preparation for Serialization work - dirty tracking is partially functional - modified interface to tags somewhat
refactoring
EncFSCrypto code refactoring + comments
refactored package structure and class names
refactored PlaybackProfileDaoHelper to singleton
Refactored job xml attribute value substitution
small refactoring
Support field/constructor injection. Major refactoring to support this SPI extended for richer injection api.
JENA-638 : Rewrite TransformTopN to treate more generally. Add TestTransformTopN for this specific transform. Refactor tests to out optimizer/transforms in their own TS_Optimization.
refactor and delete unnecessary files
Refactored tests to pull parameters from testng.xml. Refactored tests to run multiple times in different threads. Fixed pipelining issues in both MySQL and Postgresql drivers. Fixed error handling in Postgresql driver.
observer/observable pattern for UI view; interfaces Moveable and MoveableContainer; refactoring (mega commit due to problems with remote branching)
Refactored code with improved test coverage.
"Refactoring of the code, added better pool support, and MBean un/register."
Refactor into sub-packages and extract interface for DAOs.
#109 some major package refactoring so that we get eu.europeana.web and sub-packages
little refactoring on minimax
Refactor the name of both the directories and the artifact ids of the ProjectManager project and of its subprojects
Refactoring plus super-secret stuff
Refactoring
#557 - DDL - DB Migration refactor - remove drop.ddl and use pendingDrops.
Refactor
Refactor IndexPack to not require local filesystem
Minor MiniFinder decoder refactor
refactor
Refactor methods with common parts of reading BCU info
Refactoring
refactor CSVFileReader to delegate parsing logic to CsvReader - this fixes issues with escaped quotes
refactor package
refactor app code
Refactor binary conversions to util class
[OPENENGSB-2935] did some refactoring of the TransformationEngineService. Is now easier to read.
Refactor data storage location logic into OrionConfiguration
Refactor: SignUtils is now in util
CSPACE-172 Finished refactoring of doGet.
[OPENENGSB-876] some little code refactoring + some code parts are now more readable
Refactoring names
# JC-282: refactoring method buildFeedItems and double code
[PLAT-3281] Refactor: rename RemoteRepositoryConfigurationSource to RemoteFunctionConfigurationSource
refactoring- fixed name EnrolmentOJB
Refactor to modules.
Post list URL refactoring
Refactor
refactor workspace a tad
Fixed #1627. Added boilerplate code for entities. Began refactoring.
Command refactor
NOJIRA:  Refactor for clarity -- AccountInfo -> AccountSummary
scheduler: Refactor AffinityRulesEnforcementManager
Improvements to SIRI V2 realtime calls: adding minimum detail level. Includes tests and refactored test base class.
Refactor AjaxSeleniumProxy class to AjaxSeleniumContext (ARQAJO-20)
1) Refactored current Apis not to use reflection for method invocation. In new version following has to be done: * Implement callCreate() and execute() methods in apis extending BaseAsyncCreateCmd (example - CreateVolumeCmd) * Implement execute() method in apis extending BaseCmd and BaseAsyncCmd (example - deleteVolumeCmd and deleteUserCmd)
code complete refactor
TAJO-1288: Refactoring org.apache.tajo.master package.
refactor(ccw.core.e4): merged ccw.core.e4 into ccw.core
Refactored to AbstractGraphVisitor (from EmptyGraphVisitor).
refactored the package name
Refactoring changes.  Primarily moved serialization to VM
[OPENENGSB-472] code refactored
Refactor shared code
Refactored Instantiator tests
Metamer: refactoring of samples for testing validation messages * replace use of JavaScript functions to set values in inputs with invoking of RF's JS API * added suite with all validation messages tests
Minor refactoring of hb ui bot test EditPersistenceXMLTest
New codecs and some refactoring.
Refactoring: Rename Problems.add() to Problems.addError() in configuration. Preperation for adding warnings.
Major Refactor: remove remote usage
Answer entity refactored to QuestionGroup
refactoring to reduce code duplication
Refactor gwt-wrapper and jersey module to new GWT 2.0 project
Refactored message validation context builder
"Refactor SharedDriver lifecycle in FluentAdapter (JUnit, TestNG & Cucumber)"
refactored the ElementAware to NamespaceAware to make it less DOM based and easier to work with on different providers. Also made the Namespaces class a little helper that can be used to create new xpath/xquery expressions based on a bunch of namespaces for simpler Java DSL
reenable the ControllerTestCase that was disabled for a while due to a refactor
Refactor off of com.yammer/com.unclehulka to the new domain (com.hypnoticocelot…thanks Archer and GitHub repo naming script) in preparation to move the code onto the maven central repositories.
Refactored project structure and pulled in notification app from https://svn.apache.org/repos/asf/openejb/branches/misc/moviefun-monitor/
Refactor excel code.
refactoring attributes management (work in progress) {test:passed} {{6hrs}}
[KARAF-881] Refactoring to create the system shell commands
added rails stats report rcov plugin refactor:    - moved rubyMetrics/rcov/tags dir to rubyMetrics/tags    - deleted Rcov PluginImpl due to it's included into the RubyMetrics PluginImpl class
refactored test engine + handling of null influencee/influencer in rdf
Refactoring addon-plural
#POULPE-405 Refactored DeploymentProperties class  
Refactoring. WOLipsProject is protected create a IWOLipsProject with WOLipsCore.createProject(). Hiding the accessors within IWOLipsProject behind interfaces. New accessor for the classpath variables.
ACCUMULO-3599 Refactor tests to run over MAC using Kerberos
Index Reader Interface Refactor - a patch contribution by Dave Daoust
"[RHQ-2118] allow for optional plugin dependencies to be implicitly specified. runs-inside (Injection) and sourcePlugin (Extension) are now implicitly defining optional plugin dependencies. <depends> now implies required dependencies. you no  longer have to define <depends> when you define runs-inside or sourcePlugin - you only need <depends> when you need the classes in that plugin or you want to require a plugin to be deployed with your plugin. still need to refactor this further to support RHQ-2059, but this work had to get done first."
Refactoring.
Light refactoring of method names
Refactored teardownTickets -> teardownRecords.  Renamed TicketResourceCT to RecordsResourceCT
refactored package namespace
[MSC-163] Refactoring - moving perform*Injetions() methods upwards
Refactoring strings into enums.
87080: infer type args: NPE on newInstance() [refactoring] [infer type arguments]
Refactoring settings
Refactor package names to reflect where classes originated
Refactoring of Create and Update Code Line
dynamic assignment of flag bits to encoders minimized encoders to use only required number of bits added safe_way flags refactored acceptWay methods to encodingManager removed all local encoder instantiations
* refactored call stats output to separate class * implemented strand power calculations * implemented normal artifact power calculation
* nano time * refactoring
compiles but is full of bugs (grabber+tweetpackage). needs another refactoring
Refactor wait package to support message generation throw MessageProxy
MIFOS-4322: refactor loanServiceFacades for loan creation functioanlity.
Refactored DefElementDescriptor to use modifierFlags only. Added support in DeeElementImageDescriptor for extraFlags.
Refactoring and correction due to comments
Refactored how the options dialog works. Using the Ok button you can apply all the settings at once. For that I've used the UserInputListener throughout the presentation package classes so all the actions are similar. Also working to remove the toggle* actions as they are too vague.
refactored Rackspace rest client
refactoring des packages pr une resp. unique
Refactor BitmapFontCache color markup
[PLAT-1939] refactor: rename SyntheticSwaptionVolatilityCubeInstrumentProvider to ExampleSwaptionVolatilityCubeInstrumentProvider
refactor method names; prefix with _ if only called from xml parser
"Refactoring: Moved Tycho p2 resolver into ""p2.resolver"" package"
... refactoring almost done ...
Minor refactoring.  Getting ready for unconditional deref of null value checking.
Some private-izing and refactoring of AMQCommand.Assembler.
refactoring :estDossierValide est maintenant isValidFolder
A little refactoring
refactoring exceptionmappers
fix tests - refactor for readability
Refactor.
refactor
Refactor service alerts internals.
 - Fixing bug with byte search methods causing IndexOutOfBoundsException under certain conditions. Added unit test to check for problem. Added new IOHelper and ArrayHelper classes and tests.  - Refactoring method arguments to more closely follow the patterns used in the standard library. - Changing project name to java-commons.
refactor package
Added controller and javadoc comments as well as name refactoring
refactored name adding 01
"Preparing for refactory. Again, all common ideas moved up to Basics. Implementations reside in Extraction module."
minor refactoring
refactor ImageHelper
refactored tests
Refactoring API
refactor
"Refactored some code out of the atom server module and into the shared atom core module.  Added more functionality to the sramp archive class, and built unit tests for that functionality.  You can now add entries and get a list of entries from the archive."
XWIKI-957: refactor XWikiMessageTool to get a translation list from a given documentbundle
Add new connector property. Add DAOs for EmailNotification/Template. Add entities for EmailNotification/Template. Add models for EmailNotification/Template. Add Hibernate mapping for email tables. Some changes to resources mapping. Add classes for job scheduling of emails. Code refactoring. Test email button changes. Add solution to get welcome page URL from system. Remarks to method that adds new row to notification_queue table. New role in Spring security. New content of Edit E-mail templates page.
Refactor into subpackage.
Refactor TmfTrace and TmfExperiment
Issue Selectors refactoring
[json-lib] refactored fix for 1815457
"much refactoring of REST index apis, using new index api."
Refactored
Refactorized retrieveUser method in LDAPCustomAuthenticationProvider.
processed all the comments and more refactoring
refactored out a common module
Fixed problems with frames not being disposed of correctly.  Added a new annotation editor panel to edit the property values of individuals directly. Overhauled the metrics view. Made it possible to hide annotation by annotation property Updated the rendering of anonymous individuals Added a 'reset current' tab action Added some new refactor actions
XWIKI-5512: Integrate officepreview module from sandbox into platform * Refactor org.xwiki.office.preview to org.xwiki.office.viewer
Third step of refactoring utilitary package location: move the utilitary classes from com.stratelia.webactiv.util to org.silverpeas.util
Refactorings of the transport/service base classes
Refactor for easier merge into gwt branch
"extended BeansCoreModel by introducing additional instances of IModelElement for all possible value types of bean properties and bean constructor arguments (namely BeanReference, BeansList, BeansMap, BeansMapEntry, BeansProperties, BeansSet and BeansTypedString) [fixes #486]; refactored inner beans handling to BeansModelUtils.getInnerBeans() [fixes #489]; refactored a model element's behaviour of holding a value into the base class AbstractBeansValueHolder; renamed BeanReference to BeansConnection because this classname was needed for a newly introduced class; updated spring.jar of the upcoming release 2.0.3 to the current head version [refs #476; refs #484]; imported classpath resources are now ignored during validation [fixes #484]; added setter to XmlSourceLocation; added new icon for the key of a BeansMapEntry"
allow static producer methods/fields and refactor slightly
Some refactoring of how property files are loaded
initiate refactoring mavenplugin
refactor both JvmEditor and PropertyEditor so they can be re-used for server-config use cases
DDF-1448 Refactors most of functionality out of AbstractIntegrationTest for greater reusability
"Refactor TOV equations into hydro. Finalize Elastic equations (for RK4, at least)."
praveen|refactoring method names
"JFG-889: Refactoring of Dao; Add TestEnvironment model, dao and service; Add tests for Dao; Disable some PMD checks."
refactor parameter replacements
SONAR-6630 refactor PurgeCeActivities in order to be a ServerStartHandler
packages refactored
[refactor] rename
refactoring
"DOT output fixed, refactorings"
BaseResource refactoring
REFACTOR: renamed UrlCanonicalizer => AggressiveUrlCanonicalizer
refactoring of injected classes
refactored package layout
Better treatment of negations for the unneeded conditional operator refactoring.
OG-Analytics/InterestRateFuture: refactor and expand pricing method bu discounting and in the Hull-White one factor model.
Refactor User.login to User.username.
refactoring the method code
Refactoring forward method to have a common method between repaly service and discovery proxy
DRY'd up the Tomcat remote container.  Refactored to composition over inheritence for the Tomcat Manager command URLs.
Metamer: rich:messages: moved and renamed parent class for tests from rich:message and refactoring
Refactor account preferences model
minor refactoring on dcm4che-tool-ihe-modality
closes #77 API Create/update File: blacklist and whitelist not checked  Quite some more work and refactoring..
Added JMX and refactored the package layout.
refactoring
Refactored the mipmap/screenscale logic into class MultiResolutionRenderer.
just refactor names
#NAME?
refactored packages (part2)
Refactored the ZooClient into a shared AbstractZooKeeperManager and also implemented the ClusterManager with all the wanted methods for getting master and connected/disconnected slaves.
JDK8 refactoring
[Refactor] Photograph : Added new method to test access to photo based on a person. Refactored method to test access to photo based on current user to user the previous method.
refactor performance test code and add pdtt files
refactoring
Refactor code
Refactor test harness for compliance with Sonatype Maven upload rules. Don't skip Javadoc for omgapi for compliance with Sonatype upload rules
refactored policy parsing for clarity and to decompose the more complex resolveFoo mechanic
1320690: Refactor code to eliminate duplicate consumer lookup
HADOOP-1834 Scanners ignore timestamp passed on creation  M src/contrib/hbase/src/test/org/apache/hadoop/hbase/HBaseTestCase.java     (addContents): Added overrides that allow specifying a timestamp. M  src/contrib/hbase/src/test/org/apache/hadoop/hbase/TestTimestamp.java     Made it so test inherits from HBaseTestCase instead of from HBaseClusterTestCase     so could add in tests that do not use cluster.     (testTimestampScanning): Added test for hadoop-1834 bug.     (testTimestamp): Refactored to remove duplicated code. M  src/contrib/hbase/src/java/org/apache/hadoop/hbase/HStore.java     (getNext): Make it respect the timestamp set on construction. M  src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMemcache.java     Removed eclipse yellow flag warnings around empty parens and     auto-boxing longs.     (getNext): Make it respect the timestamp set on construction.
#NAME?
more refactoring and fixing of tests
EST-371: more refactoring of existing fixtures.
Shards refactoring
"Bug 255093 - In C++ refactoring, selection should be updated like Java refactorings do"
websocket lifecycle test refactoring
refactoring
SPARQLEndpointProxy-based refactoring
refactored Mode outside of Settings
"Refactored ReportDesignSerializerImpl and StructureContext. For some elements, don't need to handle all visiable properties."
refactoring / some interface changed.
refactor package name of Processor class
Some refactoring
"#110, refactored tests + sitemap tests"
Enhanced MongoDB ODA features to handle taggable read preference and multiple hosts in MongoURI; plus minor refactoring 
refactor textwriter for PPTX implementation bug 457653
EST-338: Add adjustment flag to invoice item; more refactoring
refactored PDPModel such that it allows to be decorated
Examples refactoring
"- rewrote the ""contextSelector.html"" chapter. The chapter was renamed as ""loggingSeparation.html"" - logback now uses slf4j version 1.5.6 - ContextJNDISelector was refactored. The config file name for a new logger context is based on convention ""logback-CONTEXTNAME.xml""    This obviates the need to set the ""logback/configuration-resource"" JNDI env-entry."
#NAME?
SGF-18 + added basic lookup factory bean + refactored existing schema + added namespace parsers + added integration tests
Refactoring. Much cleaner.
refactor dependency graph
The old recalibrator is replaced with the refactored recalibrator. Added a version message to the logger output. These walkers start at version 2.0.0
Refactoring changes for market data (approved last week)
Minor refactoring and added method documentation
"refactored Hits into the org.neo4j.index.impl.lucene package namespace, to ensure it is included and avoid conflicts with lucene itself (which had dropped Hits)"
IMPROVE: Refactor LeftMenuView ADD: AccountDataService ADD: AccountRepository IMPROVE: Use Spring Data JPA 1.4M1 for countBy support
Refactored package names Adding tiles
[refactoring] Make TemporaryLocalMavenRepository reusable
TMI-JPEG: Refactorings for better separation.
refactorings for clarity
[refactor]: clean up code
* More test coverage * Small refactor
"HEMERA-2552, HEMERA-2549: Refactoring"
Refactor. Edited save and load methonds in DBNClasifier
Fixes #14 - improve doesNotHaveDuplicates performance when a custom comparison strategy is used refactoring : remove Embedded class that was actually not needed and avoid the algorithm duplication
simplifying refactor
Refactor RuleSet creation
Refactored: Bootloader
[SUREFIRE] refactoring
Update for AnimationItem refactoring
more refactoring
Refactored Transport stuff out and removed Layout pattern
"Changes in HL7v3 transactions: * refactorings in Web Service machinery, * fixed producer-side operation dispatching * interactive response continuation support for PDQv3 and QED"
Some small refactoring
more refactoring
"Refactored the config editor, added various  open/save/import/export options, started on parameterized  configs."
https://jira.jboss.org/jira/browse/JBIDE-5942 - refactor to JSF2 composite components (rename/move) was added
SONAR: Refactoring according to Sonar recommendations
refactoring
removed the unsaved file list from refactoring
Refactored some of the code out of the validation error classes into two new message classes.
Huge refactoring
Adjusted and refactored testcase.
refactoring of module configuration handling
"[MOD] WebDAV: refactoring and small fixes (content type check, existing database, etc.)"
"Refactoring (TypeDefinition, Constraint, merge of DS & Driver Metadata...)"
numerous changes as massive refactoring via Fluent model. See CHANGELOG.
Tests passing.  Need to refactor SimpleControllerTests.
JBRULES-2807 Refactor WorkingMemory so all entry points use the same code
Refactor to work with SWT's immutable control style.
Started the refactoring
Refactored deployment package to prepare incremental DeploymentPlan. Removed ClusterLayoutParameters.
"a)Refactored matchers, atom matcher and bond matcher b)getTanimoto score fixed for single atoms"
Major refactoring of what was known as 'AccessRight'. It is now named 'Permission'. Rights and type are now an enum. This MAY break some plugins that used these but it cannot be helped.
More TIKA-1702 refactoring to bring detectors in line with parsers
CSPACE-361: More work on refactoring ID Service to a hierarchy of IDGeneratorParts interfaces.
Refactor to avoid code duplication.
Refactoring: RelationshipType is now Enum type instead of String;
Trying to refactor things for better format overridability
[471357] minor refactoring of target runtime access
"refactor google commands/new google commands: search patent, blogs and video."
"Integrate Statistics modules in the trunk with large refactoring. Clean API and split StatisticsAPI module with a new DesktopStatistics, where the TopComponent and desktop UI, controller and model is located. Build a MVC architecture to support workspace encapsulation and adapt Panels code to support asynchronous model-based refresh. Reimplement Panels with better layout. Adapt StatisticsStandard with new API, delete front-ends and migrate to use current Graph API access. Increase consistency of Statistics settings panel."
SONAR-3755 refactor comments
I2C-0008 - Refactored command line interface sub-module of parent module
WFLY-1077 IIOP subsystem: Refactor
Finished first version of isCoveredBy() method (will require some refactoring) + tests
more refactoring of the refactorings
"Refactored file access to use wrappers, better isolated tests as a result. Plugin now executes JS from included files, reducing duplication."
Refactor
REFACTOR: moving index update code to separate package.
#NAME?
DataServerWriteHandler tests refactoring
More refactoring.
refactoring
Refactoring of KeyValueFactory DONE. Add unit tests. Add findKeys & findValues to WideMap API
refactor entities
initial changes on perm-interface-refactor as part of fix for JENA-992
refactor package name
Refactoring of GUI classes Thread pool mechanism for computation Bugfixes for Jmol
Initial refactoring for new split-artifact structure.
RF-12900: org.richfaces.application.configuration refactored to org.richfaces.configuration
Refactored code to group by source.
started template engine refactoring:
Refactor visitClass since it was over 200 lines long.
Refactor journal and inquire client code
NXP-13922: refactor webdriver framework to test collections
Refactor zookeeper code to inject leader path
"Refactor, change output, reduce memory usage growth, probably a bunch of other junk"
3D Viewer: refactor the Color Dialog
Refactor query tests
"Refactor to remove *Model and *Constructor and xmlAnnotatedItem, part 2"
some refactoring on package naming
SONAR-4206 Refactor rules registration in order to set the removed status only when a rule was removed
#NAME?
Renaming MD5Generator to MessageDigestGenerator and refactoring to support SHA-256.
SB-617: Heavy refactoring of the strongbox-storage-* modules (Phase 2) ---------------------------------------------------------------------- SB-776: Make it possible to define layout-specific search providers
* add changelog to ACTION_PROVIDER_CHANGED broadcast * refactor notification handling * generalize models * generalize processor chains * merge broadcast receivers into a single one that dispatches the actions
refactoring of smartos-ssh
More doc and some refactoring
bug 153642 - Refactor out templates into a separate plugin(s)
"Some code refactoring, renaming and cleaning"
Refactored
refactoring for a more transparent handling of preparation via RoutingAlgorithmFactory interface and new AlgorithmOptions
Created AlbumTemplatesAPI and did a little refactoring of the AlbumsAPI since some things are shared.
Refactoring of RepositoryCache
Method name refactor
refactor the Plugin base class to be a LifeCyclePlugin class as it is what it is
Finishing touches to API refactoring
"Added ""show assessment"" MVC + further refactoring"
OPENEJB-1998 slight refactoring to handle request info - shouldn't directly be in EjbDaemon
"Fixed issue 405: huge patch by Andrey and Artem about a complete refactoring of indexes to support multiple fields at all the levels, plus improvements in indexes and mvrb-tree. And as icing on the cake about 150 new test cases!"
refactoring to replace eventbus with typed listeners
Manual merge and refactor of geoip
add displayName member in computedcolumn structure and refactor resolve reference method code in designelement
Refactoring.
SB-617: Heavy refactoring of the strongbox-storage-* modules ------------------------------------------------------------
Refactored view model according to new terminology (View and ViewPoint)
Refactored part 3: fixed bugs
ItEr60S04ValidacionEProbasFuncionaisItEr59S04: Refactor.
refactoring project name
Refactored TPC-C so that we can work around Peloton's problems with timestamps
Matrix refactoring
"ISIS-14: refactoring runtime, adding tests for JDO objectstore"
Added ability to resume on subsequent Backups Refactored Backup's recursive getPaths so that it is now down by the map tasks (i.e. parallelism) Moved pig date parsing UDFs into their own package
Refactorizaciones.
ACT-60 refactored configuration and test
refactor
Refactor: curriculum group can have several branchs but cycle curriculum group must have at maximum one
refactor package
"Refactored cookbook examples, added example for Comp 124."
Refactored LF5 agent based on newer LF6
refactored plugin to support triggering from different sources such as the github-sqs-plugin
Initial commit of inline content refactoring
Refactored persistence to conform more the vert.x paradigm
api refactoring
Refactored to use a base class
Refactor the Actuator MVC configuration to allow more customization
refactoring createVolume to new API framework
67061 - Refactoring
Travis does not like the last change. Refactor test classes to be inside the org.apache.ibatis package.
Some refactoring
"- Refactoring + corrections bugs - Mise en place Stratégies de branchements pour les graphes - Amélioration prototype VRPTW 	modèle 	parseur pour les instances de Solomon (http://iridia.ulb.ac.be/~manuel/tsptw-instances)"
Improved JavaDocs and minor refactoring moving some methods between interfaces
api_refactor: refactor guest os (guest) apis
"[SHRINKDESC-54] Refactoring to new SPI, move generated sources into their own modules and ignore them in version control."
facade refactoring 
Package refactor
some fixes and refactorings
JBRULES-2351 OSGi Ready  -refactored xml and util directories to avoid split packages -fixed the issue where tests would fail if multiple test classes
[ymeng] calculator: refactor
Refactor:
Patch from Gao Li 1.Refactor the activity related persistence - remove the access to AddActivity from birt report related function and test code. - remove the access to AddActivity from reports category related function and test code. - create a new ActivityTestUtil class which includes insertActivityForTest and deleteActivityForTest methods.  - refactor the ActivityGeneratorTest and remove the access to AddActivity from it. 2. Modify  and refactor the birt report upload and editThenSubmit methods and test code 
Refactor Math#defineReadOnlyProperty and Math#defineNonEnumerableProperty for use in JSON
"#JC-114 Added unit tests to BreadcumBuilder, Refactoring Breadcrumb.java"
Simple for TPC-C on Peloton where we can use the index to find the customer by their last name. Also some minor code refactoring to make it easier to read this beast...
"Merged revisions 11785,11788-11791 via svnmerge from  https://opennms.svn.sourceforge.net/svnroot/opennms/playground/rangerrick/collector-test-refactor"
Name refactoring
"Bit of refactoring of the calculation classes: * KenyaEmrCalculation becomes BaseKenyaEmrCalculation * Methods of KenyaEmrCalculation that had to be public, moved to CalculationUtils * ART specific calculations moved into .art sub package"
WFLY-7882 Refactor JGroups subsystem to use programmatic stack creation instead of ProtocolStackConfigurator.
More refactor
Refactoring of file panels
refactored code and added tests trying to track down the bug in retrieving classes which have already been registered when a superclass is registered
"Refactored Filters to the way Checkstyle uses them; i.e. a Filter accepts or rejects an Object, and a FilterSet, not a FilterChain, aggregates Filters."
"refactored the deployment loader code a bit to split creation of the AppModule from parsing of the related xml files. Still more work to be done here, but when done it will make it way easier to support several different converstion tools."
"Refactor ActionModel, set it back to an interface."
"Various cleanup and refactoring progress.   * Progress on Bio-Formats Importer refactoring, specifically Colorizer.     The current state is untested, and probably broken.   * Fix various warnings throughout Common, Bio-Formats and Plugins.   * Ignore more warnings within the forked components (since we are trying     to maintain the minimum possible changes from the forked code)."
#JC-1357. ImageFormatException should not log the stacktrace (plus small refactoring).
"chore(engine): add javadoc, test and refactor abstract deployer"
Added LockTest. Refactored test packages.
"Bug 411648 - Duplicate object IDs are created under certain conditions - the InsertionAdapter wasn't always setting object IDs, so added a base class method to create temp objects and assign IDs. Bug 411717 - Feature serialization for some elements does not match xsd used by jBPM parser - added framework support for reordering features. Bug 411541 - File save takes an unusually long time when jBPM User Task property tab is visible - refactored some code to cache tooltip text lookups; this was enough to speed up the resource change notification loop."
"Doladene vynimky a chybove hlasky, refactoring"
Refactored calculations into library.art and library.tb
Refactor codec.
"refactored task scheduler, it is now more robust and more testable"
"Refactor structure, fix HttpURLConnection test"
refactoring: split methods in resource updater
[ENG-85] Refactor position master
"Bug 316303 -  [Compatibility] turn actionSets into MenuContributions Bug 316802 -  e4 variant of contributing to toolbars Bug 316304 -  [Compatibility] turn editorActions into MenuContributions Bug 316305 -  [Compatibility] turn viewActions into MenuContributions Refactor so that trim contributions are added by the trim renderer, and toolbar contributions are added by the toolbar renderer"
Refactor services: shorten method names
refactor
HDFS-6940. Refactoring to allow ConsensusNode implementation. Contributed by Konstantin Shvachko.
spool: refactor cleanup code
EPD-221: More work on tactical route refactoring
refactor - public interfaces should not be internal plus move util class to public since its usefull for implementers
Further refactoring and improving around column type parsing.
"tests, and refactoring of paypal payments"
Refactoring
Refactor main code for simplicity
Introduced RefactoringASTParser
"Refactor, improve API and documentation and add tests."
refactored patient tag tests into new PatientTagTest class in an attempt to keep the RegressionTest class from becoming overly large.
Refactor away ImageDisplay.redoWindowLayout method
#1126 - multi-tenant-refactor: model Qualifying Item Criteria XREF entity similar to Target Item Criteria XREF
"http://jira.jboss.com/jira/browse/JBIDE-680 Refactor templates. New names: ""with libs"" and ""without libs"""
Cookies refactoring
refactoring - working
refactoring for delegate the responsability to EnumFunction this way we dont need to change AssociationFunction implementation
Small refactor on configuration and exception
more refactoring
another test refactor
IDE-1487 refactored the existence validation of properties files and added unit tests
Test refactoring : Extract method
Application/Provider refactoring
Refactored some of the repetitive logic inside saveEnvironmentsForXXX() methods into BaseServiceImpl.java.
Refactor this
Refactored last remaining external filtering to use the NodeFilterSupport.
"Refactorings, REST client"
Refactored ManagementContext to  improve encapsulation - so all registrations of MBeans happen in one place
"HSEARCH-1366 Introducing a SessionFactoryObserver to delay Search Factory creation until ORM SessionFactory is built. Refactoring FullTextIndexEventListener, removing unused Installation enum, adding @Override, making variables private"
Refactor to reduce duplication
Refactorings to resolve bug #342677 (Done some renaming in ApplicationContextUtil to streamline things a little bit)
MIFOS-4385: finish refactoring of fee service facade.
refactoring
"Improvement on the shutdown hook management : if the shutdown hook was alreaded executed, then it should not be removed from the Runtime otherwise we get an IllegalStateException: Shutdown in progress. The code was refactored so that the shutdown hook executes the same code as the normal stop, still with logging message that indicates whether it's the hook or the normal stop. The shutdown hook Thread's name is set explicitly so that it's even easier to see that in the logs."
refactoring
Refactor and rename transform classes
refs #161 - tests refactored
refactoring spot selectors to spot package
"completely refactored and tested, works good now"
Refactoring of scripting infrastructure
Refactoring entire project
Refactored LinkBench code so that everything is contained in the top-level benchmark dir. This has bothered me for the last three years. I am glad that I finally just fixed it...
Refactoring
HSEARCH-391 - HSEARCH-391 - made sure the top level indexed entity gets found by recusively calling processContainedInInstances. Refactored the code by splitting out more methods
Refactoring of core tools.
refactored jsfunitng package name to warp
refactor package name and add math test
Refactored recovery of schema indexing
Cleanup refactoring: Move 3 methods into DelegatingHttpsURLConnection
Refactored model object jOOQ mappings
refactoring to extract Pod class
Summary: Refactoring chart ui code to extension work.(T55355)
#JC-1869 Fixed messages and done some refactoring
worker quality calc. refactor
Refactored execution graph listeners
Refactor DialBeginEvent / DialEvent
Refactor tests to be reusable for NIO and OIO
small refactoring for FSAccountsService
refactoring to generalize some reflection processing
"Improvement for #523, wrt EnumMapDeserializer, but only for 2.5 (due to minor refactorings)."
290: Further refactoring for readability.
"Refactored argument matching to support other plugins in addition to file lists. Added plugin support for sending Queue status messages. Argument parsing can store subclasses of java.io.File, for example RemoteFile."
Complete refactoring - Spring IO Platform - HikariCP - Onion architecture - Spring Data
Issue #1666 maven tests were refactored.
#14 refactor controller tests to use spring mvc test framework
Refactored to have a map for each part of morse alphabet.
DF#QCADOO-276 qcadooModel: remove officious lenght validation from StringType.toObject; +Refactor field types for providing default validators.
[MRM-1579] rewrite repositories scanning admin page start some refactoring to ease implementation (reusable beans)
Applied patch that takes first step towards integrating the security by refactoring the existing security from ExecutionContext proper into a new interface called o.j.d.graph.SecurityContext. The existing JAAS code moves into an implementation of SecurityContext called JaasSecurityContext and JcrSession can now accept a new type of Credentials called o.j.d.jcr.SecurityContextCredentials that wraps an existing SecurityContext.
MAGNOLIA-2810: refactoring: moved update task away from core to adminInterface module
api_refactor: move disk and service offering to admin pkg
New Feature : Groups for Alumni (Coordinator and GCRP) + group refactoring
Create Client Jsps modified to select savings offerings at the time of creation and preview. Code refactoring done.
CheckIn:Refactor data engine code
Package refactoring.
Major refactor
Increased stability in the assertCurrentActivity methods as well as in pressSpinnerItem. Also moved waitForActivity to the Waiter class and some other minor refactoring
"Lots of changes to clean up the interfaces.  The operators are now available in DoubleTimeSeries downwards, which makes for neater user code at a slight (optional, you can cast) penalty on execution (essentially 1 or 2 instanceofs). Also changed subSeries, head and tail to return DoubleTimeSeries<T> rather than TimeSeries<T, Double>, which again, was annoying from an end user perspective.  Added SQL date implementation and an offset date implementation (which returns fractions of a year from a specific date, useful for cashflows).  Lastly the unit tests have been refactored to remove extensive copy/paste and make it easier to extend and improve the coverage."
Refactored some classes to internal package and scenario simulator returning 'no simulator' to enable UI to reset the nodes
Refactored XxxCodes
"JBRULES-3606 Project Model and CDI Generation -Last commit for the type safe stuff, before I do a big refactor around portable extensions"
Refactor FedoraTypesUtils to just Predicates in active use.
Partial refactoring of output writers
refactorings concerning output URIs. 
Provider refactoring
refactor picture upload
"Adding patch from Alv associated with issue tracker task 2339.  In addition to the patch, did the following: - refactored asserts to use testng asserts instead - moved asserts to verify methods on page objects - moved createoffice and createuser methods to adminPage and changed CenterTest and PersonnelTest to reflect that move - moved random string helper to new mifos.test.acceptance.util package."
Refactoring
"refactoring: extract methods, decrease level on indention"
Some refactoring of tests to better support the introduction of ZooKeeper
refactor search
Refactored duplicate code into separate method.
EST-801: refactoring document rendering to be a background process
Refactoring NPM names avec Nelson
[BZ 747925] get the test to register an updated parent plugin v2 and refactor the tests to make it easier to work with.
touched up refactor of the copy constructors of the Parameter and Properties class
Refactored: split classes from interfaces
Refactored the input handler into a separate class.
package rename fixes...more refactorings for Asynch stuff.
refactoring
massive refactoring
"Small amounts of refactoring.  Also, I changed the title in a table on the HTML page that shows the source code for your classes from ""Classes in this Package"" to ""Classes in this File"""
"- Consolidated 'OpDeleteImpl' to match the pattern, that was already used in 'OpCreateImpl' for dispatching NIS/Native command variations for Account/Group objectclasses. - introduced the pattern for naming operation implementation classes:     [OpName][NIS, Native][User, Group]Command.java, for instance: DeleteNativeUserCommand.java - implemented delete for NIS groups ('DeleteNISGroupCommand') - refactor #1: Create and Delete NIS Group commands have some shared code, that was placed in to common ancestors of all NIS commands ('AbstractNISOp'). - javadoc extension: SolarisConnection"
Minor refactoring
Refactoring to allow overloaded methods
"Refactoring for improving  code organization, readability and reuse."
refactor(ProcessApplication): introduce interface to enable local view
Refactoring to the Reckoner services to remove 'vestigial' calls from the first pass.  Adddition of memcaching.  Completion of comment posting and retrieval calls.
"Cleanup & refactor, more to come."
refactor (move duplicate code up)
Split some inner classes out of the parser and refactored some class names.
RF-12900: refactored message components to subpackages under ui.message
CHUKWA-420. More refactoring
structure refactored
"Merged with uportal data plugin, refactored ear deployment"
JBRULES-941: Refactoring a few method names
Refactoring
Refactor directory structure to follow maven conventions
started refactoring out Calibrator
"GEOT-4344 Creating gt-complex module, Moving some complex stuff to gt-main, Refactoring app-schema"
refactoring
"formatting, minor refactoring"
Created a simple remote control interface; refactored the code that connects to the music server and subscribes to the DJObject.
Fix domain refactoring
SONAR-5687 refactor configuration of cluster
huge refactor with listeners.. need to fix the test
Package separation and code refactoring in order to use interfaces
"refactor, spilt classes"
refactor zipMap into zipMap and zipMapPartial
Further minor refactor of LTI/OAuth stuff
Refactored the plugin.
just small refactoring
Refactoring: AISProductSet->Ionogram
Minor refactoring
Refactored GradePanel to make it easier to work with.
MODE-2160 Refactored the query engine and index provider SPI.
Refactoring: User became Account
1. Refactoring of ExternalFilesRegistry and ExternalFilesListener locations           (moved+renamed) 2. Changed all unnecessary ExternalFileDecorator creations to just retrieve from registry
refactoring
ResourceBase refactoring
RESOLVED - bug 243441: [selfhosting] refactor registry view model https://bugs.eclipse.org/bugs/show_bug.cgi?id=243441
https://jira.jboss.org/browse/RF-7816 HtmlUtil refactoring
Refactoring: - Moved javax.enterprise.event API to new artificat. - Fixed tests.
Do some clean-up to prepare for Tag refactoring to reflect last meeting. Also some rowKey clean-up and simplification Please clear out your persisted directories/databases
#1041 - Refactoring Page and template extension handlers
Refactoring.
refactored image from yaml creation
"refactored and cleaned up the MOLGENIS typing system to prepare for applyProtocol plugin. Now a list of all known field types (e.g. 'int', 'xref') can be found in class org.molgenis.MolgenisFieldTypes. These types are used like minigenerators and can be used to deal with type metadata at runtime. This replaces the old Field.Type that was still lingering around..."
bug 337565 - Fixes to exclude refactoring
SONAR-4898 some refactoring
Refactoring addon-layers-service
Refactored @Convert SPI and created implementation for JSF
small refactors
#NAME?
Refactor definition xml parsing so it allows references to other files. in this way common profiles can be kept in just one file making easier to manage them.
Refactored MyCompanyProduct Display and View naming to SampleProduct.
More refactoring
refactoring methods names
refactor view and axis
Refactor.
CSPACE-1927 - Refactored how displayName computation is done in prep for handling them better on update. 
First pass refactoring for understanding and cleanup.
"[SHRINKWRAP-194] Refactoring to the stream-based export delegates to encourage code reuse before introducing a TAR.GZ exporter.  Add a naive, untested TAR.GZ exporter as well.  Still needs an importer and tests for all; probably some refactoring of the tests to get reuse there too."
refactor(persistence): consistent flush ordering
"SecurityContext refactory - moved configuration and caching to RI (these should be RI-related as other possible implementations may handle configuration and caching separately, or may not even directly support them)."
"Added HistogramOperationStats, and refactored bar chart generation * mean and stddev retrieved from HistogramOperationsStats seems sometimes suffering from some HdrHistogram bug"
"DDF-463 Cleaned up from refactoring, used standard constants, renamed classes to remove ambiguity."
#970 Refactorings in Listener.updateAvailableNodes() NormalizationParserBindingSource is moved from AnalyzerPanel to GroovyEditor
[PLAT-3281] Refactor: rename RepositoryConfiguration to FunctionConfigurationBundle
Code quality: Mild refactoring to satisfy SONAR
Refactor multipass related codes in data.
[LOGTOOL-21] Initial work for supporting the new @Param annotation with some major refactoring.
refactor some duplicate code
"code refactorings, api improvements"
refactoring and javadocs for Context
refactoring the JDK installer to allow ssh-slaves to do this over SSH.
WICKET-3335 refactor/cleanup component queueing - a clean way to ignore outer tags which is necessary for proper fragment and border support
"Major refactoring to now using Gilead (Hibernate4GWT) to export and serialize Hibernate annotated domain model objects to the GWT client thus removing the duplication of code and the need for DTO and Assembler objects for each domain object.  Also changed a ton of packages around, configuration needs for Gilead service wrappers, JAR lib dependencies and build script."
minor refactoring and cleanup
main: refactor the startup sequence
MNG-5871 refactoring: put url extrapolation algorithm in inheritance model merger
Refactor ResolveMerger
Second round of Pax-Construct refactor.
core: minor refactoring in RemoveVmCommand
#JC-1428 Refactoring after code review.
JBRULES-1100- Refactoring constructors to load deps 
github refactoring
Light refactor of IntIterableSet
re-refactor alarm filters and test to ensure the alarms page still works
"Merged revisions 11785,11788-11791 via svnmerge from  https://opennms.svn.sourceforge.net/svnroot/opennms/playground/rangerrick/collector-test-refactor"
Refactored Circle Strategy to Periodic Strategy
Refactoring
refactor code to move some APIs to VC classes
refactor
#NAME?
Refactored gps -> pnt
"Refactored XClassConverter, fixed getClassList, fixed class definition so that classes can be re-defined later."
Refactored selectors to use predicates instead of custom handmade semi-parser.
refactor(core): cancel scope & concurrent activity
refactoring
#NAME?
refactored tests and internal code due to removing custom guava code
Refactored mock classes in separate mock package.
AuthorizingAccount and corresponding Realm refactoring + cleanup
Refactored all the REST APIs to match Twitter's API
Refactor: extract interface from OrderedSuperRows and SuperRows and move them to the api package
Refactored for Cache creation only through CacheManager
Refactoring
* increased test coverage for corner cases * refactored ObjectFactory do reflect changes in behavior of default test bean creation and dirty property creation * moved junit and test ng classes to test package in order to remove compile time dependency to those frameworks (implementations will be part of the wiki page) * added parameter check tests * added actaul tests for the abstract framework test classes
JBRULES-941: Refactoring a few method names
multipart provider: fixing findbugs warnings. Some refactoring in XopWithMultipartRelatedJAXBProvider to move anonymous classes to nested static classes.
Major API refactoring - Most of MOP covered - App registry and page layouts are NOT covered at this point - Still WIP.
Intermediate refactoring: rename and split super class.
"added Exception to throwlist on Consumer -> corrected some catch clauses in multiple files, startet OAuth2AuthorizationServerInterceptorTest refactoring"
[GEOT-5766] Directory refactoring for ogc/wmts and xsd/wmts as per review
"Temporary refactorization of project structure due to keep compatibility for ""spring/ftl"" with ""struts/jsp""."
PLAN 4303: CUI refactoring
Refactoring for readability
Refactored listeners
"CacheProxy refactored, cleaned up"
Refactored loaders.
refactored encryption service and exposed sha256 routine
refactor
Converted rename refactorings to processor/participant architecture
refactor
"Table naming convention changed to singular, and User table refactored to UserAccount"
Refactoring to resolve cyclic deps
"Refactor. Also, mostly implement RacoCalculator"
https://issues.apache.org/jira/browse/AMQ-3851 - refactor AuthorizationBroker so that addDestinationInfo is properly handled
refactoring the modules from loopy
refactor
Implemented document uploader on the studentView based on editablility of the submission. Refactored code that was shared with upload document
Refactored how statistics are used from TestStage * statistics prototype is loaded through ReflexiveConverter as a property * removed HistogramStatistics and HistogramOperationStats -> will be added as extension
Refactor write concern.
refactor to separate s3 and solr
413155 refactor HttpTransportOverSPDY to fix some bugs and reduce cyclomatic complexity
"- Added methods to the storage service to get gateway client and application objects - Several refactorings on the Rayo and Gateway servlets to reuse some shared code. - ban/unban operations moved from the Gateway mbean to the Admin mbean - Several changes on the cassandra datastore to improve ""clusterability"" - Fixed a bug on the in memory datastore - Extrated cassandra schema name to cassandra.properties - Refactored out Schema creation code to a new cassandra schema handler class - Removed some obsolete TODOs from the Rayo source code."
refactor state parameter use in OAuth 2.0
"RESTWS-167 : Refactoring as v1 to resource, controllers and URLs"
Refactored PixelInfoToolView (fixed listener registration chaos)
refactoring
Refactoring of the BasicAuthenticationMechanism now that the need for an inner class to handle the actual authentication has been removed.
Refactor the name of both the directories and the artifact ids of the Chat subprojects
Refactoring in DHNS for using only AbstractNode instead of PreNode.
Refactor to use greenes split within bulk load partitioning function
"Issue 830: refactored Org, Network, Task, User apis to support URN; removed 'id' from Reference type"
Refactor Templates support into separate plug-in
refactor update method of upstream boundary to generic timestep(...) by implementing SimulationTimestep 
Refactored commons/xds/core and platform-camel/xds/core: Extracted web service stuff
Refactor SourceFileSelector into lang package.
restful refactoring
Some refactoring to make tests run in Maven
Startign to refactor executor
Refactoring + Simplification.
refactoring the user profile handling
Refactored BBCode stuff : - BBCode CRUD operations are now hold by BBCodeService - Rendering is now generalized into MarkupRenderingService - BBCode rendering is performed by BBCodeRenderer  and plugged to MarkupRenderingService - introduced an BBCodeProvider as a mean to have custom BBCodes (used by Forum)
small refactoring
More Refactoring.
changes after pullrequest comments + refactored common code to superclass + create mechanism for multiple annotation results
MAGNOLIA-3577: refactoring after code review. Moved interfaces and generic classes to Vaadin module.
Big Refactor
"Simple_Neurite_Tracer: refactoring of clickForTrace, startPath and testPathTo"
refactor the webshopcontroller
Refactored ProblemParameterInfo
bug 7979 First pass at refactoring time-range indexing/querying More to come but for now:
"Further refactoring. I'm getting pretty happy with API's and implementations now, maybe soon will be time for documentation."
minor refactorings
"Refactoring, moved methods from JarInspector to MavenHelper"
"Changes since version 0.1: 1) code refactoring, 2) bug fixes, 3) improved error handling, 4) new and improved scorers, 5) uses latest stanford corenlp pipeline,  6) default named entity tagger now supports 7 types, instead of just 3."
Refactor demo application.
[MIFOS-3130] Refactored the EventSourceMatcher to use the TypeSafeMatcher
Refactor and improve SaveFiles.
First refactor of TAL support
* Replaced various Property class definitions with single SimpleProperty class * Refactored IDialogStatusListener from relational to ui.common for re-use
[OPENENGSB-3385] added support for the revision numbers and parent revision number. Also refactored some of the JPADatabase code.
[KARAF-963] Refactoring of the wrapper module
refactoring to accomodate protocol/array data (not complete)
"EST-564: Refactor Index, IndexBase and IndexValue"
NTriplesParser refactoring
RESOLVED 342614: Refactor QooxdooResourcesUtil
Refactoring the app store out from App class
Movie mass actions refactored out
Refactored to support object multi bulk reply
more refactoring.
lots of cleanups and refactorings
domain model refactoring - inp progress
* refactored the conversion component * fixed empty macro call initialization (no content by default) * fixed the loading screen after macro refresh or macro insertion
"make ArrayList and HashMap Proxied objects, and make the change events incremental - this allows two users to edit different parts of the the same map or array without one user erasing the other's changes; support for declaring that a java class must inherit from a Qooxdoo class when proxied on the client; support for constructor parameters when creating a proxy object on the client; support for adding mixins on the client to server-based classes; fixed bug where changes to a property by a client caused a change event to be passed back to the same client (overwriting any changes since the last send); minor bug fixing; refactoring of some utility methods and test code;"
refactored number formatting
Refactoring
REFACTOR: moved main() from ArcIndexer and WarcIndexer into IndexWorker
Refactoring UI states in order to implement alternative actions (issue #12)
refactoring
#57 refactor entities
Refactored feature tests to generalize server startup and shutdown.
"* Some refactoring of the existing NIO code * I/O reactor is now able to asynchronously establish outgoing connections (first cut, untested) * Added async HTTP client connection"
"update to jline3 + rather larger refactor, cleanup and simplification to the entire framework"
refactor: moved plexus-build-api support to a separate package
data-binding: refactoring to move all binding and sync logic to a newly created driver class
Refactoring.
refactored packages (part3)
Gros refactoring et finition ExportDeckUI.
refactor
Refactored class hierarchy
"Allow users to override timeouts on sync interface: some refactoring, unit test added. See issue #253"
"#POULPE-366 Add a context menu item for jcommune re-indexing. Code refactoring, tests, docs. Violations fix."
"Refactor - move context creation logic to bootstrap/servlet lifecycle, mock it out for tests, clean up literals"
"All options added. Initial ninja language support. Needs some refactoring and more interfaces, Appended datebox still a crap, cant change language by hand yet (because of JS injection), event handlers still missing. - refs #60"
Refactorings
BZ-1105174: adapted config services to use same WatchService pattern; Small refactoring on WatchService on package naming; Updated EJB dependency;
Refactor tryClimb() into JarMapping
-Refactored Robot's data class -Added logic to find winner
#NAME?
Refactored Logger and LoggerContext classes. We now construct the Object array to place the arguments of the parametrized logging only when the TurboFilters have been called. This makes the cost of not logging less expensive of about 20 nanos per request. The isDebugEnabled methods (and related isXXXEnabled() ) now call the TurboFilters before returning their result.
EST-257: refactoring inheritance hierarchy
"use ProcessorBasedRefactoring, avoid subclasses"
Refactored to introduce a base class for tests
documentation and some refactoring
minor refactoring and rejigging of UI code.
"PLINK-130 slight refactor of annotations, add missing source headers"
refactoring the parameters handling
"Untested refactoring, but looks MUCH nicer"
"XWIKI-3496: Method call inside velocity macro parameters break the macro matching * completely refactored the velocity filter, it now use a javacc style full parser on velocity syntax"
Refactoring of indexing drivers.
[MRELEASE-370] dry run does not update snapshot versions correctly Refactored test cases to ensure it was in the state it would be in a real dry run (per suggestion in MRELEASE-295)
Code refactoring
CAMEL-10612: adding platform tests with reactor-core and refactoring
refactoring and logging for cns consumer
Refactor regex to add some tests and remove matchgroups
BZ 584355: i)refactored ldap auth classes to be more consitently defined.ii)modified exception handling.
Refactor Actions and push up some methods to the base class.
Refactoring  * move ASHelper methods to appropriate classes (to ensures abstraction)  * rename WS_ENDPOINTS_KEY -> JAXWS_ENDPOINTS_KEY  * getJaxwsPojos & getJaxwsEjbs should never return null collection
refactoring :D
refactoring to org.apache.activemq package names.
#POULPE-12 Move branch view presenter in org.jtalks.poulpe.web.branch package. Refactor code view make BranchListRenderer as anonymous class
refactor
"Refactor to use interfaces in core model, for easy GWT replacement"
Refactor ProcessBufferProcessors to use MessageProcessor instead of MessageFilter instances
"More refactoring: Renamed packages, moved files to proper packages."
"NOJIRA - Refactored autorities support. Fixed several inconsistencies, and simplified the code. Still some more to do to port this to Location, and to make authRefs and refObjs support more consistent."
refactor send alert module
Refactor test code to isolate idl and class compilation
bug 8045: fixing the corner case around uncaught/unexpected exceptions; minor refactor of the code status 8045: resolved fixed
Refactoring of PageRank graph classes: added proper arg parsing.
[SHRINKWRAP-140] Renaming and API refactoring atop kpiwko experimental branch
Refactor spring-controller
Add per db#table counter of records buffered and refactored some methods used internally
Major refactoring
"CSPACE-323 changed directory structure of authentication service, refactored CoolectionSpaceClient to accommodate needs of AuthenticationServiceTest. added testng tests for authentication. authentication tests are enabled only if -Dcspace.server.secure=true property is used."
refactor navbar
Refactor EventAggregator events.
Refactored the 3 distance algorithms to be defined more consistently.
big refactor
api_refactor: refactor network apis for admin pkg
[MSC-183] Refactoring - no functional change. Eliminating ServiceControllerImpl.getDependents() method.
"Cleanup and refactoring in ServiceReport: replaced int constants and strings with the enums introduced in the new constructor; removed old getters; added getters for type, status and message."
"BLC-473 - Cart service changes - Removed bundle concept from demo.   Will add back with new BLC bundle concept. - Refactored demo import SQL and JSPs to use product.defaultSku instead of ProductSku.sku. - Added AutoBundleActivity that automatically creates a BundleOrderItem if a user adds the constituent parts (Espresso - id - 157, Grinder - id -175)."
Refactoring para a definicao de um service de gerenciamento da plataforma
Updated #JC-1512: -refactor code according to CR
refactoring - commands pakcage
Minor refactorings.
refactored syllabus artifacts
Refactoring and cleanup.
Refactored way of retrieving the different kinds of publications of a person. Also added bibtex import in the public interface
lifecycle annotations refactored
Refactor Main.java so it's easier to subclass and customize.
IMPORTANT: Refactored everything in main pane to display only a subset of tabs for a given editor
refactored the class hierarchy of rewriters
Refactor of encoder code. Add direct use of binary tags.
refactoring
[MST-2] Refactor position master to separate portfolio master
Refactoring big methods
otec: refactoring and new failing test (currently on @Ignore)
EMAILPLT-67:  Refactor javax.mail types out of the AccountSummary class
"Refactored argument matching to support other plugins in addition to file lists. Added plugin support for sending Queue status messages. Argument parsing can store subclasses of java.io.File, for example RemoteFile."
api: Refactor and move VPN related api cmd classes to command.user.vpn
refactoring properties panel and events
Refactoring
#NAME?
"KARAF-1302 Use aries jmx for instance module, refactor package names to instance.core for core packages"
refactor PriceExtractor class.
Refactoring
Jetty9 - Refactored commit logic into HttpChannel.
Bug 453135 Refactor UserEmailUtil to servlet bundle
[MSC-180] Refactoring - no functional change. StopTask now extends ControllerTask.
refactoring: move output package on same level as input and simulator
Refactoring code related to arguments checking.
fixed unit tests after refactoring of microchip potentiometer impl
Refactoring to tidy up resolving and combine object factory and manager - III
"Preferences refactoring, contribute GHC options to new Cabal file"
svnkit-dav: code refactoring + fixes.
DDF-565: Refactored code
Refactored tests.
"Refactor: Manage versions in the bolonha portal now allows users to see past and future competence courses, as they are transfered between departments. Bug fix: Fixed a problem on the edit version page that did not render the whole page after a validation error. Bug fix: Fixed a bug in the scientific council portal that displayed past competence information for future execution semesters."
refactor
refactor to reuse functionality where possible
Public phd program: - refactored candidacy state: RejectedByCoordinator to Rejected - added candidacy information to view process interface in academic administrative office
Route creation + refactoring for views
BSM-81: Refactored code to use ConfirmationDialog of the vaadin core module and moved StringInputDialogWindow to this module.
event-driven server-side execution + refactored package structure
REFACTOR: moved org.archive.wayback.bdb.* to org.archive.wayback.util.bdb.*
** perform refactoring ** remove dublication ** align tests
"Add test for build badge, finish refactoring (timestamps instead of paths used as url parameters)"
refactor InvoiceCalculator to a service
"Unit tests for ConfigReader, corresponding refactoring"
"More refactoring, pulling all logic into SolarEventCalculator class along with tests.  May move tests into subclasses depending on how large the test class gets."
Refactored.
Refactoring: moving impl (service/dao) to IMPL packages
major refactor from mBukkitLib into anduneCommonLib (no Bukkit dependencies)
XWIKI-6167: Refactor extension manager in a bit more modules
Refactoring logout procedure; does not work correctly with POST yet.
Support of global-ignore patterns that are matched with wc-root-relative paths: SVNStatuEditor refactored to extract relative path computation in a separate protected method.
refactor MBFunction for zoom level calculations
* bindings drag-and-drop onto inline bindings * split out several features for reuse later * added support for specifying the position of new bindings during refactoring * switched from direct StyledText manipulation to annotations
Refactoring to move Simple Java class from cdi impl to java se impl
#NAME?
LOG4J2-1990 refactor #logMessageSafely method to stay within 35 byte MaxInlineSize threshold; add TODO for Configuration setting to propagate exceptions back to caller
Refactoring in names etc
"#752 - Refactor: SQL generation for @History support with Postgres, MySql (views/triggers based) such that it more closely aligns with SQL 2011 based SQL"
BAEL-804 - Spring Drools refactor
Refactored SearchPageTest.testPagination using new SearchPage class.
report refactor part3
"Refactored a lot of the code, and started on status-updates"
"stress, new features & refactoring"
"Refactored locking so that it's focused around TransactionState, instead of in NodeManager, LockType and what not"
major refactoring
continue refactoring: disable adapters not on the critical path
refactor dcm4che-hl7
BaseTestScenario refactor
Major structure refactoring.
Refactor CsvTestExecutionHandler API to be the same as RemoteServiceExecutionHandler
"Refactor ZoneId, ZoneOffset, ZonedDateTime, OffsetDateTime et al"
EdmRefactoring: HashMaps removed from Provider API
Refactored statement() to share more code between C/C++. Added in ambiguity resolution code for expression statements vs. declarations statements.
Start to refactor MulticastMain:
Refactored eu.stratosphere.dag package
#JC-1361 Refactoring of user registration logic
A bit of refactoring and more code/doc in the service discovery example
"Fixing the FullHistoryTest: refactoring the way HistoricActivityInstances are looked up (still needs to be moved to the entity manager), creating one if one is not found (to solve the order problem)."
refactoring: moved models to their own sub-package. Added admincentral menu loader using new admincentral json endpoint
closes #73 (refactoring of SIPBalancerForwarder)
payment refactoring is finished
"implement item moving, refactoring"
[PLAT-2785] Refactored formatters to support multiple arbitrary formats per data type
Core: refactor declarative migrations code (#778).
"refactor consumer info menagement, fixing some bugs"
Refactor autocompletion and make it handle multiple missing typed chars
Fixed issues related to multiple hosts in one instance of red5 on the same ip. Added unit test for global scope lookups. Refactored webscope and added host id attribute to the servlet context.
Refactors and updates of various kinds
tim-connector: Refactor majorId attribute of Connector entity to name
"JBRULES-607 Working memory is not disposed when releasing the RuleSession -WorkingMemories now dispose() correctly, and stateless sessions no longer request to keep references -Minor refactor for more code reuse"
Refactor to MVC...sort of working without session perisistence
More refactoring for speed an organization.
Resources + Other needed classes for new CDI test for EL refactoring added
Improve and refactor the ResourcePermissions component
"Refactored Client Methods, Not all methods complete"
Major refactoring
[93287] LTK Core Refactoring triggered on shutdown of JavaPlugin
Refactor services consumption detection & JAX-* handlers archi
More membase to couchbase refactoring changes
"introduce processor, improve javadoc and minor refactorings"
refactor BaseAlertConfig
Issue #101: http://code.google.com/p/orient/issues/detail?id=101 About escaping special chars in query + Refactoring of query operators to support non-record operators (such as for indexes)
#NAME?
Refactored listener registrations.
https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring in progress. - double initialization of VpeController has been replaced by single initialization. - MozillaEditor tooltip- and resize- listeners have been separated.
Merging annotation refactor branch changes to head
Refactor methods visibility a bit.
"MONDRIAN: Refactor Hive support to reduce reliance on StringTokenizer     hacks and explicit references to the Hive dialect, and make generation     of 'FROM-JOIN-ON' a more mainstream facility.  I removed code such as     stripFunctions; I haven't tested on Hive, so my apologies if I have     broken something."
COURSESPLT-5 Refactoring common elements into shared XSD and adding course offering section detail screen
ACT-741 refactoring persistence
"code review comments, minor functionality simplifications and refactorings"
Refactored page drivers
Refactored and documented api
Merging report-api-refactoring to trunk [2696]:[4157]
Some refactoring
add JavaDoc and a bit refactoring.
*NON-COMPILING COMMIT* Refactoring the tool structure to the standard API/IMPL/PACK/TOOL model
Refactored: test scaffolding for splitting accesses to multiple buffers
refactor offsetted series benchmark
#NAME?
Refactored codebase to move commonly used classes and configuration to the new common project.
Refactored AnalizeImpl code
Further refactoring and new logic in decoder.
issue #24 reorganization refactoring
Refactor field merging adding CalendricalMerger
[PLAT-1147] More refactoring including ViewEvaluationModel to CompiledViewDefinition
"Refactoring for version 3.1. In this version, the work done is targeting the issues 11393 and 11894. The former is related to a new result seeker. The latter to to memory management."
eliminating reference to RefactoringDescriptorChange
refactored token introspection packages to support different client credentials at different services
"refactoring: client wrapping has now two steps 1) shellClient 2) nativeClient taken registerResource out of ClientWrapper implementation, now in ClientFactory"
refactoring clipboard
"Refactor the code of job submitting logics, step2"
"Refactored session management a bit, moving functions to their rightful place"
"Dependency cleanup, refactoring, bug fixes"
[RHQ-2193] - finish remote client impl for ResourceGroupManagerBean;  use int in favor of Integer (and fix all callers);  change sessionSubject to subject;  fix tests to catch new exceptions due to some refactoring in the local method throws clauses; 
refactored registration managers
Refactoring continued
refactoring tests
Refactoring of the security realms and integration with the HTTP interface and Native interface to move the combining of the authentication step with the authorization step cleaner and also to improve the long standing issue of how capabilities are both registered and discovered.
refactored methods names and created a new one to get phd external link value
clean up/refactor of the netutils operations
refactored all classes to openphacts.validator
Refactoring one loop
Minor refactoring
refactored and added back in JVM system props to SpringApplicationServiceConfig
Refactored hazard rate curve class.
Refactoring to use Gradle with a multi-project build.
core: refactoring vm-analyzer
Refactoring addon-configurable to generate addon.jar and annotations.jar
refactor for remove any reference to specific wal changes implamentation.
refactored for first steps in Writer support
CoreLayerException added into core plug-in and usage refactored
Refactored code for creating jar file into its own method so that it can be tested independently.
Refactoring test cases
refactored GpioController interface to accept variable length pin arguments
#485 - First draft at a scorched-earth approach to the payment refactoring from the framework domain side. Represents work in progress and later revisions might be undo some of this invasiveness. This is a very large commit so read on for more detail - PaymentInfo has been renamed to OrderPayment - PaymentInfoDetail has been renamed to PaymentTransaction - Payment workflows have completely gone away and thus the application of payments to an order has been decoupled from invoking checkout - Better javadocs across all of the payment domain (although by no means are complete) - Deprecate/remove any baked-in dependency on anything that implements Referenced. Use of entities implementing this interface should be treated as an edge-case rather than the common case - Move the Referenced entity into their own packages
minor ParentRunner refactoring in new code
Refactor to allow opening a Ceylon declaration from an IJavaElement
JBRULES-2209 Refactor Commands to mirror drools-api
SpatialRuleLookup Refactoring (#987)
Refactor SSH command permission checks to use CurrentUser
[Refactoring] SiteService membership + favorite
This is a big refactoring of the user class and more. Many commands have been cleaned.
SONARDOTNT-274 Refactor sonar-csharp-squid-plugin
Some refactoring in prep for better handling of nested fields.
inital refactor mythtv services api 1.0
STS-2309: refactored getConfigName into BeansConfigFactory and added Java type handling
PageService refactored to QuestionGroupService
first cut of cube refactorisation
#NAME?
"Add some refactoring, fix issue #53"
refactored undo story test for reusability
more refactoring for the package directory of the tests
"Add a tosa suite, get the select stuff limping along again for a pull into keefs branch, so he can see it during refactors..."
SONAR-9052 Refactor IssueQueryFactory
"#110, LoadContent refactored to allow override and adding fixtures for testing"
Remove debug parameter from more constructors. Aided some refactoring for CalWs-SOAP
refactor test method names
Major Manager refactor Added Material Manager Deprecated Item Manager Moved Item Names to the Materials
Huge refactoring to get working DBpedia importer
Refactoring AI: Debugging collidesWithPoint
Refactor: Moved TestGridMatchInfo to base.prefix package.
Minor refactoring in rexpro.  Extract a few methods.
Almanach refactoring: - viewing its own calendar from an almanach - event notifications (little refactoring about user notification builder) - handling the almanach portlet
MAHOUT-495 - Moved RandomUtils and uncommons math dependency to math to allow refactoring of random stuff.  Switched all distributions to use RandomUtils.
Refactoring fixup in HttpFetcher.
refactored hack to makeintegration tests running with surefire
refactor lane change update
refactoring away from jaxb2_commons
Continued refactoring of sopremo-query
refactor: transitioning FileTask to generic BufferedTask
Small refactoring
refactoring CyclicBufferTracker and AppenderBufferTracker into the more generic ComponentTracker
Refactor AbstractResource to push unnecessary methods downstream
login process refactoring
Change to using the HttpGet(URI) constructor and create a URI from the string URI. Refactoring the original out creates a seam we can use to verify the URI is well formed for testing.
"more refactoring of symbol table.  getting nicer all the time... and more tests, too...."
Refactoring in tests
Small refactor
Refactored package structure (if I can call it that). Some more refactoring here and there.
refactor FibonacciHeap
"Completed SemiClustering and BipartiteMatching, nominal package refactoring"
Checkpoint refactor branch.
MAJOR: removed getOutgoing and getIncoming - makes no sense for vehicle neutral Graph; other refactorings
CAMEL-990. A bit of refactoring to simplify code.
"Issue 695: Refactoring1: Pushed up links, actions to BaseResource as lots of duplication. Added some getAttributes overrides in builders"
refactoring - use select in method names in ComponentDao
Refactor BeanCodeGen
refactored server: ApplicationRole constant to enum
Refactoring temporal primitive model to fix bug #301 (http://tracker.deegree.org/deegree-services/ticket/301)
refactor DruidDataSource
Define low-level async handler that can be implemented to support an async HTTP client framework. TODO need to refactor async listeners.
refactor equivalence for containers so item results not required
IDE-201 fully integrated and refactored some portlet wizard classes to make them more easily extended
"refactored internal TreeAdapter / TreeItemAdapter, added testcases"
refactored Test (added a small builder for span+style)
Refactoring file-monitor and support
Working on Factory Generator tests and a bit of refactoring
jetty-9 refactored onOpen and onClose
Event name refactoring (part 2)
"Refactored DHT package, added builder pattern similar to PeerBuilder"
refactored preference initialization
refactoring work to get rid of old protocol package
Refactor getAIPlayer to newAIPlayer
CAMEL-1443 a little refactoring of the LanaguageResolver
fixed filter and subscription logic. Refactored to filter subclasses
"Refactoring, less code, simpler code."
Refactoring to prepare for #186 - removing guards logic from MixinsSolver
"Refactored XmlHandler: - startElements -> childElements - endElements -> parentElement (only one) - removed myValue, setValue(), getValue(), and appendValue()"
Refactored
Simon manager configuration initial refactoring + other little fixes and adjustments.
"* refactored to fold DebugST into ST; adds one object ptr to every ST instance but worth reduction in complexity. ""new ST(...)"" calls didn't work (not DebugST objects) in inspector.  ST.inspect() for any ST now. * Fixed bug in STViz. Didn't highlight entire output when you click topmost template. * STGroup.debug no longer there nor static.  It's an instance var of Interpreter.  ST.inspect() tells interp to debug. STGroup.trackCreationEvents says to record where in code an ST was created and where code added attributes. * Gutted tree model for STViz, refactored debugging/event tracking code. * creation events had wrong location (launch of interp location); only tracks now for externally/injected created templates."
Refactored data specification in multiple regression api. JIRA: MATH-255.  Patched by Mauro Televi.
Refactored RosterView to pull out RosterView inner classes (viewcontentprovider and support classes)
* refactor tests
Core: refactor topic/assoc storage code (#340).
Refactoring - Structure comparison implemented through options - Options class created
Refactored packages.
small refactoring: 2 providers renamed.
ChatPresenter refactorings. ChatMessage optimized. Time stamps on chat messages
"[CXF-5311] Quick prototyping of JwsOutputStream, refactorings will follow"
QuickBuild: refactor stream copying
refactored Bbc schedule updaters to recalculate date range for each execution
o Refactored code
"* made some continuation-related parameters part of service configuration * introduced validation of HL7v3 messages, which internally generated and handled in continuation context (currently consumer-only) * further refactorings and fixes"
refactored Request to use new HttpURI
"WELD-1794 Refactoring, use bootstrap modal dialog for injection point info"
Beginnings of 'rename similar types' refactoring
raw/generic refactor for issue #270 - Bitfinex
REPORT-698 - Refactor SqlIndicatorEvaluator to use SqlQueryBuilder
engine: Refactor RemoveSnapshotSingleDiskLive CB
refactoring
Medium sized refactoring.
"refactor, fix world gen, add Bundles Signed-off-by:Craig Russell <tenowg@gmail.com>"
Refactored SPARQL based debugger.
Refactored input/output gates
"HIVE-11595 : refactor ORC footer reading to make it usable from outside (Sergey Shelukhin, reviewed by Prasanth Jayachandran)"
Refactored: renamed EntityManager to ReferenceFactory
Refactored to allow for a general purpose DigestedEntity.
refactored inverse testing
Big refactoring of the command implementation to make the Loader more prominent.
Core: internal READ access refactoring (#941).
Refactoring: 1. extracted BioEntityDAO 2. Created Spring beans for Loader classes.
SB-617: Heavy refactoring of the strongbox-storage-* modules SB-450: Introduce the concept of a StorageProvider SB-451: Introduce the concept of a RepositoryLayoutProvider SB-628: Introduce the concept of a RepositoryProvider
SONARCLIPS-407 Refactor server configuration
refactor
"refactored project, GPProgram now implements the generic Heuristic interface"
refactoring
Refactor: Pedagogical Council. Enable the creation of a second round of elections.
Heavily refactored core internals.  DataContainer interface changed along with core entry components
JBRULES-1734 Drools API  -refactor to remove org.drools.knowledge
EST-611-AreYouSure-and-Lombok: refactored and implemented the are_you_sure action semantics where possible
Refactor ProjectRevision -> long handling.
Refactor ParameterizedPatternParser to have a slightly nicer API
"FACES-1894 Add general utilities for Liferay Faces Alloy Components (Refactored/regenerated components, added module attribute to YUI components) FACES-1896 Develop alloy:button, alloy:commandButton, and alloy:icon component (Refactored/regenerated alloy:button, alloy:commandButton, and alloy:icon component) FACES-1942 Develop alloy:field component (Regenerated alloy:field) FACES-1935 Develop alloy:fieldset component (Refactored/regenerated alloy:fieldset) FACES-1929 Develop alloy:row and alloy:column components (Regenerated alloy:row and alloy:column) FACES-1943 Develop alloy:dataTable and alloy:panelGrid components (Regenerated alloy:panelGrid) FACES-1944 Develop alloy:message and alloy:messages components (Regenerated alloy:messages and alloy:message)"
refactor load
Refactoring of package org.sonar.server.computation.ws
Refactor container create options. Add support for specifying zookeeper server port on fabric:create.
Refactored HttpMessageConverters to put them all in the same package.
ISIS-109: more refactoring so that representation builders are looked up by media type (build is now green)
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
o Refactoring: Moved one incorrectly placed method from BuildListCalculator to TaskSegmentCalculator
Fixed Custom Player Vars coming before Custom Global Vars. Added an option to restict the use of IP's in chat. Version alteration. Censor function refactors.
Massive refactoring removing old keystore management and old configurations. Still a lot to do.
"import from google code and refactor to convert to jekyll page format (with additional transformations: list, macro handlint, etc.)"
Issue #1. Refactored to use shorter method names
some refactoring
1.0.8-SNAPSHOT -Refactorings in CujauJDBCTemplate to let queryForObject specify the  checkForEmptyResultSet and exceptionOnEmptyResultSet values.
o Refactored Authentication to store sensitive pieces in char arrays rather than strings
Refactored List list() to Set all()
"Refactored to remove separate validator, rename cdm validator to analyser and update some of the bundle names to be more consistent"
DDF-595 - refactored JAXRSClientFactoryBean creation to TrustedRemoteSource
Refactor of the controller classes
Refactor
Refactoring and tests.
#574 - Refactor - rename .plugin objects; SpiBeanType -> BeanType and SpiServerPlugin -> Plugin
Refactored Page to add additional extension points.  #1041 Support for https://github.com/BroadleafCommerce/AdvancedCMS/issues/81
refactoring
refactoring
SB-617: Heavy refactoring of the strongbox-storage-* modules (Phase 2) ---------------------------------------------------------------------- SB-670: Refactor the ArtifactController.deleteMethodFromMetadaInFS method
Refactoring: restructure packages for download engine module
Small refactoring. Excluded some code duplications within reports providers.
Refactor the KeyOutWriter and DailyKeyOutWriter to create a slf4j logger. Remove duplicate code from DailyKeyOutWriter. Add the ability to create a Logback based out writer with size and time based rolling and with no filename on rollover. Update slf4j to the version used by Logback.
"QAART-45 Add image component object, tests related to image refactoring."
"fix event handler issue caused by txmanager refactor, fix ft node power on issue"
Refactored CommandLineTools class.
Matchers refactoring
saving refactoring work in progress (do not sync now!)
"Fixes, refactoring, and javadocs for sharedobject events interfaces and classes (and implementations)"
Refactor execution of config class enhancement
"New launcher icon, refactored working with the  timer and UI update stuff"
"Added Rebellion of the Flamekin and Elemental Shaman Token, refactored Hostility and Hearthcage Giant to use the token as well"
Refactoring to allow better extension points in the milestones app
HDFS-2225. Refactor file management so it's not in classes which should be generic. Contributed by Ivan Kelly.
pushed RefactoringWod* lower down
refactor
refactoring for diagnostic commands
refactor Prop constructor arguments.
refactoring names and adding parent pom
 login refactor
Refactored.
"Package refactoring, SimpleDataSource"
Refactor private methods (group all the parsing and write attribute operation creation methods).
ref: refactoring
refactoring for DefaultDebugServerConnectionTest and fixed message
"Refactors state transition guards, and uses mixins for ""internal"" state transitions, and fixes the duplicate INSTANTIATE transition"
Options support in Photon. * Support options in the position engine and Positions vies * Add option fields to FIX message views * Option support on Photon market data infrastructure * Major refactoring of command entry parser (FIX agnostic) * Major refactoring of order ticket views (FIX agnostic)
"Refactored GeneTable load algorithm to account for alleles that are not links, as well as alleles that have a gene part but no associated allele (GenePage was not handling these properly). Renamed PhenotypeTablePhenotype to PhenotypeTable to match the rename of the GeneTable (there used to be a Phenotypes HTML table in both GenePage and PhenotypePage but now there is not.)"
Refactor selenium smokes (add Graphene for easier extensibility) (#281)
refactoring
Refactoring
Refactored test driver.
"Harkens back to when commits were large, and coders showed no fear.  No Fear! + Adds parsing support for SItem + Service-level support for SItem, SWidget, SGroup, SMenu + Refactoring common pieces from some services and authorities + Integrates with Dirk's changes to ""org.eclipse.core.expressions"""
Add form request (application/x-www-form-urlencoded) support for sparql end point - Refactor the rest api codes for sparql
"ACT-347: introduced delegateExpression on serviceTask, taskListener and executionListener. Also refactores all Spring tests while I was at it."
"refactored all the commands to cater to keshav's needs, and added the new apis. the initial set of testing is complete, will now focus on corner cases"
Cosmetic refactoring.
First step in the complete refactoring
Some code refactorings and solving of Hibernate proxies.
refactor to have a reified response from a shell command evalutation
And more of refactoring
Some refactoring of the admin UI
FACES-1235 Refactor richfaces4-portlet to use rich:fileUpload and additional usage of a4j component tags
"fix multithread issues (Statistic), some refactoring"
Refactored it a bit and made it more readable
Include latest version of jline to fix issue #16.  Refactor source code org.
Refactored some stuff
JAX-RS content negotiation-related refactoring
"- refactored and simplified RequestTypedGuard (+fix checkstyle warnings) + extended related tests (when wrong request was done, check this type)"
Added tests for load balancer validation. Added a node validator and refactored for new validation structure.
[Kewei] Refactor the xml bean parser
"Using Guava's event bus, some refactoring here and there"
Small refactoring to help in writing macros that extend other macros
groupCustAction refactoring - editCustomerStatus refactoring - pushed logic for updating status for groups and clients into services.
unit tests and refactoring
Tiny refactorings
Several refactorings
Refactor ReadRowSet to use setCommand and execute
"Revert ""refactored to extract example application"""
[PLAT-2271] Refactored structures
"Refactoring of FieldSet and Legend, moved to ui.Added new set methods."
"#POULPE-306 further refactoring, test, fixed some errors"
Refactoring of pull376
Disabled async tag updates. Smaller refactorings
ROO-1992: Refactor JspMetadataListener handle i18n properties more efficiently
"refactor PropertiesBuilder and related types into ApiMetadata and ProviderMetadata, and update all usage"
Affinity Group detail view added; refactor of data sources for entities derived from the Server class (various composites)
"refactor tests to strictmocks, image save refactor"
refactor http headers
Refactoring: InstantMessagingValues => InstantMessagingValue.
Completely refactored Element.toString() to use a new customizable Visitor (Printer).
Refactored the ontology-access APIs. Next step - refactoring the UI for the ontology-access.
refactor + added any()
"Refactor elements of the perf data model, and add test case."
more refactor
More refactoring/reformatting.
"HIVE-6125: Tez: Refactoring changes (Gunther Hagleitner, reviewed by Thejas M Nair)"
"[MIFOS-4302]Fetching Month names dynamically instead of properties files, refactored cashflow module"
"Adding tests for API, more refactoring/renaming."
Fixed issue #51 by refactoring the StatisticsRepository class into two separate classes.
Some refactoring in Winding
Added some missing methods to ConditionFactory and refactored test to assert that exceptions thrown in another thread are not caught
Added monitoring. In the middle of refactorings.
issue 1109 SamlServiceProviderRegistrationIT plus some refactorings
Refactored transactions
Refactor the cart state processor name
refactored structure
refactored document request search to include all academic service requests
Refactor to make the HttpAction objects and servlets independent of Jetty. An indirect dependency existed for HttpAction on SPARQLServer. Refactoring is a step towards JENA-201 (Deliver Fuseki as a WAR file).
refactor getEntity to getResource
refactor APIRequest and test against example from API reference
Some refactorying to make raster and vector process factories extensible.
"Refactoring the persistence: splitting of persistence specific code in the EntityManager classes into a DataManager class. The EntityManager -> EntityManagerImpl  now each have a dedicated DataManagerImpl that contains all the MyBatis specific code, effectively making it possible to plug that layer with some other implementation."
#NAME?
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Refactoring by introducing a WikiIRCModel * Started adding the Event Listener to send notifications to the channel when a page is modified
TMI-16: Refactorings. Moved segment classes to upper level. Extracted thumbnail reading to separate classes.
refactored ontologyLader
basic refactorings and first FX partially working interface
Refactoring towards JSON-based vertex data serialization
continuing refactor of the graph building code
REFACTOR: Changed name from ShortestPathGenerator to A_StarPathGenerator
minor refactor.
New commands. Refactor of CmmandFactory
JBRULES-220 Refactor ObjectType to work with Templates -This also involved  refactor Evaluator to use Enums for ValueType and Operator
Refactor sorting
Refactored groupid
Refactorings
Refactor Heritable->HeritableComponent.  Use class instead of object to get aggregates by class.
Refactoring and moving classes for easier testing / scaling
CAY-885: merge changes between model and db  refactoring: split all tokens by direction
Minor refactoring
"new feature: [Native] annotation to skip JS code generation for class. This allows to put all Jangaroo *.as files into one source directory: no more /joo-api! To make this work, I had to refactor the compiler a bit to support imports for primary declarations that are not classes or interfaces. The imports are now collected by the compilation unit. Note that imports for helper classes are still ignored."
Refactorings to use JsonIgnoreProperties.Value to allow config overrides
"ISPN-1131 - refactored InvocationContext structure because of the following reason    - if you'd access both a transactional and non-transactional cache within a transaction's scope, the non-transactional cache would still use transactional contexts which resulted in several runtime failures"
refactoring move method in newbehaviour
"engine, webadmin: refactor manage networks flow"
refactored GPIO pin events for new extensible provider impl
Refactored: use get/set accessor naming style in JvmArgs
Refactoring tests
Refactored tests so they are all in the com.google.errorprone.bugpatterns package
Moved Refactoring Test Cases into own plugin
"Refactoring, trying to figure out how to get rid of mandatory `loadMore[Guaranteed]` methods without big backwards compat pains"
"big refactoring, removed custom caching, nicer repeatable hashjoins"
Refactor FeatureConfigInstaller
" - refactored FSCommitter.commitTxn(), SVNDefaultDumpLoader.closeRevision();  - removed FSCommitEditor.finalizeTxn()"
Add ActiveRegion tests and refactor
Created matcher for elements. Refactored collection tests for elements using new matchers
Refactoring to the query engine. Not as supposed to be.
refactored codes for ParseStateFactory.
Refactored FormModel.hasProperty to FormModel.hasValueModel to avoid confusion (see RCP-334)
"a bunch of tweaks, improvements, and bug fixes to user and role list and edit views; refactor table action API to allow custom button enablement logic"
Bundle Domain Model Refactor * rename RHQ_BUNDLE_DEPLOY_DEF to RHQ_BUNDLE_DEPLOYMENT ** BundleDeployDefinition to BundleDeployment
"refactor some, and add some message types. ready to try sync connections"
Refactoring and sending budget warning mail. This needs to be tested
Initial javadoc for Account and Catalog API Minor APi refactoring toremove unused public APIs.
refactoring: rename AbstractPath to VirtualPath (correct name)
Feature #907 : refactoring (get back Transaction mechanism introduced by Miguel to handled the finest as possible the JPA transaction into a service) (moving user notification sending from SuggestionBox.Suggestions to SuggestionBoxService) (moving the specific status information of suggestion to the ContributionValidation that is a common object)
Refactored
refactoring
Minor refactoring about package names Added comments
Print method refactored
BroadleafCommerce/Menu#12 - Refactor the Category Site Map Generator to handle a category structure with no single top level nav
REFACTOR: moved ExclusionFilterFactory classes under org.archive.wayback.accesscontrol
Refactoring + reduced testcontainers log output
refactor some code
more refactorings
refactoring
refactoring...
successfully removed axon dependencies. Refactoring to leverage Vaadin JPAContainer and Roo active record.
RevertTest: minor refactorings.
Yet more RSA refactoring.
Refactored unit tests using new string loader
refactor
Sample Tabs Sample refactor
Refactor the way hooks are run
Refactored context class hierarchie used by the byte-buffered channel manager
"HV-571 Minor refactoring. Adding toString implementations, making isCascaded explicit"
HTTPCLIENT-1834: NTLN auth refactoring; support for MS CredSsp auth Contributed by Radovan Semancik <radovan.semancik at evolveum.com> and Karl Wright <kwright at apache.org>
"use ISourceLineTracker instead of CodeModel, minor refactorings"
refactoring ExplainSearch and added documentations
Refactored chart presentation adapter code.
App-schema refactor while working on paging. All online tests now passed with paging changes.
refactoring
big refactorings of the API
"Refactoring: column identifier, with a set of rules for Postgres"
[refactored] utility methods to handle W3C Documents [added] new strategies for a compact representation of Identifier and Metadata nodes (allowing at least two lines where useful)
XWIKI-2497: JTidy and HTMLCleaner have been dropped out. WYSIWYG uses now xwiki-xml for cleaning the HTML. The Radeox-based HTMLConveter has been also dropped out. WYSIWYG supports now only xwiki/2.0 syntax. XxxImpl classes have been refactored to DefaultXxx.
"HTTPCLIENT-1032: Refactor to clean up duplicated code in cache entry validation (regular, and variant reuse negotation) by extracting code to shared method."
Small refactoring - method renamed
lotsa refactoring !
[MIN] minor refactorings
"Added Point.reset(x,y) and ctx.makePoint(reuse,x,y), and did some refactorings to take advantage of it."
IN PROGRESS - issue SOAPUI-2958: Clean up and refactor the keystore and WSS entries together with corresponding tests  https://jira.eviware.com/browse/SOAPUI-2958
Refactoring and implementation for DAV:add-member POST
"ACT-1786 Refactoring of packages, in order to avoid multiple modules having some class sharing the same package name"
Refactored JAXB notification into class hierarchy to allow for further subtypes.
Package refactoring work.  The major move here was: org.mifos.application.customer --> org.mifos.customers
Bug 453135 Refactor DiskUsageJob to core bundle
HV-976 Refactoring ConstraintValidatorManager to just handle constraint validator resolution for single given type
ListView widget refactored
Refactored plugin hooks to separate packages Changed CancellableEvent to just use Cancellable New Features * (McMMO) added new mcMMO support. Disabling skills * Toggle to disable same item check (config.yml)
Event group refactor
Refactoring performed + some new usecases declared but not completely implemented
Refactored tests code: * Renamed LinkPluginTest to LinkSupportTest for naming consistency accross tests * Moved generic methods from LinkSupportTest to AbstractWysiwygTestCase * Added API for testing generated wiki content and setting wiki content and replaced all use cases with calls to this new API
Refactored collision reaction out of GameLogic and misc other things
Added presence roster package and interfaces/classes as part of presence refactoring
JBRULES-583 Refactor RuleItem to AssetItem
"MIFOS-4602 WAR Integration Testing infrastructure; refactorings started, mostly just renames and package moves for now"
refactoring
TYRUS-232: Refactoring continues
*NON-COMPILING COMMIT* Refactoring the tool structure to the standard API/IMPL/PACK/TOOL model
refactor Behavior<T> to be Behaving<T>
"refactored geom package, ConnectionData implementations are now immutable, now using Optional instead of @Nullable fields'"
Refactor of IRFutureOptions to incorporate monthly expiries.
"Command: show-config, reload-config. Some refactorings in import handler and import daemon."
refactor package
Refactored InternalDrag and related classes to simplify.
refactoring. removed unused fields from MemcachedSessionData.
minor refactorings
refactor codes for newElementFrom in ElementFactory.
Refactor UDPTest
PackagesBuildListener refactored to PackagesListener. when a package changes from exploded to compressed or vice-versa make sure to delete the old file/folder from the deploy dir first
XWIKI-2263: Upgrade xwiki gwt api to gwt 1.4 * updated pom dependencies to gwt 1.4.61 * removed the gwt-tk dependency                                                 * updated dialogs to use gwt 1.4 standard dialog boxes and refactored dialogs code   * added gwt property fetching code in XWikiDefaultApp to manage the change in gwt api
"Refactored flow control, encapsulating it into a strategy. The reason for this change is that the server will soon be serving both SPDY/2 and SPDY/3 browsers, so the flow control strategy must be dynamically chosen depending on the SPDY version."
Refactor the package path and artifact name
Refactored Function and CustomExpression related packages.
minor refactoring
"Some code refactoring, renaming and cleaning"
Refactored naming of result classes for consistency
refactoring: fixed some sonar violation
"[PLAT-1296] Refactor time-series master; New database, stage 5"
refactored the code into the bai-core module and added a simple implementation of the configuration parser
Issue 101 - refactoring fit test suite
optimizing Collection; refactored xqts TestRunner to support benchmarking Serializer for more efficient capture of xml text (JDOM not required)
o Refactored code
Refactored Logman greatly
"XWIKI-5929: Improve the display of ""selected color"" in WYSIWYG's color picker Also: * Use our own code for setting/detecting the text and background color * Make sure rich text area is enabled before loading plugins * Save the initial content of the rich text area in submit plugin rather than in rich text area controller * Added clirr excludes to platform web pom (for GWT sources) * Code refactoring"
Issue 280: refactoring to support vcloud 0.9
"Big refactoring to make change on SIREN instead of UAI only, to be able to change on non UAI structures"
Refactor search mapper
Merge branch 'develop' of jtalks.org:jcommune into develop.topic_refactoring
"Refactoring: keep ProtocolWriter in ServiceContext, obtain it from ContextProvider"
refactoring connection factory bean; adding exception translation hooks
refactoring of the setup of mocks in ProcessDefinitionServiceTest and ProcessInstanceServiceTest.
more refactoring and organizing. function and functions is now native to gremlin. renamed g:append() to g:list(). functions isolated from model implementations. property graph model is ready for its own repository and package separate from gremlin. added test cases for Xpath core functions (there is a bug with sum that I need to fix). updated change log with lots of new things.
Refactor: move command executables inside the plugins
"[PDI-7350] Fixed validation for Pentaho MapReduce Mapper Input/Output Step Names. Refactored how Pentaho MapReduce checks for valid transformation configurations for the mapper, combiner, and reducers."
Refactor Context_Help a little bit
Refactor out drawer-related code
Refactored pool health check and added Dropwizard healthcheck
more refactoring for criteria
#NAME?
Refactored default-method-java8-webapp into java8-webapp.
Feature #3146 : adding transverse file filter - adding two component parameters to handle file filters (authorized & forbidden files) - adding two global parameters (authorized & forbidden files in jobStartPagePeasSettings.properties) - adding process check of file filter - refactoring transverse exception management (DataStorageQuotaException & ComponentFileFilterException for now) - adding StringTemplate messages for ComponentFileFilterException - adding Web error page for ComponentFileFilterException - adding some unit tests
"The lions share of work on issue #636. Checkstyle errors have gone from a count of 383 at release of 0.0.2 to 488 errors after almost all of 0.0.3 is finished, to a count of 300 errors now that a good bit of work has been done on that front. Along with that, some complexity reduction work was done. Play and Fling actions got refactored as well as the mouseWheel zooming code both in EntireGraphingPanel.java. Bugs found and fixed were a play delay int roll-over catch that didn't work in the slowDown() method of EntireGraphingPanel.java and the method getTransferDataFlavors() in GenericDataElement.java was returning a reference to the interal array instead of a copy."
More refactoring and bug fixes.
Refactoring some namespaces.
should start refactoring
hub test added + refactoring
Refactoring
"Refactored ClassResolver, move most logic back into Kryo. Simplified DefaultClassResolver. Added registration tests. Made registering with an explicit ID more sane."
SPARQLProxyBase/Client & GraphStoreProxyBase/Client refactoring
"performance turnning,refactoring, optimize send buffer."
Candidate MVC refactoring starts...
refactoring
Refs #3123: Minor refactoring only.
Various refactorings for simplifications More tests More documentation
Refactored interaface location
Slight refactor
"some more commands, some refactoring."
Fix wrong naming convention. Refactor common code Add test for deleting all emails in a mailbox Update version number in read me
Added TEXT data type for PostgreSQL. Also refactored some of processing for data types.
HIVE-12442: Refactor/repackage HiveServer2's Thrift code so that it can be used in the tasks (Rohit Dholakia reviewed by Vaibhav Gumashta)
Refactoring Account api to remove dependencies also refactored some tests to remove dependencies (on account module).
Some more implementation and some refactorings regarding relationship type creation.
[refactor] rename
Refactored junit.test: moved src/test/java to src/ (part of #894)
Refactor annotation to minimize clashes.
Applied refactoring by Martin.
Refactor IndexDefinitionHash
DDF-1955: Refactors AdminSourcePollerBean into its own module
Refactored engine API to separate project
Refactor OSGI service registartion from bundle into Killbill so we have only one path and they are all done the same way.
Adds number of views to view icons in Network panel. Minor refactoring.
Refactored test to make corner cases explicit.
refactoring the expression analyzer
intellij refactor - safe
refactored to make OrderStatus follow our type enumeration convention.
Refactor shader to hide internal stuff
"Made some refactorings (which should, if anything, make things a little faster):"
Refactor: Using exceptions to send errors back to client in mocked server.
Refactored the c:forEach and a4j:repeat dynamic tab panel tests to share common test code
refactor
Did some refactoring for ABM-251 by creating DMU and refactoring funciton
"Major refactor of the channels ingest, to improve speed and to try and eliminate situations where incomplete data is written"
major refactoring
Refactor TransactionExecutor and TransactionRunnable so they use TransactionStrategy instead of directly using Avaje.
Refactor queue handling to make binding more flexible
continue refactoring to introduce generic crossover
refs #19 fix source style and refactoring
"http://bugs.osportfolio.org/jira/browse/OSP-965 http://bugs.osportfolio.org/jira/browse/OSP-993 http://bugs.osportfolio.org/jira/browse/OSP-1007 Various matrix cleanup, enhancements and refactoring."
HAMA-853: Refactor Outgoing message manager (edwardyoon)
"[HER-1676] improve bundled profiles to match best-practice, be self-documenting * profile-crawler-beans.cxml     add comments for all unstated default values an operator might want to change * (many)      reorder, refactor, rename to better minimize/match simple configuration"
IMAGING 4.5: Reviewed and refactored API
"Context refactoring, cleanup and thread-safety"
"DOI API refactoring, new service DoiService"
Comments and a bit of refactoring
pool: Refactor callback executor for flush queues
"Various fixes and changes: removed operations abstraction and merged with Request abstraction. Refactored Request (now ClientRequest) out of the server behaviour and added a LocalServerRequest subclass that is aware of the local server instance. The base request only operates on the CF Java client. Updated junits with further harness changes, fixing several failing test cases. Additional bug fixes, including bugs in URL domain and org and spaces lookups."
create/delete user; lots of refactoring
JBRULES-914 Refactor shadow facts into core
XWIKI-12815: Rewrite Zip Explorer feature as Components + make it more generic * Refactor the VFS module into a VFS API module to make way for future modules (for a VFS XAR containing a VFS Macro for example)
refactor mysql ddl partition by clause
Refactored client
#NAME?
Bug 250175: fix DND in block selection mode + refactoring
"Implement QuantileSummary, plus some refactoring (Story #100)"
Issue #23: Refactoring to naming patterns - simplify menu creation
Refactor test method name.
"Neptun validation, refactoring refs #145"
api_refactor: refactor firewall apis
"MAHOUT-479: added unit tests to test VectorModelClassifier, ModelDistribution serialization and to ensure GaussianClusterDistribution and DistanceMeasureClusterDistributions work in Dirichlet. Refactored model distribution arguments to allow Java developers to provide fully-configured model distributions vs multiple string parameters. Added distance measure parameter to Dirichlet for use with DMClusterDistributions."
More allele-specific annotations: AS_QD and AS_InbreedingCoeff Grouped default output annotations to keep them from getting dropped when -A is specified; addresses #918 Also refactored code shared by ExcessHet and InbreedingCoeff
Security test refactor
add Terminate Statement to menu + minor refactoring
Update issue #144 Refactored the matchers to reduce code duplications Added matcher to test for event equality based on field values
refactor the test suite a bit
Refactoring
Refactored MessageService api and added unit tests.
#POULPE-293 refactoring of Forum Structure page: splitted all dialogs as separate zuls. Plus creating a VM specially for Section Dialog
[290968] Contribution - Refactoring of State Analysis - Cancellation of ongoing data requests when rapidly scrolling w/ mouse - State Provider update for kernel Fork signal - Resource view fix
Refactoring to allow interpreter info to be updated.
RHBXMSQE-352 - refactoring + two new testcases
refactor ISet and SetVar
refactoring paging
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - tidying
Refactored
refactored test packages
another round of refactoring
refactoring for Camel 2.15
Resource constructor refactoring
refactoring the package hierarchy and updating to the last version of npc
"many fixes, added new test comingInvoices, little refactoring and clean code"
Refactored NodeChecker:  - regex is used to parse http_address element now  - scheme for discovered nodes is now settable through ClientConfig (resolves #196)
refactored assemble maven-openengsb-plugin goal
HBASE-14919 Refactoring for in-memory flush and compaction
"Metamer: rich:placeholder: pages refactoring, added bean, added attributes"
Test caret postion + refactor
"refactoring into a maven project, taking out the plugin for the time being"
Refactored writer to support compression codecs.
Issue 101: refactor client examples
More refactoring
https://java.net/jira/browse/JAVAMONEY-77 Replaced create() with of() in builders. Removed exposure of BuildableCurrencyUnit and DefaultExchangeRate in RI by refactoring builder pattern similar to RI.
refactoring maven project structure to module based structure;
"refactor net.imglib2.componenttree: * renamed ComponentTree to BuildComponentTree to make clear that this is   the algorithm to build component trees, not the tree itself. * renamed the Component interface to PartialComponent because it represent   an incomplete component on the component stack. The classes implementing   it have been renamed from ...ComponentIntermediate to ...PartialComponent. * introduced a new Component interface representing completed components.   This contains basic methods to get the pixels of the connected component   and navigate the component tree. * introduced new ComponentTree and ComponentForest interfaces that just   provide the Component root(s) of a component tree. * PixelListComponentTree and MserTree implement the ComponentTree/Forest   interfaces. PixelListComponent and Mser both implement Component. This   allows to use the same code to visualise both pixellist and mser trees,   for example."
Refactoring
refactor client stuff so we can more easily move it to common module later
Refactor the test for the Java 'script engine'
minor cmd line options refactoring in dcm4che-tool-ihe-modality
refactoring to use filter to get db access
Refactored some things from revision ef709a62dae4 (media link entries).  - OServiceProvider -> OExtensible  - ODataProducer is now OExtensible<ODataProducer>  - OMediaLinkProvider -> OMediaLinkExtension  - Moved mle logic out of PropertyRequestResource in new ValueRequestResource  - Fixed new test in CustomTest to use rtFacade (we should not use Jersey client api in these sorts of tests)  - Updated comment in EntityQueryInfo to describe purpose  - Removed a bunch of trailing whitespace
Refactor JavaScriptLoader to load multiple files in one operation
Refactored mapper and reducer to use messages Added trusted domain files Refactored crawl Scheduling to use strategy interface
Refactor BirtReport validation function
More refactoring and trying to fix operator.
"refactored, and fixed the traversal algorithm for the ObjectExplorer to use a lazy-loading approach that does not do silly things like go into infinite regressions when it encounters infinite paths within the object graph."
Refactoring : Modification des indexateurs (quadriennaux et annuels)
ASNN-529 ONC-2070 Refactoring things a bit so that the studentID list can be regenerated with just teh sort options stored in Session in case the cache expires while instructors are going through a list of students. Involved restructuring the entity provider to allow signatures that took explicit options rather than depending on request parameters. As well as adding filter group tothe table sort options that are stored so it can be used when regenerting the list.
Refactoring Question Group tests
groupCustAction refactoring - refactor search methods pushing down into service facade.
"refactored a bunch, allowing to specify (using factories) any type of objects for keys and values in cache"
refactor project into core/api core/impl velocity/api velocity/impl
some refactoring + tests for MAGNOLIA-1594
Some Refactoring
Complete refactoring of QuatSymmetryDetector into static methods
[Refactored] and improved the code.
refactored ftests to new module - warp-ftest
fix(engine): refactor migration validation and failure messages
Name refactor
Refactored test cases.
Refactor the name of both the directories and the artifact ids of the Quizz subprojects
ICE-6934 : Refactor ACE build system to better facilitate 3rd party usage (Move UISeries to core)
ftp: minor refactor
[#ARCH-9] Refactor Archive Configuration
Refactoring.
unit test refactor #117
refactoring of ShrikeMethod code to allow reuse tentative beginnings of refactoring to separate Java-specifics: so far IClass.getModifiers() and IMethod.getDeclaredExceptions() are declared to throw UnsupportedOperationException
Refactored to allow for task event classnames and fixed tests.
Refactor class ShowsAddShow to ShowAddShow
HTTPCLIENT-1266: NTLM engine refactoring and compatibility improvements. Contributed by Karl Wright <DaddyWri at gmail.com>
Refactored the activity engine. Added support for float activity values
ACT-741 refactoring persistence
196307: [refactoring] 'Refactor > Create Script' silently fails and leaves empty script
refactoring
Refactored financial calculation code is being turned on in this commit. * Loan schedule calculation will now use updated calculation methods. * New loan schedule unit tests have been added in LoanCalculationTest. * Additional refactoring will still be done to remove previous calculation code in LoanBO and Money classes and to continue cleaning up code.
refactor names and update api-doc
Refactoring.
"clean up, some refactorings dealing with buffer size of buffer"
refactored package structure
continued refactoring of microchip potentiometer impl
continue refactoring - moving and rewriting customer status updates from customerBOIntegration test to center and clientStatusChangeIntegrationTest
"Add support for @Singleton, refactor the tests"
Refactoring to use Gradle with a multi-project build.
search refactor and resourceutil addition
Even more refactoring
Refactoring of  CMS Content APIs
Refactored Commands to use the OCommandManager class to create requesters. In this way it's easy to plug 3rd party commands. In current example the Gremlin command requester.
XWIKI-6742: Add virtual extensions support Also refactored DefaultLocalExtensionRepository to make it easier to read
Initial refactoring of Decompiler support.
Moved to maven. Refactor Avro support.
[FLAPI-20] Regenerated descriptors with subpackages enabled. Other classes refactored automatically by the IDE.
"Refactored QueryPostprocessDataContext to easy ""simple where"" query optimization by subclasses"
refactored cross validators and date time extractors
"fixed #47 and #49 refactored encoders to handle all parsing and be independent cleaned up parsing conditions, removed unnecessary operations refactored acceptway to use a dynamic list of encoders"
Refactorings:  - 'Double.isNan(d)' instead of 'd != d' for clarity    - QueryExceptions redesigned:     - org.basex.query.util.Err is now an enum of errors     - these can be directly thrown via the 'thrw()' method
1) Refactoring to use code in previous checkin.
"https://jira.jboss.org/jira/browse/JBIDE-3457 Messages added and externalized, code refactored, Next and Finish validation added."
refactor package name and MySQL name conventions
"Partial fix for MIFOS-3051, refactoring get method of LoanAccountAction"
pool: refactor pool to use StandardOpenOption instead of IoMode
frontend: Refactor Vm Behavior classes
Refactored: use RevisionCounter in InMemoryDatabase
multi enterprise refactorings...
refactoring XmlUtils.createXPathData for normalizing namespaces
Grammar refactor: remove CASE_CLAUSES rule.
[TACHYON-1304] Refactor method close by introducing a hook method beforeDisconnect
entitlement: refactor DefaultEntitlementApi
"Refactor StorageDir and StorageTier, so now StorageTier has only getter methods"
 * Refactoring
Refactored: make SchedulingControl the top level object
Refactoring
"Trying to refactor property introspection to use PropertyName, to help with namespaced names handling (-> xml)"
"fix insidious bug where server-name trait was missing the dataType=""trait"" attribute in the plugin descriptor and hence was getting defined as a numeric metric, rather than a trait; refactor so values for config file traits are retrieved via management API, rather than by parsing server command line (still plan to later add command line parsing as a fallback mechanism)"
"Core: refactor update operation, pt.1 (#935)."
space-manager: refactor how spaceManagerDisabled is handled
"[SUREFIRE] refactoring and suppressed printing "" null"" if Exception.getMessage() returns NULL"
Refactored ClusterManager to ClusterClient interface and ZooKeeperClusterClient implementation with some test overhead Used that for database copies to make the process robust in the face of zk hiccups
[179293] Refactor the handle*() methods of the RequestMoniotr.
"Refactored the UpdateStrategy to not implement Updating, instead taking an Updating as a parameter. Added ChainedUpdateStrategy and UpdatingWithStrategy that contains both an Updating and a Strategy for it."
refactored ILocatableModelElement into ISourceModelElement and IResourceModelELement
bug fix & refactoring.
refactor Organizer and SagaFactory into new strategy pattern
* fixed formatting issues * broke down complexity of getGenericTypeAwarePropertydescriptor method * refactored names of tests to be more expressive
refactored CreditCurveIdentifier
Refactored creation of policies and enrichers to occur after entity creation
More work on refactoring participants
refactor BlockOutStream and RemoteBlockInStream to allocate space when creating a new block
Completed refactor of controllers -> services and added singular ServiceProvider
Worked on unit tests and refactored TabularDataExtractor
Refactor package name
"Revert ""Refactoring roboplexx and HTTP server to run in the same service"""
#NAME?
metamer: placeholder: tests for inplace components refactored (RF-12609)
"Core: refactor storage layer, pt.3 (#391)."
"Commens, cosmetics, refactoring"
"refactor the plugin container/manager API so we can load, unload individually"
Refactored TacIO into multiple classes
refactor code
Refactoring.
refactoring
Refactored a number of primitive methods to use the conversion routines in AtomicVector rather than the ackward AtomicAccessors class
SQL executors refactoring
JPAProducer refactoring to JPQL
PP-6 + PP-7: a bit of refactoring to get ready for find_matching_models and find_matching_frames.
PackWriter: Refactor object writing loop
MAGNOLIA-3234: refactoring: AbstractRenderer now checks for model's execute(..) return value (the SKIP_RENDERING constant defined in RenderingModel) to skip rendering. Reintroduced tests to check for null template paths and modifed tests for checking that nothing has been rendered in the outputstream.  
merge and other refactorings
"Refactor debug output, improve debug APIs and services"
Refactor tests to share common code
"minor code refactoring, last release before fixing wrapping performance by using ""fake"" verticalScrollOffset."
Done some refactoring related with renaming DistanceFunction to NormFunction
"Makes sure we follow the Location header, if it's present (even for 402, 502 and 503) - Refactors Http Client"
refactor discoverer to remove large section of duplicated code
· Refactored build process
Minor refactoring of tool projects.
Refactoring for adding standby mode.
"Bug 422793 - Derive a CategoryValue Ref to the Tasks included in a Group. Refactored Object Editors: pulled up canEdit, canEditInline, canAdd, canRemove and canSetNull methods into common base class for easier override."
clean code: refactorings + comments
Refactorings to prepare support for UriInfo ancestors support. - Renamed HttpContextAccess to HttpContext. Changed getHttpRequestContext   and getHttpResponseContext methods to getRequest and getResponse respectively. - UriRuleContext extends HttpContext. Removed UriRuleContext.getHttpContext()   method. - UriInfo interface is removed from HttpRequestContext. UriInfo is now   accessible from HttpContext.getUriInfo()
"refactoring integrate freemarker template, and a markdown parser"
Refactored pre-commit hook to make it less invasive.
refactoring
* MultiPoints with M-values are now encoded correctly * First refactoring of unit testing * Integrated Martin's EWKTReader (modification on jtsio's WKTReader)
#566 - Refactor internals -  OrmQueryDetailProperties with final FetchConfig
Refactored addGroup() and removeGroup() to addToGroup() and removeFromGroup() because it makes more sense.
 refactor code
Refactored so that the plugin class contains less lines of code.
"Major refactoring of the IteratorTag and its subclasses. The new versions are much, much simpler, have zero redundant code and are easily extensible. As part of this refactoring, direct manipulation of WikiContext state via request attribute WikiTagBase.ATTR_CONTEXT is now officially discouraged; use WikiContextFactory.saveContext() and WikiContextFactory.findContext() instead. Added Javadocs."
Continued refactoring
Refactoring in classpath container management Fix : JDTClass should NOT be added as external
Awful class to export to excel... it works but should be refactored and tested
Refactored the ActivePart class.
"structure refactoring, added contrib"
Metamer: Refactored rich:fileUpload  webdriver test.
Refactor TraversalEngine to extract the progress meter functions
"OrderController, order.jsp, refactoring of mvc package"
refactored our service to reflect upstream
More refactoring
refactored media content formats
"slash and hack add of Joe Clark's request to add remember me cookie, basic auth support, api changes, some (inefficient?) refactoring"
Change dimensionsDifferent() to dimensionsIncompatible() and modify it such that RGB channel count is supported correctly. While making such changes make some minor documentation and refactoring changes.
Refactor restful JSON interface
Refactoring : Extract smaller method from large method to configure spring beans in BaseAction
Refactored HttpChannel to not have direct HttpParser dependency
refactor RequestDispatcher
"3.0.0-svn-65 JSPWIKI-496 RecentChanges plugin should filter pages.         The IndexPlugin, RecentChangesPlugin and ReferredPagesPlugin have been refactored, they are now all subclasses of AbstractFilteredPlugin,         the new name for AbstractReferralPlugin.         You should now use Glob expressions instead Regexps for all plugins.         * Added a new JUnit test for RecentChangesPlugin         * Changed the build.xml (removed the copy of etc/dtd, which was deleted earlier) 	* added etc/i18n to the classpath and changed project setting ""Allow output folders         as source folders"", this makes it possible to run individual JUnit tests again.         Also profanity.properties and denounce.properties can now be found again during          JUnit tests (saves a lot of stacktraces in stdout)"
Refactors logging service package
some refactor
Refactored: inlined serialization filter classes to reduce complexity
"o Refactored the PluginManager into GeneratorPluginManager and   MetaDataPluginManager. o File paramaters and variables are now Files instead of Strings. o Adding test case for the Java generator. o Changed how metadata is added to the model/class/field.   - Removed the <metadata> elements.   - Now the metadata is read from the attributes of the <model>, <class>,     <field> elements."
"refactoring, better field injector"
Refactoring addon-web-mvc-controller
Tests and refactoring of classpathscanner for readability
"Renamed global Jangaroo runtime object from Class to classLoader, since a) this is rather what it is (a class loader, not a the meta class class), b) AS predefines a top-level class Class that name-clashes with joo.Class (since top-level classes are always visible), and c) it should be a singleton rather than a class with only static methods, because soon, there will be a system class loader that is replaced by the fully-featured one for Jangaroo runtime bootstrapping! On the fly, changed the signature of the prepare method to be better typable and to better fit the needs of the upcoming class loader architecture. Also added top level identifiers that comprise a type / class to the classes to be inited. Had to refactor the addClassInit code for that."
NMS-8140: Refactoring to consider szl and expose SearchProvider
[#issue/20] refactor metadata handling out of OgmCollectionPersister
classloader refactor
Bug fixes: ACT-786 and ACT-781 + refactoring of GUI for allowing tree based left pane
gros refactora
1) Change the way stop transfers are stored 2) Refactor the graph builder to better support skipping tasks and supporting appropriate alternative actions when those tasks are skipped 3) Add a headway information to arrival and departure bean in preparation for headway support.
refactor BasicCStoreSCP
core: refactor CollectVdsNetworkDataVDSCommand
"Added scenarios for sign up form validation, refactored datatable usage"
Refactor in VCPE Capability
Refactoring username to something reasonable
Refactoring the code which preserves T and P stats during the update
BeanXML Validation test completed + refactoring + new BeanValidation Helper class
[PLAT-1729] Refactoring streaming results for consistency in the ViewClient API; jobResultReceived -> cycleFragmentCompleted; checkstyle; correctly merging streaming results rather than replacing with a ViewProcessCompleted call
added a refactor of the Main in camel-spring so that it can be more easily reused in other contexts; such as when using Guice to perform IoC of Camel for https://issues.apache.org/activemq/browse/CAMEL-989
Start refactoring and finishing the card
refactored the examples 
refactoring
refactored helper methods for the generic model into a separate class
HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.
Fixed message ID in topics Added method inheritance test Refactored out NevadoQueueConnection and NevadoTopicConnection
Fixed up sponsorship summary to display info on current fees. Refactored bootstrap 2.3.2 location so that it can be easily replaced wtih boostrap 3 when ready.
LOW: Renamed RoleListBrowser into RoleBrowser. Also refactored a bit displaying of role browser and added back PPM roles so that we can delete them.
"Moved i18n demo to new errai-demos dir, +refactored poms"
"Added CommandProvider, refactored few classes, Default tenant store"
More test refactoring
Refactoring to remove duplicate code
Refactoring profiling/coverage support
Refactoring InvoundVerifier to TransmissionVerifier. Updating some dependencies.
refactoring couche service pour pattern commande
refactoring very simple selector to always create selector
"JBIDE-17163 Visual Preview: Adding related css, js files support. Refactoring"
Refactor GradleModel.getProjectDirectory() -> getProjectPath()
Refactored gradebookservice test and fixed item comparison problem.
#NAME?
XWIKI-10405: Implement a new Platform Mail Sender API * Refactor/improve code
refactor updater module and add OverloadReport cache
refactoring part 1
refactoring tests and adding performance test skeleton
#NAME?
JC-1421 refactoring
CLI: parsing of arguments; filebox: refactoring
Refactor out standalone nbt lib under libnbt-standalone
https://issues.jboss.org/browse/JBIDE-10431 : browsersim should be sexy - created interfaces for skins - created native skin - created iPhone3 skin - refactored code
[BZ 1045589] major refactoring of aggregation to limit concurrent reads
refactoring
More refactoring
"Refactored SnmpCollector to make it more clear what the collect method is doingRefactored SnmpNodeCollector and SNMPCollectorEntry to use SnmpWalker"
Refactoring
Refactored duplicate code into separate method.
refactoring and logging
Finish the relationship refactoring to the FileBasedIdentityStore.
Improve and refactor Analysis
core: Refactor of VdsDynamic.getSupportedVersion
Don't allow N's in insertions when discovering indels. Maybe better solution will be to use them as wildcards and merge them with compatible regular insertion alleles but for now it's easier to ignore them. Minor refactoring of Allele.accepableAlleleBases to support this. Added unit test to test consensus allele counter in presence of N's
pmd(build): Add missing classes from previous refactoring
Name refactoring
SONAR-2469 refactor Module
AS7-579: refactored onto the latest EE framework
refactored integration tests.
"small refactorings, simplified Ehcache configuration"
a lot of refactoring :)
Refactor a bit to avoid passing around the same thing all the time
Refactored construction into VertexCentricQueryBuilder to make it centralized.
Refactor jetty configuration to use jetty-web.xml file
SCRUM-120 - renamed VaadinEditorAdapter to DialogFieldEditorStrategy - extracted VaadinFieldEditorSourceAdapter from inner class - javadoc and small refactoring for better readability
"Refactor according to latest model specs, intelligent trees fix"
"Added Javadocs, refactored."
"Refactoring the OAuth2 client code filter code, adapting it to OIDC"
110594 [refactoring] CCE in Infer type argument refactoring
RF-12900: refactored drag components to subpackages under ui.drag
Console proxy refactoring - new VNC engine is plugged in
Refactoring to use TaintMethodSummary and Map
"Refactored FileItem to FileContent, this is the 1st step in order to allow attachments in other contents besides an item."
"Refactored: replaced BigInteger with EntityId, to solve Primitive Obsession"
[REFACTOR] Refactor violationtypeKey to violationTypeKey
Refactored and added in the concept of executors and weight. -Renamed RemoteMachine to Machine -Renamed RemoteMachineImpl to RemoteMachine -Merged Invokable with the Machine interface.
Rather a large refactor aimed at getting SSH-prompts up from non-UI thread... not there yet
ACT-506: Refactoring BPMN implementation classes since it was getting a mess
Refactored sopremo types
"created routeplanner test for ensuring consistent behavior among all implementations, also did more refactoring of the interface"
TEIIDDES-1622: Refactor the calculateRelatedChanges method
"feature #907 sprint4 :   Refactor the get() method of the Suggestion javascript service by accepting now either an identifier (Published, a suggestion identifier, etc.) or an identifier following by some criteria to filter the asked suggestions. Supports now the pagination of the published suggestions (in the list of published suggestions); the pagination is performed for instance in the web layer once all the suggestions are retreived and cached for the current user"
"Refactored the C99 preprocessor to use IPPTokenComparator, removes dependancy on the C99 parser token types"
#NAME?
Refactor method using PartialDay#daysUntil
Refactor index builder
Added user prefs stuff to main branch (includes major refactoring).
Use endpoints in configuration page and refactored object converters
Few minor refactoring
bullet-proof refactoring
"Release 0.9: 	- Added new types of objects to cern.colt.buffer. 	- Added OpenDoubleLongHashMap and OpenFloatLongHashMap. 	- Added OpenLongIntHashMap and OpenIntLongHashMap. 	- Added new types of matrices holding complex elements. 	- Added new types of matrices holding int elements. 	- Added new types of matrices holding long elements. 	- Added new types of matrices holding Object elements. 	- Removed tridiagonal matrices.	 	- Removed ""@override"" to allow compilation with Java 5. 	- Some improvements in ConcurrencyUtils. 	- Some refactoring and cosmetic changes. "
Issue 293: refactored code to provide for api versions and coherent properties for authorization
"XWIKI-12263: Add support for Nested Documents in the Create Action - Addapted templateProvider/template support for NestedDocuments and ignored the templateProvider 'type', i.e. all templateProviders are considered of type 'page'. - Bigger refactoring and moved a lot of the processing code into CreateActionRequestHandler which, compared to CreateAction, can have a state (of the current request it's serving) and makes processing easier by not having to pass 4 variables between methods. - Also made checkstyle happier since CreateAction is now lighter and easier to read."
[SHRINKWRAP-194] Refactor exporter base and test cases to make for easier implementations
"Refactor, get test to pass."
minor refactor of the Graph visualisation code making it easier to reuse the code without necessarily creating a text output file from the EIP model
fixes #926 Refactored image update mechanism to avoid unnecessary image creation.
a specialized UrlProcessor for DWR-WW integration (plus a small refactoring of the default UrlProcessor)
MNGECLIPSE-1453 Refactor download java sources/javadoc out of MavenProjectManager
Added preview command test and more ClientUtilities tests. Fixed issues in the preview command and client utilities found during tests. Refactored a few method names to be more descriptive.
webadmin: Refactor QoS view side
Introduced mbm-client module to provide API support Refactored MBM to use the mbm-client Removed dropwizard-hal since mbm-client provides it now
new parser: fixed IN operator as non reserved word and some refactoring to the grammar
"[JBIDE-6376] packages refactored, strings externalized"
Refactored SOP Portal. Refactored EmployeeContracts.
#NAME?
ABTest traffic distribution refactor
"Bug 335789 - part 1: partial impl of servlet for managing site configurations - to implement: POST, DELETE, PUT - to refactor: SiteConfigs stuff into WebUser"
TAJO-1016: Refactor worker rpc information. (jinho)
refactored code and config into separate src trees
Refactoring OKO
"POULPE-469 Testcoverage and refactoring for Database backup functionality - testcoverage for classes: HeaderAndDataAwareCommand, AddForeignKeysCommand and CreateTableCommand"
- Show contents of JMenus. - Show contents of Components (Not only JComponents) --> Refactor JComponentNameLabelProvider to ComponentNameLabelProvider
Refactors and modifies the IFormattingContextProvider API.
#177 - Add support for Android refactored property loading/writing to be OSGi service based and extensible. The actual android support will be supplied by a plugin
"Refactored JFrames to JDialogs, centered dialogs"
api_refactor: move cluster apis to admin package
btc-e refactor step 1
"Synced with master, refactored and added tests to launcher framework."
refactored menu for plugin
Refactoring of strictSql custom db property
Fix for http://code.google.com/p/mybatis/issues/detail?id=197  and hopefully http://code.google.com/p/mybatis/issues/detail?id=147 . Ignore resetAutocommit exceptions and refactored exception handling on close.
"Adding unit tests for marketdatafeed base classes, some refactoring of interfaces"
issue 384: NetworkSpec refactored - Adrian comments addressed
Some refactoring...
"Added a restart() method on the Broker interface, refactored implementations a bit to make it work with ZooKeeperBroker Use Broker#restart() to rebuild internal state when zoo session becomes expired - solves a bug where stale references to a NO_MASTER master client instance would remain around indefinitely."
"Completed download process, added testcases, name refactoring"
refactored FieldFaceSource to allow using any context instance strategy to build up message codes extracted into MessageCodeStrategy
"Second part in refactoring: RCP-479 Message moved to core module, Severity moved to core module and package ValidationMesage now extends Message, DefaultValidationMessage extends DefaultMessage Places where validationMessage was converted to Message are fixed"
#3: removed global context bean where not necessary. refactored configurer framework to be able separate spring dependencies.
refactor web monitor
 #8 agentManagerService TC Refactoring
ctf: tiny code refactoring in the metadata.
refactoring: move FilePageCache
Refactor engine code.(T17513)
Some refactoring of names
Refactoring
refactor
refactored JPAIdentityStoreConfiguration
JBIDE-15302 CordobaSim: Refactoring. Changing the way of plugin processing
Major refactoring of libSBOLj 2.0 classes as a result of decisions made at COMBINE.
"Refactor of QualifiedCollector, including permute function to provide for scruffy provenance"
Closes GH-0542 Refactor CoordSuspendXCommand & CoordResumeXCommand to TransitionXCommand based
"more refactoring of junit tests, slow tests go to integration test module"
"Refactor for context-root, war name, module name"
refactor the CRaSH process execution
#NAME?
Refactor BatchContext to FlushContext. Make thread local private. Improve IT test. Add Cassandra StorageProxy log asserter
Refactored tests + found & solved bug in optimizer + Working in one more test case to assert that MSCRs can be created out of flattens that don't follow group by keys
refactor
" - major refactoring, debug page changes, distribution fixes"
Refactor ConstrainedWallGenerator
"Several changes. Big improvement in the performances of the XmlRegionAnalyzer. Link the component implementation and the user interface. Implement the ""Show WSDL"" dialog. Remove useless elements in the registry browser. Refactor the code so that maintenance remains easy."
#150 Refactor watch and list commands
some minor refactoring * changed the coverage variable name * removed code that has nothing to do with line coverage * cleanup
Refactor config to be less cluttered and more flexible blacklisting is now per world per gamemode.
some refactoring
"Refactored a buttload of stuff. This may get rid of the spotty bug, it fixes logging to file and to console, fixes color in console, adds ability to specify the event levels, and changing gamemode while in the air."
97258: [refactoring] Infer type argument misses cast removal opportunity
"Query refactoring, backend implementation of set search form, integration with frontend"
"Complete Config-overhaul, as well as preparation and initial classes for JUnit-testing and refactoring of commands."
Lots of work on the refactor. Program actually boots now. Still lots of work to do. Nothing majorly broken though.
Refactored query/result class names for consistency (#33)
Support for ceylon project references : - Refactored repository management - CoreException thrown if referenced project is not usable (closed or without Ceylon nature) - Add a build path problem marker on a project if any referenced project doesn't have the ceylon nature - Remove the build path problem marker on full build - Schedule the Rebuild of referencing projects.
Refactor
Refactoring: preHandle() --> handle()
refactor idvalidator and add real idvalidator
adopted latest mylyn refactorings
"Add a new class which define a common generator for inflation and yield curve, also refactor yield and inflation curve generator."
api refactoring
TEIIDDES-401: Initial refactoring to work with new vdb plug-in
clean + refactor well
Refactoring
Refactoring in progress in Dynamic and Timeline modules.
refactoring after merge
"#441 Refactor to retry on initial allocation, not reallocation"
[93541] All extract refactorings and quick fixes fail with wildcard return type
Moved to maven. Removed dependency and refactored some code.
Refactored simulation code to new package.
refactored addon start/stop and test adapter
Refactored XStream test
Refactoring UrlLoader
small refactorings in scanner
factored out profilestore into defaults and alternatives; also minor refactorings for the BDD viewer
CLOUDSTACK-8590 - Refactoring NiciraNVP resource
HBASE-15027 Refactor the way the CompactedHFileDischarger threads are created (Ram)
Refactoring of EIK UI
refactored a bit the type system to simplify it and add notion of converted type
Refactor wrappers
#NAME?
lots of cleanup and refactoring of the node maps code
Refactor initialization of dirs
GLFrameBuffer refactor (#4882)
"refactor: moving DefaultTaskRouter into tasks.management package, renaming tests to match source"
"Minor refactoring, trying to reproduce #67"
"Adding sample apps package; refactoring - extracting Card interface, changing DealerService"
Detached ruleset unlocked from mixin did not worked right (did not seen mixins parameters).  Putting body scope joiner on one place to find out how to refactor them. #186
#NAME?
<No story> Refactored Util classes
refactor codes.
Refactoring alpn stuff into jetty-alpn-server and jetty-alpn-client
tidy up proxy stuff for refactoring
Bug 453135 Refactor core UserConstants2 to UserConstants
#POULPE-404 Refactoring:  * Moved Page-related class under model package  * Added pluginManagement tag in order to put there all the plugin versions and simplify configuration in child POMs
"Refactoring/renaming, and other changes."
api_refactor: refactor serviceoffering apis
"enabled copy menu, and refactored some actions, fixed scroll to bottom bug"
Major refactoring. Rentit -> Rento
Major refactoring of Reactome cancer index packages.
core: refactoring in vm analyzer
More refactoring and documentation.
Refactored from ejmud to ej-app-engine
"Split Localizable and RasterLocalizable.  Localizable can localize in real space, RasterLocalizable in discrete space. Several refactors regarding localize methods. Interestingly, none of the existing implementations in TrakEM2, VIB, IEP complained, so the refactors just affected a lower API level."
"grap, rasterProcessing : refactoring"
Refactoring of all package names according to #245 #242 #240
* basic extension point managers refactoring
ProblemEligibleInjectionTest added + new resource files added for test + refactoring
TURMERIC-1332: Refactor maven core plugin into core and ui. Moved all UI related functionality out of the core. Remove api and core from utils feature. Add maven ui plugin as dependency for functional tests.
Refactored primary component name
[Bug 5231]: Xtext warning removal prevents bug on refactoring
moved nls tests to refactoring tests
First cut at refactoring.  The test suite passes here (Linux/GTK)
refactored to use deployment service to managed deployed assets
"refactor: all writers of caretOffset call  setCaretOffset(int.int), preparing for 92757"
"Refactor Quoine API to use new JWT based authentication, and new fields"
refactoring. Test tpccstressor
PatientServiceTest refactored
"feature #4559 :  Take care the JSP globalSearch.jsp is also used in another context than search: to add and update subscriptions of the user on some axis of the Pdc. So, the javascript plugin 'pdc' is enriched with a new function to render a widget for selecting some values of the PdC's axis. The REST-based web service PdcResource is also enriched to satisfy the call of the plugin and the some codes involved in the subsciptions on the Pdc are also refactored as well to take into account the changes in the globalSearch.jsp JSP"
Minor refactorings in DeviceDBJpa
#NAME?
refactor out test session to exist on the suite scope
Refactor base test class and move basic tests to own package
"Updating monthly meeting for customer, added testcases. Code refactoring done."
Refactoring and fixed Bugzilla ¨C Bug 214209 Problem when export the attached report design with different format.
Continue refactoring of compilation.
Refactor EntityMetaDataUtils to EntityTypeUtils
Refactoring.
refactor the model for cache setup to have something reusable for url cache failure
Refactorings throughout the nodes and operators packages to use NodeTransformers instead of the old .toNodeNumber()
Refactoring
Major refactoring of the manager. Began integrating configuration
Refactoring package name
"<action issue=""LOG4J2-582"" dev=""ggregory"" type=""update"">   Rename org.apache.logging.log4j.core.net.SocketServer to TCPSocketServer and refactor with UDP. </action>"
Refactoring
ROO-2337: Post 1.1.3.RELEASE code refactor and clean up - Cleaned up the retrieval of MemberDetails from with MetadataProviders
refactored Vertex to own file
started refactor to tinkerpop3
SOAP-348: Create new REST project from WADL (needs refactoring)
Refactor and add to streaming events schema
"BVAL-31 refactored some code, imported AnnotationFactory from annotations commons, added explicit license to project"
Some refactoring of BrowserSim to allow code reuse from CordovaSim Eclipse plugins
"refactoring to the updated naming scheme whose main components are Sampler, Iterator, Positionable"
PLANNER-405 Big refactor: Score.getInitScore() to remove separate tracking of uninitialized variable count: optaplanner-core impact only
Refactored share package out of API for now until satisfied with it.  Moved all usage from DefaultSharable to Sharables.  May have killed uncommon bug.
"big refactor, move to org.jboss.solder package"
Refactored the way Fenix is initialized. Renamed StartupServlet to FenixInitializer
Refactoring books commands
"MAHOUT-236: - moved default file directory definitions to Cluster from ClusterBase - refactored CanopyClusteringJob and ClusterDriver into CanopyDriver & removed both - added runClustering option to CanopyDriver.runJob - refactored DirichletJob into DirichletDriver - added runClustering option to DirichletDriver.runJob - added emitMostLikely and threshold options to DirichletDriver.runJob - implemented emitMostLikelyCluster and emitAllClusters (above threshold) - refactored FuzzyKMeansJob into FuzzyKMeanstDriver - added runClustering option to FuzzyKMeanstDriver.runJob - added emitMostLikely and threshold options to FuzzyKMeanstDriver.runJob - implemented emitMostLikelyCluster and emitAllClusters (above threshold) - enhanced TestClusterDumper to utilize term dictionary and enhanced printouts - updated other unit tests, all of which run"
Refactoring to be able to have a unique class to do the same!
"huge change that refactors how Tunables are handled and, among other things, allows for dynamic menus to be created from tunables"
checkpointing while refactoring the Operator Routing methods/functions
[clean up] Show optional refactoring wizard when run clean up on multiple cus
Refactoring package structure-- moved org.mifos.application.accounts to org.mifos.accounts. * still some resource cleanup to do.
usergroupcallback refactor
a little bit refactoring and JavaDoc updates; refs #59
Refactor command package toward factories
SONAR-5007 refactor QProfileService
refactored domain and service
Refactoring from WebUtils to WebUtilsService: xwikiDocToLinkedMap getJSONContent
"Webadmin: Refactoring move functionallity from poolsdao to domainsdao. This is only a move from one Dao the the other, because the functionality of getting namedCells and sending commands to cells just much more belongs to the domainsdao than the poolsdao."
"* d/control: update version constraint on maven-repo-helper   (Closes: #657889) * Update the build to use junit 4 * Refactor code in maven-packager-util and fix reading of output   from dpkg and apt-file * Keep improving usability of mh_make (Closes: #638782, #641266) * Remove Michael Koch from the list of uploaders. Thanks for your   work! (Closes: #654110) * Remove BSD license from the list of licenses stored in   /usr/share/common-licenses (Closes: #641301) * When the jar is installed in /usr/share/java, use symlinks in the   repository to avoid duplication of the jar contents (Closes: #665799) * Rename plugin maven-debian-plugin as debian-maven-plugin to adhere to   Maven naming conventions."
Refactor client_credentials grant type to use backend (#752)
analytics: first pass at refactoring the business logic
"Refactoring, fix cursor close, use OPLOG_REPLAY"
- added test case for lbclassic 139 - minor refactoring of the code (mostly renaming and moving to different package)
Tabellen mit Koordinaten + refactorings
"Added a Description property tab, and some minor refactoring"
refactoring one test that relies on a path ...
JSDocTypeHyperlinkDetector refactoring
ISPN-7650 Testng assertions refactoring
Various refactorings to improve structure
[Refactoring] Move wiki macro classes to a common macro package (this doesnt break any api since it's in the internal package)
refactor query panel
"Adding new algorithms, refactoring"
Added support for StreamingOutput as well as Form encoding.  Refactored addMessageBody* so that it sorts based on generic type if the content-type is */*.
Small cleanups and refactoring towards SPI design
more view / viewmodel refactorings
Refactor: rename HDFRecordReader3 to HDFRecordReader
refactored media browser to allow folders / different items
RectangleImpl: Refactor out duplicated range test into utility method.
webadmin: Refactored import VM/Temaplate dialog
#NAME?
"GRECLIPSE-998 Refactored add, edit, remove suggestions into an operations infrastructure, as to make it reusable in quick assist and testing. Fixed NPE in ResolverCache"
refactor the identity part a little bit
"Refactored DefaultParanamer to use join/split methods in place of searching by substrings. Updated compile JDK to 1.4 given the already existing use of String#split() method, and the fact that JDK 1.3 has reached EOL."
Refactor JdbcAppender tests into JUnit rules
"MAHOUT-798: add in examples for working with ASF email archive, plus various refactorings to clusterdumper, etc. for viewing results"
Refactor to ensure that tests for not-yet-implemented features won't block builds
refactored copy constructors of the Parameter and Properties class
refactoring logging
minor refactor + update internal chest logic
DDF-540 Added support to enable CSW geospatial queries to be issued using either a list of <pos> elements or a single <posList> element. Refactored the TestCswFilterDelegate class to remove code duplication.
refactor package
Updated the pom to reflect some refactoring. Added surrent pull command tests/fixes.
"WebUI::FilesView:: Some refactoring and more tweaks for the ""File default display"" sub-view. Not yet ready!"
Refactor launch and launch configuration listeners
Fix PMD warnings with refactoring
"Optimize the transmission of bidir contexts. Since the data is invariant, only one context need be sent per connection. Sending more increases bandwidth utilization and adds a processing burden on the server. This change adds a new state member to ClientConnection and tests this value as a condition of sending the context. The Bidir context interceptor is refactored for clarity."
core: MultipleActionsRunner refactor: extracted canRunActions method from execute()
Added tests for Notepad feature refactoring of notepad logic
refactor test
Refactored a name
New products sections and refactoring
"* setted token deadline to 2 days * if token is not more valid, it's regenerated * refactor of getExpDate method of class User to resolve JAXB convertion problem"
"move inplaceSelect component to the trunk, refactoring, bugfixing (https://jira.jboss.org/browse/RF-9347, https://jira.jboss.org/browse/RF-2816, https://jira.jboss.org/browse/RF-9056)"
Refactored code to make listeners for the SwingWorkers instead of SwingWorkers interacting directly with the models. Changed the tool window to load the violations/source code separately and in a background thread instead of the UI thread.
NAS-1987: Change HarvestJobManager to submit jobs based on Harvester ready events: Fixed. Includes major refactoring of old HarvestScheduler code
"Bug 305334	 - MetadataFactory.InstallableUnitDescription - method name refactoring"
Refactoring away Core object usage from Periodicals and Initializers
"- small ""fixes"" in GrateView service:   1) now uses the DigitalObjectUtils.createZipTypeDigOb method to create a DigOb from a zip.   2) changed the output type to IMA - refactored the VfdWrapper- and *Result to VirtualFloppyDrive.  - Performance tweak in DioscuriPnmToPngMigration service:   1) The service now creates a batch file for MS-DOS that converts the input file to a       file on the ""harddisk"" in the Emulator, deletes the input file from the floppy disk to free some space      and copies the result file from the harddisk to floppy. Afterwards the file on the harddisk is deleted as well...   That should help for the conversion of larger files. Will do more testing to find out where the limit is now ;-)"
refactored to proper packages
refactor- method for writing to mapstore
Refactored MappablePlayerProfile back to SimplePlayerProfile as it is expected to be mappable.
"With the update of some of the dependencies and the removal of some of very old dependencies, some codes have been refactored: - The application cache in the Caching Engine is now based upon the new version   of ehcache. In its new version the element expiry mechanism has now to be   explicitly defined. If ehcache 3 provides a default mechanism for TTL-based   expiry or TTI-based expiry, nothing is provided to define a mechanism based   upon both TTL and TTI as it was in ehcache 2. So a custom expiry mechanism   is defined to implement close the way the TTL-and-TTI-based expiry was   managed in ehcache 2.   With the new version of ehcache, any null key throws immediately   NullPointerException. This cause problems with MessageManager that uses the   application cache and particularely in tests. So, the tests were updated to   initialize MessageManager and a check is performed in MessageManager when   accessing the application cache to catch the NullPointerException exception."
Progress in refactoring
[DSU] refactor gtfs
refactoring and improving on jterm related classes
Added in types and name objects.  Refactored FieldReference to FieldAccess.
Check in Bug 210286 Refactored data sheet for later customization and revised data service provider.
Refactor query and creation fetcher
refactor LinkedModes
refactored ontology related repository and removed duplicated code
Refactoring to add CountsWriterI interface. Will make it possible to have a test support version of the writer to write to a string.
"fragments + tests: toolbar fragment deleted, tests refactored with performance improvement"
test refactoring
[refactor] Refactored Java and Scala parts into seperate Maven Modules to avoid Scala compilation clash with Jenkins approach to resource package naming for Jelly resources
Refactored Input classes
Refactoring
Refactored to modules
Major refactoring: Prepatory work for parallel Bible view.
Tx part code refactoring: splittinng tests into own projects part 2
* Created LoanProductService class and moved getDefaultAndAdditionalFees implementation from LoanAccountAction to LoanProductService. * Refactored LoanAccountActionTest.
Constructor refactoring
o Refactored code
more google refactoring
Complete restructure to Maven layout. Refactored namespace. Added license headings. Added pom.xml Cleaned up plugin.yml. Removed permissions.yml.
Tweaked build of autogen'ed scripts. Light refactoring.
"refactored tests support for moving mouse pointer each Java test file runs a single JS test on a new, clean db"
Small refactor: renaming and move plugin property suffix file declaration in plugin class
Refactor after PR comments.
XLCLOUD-1812 Method for listing network ports and. Some refactoring.
"HEMERA-119: Implemented first version of tags and tag connector, finished refactoring to remove ""currentPath"" and renamed ""originalNodeId"" to ""nodeId"", removed some unnecessary old classes, renamed DAO classes"
Refactor and Javadoc the Thymeleaf dialects/processors
Minor refactoring and renames
"feature #4148 :  Introduce the AuthenticationCredential class to gathers all the data that can be used in a user authentication. Change the signature of some methods used in the authentication as consequency. Refactor the code that perform the authentication, the password change and reset in the AuthenticationServer class in order to to facilitate its reading and to optimize a little its code. Do similar approach with the Authentication class hierarchy."
"Deleted unused java files from BCI calculator project, some refactoring"
LaunchBar - more tests and refactoring
Schema parser refactoring
refactored the sample codes and split into multi modules.
Refactored dulpicated sub-item code to separate methods.
Some refactoring to allow further changes to support searching for skos concepts by the label (in the FindPanel)
"refactored MeasurableSolver system, introduced Measurable interface"
"The amazing refactor forteen hundred billion: eliminated ""locations"", portals will by dynamically created, combined display/runtime/editable scenes into one, enhanced support for modifying scenes and distributing updates to the clients, various other small stuff that should not be sweated."
Refactored as implementations of AuthenticatingHttpServlet.
refactoring of some packages
Ticket#15: Refactored TextFactory into TextTable.
engine: refactoring NetworkUtils.getVlanDeviceName
"Refactored EntityHealthChangeEvent and EntityDamageEvent, as well as implementation of EntityHealEvent."
Some refactoring of class names. Consistency is key.
Refactoring of test cases
Refactoring demo calc node configs
REST API BugFixes and Refactoring;
BioJava3-PTM: package refactoring
Online LDA refactoring. Phase II
Refactor wyil.lang.Code #502
IO Refactor for memcached
#JC-670 Refactoring. Test coverage increased.
"smartsprites: SMARTSPRITES-44: resource writing abstraction added, filesystem-dependent validation removed from SpriteBuilder, further refactorings to the ResourceHandler interface (IOExceptions thrown for the caller to handle)"
refactored all menus to the MenuHelper
Refactored ApplicationInitializer.init & DataSetUpgradeUtil code bases to use Spring contexts in a proper way
Refactor BpmnDeployer into a shorter version of itself plus multiple utility classes that handle the implementation of much of what BpmnDeployer does.  This will make it easier to write deployers for other persistence systems which still do much of what BpmnDeployer does.  The new classes are:
#NAME?
Refactor: renaming sonaranalyser to sharp
big refactor of adapters etc.  Failing some tests in API.
49010 Move Static Method Refactoring: Focus problems
"[Core, Locking]: Refactoring for supporting RestXQ"
PLFM-663 refactor of JSON schema scheme
refactor: extract an abstract super class that is more general to implement
Refactored client-related core components like the server behaviour into a new package. Added first implementations for an event-driven notification system for behaviour operations
Refactoring
Refactored project using WAR files for each service
refactoring
wall filter refactor
Refactoring; LadderyGraphOptimizer
api_refactor: Move host apis to admin pkg
delete tag refactoring
Refactored.
refactor for index generator and writer
"refactor ""parseLine"" to eliminate duplicated code"
first cut of refactoring to Eclipse JDT annotation processing
updated explain part after refactoring
Refactored project structure to allow RESTful API and demonstration Java client to be separated. This paves the way for more complex RESTful API behaviour.
"Revert ""Refactor Video related Adapters to remove duplication."""
BLC-473 - Cart service changes - Refactored ProductBundle to contain SKUs instead of products. - Made SkuBundleItem pricing utilize dynamic pricing service. - Deprecated most addToCart methods in favor of new addToCart that takes in an OrderItemRequestDTO
"#JC-657 Refactoring functional, which is responsible for search in the forum."
Refactor UI towards MVP
Refactoring some files into a util package
JBRULES-720 Clips Parser -Refactored functions so all functions are now added by the PackageBuilder into the RuleBase -All functions now live in the MAIN namespace and the factory is always retrieved from there.
REFACTOR: Changed naming of service methods to getXXYYZZ for CustomerService
Refactoring
Refactor a bit.
refactoring/-naming
REFACTOR: moved flag assignment and parsing code into ArchivalUrl
"[ADD] XQuery: QueryResource interface, called after evaluation of query:       http://docs.basex.org/wiki/Java_Bindings#Context-Awareness [MIN] XQuery: various refactorings"
refactor(concurrency): RecurringProcessible -> RecurringRunnable .
Before major core refactoring
refactored interfaces to provide better reports (with summaries)
"* refactored fwd( long ) to jumpFwd( long ) * added nasNext for checking the whole link chain, TODO   needs refactoring by Preibisch to update his code   automatically"
Refactoring. more like ehcache impl.
More refactoring of test InvocationHandler utilities.
"Some refactorings. Sorry, test broken."
"NPEs, Sash Position, Refactoring"
SOC-1722 | RelationshipManager Refactoring implementation
Refactored SyntacticScope; Scopes cannot be in its own subpackage
Refactor 1 - simplify names a little
[refactoring] Introduced DependencyModelHandler#artifact(..)
Packages refactoring
"added version to template, refactored templates"
a lot of refactoring (mainly names)
AS7-2969: refactor TransactionTimeout processing
Refactored common code into CollectionJid; SetJid => ListJid
 - bugfix in DefaultSVNDiffGenerator (=== used to be always added)  - refactoring to core.wc.admin
1) Include the block id in the api trip bean 2) Refactor use of shapes in bundle building to automatically de-duplicate duplicate shape points
Refactored FillBuildTest and added a new test for all combinations of parameters which fails.
[WIP] Structural and API refactor in preparation for ejb-client 3.0
refactored
"More Spring refactorings: - Efo is not singleton anymore, not it is bean configurable with properties and injected into applicable services - Efo can be loaded from resource (use special ""resource:path/to/resource"" URI) or from any external URL (no need to keep EFO in codebase now, it can be anywhere on the filesystem or network) - Efo doesn't pollute /tmp directory with its indexes anymore, actual path is configured with property (and defined in context.xml, so update your archetype please)  - Index builder doesn't handle index deployment anymore and doesn't manage its own SOLR corecontainer & servers - Index builder components (services) are now beans, with SOLR servers, DAOs and Efo injected with Spring - No more index service registry, services are regsitered in DefaultIndexBuilder with Spring - SolrContainerFactory now handles empty index deployment (hence, template index moved to atlas-index-api module) and deploys actual cores found in template solr.xml"
"Refactor the HTML emitter to make the output html well-formed. Make the code structure more clear, more understood, and be reused easily."
37178: drag and drop movement of a class addes package.* to imports [refactoring]
Refactor codes about using generics declaration
refactored resource extraction
refactoring attributes
uberfire general refactoring in order to support clustering and avoid client libs on server side classpath
Refactor readAndMakeCSV methods so they're different for rooms and interiors
Assignment B2.1 refactoring: Somewhat complete refactoring. Still outstanding issues with unit tests.
Refactored counters on permanents counting Added BecomeMonstrousTriggeredAbility  Added Target and Filter class for creature an opponent controls
Refactored statistics to be used both by BackgroundStats and StressTest
Refactor BundleVersionsHash to make it easier for external code to invoke the hash functionality.
slowly refactoring towards a nicer symbol table
Refactor sendSummary to sendMove and relocate call
"37219: Rename type should update derived variable name [refactoring]: support for local variables, method parameters, etc. patch from Philip Mayer"
refactoring
refactored test packages
fix tests for PasswordRecoveryAndEmailValidationCommand refactoring to use document references
Refactor cells log4j support for better encapsulation
"Bug 384380 - False positive on a « Potential null pointer access » after a continue - prepare by some refactorings, no semantic changes yet"
* Added #responseReady() callback method to the HTTP service handler intended notifiy the protocol layer that the connection is ready to transmit an HTTP response * Major refactoring of the throttling HTTP service handler * Rewrite of the SharedOutputBuffer class
Refactored QueryStage - most of the functionality moved to reusable classes
Refactoring: o Setting groupId to no.hackaton.usb to group the artifacts better in the repository. o All packages are set to no.hackaton.usb too. Renaming usbtools package to tools.
Refactor process control.
refactor on cacherecordstore and cacherecord
refactoring of PreferenceService/SynchronizeService dependency; implement agent-level synchronization - rjrjr
"WIP: refactoring, SvnTarget now contains peg revision, which may no longer be specified separately on SvnOperation."
"Refactor openmrs:format tag to support an ""object"" property - TRUNK-337 author: mvorobey"
engine: Refactor ExtendCinderDiskCommandCallback
Refactored Navigation controller code.
"Updated Eclipse dependencies versions (mismatch caused hard to trace problems), added examine() action, started to implement JSONWriter, some refactoring."
Refactoring for better code and performance
reattach refactor
refactored CompositeMetricCollector(2 collectors -> list)
More refactoring.
#NAME?
Refactoring
"add createTable if not exists, and some refactoring"
Major refactoring
refactoring unit tests to move failing ones from blocking release
IllegalArgumentExceptions and minor refactoring
[Degree] Refactor: Creating a DegreeCurricularPlan for a Degree no longer depends on the degree being bologna.
Refactor spring-protobuf
Refactored test launcher code.
Refactored DistributedEventAdmin class to support easier extension by subclasses.
NXP-5859 Refactoring and cleaning to unit test UploadFileRestlet
Refactorings.
refactor
Experimental refactoring update to test new API
Refactoring
Refactoring for less code dupplication in charts/stat
Storage engine refactoring
Service deployer REST API refactored
Refactored job vertex class hierarchy
#POULPE-120 Tests for ComponentService refactored
Refactored.
Refactored RTMPT handling to support a fix for issue #281. Created and externalized new configuration parameters for adjusting RTMP and RTMPT communications. Implemented a means for throttling in / out data. Updated Winstone jee container plugin. Fixed issue #283. Thanks to BigBlueButton for supporting fixes to RTMPT handling.
Refactoring: Abstracted the notion of a SVG plot (with all its properties)
[refactor] make RestxAnnotationProcessor reusable for different annotation
Database test refactoring
refactor StatViewServlet support for jndi: unfinished
Integration Tests - DataTable dynamic columns refactor.
Refactor event and spi related classes into their own package to match the API and reduce complexity.
Miscellaneous refactorings.
Refactored rooms to extract buildings to it's own class and corresponding table.
Delivery part code refactoring: MtSbb part - invoking of sub Sbbs via a message fire
refactor server
Refactor attributes filters. Add Number and Boolean builders in Equal category. Create related UI for editing. Update builds name with html for attributes type.
Refactored to work with example collab client.
Refactor a field to be private to aid debugging. Make javax.xml.transform sources work.
OGM-701 [MongoDB] Minor refactoring
"Refactored MemberV2ApiServiceDelegatorImpl and how it carries out security checks, now no longer checks the same thing twice for a single request (previously orcidSecurityManager.checkPermissions() was being called twice in some cases). Updated affected classes and tests."
"refactor out generation of Unix, Cygwin, Windows friendly search paths for general use"
Added tests for VersionedPortable and refactored old ones.
Refactor package name
Added a new Ant task. Refactored Mojo to use Ant task.
refactoring for parallel update over list of RoadSections
Refactored MBUI classes: Introduced EntityContext
Refactored things a bit after parallelizing the LLVM invocation in order to make it easier to use from the Eclipse plugin. (#405)
minor refactoring: renamed MockTagCloudService to TagCloudService
refactoring
"Refactoring of Task, BackupTask and RestoreTask classes : - moved from fr.duminy.jbackup.core to fr.duminy.jbackup.core.task - removed theirs dependency with JBackup"
#NAME?
  * ImageWindow - minor refactor of code   * ImgLibProcessor - get rid of doPointOperation() and do BinaryOperation(). Add various assign() and transform() methods.   * BinaryAssignOperation - change visibility of constructor so it can be used in ImgLibProcessor.
thml refactor and filter bugfix session
[PLAT-1011] Refactoring to get live results into batch db
refactoring default language strings; added toString-method
Finished services refactoring. Continuing with controller refactoring...
Refactor the DefaultResourceDao and abstract the enumeration and retrieval of resources via the ResourceStorageDao interface.
Refactor: Cleaning up `forceInstall`
Initial basic ruby debugger implementation. Preferecne ids refactoring. Adding DeployerHelper class.
refactoring state transitions and adding method for deployment
[MOD] Core: refactoring commands
refactoring of ini api
CAY-943 Support multiple cayenne.xml files in the project (refactoring)
Refactor singleton use to workaround JDK clash
"first refactor for split remote handshake,distributed and on session requests"
"refactor artifact names, and java packages, to reflect organisation under org.opensmpp. bump version to 3.0.0-SNAPSHOT and add note about semantic versioning to the readme"
Refactor CeylonDeclaration and SourceClass
"o a little refactoring o hook in snapshot transformation, though it isn't used"
"Added new DataSet datasources, DataAPI and elasticsearch versions + refactoring"
Significant refactoring of TimeBasedRollingPolicy. Most of the work related to triggerring has moved a new class called DefaultTimedBasedTriggeringPolicy. Related to LBCORE-61.
DDF-2644 Refactored endpoints some more and formatted files
SOAP-1397: Created test scenarios and refactored to be able to add more than one OAuth2 profiles
engine: Refactor VnicProfile row mapper
"DROOLS-198 Separate Rete and Phreak -Going through classes removing isUnlinkEnabled, and refactoring the related code into phreak/rete separations"
"Fixes #1096 (XGMML export: incorrect node width/height values). Refactored XGMML readers and writers: created one reader/writer per file type (standard XGMML import, session network serialization, session view serialization); XGMML file filters are more precise now, as they check whether or not a session file is being loaded, not just the XML header; added more unit tests."
refactoring; renamed getOccurrences() to getTokens()
Refactor Environment and PropertySource
refactor and adjust IOCM implementation
https://issues.apache.org/activemq/browse/AMQ-2728 - MessageServlet refactoring
Major refactoring of SortPomMojo. Made tests for setting of parameters.
Refactoring
pulled up 1 method to refactoring test
Minor refactoring of code.
refactor
Refactoring the navigator structure.
Code refactoring and reformatting only.
Refactoring of functional tests to remove horrid static dependencies. Introduced a server builder to deal with it instead.
Refactor and interface change in Import container. Generalize options and prepare for different import strategy.
REFACTOR: moved UrlCanonicalizer to org.archive.wayback.util.url
"refactored shelltoplevel: commands are now registered by the commandregistrar. Avoided circular dependencies between the topLevel and objects that need to be registered in it, whose need the topLevel too. The shellTopLevel is now lightweight. The registrar depend on it and registers things on it."
refactored project
refactor and add initial specs learner
refactored the locations for the admin exporter code and the new broadleaf admin theme
Refactored support/IT classes and added some timer stuff to SupportEJB
"Rename artifact id to be consistent with module name, move files to impl dir for consistency with refactored package names"
software management step refactor
Deltalink refactoring
more OpenExchangeRates ticker work. ticker refactored.
refactored aligners
Refactor + ReadScenario + InsertScenario
#NAME?
Refactoring of the procession statistic classes
Refactored some packages
"Refactor OSGI Example, verify test of Karaf"
Code Refactor and Cleanup
#NAME?
Refactor ConsistencyLevel impl to make it more consistent
#930 - Allow Jackson to work with JAXB annotations - Remove Jersey JSON support as all JSON serialization/deserialization will be handled by Jackson - Provide a customized Jackson ObjectMapper that works with Jaxb and appropriate array serialization - Allow applicationContext-level REST wrapper overrides when mapping to/from JSON - Refactor REST components to be automatically component-scanned
refactoring...
Refactor obsolete indirection in RepositoryAction.
start of some refactoring; move the column replacements out into their own classes
Parse les bonus du strike (sans refactoring)
first phase of huge refactor of quick fixes/assists
Refactor and improve pool and hook internal API
"Refactoring: Changed the way ExecutionDegree's are connected to the OccupationPeriods. It is now possible to declare multiple periods per Degree, and to specify periods for a given year range."
SetTest refactor (#1724)
[192019] View Model refactoring cont.:  fixed refactoring bugs found during PDA development.
slight refactoring of app engine
Some fixes required for the refactoring engine.
ACT-104: first cut of refactoring query API
Refactor and merge util classes in legacy plugin
"baumwelch training, diverse refactorings in testcases"
JBRULES-16 move PropagationContextImpl to common -minor refactor
Refactor the DefaultBroadcaster API and delay the setID until start() gets invoked to reduce the number of live thread. Also promote the notion of Broadcaster's URL to the DefautlBroadcaster to make remote Broadcaster easier to create.
Refactoring of APIs: WikipediaArticlesDump implements Iterable; rewrote code into functional style.
Summary: Do code refactor for extra work.(T59138)
CartesianCoordinateSystem refactored to DimensionalFlag.
"removed some methods that dont belong to page, refactored some tests to be unitary."
refactor
[SUREFIRE] refactoring + properly closing TestProvidingInputStream
"refactor java packages, reformat js met toegevoegde formatter profiel voor eclipse 4.2"
implemented clear() and refactoring
Renamed according to recent refactoring discussion: ISetOfMolecules -> IMoleculeSet
"Core: refactor storage layer, pt.4 (#391)."
refactored Yield curve fitting test code
refactor JsonHash and JsonArray. refs #15
"Benchmarker test should also cover unintialized, non-feasible results (needed to verify initScore refactor)"
folder structure refactoring
Refactored MRUnit setup code out of tests into common base
Issue 54: refactoring project structure to multi modules separating Jersey and CXF dependencies
ROO-2189: Post 1.1.2.RELEASE code refactor and clean up - renamed converters package to converter in addon-dbre
Started work on some refactoring of clearProperties and the property intercepter to make things simpler.  Some TODO entries added to indicate where more work is still needed.
refactor to allow a throttle on the production as well as deletion of keys
Refactoring
"o better settings validation, some refactoring, updated doc, more tests"
[PLAT-1296] Refactor time-series master; Search request methods
"Some refactoring to lessen class dependencies, reduce number of parameters and duplicate code"
Refactored extension loading and exception handling
[KARAF-881] Refactore the osgi:* and dev:* commands to provide services:* commands
"SWT Layer refactorin (Tree, TreeItem, etc.)"
[PLAT-1296] Refactor time-series master; Better validation
"refactored failover, authentication"
add jpcontententfeedback refactor
refactor in selectors
refactor
refactor: break private classes out. do some separation of test code too.
More refactoring.
refactor
Refactored
Refactored function storage to ExtensionTracker only.
"Console refactoring, added some stubs"
"Refactor controller naming, make CustomerState static, add CartState"
refactor StatViewServlet and js
refactor a bit and add a main method for easier benchmarking
#NAME?
"refactor pacman, add core and server projects"
Refactored BookTest for using TestResourceTree
Start to refactor how hashes and bloom filters work together
MIFOS-4385: refactoring of PersonAction
Removed references to WritableEntity to allow flexibility in entities inheriting alternative classes Moved some databaes properties into application.properties Refactored property names Documented properties Various Spring and properties changes to support latest JBoss and MySQL Changed default database properties to database.prod.properties Minor API changes Changed id-generation to AUTO to support different databases Beautified login form slightly Removed requirement to register in demo Added confirm message when to-many items are added to parent entity Upgraded to vaadin 6.8.0 Fixed bug in clearing fields with attached PropertyFormatter
"Revert ""HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang."""
 * Refactoring
refactoring - extracting quartz default config in a single method to not spoil the init logic with values
Refactoring of type/method traversal for coverage analysis.
Refactor the name of both the directories and the artifact ids of the WebPages project and of its subprojects
Refactoring: Extracted Helper class and derivates from Packaging. Adjusted classes that use Helper objects to reflect this change.
#646 - REFACTOR: L2 cache towards remote data grid caches (like Ignite etc)
More refactoring.
"Refactoring unused to, but keeping it for reference"
[refactoring] Some renames around TargetPlatformFactoryImpl
"Done first refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (introduction of MeasurementHandler, MeasurementItem and MeasurementUtil"
[PAXURL-63] Refactoring & zip/jar scanning
CAY-926 Refactoring class generator classes (cleanup and refactoring)
acv+rbo : OMN-124 - Added sharpen.replace.extends annotation and minor refactorings.
"Refactored drawing, refactored demos."
[270671] - refactor to move ui parts to ui package and some small protection for inf loop
Refactor Binder.
Lots of refactoring and stripping out dead code. Removed the code dependency on the deprecated EAWT methods Renamed packages and introduced new ones to properly segregate the areas of concern. Added support for preferences.
"Refactored maven directories and java packages replacing ""sting"" with ""gatk"". To reduce merge conflicts, this commit modifies contents of files, while file renamings are in previous commit. See previous commit message for list of changes."
refactor move and a few changes
Completed refactoring of persistence by moving things to oxalis-persistence
Use components for ServerKickEvent (fixes #744) + minor refactoring
"XQUTS: back to 70%! fixes, refactorings, cleanups"
#3 unit tests for default constructor added + some minor refactoring
refactor conditional tags
Refactoring statement tests
Refactoring in CF commands
Further background package refactoring * Introduce checking for failed transactions and delayed removes * Handling false stale reads on the same key updated within a single transaction * Moved a part of logic into dedicated FailureHolder & StressorRecordNotifier classes * Fixed faulty node indices * Renaming
quick package refactor
Naming refactor
Refactored Updater and updated config versioning.
AMStatisticsCollector and ApiManagementInterceptor refactorings and improvements
initial refactor to restructure the binding of solr results to teh ResultModel
"refactor, options"
"REFACTOR: - code changes to accommodate .NET into WALA. A .NET class maps onto multiple source files, and thus these changes."
Refactor transactional support: introduce a TransactionalSpace interface.
"Finally get the capsd table walkers all refactored.SnmpTableWalker could use some more refactoring but at least they are all combined.Note I"
Refactoring
"Fixed bug in case of large files being downloaded, and refactored writing of data frames."
DNA-57: Refactor codebase to clearly and cleanly separate SPI and API
"Refactoring: removed redundant determination of entrypoint, introduced EntryPointUtil for this purpose"
refactor rename getYAxisGroupPosistion
"Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (renamed several classes, removed unused functionality, added additional test to improve coverage)"
"Refactoring, and adding test for updateView"
improved coherence support and refactored CacheWrapper
Finished refactor for local sr matrix
refactor
Package refactoring
refactored
Huge refactoring of HTTP commands to have a clean separation between request and response
Refactored onReadTimeout() to parent class.
core: refactoring fixes
project refactoring
Prismtech JAC#512: demo code refactor
"1/Set chouette object as Root Element in replacement of type => ASK CONFIRMATION 2/Add entry points for AFNOR format exports in ExportManager. 3/Correct precedent conflicts merge : restablished internationalisation (and and a forgotten message) 4/Add 2 tests for AFNOR exports, one with a well-done format, in export unit test, the other with a bad enum value of user mobilty, in validation test. Note : begin test folders refactoring, creating a folder for input and output data"
Refactored test archive creation to Deployments class
Refactoring
"new fixed asset repo, started some refactoring on leases and parties"
huge refactoring of rest bot tests
Refactor to fix inconsistent naming
test refactoring
message handling refactor
Refactored aggregations; enhanced expression transformations; Added rewrite of grouping expressions to batch aggregation
#NAME?
CAMEL-11356: Camel-Kubernetes: refactoring tests by using Kubernetes-server-mock and Openshift-server-mock - Configmaps Tests
Update per Fred's comments Refactor some stuff
FACES-1348 Refactor management of BridgeRequestScope
refactoring
Refactored dynamic mock packages to separate core from higher level APIs
CheckIn:Fix bugzilla bug 302563 Refactor data set editor pages' codes[19748]
Refactored package name org.activemq -> org.apache.activemq
refactoring
More refactorization for change translation.
Refactor downloader into FileLocator and optimize for speed.
Refactor locator API: QualifiedBean->BeanEntry
Refactoring and a little code cleaning
Refactored FSM/EFSM Added Dijksta shortest path algorithm for states.
"-Refactor to use InternalFactHandle - so we can directly get Objects -Remove PrimitiveLongMap from WorkingMemoryImpl, as we now get from the InternalFactHandle -beta node indexing now caches the column int  -Rete and ReteooBuilder now correctly seraliase - via the CompositePackageClassLoader -Note there are still some failing logical assertion tests. -ReteooBuilder and workingMemory actions are now synchronised via a lock on ReteooBuilder -I've added a hard coded conflict resolver, hoping its a little faster than composite."
"refactored executors to mappers, some shifting of classes"
Rest refactoring as per bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=294774
Feature invariantAxisPropertyDeletion. Fix an incomprehensible bug occuring in some machines during tests by refactoring the silverpeas Web service test API implementation. Now the resources on which the test cases depend on are decorallated from the test class itself; they are now managed by a resources wrapper through the Spring container (that is bootstrapped by the Jersey Test Framework). The tests on the REST web services in Silverpeas Core are updated as consequently
Experiments lists refactoring
Refactoring
Refactor tests and update a few.
more refactorings
first version for DeNovoAnnotatorTest + DeNovoAnnotator refactoring
refactored PathMetadata.PathType class and instances
"Refactored the wish list controller name, added ability for wish list operations to occur on multiple wish lists, first draft of add to wish list functionality"
Refactor move and remove bundle mojos
"Refactor, math optimizations and renames"
- Display consumer editor on error so that we can display updated information if appropriate (or let user correct any mistake). - Started extracting business logic into a UI-independent controller class. - Cleaned-up UI classes by removing useless extra elements and refactoring things to reuse more code.
Refactorizar Farmacia por RepoFarmacia
Fix refactor errors
Refactored: pass system properties as Properties to ProcessLauncher
Refactorization of SNV translation code.
Minor refactoring
refactored to allow management of improvement and special season enrolments
[java5] refactoring: JAnnotation & friends
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
Some refactoring
RF-12900: refactored ajax components to subpackages under ui.ajax
xslt utils refactoring
"refactored tree, no more dropdown for feed editing"
refactored the code
"some refactoring, some composite test code"
tons of refactoring in the classes. Added test project to have continue development with condfidence
A little refactoring
Minor refactor.
Refactored sip extension into a separate module decoupled into api and impl as submodules
Refactor two modules codebase path
Refactorings and 1.7 support in progress.
"Refactored the Activity engine add the use case when we've received a document, that will cause a creation of the new activityValue, but the corresponding document in Zoie remains untouched. We have to manually update Bobo indexes in this case"
ItEr21S04ArquitecturaServidorItEr20S04: Refactoring tests of ResourceServiceTest to increase readibility.
first part of refactoring: use spring if cxf requires it anyways: - get rid of static methods in logical reader manager - test the reader manager with unit tests - use spring DI in the WS facade
test uti refactoring - moving ThreadedTestHelper to cayenne-test-utilities
Test refactoring
"Refactoring: renaming ""CloudManager"" to ""TopologyManager""."
Refactoring the application of the Petals recipe
refactor mapping
"Refactored metadata management * Metadata belonging to different functionality areas (i.e. common, hiv) now in separate classes * Moved constants into same file as installation"
Refactored class Fields to a better API.
"Refactored the Thymeleaf implementation All abstract processors now contain utilities to facilitate the creation of processors Added new processors allowing to write a ""configuring div"" inside a template, just before the table tag. This div allows to configure: exports, callback, extraFile and configuration properties. Comments updated/added in almost all processors Renamed some processors for the sake of consistency Removed all processors related to export and callback (now handled by the new ""configuring div"") Removed dead code Updated integration tests with the new features and cleaned all test templates Closes dandelion/issues#161 Closes dandelion/issues#201 Closes dandelion/issues#202"
Even more refactoring of the Console/ConsoleUI/ConsoleCommunication split.
Refactoring of test code for naming consistency.  Also added browse test cases.
refactor for footprint
refactoring
refactor code in birtReportsUploadAction
Refactored to more pure MVP
EST-497: Ability to select unit when no occupancies are set yet; some refactoring
bugfix: the nosql reader now manages to fetch the command service api. added a short-cut to go directly to the master instead of looping through all hosts until a master is found. refactored the code so that anonymous and authenticated share more code.
Refactored packages and updated event mailer to rule bolt to take subject and email from config.properties file.
Refactor inner class Piece.Type to package local
Moving refactoring stuff to com.python.pydev.refactoring
Refactor methods for generating alignment PDBs
Refactorings in PixelPosEstimator
Refactoring the code
* Refactored Http interfacing * Added @ListSeparator annotation to enable array/collections param-specific merging with given separator * Refactored integration tests
ACT-293 Refactor variable map
Revise and refactor request counter
Major refactoring and cleanup of perfmon client plugin Add save to file in non gui mode for perfmon
Refactoring and complete task functionality for Client.
Minor refactorings and added an ANSI escape-aware output stream
refactoring Gateway naming/layout
"Make the emf/wmf mimetypes returned for the OLE2 office files match that stored in the OOXML files, as well as refactoring the container tests to reduce duplication (TIKA-509)"
Refactor Filters and add textContent() filter.
Product class tests added after refactorings
refactor
Refactor SSH commands into their own package
template test predicate refactor
477278 Refactored DefaultServlet for cached Gzip & Etags
Refactoring.
refactor ArrayListTypeFieldDeserializer
adding UserAgentFlow and refactor OAuthConsumer to move the login function to the LoginModule
refactor unregister code a little to avoid potential exceptions if things never got registered
Aura themes refactoring
"XWIKI-13468: The query used by the Document Tree to get the nested child pages is very costly * Show the Attachments node when showAddAttachment=true, even if there are no attachments. * Refactor a bit the code to remove duplication."
Checkpointing while refactoring routing layers. Also changing the interface.
refactor weld-logging packages
minor refactorings
Summary: Refactoring chart code for extra works.(T49839)
Refactor deployState and deployBehavior (aka productionState and productionDeployState) to be accessible from the BroadleafRequestContext for convenient access from all locations
refactoring
Code refactoring. Added validation (TO DO: document it)
"Added configuration option whether new vertices are maintained in a transaction to save memory in batch loading scenarios. Refactored TransactionConfig to use ""has"" instead of ""do""."
"first drop of MAGNOLIA-636 (Refactored cache) + MAGNOLIA-624 (New cms:contentIterator Tag) from Andreas Brenk. Still some work to do, cleanup, and missing jmx dependency for compiling on jdk 1.4. Will fix during the next days."
festivalparser finished big refactor is missing
more refactor of API searching
Refactor to include network creation as actual deployment
CAMEL-8869 Upgrade httpcore and httpclient to version 4.4.1 and start refactoring tests
Refactor and clean services
XLC-217 [vcms] refactor code to use ConfigParams straight instead of OpenstackPropertiesFactory
refactored package name of knowledge session service
PLAN 4549: Service refactoring
"Refactored implementation by mmedenjak, additional SQL predicate tests"
more refactoring and added support for aync request processing that does not require sending back an HTTP response - AsyncHttpHandlerSupport
MiniMaven: refactor out the coordinate class
Some refactorings in feature commands
ISIS-1559: moves new Party_invoicesFrom mixin from invoice module to capex module (so will be able to refactor to have it return a list of IncomingInvoices)
Refactored _Updater test class to get it working
Final refactoring before GSOC ends
Refactoring and changes due to the massive changes in the rest api
Completed Javadoc and minor refactoring
refactor fetch&get msg request
refactored buildWrapper code into POJO style so it can be unit testable
Refactor Jest auto-configuration package space
continue refactoring basis for tests able to pickup remote.server=phantomjs
refactored getOntology
Refactored the DefaultPopulationStrategy to also include some of the decision logic that was previously in the tag. Made the PopulationStrategy a ConfigurableComponentn and wired it into the configuration.
refactoring
"Small Refactor of Event Classes (Remove B from them), Added Caps Spam fix. (Config option mchat.cLockRange sets the minimum it checks for, the max is hard set to 300)."
refactoring stereotype handlers with multibindings
"Large refactoring to support HiveForeignKey annotating, which allows an entity index to delegate to another entity instead of creating a secondary index"
#34 : start Refactoring RiverService with abstraction level
Refactor to make code more testable
clean up and refactorings
refactoring which adds to wagon a minimal ammount of metadata which is needed to make it useful for m1. API changes are small and should not in any way affect m2.
Refactor the analytics filters into the Measurements feature.
EST-621: Make Link entities editable. Refactor into Repository/Menu/Contribution pattern.
Issue 102: refactor to use RestContext instead of httpresponse.request
Check in #194549 Fixed by disposing renderer resources when ChartReportItemPresentationImpl  being finished. Also refactor renderer codes to avoid duplicate render objects and potential multi-thread issues.
Refactoring: Move code for getting history context out of HistoryReader
"added JBoss Web, Connector, and Virtual Host Resource types; did some misc cleanup & refactoring of the descriptor and the code"
Refactoring Config to own package.
refactor agents
Refactoring: embedding ComputingGrid pt. 1.
Refactored channels
"JBRULES-720 Clips Parser -Working on creaet$, not yet finished -In the middle of a broken refactor"
Further Refactoring
#NAME?
refactored label issues
REFACTOR: Changed naming of service methods to getXXYYZZ for CoworkerService
Refactored tests to use junit 4.5 style annotations.
Refactor DownloadUrlLink creation out of changes
"Refactor prototype with regard to updated design, remove chunk format (currently discarded). Builds, but doesn't work in any form; cache is a no-op too (layering for cache will be different)"
"Title, Frames and scope refactoring"
HIVE-578. Refactor partition pruning (Ashish Thusoo via namit)
Actions have been refactored into commands (actions are deprecated). Added Neo4JDatabase tester.
refactoring; generalizing mapping loading functionality;
refactor system property handling
several refactorizations:
"* add support for moving resourcetypes to new locations in the type hierarchy, as well as moving any existing resources of those types (https://bugzilla.redhat.com/show_bug.cgi?id=577055) * in jboss-as-5 plugin, add new JBoss Messaging singleton type and move existing Topic and Queue types under that type (https://jira.jboss.org/browse/EMBJOPR-303) * turn off PERSIST and MERGE cascading on ResourceType.childResources to give metadata update code a greater level of control * refactor metadata updateTypes() code ** iterate types breadth-first, rather than depth-first ** explicitly update child resources of new resources, since PERSIST cascading is now disabled ** stop using exceptions for code flow * add unique constraint to name+plugin index on RHQ_RESOURCE_TYPE table in dbsetup and dbupgrade scripts * remove bogus Hibernate hints on named query in ResourceType entity"
Refactored the ToPr to load topology at startup
Minor refactoring.
refactor out ServerResponse
XMLConfigPreProcessorTest extracted from XMLConfigBuilderTest and some minor refactoring made to XmlConfigPreProcessor to make methods shorter
start security context refactoring
* Added NumberUtilities.roundToNDecimalPlaces(). * Cleaned up/refactored TableUtilities and added TableUtilities.extractDoubleFromCell(). * Finally had LogMessageHandler reviewed and refactored to be more straightforward. * Reviewed by Joseph.
Some refactoring of wc-ng code: Generic Structure class is introduced and used by some of the SVNWCDb methods. Info operation implement in the new WC API for wc-ng targets.
[ALLUXIO-2893] Refactor arg options in Alluxio Shell Command Line
Refactor PurgeDao
test.retention refactoring
"2498997, 2476077: Refactored into two modules, introduced CGLIB and Java Proxy FieldHandlers which replace the EasyMockClassExtensionFieldHandler as the default for providing for fields that require a proxy.  Still needs work but the project builds again."
refactoring ScreenshotInterceptor. - remove the dependence to Runner. - remove the dependence to receiver class.
refactored
[PLAT-3406] Maven - Refactor DbTest and upgrade test
refactor AmbariImpl test class.
UML-311: Refactoring in Connector services class.
"refactor for bug fixes, etc."
Substantial refactoring.
refactored entities
Mostly refactoring and removing old code.
did refactorings
Finished group permission inheritance changes and a lot of refactoring.
Cleaning and refactoring Adding api for EasySOA Management service to instanciate ondemand app's on FraSCAti studio
Refactored: moved SuiteListener specific tests from IpcProtocolTest to SuiteListenerEncodingTest
refactored query to use a specific server (only one server hit per query)
refactor
Major refactoring of Titan interface. Removed many minor features and simpified the API. Changed code and test cases accordingly.
refactor SQL dialects into separate classes
Refactorizado y arreglado un poco algunas funciones del servicio
"#JC-1134 Added test cases, refactored a bit bbcode nesting validation."
"more fixes (refactoring, contextual menu, debugger)"
Refactor actuator package locations
"Set retrieval of own local IP-address to a centralised service for all protocols. The new method to get the IP send to the client to connect to the pool is now identified by a previous UDP-Call. This is a workaround to get the correct/best IP for multihomed machines choosen by the OS. Some small refactoring is done, too."
Reinstated the dependency on the opennms-dao test-jar since the DatabasePopulator cannot be refactored out of the opennms-dao project easily. Moved applicationContext-proxy-snmp.xml and its ProxySnmpAgentConfigFactory class into core/test-api/snmp.
Initial refactory of knowledge-api: renaming org.drools to org.kie
Finish refactoring of Access token position
BridJ: - renamed Pointer.withIO(PointerIO<U>) to Pointer.as(PointerIO<U>) - added Pointer.asUntyped() (equiv. to Pointer.as((Class<?>)null)) - allow pointerToBuffer on a non-direct buffer (and added Pointer.updateBuffer to copy data back to non-direct buffer if needed) - refactoring of exception-launching code when io and/or bounds are needed
Refactor log warning in LCOVParser
"add provisional support for change lists.  This needs more detailed testing.  Includes a refactor to push most resource document creation up into a super class, hugely simplifying the individual documents"
Refactor the command-line updater a bit
Improve/refactor member update & mastership claims & add validations
Refactoring + documentation
"ACT-60 more refactoring configuration, persistence and test"
Significant refactoring to enable move to wildfly. Mostly related to moving system jms message classes into bedenote (bw-msg)
ACT-755 refactored related content UI
#NAME?
JBRULES-2623: refactoring tuples to reduce code duplication.
Refactor Private Classes into Public Wrappers
further shrike-related refactoring
more refactoring
"Fixing issue 22 and refactoring bits of HAL to use new data structures, shrink code duplication, and eliminate the use of secret properties for setting critical parameters."
Refactoring WebSocketSettings to WebSocketPolicy to better conform to naming in use within RFC 6455 spec (discussed with jesse over phone)
Some SSL refactoring
refactor code
"Work in progress. SaxPipeline enhancement, heavy refactorings on XslWriter. Broken tests."
Refactor code
"Refactor, move the code inside a method"
"minor refactoring in command group, --setVisible on command group now controls visibility of bound group containers"
done some refactorings in the editor namespace contributions
refactor GCViewerGui to (almost) passive view
Refactored package layout for semantic search module
Refactored
Refactored to remove persistent part tracking from FileOperationSplitter
Refactor PullTest example to PushPull
refactor cache report
Refactored the Whitespace checks
"refactored query client to match ""design"" of capture client (no new functionality)"
Renamed according to recent refactoring discussion: ISetOfReactions -> IReactionSet
Refactoring LDAP classes to com.idega.block.ldap module
branch:      javabot Refactored so that the operations don't need Javabot.  Also added a system test which we should run through before checkins - docs/SYSTEM_TEST
Refactoring UserSettings in UsrPreferences
"[MIN] refactorings, checkstyle warnings"
refactoring services in subpackage; refactoring package filter string
refactor some tests and add Request.format
Refactor TraversalEngine to extract the progress meter functions
refactor
"refactored capture related code (servlet, module, backend) its own package"
Refactored PageId to PageReference
identifications refactor
refactor query handling again...
RequestParser and OrionRequest builder refactor
Major refactoring that adds the handler API and puts the listener API in an adapter.
"added GDM user script, refactored IBDBGenerator to add workbench user for each local project database created"
#NAME?
refactoring with new SLAModel
"more test , more refactoring, more javadoc"
TYRUS-232: SPI package refactoring
Harshit | Refactored domain objects.
Refactored gauge drwaing in a RenderUtils class Added xp gauge in the ship editor
Refactor to remove code duplication
continueing the refactor of the UI for new streams
Major refactoring for PropertyDescriptors.  Changes include:
JBRULES-720 Clips Parser -refactoring to use new framework version -renamed from clp to clips
scheduler cleanup and minor refactoring
"Spring namespace handler refactoring : packages, autoregistration thanks to Java 6 ServiceLocator"
Refactor: Allow viewing delegate information from other execution years and degrees.
#NAME?
"Added rollback-demo for demo2 in demo2.MainRollback, refactored RollbackPrevayler some more for performance and simplicity."
refactoring and removal of legacy tech preview code
Refactored method names in IDocument to make them more descriptive of what they are.
Refactored: simplified ObjectSerializer
Refactoring to remove use of FullyPopulated* and augment Position with getSecurity method instead
(1) 5th development snapshot of the new Color Manipulation toolview (2) Refactoring of the Binding API
refactoring for better and consistent method names
Refactoring
Refactor and rename test methods
refactor & rename
Some refactoring of integration tsets
"More refactoring of impl, including collapsing some of the package structure."
Refactor activatable handler to support multiple activations
minor refactor so that we can start to implement a DataStore which uses git for its version/profile configuration
Added internal API method odaconsumer.Connection#isOpen; refactor exception handling
Refactor module name
#NAME?
CvTemplateFieldController refactored
refactor-move clean up
All LeaseTerms finders now tested + refactored deprecated annotations
Moving another Javadoc check to see what is involved. A suprisingly small amount. Love the Eclipse refactoring support having the smarts to do the CVS operations.
"added Shoppinglocation + a lot of refactoring, ""Location"" is now common base class for GastroLocation & ShoppingLocation"
Refactoring and cleanup f the index deligate code.
BLTI-160 refactor and add BLTIProcessor plugin
NXP-10864: refactor fulltext indexing to have single-thread writes
Multiple changes due to refactoring of CDS valuation and risk sensitivities code (work-in-progress)
Refactor into multi-module project. Refactor load metrics so they don't rely on JMX.
Some refactoring in search
Refactor
Refs #3798: Code refactoring (making it possible to reuse maybeOpenSession method).
Refactored equivalency plan interface to allow multiple curricular courses on left hand side of rules. Refactored name of LogicOpertators to LogicOperator. Added interface for viewing equivalency plan as a table instead of in the degree curricular plan.
Branch to work on analysis refactor Currently broken because our wrapping TokenStream doesn't share the same AttributeFactory with the TS it wraps (they used to be related via constructor?)
Refactored Azure ARM to not use Deployments
Refactored VariantsToTable so that 1) genotype-level fields can be specified (stabilized and supported code) and 2) the --moltenize argument could be supported to produce molten output of the data.  Added tests that cover these capabilities.
Refactor AuditableInterceptor to improve readibility.
Refactoring and clean-up of fragment for media previews
CAMEL-9515 Post implementation refactor.
Minimal hard deps achieved (although discouraged). URIExtractor was a terrible refactoring idea
package naming refactor
Refactored Views -- now they accept ResultSetRewindable instead of result XML strings No results is now an error in ReportCreateView
Refactored SPDY modules and added ALPN tests.
Refactor internal R-Tree methods.
Resolve Jersey session injection. Change the SessionFactory so that it doesn't throw a TransactionMissingException but rather returns a null value for a session. Then refactor FedoraBaseResource so that calls to session() all involve a null check.
Fix for GRECLIPSE-501 refactor for GroovyTagScanner to expose the rules creation use getDeclaredMethod in AntlrPluginParser.fixSourceLocations hopefully fix failing test on server InferenceByAssignmentStatement use variable types for declarations
adjusted log messages after refactoring
[refactor] use IntelliJ UI components
Refactor blockingMapRed
"Refactored FastCGI module into just two modules, client (for usage of a standalone FCGI client) and server."
refactored to not require the type of the api
"Use shared AST in Toggle Function refactoring. This change concudes the transition to CRefactoring2, which is now called CRefactoring."
Swagger: AS3 sdk - Refactoring towards better names and cleanup
"organized test suite a bit better (temporary anyway, need to refactor core test suite to make it reusable for new parsers)"
"Added URLConnection ClientExecutor, plus refactoring of the ClientRequest/Response interaction with ClientExecutor."
Refactored less body members validations and added validation for css body members. Close #84
Refactor IncomingMessageSessionImpl.moved from com.dreamoval.motech.model.dao.imp to com.dreamoval.motech.imp
https://jira.jboss.org/browse/JBIDE-6300 Tycho-based Drools build depends on JSF; refactor out common bot test framework code into tests/ or common/ module reverted last changes  removed common plugin references im manifest
refactor MethodDescriptor
"major refactor, maven modules merged"
"CORE 	Fixed Bug 39530 - More problems with initializers.  	Fixed Bug 37424 - Crash when opening big files 	Refactored pointerOperators & cvQualifiers to not throw backtracks in optional case.   	Added tracing support to cdt.core plugin via .options file.  "
"ISIS-1390: minor refactorings (inlining of methods), now easy to track usage of the CommandService"
fixed XrefInput; major improvement is json escaping (gave very strange errors in BBMRI catalog); also refactoring to not use the *.properties file.
Some oidc refactorings
refactored context
Refactoring of the install-kar goal of the karaf-maven-plugin
SOC-1245 Refactor LinkProvider class
Cambios y Refactors varios del proyecto
#NAME?
refactoring
Refactor options handling in RegularEventListener
org.orbisgis.rasterProcessing: WandTool refactoring
"A fairly significant refactoring of how components are managed and instantiated, with changes to the services that consist of managed Java components.  Also significantly changed how the rules engine (now RuleService) is structured to be more consistent with other services and to properly support multi-threaded calls."
refactored services / cleaner package for software architecture doc
refactored BeansModel image stuff; refs #259
refactor alert module
social reimplementation based on spring-social-web lib refactoring
refactor addOne
refactored tests to directly store changeset instead of using http push which causes concurrency/timeliness issues
Fixed texture packer coords. Refactored skin!
SWITCHYARD-1394 Refactor SwitchYard core to use Camel Exchanges directly.
refactor for fcrepo-944 test support
refactor snapshot
Refactored NearCache related stuff. Made all near-caches impl. in whole code-base to use same NearCache interface. Moved all NearCache related logic to NearCachedMapProxyImpl and ClientNearCachedMapProxyImpl
pool-selection-unit: refactor commands to delegate to a provider
Refactoring: moving the MeasurementAggregate from server/jar to core/domain in order to be able to reuse it from other modules
"[stroy 2] implemeted functionality, need to further refactor"
"added PropertyExpansion for wsa input fields, refactoring"
Refactored package structure to match source structure.
Code refactoring
SOC-1643 : ActivityManager refactoring
Refactored PostGISMapping to PropertyNameMapper
"JBRULES-2615: Drools Grid Services remove unnessary dependencies 	- removing not needed deps + little refactors to improve the usability, still need comments"
o Refactored demo
"Refactored Plugin into an interface, make Javaplugin and relevant code to attempt to actually load plugins"
"Refactored Oort. Moved servlet configuration parameter constants to OortServlet, implemented destroy() in OortServlet and made Oort inherit from AbstractLifecycle, implementing doStart() and doStop(). Simplified messages to /oort/cloud (too many were sent) and cleaned up the code, also removing synchronized blocks. Added test cases for network topology and fixed pom dependencies."
Refactor code to make it more readable. (#4224)
"Time JCR calls.  Refactor a little, in part to try to reduce unnecessary calls to expensive (in Alfresco) JCR API methods."
RHQ-1215 - more refactoring for user indicator chart view preferences; 
Processor refactoring
Added tests to ParllelIteratorTest and refactor.
#JC-353 refactoring
Refactoring exomizer
code refactoring
Refactor: move all exceptions to package hector.api.exceptions
Minor refactoring.
"Refactor, encapsulate fields, add javadocs"
Refactor DeleteActionTest to not use mock for ComponentCleanerService
refactor to reuse resizing
Refactor some tests using DbTester
Temporary version : first multi enterprise refactorings
refactoring transaction to work with session ids and manage exchange instances
Refactored SoapInboundHandler into separate SoapHeaderParser in order to make web server multi threaded.
Refactor client into TwilioClient and extend it for subdomains
"Refactoring do templateholder extraindo o objectFactory responsavel por fabricar os objetos baseado no templateholder, refactoring para possibilitar a passagem de objetos owners para o ObjectFactory, para serem usados em innerClasses"
refactor to use interfaces and abstract classes where possible
MONDRIAN reverting change of moving visit iteration from visitee to visitor.  Refactored visitors in NativizeSetFunDef to avoid unneccessary visits.
"agrega manipulacion de modelos cayenne, refactoriza package raiz a matecito"
refactored MockOperation dispatching
minor refactoring
Refactoring
Merged decorator-refactoring branch
"added servlet test, refactored"
#NAME?
Refactor: searchAndDescent->hillClimber. Jeho oprava.
Refactored
"JBRULES-1197 Extends actions support to include other dialects and callback -I'm updating PackageBuilder to be able to handle actions. It's still very messy, but all unit tests are currently passing. So I'm  committing now, before I start on more major refactorings."
"In preparation for refactoring RemoveUsedVars.CallSiteOptimizer, fix RemoveUnusedVars to properly track unused parameters.  In the process improve the support for destructuring, rest and default parameters"
#NAME?
#POULPE-120 refactored ComponentHibernateDao
Private: Refactored TTTClient. Moved lobby specific code to Lobby class.
Refactored RunTestSuiteTaskTest to directly use RunTestSuiteTask instead of Coordinator.
refactoring - introduce generic createComponentDescription() method
agent stop method refactor
Refactored dependencies and Maven
refactor
jira and tim -connector: Refactoring OrderCRUDController and other improvements
Refactoring to place size logic into PDataType.isSizeCompatible.
#NAME?
top left icons in hierarchy and outline view + refactoring 
"refactored to a somewhat sane indentation, also refactored activemq-client into the provisioned bundles..."
#566 - Refactor internals - Initial tidy on OrmQueryDetail and OrmQueryDetailProperties
Refactoring creation of DownloadFileTask into separate method to allow customization.
TrackMate_: major refactoring of the GUI logic
Refactor the code that loads a grade book from a file so that it can also be used for saving a grade book to a file.
Refactor SimpleForm and SimpleBindingForm to support adding multiple components in a row
* Refactor renderers to store all state informations in only one place outside of the renderer class (step needed to make renderers state less  components latter) * XWIKI-2890: Add wiki syntax for Embedded documents
Minor name refactoring and adding documentation for the core classes
Small refactoring of shutdown hook thread.
add testcase & refactor
ACT-60 started refactoring deletion of process instance as separate atomic operations
refactored all traversal aspects out of Pipes and into Gremlin-Core. Pipes now only depends on Junit :).
refactor GTFS
"Issue 130, 129, 112: added ability for terremark to remove its dependencies.  added profile and image objects. refactored ant to include logger"
1. renamed entities to entity 2. Broadcast.Active refactored
Major refactoring of several classes Make Open Ceylon Declaration work when no editor is open
refactoring the metro example and starting the development of the open-street-map example
"Adding HttpConstant.java for holding constants, refactoring, implementing partOpened() method"
Refactor moved LocalSearch to search package.
Refactored every singleton in preparation for Google Guice.
Unit tests refactoring
refactoring for MultiTransformation
"smartsprites: SMARTSPRITES-44: committing the original Ibrahim's patch (with some formatting applied), will commit some refactorings to it soon"
Refactored ttl into an attribute
Refactored to pl.healthinformator.
Refactor PushQueue.scheduleUpdate to be smaller methods
Refactor transformer
First refactoring toward MVP
interest calculation refactoring and testing
refactorings & cleanup
Add test cases to test extracting data with all kinds of filter conditions and refactor DataExtractionTaskTest.
CSPACE-725 - Refactored instance creation methods into a shared utility class. 
Refactored request queue and transaction handling to reduce code duplication Improved error handling for requests Improved MySQL error handling Fixed race condition during connection with MysqlConnection Got Postgresql passing all TCK tests Made some TCK tweaks
"Added an `environmentVariables` configuration option to `BuildMojo`, along with some slight refactoring of `Builder.Main`"
#NAME?
1. Add tests for EntityListenersService 2. Refactor EntityListenersService to do all the work needed. 3. Refactor decorator
Refactor PhaseOptimizer creation to be more DRY.
JBIDE-13938 Fixed and refactored error check
Refactored and cleaned up code to create tables and dispose listeners for various controls.  
Slight refactor for readability
A bit of refactoring and implementation
Refactor the implementation code of customer rate calculation
minor refactor
+ Moved FilteringApplicationEventMulticaster and FilteringApplicationListener to org.springmodules.xt.model.event.filtering package. + Refactored application event collectors (see org.springmodules.xt.model.event.collector package). + Implemented Event Driven POJOs ([MOD-379] issue).
Refactor maven artifacts to separate out all of the ZooKeeper dependent code.
[refactoring] - inversion of control
"- Summary: fix bug145967, 147243(partial): improve chart grouping support - Bugzilla Bug (s) Resolved: 145967, 147243 - Description: refactored chart grouping code - Tests Description  : Manual test - Notes to Build Team:"
#NAME?
Refactor backend interface classes
Minor refactorings to the game engine without breaking tests.
" ItEr34S13CUAsignacionRecursosEspecificosAPlanificacionItEr33S15: Refactored method ""mergeAssignmentsAndResourcesPerDay"" to share common code on base class."
Refactored listing code.
[94217] ITask refactoring
Refactor renaming internal Any method. Fix compile annotation issue.
Major refactor of metadata and HttpURI
#NAME?
refactored evolution
MIFOS-4385: service facade refactoring for check lists
TEIIDDES-1697: Refactor the WorkspaceResourceFinderUtil class
refactor sql parser.
Hibernate ui bot test methods name refactoring and javadoc added
"Changed type of application ID to String, refactored getter name"
Implemented and corrected ConcreteChatService tests Refactored ConcreteChatService to implement ConversationFactory Formatted ConcreteConversationFactory and ConversationFactory
Minor refactorings and primitive type handling.
more refactoring of the migration test
issue #21: refactored grammar document/bundle/namedbundle
CommandFactory refactored: using command builders
Enhance BuildParamDialog and do some refactor
refactored programm for observer-pattern and google guice
Refactoring
"NearbyMethod.getNearbyDistance(O, D) refactor => less plumbing for users (tnx Lukas for suggestion)"
Refactoring in search results Activity.
"refactored StatusChecker into StatusUtil, added assertion methods"
Refactoring and tests
"Refactoring the code, adding multiplayer capabilities"
refactoring
Refactored OrientGraphAsynch to support lazy creation of pool after setting cfg parameters
rsa refactoring 
Refactor [ci skip]
"Implement block work calculations, add a test. Small internal refactoring of BlockChain in preparation for bigger changes."
TURMERIC-1350: Refactor Repository System into core and ui plugins. Update preferences to use IEclispePreferences.
completely refactor Outline + Hierarchy popups
"Refs #2964, #3052: A couple more modal dialogs fixed and it adds default ENTER/ESC key mappings to Import Ontology dialogs. Also refactors table-import-impl so that its CyActivator does not have to get all required OSGI services during initialization (services now gotten from CyServiceRegistrar only when necessary)."
Refactor for more modular dependencies
Refactoring.
Harshit | Refactored EC reporting service.
JBEHAVE-870:  Refactored StoryFinder facade to source paths to be either filesystem directories or jars.
v0.820 initial refactor to support CB #560+
refactor(engine-cdi): rename CdiExecutionListener to CdiEventListener
[added] functionality to choose whether a search term must be found exactly or if a submatch is sufficient [refactored] code to pain identifier and metadata nodes
refactored module provisions to be simpler and more consistent; consolidated provided param handling
refactor
Small refactoring
Refactor. Extend ejbCreate checks
refactoring base test class folders
"[OPENENGSB-502], [OPENEGSB-684] refactored existing maven mojos"
refactoring
Memoizer: Refactor deleteQuietly for all uses
refactor package names
refactoring: sendPassword - inherently belongs to connection
refactoring overall workflow
Monster refactoring Part 1
#NAME?
Initial refactoring to the Feature API.
CSPACE-520: Additional code cleanup and refactoring. Shortcut for returning empty lists.
Code cleanup and refactoring. Moved dp and recursion under paradigm. Tree and stack also cleaned a bit.
"Refactoring id names, adding to/from location columns to drug purchase order"
Refactored solution
"[PAXEXAM-772] refactored TestNG driver to invoke classes, not methods"
Issue 191: started cookbook support; refactored multipart form code
major refactoring to make control recordable
DDF-2521: Refactored implementations of SaxEventHandler
Refactored linkd to have more Spring initialization. Converted LinkdEventProcessor to use annotation-based event listener declarations. Moved several functions out of LinkdConfigManager and into Linkd to separate the configuration model from the knowedgebase of linked nodes that linkd maintains.
Refactor a bit unit test for more clarity
Fixed security API and added docType to differentiate attachment from linked docs. Also refactored package names.
Refactor Membershipke to Membership
Heavy refactoring: Moved UI things to UI packages
More refactoring of module framework:
refactor code
Refactoring to use Gradle with a multi-project build.
First commit of 0.9.0.  Refactored much of the assembler and assembley enhancement wrappers to use the new conan interfaces.
passage de la compilation pendant refactoring
@refactor: Questions resource
Slight refactor of ControlObject + ItemSubset valn
refactor
refactoring config names to help my feable brain.
initial refactor of new more categorized sender api
refactored internal code and tests to use FunctionalReflection
refactor vm
(2) DefaultAsyncJobExecutor refactoring.
Completely refactored the namespace to contain the domain of controlling.
Refactored WorkstationBeanResolver and InstrumentBeanResolver (pulled up some common code).
DataServerReaderHandler tests refactoring
Minor refactoring to XML reading APIs
"Added a check client-side so that server store ID matches client store ID, including refactorings to make that happen."
Refactor handling of test mojos
ISIS-214: final major bit of the Oid refactoring
Refactoring of CascadeEval to remove extra unnecessary loops; minor refactoring elsewhere.
BREAKAGES: API Refactor so that mChatSuite may be fully supported by Vault. Altered Commands to suite new API (May add more set methods in the future but it will remain like this for a while). Added correct command values to plugin.yml. Updated DevilStats.
Refactored
Refactoring: Created LessonInstance Entity.
Some amount of refactoring and incorporation of feedback from AWS folks.  Ugh.  Wish this was moving faster.
refactor and add mechanical linear vc patch test
Fixed issue 156.  Added support for serializing an object field (or array elements) as per its actual type. Refactored inheritance related tests into its own test class. Added regression tests for issue 156.
"Patch by Russell Gold that refactors CodeSet logic, adding support for UCS-2.  Bug #305."
"refactor the game over method,extract normal round finished method"
refactor metric report
Refactored BindingPathElement/BindingFactory model: the factory is now responsible for building elements
refactoring to provide access to BundleContext if we support installing dependencies; and ensuring that we don't exclude 'provided' dependencies as we will need to use them if we install missing dependencies
Refactored: renamed SuiteEventSerializer to IpcProtocol
"Refactoring CheckSshCommand, OvsFetchInterfaceCommand and SecurityGroupRulesCommand to cope with new design.    - Unit Tests added"
"- new parse tree graph view in interpreter and debugger - refactored the parse tree MVC to be the same for both the interpreter and debugger - can display now the ""Tokens"" articifial rule decision DFA"
refactored example classes and QuickChart
Continuing refactoring (almost done) to separate db and bean classes into arachadmin package
Refactored slave impl to allow for future non readable slave.
Refactor ES framework
refactor testcase
[REFACTOR] Extracted a helper method in the test class
Big refactor to use simpler terms and have better doco.
Big refactoring.
fix(engine): refactor conditional migration tests
refactored ui plugin to correct namespace
more refactoring with the debugger (still alpha version!)
#1195 refactored code to promote sharing and remove copying bytecode around
Bug 280068: Rename/Refactor package breaks plugin.xml when pressing Back on Preview
refactored the poms to use fuse.osgi properties
refactor initialize observer function.
Refactored servlet(extract write-read file)
Big refactoring.
Some minor refactoring
Refactor ChangeDetailService to use injected database handle
Refactoring from DistanceCalculator class for giving the ability to calculate distance over latitude and longitude values. Javadoc added.
"Do the lily.mq=false check at the start of processMessage, refactor code into different methods."
More minor refactoring.
Refactoring packages names
Refactor test InvocationHandler utilities.
Rename laggard test that missed refactoring
Refactor tests and add additional tests for Genres
"reporting:  First pass of fairly large refactor of dataset package, including the addition of DataSetRow, moving a large quantity of logic out of the DataSet classes and into the DataSetEvaluators, and removing subsequently unnecessary DataSet implementations."
jdbc refactorings
refactoring + fixed spelling
removed obsolete editor popup menu action; refactored common action stuff into abstract base class; refs #280
Simplified and refactored configuration
#970 Refactorings in Listener.updateAvailableNodes() NormalizationParserBindingSource is moved from AnalyzerPanel to GroovyEditor
Refactored persistence of model data/instances
[refactoring] Resolve target files only when building the target
a bit more refactoring
"refactor PageObject 1. pass PageObjectTestCase as delegate when constructing PageObject 2. move some function from AuraUITesintUtil back to WebDriverTestCase, as a result of #1 3. PageObject now open() by defDescriptor 4. TestContext doesn't need to hold instance of web-driver because of #1 also @rev gtorres@ @rev tbliss@ @W-2418018@"
Refactored core API to remove conceptual dependency on Geonames
Added base interfaces for graph theory module. Refactored Hyperassociative Map to be a subpackage of drawing.
- Supported push configuration to all the connected clients if the cluster configuration changes at run-time - Refactored replication package: now it's all under the distributed package
Refactor and clean up BackgroundBitmapDisplayer
RF-12900: refactored org.richfaces.el and org.richfaces.event packages
Big refactoring of test delegate helpers.
refactor/renamings
"Some more refactoring, added concept of an export and import context."
Fix gradle-tests after API refactoring
"refactoring, moved workflow registration to taskbox, renamed getProcessId"
[json-lib] refactor element assignment on JSONArray/JSONObject
[Misc] Continue moving Admin App tests to platform by moving UserProfileTest * Needed to refactor 3 other tests that were using user profile PO and not really needing them * Had to move AttachmentSelector.xml from enterprise to platform too in a new module * Moved user profile PO which were wrongly located in platform-administration * Added missing dependencies * Moved ChangePasswordPage PO which was wrongly in platform-test * Added new createUser API in TestUtils to easily create users with passed xobject properties
refactoring most of the converter classes
Refactor ICPathEntry to IPathEntry. And use a manager PathEntryManager to deal with the IPathEntries
Some more refactoring on the classes surrounding libraries and special values.  Implemented the keyword mapping strategy now specified in the Ripple wiki.
refactor(duration report): extract reportType from abstract class
"fixed new API stub generation: completely forgot about member annotations! Some refactoring later, model and code generator are able to handle them."
Some refactoring and reorganisation of loaders.
Refactored some of the logic endpoints
ISIS-232: more refactoring of the DOM for entity actions by collections
"Issue 830: refactored Org, Network, Task, User apis to support URN; removed 'id' from Reference type"
"Fix for JERSEY-1342: Introduce proxiable request scope   - AllInjectablesTest migrated from Jersey 1 to JaxRsInjectablesTest       to test request scoped JAX-RS injectables   - refactored Jersey to use HK2 binding builders,        removed original Jersey builders   - Introduced JAX-RS specific proxiable injectee wrappers        that hold request scoped values        for Request, HttpHeaders, SecurityContext and UriInfo   - migrated test list cleanup"
ISIS-165: minor refactoring (no change in functionality)
Refactored unsat solver.
refactored code to allow user to specify the values of the predictive model parameters that are not optimized by PredictiveModelOptimizer
* Fixed backup loss issue during graceful shutdown. * Improved replica sync retry process. * Refactored partitioning code.
"DROOLS-488 ""Pluggable and Encapsulated Knowledge Types"" -Refactored Undecided to Decided."
Null-handling refactoring - Remove unnecessary usages of null. - Use Optional instead of null values where appropriate. - Add comments to explain nulls with special meanings. - Annotate fields and parameters that can be null with @CheckForNull. - Validate constructor arguments with Preconditions.checkNotNull.
overall refactoring and bug corrections over the SALT package
-MOJO-1061: option to specify directly to run SCM action -Refactor test to use plexus's getBasedir() -Add option where to pickup buildNumber.properties
fix #283 don't propose refactorings for decs outside project refactor how inter-project navigation is resolved  Conflicts:
#NAME?
More refactoring of various I/O classes.
"CSPACE-172 Refactoring for hiding relevant parts of services integration behind storage API. More unit tests. Coverage 72%, docs starting to get poor."
refactored / improved error reporting for dynamic errors
"support hbase/hive/impala, refactor service dependency issues"
misc tidying and refactoring
refactoring on test to make it more readable
Start of UUID refactor
"Refactor backends to use PermissionData architecture, use Lists instead of arrays in a lot of places"
"refactored, clean up API & fixed conccurency issue in the EventProcessor"
"refactor parm package, simplify it"
Finishing off refactoring smile fitting. The tests are extremely incomplete; the fitting doesn't work all that well (especially for Heston)
Minor refactorings.
Refactored TxState a little to be easier to work with and extend
Refactor reading and writing heads in Repository
Added Signavio connector again after refactoring of API (not yet finished completly)
refactored to Guice dependencies
[#3] Improved testing [#51] Done some refactoring
Refactoring for #31 part 2: - Move criteria classes into dedicated packages. Visibilities can now be changed to public.
refactor and add isAppScriptRequest plugin api call
Code refactoring.
PortalEventStore: Just refactoring and debug statements
XWIKI-11507 : Integrate the ratings system from xwiki-contrib * cleanup and refactoring of the UI to fix dependencies logic
refactoring checksum verification to support self-healing and reporting on better
refactor tests
activejdbc-282 #282 Refactoring with appendOrderBy()
api_refactor: refactor tag apis
"refactoring - renamed QueryBuilder to QueryLoader, as QueryBuilder name may be used for other purposes (step 2 ... readded with deprecation)"
"Release 0.8: 	- Added JPlasma 1.0. 	- New, multithreaded versions of dense Cholesky and QR decompositions (JPlasma is used). 	- Added CSparseJ 1.0. 	- Added sparse Cholesky, LU and QR decompositions (CSparseJ is used). 	- Added SparseDoubleAlgebra and SparseFloatAlgebra. 	- Added 2D and 3D dense floating point matrices with elements stored in multidimensional arrays (to avoid 2^31 size limitation). 	- Removed JCublas. 	- Removed corejava (replaced by String.format()). 	- Fixed few bugs in MRNSD and CGLS.  	- Some refactoring and many cosmetic changes."
REFACTOR: Moving evolution configuration to standalone class
Minor dashboard refactor.
Refactored JUnit tests.
"Skip signin, work on menu feed Refactoring"
"SAK-1309 Refactored JSF backing beans for add/edit/remove assignments to use domain objects directly, rather than transferring their data to UI-specific objects. This is not a bug fix, and should not go into 2.0.1."
Refactoring: splitting of servlets
Bug fixes: ACT-786 and ACT-781 + refactoring of GUI for allowing tree based left pane
Refactor twitter crawler module to use convention names
Refactoring towards displaying easyb results as nodes in a tree view
First step of refactoring email fetching code to abstract out what to do with the attachments.
JBRULES-2642 Getting tests working for new updated parser. -Big Refactor of JavaConsequenceBuilder rewrites to be mvel 'safe'
various write-behind refactorings
Refactoring
refactor into identity interfaces and simple (standalone) impls
Refactored SOAP fault detail handling
Combinatorics refactoring finished.
Implemented skip of creating of next URL if no further features exist and did some refactorings.
"Refactored common into two seperate projects for UI and non-UI, added quickfix to put mech jars in the libs folder"
Refactored the Processor and minor parts of the validator to fix an issue found when implementing Translations. Other minor fixes/additions. Added some Parser Tests
refactored out a protected stopAllConnectors() so it can be overriden in derived classes.
Minor refactoring allowing to pass model adaptor from top level API
minor renamimg refactorization
[WFLY-5689] Refactor the EJB subsystem to use individual resources for the security domain mappings
Starting work on user management. Refactored classes that should have been common to a different package.
"Refactor core plugin, add extensions, improve API in general"
a bit more refactoring/cleanup
Context menu page fragment refactoring
major refactoring of the Map APIs
refactor: move tests in restx-factory-testing
Refactored: renamed MessageLogger to MessageListener
Almanach refactoring: - cleaning UI and settings stuffs - modifying triggers of workflow in order to get a function CDI environment with implementations of ExternalActionImpl interface
"Refactorings: Creation of PDFs is now no longer coupled to views, but to the class type of ReportDto."
continue refactoring - rewrite tests for group transfers as mostly unit and some integration tests
refactoring
#JC-370 Uniqueness check refactorings
"XWIKI-12022: Add a Reference URL Scheme * Non working implementation since it's currently not possible to make it work as the web.xml mappins are done for the ""standard"" URL Scheme + the fact that the Error Handler is also currently hardcoded to use the ""standard"" URL Scheme (needs to be replaced by a Servlet). * Even though it's not working, it's still useful to have it committed since it allows us to make sure the interfaces allow to contribute new schemes. * Big refactoring to make it easier/possible to contribute new URL Schemes."
Refactor corresponding classes.
refactor repomdgenerator to use filestorageservice
"lots of refactoring, syncing now duplicates data on conflict, some potential problem remain with updates done for syncing triggering sync loop"
"Total refactor of the plugin, breaking everything down into nice clean Mojos, adding functionality, cleaning, etc."
- adding some javadoc - refactoring bits around a little so that users don't have to use the classes in .internal directly.
Refactored to facilitate multiple window feature
Refactored WFS/OWS capabilities adapter hierarchy.
"Refactoring: changing class names, adding service interface Implementation: added Dao and Service factories"
"Refactored rest API and remote service API, so as to allow non-rest usage of IRemoteCallable and IRemoteCallableRequestType"
"Refactored Artifact.ID, now we have 'connectorId', 'originalNodeId', 'currentPath' and 'globalUniqueId' Added ID for repositoryConnectorConfigurations Fixed bug in Signavio Connector to let it fail in log level FINE Added missing httpclient jars to web-app in demo setup (caused by new restlet version)"
"Refactor, creating a saveRawXmlPart method which takes an InputStream arg"
Small refactors. Attempting to pull non Tomcat-specific code into a common module.
Refactor Proxies and builders
"o Adding support for CLASSES in pkg and %doc and %config for RPMs. o Reworked some concepts   id               => classifier   name             => id   packageName      => name   shortDescription is gone   description      => description   It is obvious that the dpkg and rpm utils model the Maven model, not their native parts as they should. Definitely more refactoring todo there."
Host Power-Management Refactor (#977674)
SOC-1248 | Refactor SpaceStorage
"form refactoring started, image servlet refactoring started but not working"
Refactoring to have properties on related sensors.
refactor-move
refactor StatFilter buildSlowParameters
Refactored AFCalc to remove unecessary capability limits allowing to deal with mixed ploidies and max-alt-allele number changes dynamically.
refactor sql format api
"UI refactor - full screen, localization"
Refactoring api to `vk_api` package
"[TACHYON-590] Refactor the utility functions resetTachyonFileHierarchy and resetLocalFileHierarchy and make them static, so that they can be used in TFsShellTest"
Websocket support refactorings
Refactored module setup.
Refactored usage of object mappers
Refactored User Actions Panel to Actions Panel
RF-12900: refactored iteration components to subpackages under ui.iteration
"-JBRULES-720 Clips Parser -Refactored clips to its own module, drools-clips"
Refactoring of authentication mechanism
refs #358 - `Reminder` refactored
Refactored: moved field handling from UpgradeOrderDecider to UpgraderInvoker
"refactor search level members into new query resource, fix properties issue with data types of objects"
Refactored package structure for a clear separation between GData operations and Google Plus operations.
Refactor code
some refactor
Begin 1.1 refactor; new queueless ThreadPool; many cleanups to the executor impls and new helper methods
ISIS-1613: refactors the way that errors are caught and handled
Refactoring private trades into AccountService. Tidied up HttpUtils to use template methods throughout and updated appropriate ExchangeService implementors as required.
Refactor option mapping helpers in configuration utilities
"Refactored user handling code to improve error visibility, and handling consistency. Prevented poorly reported null pointer when data is harvested."
JNAerator: refactoring of some TypeConversion code (BridJ vs. JNA targets split)
"cleaned up comparison filter pipe -- it is easier to use. probably needs some more refactoring, but some thought will be required to figure out the optimal solution. Updated sample filter pipe with finals. Updated javadocs. Added two new documentation images."
88020 NPE while moving empty CU [5.0] [refactoring] [move]
Refactored package name for Ajax components to er.prototaculous
JPED-cli refactoring. And Gene wise Inheritance variantwise inheritance filter changes
Refactoring NSClient - JUnit Tests
"Refactoring large methods into smaller ones, fixed formatting (indentation). No functional changes"
Refactor to pull logging into BPTreePage and use getId() everywhere.
EST-714: refactoring injectXxx and renaming repositories on the way
Refactoring and adding some javadocs.
Refactored TimeKeeper classes into collections-api. Added some constructor validation to the sampler classes.
"Cleanup code, small refactorings with no impcat beside maintenability"
"Refactoring relative of Source Metadata and the Conclusion model, largely a result of discussions on #123 and #144 (and some of #135)."
[snipmatch] refactoring to avoid exporting internal package
refactoring of HarvestDocumentation and MetadataFileWriter. MetadataFileWriter-code moved from H1 and H3 controller package to harvester-core
Adjusting some stuffs around Almanach refactoring.
XLCLOUD-226 virtual cluster wizard refactoring
refactoring
Commits work in progress on refactorying the call-related user interface for the purposes of audio and video telephony conferencing over single or multiple protocols and Jitsi VideoBridge.
182346: [refactoring] Refactoring could flag affected binaries which are impacted: - added Inline Method
BroadleafCheckoutController refactor.  ExtensionManager created to add additional model variables.  ExtensionManager created to add PaymentInfos to order and payments map.  Default extension handlers created for credit card and COD.
More work on refactoring type-handling
[RESTEASY-1460] Refactoring
Further wrapper implementation and refactor
DATACMNS-461 - Refactorings in auditing configuration support.
Refactoring to collapse directory structure.
test refactoring
Minor code refactoring only.
Minor: refactored ODocument to move part of logic to ODocumentHelper
Refactored so we can create entities from the DAO.
SQL backend refactoring. issue #363
admin: Refactor tab completion
1. testng instead of junit 2. security methods added 3. refactoring
Initial phase to refactor and clean up test harness and fixture. Switching to using app name prefixes to avoid URL taken/host taken errors when deploying the same app with the same app name in each test case.
Refactored application using CDI / Java EE 7 approaches; Deleted obsolete code;
refactoring api structure
MNGECLIPSE-2658 rename refactoring
MiniMaven: refactor downloading artifacts
Major example refactoring
AbstractTest and WebsiteTest refactored to AbstractConnectivity and WebsiteConnectivity.
Refactored overridable method for extension support. (v1 TK-08474)
"Refactored browse patch. Improves performance / reduces db overhead by only have one table for all 'item' browses (with columns for different sorting options). All sorting options are available on *all* 'item' browses - at the top level, changing a ie. from title to issue date, will make all corresponding UI hints follow. Also, maintains a separate table of all withdrawn items. This is currently not exposed in the UI, but can be easily (it's a current feature request)."
Refactored message channel sender and receiver with new endpoints
o Refactored profile activators to use problem collector
"integrated review comments; renamed event classes, minor other refactorings"
[MIFOS-3973]Loan BO refactoring
"#4646 - refactoring: extracted method, removed if"
Refactor inheritance to composition.
"* Cleaned AlgorithmUtilities. * Refactored implodeList, renaming it to implodeItems and changing its signature to accept a Collection instead of List (making it more generic).  Subsequently added implodeList back, wrapping implodeItems, to make depedencies happy. * Added org.cishell.utilities.mutateParameter.MetaAttributeDefinition (container for AD type (required, optional) and AD itself). * Added ListUtilities. * Made DefaultDictionary Java 1.5 (K, V). * Updated reference to implodeList in various places."
More changes for refactoring
"ARQGRA-207: Page Fragments: support initialization of Page Fragments which are without @Root field, Exceptions for handling more than one root refactored, unit tests for checcking that feature added, AbstractPageFragmentStub moved to tests"
Documentation and refactoring.
"Split servlet API/Impl, refactored binding APIs"
validation refactoring
Refactored ControlMessageValidationContext and attendants
refactored namespaces to org.pdtextensions
"ROO-2745: Post 1.2.0.M1 code refactor and clean up - fixed typo in method name ""PhysicalTypeMetadata#getItdCanoncialPath"""
chor(engine): refactor batch process deletion not to log user operatons
Refactored the class RunProgressBar.
minor refactor so that ObjectHelper.equal() can be used more easily by static imports without clashing with Object.equals()
refactored application skeleton
refactored to use JPA / hibernate Step 1
#NAME?
some refactorings
refactoring the object handler stuff to make it more understandable
refactored tests for SampleEncryptionBoxes added TrackEncryptionBoxes (Piff uuid box & iso specified 'tenc')
Refactor ejb to application and specific api artifacts
ActionDefinition configuration refactoring:  - Created ActionDefinitionReader that loads ActionDefinitions from an xml file using XStream  - ActionDefinitionConfiguration now uses the new ActionDefinitionReader  - Configured top-level action definitions which is used for all undefined ActionDefinition  - Updated UI for new ActionDefinition structure.
"PLINK-202 add partition management method signatures, refactor SecurityContext"
SONAR-4831 Refactored technical debt
Refactor code to prepare for different queue systems
Refactor data baker to allom more implementations if that becomes interesting
FORGE-2590 refactored the ArchetypeSelectionWizardStepSupport -> Abstract* and reformatted with the Forge code style
Refactor waiting
" - fixed major filter bug, refactoring debug info"
Refactoring to more general GenClassCompiler from ParserCompiler...
"LBCLASSIC-54  	  - Heavy refactoring of TurboFilters    TurboFilters are now collected in a CopyOnWriteArrayList which is   ensures safe access even if the turbo filter list is modified during   the lifetime of the application      Added test cases to ensure that performance does not degrade in an   uncontrolled fashion      More cleaning up to follow"
review comments refactoring
refactor
refactored SocketServer so that it extends ReceiverBase
refactored reward manager
"Small refactor of calculations * Calculations are automatically registered by CalculationManager (was CalculationProvider) * Calculations now always fetched by class rather than name * Alert calculations must extend BaseAlertCalculation and no longer need to be tagged as ""alert"""
major refactoring - moved functionality from board class intro minesweeper class and added console runner for main
[Bug #645] Refactor ResourcesSearchModel
Refactored BeanUtil.
Further refactored status and state
refactoring
Updated to Context API; more refactoring; code note completely tested yet.
REFACTOR: Moved to multi-module maven
refactoring statement support
new presentation and refactoring of administrative office documents
"add support for persisting to object store, including CLI --persistenceLocation taking object store syntax. refactors file-based support to use a common PersistenceObjectStore interface backed by either filesystem or jclouds blobstore (only tested w softlayer so far)."
RF-12900: refactored output components to subpackages under ui.output and ui.toggle
Refactored the Design checks
[5056] Refactor components of omnivore/omnivore-direct for shared base
refactored CexIOBalanceInfo so that it supports any currency
Bug 209566 [useradmin] refactor to have internal in namespace
  * First maven central release.   * Refactored to provide a common jar used for directory handler builds.   * Use post-build plugin to deploy in server.
Refactored: combined TestClassRunner and TestClassState
"LOG4J2-1343 refactored RandomAccessFileManager to reuse the garbage-free Layout mechanism defined in the superclass, simplified logic when bytes to write exceed buffer size"
refactor API
SLICE-56 Parsing of URLs in LinkBuilderFactory - refactor
refactored packaged to org.javastack and update to v0.0.2-SNAPSHOT
refactor code
Refactored the compression interface per sample in ReduceReadsa
Refactor Bytecode.If #502
#NAME?
* Splitting up Constraint into DeclarativeConstraint and SimpleConstraint. * Adding ArchivaDAO.query(SimpleConstraint). * Adding UniqueGroupIdConstraint. * Adding UniqueArtifactId Constraint. * Adding UniqueVersionConstraint. * Adding RepositoryBrowsing component. * Refactoring webapp's BrowseAction groupId filtering into GroupIdFilter class. * Refactoring BrowseAction to utilize new RepositoryBrowsing component.
Major refactoring to remove duplicate code detected by Simian. Just demonstrates the power of the tools for find code that needs refactoring.
Changes to allow Transitions to be assigned to CompositeStates. Includes major refactoring to how Transitions are defined.  Transitions no longer store a reference to where they are transitioning from since a Transition may now be assigned to an entire CompositeState.
Reader and Writer refactored in modules
refactor sender from enum to inherit
#NAME?
Refactor LoginDialog to remove Bindable (B-07547)
Refactoring: more specific name for OChainedIndexProxy (old: OIndexProxy)
Create customer JSON-method refactored. Moved MyController functions to own controller ExtJs-classes.
small refactorings and prepare to cache stuff
refactor Task to a base class with Executor based 'SyncTask' as a child
"Core: refactor storage layer, pt.10 (#391)."
Refactors Metric subqueries for a significant performance improvement
Refactor codec.
refactored into 2 separate implementations backed by Prefrences and PreferencesLookupDeletegate
refactored the creation of the HttpUrlConnection objects to a factory
Small refactoring
some refactoring and cleanup
refactor factories
"refactoring, introduce a configuration object"
#NAME?
Package structure refactoring.
"merge class moved to API, refactored clustering code"
"Templates NPE, Refactorings"
#NAME?
RESTEASY-233 RESTEASY-210 Multipart provider refactored to use apache-mime4j for parsing. Doing so will enable resteasy to store large requests on disk instead in memory. Added support to process multipart/related input/output messages. Fixed a typo that could cause infinitive recursive loop in o.j.r.util.CaseInsensitiveMap. Modified war-tests/context-test/src/main/webapp/WEB-INF/web.xml so it passes validation with http://java.sun.com/dtd/web-app_2_3.dtd .
Refactored: reordered tests
Major refactoring on message sender/receiver and endpoints
cells: Refactor cell tunnel code and clean up CellMessage format
refactoring for new new
Refactoring of decompilers - each decompiled .class file should be connected with .java file
Refactor name changes
"refactor, restructure, and rename files and packages. Added dbnsfp annotator"
XWIKI-8744: Introduce per wiki distribution status * fic various bug introduced by previous refactoring
#NAME?
"Minor Changes: added a new option in the 2nd group of recipients in GEP portal, minor visual changes in the Alumni portal and some code refactoring"
Refactoring to have a domain package.
Refactoring of test handlers in the core/codegen test execution system
refactoring
code refactoring
* refactor code
HADOOP-7238. Refactor the cat and text commands to conform to new FsCommand class.  Contributed by Daryn Sharp
"Refactoring: Created factory classes for all of the analyzers so that all use of reflection could be removed from AnalyzerGuru. This gives better compile-time error checking of the code, and it also makes it easier to navigate the source with tools like ""Find Usages"" in NetBeans."
OSGi refactored new resource types into new org.osgi.framework.resource package.
painter refactoring
refactoring in preparation for more comprehensive tests
core: OvfWriter refactoring
- update to pom dependency 1.0.0-Beta03 - update to chromattic 1.0.0-beta8 - refactored configuration for unit tests - refactored mop node types to remove the customization types implementations - moved the customization type code in the unit test package as the portal redefines them
dal: Refactor VmStatic and VmTemplate Daos
"Added DB entities, tables and DAO methods for People links and comments,  Added test case for all DAO methods Refactored Entity names to have a common naming schema added first hacky version of Signavio DIFF POC"
test code refactoring
Refactoring of the code.
Refactor DefaultSubjectProvider to make it easier to subclass bits of functionality
Minor Refactor
Refactoring of type/method traversal for coverage analysis.
#237 - Refactor the admin main actions extension listener into the extension manager paradigm
o Did some refactoring: moving utility methods to EclipseUtils so there's no   confusion as to which project is used.
Refactored QProxy to top level
Refactoring execute-fixtures-phase module
refactor model service implementation
Refactored WormholeXTremeCommand out of existence. Now there is a CommandUtilities class in the com.wormhole_xtreme.command package. It is package protected as nothing outside of the package should be using it.
Refactor decorators to interface based subpackages
major refactor for initial TopologyProvider api
refactor common operation scheduling code into a util method
Refactoring of the Spring AMQP support and added some ClusterSelector instances
Refactoring and tests for #5120 (#5150)
BUG 4348: Symbol refactoring
Tx part code refactoring: SubmitCommonSbb & TxSmpp
Refactor code and provide API for Server/ClientRequestInfo. Add doc
refactor(engineCdi): Renaming packages and classes
"refactor, and add basic if() support (no else, or else if)"
Refactor models and maven modules to break cycles
Refactored to use MessageBodyWriter instead of RestReflection
Refactoring.
Refactored ApplicationInitializer.init & DataSetUpgradeUtil code bases to use Spring contexts in a proper way
"Debugging actions update, debugging packages refactoring, added ruby search open action"
Refactoring to the test cases. Removed loadOrCreate methods.
"- [#3291] move code from core module to web and batch modules - core-to-web module class refactoring only; core-to-batch not yet done - temporarily disabled CopyFreezeThawReport, due to its dependency on web module class (LibrarySearchResults) - ImageProvider classes have regressed in their ability to detect missing images, since we had to remove their usage of ImageServlets, which are now in the web module (this dependency was not appropriate, but we need to figure out a proper solution still)"
"refactoring tests, add TestUtil class for common methods; add tests for java logging"
Refactored JavaScript tests so that now they are run for both jquery and dojo.
continued refactoring
resthub-oauth2 : Some refactoring
Disabled async tag updates. Smaller refactorings
Refactorings and Javadoc documentation to Utils.
Changes to fix problems introduced by previous refactorings.
Small refactoring
"More refactoring, renaming"
major refactoring to introduced TweetPackage (preparing real queue);; removed user blacklisting;; introduced offline page via app.stage=offline
"Refactor parseNum() name, and check all other number parsers return a default"
More refactorings
Refactor clear and fix code Forum
Refactor source code to use personal timesheet instead of monthly timesheet
Package renames + refactoring
OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.
    * Refactored block physics a bit and added beginning item physics
VCPENetworkManager small refactor: create service getters and use them in this class.
Refactor pmd.properties into pmd.lang.rule.properties.
SB-128: Refactor the org.carlspring.strongbox.jaas.* into org.carlspring.strongbox.security.jaas.*
"Some more refactoring, to get rid of old API references"
#JC-100. Major refactoring SignInTest. Added test fo Ru locale. Deleted duplicate dependency from pom.xml.
Done a little refactoring
tiny refactoring of constants
Refactor of the WS-Security systests - part I
refactored Activity and added activity controller and jsp
[DROOLS-151] Refactor the TypeDeclarationBuilder
"updated prompt character, javadocs, and refactored scaffold API"
"#202 Refactor integration tests to use Maven Verifier, different JDKs using toolchains, and the Eclipse JDT compiler."
Refactoring: inline method in UISessionImpl
A few openwire refactors/enhancments  - The old/default marshaling style is now refered to tight encoding   - We now support a loose encoding style which should be less CPU intensive (it's only a 1 pass algorithim)  - prefixing the packet size is now optional (needs more testing)  - Updated the c client so that it works once again.
Refactoring to let editors edit elements that are not in the geocognition (this is layers and alphanumeric sources)
Refactored: making the network layer generic
refactor itself first; process all in properties
refactoring: moved Pirol API tools for features and feature collection and so on to org.openjump.core.apiTools as they seem to be of general use
little refactor
"[MRM-1278] Wrong repository displayed in Archiva browse o added selenium test that uploads SNAPSHOT artifacts in releases and snapshots repositories and checks artifact info page for correct artifact information o refactored upload artifact methos in AbstractManagementTest, moved them over to AbstractArchivaTest to avoid repetition in other tests that uses it"
[KARAF-4959] Small refactorings
Core: refactor composite labeling code (#791).
DROOLS-7 Phreak -Refactor for node separation -Separation of RuleNetworkEvaluatorActivation
refactorings
Added code and tests to implement getCurrentMission operation. Refactored removeTeamFromMission operation - moved from MissionEao to TeamEao.
[PLAT-1296] Refactor time-series master; Rename
[PLAT-1515] Refactored LiveResultsService and WebView to remove Cometd
TEZ-410. Refactor EdgeProperties to be more clear
[JBIDE-7035] Refactored bundle filter to generic collection filter
Refactor duplicate code into a method.
small refactorings
Refactor to have the vert.x metrics options in a MetricsOptions data object
major refactor of base projects and add of new activiti projects
"Fix #5605 When importing TypeTest as a user, I get circular dependency errors Refactor entity population to work around a circular dependency when introducing molgenis-security -> molgenis-file Move language entity population to i18n populator (required by all applications)"
Refactoring
"[MARKET-229] - Updated feature file to deploy secondary dependencies - Updated blueprint file to setup marketplace services - Refactored common BA server and PDI code from PluginService into abstract class BasePluginService. This paves the road to have a common code base to both BA and PDI marketplace plugins. - Created KettlePluginService and started ""importing"" code from current PDI marketplace - Telemetry disabled for PDI for the meantime - BA server PluginService disabled for the meantime"
bit of refactoring
refactoring and addition of convenience methods related to EventPlots
Refactor and improve the LocationAwareSnmpClient
"Refactor List renderer, Add Sql function tooltip, Add sql list drag"
Summary: Code refactoring for extra work.(T61708)      Bugzilla Bug(s) Resolved:      Description: Code refactoring for extra work.(T61708)
tests und refactorings
Refactored MultiRosterView.joinRoom for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=190653
Refactored *Notifiable to *Listener
[releng] refactored plug-in structure; merged several smaller plug-ins into common bundles. Removed experimental classes and features from repository.
refactored a method
JBRULES-218: refactoring Reteoo Builder
#595 - Refactor - persistence context root type handling - contextGet() and contextRef()
AST visitor refactoring
Checking for compilation errors before allowing refactoring in Acceleo modules
"Refactored handling of component rendering -> introduced common renderer 'ClientStubRenderer', this allows development of generic components"
"refactoring of QueryOperationsModule into three layers: QueryOperationsWebService (web access layer), QueryOperationsModule (business layer), QueryOperationsBackend (persistence layer)"
refactor(filter): only work with query objects in filters
"refactor tests, build out new graph code"
refactored PersonComparatorByName to PersonByNameComparator
refactored code out of moduleZoom to improve readability
Lots of refactoring
refactoring GeneralProductsService and its implementation
" Refactored client listeners so that responses can be decoded with correct decoders. Removed unused two classes ResponseStream, ResponseHandler. ClientEventInvocation extracted from ClientInvocation and ClientEventFuture extracted from ClientInvocationFuture so that each class focused on specific responsibility."
refactor(channel): Merges touchTransport/Payload into touch.
Creation of social user; refactoring; corrected test implicit token retrieval; check admin accounts.
Refactored indexers with interfaces
"Potential fix for GROOVY-1355 Long list length Also, refactored formatting constants."
"Code refactoring: removing of ""old SQL database style"" database access that is not used and obsolete"
OGM-170 Refactor sessionfactory close logic in test to always drop database
misc. refactoring
[MSC-21] API refactoring draft
"Major refactoring of the serialization and upcasting processes. Upcasters now use explicit ""IntermediateRepresentation"" objects. The data type of these representations can be different for different upcasters, with automatic conversion between them."
refactoring: moved SharedObjectPersistence to org.red5.server
"+deferred conditional block feature, +refactoring"
#NAME?
Refactored Conversation to use matches method in UserName and renamed finalize methods per code review. Checking for null participant prior to delivering message. Refactored RosterAddedController to call new finalizeRegisterParticipant method. Refactored SockJsHandler to call new finalizeRemoveParticipant method.
name/package refactorings
* Refactored indexes generation that was in the abstract CodeGenerator and moved them to the IndexesCodeGenerator.
More refactoring.
Refactoring...
Refactored the way the OS initialization occurs to a more OSGi-like way.
Refactor to use xmpp over rumors. Modify XMPPUserFactory to xmpp model.
Refactoring if JAXB readers/writers in preparation to support JAXBElement<T>
Refactored and set up embedded Wayback
refs #256 - HH refactored
refactor for bug 207169---constructor of parent classes are ignored
refactoring: introduced abstract methods
refactored code.
GTNPORTAL-1091: Refactor rotten Java code
Refactored IdManager
refactored command structure to store commands and individual state commands
Issue 325: massive refactor in order to stop serializing native async http client requests
Bug 347712 - Use shared AST in ExtractLocalVariableRefactoring.
Fixing contextual injection type lookup with newly added getComponentType. Simple refactoring on IntrospectionTypeInfoFactoryImpl.
further refactored stop conditions
Services refactored
refactored builder modules to improve analysis speedup; added draft of classpath analyser
SCHEMA-526. Refactor TestingHBaseFactory to properly delegate to DefaultHBaseFactory
refactor Step4 and SimulationSubjectPropery
Refactoring of configuration
"Major SpatialPrefixGrid Refactor 2: Recursive getCells(shape,levels,inclParents):List<Cell> impl replaces abstract getCells(shape).  getMaxLevelForPrecision(shape,pct):int is called to determine what grid level is needed before calling getCells().  Quad grid no longer upper/lowercases, nor append '+', '*', nor uses min/max resolution."
MAHOUT-251: Generalized and refactored Dirichlet models and model distributions to  remove 2-d and dense vector assumptions by introducing a new abstract  VectorModelDistribution to provide a modelProtootype and size to the distributions for  creating prior models of arbitrary vector size and flavor.
[DS-739] Initial refactorings to support better perfomance.
Transformations refactored
Refactor offer service to better handle non-combinable offer conditions
added embedded  container container automaticaly create when in a CDI environment (itegrated via deployer embedded (decouple it)) refactory of weld classes in zcontainer-impl Whitelist and Blacklist classes to chose from for bootload
Refactoring a bit
refactor code package
[ymeng] refactor
"Refactored PostMessageReceiver to an extension, use GWT event handling"
Refactored OWS metadata model for OWS Common 2.0 compatibility.
Test refactoring: move not-failing-anymore tests as part of regular suite
first compiling code dump after refactor
refactor
Added unit tests for StatusChangeHelper. Refactored StatusChangeHelper to remove redundant code.
more refactoring
refactoring: no exclision properties in abstract search param builder
ISIS-109: refactor of domain object/service rep builders
Added Hans Åkesson fastigheter and did some package refactoring
"Refactored createVlanIpRange to new API framework.  Moved logic to configuration manager, including the association of the ip addresses on a vlan with the account for which the vlan is being created.  On deployVirtualMachine, this association might happen as well, and now mgmt server calls config manager."
drools monitoring eclipse plugin refactoring
Refactors Http Fetching utils and abstract stage.
Refactor
"Added top menubar, refactored DAO design, moved security classes to core, added page scope, refactored entry point API language to page language, refactored Login to use Vaadin rather than JSP, added home page"
FACES-1998 Refactor dateSelect and timeSelect events into valueChange event
"[refactoring] Reduced visibility of internal methods, renamed a few methods."
DDF-1058 Refactored to FactoryBuilder pattern.  - cleaned up javadoc/comments  - condensed cxf pom versions  - immutable FactoryBuilder returns immutable Factories
added total and merchandise total to fulfillmentgroup - also refactored the price names in fulfillmentgroup to better represent that they are shipping prices.
TEIIDDES-1048 ModelExtensionAssistant API Should Be Changed To Remove Methods That Pertain To Namespaces Other Than Their Own. Lots of refactoring to assistants and rest of framework. Now assistants are only responsible for/knowledgeable of their model extension definition and their properties. Assistants now know nothing of a registry. Created an aggregator object that knows how to accumulate information from all assistants.
REPLACED log4j2 logger with slf4j/logback REFORMATTED code to align with general code formatting guidelines REFACTORED some code with lambda expressions and some duplicate code with method or object replacements
Issue #70: http://code.google.com/p/orient/issues/detail?id=70 Refactored connection pool
Refactored ServerGroup. Made acceptor and worker thread pools configurable. Eliminated synchronization when servicing requests. Extracted static inner classes.
refactoring test utils
* Refactoring com.mcbans.firestar.mcbans to com.mcbans.mcbans * Refactoring class names to start with uppercase character
"update to ES 1.2.1, some refactoring"
Merging revIds: 515814:520600 from 2.1-lifecycle-refactor branch to trunk.
Refactored FeedGenerator
"Add initial table mapping, DB model refactor"
New API working. Also refactor instanceof Operator to make sense with new OperatorCode
BACKLOG-181 - Metastore MemoryMetaStore uses synchronized methods instead of a concurrent collection - code refactoring according to Nick Baker's comment
Shadow variable configuration refactor: all Shadow var config must be declared on the shadow var.
Added preconditions. Refactored Bundle14able. refs #405
Move GridSampler into common package and refactor to ready it for use with Data Matrix
refactoring projects
Reorganize / refactor / rename launch conf actions (delete / open / duplicate)
Huge refactoring. Initial connection from websocket transport support. #123
DNA-205 Rename/refactor classes https://jira.jboss.org/jira/browse/DNA-205
"CAMEL-4959: Did ""Refactor to Method"" for the case if the to be converted value is NaN. Although did tiny cleanup by the other converter methods."
refactor
#NAME?
"refactor code per Mark comments, remove some system commands per Jun comments."
StatePusher refactory (using stateBuilder)
Refactoring of ow theme resources and templates are resolved now we have NIO and a cleaner theme loading routine available
Additional refactoring preparing for negative error message. Changed array to collection for filtering.
Refactor here
"lots of refactoring, improving interfaces, and fixed a bug"
Refactoring
Refactored script classes to stay in core module. Issue #4
small fixes and refactor
Little bit of refactoring before making the parameter table ediatble at all levels for a REST project
"ISIS-1613: refactors LinkAndLabel, with new ActionLink implementation of AjaxLink to dynamically evaluate action disablement"
REFACTOR exception moved to its own package
Started refactoring web service calls and project structure.
Removed static LivingEntityType enum and did some refactoring.
Large refactor mainly of cxf-rt-rs-security-xml following on from WSS4J trunk changes
[BZ 1000175] After refactoring auto refresh out with previous fix now fixing proper refresh of expanded charts.
refactoring
MIFOS-4322: refactor service facade around creating loan account
refactor sql storage to abstract task storage
Refactoring.
[refactoring] Move generic extension repository http tools in its own module
refactor rename
"Refactored getChain(int chainIndex) and getChain(int modelNr, int chainIndex) to getChainByIndex(). This avoids ambiguity around whether the input can by a char (implicitally converted to an int)."
MongoStore: Refactor to avoid to long methods
issue #175 : refactor record reading code
Refactor common housekeeping logic from OG-Engine to OG-Util so other components can share the same thread pool.
"Huge refactoring to adhere to the new OrientDB Server architecture: - improved HTTP protocol management - improved concurrency - testes with 10,000,000 of entries"
[WIP] - Moved/refactored packages.
AtlasProperties refactoring stage 3:  - admin UI for properties adjustment - correct properties storage order
Refactoring package ivory.core.data.dictionary; added javadocs.
refactored EventPlotInfo rendering as a first step to allowing customized rendering of Events
SearchResultItem parse refactored
Refactor SubmiTest. Begin tests for Post of form.
refactored and documented QueueSession
- Added the ability to dexlib to do an annotated dump of the dex file as it is writing it (similiar to the --dump-to functionality in dx) - Other misc refactoring and cleanup in dexlib
Refactored name of ErraiLearning package to demo.
"Extracted CLI, refactorings: separated BearScript from execution."
added stacktrace filter dialog and minor refactoring
- Contribution by Luca Molino to fix issue 256. Now an exception is raised when limit == 0 - Internal refactoring to support index searches
Refactor the plexus Logger interface behind our very own Log interface. This makes it easier to swap in alternative log output destinations in the near future.
Refactor: Added methods to properly invoke Services
Diff refactoring: DatabaseObjects implement Comparable
REFACTOR: Prettification
"Some refactoring, some optimization of command (now have their plugin intance in it)"
refactor leading to the import by name idea
refactor update
FIXED - bug 226765: [DataBinding] Refactor content providers to prevent leaking internal API https://bugs.eclipse.org/bugs/show_bug.cgi?id=226765
Refactoring contin
"- refactored, using ConclusionProcess - WARNING: don't remove return comments before migration script running"
Abstract tool: refactor the code detecting whether to unregister the tool
Refactoring some of the tests
Refactorings; Removed LibraryIdentifier on client side.
Refactor Watched UI with new AccountProjectWatch enum type
"Refactored root translator, combined with key metadata."
BAEL-677 Small refactoring
refactory samza
HBASE-2501  Refactor StoreFile Code
Refactored values in value-type.
Refactoring to properly handle different file types on Cytoscape load
refactor the metamodel
general refactoring
* removed NewFSParser implementation * added FSTraversal implementation (based on XQUP) * refactored parser framework
refactor indexListenable into it's own broker service
naming refactoring
Refactoring of SuggestBox and completer code to new packages.
[ANA-158] Major refactor of implied yield curve code
PropertyHandler refactoring (pending)
Refactor the name of both the directories and the artifact ids of the Hyperlink subprojects
Tests refactoring.
refactor
refactoring
Refactored tests so that the same code can be run in single-JVM and multi-JVM environment
"fragments + tests: new *message* components fragments, tests refactored"
Refactored a bit emitter management
"FEATURE: now attempts other versions of a host in case ""www3.FOO.COM"" is no longer on the live web, we now check ""www.FOO.com"" and ""FOO.com"" BUGFIX: (unreported) always was using ""*"" rules if present. REFACTOR: class internal stuff"
Add bridge tests. Refactor a bit.
minor refactor of some of the testing methods and some tidy up of the code
REFACTOR: Created on click listener for operations
JADE-188 : Did some refactoring...
StructuredTree implementation was added. StructuredTable was slightly refactored.
More refactoring. Removed ObservationService's dependency on the GenotypePhenotypeService.
Added usability suggestions from alpharesearch. Refactored file streaming logic to make it easier to add more features.
Refactor the name of both the directories and the artifact ids of the InfoLetter project and of its subprojects
Refactoring
[MOD] JUnit: major refactoring/unification
refactoring - better properties handling
Refactored: test names
engine: Refactor of propagateFailure(VdcReturnValueBase)
"Refactored conversion of json external identifiers to model objects with new set of converters for each type / version, removed messy old package. Placeholder tests added but not yet implemented"
Refactored to iterate over Instruction Graph rather than linearly.  Added Intermediate to Instruction rather than to a linear stack as well.
little refactor to add
"refactor FetchStats to be a subclass of CrawledBytesHistotable, to remove redundant code"
"topic: code enhanced type: other module: deegree-core description: Refactored FeatureResultSet and implementations, added ThreadedResultSet for fetching features in background thread."
refactorization: constructores and edit mthods created and respective services refactored
HIVE-10008 Need to refactor itests for hbase metastore (Alan Gates)
Refactor domain and server grou deployment handlers to use attribute definitions
"refactor Player, let it support show prompt message."
 minor refactor.
"reporting:  Adding DateRange class which will be refactored into the CohortDefinition instances, and a number of additional utility methods"
Feature #7291 - GalleryInstanciator refactoring: - implementing ComponentInstancePreDestruction in order to move code from GalleryInstanciator to GalleryInstancePreDestruction - re-activating some unit tests that were into test-waiting folder - deleting GalleryInstanciator
Core & Server refactoring.
MIFOS-3320: refactor holiday service facade and dtos and bring in viewHolidays.ftl for link
Refactoring of core data classes. Implementation of RefactoringRegistry.
Refactor and improve parent lookup code. Now we return names for special GUIDs rather than throwing.
Refactoring bollocks
Refactor SystemBundle classes (RFC 132).
Major refactoring.  The jdbc package was in pretty bad shape and was extremely hard to modify.  Some of the changes made to fix this were:
refactory and add CountInversionPairsDemo
Refactored cluster node classes
KARAF-1307 Refactor http commands and mbeans
Fix for 99536 : Remove Original Source Indexer Refactored DOM Indexer Fix for 93571 : Indexer causes deadlock in org.eclipse.cdt.ui.tests AutomatedSuite
Resolve some TODO`s. Code refactoring.
#NAME?
refactor package
Refactored Hgcn in methods and classes to Hgnc
refactored the test cases to put more useful helper methods in TestSupport
added zip example massive refactoring for better structure
continued process engine service refactoring
Refactor test ApiV2SystemTest by adding some data builders and data destructors used repetitively
refactor
Refactored and introduced a Configuration() object as replacement for plaing configuration hashes.
Little refactoring changes.
AS: POM refactoring
"o Refactoring aether-async-connector, no functional changes"
refactoring and adding the notion of CQLDataSet
Refactor dataset extension package names.
ISIS-14: added test to verify that enums are persisted; more refactoring of tck dom repositories
little refactoring and javadocing
refactoring
refactored some static methods into JetwickQuery;; db-migrate still works;; added some properties to YUser and SolrUser
Refactored; DeleteDuplicateGeometriesPlugIn in order to improve readabilty.
first version of beanId refactoring support [fixes #232]
Changes to mobile site and model refactoring.
Ticket #397 - Refactor GenericAStar to make it more general + consolidate into one code ...)
Refactor lexer switches.
"refactoring XStreamBuilder, extracting VRaptorXStream"
"[mybatis-spring] reimplemented MapperScannerPostProcessor as MapperScannerConfigurer, using Spring internally; refactored package structure"
did a bit of refactoring on the table layout Issue number: Obtained from: Submitted by: Reviewed by:
some refactoring around contexts
Refactor type information functions into a dedicated interface. This avoids making BaseConnection expose these and AbstractJdbc2Connection just proxy these to the real type information handing.  Additionally now type information can be setup differently for each JDBC version which will be required for things like SQLXML support because the JDBC2 code can't use the java.sql.Types values for JDBC4.
refactor DicomInputStream
"refs #107 - full refactoring, switched to 3.0-SNAPSHOT"
W-1648707 refactor CSS parser to allow components inside of declarations
Heavy refactoring including package lifting and javadoc.
refactoring to simplify - taking notes of potential clean up after lifecycle is completed
"Made some refactorings (which should, if anything, make things a little faster):"
Refactoring CSVModule loader to add a dev mode
Refactored
"Refactored feeder - schduling logic is now generic, specific logic is in Runnable tasks."
Refactored query answering. Finished implementation. Untested.
refactoring
start refactoring
"Fixed a bug with thread activation order, refactored some methods to Query and added Observation query task and SQL for it."
core: Refactor register of OVF_STORE disks
Added javadoc and made some refactoring
More cluster join cleanup and improvements. refactored join and split-brain tests. Moved simple join tests to quick profile.
refactoring to improve readability
refactoring server components
Minor refactor and fix test to be more robust
Refactored CollectdInstrumentation into collection/api project.
"#709 - Refactor: BeanCollection internals, rename method isEmptyAndUntouched() to isSkipSave(), remove 'touched' flag"
"refactor for stats, add multiple connection per session basic management."
refactor clients. Messages can now be sent directly to clients
Issue 353: refactored payload/blob so that contentMetadata is a type.
Started action refactoring
"Reducing the number of solver calls, refactorings"
refactor of the UDP transport to enable the ReliableTransport by default
Refactor indicators architecture
the big scope refactor
Refactoring.
Refactored map-store tests
"Refactored class registration for cleanliness and to allow actions to be taken as unregistered classes are encountered (issue 7). This breaks the API a little, but is nicer."
Refactor class names
Refactored test builder to extend abstract testng citrus test directly
refactor vcext related codes into maven projects
"Refactoring to concentrate any date parsing/formatting in a few methods in DatePropertyParser. Removed the recently introduced config parameter ISO8601DateProperty.useNewFormat and introduced DateProperty.defaultFormat which can be any SimpleDateFormat pattern. Ideally, the parameter contains a valid ISO8601 pattern like the example in structr.conf_templ. When using such a pattern, all date strings output by Structr are fully ISO8601 compliant. On the input/parsing side, Structr supports four different flavours of ISO8601-like formats, making date parsing more fault-tolerant."
REFACTORING Removed system dependency: test resources are now a dedicated module
core: refactor: renamed variables + extracted creating map
Initial commit of refactored refactoring support
Refactoring to reduce code size in Bug 117362 [IDE] Remove references to java.io.File in org.eclipse.ui.dialogs
Fix several bugs of new refactored list apis.
Refactor to support nested table
refactored the axon mongo implementation to make it a bit better usable
refactorings and settings svn:keywords on all java files
Fixing/breaking tests and refactored the analyzer manager to be a schedule.
Huge refactoring on distributed cluster log
"light refactoring, better error checking"
refactoring and reorganizing tests in features sub-packages
[Archi4] Refactor EditParts and Figures
"Some refactoring, mostly GCM stuff"
Refactoring: Set local Maven repo location in constructor
Refactoring of filetransfer test plugin.  Added AbstractRetrieveTestCase and AbstractSendTestCase.  Removed outgoing test cases
"KARAF-1524 kar:create command to create kars from the console, small refactoring inside feature service"
Minor refactoring
#NAME?
NLS and refactoring
Ship behaviors have been refactored. Now all behaviors are handled in a generic fashion. Behaviors having to do with how the player can move the ship are now sub classes of Movement. There has also been some refactoring in diverse areas.
completely refactor the way we handle objects and break out json support
Refactoring to remove complexity.
#1145 - Refactor @ChangeLog based on JSON documents for 'new values' and 'old values'
Refactor org.sonar.server.db.migrations.MassUpdater
Minor refactoring.
Refactor usages
ISIS-1247: minor refactorings/simplifications within IsisSystem.
minor refactor to simplify the code a little for CAMEL-1171
ConstructorBase.addClass() moved to HypermediaFilter GC.constructorOf is back XSLT refactoring
Refactored spring bootstrap test to verify all environments programmatically. Formerly required spring.profiles.active property to be provided when running unit tests.
"Refactor class ShowId to Id which makes it semantically correct for other id (member, recommendation, etc.)"
HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp
Refactoring a couple of classes
jetty-9: jetty-spdy refactored to match jetty-9.
general fixes and cleanup from refactoring
first round heavy refactoring
Refactoring ruleset preference store : moving to state location
refactor plugin configuration finding and mergine into MavenProject
"Revert ""Removing dependencies between tests, refactoring query cache tests"""
finish up nestedLifeCycle refactoring
Refactoring of addMainMenuItem (not yet finished)
before refactoring the transactionalGraph
Refactoring
Refactor locator module to better separate ZooKeeper specific parts from general parts
"TAJO-1542 Refactoring of HashJoinExecs. (contributed by navis, committed by hyunsik)"
Refactored assets to be capable of updating themselves
refactor: JdbcDemo
"refactor fit, organize imports"
Refactored name of JavaMailAckReader to DefaultAckReader since it can now operate with multiple processor implementations.
refactored heuristic truck hierarchy
Update model before code disco refactoring
refactoring jbossws security integration
"Cycler replaced by QuizRunner, some code refactoring still need to port the Random Cycler"
"[MOD] more refactorings, introduced new interfaces & exceptions [ADD] LICENSE [MOD] Edited Readme.MD"
refactored to repeat same set of tests for both sax and pull. Currently several failures in pull implementation
Refactor PlanarYUVLuminanceSource into core/
Refactor image display code
- Refactored Replay to ReplayXml and created new Replay class to represent the data a little clearer within the application. I wasn't liking how the Command deserializer was working. Parsing of the commands is now in the ReplayParser.
refactoring: Token renamed to ASTNode
Finished refactoring of glimg (i hope)
REFACTOR: Changed naming of service methods to getXXYYZZ for Projects
Refactored
Refactoring VE stratifications so that they don't pass around bulky data; instead just pull needed data from the VE parent.  This allows us stop using deprecated features of the rod system.
Refactored getMetaData so it's available to all single row result sets.
"Refactors package names and structure to hs-hannover.de domain (including license headers, pom.xml, etc)"
Refactored HBaseLoginService to delegate HBase access to UserManager.
Refactoring template model. Adding a template engine to centralize templating operations.
Continued to refactor routing layer
Refactored method name to prepareEndpointAddress
dcm4che/dcm4chee-arc-light#651 : Refactor STOW-RS tool
Refactored: serialization
refactoring
Refactoring database helper pour éviter les plantages quite à une bdd fermée.
refactoring
Refactor to move common code to a proper package and externalize strings
refactoring initialization sequence for offline branch
"Fixed a few issues in Groovy support, and removed earlier prototype implemenation. Also refactored WindupArchitectureTest to lower the incidence of LuceneIndex related crashes."
refactoring Transaction API towards cleaner separation of responsibilities
"I've refactored the packages names from ""com.vaadin"" to ""org.vaadin.addons"" cause accondingly to terms of service: http://vaadin.com/terms-of-service only Vaadin Ltd. can use the package name ""com.vaadin"". I've changed the project to maven to simplify the change for community. Changed the FocusHandler to set the cursor's position to 0 when its empty. Still untested!"
"Another stint of refactoring, removing repetition in the ExecutionAction"
JBIDE-5119: Refactor PageContextFactory to improve perfomance of context creation
Huge refactoring to add : - JUnit tests - Service discovery mode and service validated mode - Get url data model from Nuxeo
"Refactor properties bootup, remove GlobalProperties and allow ServerConfig.loadFromProperties()"
refactoring and adding tests
"Refactor and fix jmx consumer, failing when the monitored attribute type is different than int"
Refactor Template by moving suggestions into VCPETemplateSuggestor.
refactoring for unsafeGetVector
Adding Imran's patch -- Refactored Xforms for studies
Refactor
Refactor natural materials. Fix cache bugs.
refactor resources to resourcecontainer
refactoring
Refactored Robot and Team packager to use the two new RobotProperties and TeamProperties containers.
Refactor PipelineParser: use a simple approach where we parse each child node from a step as it comes
Refactoring project into a multi-module project
Refactor and add docs for various shaders
[MOD] Core: various refactorings (for Jobs Module)
"WiseML-Merger: refactored MergerConfiguration, fixed namespace issues in WiseMLTreeToXMLStream"
refactor rename
"refactored render system, RoadModel is no longer hard coded into the View, renderers are dynamically linked to models"
"Refactor (REINDEX, Reindex, reindex) -> (INDEX, Index, index) + smaller scope to components scan"
"FACES-1552 Refactor BaseURLWrapper, PortletURLWrapper, and ResourceURLWrapper according to FacesWrapper pattern"
"added webscript to add RepositoryArtifact instances, refactored initialization of java backed cycle webscripts by adding abstract super class, added MultipartRequestObject"
FEDERATE-149 refactoring of NodeEditor and PlanNode to localize node manipulation logic
"Compute class/method hashes, and put them in the saved BugCollection. Refactored BugReporter so that all BugReporters support the getRealBugReporter() operation, which returns the self object for all non-delegating BugReporters."
[WAGON-350] add unit test for wagon ssh with an embedded ssh server refactor with moving embedded server class to ssh-common-test for reuse it with ssh-external test
fixed problems left over from cycle API refactoring
refactoring in tracer
Refactoring to make (Multiple)OMFD easier to implement.
FIXED - bug 282843: Create a Refactoring-History for the CDT Refactorings https://bugs.eclipse.org/bugs/show_bug.cgi?id=282843
"MessageSource refactoring:  - Harmonized module MessageSource. Each module can now have a META-INF/messages basename which will be included in Onyx's messageSource bean.  - Moved ruby's language-common file to new convention (META-INF/messages)  - Harmonized state labels. Instead of repeating same labels all over, each state uses the same label, but still has the ability to change the actual label if required.  - Removed repeated message bundles from all modules."
moving some methods of CacheRecordStore to AbstractCacheRecordStore + cacheconfig refactor
test refactoring
Interim checkin; major cleanup/refactor on the way
Refactored the projectile launching system
"adding .db to gitignore, refactoring missing worpdress packages"
Refactoring
XWIKI-4619: Refactor rendering submodules to sort by syntax instead of by parser/renderer * move Wiki Model based renderers from rendering-api to syntax-wikimodel
NOJIRA: Refactored: moved to the appropriate package
"Big refactor of view handling. Added ViewManager class, ditched almost all static view-related methods Needs more testing. API breakage."
Refactored and restructured
refactor filter preference pages
minor refactoring to remove duplicate code
Bug 427662: dto: Refactor dto package names
TIKA-2220 - refactor new sax pptx and docx to reduce code duplication.
Refactor to use configured default HttpClient in remote queries and to allow optionally using configured default client even with authentication is used which may be desireable in some circumstances.
New query utilties and refactor existing utilities into query package.
refactored openstack-nova expect tests so that they don't mask zone ids from subclasses
"refactor cat-client module ,for heartbeat part"
Minor refactoring.
Refactor Policy Builder
refactor
Create a version of the XmlStreamReaderUtilitiesTest to run against the original XmlStreamReader implementation (Sanity check to make sure all the refactoring hasn't screwed things up)
Refactoring out property parsing to a separate method.
A lot of refactoring and todo cleaning
tests for region refactored
Some work wrt #588; minor refactoring to support custom ObjectWriter sub-classes
Core: refactor AttachedChildTopics code (#341).
refactoring...
"Refactored probe tests, e.g. defined a global tolerance MS value (which we may have to adjust for our build server)."
Refactored some of the tests so I can ensure they run in an order which helps to troubleshoot a problem.  In general an earlier test will fail if it tests a feature which a later test might rely on.  This makes writing later tests a little bit easier as you don't have to check for as much and if they fail you are pretty sure the relevant earlier tests also failed.
Refactored code to rationalized package structure
remove fRefactoring from the state - use isAvailable
Partial refactor of ProfileType.
Refactor: Move new classes to replace old ones with the same name and package as the old ones
Refactoring * AuditEvent Code in das Framework verschoben * Log4j Audit appender umbenannt
Refactor and further implement AstNodes API
search content tests and refactoring
refactored and abstracted the new anylitcal namespace.
Code refactoring
MASSIVE refactor. Breaks EVERYTHING listening to ReportRTS. Do not use this if you rely on plugins listening to RTS events.
refactoring ODataSubLocator
refactor ASMDeserializerFactory
Refactor the way inventory works in the framework by providing an extension handler for the methods within InventoryService.
refactored the package scanning and the definition of packages which should be scanned
Refactors MortonCode.
"refactoring tests, add TestUtil class for common methods; add tests for java logging"
QA: optimization - added TODO to link to SCRUM-277 - refactored children-methods (more common code) - removed logger as not in use
[309569] Refactor a template or a query - SBE patch OK
Engine refactored
Some refactoring and changes in permission system
Refactoring
progress refactor to use neo4j as rest service
Action structure refactored. Fix of nonpersisting project state change.
Extraction tests refactored. New tests added. Documentation added. Changing package name Some more corner cases found
"NXP-15039: Refactor ES NXQL PP extending from CoreQuery PP, keep Native PP impl"
issue #61 : refactoring GEQ and LEQ
ROO-2745: Post 1.2.0.M1 code refactor and clean up - broke up large method
EPD-149: Refactored and made comments - ready for Ais settings for ship.
refactor
Huge refactoring of all CDI QuickFix-like test + moving resources for QuickFix tests into one folder
"Refactor variables resolving, allow custom variable parser implementations, update test cases. Signed-off-by:  <ghislain.touratier@gmail.com>"
Refactoring
#589 - ElasticSearch - refactor to DocQueryContext
refactor + begin adding sentence level concurrenc
Refactored: inject the class names to AOP class transformers
TripleStore Class JavaDoc Package Refactoring
Refactoring and started on mapping annotation for exception
refactored to minimize API surface and thus requirements on projects that adopt this package
refactor snapshot
refactored excel parser
Refactorings and clean up in response to Remy Suen's email
api_refactor: refactor ssh apis
refactoring and renmaing. Also added in a dummy function to create Batchjobs
refactoring
refactor persist db structure
Refactoring and cleanups
refactoring: renamed resolver to resolve
Refactored jolokia fetcher
XWIKI-8581: The local admin of a subwiki should not be allowed to alter the index of entities outside that subwiki - refactored tests
WyC: refactoring the test suites.
ACT-119: Add web service task - Add support for namespace prefix - Refactor input and output associations - Enhance structure hierarchy
Refactoring of the ProxyAwareConnectorHandler in preparation for integration of new Grizzly specific connection pool.
NXP-5053: refactoring to put all JDBC-related code in a subpackage
refactor stuff
#160 allow selection of update methods by refactoring MethodMatcher but stopping selection of update method at new filter
core: refactoring in vms-monitoring
Refactored the codebase. Removed all the deprecated methods.
http://www.caret.cam.ac.uk/jira/browse/CTL-606 Refactored large parts of the evaluation settings page to reduce duplicated code and reduce the chance of mixing up rsf:ids (that was the cause of the bug and it took refactoring to actually find the problem) Changed around the message keys so they are easier to line up with the appropriate forms Removed about 100 lines of stale code
Refactor slightly pull request
Minor refactorings
Refactored the HA branch to facilitate using different implementations of LockManagers and IdGenerators.
Refactor - moved FeralDeceiverAbility to shared area
"Refactors SpaceMonitor, Sweeper, repository interaction."
Refactored the JarToSrampArchive (artifact expansion) code to make it pluggable (using java serviceloader).  Now additional implementations of JarToSrampArchive can be contributed (e.g. the switchyard integration module can contribute its own impl).
"[AESH-129] refactored man, should be usable now"
[refactor] renaming of scimHelper class to SCIMHelper
XWIKI-14353: Add the ability for notifications center to send emails in real time * Add AbstractMimeMessageIterator * Refactor PeriodicMimeMessageIterator to use AbstractMimeMessageIterator * Add LiveMimeMessageIterator
"#365 - As a part of the customer state refactoring, do not include the login service as a default scanned bean"
Refactoring
Further refactoring around PrefixMap
simple refactoring; formatted code
Refactor MBC to use retriever
XLCLOUD-151 refactoring of vcms-gui modules
code refactor
Ajout de quelques tests refactoring
refactor the agent utils for working with bundles and features on a profile to make the code more robust and reusable
"Refactored model - moved stuff from MutabilityHelper to AbstractProcessor so both make sense now, and removed silly generics and VersionInfo.  Also extracted ModelController as an interface."
Renamed Guice refactoring to GuiceAssistedInjectScoping
CDI EL Refactoring and Searchers don't look for ELs in dependent project https://issues.jboss.org/browse/JBIDE-10331
Refactored widget statistics into separate helper class
1.add method to get days without payment 2.refactor testLoanBO test codes  <Wenjing & zheng>
- Indexbuilder & Loader API refactoring: commands instead of methods - Array design loader's gene identifier property made configurable through admin UI - Update index for experiment command support in indexbuild - Update index for experiment button functionality in admin UI - Repair experiment button functionality in admin UI 
refactored package names to com.dubture
MEDIUM / Refactored index management in FIB model
Refactor pump GUI elements into PumpControl class.
Schema validation refactored
move DiscoveryConfigFactory to dao package and refactor config diving out of discovery and into DiscoveryConfig
Refactored EventViewer to EventViewerPage
Minor refactoring and stylistic changes
Bumps up to 0.7.0 in prep for refactoring. Globals renamed to Session. Starting work on a new package-management system based on maven
"About 30% refactored according to the paper's description. Missing parts are: Union (probably the hardest part), Group By(old impl rather subotimal), Order By (depends on group by), Project (easy) Another annoying junk of work will probably be the SQL generation and alias generation; the old impl was horrbile (although working); the new one seems so far to become much cleaner."
1.Implemented actors list fetcher and skeleton for future ingester 2.Refactored structure of wikipedia module
some improvements to EventBuilder to help with further refactoring
Refactored Quiesce mode.
refactor image upload & delete
Refactor Git API exceptions to a new package
refactor to better name
refactor to prep for multi models
Some refactoring before adding UI extension point for extended BPMN2 model properties
"refactoring of heuristics, adding heuristics"
Refactored tests to be more orthogonal and started adding support for fragments
Refactoring curve sensitivity tests
Refactoring
Add project POM iterator and refactor RemoveBundleMojo to use it
Core refactoring.
Refactored: using actors in IpcCommandReceiver
Change name refactoring
Bug #8630: fixing the disconnection / connection which is not effective if the user . Refactoring some stuffs around the user session and the messages.
Refactoring... expanding Vptr implementation
ISPN-7029 Refactor command execution patterns and context entries handling
More refactoring to better support criteria queries for non-JPA back ends
Create a method object for the collect method and move all associated methods into that object to ease refactoring
Refactoring + W$ support - way to go... 2!
121880 [build path] refactoring of build path code (remove from bp)
[OPEN-HUDSON-6227] Allowing view path not to be the same as view tag Refactoring : include most cleartool commands under ClearTool abstraction. Removed most of specific implementations of ClearTool to centralize in CleartoolExec
"refactored signing and validation, added jwk-based cache, removed keyfetcher, refactored client side class structure"
Refactor the classes PublicationTemplateManager and GenericRecordSetManager as singleton in order to be conform to the manager pattern and to easly tests them and the forms they manage.
refactoring of the basic protocol client and server:  - server listens for incoming requests from mobile and server clients on different ports  - support of forwarding authentication requests and RPC calls  - caching of authentication requests  - synchronous (delivery receipt) and asynchronous (w/o delivery receipt) requests  - upgrading Netty to 3.6.6.Final version (fixed corruption of stream while using Zlib encoder in multi-threaded environment)
"refactored, extracted methods for correct/incorrect, answer, and general feedback"
Refactor project: move functions and create different data files
Refactor GradleModel (now should be much more readable)
Refactor AccessTokenController to allow easier extension (#1191)
Refactor history and events
Bug 488109 Refactoring of Extract Constant Implementation
CHUKWA-379.  Refactor sender code.
Refactored archiving of queued inferred records.
refactored test testMapLoaderLoadUpdatingIndex
refactor: spit moor to maven modules
Refactor de la clase CursoMultiIdioma y creación del DAO.
PLAT-4988 applied refactor to new NoHoliday calendar class.
Refactored To properly use Dao
refactoring
refactoring
 * some refactorization  * added support to passive replication in population  * removed old experiments
Refactor names of session impl classes; fix bugs; add some tests
refactored client and server
modifying image tools path detection (Im4Java and ImageMagick) & refactoring quota parameters in settings files
"Core: refactor update logic, pt.12 (#935)."
Refactor to the mmo namespace
JBRULES-1734 Drools API -refactored to move org.drools.knowledge.defintions to org.drools.defintion
WyIL: Refactored WyilFile declarations.
refactoring of the test infrastructure
#1012 - removed some PMD warnings and refactored the code. Removed unnecessary NonStaticMethodCheck checks and updated the references to the nw made static methods to use the class name instead of the instance
refactor
Fixed a few issues with update. Refactored cql generation to remove long 0 pattern in favor of Long null pattern
Refactor and hand write plain
[ANA-111] The analytic jacobian is currently in test code (YieldCurveBootStrapTest). This all needs refactoring
refactor inservice path
Refactored codebase to prevent oxalis-inbound from depending upon oxalis-outbound. This was done by moving various stuff from oxalis-outbound into oxalis-commons.
Refactor
"Revert ""Refactors such that Kafka bundles spans and shares more code"""
"Refactored annotations to accommodate different types of sources (field, level, etc)."
Moved alarm and node browser code into separate bundle. Refactored some API code to separate org.opennms.features.topology.api.topo and org.opennms.features.topology.api package dependencies from one another. Added synchronized and try/catch blocks around all bind/unbind operations so that any exceptions due to OSGi environment changes are caught.
"extensive url tests, slight refactorings in the code base"
"- Every message sent through ENCRYPT now has an EncryptHeader # (https://issues.jboss.org/browse/JGRP-2021) - Refactored ENCRYPT into SYM/ASYM_ENCRYPT - ENCRYPT.encrypt_entire_message = true is now the default - Messages without EncryptHeader are dropped by ENCRYPT - More tests in ENCRYPTTest - An encrypted checksum (signature) of the hash of the encrypted message is now shipped in the header (only when encrypt_entire_message == true and sign_msgs == true)). This allows for checksum comparison; if a checksum shipped with a message doesn't match the computed checksum, then the message will be dropped - Probe: sort protocol attributes - KeyStoreGenerator: use the algorithm specified - Changed tests to use SYM/ASYM_ENCRYPT - Added new protocol SNIFF - Join and merge requests/responses skip encryption / decryption - Unit test for ASYM_ENCRYPT: when a member C leaves the cluster, make sure C cannot send messages to the existing cluster members - Unit test for rogue injection of merge view - Handling of merges is now correct - Added doc/design/MaliciousAttacks.txt - Added section on SYM/ASYM_ENCRYPT to the manual - Changed encrypt.xml default - Set @BeforeMethod/@AfterMethod(alwaysRun=true) so that init() of EncryptTest is always run - Using delegation rather than inheritance in {A}SYM_ENCRYPT_Test, as inheritance doesnt work correctly in TestNG - Added sample configs for SYM/ASYM_ENCRYPT"
test refactor to make more but simpler samples
o Refactored code to reduce duplications
"refactor, add ExtraTypeProvider"
HADOOP-7249. Refactor the chmod/chown/chgrp command to conform to new FsCommand class.  Contributed by Daryn Sharp
Continue refactoring of rullesets management
"Improvement for failing tests, added rename refactoring tests to automated suite."
Fixes #756 : XGMML Parser: handle cy:hidden attribute. XGMML read/write: some refactoring.
Made combined XML validation (XSD + Schematron) available for Continua HRN and all others; refactored HL7v3 and XCPD machinery
Refactor AllDiffProba:
Code clean up and minor refactoring
Refactoring of offer service to allow for easier extension by modules - addresses #590
#NAME?
"Refactoring, extracted strings, fixed bug with the rotation, moved wakelock to the service instead of activity (that saved lots of stuff)"
"refactored to cleaner design, extracted variable parts"
"some refactoring on categorical node rebuilding, hopefully fix freezing issue"
drbd parsing minor refactoring
Refactor word emitter.
CompetenceCourse Refactor: domain corrections involving the checkParameters  and the abstraction of the CompetenceCourseInformation
issue #3: refactored results handling
Refactor packages naming
Refactor dev/QE permissions model to support other types.
Refactor: Extracted parts from generateRoleSlotMethodsMultStar() to allow subclasses of code generator to wrap the multiple generated methods without replicating most of the code in the original code generator super class method. Also generate any interfaces declared in the dml files to the base classes.
"Somewhat refactored, now supports linking to attachments, and in case of images, including them."
Many refactorings. Changed method names. Dropped Trajectory class and started using Line class. Remade the part that calculates the collision area to produce one more precise.
Refactored DirectionalChangeListener to conform to non-deprecated ChangeHandler interface.
Issue 101: refactor client examples
Progress on Moratorium story: * Added integration and acceptance tests to verify loan schedules without fees when installments are spanned by various types of holidays including moratorium periods. * Enabled the GUI to define moratorium-type holidays. * Miscellaneous refactorings of helper classes.
Krati refactored to multi-module
Refactoring of PageRank example (not test yet).
CLIR refactoring: renamed classes; fixed paths.
EST-281: refactor indexation
refactors to mavenize
Introduced better type safety to ResponsePromise and other minor refactoring
Refactorings
Refactored Spring BeanFinder implementations
DirectBitSet implementations refactoring
refactoring of models; production input models
"Updates for refactoring to style classes. CalculatedStyle now has lookup methods to cover all general cases, so propertyByName() is private, which means the backing classes for styling were able to be replaced."
Refactor and start implementation of ES based events query
"Refactoring deployVirtualMachine to new API framework.  Since this is a rather complicated command with many steps, for now the way the logic is broken up between ManagementServer and UserVmManager and NetworkManager is preserved.  Later there is a possibility of consolidating some of the logic."
Refactored hyperassociativemap package to the graph package.
"further refactored solvers class, clean up in related code"
"Refs #3094: UI improvements and consistency fixes to Tunables, including label/control alignment, and better spacing between form fields. Some code refactoring."
"Various refactoring & renaming, and JUnit tests. Added surefire and cobertura to the maven pom. Removing dead code and adding Asserts to the mix."
Refactoring organization of classes and packages Task #9 - Create a good structure for the new work: 2015-MADE-MONOMITH
SONAR-4433 refactor the extension point ProjectBootstrapper
JBRULES-2347 Drools Pipeline integration with Camel * Refactored camel component * Added abstract test support
Refactor - removed unnecessary parameter taskIds from PlotDataProvider interface
#1195 started refactoring so we can switch the ChildContainerController based on the kind of profile; so we can use ProcessManager for java/tomcat/wildfly containers
"Refactor resource package, moving some things out of it - RESTWS-71"
[OPENENGSB-1651] refactor VirtualConnectorManager and corresponding Activator
refactor
Refactored scope handling to make dynamic broadcast streaming less error-prone.
Refactor: Use the IOUtils.close() to aviod duplication of code
compiling again. refactor common test paths.
Refactoring client and enhancing the Messenger interface
refactored extractTimeseriesMetaData into a method
Complete refactoring to use QueryableRecorder.
start refactoring SnmpThresholder
Refactoring unit test to match new package layout.
Refactoring.  Observers and statistics.  Added missing copyright notices.  Updated home page.
"Added 400 Bad Request handling for v2 client calls, to take into account staging. Refactored console content into a factory method, and added wait time for staging log requests when starting an application in case the log file does not yet exist when a stream attempt is made."
(Fixes issue #11) - the biggest code refactory ever
refactored spring hello world into ohtu pkg
[SHRINKDESC-58] Refactoring of the SD SPI: Node.  Incomplete.
More refactoring
[refactor] moved filters to criteria package
javadoc and minor refactoring
SONAR-4069 Refactoring to fix issues with ProjectBuilder
Finished refactoring history UI
JBRULES-752 refactoring love
Refactored PhenotypePageTest and PhenotypePage to latest test spec. Renamed 'PhenotypeTablePheno' to 'PhenotypeTablePhenotype' to disambiguate. Removed TestUtils.patchVesEbiD0() as it was a one-off testing hack that is no longer needed now that we've fixed the graph url hostnames.
Refactor code common for both RtpChannel and SctpConnection. Adjusts to DtlsControl changes.
Save before refactoring
69817 Externalize Strings Wizard: should not touch escaped characters [nls] [refactoring]
"remove keycloak, refactor packages (#2963)"
Core test refactoring.
klasses aangemaakt opdracht 2 en Datum-klassen refactored
Refactoring loaders a little.
 Refactor BufferedChannel to prepare for reordered writes.  Refactor BufferedChannel to prepare for reordered writes.
Refactored MProxy to top level
[SYNCOPE-172] Initial refactoring of original SchemaMapping into UMapping / RMapping
refactoring defaults processor - no changes
"created sql utility module, and refactored postgis format to work against it"
"Refactoring: moving ExternalSensorDescriptor and MeasurementLevel to better packages, deleting dead code"
"Refactor AudioCaptcha.Builder, AudioServlet, rm unused classes"
HAMA-939: Refactoring which was implement using out-of-date status response
"Disabled property-list property; the ""hackish"" parsing in the component was breaking and causing the configuration to not load. Refactored configuration loading to be testable and added test case."
Refactor the pacakge.
"Refactored InitialState, MapState and MultiDate to c.h.impl.concurrentmap (issue #79)"
"Refactor verification, block retrieval behavior to allow their use from outside by related classes."
Refactor/move classes so that it is easier to break them down to modules
"Should Include Hibernate Statistic Connection Count, only to refactory de behavior to other class"
"ACT-60 more refactoring configuration, persistence and test"
Tests refactoring
refactored to new pdt extension point
Refactored model meta generating feature.
"Refactoring, extract some methods to utility classes and add unit tests"
Refactored write batch code.
Refactored domain model to use long IDs instead of UUIDs in order to make it possible to use Spring Security's ACL-implementation. Also added some security annotations to the Category Service.
Refactored
Final (?) stage for this branch of refactoring Linked Data object model now encompasses both Linked Data resources and SPARQL results #win
Service and Controller Refactoring
changed packages in prep for extracting zookeeper-common library refactored ZooKeeperPersistentEphemeralNode to use a ZooKeeperConnection instead of a CuratorFramework updated ZooKeeperServiceRegistry and tests for new ZooKeeperPersistentEphemeralNode constructor
Refactor code.
"JBRULES-587 + refactoring, improving javadocs"
Refactored tests
[PLAT-3181] Refactor: Rename CreditIndexSecurity to CreditDefaultSwapIndexSecurity
WYCS: more refactoring.
refactoring: generified and reviewed JMM
#830 Refactor registration process - Introduce registration executors: one for each registration variant; each extending class implements one registration variant and worries about that method's details only - AsyncRegister receives the player and a registration executor
Refactoring on visitors and tests case
Refactoring to serve files by mime type. @psh
refactor tests
PLINK-130 JPA store refactor
C# - Code refactoring
Refactor TmfTimestamp as per the updated TMF Event Model
"ARQ-979, ARQ-1223: exposed SPI events BeforeServlet, AfterServlet; refactored PhaseLifecycleEvent to expose event names in debugging output"
Refactoring extrators into read accessors and unifying the write accessors framework
[PLAT-3281] Refactor: rename FunctionConfigurationSource.getRepositoryConfiguration() to getFunctionConfiguration()
alldiff refactoring
CAY-744: JTA EntityManager (refactoring OpenEJB container startup code in a sperate reusable class)
Refactor PA Featured Content updater
Some refactoring. Added some new tests.
Refactor PR #93
MIFOS-3868: refactor adjust last transaction functionality with respect to interest calculation.
Continuing refactoring of RefMetaDataTracker.
Refactored FilterFunctionalityContext.
Refactoring
small refactoring of FieldTypeRegistry to use more informative class name 'FieldType' as superclass for FieldType definitions
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
FUSETOOLS-2445 - refactor access to stagingrepo preferences (#1079)
refactored mongo modules
Refactor serialization utilities
"Refactoring because the previous design did not supported namespaces will. It was difficult to add ""reference before declaration"" feature. Namespaces not does not work at all, but all previous features are working."
SONAR-6740 refactor configuration of Tomcat contexts
Numerous refactorings to add SpanData as a means of transporting a Span object from one JVM to another to be rehydrated and sent to a SpanSink.
"SVNDiffWindow now always includes insructions raw data or instructions themselves. More refactoring still needed (get rid of all code, remove duplicates)."
"refactoring everything so Relations are not declared per table, but per schema"
"Add unit test for Perforce, and refactor a little to make it easier to test"
ACT-506: Refactoring BPMN implementation classes since it was getting a mess
Start of entity/component refactor. Signed-off-by: Chris Sanders <zidane@outlook.com>
refactored the monitoring part
Small refactoring.
refactor
Refactor and fix tag profile service failure reporting
Started refactoring the GenericWrapperTest.
AnnotationRewriter refactoring.
Refactoring of 4_x_x External Artifacts class hierarchy.
"#719 refactored sitemapcontroller to API, fixed unittests that called SwiftProvier bean"
Remove/edit related FIXMEs throughout code base to achieve better picture of what is outstanding for refactoring work.
refactoring the map converter class
#NAME?
some refactorings
Refactoring - moving MODULES_DIR and MODULE_FILE constants to Util class
Refactor emitter config loader
"Add tests for Email functionality. Resolve minor issues with email functionality. Resolve issue with test failing. Update Java Mail library, Apache CXF. Code refactoring."
refactoring for new app engine release.
Place Geocoding refactored
Refactoring to add activate/deactivate support on services
Refactoring towards fix for super invocation bug (not yet the fix)
- Refactored Context creation so that it's a little bit cleaner.
Fixes #3045: New Empty Network dialog now allows the user to choose the renderer. Minor code refactoring.
Refactory ui generator framework
"RA-36 - Refactor PIH's EMR, splitting it into API and multiple apps"
#NAME?
refactoring monitoring service implementation
[HAMA-722] Committing a minor refactor for the purpose
Refactored: InMemoryDatabase
Refactor type conversion code
"Project.java refactoring. Projects can hold many types of files, not just jar files."
misc. cleanups and refactoring
[#51] Done some refactoring
MarketplaceProvider: Complete refactorization of the drupal related classes.
#604 refactored the code a little so the haproxy is a separate bundle and feature from the http proxy
Refactor Stem
Refactored
[refactor]: rename method
Refactored SelectItem and remove Memory component created selectData component
Refactor and add
Refactor client module to use TachyonURI instead of Strings.
refactored to use Predicate instead of Expression so we can use the simple language too
Refactored distributed server classes
HIVE-12442: Refactor/repackage HiveServer2's Thrift code so that it can be used in the tasks (Rohit Dholakia reviewed by Vaibhav Gumashta)
ACT-60 pvm refactoring of atomic operations for scopes and events
app consumer refactor
refactoring work - fixing a few bugs
Disabled what should be an integration test. Refactored test code to prevent a test user from appearing in production.
Refactored NameSearcher
Refactored to allow multiple Encoders and Publishers
Done some refactoring
Roughed in crypto code and refactored naming conventions
Refactored for original/aggregate.
did some refactoring
Refactoring + one more test cnf file
Refactoring to run parallel versions
#NAME?
Refactor render on SpringFacesContext
Significant refactoring of the survival curve construction and calibration classes. Added code for seasoned trades and additional accrued premium calculations
Refactored into maven project.
"SONAR-3114 Refactor the ""Dependencies"" tab (GWT -> Ruby)"
Update and refactor ImportAPI for new GraphAPI. Update file importers.
refactoring packages
Refactored job actions to make them more modular
ftp: Refactor list methods
refactored custom string serialization for be complaint to utf8. issue #2636
tests: refactor SyncLunsInfoForBlockStorageDomainCommandTest
wading in to full tests for ZooKeeperCoordinator... lots of refactoring coming down the pipe
make maps and theme directory configurable via UI had to refactor options dialog in the end
"Added support for running tests on SauceLabs, and refactored the tests to make it possible to run the integration tests on SauceLabs."
Code refactorings due to introduction of ReportDto. Attributes from PDFs are now deviatable implicitly from class attributes.
97280 [use supertype] Use Supertype Refactoring and Refactor menu not available in class file editor
Issue 84: Refactor PrefabValueFactory to return a Tuple directly
Refactor manual perf tests
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - more static imports
map near cache refactoring
refactored cloudstack tests
Refactored Requisition Tab
Refactoring of packages
Huge refactoring
Completed a merge and refactor of overdue into overdue module and juction module. Lots of remnaming etc. Tests are passing.
continuing refactoring
minor refactor of the POJO component so we can easily make a bean component for working with spring
Row level admin security refactor for #849 - Refactor the row-level security services from into a more sensible package - Ensure that the row-level security providers can be accessed from the frontend if utilizing admin security there (like in cross-app auth scenarios)
Refactored project overview panel
RF-12900: refactored ColorUtils to org.richfaces.images and made them package protected
Refactored tests for community entity
Big refactor to remove the SyncedScrollView container and make headway on synced MotionEvents. Also removing some fluff demo activities.
ROO-3056: Post 1.2.1.RELEASE code refactor and clean up - refactored TypeLocationServiceImpl to debug ROO-3131
Refactoring of ID handling.
[SUREFIRE-592] Partial refactoring
still working on MAGNOLIA-636 huge refactoring: remove the need for additional/threaded requests by gathering the response result in the filter. Partially working now
Refactoring to simplify packages naming
HSEARCH-174: * Some name refactoring. Getting rid of as many references to CachingWrapperFilter as possible.  * Updated and improved the documentation.
refactorings
JBRULES-484 refactor the core reteoo code for sinle and composite propagations -BetaNode now uses Single and Composite TupleMatchFactories
[tests] some refactoring to use junit4 and other fixups
initial support for @GetGeneratedKeys. Required signiicantly refactoring how results are fetched off things
Refactored the nio implementation to depend only in the interfaces Journal and JournalRecord. Decoupled NioJournalRecord and NioJournalFileRecord from each other. General code cleanup. Achieved small performance gain of ~10-20% by the decoupling and dependency removal.
"Refactored File dialog chooser with better method names, and switched the logic to use FileDialog for Mac & Windows, otherwise JFileChooser. Added a progress dialog & task for when fetching list of ontologies from Bioportal. Added a black border to the icon"
#NAME?
Refactored List list() to Set all()
refactoring
"Issue:41 Filter milestones in milestone group edit page, a little refactoring required and fix a bug in milestone lists at the same time"
users refactoring should now be completed
"big refactoring including data set based plugins, adapter first approach;"
refactored i.m.cms.gui.control.list
Refactor RandomWeightedSelection: - move to collection package - make Algorithm package-private and remove the methods with it in their signature - integrate VoseAliasMethod in RandomWeightedSelection as it's the current unique implementation
Refactor some Probers internals
Sandbox components updated for new/refactored API
Process Diagram API: Refactoring to also support waypoints of edges
Refactoring.
"refactored Queue Client proxy, now extends AbstractQueue"
Support PackagesResourceConfig when using servlet. Various property names have been refactored.
add test and refactor code
Refactoring and design
refactor some names
refactoring
SYNCOPE-231 Some refactorings in exception mapper
JBRULES-2746 Drools Grid Impl2 -source refactoring -adding to main build
Small refactoring before working on AHC-99
HBASE-4015 Refactor the TimeoutMonitor to make it less racy -- REVERT.  Ram says I have applied wrong patch.  Redoing.   A SECOND TIMEsvn rm --force   src/main/java/org/apache/hadoop/hbase/master/TimeOutManagerCallable.javasvn rm --force   src/main/java/org/apache/hadoop/hbase/master/TimeOutManagerCallable.java
Turns out my problem was fixed already. Refactor a tiny bit while I'm in here and see if we like it.
Refactoring
adding in JDO annotations; added a couple of tests and small refactorings
Refactor IPC package.
Refactor code to remove cycles.
"Refactored Author assigner to interface, added BlameFactory"
"CSPACE-5727: Refactoring to remove one level of nesting, continue pulling procedural code out into single-purpose methods."
Refactored matching to handle dynamic pseudoclasses correctly
Location and Vector refactor.
Trying to refactor ubild paths for cleaner / easier distinction between src and src extensions.
Refactor to make the dataserver separate from the UI
131768: [refactoring] API additions for Replace Invocations
MAHOUT-236: - removed output directory deletion from DirichletDriver.writeInitialState - added runClustering option to KmeansDriver and MeanShiftCanopyDriver - refactored methods from MeanShiftCanopyJob into MeanShiftCanopyDriver and removed job - adjusted TestKmeansClustering and TestMeanShift - adjusted synthetic control examples to employ ClusterDumper of outputs - adjusted TestClusterDumper and TestDCbwEvaluator for KMeans and MeanShift job api changes - decreased number of iterations in unit tests to improve performance - all tests run
Refactored testNearCacheTTLExpiration & testNearCacheMaxIdleRecordsExpired
Updater (test): refactor getting the sorted array of FileObjects
rewrite twitlonger and gist extension extension api refactoring fixed instagram user link
Refactor: AcademicInterval is now externalized using its externalId
"Some refactoring of Custom change interfaces, added spring jdbctemplate-based classes for doing executing of code"
small refactoring to be java conform
refactoring
refactor mech ops
"Some more refactoring, stub World implementation"
Refactored Connection Handover code
Fix MavenDependencyResolver to use CENTRAL by default. Refactor EE facets to prevent unneccessary POM modification when required deps are already installed.
refactored code to avoid extra abstractions and added hover support
XLCLOUD-146 refactoring (mostly loggers)
start of some refactoring; move the column replacements out into their own classes
major refactoring to pull away from svn based maven structure to more git like it;
Refactor
"Refactoring: FQL objects removed from CPD, DE"
"to make this branch only about multipart/form-data, undo the changes to handle more complicated forms with extra input fields; add unit test; store CrawlURI submit data in http-library agnostic way and remove httpcomponents-specific code from HTMLForm, refactor creation of post data accordingly"
Refactor tests
"Created structure to help dealing with imports in files, even if the file does not have a correct AST Refactor: Moved methods from FullRepIterable to StringUtils"
Bug #1483: Refactored code in CostStatusController
adding refactoring
Major package refactor
"Refactor CacheEntry classes to wrap a jcr property, whereever it is stored"
refactored
"with feature #3374, took the opportunity to refactor some stuff to facilitate the move of form content (mainly wysiwyg field) and thumbnail. Thereby code moved to the service layers and it is more reusable."
Refactoring
refactor
First draft at reference refactoring
Edm Interface Refactoring
Major code refactoring:
refactored transitiveClosure.java -> source preprocessing and emitting out
loan refactoring: refactor load method
refactored tvblob to stream writes to mongodb
HZN-1020: Refactor the DNS protocol handler to implement the RequisitionProvider interface.
Decent simulated annealing support: - refactor out relativeSelection and absoluteSelection in favor of minimalAcceptedSelection - Selector interface now returns an Iterator instead of a List - first decent simulated annealing implementation
refactored KSRSSServlet :  - Splitted Generators responsibilty onto FeedListener and FeedContentProvider - Separated user feeds in ForumuserFeedProvider - feed resolution is now delegated to FeedResolver component (xml configured)
refactors Order
"refactor bootstraping code, introduced DeploymentUnitProvider to allow flexible way of provideing what should be deployed"
Refactored
"refactoring, fixes, javadoc"
Refactoring: renamed packages
major refactoring to the learning / mapping part.
ROO-2928: Post 1.2.0.RC1 code refactor and clean up - refactored GWT add-on to be more type-safe and reduce duplication
- bugfix #629 Create entities: handling of invalid names - refactor of OWLEntityFactory - better error reporting in the dialog
     * Ported Fault Tolerant AbstractHDFSExactlyOnceWriter operator from guava poc      * Added counters to track total time and bytes written.      * refactored HdfsExactlyOnceOutputOperator to use AbstractHDFSExactlyOnceWriter      * deprecated AbstractHdfsFileOutputOperator      * removed obsolete AbstractHdfsOutputOperator      * removed obsolete AbstractHdfsRollingFileOutputOperator      * removed obsolete HdfsOutputTupleInterface      * removed unused benchmark HDFSBothInputOutputOperatorsBenchmark      * modified HDFSOutputOperatorBenchmark to use fault tolerant writer      * Updated Fraud detection demo to use fault tolerant writer      * Updated map reduce demo to use fault tolerant writer
some refactor and new examples
"Access Control: refactor migrations (#592, #324)."
#NAME?
step toward bigger refactor
NOJIRA: Refactored
#NAME?
refactor to extract a couple of methods
refactoring: cleanup formating
Refactoring query date D2W component into _ajax package (and name)
Refactored LocalizableByDim to Positionable and cleaned up the respective methods.  Positionable does not extend Localizable any more.
Visualizer refactoring to allow plugable renderables.
Code refactoring in SPRedirect and SPPost valves. Fixed the error page redirect.
#57 refactor entities
HDFS-2560. Refactor BPOfferService to be a static inner class. Contributed by Todd Lipcon.
Field name refactory
"#58 Refactored worflow of MgcpTransaction. Added notion of message direction(inbound vs outbound), depending on who initializes the initial request (media server vs remote peer)."
Refactored all bpmn 2.0 marshalling which was spread accross the dto's in one service
Fix and refactor EuclidLinker
Refactored model.matrix implementation and added support for factors.
Refactor handling of headerFile and suppressionsFile
Ticket #39 - Project Cleanup: Refactor into Maven sub-modules - Part A
"refactor chart interface, fix compilation errors"
refactoring
show message if routing fails refactor GraphHopper initialization - works now
ABR test refactor Redis added
Page Fragments refactoring waiting API
"Revert ""refactoring + renaming LegacyKore"""
Small refactoring and added comments
Filtered option order ticket market data by the selected option contract. - Modified OptionMessagesComposite.requestOptionSecurityList() to subscribe to options properly when being passed either a underlying symbol (in  OptionMarketDataView) or a option root (in OptionOrderTicketView). - Added guards in various onQuote() methods to check if running thread is the UI thread - Refactoring and cleanup: a)  Removed unnecessary method onQuoteAdditional() from both OptionOrderTicketView and OrderTicketView b)  Refactored common usage to unsubscribe options market data into OptionMessagesComposite.unlistenAllMarketData() 
http://jira.jboss.com/jira/browse/JBIDE-1761 test for classpath refactoring added
Massive refactor and added new getters and setters with javadocs
Further refactoring of Bitmaps class.
ROO-435: Introspect an existing database to support simple automatic JPA entities - refactor packages
"Refactor: FactoryExecutor is no longer part of the domain, all factories were moved to the actions that used them"
Enable update reference in non Java files for Move refactoring
refactored the method createWordFreq with createWordIDF
Refactoring classes
"metamer+page-fragments: fileUpload: added fragment, tests refactored"
"refactored seesaw adapter to seperate out episode, series and brand adapters"
Refactoring to simplify implementations.
Deep refactoring of code prior to future evolutions
Refactoring
Added ChangeSignatureRefactoring.getAllChanges to simplify change and descriptor creation of other clients
Merging aggregation refactor changes to head
More refactoring changes for checkin support
changed show student group info from publico to external subapplication fixed show student group info severe bugs due to refactor and arch change
Refactoring: moved common logic to abstract
"Refactored name of command builder, to specify it a little better"
Continuing refactor of PDE solvers
Refactored to use SchemaFactoryWrapper
refactor analyzer the gzip thread
Refactoring JEE7
refactor class to new org.jboss.errai.client.bus package.
applied Sabine's patch for ISIS-70; also moved facetdecorators for help and i18n to progmodel (from runtime) in readiness to a potential refactoring as regular FacetFactory (see ISIS-69); also removed an array being returned from applib's Identifier class (ISIS-71); also minor inlining/removing duplication of methods in StringUtils (no JIRA ticket)
"IMPLEMENTATION of Update for Group (both native and NIS) * UpdateNativeGroupCommand.java + basic unit test. * UpdateNISGroupCommand.java -- TODO needs some testing on special NIS resource.   REFACTORINGS: - refactoring: OpCreateImpl, OpDeleteImpl - better naming of entry and account related variables. - cleanup of NativeAttribute (unused methods / fields) - refactoring UpdateNISUserCommand: sudoStart should be before the try/finally block. If something goes wrong in sudoStart, the program should stop immediately, and should not try to do sudoReset (that lies in the finally block). - united calls of getOwner script across all the NIS operations (AbstractNISOp#initGetOwner() is the central hub for all). - both Create/UpdateNISGroupCommand use the same logic for processing some output, so created a common method for them: AbstractNISOp#parseNisOutputForErrors(String outputFromCommand). - better naming in UpdateNISUserCommand.java, OpDeleteImpl.java, OpCreateImpl.java - erased unnecessary code from NativeAttribute. - doc update on SolarisConnection (needs review from Andrei TBD)"
"ITR-15 ITR-16 Développements cache pour les icônes des lignes de bus.  Refactor LineTransportIcon -> LineIcon, LineTransportIconService -> LineIconService. "
"Updated so that indexing status if flagged as PENDING. Fixed duplicate check. Improved logging. Refactored into shorter, more readable methods."
refactoring of ws bot tests
Refactor transpose name
refactoring
"[compiler, java5] refactoring: introduced module 'compiler' (compiler API), original module renamed temporarily to 'compiler_impl'; moved much if the Java language specific stuff into 'java5' plugin module  {test:broken} {{2hrs}}"
testgen: refactored some code for checking the depths of nested constructs
"refactoring, test infrastructure;"
Refactor AdminServiceInvocationHandler for generic handlers
refactored response status line to call static method
Refactor HistogramNd for better code reuse
Some refactorings
Roy|Alex: Refactored ClientNewDao to ClientDao.
refactoring
OPENNLP-182 Refactored to extend new abstract event stream class
Added #1 feature with a new sample module. Also refactor JUnit tests and utility classes.
Core: refactor type construction pt.1 (#340).
completing the memory -> buffered refactor
Refactored HttpDaemonTest for using ResourceInstaller
LOW / Refactored inspectors
Massive refactoring
WIP: Refactor of candidate services
"refactoring of writers, so that we can re-use the same approach for writing to external systems"
Index Engine Refactor and Support For Legacy Spatial Index
Refactored code collection and input classes to avoid naming similarity with annotation classes
"major refactorings of internal APIs, dealing with input data. Enable usage on a single thread, thefore removing the ThreadLocal"
Refactored the Block checks
"add rest method, add service URL to timeseries cache, refactor"
Refactored creating of library from artifact.
refactoring of the SecurityDefinition
moved all refactoring action from RefactoringGroup here
[LOG4J2-1354] No configuration reload is triggered under Windows when replacing the configuration file with one that has older last modified date. Refactor for clarity.
refactored getAccumulatedEctsCredits method
ECP-255: Refactors fixtures
Refactor how configuration warnings are delivered
* refactoring for EditGroupMembersVM relative to introduction of TwoSideListWithFilterVM
"Refactoring service / controller hierarchy. Instead of using org.deegree.controller.XYZ, the controller (protocol-specific classes) are not put below org.deegree.XYZ together with the reset of the service classes."
"Add a mechanism for inlining local vars, and turn it on by default. Warnings for ""ambiguous"" function definitions. Refactoring and renaming of some method names. Use ""="" optionality annotation in externs."
Refactor resources into another module
- request #226 Renaming: common base - initial implementation of find & replace on entity URIs - not activated in plugin.xml yet - also slight refactoring of OWLCellRenderer to allow customising
Refactoring Branch operations (3): cleanup
refactoring
"Authorization refactoring Rename FedoraPolicyEnforcementPoint interface to FedoraAuthorizationDelegate. Instead of passing principals to PEP/authorization delegates, pass the session instance. User and group principals added as session attributes. ServletContainerAuthenticationProvider adds the servlet request as a session attribute (so authorization classes can access request IP address, etc). Changed FedoraUserSecurityContext constructor to take a Principal instance rather than ServletCredentials. Added additional documentation for PEP/authz delegate and other methods."
moved some methods from Refactoring to Checks and ResourceUtil
Add 'reverse' attribute on @Order. Refactor slice query to support reverse clustering order
Refactored Widget (RAVE-729)
refactor some and add drawNow
"Refactored ch.spacebase to org.spacehq, reformatted code and line endings."
refactoring of saveCollectionSheetWIP methods
add refactoring artifactId test
Test utility refactorings
refactoring HumanTaskServer Service.. not working properly yet.. Adding new DefaultHeartAttackProcedure and Test
OperationDataComponent: refactor dialogs into a method
Refactored: moved the thread local from CurrentRun to DefaultSuiteNotifier
refactor special mapping to defualt codegen
#NAME?
Small refactoring
"PT-3063: Gene panels code cleanup - Added comparison by gene symbol if term list for two TermsForGene objects being compared is identical. - Added a TermsForGeneBuilder class, and refactored DefaultGenePanelImpl to use it. - Using VocabularyManager to resolve terms from features. - Added annotations for REST resources - Changed unit tests for DefaultGenePanelImpl to explicitly invoke the constructor. - final modifier is not useful in an interface, it only applies to the actual implementation - Fixed tsv import. - Removed unnecessary code."
Refactored: renamed CurrentRun->Run and DefaultSuiteNotifier->ThreadBoundSuiteNotifier
A little refactoring of the acceptance tests to make them read better.
Refactoring and adding new services
refactor thread package
Code style and refactoring.
EdmRefactoring: HashMaps removed from Provider API
refactoring the cucumber spec stuff.
Minor engine refactoring.
"moved the UI base classes to  package, refactoring thr CREDIT-127"
"refactored, extended RepoBaseTest, and changed string names to read from RepoBaseTest"
Refactored Invoice
Further refactoring for the MBeanServerManager
[Document Requests] Refactor: New PastDiplomaRequest domain entity to separate the current DiplomaRequests from the old pre-bolonha diploma requests.
"Integrate the GcodeStream concepts. 1. New top level API functions to queue GcodeStreamReader or a ""raw"" Reader objects. These are passed onto the communicator so the actual code flow is the same. 2. The concept of a queued command no longer exists at a streaming level. Commands are now added to the Controller then the next notification happens when each command is sent. 3. New command skipped event is available to the serial communicator listener, since the communicator must now decide which commands to skip. 4. GUIBackend - The API didn't need to change! But look at preprocessAndExportToFile to see how the GcodeStream* functions work. 5. New getRowStat utility for accessing send progress information, supports the gcode stream and queued commands. 6. Ripped out a ton of code related to the in-memory gcode array. 7. Refactored event dispatcher to allow events to go out on the same thread (for unit testing) 8. Lots of new unit tests. 9. Unit tests passing."
Refactored slave impl to allow for future non readable slave.
refactoring names
refactored to modules
refactor stuff relating to plugin metadata updates - separate test data files by logical subsystem; 
AMQ-5889 - refactoring and cleanup
core: long method refactor
Package refactoring:  com.nerdery.lnorth -> com.swnorth.nerdery
"refactored, fixed tests"
Refactoring package name
Refactoring to support adding more URIPolicy entries
Refactoring
refactoring batch update api
Major refactorings to the service registry.
refactor of MagentoSoapClient as a singleton to resolve the TimeoutException in multiple calls
"XWIKI-3429: Implement the new UI for the Link dialogs * Implemented the new link plugin UI * Refactored link creation and editing to use the wizard * Prepared LinkConfig to store reference instead of wiki, space and page so that no references are set on the client, but generated on the server.  Second iteration on the generic wizard."
CAY-1942 Refactoring of NamedObjectFactory and NamingStrategy
epic refactor: merging meta-repo and api into services
"refactor SyncRecords and add PubRecords and SubRecords classes that package up the info we need for morse code controller operations (inbound, the recordset iterator and collection name; outbound, the recordset iterator, collection name and sync token)"
refactor alert module
refactor for CRS functionality
Refactoring compression based extensions to use a common set of DEFLATE processes
Refactored code Fixed metric plots
PT-3020: Rebase and refactor.
core: [cleanup] refactor VDS vdsName to name
refactoring of AltResponse due to inconsistencies discussion: https://discuss.graphhopper.com/t/463
refactor: Activator.matches -> Activator.isActive
process refactor
BiobankService refactored
refactorings
Refactoring of ORecordSerializerJSON
TrackMate_: WIP3: major refactoring
FORGE-2246: Refactoring the JPA Commands
Fix & refactor
Refactoring of IChannelEvent interfaces
Update and refactor UI preference pages
#802 - Find generics on findIds() - refactor internals of find ids to use find single attribute
"Check in #195951, 195958 Fixed by moving the script to callback method, so as to avoid string eval issues in script. Refactored image interactivity renderer Fixed a unit test fail in Linux platform"
PR #38624 (refactor HttpRequestExecutor and AsyncHttpProcessor)
smaller webview client refactoring
Refactor code
Refactor Index and introduce FixedIndex.
Imran: Refactoring
JBRULES-713 Make Dialects Pluggeable -more refactoring to get things closer to pluggeable dialects
"Restructure projects, refactor some utilities into separate project."
DDF-20 Refactored Validator to MetacardValidator
refactored some classes and added a utility method on the API session that will allow to execute any TemplateAPIRequest derived class
JCBC-390: Refactor ClusterManager
"refactoring out the example request, response logic for better handling"
"fix refactoring Script#equals, hashCode"
#NAME?
Refactor servlet name
"After #94: Improved ATNA auditors, refactored audit strategies"
Refactored the annotator module. Added a result.filter package. Added a query.generator package
fix 1430 for genotype filters; refactored filter() method; added unit and integration test; more comprehensive fix must be done first on htsjdk side in JEXLMap (#1456)
Part refactoring of abstract task as generic non-iterative control flow task.
[CORE-91] Added action + refactoring
Refactored class names and add comments
Refactored common code
Experiment and excel writer refactored
MAHOUT-513 - Created interface GaussianAccumulator and two concrete implementations:   - RunningSumsGaussianAccumulator uses running sums approach   - OnlineGaussianAccumulator uses Knuth (Welford) approach - Added unit test thereof which produces significant std deviations and drastically-odd   variances. I'm committing this so it can get more eyeballs. It is not used anywhere yet. - Refactored CDbwClusterEvaluator to use RunningSumsGaussianAccumulator and   existing tests continue to run - Cleaned up logging in various clustering algorithms to increase use of debug vs. info   to reduce log clutter All tests run.
minor refactoring
security  refactoring
Refactoring of the parser and the evaluation to use a more consistent access to the nodes. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=73670993
"ACT-60 more refactoring configuration, persistence and test"
Finishing off GRECLIPSE-1192 (no tests yet) Some refactoring of the codeassist plugin.  Created new packages and move classes around.
jpaManager to PersistenceContext refactor
some refactoring
Finished refactoring for use in Seller Portal.
"Ratings, Wiki, Refactorings."
Resolve #180 - refactor pmd processors
Refactored code
"JBRULES-1625 Create Scheduler API with JDK implementation -Basic refactoring for for TimerService, instead of Scheduler"
Refactoring AnnotationLibrary
#NAME?
"JERSEY-2115: Fixed selection of the resource method annotated with @Template. 	- Refactored validateMethod and handlingMethod of the Invocable. 	PS2: copyright hedaers fixed 	PS3: test fixed 	PS4: review comments incorporated"
"[#LIB-155] Refactor configuration | heavy update, maps support"
! refactor the AuthToken to remove role/privilege pattern from the AuthToken (AuthToken is not the right place to have this functionality)
ROO-3717: Refactoring of service commands
Custom Fields UI work for viewing fields defined for one category. Refactoring to eliminate LookupEntity and use equivalent  MifosLookupEntity uniformly instead. Next step will be removing LookupEntity. Introduced LocalizedTextLookup interface to support mapping enumerations to localized resource bundle text.
Unit tests refactored
SWT plugin refactoring (#fixes 1028)
Refactor core packages and maven project
"Review of the recent function/service operation commit.  Small tweaks:  - reformatted to conform to project conventions where necessary  - addressed compiler warnings  - changed OCollection from a class -> interface, made immutable, added builder  - per suggestion, renamed old toTypeString method -> getFullyQualifiedTypeName, removed deprecated methods  - Refactored the EdmType hierarchy a bit, the base type is now called EdmType, the old EdmType is called EdmSimpleType, EdmComplexType now inherits from new EdmStructuralType, to share code with EdmEntityType   - no modifications to the new O* hierarchy yet, although we should probably do something similar"
Java code Refactoring
CXF-5576: Initital support for CDI integration. Refactored JAXRSServerFactoryBean instantiation flow.
Refactoring of the repository in order to use Maven for the compilation/setup.
Fix violations / improve documentation / refactor some code
OBANYC-2112: Refactoring - Moved caching classes to a new package in the onebusaway-nyc-presentation project
"refactor vlunscand scheduler to enable replacement with quartz - phase 1 - joed, brozow"
Refactored inventory and configuration reports.
Refactor observed collections to include factory for handlers. Simple case of one listener is dealt with neatly at the expense of type safety.
Minor refactoring of Report
"Refactor, remove unnecessary ui robot usages, also make tests runnable in a less specialized environment."
Refactoring date/time handling (http://tracker.deegree.org/deegree-services/ticket/301)
"Refactored some behaviour to base classes to ease the FCGI implementation, and taken the chance to remove redundant code."
Refactored to remove getServiceName() methods from services. Service name defined in config should be enough.
Refactored method names for booleans
"Some basic refactoring, cleaning up"
Refactoring total overhaul of api and client structure and adding android maven client build.
Refactor benchmarks.
Refactored normal biomes
Refactoring to change access to properties
Refactoring FileDownload util to be a part of biojava-core project
TAJO-528: Protocol Buffer wrapper ???? ?? ? ??? ??? ??? ?? refactoring
cleaning up / refactoring code preparing for additional autoresolution enhancements
STS-2640 Contributed standalone module factory through wst extension point and refactored computation of publishable resources from the standalone archive to the standalone module delegate. Fixed problems with update restart of standalone applications.
refactory in progress
Emails Refactoring - Departamento and Investigação Portals
Added union operator and refactored
#37 : Refactor EL API
Refactoring to reduce ProvisioningManager methods and move as much as possible into AbstractPushResultHandler / bstractSyncResultHandler from respective children
* Refactored backend status fragment to not use ListViews. * Removed horizontal line drawables and repalced with Views. * Renamed backend status list item layouts to be more consistent
refactors and better binary estimates
Refactoring to remove wrong/unnecessary methods from KernelControllerContext. Also fixed some generics while there.
refactored access to next trafficlight
Refactor package names...
JBEHAVE-294:  Refactored step pattern parsing to produce a step matcher used by the CandidateStep to match steps. Default impl is regex-based but other non-regex impl could be provided.
httpd: Refactor handler instantiation
Refactored the TransactionTable.
"further refactoring, bug fix for type filters"
Proposals code refactoring
Refactor Executor into the main package for great winning
#JC-1139 markAllRead test refactored. Add new tests to last read post
Refactor the parse method
index API refactoring
refactor tests
Refactored for better inheritance
Refactored: use get/set accessor naming style in DaemonConfiguration
#NAME?
refactored ArrayStock in right package and changed visibility of class/methods
minor refactoring and added class file
Slight refactor and renames
Refactored BackupTaskTest to enable reuse of common features inside the class.
refactored code to use paging
"1.removed localeId which can be retrieved from personnel; 2.refactored ReportsDataService.java, and the report design DetailedAgingPortfolioAtRisk.rptdesign accordingly. <wenjing & eric>"
PreviewUI: refactored partial graph behavior in PartialGraphImpl class.
major query result handling refactoring
Refactored example and added JPA facet to it.
[MOD] Locking: Refactorings
* Added TableUtilities.allAreNull() and TableUtilities.allAreNotNull(). * Added the package org.cishell.utilities.dictionary. * Did some refactoring in StringUtilities. * Added various utilities in StringUtilities. * Reviewed by Joseph.
Refactor clean architecture project
"Added support for generating integration tests, fixed JavadocApiMethodGeneratorMojoTest, refactored ApiComponentGeneratorMojo to only generate component classes, refactored plugin tests"
refactor test to parse actual schema
"consolidated: - configuration names, types - refactoring: getNisPwdDir(), isDefaultNisPwdDir() - introducing concept of rootUser vs. loginUser (TBD: alters to SolarisConnection)"
Refactored to support moodle.e-ope.ee online unit tests
JCBC-674: Refactor prepared statements.
SQL Module: Refactorings
ISPN-1424 Refactored StateTransferManager and related classes.
"Resolve remaining broken links to logs outside job dir * JobResource.java     refactor, improve printLinkedFile * EngineApplication.java     remove debug output"
"big refactoring including data set based plugins, adapter first approach;"
removed init method from RefactoringWizard
Leverage new icon feature in Isis 1.8; enhance fixture; refactor Occupancy
refactor ra module
[CXF-4769] - Refactor STSClient
Refactor SPI modules to make implementations independent
Minor refactorings. Added unit tests
"Refactor gravity kill tracker, fix players who jump a lot being tracked as falling"
Refactor to new meta data api design
Refactoring of class structure for metric configs.
Deep refactoring of environment. Step 2
"major structural, but no-op refactor to support #174"
refactoring for MultiTransformation
Refactored to support subresources resulting from subresource methods.
Refactored neural package and sub packages to use the graph package as its base. Fixed the bayesian network unit tests to no longer use random values.
HBASE-7110 refactor the compaction selection and config code similarly to 0.89-fb changes
Removed Spring injection for MongoDB - turned out to be shit. Refactored class names to better reflect the new structure with Function Library and DAO classes added. Cleaned up various parts of the code.
Refactor packages.
make a refactor for Dte query definition
refactors to fix showHelp
"refactoring some class and method names. Also fixed hashCode and equals for OWLPropertyItem to prevent duplicates in Sets, and therefore the dropdown list"
"grammar refactorings, token api changed and Lookaheads boolean expressions reduced"
slight refactoring
TcpSocketReceiver refactor
Finished refactoring.
package refactor
[refactored] dataservice - switched multi subscription test cases package
API refactor
Refactoring and code cleanup.
refactoring
Major cleanup and refactoring of Engines.
"Did some refactoring around the unit test to make them more intuitive, and allow for users to follow exactly how spring data rest, in conjunction with hateoas works."
"[ANA-112] Refactored the Newton multi-d rootfinding completely. It's not perfect, and a large part of YieldCurveBootStrapTest is commented it out, but I needed it in so I could continue work when away from the office."
Some tweaks to the Remote API and minor refactoring.  Now can pass null architecture for noarch default.  Migrated a misplaced method from ContentUIManager to ContentManager.
Refactor test
"#566 - Refactor internals - SpiExpression, add prepareExpression() to merge queryAutoTuneHash() and queryPlanHash() - sameByPlan() & sameByBind()"
migrate jdbc-connector application - fixing a JSP error - refactor jsp.inc by jsp - replace SPring factory with JEE Bean CDI - clean code
tidying and refactoring
Refactor FunctionImportParameter
Back porting to 1.9.x: Refactor FormResource-related code to use the newly-refactored interfaces - TRUNK-3039
1) Refactored IE Queue Listener 2) Remove non printable characters from all incoming messages
ISIS-1237: renamed api-docs/index.html to swagger-ui/index.htm; updated about/index.html; refactoring and extending the main service
Refactor ApplicationMaster to reduce duplication and improve consistency
"refactoring of CLI is now complete, ExperimentCli is updated"
refactored name of uima to nlp
Mostly working after big refactor to deal with EmptyNodes which don't yet have their value set - should hopefully clean up semantics. Has shown issues with transactions and create/edit combo creating unecessary history
Refactored HA-JDBC config loading.  Now each cluster needs its own xml file.
Refactoring of the UnitOfWork and Repository interface.
refactor HttpApiServlet dispatcher(s) retrieval
Completed refactoring to org.jcryptool.analysis.viterbi
refactoring. change to a multi-module project.
refactoring.
Refactored and reworked evaluation tools
WYCS: reasonable refactoring
"1. Massive refactoring :   - Extracted the Filters   - Confined Javassist dependency to dynamically loaded classes, to allow javassist.jar to be put in the application's classpath instead of the agent's classpath 2. New AnnotationFilter 3. Upgraded documentation"
"Refactor UI and PostProcessing, trying to fix the click-through problem with panel animator mouse events, but it looks like the Stage will receive events in any case, no matter canceling, not bubbling or handle()."
schema class  refactoring
"More refactoring, bug fixes; added ItemDefinitions->structureRef indirection for property sheet labels and text field contents"
Refactored checks if expression is variable or function. Introduced central method for this in TestContext. 
Refactor bone
"add mdx saving support, refactoring, ui changes.. not finished completeley"
refactoring DataSourceDefinition to use 'generic' Resource
Some more project refactoring
"Refactoring and improvements to evaluation. Now lives in online, out of test, and includes an AUC evaluation."
"refactoring to separate shortcuts from edges: storage and logic, not yet working tests for CH"
"Added listSpotVMRequests, some common method refactorings"
refactor alert summary module
Refactoring of core tools.
"Refactor graph code to eliminiate ResponseTimeModel.  There's some KSC breakage, but that will be fixed once some more refactoring is done."
Refactored the binding expression class
"[features] new annotation package, rectangle viewport, colormap test cases, tesselated polygon [refactors] colormaps, viewport layouts"
Kickstart zip file + BPMN refactoring work in progress
refactoring resource engine directories;
"[KARAF-1541] Refactoring of the jaas commands, using shell tables and arguments"
Refactor parameter objects
Refactors comment handling. Adds w.i.p for formatting preferences.
EST-501: Refactor module; create import api
Refactor bucket creation
* Refactored POMs * Updated to use latest WeldX & JBoss Logging * Began @FlashScoped request query-param enhancement (probably still broken.)
"Core: refactor update operation, pt.8 (#935)."
- Chapter 11 tests refactor
Refactoring of the bioassembly to bioassembly list
Refactoring of remote services api and rest api
Refactoring Launcher component for C5
Web-App to return 400 or appropriate status for bad requests. Test case refactoring
Refactor PluginManager into PluginService and LegacyPluginServiceImpl. Add unit tests.
Refactored WordParser tests
Academic Service Requests refactorings
refactoring
general refactoring
Refactor component generator api to have fewer dependencies
Refactoring package structure
SLICE-114 test refactoring
SONAR-7003 Refactor batch issue tracking
"Adding more testing, fixing typos to make higher coverage (removing unnecessary try-catches, bit of refactoring)"
engine: Refactor InterfaceDaoDbFacadeImpl
api_refactor: refactor template apis
Refactored: use the CMS algorithm presented by Dijkstra
"Refactoring of novelang.batch.Main in progress, tests added"
minor refactoring of target runtime access
Servlet refactoring and created a test case for the servlet.
renamed KeyStoreFactoryBean.passphrase to password
refactor  measuredData to measurementData
"refactor connection interfaces to require an apiKey, remove login/basucauthlogin and only support apiKey as an authentication mechanism"
refactor the jdom based modello plugin to use a more reasonable name.
"Added some doco, refactored apis."
"merge of development on internal branch.  Support for cross-building JNI code for Windows, and refactoring of abstract loader support."
Refactored logout JSPs to LogoutServlet.
Refactoring
SWITCHYARD-1217 - Updates to let the tooling build and run with the camel refactoring
"Refactored away CollisionGrid, Vehicle is now the baseclass, and Island is now ImmobileVehicle"
"Refactor conditions to remove get, is and has prefixes."
"* refactored a lot of things in routes to make the APIs consistent and clearer * cleaned up a lot of places that had leftover exceptions being thrown * broke your code if you were bold enough to use this before i removed the word ""EXPERIMENTAL"" :)"
Refactored all the access of Session via ClientSession to us the SessionLookup accessed through the NakedObjects repository.
Tests added to ErrorScannerTest to check the refactoring. Some more tweaks and bug fixes to ErrorScanner and JMeterMojo.
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
"Added Provider code gereration, required move of ASTClass* to main package Refactored InjectionFragemntGenerator to use InjectionBuilderContext for initial construction of dependencies"
More refactoring. This commit comes before removing lots of old topology code.
minor refactoring
very minor refactoring for clarity
"EST-501: refactoring KeyTable, BudgetItem, layout improvement"
Refs #3454: Refactoring only: Creates a Mediator class for NetworkMainPanel in order to remove calls and listeners to cytoscape services from the network UI components.
refactor sitemap to correct google identified xml formatting issues
"Commit safepoint, halfway through Pax-Build refactoring."
Refactored Addon Waitlist and loading
refactor DomainManager module
Refresh Javas: refactor getting the full class name given a .java file
Refactored User out of Category (RAVE-729)
o Refactored code
refactor to 2 modules
Fixed try..except printing Refactoring Parser/TreeBuilder structure
Refactoring. Adding copyrights info and NON-NLS
Refactorings for DDL parsing inclusion and diff analyses
#57 refactor entities
Refactored stubs into a hierarchy (to make it easier to work in 3.5)
Refactored  some stuff and did a few events
Refactored VTerm into separate module  Created New ShellChannelFactory Interface.  Added Custom Viewer Menus.  Added Icon Focus Glow.
Adding support for BKM and refactoring expression evaluator
[PLAT-3761] Refactor of test output report wrappers. (cherry-picking from commit 8bba311c93ad482824d015ea55333d6e8f561efb)
Refactoring.
refactored xodr parsing
Refactors SequenceFileStorage and friends to simplify WritableConverter implementations and client use
some refactoring
[US 2] Finishing the refactoring (for now) of the classes and tests involved with loading resources.
Refactoring of static imports support for junit testing
Issue #680 - new persistent menu types added and minor refactoring
refactor
Refactored
Further refactoring / Bug fix for problem reported by Mike Curtis
Small refactoring change
Refactor InfinispanBatcher to support interposed txs via reference counting.
Refactored: moved array looping logic up to UpgradeOrderDecider
Refactoring the InputRegistry
#NAME?
"Further refactoring to allow per-type format, serialization-inclusion defaults"
Refactoring from WebUtils: getMenuItemsForHierarchyLevel to TreeNodeService getParentForLevel to WebUtilsService
minor refactorings to make it easy to implement a resolver and avoid wrapping any underlying exceptions; also added a very rough initial spike of a MINA module
Refactor role-user relationship to an explicit object.
refactoring and correction to build of mib generator
Additional intellij refactorings
Adds Word class and demonstrates its use in DictTest.java.  Refactored Dict class and IDict interface to take advantage of Word.
Refactor: me.neatmonster --> net.xereo
Refactored to proper package.
"Further improve, refactor and fix activity listeners"
"QUERY-1 Meta data gets collected during initial annotated type processing, refactored query builders to be injectable."
tests refactoring + additions by Yegor Bugayenko; http://java.net/jira/browse/JERSEY-652
"GPF refactoring: (1) AbstractOperatorSpi removed, OperatorSpi is base class (2) ParameterConverter is now a property of Operator"
Refactor Git repository helpers
refactored core tests packages
Refactor context editor code drastically and add new functionality
refactoring modules. issue: [1]
some refactoring and more tests
Large refactoring towards usage of the new App facade. All tests are passing now.
"refactoring to add PaperRecord object, WIP added merge functionality"
ROO-2745: Post 1.2.0.M1 code refactor and clean up - refactor and cleanup
Server refactoring
"Removing some unused classes, and refactoring some abstract classes to be concrete and final"
Refactor script generation code.
refactoring
added refactor to make it easier to create endpoint instances from a spring.xml with minimal constructors for https://issues.apache.org/activemq/browse/CAMEL-505
"Add checksum verifier tool, with a bit of refactoring to share code."
"refactored test suite according to Luca recommendation. Now will be able to test behavior when databases are shutdown and reopened---wasnt possible with old TestSuite architecture. This was a pain in the ass---cut/paste hell. Now the stage is set for some more test cases... all I do, it seems, is write test case after test case after test case... when can I play with what I'm testing."
refactoring
"minro refactoring, cosmetic changes"
"More refactoring, changing ""cluster_provider.impl"" to ""discovery.impl"""
refactoring and reorganizing tests in features sub-packages
refactor method name
refactory sparkstreaming
Refactored: avoid *Impl / TransactionImpl
" ItEr29S16CUCreacionProxectoCategorizacionTraballoItEr10S11: Refactoring Order, now it is a subclass of OrderLineGroup."
"javascript complete interface, code cleaning, refactoring, logger interface"
metamer: autocomplete: tests + bean refactor
"In the middle of some cleanup and refactoring based on a meeting yesterday. Abstracting out most of the Sets except for FeatureSet to allow for easy implementation with new types of backends Also refactoring and cleaning up some of the interfaces to make for a cleaner API only in the base model directory and the factory directory Als, enforcement of the ID field in Feature to ensure that we can properly create rowKeys in HBase"
refactor createInitializerScript so that it can be overridden in sub classes again
refactored the trivial inference visitor to have the name vacuous axiom visitor which I think is clearer
Support for central services and various -minor- refactorings
Refactoring
improved documentation and refactored model supplier interface
"Started to refactor/cleanup this component. Stuff in org.neo4j.graphalgo.path will be kept, whereas org.neo4j.graphalgo.sortestpath will be removed rather soon."
Refactored Annotation and ConstructorOfClass matchers into an abstract base class and two implementation classes.  Provides access to the matched node.
merging person-refactoring branch into trunk
refactoring after erik fix for FigisDao.class
"Refactoring. Unit tests all succeed now. However, more tests are needed."
MAHOUT-933: - refactored ClusteringPolicies into hierarchy under new AbstractClusteringPolicy - added close() to ClusteringPolicy to allow policy-specific actions needed to compute convergence - removed ClusteringPolicy from ClusterIterator constructor as ClusterClassifier already has one - added convergence computations for kmeans and fuzzyk - added final clustersOut renaming to add -final suffix - updated Display examples and unit tests to reflect above - all tests run
remove resthub-test-core (re-integrated in resthub-core) and refactoring of spring-test-dbunit aretfact to resthub root directory
batch refactoring
refactored GpioController for multiple provider instances
#NAME?
Refactored: moved guinea pigs inside SimpleUnitTest
Refactor skipCheck -> unchecked
"Removing dependencies between tests, refactoring query cache tests"
simple refactoring - rename
* refactor 3
ISPN-4367 Refactor Map/Reduce based MassIndexer to avoid Serialization of intermediate work
#NAME?
Refactor code includes: 1. Provide customized series UI providers 2. Provide customized icons and descriptions for types and subtypes
tests refactoring
[MOD] From refactoring... [ADD] A RevisionRootPage cache. [FIX] Serialization of revisions now wrapped in a root-element.
* errors in proxy implementation (tests are still todo) * refactored structure of Tester hierarchy
First pass at refactoring the deposit interfaces into export interfaces to be shared between export and deposits.
"Refactoring, URI reading of input sources"
Various minor improvements and refactoring.
refactor KOREtoKIL
ISIS-209: improving back-button handling in html viewer - don't clear out actionMap on every request (plus refactoring/reformatting tidy up)
ABTest refactor and Bug fix
More refactoring on the CSS compiler.
Major refactor of the MeasurementService
webdav: minor refactor
slight refactoring
refactored code
Refactoring to adopt the new juitar-monitoring SPI design.
Refactoring.
Refactor GLProfiler for use in OOP to suit better with Lwjgl3. Fixes #4515 (#4539)
test refactor
"- Updated outline icons (patch from Laurent Dore) - Refactored actions in the outline to have a common base - Override refactoring not adding ""__builtin__"" for overriding __builtin__.object"
#NAME?
More refactoring.
#930 - Refactor (renames etc) for SQL Server History support
BISERVER-8578 - refactoring WorkspacePanel to cleanly add a new panel for managing blockout periods.
Refactoring of cardinality constraints to make them easier to understand. Precursor to factoring out a Cardinality object (if necessary)
Refactoring. And continued with basic actions
Refactor await package to conditions await proxy
[ISPN-9] (Eviction redesign) refactored containers
Fixed (and refactored) list mangling + tag filtering. Closes #20
"Refactor to remove duplications, and removed unused code. Before allowing any number of users"
testDoTransaction_refactor
Refactored: renamed ReferenceFactory -> EntityReferenceFactory
Refactored: renamed packages
Refactor edit tool.
Refactoring: Remove method from RepositoryReader interface
photo refactor
minor credentials api refactor
OPENNLP-221 Refactored and extended the Argument Parser to also accept Charset types. And added the new Charset parameter to the BasicTrainingparameters interface. 
* Code changes related to renaming of InterestRounding to CurrencyRounding is spreadsheet model. * created flatInterest subdirectory for flat rate CSV test data. * Added test cases for refactored flat rate interest calculations using 360 day years as testcases-2008-04-23.set1.xx.csv.
More refactoring of parsed results / result parsers; added basic vCard support
refactor all projects into sub modules
start of some refactoring; move the column replacements out into their own classes
NestedBeansHandler generated name fix. Refactoring of MC IoC annotation handling - plain bean metadata usage vs. controller context usage.
refactoring
"src refactor, take 1"
refactor dataGen
Refactor MemberShip to Membershipke
code refactoring+specification diagrams
Refactor and deprecate TransactionAspectUtils
1. MapTransactionTest refactored to use AbstractionWorker 2. Added a property to select TransactionType
#NAME?
[PLAT-2889] Refactored bean building in the blotter
"Initial comit for test_DataAccessManager.js. While working on the tests for DataAccessManagerRemote, I discovered that the mapping for the EJB in RemoteClient was inconsistent with the mapped name in JNDI. This resulted in a NameNotFoundException. I refactoring the property in RemoteClient to DataAccessManager so that it correctly maps to the JNDI name."
140183 [refactor][script] extract superclass does not pull up methods
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
minor refactoring and removed unused imports
"BISERVER-8060 Modify Export logic to use Handler classes as Import already does - Refactored for better OO design. BaseExportProcessor is extended for Simple,Zip ExportProcessors. Also includes fix for empty folder names"
"refactoring, make sure the data files store is not fixed to the data directory, should help make junit tests easier"
HTTPCORE-109: Refactored AbstractIOReactor shutdown process. The I/O reactor will now attempt to terminate all running sessions gracefully by calling #close() and waiting for the termination process to complete within a given grace period and only then force shutting down still active sessions
[KARAF-1405] Refactore of the config layer [KARAF-1190] Remove property filtering
Small AbstractFuture class refactoring.
refactor sql parser.
refactored the creation of the HttpUrlConnection objects to a factory
97306: [5.0] Unexspected error in Infer Type Arguments refactoring [refactoring]
refactored the file splitting tests to remove code duplication
PAXEXAM-858 support composite repros + larger refactoring of structure
"More refactoring, javadoc'ing"
frontend: Console code refactor and cleanup
Refactored the excludes to another method -- cosmetic change only
refactoring
refactored HttpConnector for EWYK - work in progress
refactor testcase.
Refactoring: moved some methods from CLocalVariable to CVariable and CModificationVariable.
Refactored for better maven compatibility
Some refactoring for readability and added possibility to provide required message
Refactor RangeEnd
refactored project initialization to second page to hook into the progress monitor
Refactored toolabstraction of maven.
Refactor to remove unnecessary code and to improve quality of the code
Refactor tests
Refactoring Android Classes
"NMS-4850, refactor Linkd to use Hibernate instead of JDBC"
Bug 295638: [refactoring][actions] Use ImportRewriteContext everywhere
Minor refactorings
"refactored validator, now also supports embedded"
Refactored. Redirect added.
Started refactoring validaiton
Bug 255932: [api] Make RefactoringSaveHelper API (moved from org.eclipse.jdt.internal.ui.refactoring to org.eclipse.jdt.ui.refactoring)
#NAME?
Refactored: TaskScheduler
Refactorings for bug 342302: Move AdapterFactory into application scope
refactor resolver
unit-of-work AOP refactoring
"PLINK-268 refactor, moved permission handlers into API package"
Refactored
refactoring Resource to StereotypedClass in some cases where a @Component is also possible to be found
"refactor, moving out from main-method"
And refactored back
Refactored DsfSequence class (bug# 159048). Also added tracing of executables that were garbage-disposed without ever being run.
BZ-805899: Refactoring concurrency persistence tests. (cherry picked from commit 3958d80d0be478af7a810f0f2681195ce7e5ea97)
SHIRO-395: Refactored BeanEvent mechanisms to work with the EventBus concepts.  Updated ReflectionBuilder to have first-class Class representations of configuration concepts.  Event ordering discussion TBD on the dev mailing list.
major refactor
Refactor and fix unit test
" ItEr28S14RFVistaGraficaInformacionAvance: Refactoring method name from ""getLastPercentage()"" to ""getAdvancePercentage()""."
Refactored RICache to support the new CacheEntryExpiryPolicy.
Another Attributes refactor.
Refactored to put the SailConnectionListener in the right places.
refactored glyph to icon in the layer and legend.
"minor refactoring of cycle API in order to display file type (content-type) information in the UI, made ContentType an enum and added a ContentType property to ArtifactType"
"Cleaning up code, refactoring daos"
Refactor UIBuilder to be more accessable.
refactored the components into the camel.component package
"Significant refactoring - now storing local user details profiles as connectiondata rows in UsersConnectionRepository for a springSocialSecurity provider.  This enforces uniqueness of local usernames.  Fixing issues #2, #6, #9, #10"
More refactoring
[Archi4] Refactor Diagram Figures and Figure Delegates
Refactoring: replace some static mocks with dynamic mocks
refactoring controller to use the content type inteceptor
* Hardcore refactoring
refactors
Refactored ServletTester and ControllerTester.
Add ActiveRegion tests and refactor
new interface method: getStatisticsByUsersByRecordType() + refactoring
Refactor HarakiriMonitor into its own package
Refactored zip utils to work with adjusting timezone offsets
Refactor dos repository.
Refactored Viewers to new VB2 api.  Added default content viewers.  Update DnD classes. 
Refactor LoggerWriter into two classes: LoggerWriter and LoggerWriterFilter. The old LoggerWriter is like the new LoggerWriterFilter which subclasses WriterFilter. The idea behind the new LoggerWriter is that it does not need to carry and write to another wrapped Writer. This is what I'd want to do in JDBC for example.
refactoring
ISPN-263 Handle cluster partitions * refactored: moved cache specific logic from ClusterTopologyManagerImpl into the ClusterCacheStatus * This makes it easier to take rebalance related decition at cache level.
Refactoring Samplr implementation into RequestManager
Refactored: merged test classes
Refactor menu
cleanup after pr review for util package checstyle refactorings
Moved refactorings under ProcessorBasedRefactoring
Refactoring and improvements.
refactor project
Refactor common code for greenmail tests into a superclass.  Add a new test for multipart messages.
OPENEJB-1410 Dynamic DS routing. - Apache headers - indentation - refactoring - test case completion - javadoc
Refactored stuff.
EST-801: refactoring of Document generation.
Refactoring and unit tests for RequestFilter and related classes * BeanNameRegistrar and SpringReader are marked deprecated - to be removed. * Changed primary source of RequestFilter config parameters from context-param to FIlter’s init-param (context-param is still recognized). * RequestFilter configuration parameters are now read with Spring’s helper class. parameter names have changed to camel-case. Old words-separated-with-hyphen names are also supported. * ShutdownListener is now handled by RequestFilter. Objects other than RequstHandler can also implement ShutdownListener. * Implemented tests for RequestFilter and RequestMapper.
Refactored some duplicated util classes into org.opennms.core.utils.
"Refactoring of binary protocol NetStream. Added a generic model for binary protocol, and a default server."
Refactor EditableTransferHandler
download tileservers list from server refactor map download to use same download method
lots of work on in-memory mapping. fixed a bug in Transpose. general refactoring.
Refactored class name
Small refactoring
Major refactor of legacy layer. This is the initial implementation that is simply a pulling apart of the old LegacyUtils. As a consequence the code is getting uglier before it gets better. Further refactoring to follow. Specifically the new Harmonizer class is large and should be broken into even more classes. And Harmonizer and DefaultImageTranslator initialization code depend upon each other in a circular fashion.
"more refactoring, just use one flavour of integrator"
"Refactored OSMImporter with support for indexing OSM nodes as points of interest, preparation for supporting geometries from OSM relations, and a solid move towards being able to choose either the batch inserter or the normal graph api mode for the import."
refactoring request handler
"Ticket #39 - Project Cleanup: Refactor into Maven sub-modules - Part B   1) Removed redundant code from opentripplanner-api-webapp   2) Moved org.opentripplanner.jags.[gui,gtfs,narrative] to org.opentripplanner in opentripplanner-routing"
refactor
Reworking/refactoring of org.eclipse.ecf.provider.datashare plugin
Refactored to extract common implementation details.
"jQueryUI: Confirm[Ajax]Button, minor refactoring"
[refactor] Rename tycho-surefire integration tests
Refactor to remove code level references to rumors.  Code/model now uses xmpp. Repo side is now provided as a subsystem.  Without subsystem the nodes with aspect canned query would be fired before database is setup on a new alfresco instance.
refactor decouple tree menu and data (2)
refactored JQMRadioset & JQMRadio to support UiBinder examples
Refactor of stateful-exchange-protocol features. Removed dependencies on WSA from BPEL engine core. Made session-ids a  first-class concept in the engine. Moved session-Id/EPR manipulations to the integration layer. 
Refactor common pattern into a new method.
Merge r1617055 from trunk: YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)
refactor
"refactoring specs/integtests, per ISIS-463 work"
Refactor BtVodUpdater for readability
Refactor compilation of GCC plugin
#NAME?
Minor refactor to ProcessWorker. Rework Directory calculation of relative child paths.
Refactor package name
Refactored the catch block checking code to include try/catch/finally blocks.
refactoring so that ws-a can encounter any namespace prefix value when overriding-adding new wsa properties
Refactoring
Refactored some code. Renamed localized properties from description to name (including DB update). Dropped unused columns from Env related tables.
#POULPE-475 refactoring tests to be more readable.
Added some interface types to allow easier handling of selections. Finished refactorization of generic types.
ACT-1021 Refactoring: Moved error propagation code from ErrorEndEventActivityBehavior to separate class ErrorPropagation
[refactor] Implemented InVM Scala compilation and commonised aspects of the Java code
Refactored
Refactor cpd.FileFinder to pmd.util.FileFinder.  Old class is now @deprecated (and unused within PMD itself).
"Refactor to handle Android Issue 12117:	ServiceTestCase.startService(Intent) does not trigger Service.onStartCommand()"
Refactored LeanBaseModelSerializer
HIVE-9133: Refactor CBO (Laljo John Pullokkaran via Sergey Shelukhin)
Ticket #39 - Project Cleanup: Refactor into Maven sub-modules - Part D     1) Rearranged tests in opentripplanner-routing to better match updated package structure
refactor data motion service for volumes
refactoring to we get out props at startup in sync with ERXProps
Refactor Mongodb interfaces
Started refactoring the svn and scm components.
continue refactoring of clientCustAction - clean up use of deprecated constructors of clientBO
Refactor the SSH session state
refactoring
#NAME?
Refactoring; Readded test
Removed TrueBlod vampires for now and refactored some.
CDIPerspectiveTest added + huge refactoring all cdi bot tests
Refactor codes
#JC-1428 Refactoring MentionedUsersTest to be more readable and concise. Should be refactored improved further.
refactoring of concurrent test
This change refactors the search 'images' and 'impc_images' facet tests to use set difference validation.
TokenManager refactoring
Refactors forge.ui.bot.test
Refactor HR security tests and minimize number of sever starts/stops
Module refactoring
* moved most of the painting logic into SpimViewer. * basic strategy for switching screenImage resolutions and mipmap levels adaptively. * some refactoring.
notification refactoring
DATAJPA-64 - Refactored query execution to use ParameterExpression.
WIP Thrift refactoring: Reference method owning class by ID to avoid cycle
Refactored setup of bundle resource resolver.
"JBRULES-668 model upload + refactoring, more tests"
Minor refactoring and cleanup
HADOOP-1574 Concurrent creates of a table named 'X' all succeed M src/contrib/hbase/src/test/org/apache/hadoop/hbase/TestTable.java     (testTable): Add checking of actual exceptions thrown and     assertions that we are getting right behavior.  Add a test     that has ten clients concurrently trying to create same table. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HClient.java     javadoc edit. Fix debug message that could give impression     table was found when it wasn't. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HTableDescriptor.java     Added comment on table nameing. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMaster.java     (createTable): Refactored. Bulk moved to a private override.     Changed how check for existance is done. M rc/contrib/hbase/src/java/org/apache/hadoop/hbase/HRegionInfo.java     (getTableNameFromRegionName): Utility method added. A src/contrib/hbase/src/java/org/apache/hadoop/hbase/TableExistsException.java     Added.
 ItEr34S07CUObtencionRequisitosEnProxectoTraballoItEr33S07 : Refactoring data hoursGroups.
refactor LessJsCompiler and IBootstrapSettings (fixes #43) update bootswatch resources
refactor-move. organized packages better
"DATACMNS-61 - Refactored QueryMethod, Parameters and Parameter to be more open for extension."
Android: Refactoring of shared articles
"centralized custom properties definitions, refactored dateserializer"
pool: Refactor migration module task to decouple it further from the pool
Refactoring Open Ons testing functionality
Refactoring of the add-user utility which has grown since it's original implementation into it's own package.
MODIFIED: total refactor.
Core: refactor type storage complete (#340).
Refactoring in GeneratorRepository
Refactoring FeedbackPanel
Code refactoring.
roadef: parse input: refactor renames
refactor
ISPN-1540 Refactor distribution interceptor
Refactor the report system. Allow identification of report messages.
Refactored
[OPENENGSB-2723] Performed some refactoring.
minor refactor that was missed in WMSLayer from applicable to interaction change
"DDF-463 Refactored package names to org.codice.ddf.security, added error handling for authorization failures."
Refactored package structure to improve coupling.
Refactor file system report store.
Refactor debug data dumping
"Refactored Package name, groupId/artifactId Changed Tasks to list view, removed unused ""profile link"", added delegation example (not yet layouted)"
Refactoring hacked code into something proper
fixedVar and setvar delta refactoring
o Refactored code
refactoring
TabixReader fix for position match and refactor to allow native syntax
Created until tests to verify ObjectPools conform to new contracts. Refactored ObjectPool implementations to comply with new contracts.
"Removed error msgs in BaseTest, refactored PerformanceTest."
core: refactor live merge code to handle async child command
Refactor: DegreeType is now a configurable domain entity
UI sample now uses the new Bitmap Request class and API has been refactored.
refactored the monitor API into the fabric-core so its easy to access monitoring stuff from anywhere with minimal dependencies
"Refactor preferences plugin activation, rename some classes"
start to refactor stuff :-)
"metamer: panelToggleListener: tests and facelet refactored, returned passing tests back to suite (RF-11568)"
RESTWS-267: Some refactoring
Refactoring the thread pools to have a common one for all classes to share. We don't want to have a hundred of individual thread pools all over the place
More refactoring
[CXF-4219] - Another refactor of TokenStore. Removed AssociatedHash functionality.
Refactoring
"Minor refactored wrt #10, update release notes"
Attrs and refactor
Shashank | Changed ChildScheduleService to fulfill immunizations based on immunizations date rather than today and also refactored ChildScheduleServiceTest
"fix API generation regression: support for namespaced (-d!) declarations like   flash_proxy function hasProperty(name:*):Boolean { ... } (although they don't really do anything in Jangaroo, the API should be handed through) Refactored visibility (enum) to namespace (String) to allow custom namespaces. There are String constants for the well-known namespaces in the new interface NamespacedModel."
RF-12900: refactored core components to subpackages under ui.core
"refactoring unit tests, to find out why round-trip checks fail"
RF-12900: refactored select components to subpackages under ui.select
code refactoring
Refactored into new TLD domain package structure.
vcms refactoring - preparing structure corresponding to new git repo
"refactor so getRecognizerFileName() etc... delegate to Target; default is same behavior. adds ""is header"" arg as well in prep for C++"
Refactored overall code structure + improved Journal batch implementation.
Refactor external group by runtime and fix a minor issue
refactoring is good
refactored prov-xml and prov-n with QualifiedName
[job] refactored event processing for new job functionality
[SPARK-2321] Several progress API improvements / refactorings
Quite a refactoring in preparation for importers implementation: * entities in the export file are identified by the class name of the importer for easy init during import * init method of the exporter is called before the export starts and is now fail-fast - the export won't happen unless all exporters initialize successfully.
RdfaParser.startElement refactoring
MAHOUT-513 - Created interface GaussianAccumulator and two concrete implementations:   - RunningSumsGaussianAccumulator uses running sums approach   - OnlineGaussianAccumulator uses Knuth (Welford) approach - Added unit test thereof which produces significant std deviations and drastically-odd   variances. I'm committing this so it can get more eyeballs. It is not used anywhere yet. - Refactored CDbwClusterEvaluator to use RunningSumsGaussianAccumulator and   existing tests continue to run - Cleaned up logging in various clustering algorithms to increase use of debug vs. info   to reduce log clutter All tests run.
unit test refactoring
refactor again for clean code.
Refactor some stringly typed route-creation code (#773)
[CXF-1907] Update to get the provider stuff refactored to go through the normal interceptor chains. Dispatch/Providers now should be able to participate in ws-addressing/security/rm.
Refactoring
Refactored out uneeded classes
Refactored CXF interceptors
"Made bypass password permissions an authorized function (and thus overridable via plugin) rather than hardcode by role admin, refactored password dao, null checking in auditlog database plugin, fixed ip address audit logging in web services, added authentication and made AddUser web service work again, refactored both AddUser and GetUserPassword web services to create common base web service methods."
Delete action; refactor actions to accept multiple resources
[GWT] Refactor non-core client code
wicket-metrics - refactoring of application lookup
"Migrated org.dspace.storage.dao to org.dspace.dao, and rearranged the stackable DAO interfaces & classes a bit. I've also refactored the EPerson DAOs to take advantage of the refined mechanism."
refactor - mhuckaby : removed unreachable condition; increased coverage
Refactored logic based on on DomainDefinition. Also Unit tests work
WIP showlet to widget refactor refinement
"Adding the updatetemplateoriso command refactoring,"
"ensure global brooklyn.properties and config on entity and on locations all get used by ssh commands, so e.g.  `brooklyn.ssh.config.noDeleteAfterExec=true`  will take effect; also refactoring to make that code and other code tidier"
Further refactoring of handler/proxy creation code.  Information on which interfaces to implement now comes from the the list passed into the construction of the EjbHomeProxyHandler and is propogated from there.  Containers now no longer need to add the interface data to a ProxyInfo -- that cleanup will come in another commit.
JCBC-665: n1ql-dp4 Refactor Query into Statement
HIVE-13839 : Refactor : remove SHIMS.getListLocatedStatus (Ashutosh Chauhan via Sergey Shelukhin)
Refactored download source/docs to reduce repitition.
refactoring of bean traversal
1. Refactorings 2. Corrections in web.xml 3. Maven shade plugin
"Additional code refactoring and cleanup to the strongly-typed, Region Namespace tests."
Refactored to break up httpPut operation into smaller methods.
Refactoring Package Names
REFACTOR: moved isAuthority() tests from UrlCanonicalizerTest to UrlOperationsTest. Moved UrlCanonicalizerTest to package org.archive.wayback.util.url
STS-3025 Added ability to launch command using External Tools launch configuration. Added wizard to edit commands. Refactored Caldecott tunnel actions into separate provider. Added context menu actions to launch external tools and manage commands.
#NAME?
Checkstyle definition file added. Tons of refactorings.
"add new CssClassNames util class, refactor CssClassNameProvider interface to be more generic"
#NAME?
Refactoring of the code.
converting another test class refactoring so test cases and queries can be shared and inherited
refactored base test classes for our own internal test suite
Major syslogd refactoring
ReflectiveReportBuilder DataSourceProvider Refactoring
Small refactoring in MonteCarloModel.setCriticalPath()
Huge refactoring Seam3 tests + CDISeam3AllBotTests added + seam3 resources refactoring
*Refactor region getters & setters
XWIKI-4126: Replace error alerts with errors next to fields for link and image dialogs. Added a VerticalResizePanel to manage cross-browser layouts for widgets expanded to all the remaining height of a container.  Refactored WizardStep.onCancel() to only signal the cancel and not return a value to control the cancel. Fixed Wizard to call WizardStep.onCancel() when Wizard is canceled by closing the dialog. Added help labels and refactored / fixed styles for various wizard steps.
Refactored to use a single service context.
Start refactoring + add unit tests
innerProduct optimisation and refactoring
"Refactored strategy classes by moving functionality to a class (AbstractIterationStrategy), which is higher in the inheritance hierarchy"
refactor
"Refactoring, added logging"
TURMERIC-1350: Refactor type library into core and UI plugins.
Partial refactor so I can complete the work at home
scheduling: Refactor the internal units and policies out of the database
fixed getPixelValue(). refactored the RoiCursor usages into Operations.
Refactor Java DSL test builder to be a test designer
"Add drag-and-drop support (Closes #5 as good as possible, DnD into open app), and some minor refactoring."
Refactoring
refactor
"Fix Android tablet detection BrowserAgentTest updated to check against Nexus7 tablet. Small indentation fixes & some refactoring. @bug W-2269861@ @rev ssun,eanderson@"
feature #1266 : Refactoring the subscription code
refactoring - raising the abstraction level
refactored method and added comment to javadoc
SSHD-52: refactor command / shell / subsystem interfaces into something more coherent
"Changed label of System output checkbox fixing capitalization and removing superfluous ""enable"" word. Refactored code a bit to make it compatible with WindowBuilder."
Refactored apply to paint
Refactoring to rename Summary to TaintConfig as it is the latest naming. This will avoid potential confusion for new comers.
RF-13582: refactor org.ajax4jsf
[DROOLS-1649] ServiceRegistry refactor (#1387)
Refactored AbstractWait. Fixes #527.
"fix ""join comments separated by empty lines"". refactoring"
core: minor refactoring in import vm
"HIVE-12934. Refactor llap module structure to allow for a usable client. (Siddharth Seth, reviewed by Sergey Shelukhin)"
Code style and refactoring.
Fixes for minor bugs.  Plus refactoring of classnames for SSL* classes.
Refactored descendent node searches: now correct
Fault delivery refactoring
First attempt at refactor to work with maven setup
Refactored Dummy projects and package names
Refactoring + adding unit tests
again: rename/refactor
Adding some tests for project creation code and some refactoring
CSPACE-6935: Refactored authority resource and document handler classes for better naming consistency.
"+ Refactoring of movement check to be more clear about what it does + Workarounds for bug in Minecraft related to jumping while sprinting + potential workarounds for plugins that cancel   teleportation-related events on ""monitor"" level + fix a bug that would allow a player to fly at the same level of height infinitely + Deactivate blockbreak.reach check for players in creative mode"
minor refactoring for better testability without the need to generate intermediary files
refactored package DHT
Test refactoring.
Extracted current User to an argument resolver and refactored all the cases it was used. Then added test cases for said refactorings
"JAVADOC ALL THE FILES!!!!!!11!!!! Also, disconnect from the DB on unload. Refactored CommandManager in CommandLoader and currents Loaders in Manager. Removed useless variables."
Close Issue #63 Refactoring for Class GPTreeStoreWidget enhancement 
"* Refactored mapping logic. * Added initial support for text decorations (bold, italic, underline, strikethrough)."
All : applying the refactoring consequences on all modules
Refactoring to support OAuth 2 service Adding Support for Facebook Authentication
[PIR-522] Refactored ParameterXmlContentHandler to be able to set the report externally. Refactored applying of input parameters to a reusable utility method (moved from SimpleReportingComponent).
"Metric Graph Portlet Work Fix issues with adding metric portlets from the resource and group trees. In particular, add missing support for the group tree, and group metric graphs in general. - refactor and rename to use an AbstractMetricGraphView supporting resource   and resource group views and portlets. - add relevant resource or group name info to the portlets so you can see   what it is the metric data actually comes from."
CheckIn: Refactor DtE¡¯s code to support non-unique level name in different dimensions
"REFACTOR: moved org.archive.wayback.accesscontrol.* classes to org.archive.wayback.accesscontrol.ui. Most of this stuff is not performant enough for production use, and probably needs a nearly complete overhaul."
Refactoring: Homogeneize naming for admin section pages + added general admin section page
"Added TypeToken. Refactored Key to use it. Goodbye, raw types!"
merge tool - refactoring command and merge view
Some refactoring (allow different hosts for appservices
"refactor, Junit4 integration test, test support classes. Prepare to convert to DAO DB access"
refactor of selectable cont' #113 1. remove lazy init of Html 2. rename strings to sourceTexts for better meaning 3. make getSourceTexts abstract and DO NOT always store strings 4. instead store parsed elements of document in HtmlNode
refactored code.
Refactored logging to work with Comet API.
Refactor ReferenceCollectingCallbackTest per Ben's suggestion.
Rename CycleConfigurationService to CycleService and SimpleXStreamRepositoryConnectorConfigurationManager to CycleServiceXStreamImpl. Depends on the naming refactoring changed SessionUtil and RepositoryConnectorConfigurationManagerImplTest. 
http://tracker.deegree.org/deegree-services/ticket/307: Refactored GML object writers for a more generic interaction.
Minor name refactor
Ongoing futures refactor. Local commit so that I can pull before I change sec_future db schema to add unitAmount
Minor refactoring: Convert anonymous AddFeature classes to nested to make it easier for plugins to subclass
Refactored the semantic highlighting patch
Refactored management of SQL parameters
Refactored event implementation and updated event APIs to latest specification revision.
"Refactor: Adjusted to handle colaborators from other institutions, mainly grant owners and investigators."
Refactored the resource management
refactored code to add clarity to network layer
ACT-696: refactored compareTo on LazyLoadingQuery and moved it to the items themselves.
refactor mock database to use postgresql and inherit function from new TemporaryDatabase class.. Need to refactor other tests next
refactoring unit test based on comments from @josemduarte
some refactoring to make login via e-mail OR name possible
started refactoring away from elmo
"Issue 27: got eucalyptus and walrus working, after refactoring error handling"
"- change direction, access, refinement, restriction to enumeration, orientation - change to genericLocation to set orientation - refactor authority to setURIPrefix authority uri = www.... - change new uri for CHEBI - from type field create new annotation to indicate from old sbolv1 to sbolv2 in identified, - have major version and minor version in identified - create JUnit Test Cases"
refactor
"Refactored WebSocketClient.run() into smaller methods.	"
refactor in Builder Framework documentation
refactor
RF-13582: refactor org.richfaces
ACT-741 refactoring persistence: refactoring IdentitySession and Tasksession into appropriate entity based XxxxManagers
Refactor mount spawning due to API changes; fixes an exception thrown when trying to use barding on non-normal horses.
Made TestRunner run all test classes at once and refactored a bit.
"RegistrationState refactoring: - defining base methods in RegistrationState and overriding in specification classes - moved YearMonthDay->DateTime conversion logic to StateBean (and to RegistrationStateCreator, by inheritance) - when forwarding to inactive state, checking if registration has curriculum lines for the given execution year"
DRILL-5423: Refactor ScanBatch to allow unit testing record readers
refactored the i18N support to be an Extension
refactor js error
Big refactor. Guice support added. First approach of Business Model
Refactored sync strategy definition Many javadoc fixes
"Some refactoring in validator, can now also just enter an entity class no property name"
OSGI-52: refactor design around Iterable for easier dynamic integration
Sharing ast between trials of different inline refactorings
Refactoring for improved MVC architecture
Refactor the xml generator xml content API to common sub package
Package refactoring.
"Refactor: consolidate duplicate ""context"" package to the ""base.context"" one."
Minor refactoring to fix warnings.
"The old notification API based only on JMS is now completly replaced by the new Notification API. The package com.silverpeas.notification is now renamed to com.silverpeas.usernotification as the classes that are in this package defines an API for user notification. Refactor both the management of the component instance ids and of the space ids in the Admin side: previously, the id of these objects were converted between their business form (named as the client id in Admin) and their local/technical form (named as driver id in Admin). This conversion occurring directly on the id of these object, it impacts negatively the client codes as some times clients code work on driver ids whereas others (the main client codes) work on the business id and, as they cannot know the form of the id they get, a lot of conversion codes occurred (and occurres yet again) in the clients sidegit status! The refactor defines now two methods to ComponentInst and SpaceInst/SpaceInstLight: getId() returns the business id whereas getLocalId()/setLocalId() in about the technical id (driver id). With this change, Admin, SpaceInstManager, ComponentInstManager, ... and clients codes are deeply updated as consequently. As the impact on the functionalities are important here, a deep test phase will be required to check all is ok. The refactoring were just on the Admin side; it will be required later to plan a refactoring of the client codes that work stupidly on the technical ids instead of the business ids."
[CLEANUP] Refactor remove underlines in package internal_transfer_objects
Refactor RestApi to prevent body on GET and DELETE
Refactored
Bump up JDBC Spec vertion to 4.2 Change license to Apache 2.0 Refactoring for root packaging
Bug 429739 - Permission denied to access property ''  Refactoring. Retained existing behavior of evaluate.
RealtimeConsumer bug fix and refactory
refactoring domain objects
"Refactor due to typo, add config sample properties"
Refactor for my understanding
HBASE-7790 Refactor OpenRegionHandler so that the cleanup happens in one place - the finally block(Ram)
revert refactoring
refactor serilaize filter
Micromanager: refactor TIFF reader setup
SAVARA-208 Refactored the logging mechanism and added helper function
"Worked on refactoring StandardConsole into a separate jar that can both be used as a depenendency (as the case for any GUI apps), or as a fat jar (for use on command line)"
"MFA Changes, more refactorings and improvements"
Kie API refactor
ColorTeaming v1.5.9 : Refactored method names and class names.
Finished refactoring - now on to bugfixing
refactor office service facade usage in holidayAction
modified by refactor
"Refactored the common ThreadListener interface to the WebDriverConfig superclass, reducing the amount of duplicated code in concrete classes"
refactoring the default converters
SB-686: Refactor the KeyStores
"incremental builder now supports string patterns for (webserver-)resources,  one file can now end up in both locations (if the patterns are right) small speedup in full re-build some refactoring"
Fixed Cohort builder saveCohort bug Refactored ReportObject service
"added the haw proxy to management, added the IRegistry to the IInformation registry and choose a different listener bingin method. Refactored the RuleEngine and DroolsManager to provide logging for better failiure analyses."
Java packages refactoring
"Big refactoring to genericise utility classes and to better support mocking/stubbing (via use of abstract factory classes). Added 7 unit tests to cover rest resources and core TestMonkey server objects. Tested working, happy for move from RC to 1.1 final"
MGNLMIGRATION-9 : Refactor moveAndMergeNodes and renameAndMergeNodes passing the source Node as input parameter. 
*InterpreterComboBlock related refactoring
Refactor the Json tools
minor refactorings and code cleanup
JBIDE-18765 - Integration Test Refactor
Refactored send message action to use the new message builder mechanism
Selection of participants of a group chat using a double list. Refactoring dove to avoid code duplication. Fixes issue 254
[JBIDE-6376] refactored to separate from startup extension (might be better to use another activation later)
Refactored & reformatted Elastic Search code
minor refactorings and typos
tests refactoring
Refactoring to support new test cases in localdiscovery (new) test bundle
Refactoring.
* selection & range implementation for IE (a first version) * pom update for GWT 1.5.2 and maven-googlewebtoolkit2-plugin 2.0-beta24 upgrade * more java doc * cleaner initialization of rich text area * use HTML parser instead of XHTML and drop cleaning editor's output before parsing * little refactoring
refactor assembly service
Cleanup unused code and small refactoring
Data Source and Sink with INput / Output Format refactoring...
Refactor - Websocket test class
Last step into the refactoring of ResourceLocator by replacing loading and handling of XML setting files by a new mechanism that is has a better abstract level (and then less technical) than the previous one. The XMLConfiguratorStore class is now replaced by XmlSettingBundle that provides a more easy way to both browse the XML content and to get settings from an XML setting file.
refactoring...
Refactored away duplication in SqlScript classes
multi windows refactoring part3. RemoteWebElement changes.
Bug 494650: Refactor BaseTestCase to allow multiple launches per test
#NAME?
refactor test
[PLAT-3592] refactored to support setting multiple parameters
some refactoring and group by table begin
Lots of refactoring
refactor drag and drop handler
Some code refactoring
Refactor - define various Functions and make Blitter use them
More refactoring.
#POULPE-237 * Refactoring of the forum structure vm and view data * Writing tests
- Massive refactoring to bus API - @Disposes methods now work properly with the async bean manager.
refactor
XLCLOUD-1048 exception messages refactoring
Refactored Module to be ModuleHelper instead
refactoring: move PageCache interface
refactoring
Refactor so that ProcessControlImplementation and DistributionControlImplementation are less tightly coupled to ConsoleCommunicationImplementation.
Improved progress monitoring in refactoring history
Refactoring methods for translating between structured and raw and for tracking changes
SONAR-4069 Refactoring to ease override of some components  * Don't fail when there is a fake profile with id=null  * Don't fail when there is a fake language
refactor code
* TI refactoring and improvements * applied patch from bug 177533
*some refactoring and code cleanup
 BZ[784873] fixing issue displaying LDAP registration screen with clean browser cache.             i)Can't count on CoreGUI to be loaded in this case as the user may not have logged in before.             ii)Some refactoring to embed asynchronous call.
AppliImplListener code refactoring
"Internal changes to DHNS to improve filtering features. Return of the view concept, and refactoring in Graph control. Add the GraphModel and rationalize directed/undirected/mixed graphs access. Small changes in GraphAPI, mainly in access with filtering."
ACCUMULO-3199 Internal refactor to add ClientContext
o Refactoring of ArtifactWorker
- Summary:Code refactor for Gantt Task Label UI and Series Y Sheet related classes (#57270) - Description: Add a method to get the label attribute context and methods of adding series related options
Refactoring project and recent churn
Refactoring
Docker tests refactoring (hierarchy changes) (#1671)
Adding recruiter to report and minor refactorings
doing package refactor
Refactor package so that model package is one generated from XSD
slight internal refactoring in GenRepo
CXF-2556 and starting with refactoring of Atom providers
[misc] Refactoring: moved utility method in an utility class
Changes from code review for EntitlementRules refactoring.
Started refactoring code to allow derived classes to expand the bounds of the sprite to contain more than just the image. I didn't go all the way though because I started looking at the stuff to handle render origin and render offset and couldn't bring myself to add another offset into the mix so it'll have to wait until I can give it some more serious thought and perhaps simplify what we've got.
FALCON-610 Refactoring and documentation updates. Contributed by Paul Isaychuk
refactoring of clientCustAction fix tests that failed due to previous refactoring of load method
Phase 1 of the Period Refactor - SOP portal uses AcademicIntervals instead of the Execution* counterparts.
Refactor the AST visitor and use URLs to obtain the path to the data file
refactor kvm/vmware resource code
"Some refactoring, tests not passing yet though"
Refactored to improve quality
"Fixed a bug whereby styles could get lost for inline elements, notably if root element was inline. Did a few other things which probably has no importance at this moment, e.g. refactored out some unused stuff."
refactored 'location' into 'node' of Graph interface
further refactoring (maybe final)
Refactoring around lookup support and closing holes. Adds lookup support fot copyInstance().
Refactor: extract generalized checkInFile() method
refactor SecurityUtils
refactored so that deploy related mojos do not inherit from AbstractInstrumentationMojo split up and removed AbstractIntegrationtestMojo
Bugfixes and refactoring
FACES-1895 Develop alloy:pickDate component (Refactored alloy:pickDate to remove unnecessary attributes) FACES-1897 Develop alloy:inputDate component (Refactored alloy:inputDate to use refactored alloy:pickDate)
Refactored Entrant => Player for a third time.
#NAME?
SB-617: Heavy refactoring of the strongbox-storage-* modules ------------------------------------------------------------------------ - Extracted the layout providers into a separate module.
ShareBean Refactoring: remove cycles (not complete)
tweaking RefactoringSaveHelper API
Refactor expressions and squash to single node
[refactor]
Refactoring.
"ImprovementOfApprovedEnrolment: - finished implementing PostingRule, based on EnrolmentPeriod penalties - refactored Event (it's not a typical FixedAmountEvent) - implemented PenaltyExemption"
minor refactor of packages
Refactor InvokeEvaluator to get arguments for an invoke instruction.
ReFactor code Forum
Create a new package for providers and refactor current ones there
DDF-1618: added SecureProxyServiceFactoryImpl for making secure soap clients. - implemented exponential backoff URL polling incase a service is temporarily down. - refactored platform/util to match DDF module naming conventions.
Harshit | Added MTP indicator and refactored mother reporting.
HADOOP-12103. Small refactoring of DelegationTokenAuthenticationFilter to allow code sharing. Contributed by Yongjun Zhang.
Refactored directory watcher's ability to indicate files that it is interested in.
[MOD] Refactoring static variables and functions.
Refactored and moved files around
decorators refactoring
started huge refactoring of DSL
"Refactoring player logic out of PMS. Introducing the PlayerFactory simplifies PMS code and removes the PMS dependency from other classes, making them easier to test."
Further rmi-impl refactoring
JPA: query implementation refactoring to better handle parameters
#NAME?
refactor package
Refactor PropertyPlaceholderConfigurer hierarchy
Add several things related to rule builders in the admin:   - Refactor the blc-rulebuilder-options.js to be generated dynamically     - This required the addition of the AdminResourceHttpRequestHandler and related classes   - Refactor StructuredContentImpl to utilize the new annotations for rules   - Refactor StructuredContentRule to adhere to the new QuantityBasedRule interface
EDA-3 Fault-tolerancy by comitting offsets at the end of map task and refactoring.
Refactoring to tidy up resolving and combine object factory and manager - complete - released to DSFA 14/7/05
refactor SelectNewLeader to NewInstance
refactoring: generified and reviewed JMM
refactoring app config
Big refactoring around the building of M3 & AST
"Incomplete - issue ROO-754: Refactor Roo project and addon-maven code to add build plugins via an addon's dependencies.xml  http://jira.springframework.org/browse/ROO-754 Added code to remove openjpa-maven-plugin if ORM provider is not OpenJpa, as we do not want to attempt to enhance classes that use Hibernate or EclipseLink"
A refactoring to remove the circular dependency between the checkstyle and checkstyle.filters packages. I moved AbstractLoader to the checkstyle.api package. I moved the SuppressionsLoader to the checkstyle.filters package.
Partitioner Refactor (#2434)
Fixes #299 Refactored failBecauseExceptionWasNotThrown to shouldHaveThrown
refactor UI
Continued refactoring
Pulling in AppConfigurationLoader into a Factory interface and refactoring activator to work off factories.
refactor names for consistency
A little refactoring
Implemented XPath2PotTask.  More refactoring of Regex2PotTask and MatchExtractingTask; made java-format optional.  Added more ant tests.
Added some tests and refactored the package names Also I spent a lot of time messing with the build script but I haven't added it to the git repo yet.
"Refactoring: Primarni i sekundarni menu presunuto do layoutu, odkazovani mezi stranami nevyuziva .jsp ale ukazuje primo na actionBeanu, pridan nadrazeny soubor taglibs.jsp"
"Refactoring, cleaning. Should have done this on a branch."
Refactor read access testing to reuse for other function types
"Refactoring on the GraphicsFrame. The menubars are seperate classes, moved their logic there."
"refactored integration tests, fixed exclusiveGatewayDefault test, improved IdService"
"Refactor segmentation model, separated the feature extraction from the main method block, added new unit tests."
Refactor the name of both the directories and the artifact ids of the Forums subprojects
"JBRULES-1598 Efficient WorkingMemory serialization with binary protocol -initial non-working impl -refactorings so PropagationContexts reference LeftTuples and not activations, and also the facthandle -FactHandle now uses an int for id."
Check Sauce REST output for null values correctly. Added additional unit tests.  Refactored code and added javadoc.
refactoring config to work from xml file rather than being hard coded
fixed test and some minor refactoring
Refactor
refactoring to new pom structure - moving to 'library' module
refactored radio button fixture
Expression parser: Refactor tokenizer
Refactored: renamed CommandListener to RequestListener
Refactored the new Sharable API into the appropriate package.  Now 100% checkstyle compliant.
Merged ParentEdgeColorMode and ParentNodeColorMode in ParentColorMode. Refactored color modes and colorizers.
Code cleanup and refactoring in QxTypes
WSDLParser: refactored getXXXElementForOperation
Bit of refactoring
Refactored the FieldConverter stuff to remove a lot of duplicate code.  Created a BaseFieldConverter class.
fixed EtcdBasedConfigurator context refresh stacktrace printing and some refactoring of duplicate code
"Refactors the handling of AvroWrapper logic from MapFns to the Converter objects, which is quite a bit cleaner."
"minor refactor to use ""stopped"" and ""stopping"" as properties on ServiceSupport and the transport classes. Also made the TransportListener getter visible and avoided the need for protected variables in the various TransportFilter implementations (due to inlining, often getter methods are faster in hotspot than access to protected fields, plus it simplifies the code & makes it less brittle)"
Refactored to use PeppolMessageMetaData for both AS2 and START protocols
refactorings
"Fleshing out clientRouter, refactoring to better distribute functionality"
minor refactorings to testing commons
Refactor of RepositorySession to make adding history much easier
Refactored WS rejection handling: use interface instead of abstract class (merge of bc79c2a925e78dc0598c from 2.2)
refactoring: move class
Refactoring application using annotation.
#57 refactor entities
Refactoring of TrackingEventProcessor
Refactor to simpler naming model
refactored codebase into com.simpligility...
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
[ArchiveManager] Refactor and add new accessor method
Refactored design of loading modules to be one function instead of two different ones for module versus default (fixed appropriate tests too).
Upgrade Kafka 0.7=>0.8 refactor kafka operators #73
added more unit tests and refactored a bit.
#JC-124 added test for getNewMessagesCountFor tests refactored
SOC-521: [DEV] fix issue with input link in sharelink feature.; Refactoring social rest services
o Minor refactoring of call chains in IndexManagerImpl to allow for o Added package protected method for find/create indexes o Added check for not returning auto indexes by name o Auto indexer implementations changed to adapt to above o Test case for not throwing IllegalArgumentException on getting auto index by name
Refactoring + oozie coordinator creation
Refactor 2 - simplify names a little
"Working on ReservationManager redesign (not working currently), commit before refactoring caching logic into separate class"
Teiid 781 - changes and refactoring so the ctc testing can support both the old way (comparing against xml files) and the new way (generating and comparing non-xml files)
Refactored FileInputTask to read in json array of exported archive data
"Expanded test coverage, refactored to permit better testing."
Refactored: avoid *Impl / EntityIdFactoryImpl
 refactoring: exception handling;  in BioentityDAO use available DAOs
Refactored: renamed StubProvider.wrap() to providerOf()
Behaviors partially refactored World areas added with textures
Minor systests refactorings
refactoring Response
Began working on consolidated Facet installation refactoring
MIFOS-4567: refactoring rounding of loan schedules
KS-2168 : RSS processing refactoring :  - moved most RSS and JCR logic to RSS class - splittled responsibility of feed generation methods - cleaned hierarchy
Refactoring path integral framework.
"Added logging to ChessboardComponent, minor refactorings of the same, removed MoveSelectedEvent, Renamed MoveSelectedListener->MoveListener"
refactoring
Refactoring based on (GraphStore/SPARQLEndpoint)Origin and its Providers HTTPProxy is gone
"Fairly big refactoring to open the door for pluggable formats.  The KeyFormatter hierarchy controls the formatting, via a FormatManager.  However, this is probably a lot of flux that will still go on in AbstractKeyFormatter to best define a generic set of formatting functionality."
ComponentOccurences: Refactoring
Merging api-refactoring to trunk [3595]:[4355]
"refactor , sql extern"
Refactored API.
"Implemented the dropped item entity, small package refactor! @Afforess please take a look at the Pickup class, pretty sure the EntityProtocolStore part can be done easier!"
#1765: Structured query support - some bugfixes and refactoring
"fixes to regression tests:   now, for me, code works using e44 with maven   dalvik tests refactored for mobile version with android dev tools   IDE tests Eclipse metadata fixed to make e44 work for me   new android entrypoint to fix failure in new droidbench tests"
JAX-RS : fixing a typo introducing during refactoring with test
refactored persistent entities
Refactoring the equity variance swap functions
ROO-2745: Post 1.2.0.M1 code refactor and clean up - added FileUtils method
Rxjava refactor (#2358)
MAGNOLIA-3546 detail view now executes commands and TreeAction is no longer a vaadin action and can be refactored to a command
"eliminate quotes in error messages, refactor stuff to util package"
Refactoring
"ISIS-993: further refactoring, working towards factoring out EntityColumnMembers.  However getting an exception when there are two tab groups (with the id/feedback... not sure why yet)."
Guice implementation and refactor
Refactoring generics
[Refactoring Maven + Import Order line from external site]
start of UI refactor to have vertical wallet list
- changes according to API - implemented some more CanaryPlayer.java - added switchWorld to player to allow cross-world teleporting - refactored some stuff in OServerConfigurationManager.java (de-obfuscate)
[HTTPCORE-11] Refactored DefaultHttpClientConnection and DefaultHttpServerConnection; removed AbstractHttpConnection class
* ExtractorMultipleRegex.java     refactor for readability
refactor test class name to match class under test
JBRULES-1408: Refactoring of ruleflow to act as a pluggable process engine
move smart gwt based widget to a custom package. refactor thread management tool. separate LHSNavigation from containment panel
Refactored projects to be more modular
"Refactor the way scheduled block locations are calculated from real-time data, especially with distanceAlongBlock data."
"Yet more refactoring, now constructors and fields done; only methods remain"
Fixing/breaking tests and refactoring.
-MdTerm and MdTermRelationship metadata -SAXParse update for MdTerm and MdTermRelationship -SAXParse refactor to support import of .xml files from inside a jar on the classpath
Refactored
#NAME?
refactor names
Refactoring and code cleanup
Merged & refactored pathfinding package into a single package.
refactoring
Refactore PolicyRestrictor in order to reduce complexity.
201882 [surround with try/catch] Avoid dialog in sourround with try/catch refactoring
"Refactor amqp module packages around a bit, and flesh out future and blocking apis."
Refactoring the CandidateElementExtractor
23488: move inner to top level - cannot handle some type accesses [refactoring] 60992: Move Member Type to New File does not properly handle private members in outer scope [refactoring] Adapted to CompilationUnitRewrite
#NAME?
Refactored GatewayResponse object and Core test classes. Updated OMP and OMI to work with changes to Core.
"refactored method complexity, added severity setting to some checkstyle checks"
marshallers and unmarshallers refactoring
Totally refactor the main class to be much neater and tidier. Add translation facility and partially complete data for US English and Spanish. Add exciting new fullscreen mode! Very cool.
"hibernate4 : Refactor MailingList: - migration of the direct hibernate O/R mapping of entities to a JPA O/R mapping, - the tests are now performed by using an in-memory datasource (H2) instead of using a remote database (PostgreSQL/Oracle), - remove the use of the Spring JUnit Runner that can cause a lot of problems with the test contexts that doesn't free the data in the datasource and load/unload the application context programmatically"
LOG4J2-2031 refactor to get remaining queue capacity for AsyncAppender as well as Async Loggers
Refactoring and several fixes on the collision prediction algorithms. Movin lots of code away from the Helper class.
Imran: Refactored method findPreferredMessageDate.
Refactoring in test suite
Refactor some package names to match new project names.
Refactoring Array.getAll
Finished refactoring.
refactoring Email
Some minor refactorings and cleanups
Cleanup - Refactor model classes into their own package.
Small refactor.
refactor
Modules refactoring and cleanup
refactored network utilities using rest templates
Refactored to introduce the HaskellLanguageElement superclass
Refactored the ScriptDiscoveryComponent to use ManulAddFacet instead of the deprecated mechanism.
refactor: a maven module for function-test introduced
New test operating on cdi quick fix test added and QuickFixTest refactoring
Update google_checks.xml and minor refactoring. #320
Added Advanced server between NeoServer and Enterprise server. Refactored the default set of server modules.
#NAME?
Clean up Refactoring tests
Template refactored
"refs #161 - mocks added to netbout-db, tests refactored"
Refactored: moved MessageQueue into its own package
Refactor Door Listener in preparation for changes
Add Actor thread name prefix. Introduce BytesCodec. Rename Ephemerons size() to getSize(). Refactor QuanlityOfService. Introduce IPageBenchmark. Clean code.
refactoring getMenuSpace in Navigation: extract isEmptyMainMenu query method
refactor
refactor
ISIS-14: ResolveState refactorings (PersistorUtil.startStateTransition)
Refactor locations of existing search modification strategies (RemainingWeightHuristic and ExtraEdgesStrategy) to be in the same location as the other search modification strategies.
[java5] model refactoring & documentation: JAnnotation & friends (work in progress: compilable but broken)
Refactored ResourceClass. Implemented decode/encode for UriInfo methods.
"Refactoring Graphite checking, alert generation and emails (#46, #50)"
Refactoring and cleaning in VisualizationImpl
Refactored Datastore for performance.
refactoring;
"Simple refactor, moving helper into its own package."
Refactoring the data-driven test steps feature.
refactoring: - use an expression in the suport POM to set up finalName - have interpolator and injector deal only with model
ACCUMULO-1481 : Add tests for splitting/merging root table; refactor to consolidate metadata constants and structures in an organized way; begin consolidating metadata ops into a servicer interface to abstract the code that actually does the servicing of metadata for all tables; remove some special cases for checking for metadata tables/root tablet that no longer apply; make mock work with root table; fix SimpleGarbageCollector to confirm candidates for deletion by checking the root table as well as the regular metadata table
add code to generate  configuration syntax from declaration + refactor Kompile
refactoring OAuth to use new jaxws rest client and change to nowellpoint
Fixed and refactored nested property access.
refactoring architecture des package et fichiers
CLOUDSTACK-6003 fixing plus refactoring dispatcher
"unloading world circuits now properly shutdowns the chips; refactoring, cleanups and docs"
REFACTOR: Timestamp package change: org.archive.wayback.core => org.archive.wayback.util
Refactor IHM Out
Refactored
ftests refactoring. REST API tests moved to separate package
more refactoring
- Migrated missing demos to 0.11.1 - Refactored Joint parameters
382985 Refactoring for testability of the PublisherServiceImpl
OPENNLP-226 Refactored the evaluator listeners:
CLOUDSTACK-9211: Add javadoc and refactor method
XWIKI-13804: Refactor initialization of Instance Id Manager XWIKI-13759: Impossible to inject a InstanceIdManager in a listener
"- corrected isApproved in Dismissal: A -> B, if student has Dismissal for A, than student isApproved(A) or isApproved(B) is always true - refactored code"
hard refactoring of all the XlsService and related classes
Refactor WebContent.determineCT to make the arguments clearer.
Refactor xml parser implementation and tests to be compatible with both sjsxp and woodstox
refactor the Main#run. Extract a few methods out
Issue 230: refactored test class
refactor solver code to impl namespace
working through some compilation errors that have arisen due to all the API refactoring...
Refactoring
getCode refactored to getStateCode
Implementation of the feature to allow user to add custome exception. Code refactoring for various modules. Incorporated Fabios's old review comment
[UI] displaying tooltips: clean up and code refactoring
Computing dictionary in one MR job too slow (too much shuffling). Reverted back to previous. Additional refactoring.
Refactor several beans (and related classes) to use ConfigurationService on init once it is injected.
Code refactor
refactoring
CSPACE-852. Added support in tenant-bindings.xml for authority reference fields in collectionobject and acquisition schemas. Added {csid}/authorityrefs subresource support to CollectionObject and Acquisition. Refactored the code that was in IntakeDocumentModelHandler (getAuthorityRefs) into RemoteDocumentModelHandlerImpl.  Added tests for both services.
org.orbisgis.rasterProcessing: WandTool refactoring () + RasterDefaultStyle patch
further refactoring
[misc] Refactoring to pass checkstyle
Structure refactored.
Light refactoring; Added disable/enableOutputEscaping(). Italic and Bold are now carried across paragraph breaks.
"FEATURE: now attempts to get character encoding from META tags, bytestream and then HTTP headers. REFACTOR: added getter/setter for Spring"
Refactor non-dao related impls to a generic module to be used by impls
refactored graph relations and properties
SONAR-2230 Refactor to decrease complexity
refactoring qunit assertion generator
Project structure refactoring Dropped translations
Completed refactoring of context/promises
refactored into client/server packages
Refactor: Creation of IngressionType entity which replaces the Ingression enumeration
small refactorings in PortalEventStoreHelper
Refactor code of project and model creation wizards
refactoring
refactoring of shibboleth-snaa for tarwis - including optional set of proxy
FirstSpellCastThisTurnWatcher refactored. Typo fix in Jace
Tineout added to all async operation. MetaDataService Interface added. Comments added. Methodname refactoring.
[refactor] rename
"Code Refactoring (grouped related classes in packages, getting OSGI services from CyServiceRegistrator when necessary, deleted unused classes)."
"Trigger happy refactoring, using the prefix ICDI i.e. with the ""CDI"" prefix will help reduce the name collisions."
Refactoring
ClojureProposalProcessor refactoring - before enhancement
Refactoring to packages
Refactored away the ripple-rdf module. More refactoring to come.
ROO-3056: Post 1.2.1.RELEASE code refactor and clean up - made method shorter
"refactor invoice calculation service to use complete interval, it only used the start date of an interval."
"Adding extension resources, fixing up classpath config, refactor CSR code"
Refactored old GetOrgCoordinatorIds mapper in prep for new framework changeover.
Updated #JC-1542 -refactor code according to code review http://fisheye.jtalks.org/cru/JC-164
all q operations except listener are green now. And some refactorings
Refactoring compile-graph-phase module
CPDEndpoint refactoring + multi-add
#NAME?
SCRUM-3: refactoring: JcrContainer is now an abstract class which is subclassed by FlatJcrContainer (for the list view) and HierarchicalJcrContainer (for the tree view). Moved classes into more proper packages.
Refactor service alert/siri code out.
Desktop App refactored.
"refactoring, extract foodmart.xml, remove saiku-ui"
Refactoring DAO level
Refactor the AnnotationHandler and allow custom annotation to be defined
Added in new Windup Grapher DAO layer and refactored the metas into facets.
"* refactored filter related methods in WebXmlUtil (added one to check if a filter is registered, and checks which dispatchers are registered) * completed the conditions in CoreMVH * added filter related tests for WebXmlUtil"
refactor & bug fixed.
Refactoring
Some directory refactoring
HEMERA-2228 Refactored subsystem to new Jboss mechanism.
Refactored some code in ResourceDecorator to be usable from RepositoryMapping
AM-3396 - fix/refactor based review comments
HIVE-5372 : Refactor TypeInfo and PrimitiveTypeEntry class hierachy to eliminate info repetition (Xuefu Zhang via Ashutosh Chauhan)
Refactor + Recent Posts
[AESH-270] a rather big refactoring; - ProcessedCommand/Option are using builders now instead of numerous constructors. - CommandContainers can now contain other CommandContainers if they are a GroupCommand
DRILL-3987: (REFACTOR) Common and Vector modules building.
fix broken tests after refactoring
"Refactored, added automatic retry for recoverable errors."
Refactoring the client to be more client like i suppose... Updating simple test and adding constants to be used in the app
plugin dependency init refactor
"Playing with some spout refactoring, added a UTF-8 String Scheme as seen in storm-kestrel"
Refactor dependencies to avoid package tangles
"New Preference panel updates: revised rule columns, new compact colour-coded regex filter column. Reworked property tab resizing. Refactored editors into separate package."
refactor of the mixin one to one mapping meta data building
refactor speclearner + pipelineLearner interface
Refactor ComponentLocator to be based on Spring so that legacy way of loading component can coexist with Spring
MAHOUT-933: Refactored actual classification out of ClusterClassifier and into ClusteringPolicies. This allows classifier to be completely generic as to the algorithm and gives policies correct use of e.g. fuzzyK 'm' Introduced Canopy and MeanShift clustering policies for classification though not used by cluster iterator Modified serialization of ClusterClassifiers to include ClusteringPolicy Added ClusterClassifier serialization methods to exploded sequenceFile representation needed for MR Updated Display examples and unit tests. All run
Refactor serialization strategy
turtle test: refactor to overwritingSimpleScoreCalculatorClass()
"Point refactoring, Drawable Element refactoring"
Refactor EntityUtils a bit
#NAME?
Refactor StatisticsPoller run method.
refactoring + clean code
ACT-60 started refactoring deletion of process instance as separate atomic operations
Refactor few classes bulk operations
"Stage 1 of the VariantFiltration refactoring is now complete.  There now exists a parallel tool called VariantAnnotator which simply takes variant calls and annotates them with the same type of data that we used to use for filtering (e.g. DoC, allele balance).  The output is a VCF with the INFO field appropriately annotated."
ONYX-1239 : Did some refactoring in ParticipantPanel and EditParticipantPanel.
refactoring
Update Hibernate stack. Update Hibernate ID generator. Changes to Hibernate mappings. Changes to OrderFileTest. Code refactoring.
minor refactoring
"refactored the populator module a bit, database populators are now called database updaters.. which is more suiting as they can also do things other than data insertion. also added a Revertable interface, allowing the updates to be reverted on demand. the composite and conditional updaters also provide default support for this revertable interface"
UML-311: Refactore ConnectorServices to handle new cases
refactoring
"Refactored a lot of the code, and started on status-updates"
refactored
Refactored examples into the examples project
api_refactor: refactor loadbalancer apis
refactoring
start refactoring of Main
refactoring package name and pom.xml
refactor krun options to use JCommander
"Issue 214:	Always log if exception happens + Code Refactoring"
Refactored GnuPG
BAEL-325: Refactored to use multi-module structure.
ISIS-537: refactoring out SelectorHelper
refactor - Don't urlencode AuthorizationFingerprint for client_api.
Refactor default port
ROO-3713: Refactoring changes on FinderCommands and finder name autocomplete feature
1102 - test refactoring to unify TestContentProvider
Client API changes and refactorings.
refactoring to support persistent connections
5.0 upgraded gwt to 2.1.1 and refactored and renamed the ApplicationServlet
SVNFileUtil refactoring - UTF-8 decoding moved to a single method.
Begin refactoring ScopeBuilder
Refactor GetOrgIdsDirectlyCoordinatedByPerson to new mapper style.  (B-07683)
MAHOUT-495 - Moved RandomUtils and uncommons math dependency to math to allow refactoring of random stuff.  Switched all distributions to use RandomUtils.
Refactoring - getContextData
Added warnings in case the uglifyjs process returns some error Refactored some code
More refactoring and itests.
Refactoring repository
#596 refactor so the code is more reusable for non vertx based gateways
Refactored adding parameter and renamed hash to map
refactoring some Text search classes
Refactoring NSClient
"add test for XML parsing error marking, plus refactored some code to support this"
HBASE-16968 Refactor FanOutOneBlockAsyncDFSOutput
Refactored distance field font.
Refactored.
CAMEL-335 - refactored camel-mail - mail consumers will not under the covers change from smtp to pop3 protocol. End-users need to change their URI to state correct protocol - added better debug logging of minemessages
Refactoring and minor changes to the paging system.
refactor(ProcessInstanceAssert): make variables map accessible for other methods
swtbot tests updated and refactored
untested refactor to allow stream to use post
Small ChatManager refactoring
Refactored project structure
Progress on Bio-Formats Importer refactoring:   * Fix problem with dimension swapping test.   * Change merge option to use number of channels per plane.
Refactored package names.
Refactored the promotion code to allow for a better separation of transient promotional calculation values and methods from the cart entities. Also added some additional abstractions that would make subsequent customization of the promotion engine more feasible.
"Added the place command, place feature file and refactored the move feature to use the place command before the move"
[CFG-4] refactored Config interfaces to a common design pattern in line with FIN-111
"BridJ: massive refactoring of StructIO (split out description of struct and its fields as top-level entities, StructIO now just does IO)"
"refactoring, integration tests"
refactored reward source factory
Claim command refactoring in progress.
Refactored and renamed GenericTypeManufacturerImpl to TypeTypeManufacturerImpl
refactor BasicJideButtonUI
IDE-145 added layout template descriptor validator as well as refactored some preference keys constants.
refactor control panel
Refactor out streams and add comments
"Major refactoring, bug fixes, enhancements and improved documentation."
refactoring to use ExecutorService
Refactoring.
Completed the initial refactoring of the tree browser.
XCOMMONS-1099: Refactor core extensions scanner to use new xed files generated in the WAR
"refactored methods to start processes and process instances to be more generic, added method to trigger \(catch\) events"
Feature #351 : adding possibility to force a subscription to a user or a group of users - fixing some merge errors - refactoring some code
REFACTOR: Rename
Undoing some refactoring that broke photon stuff
Refactored Request object to extend DefaultDbSessionFuture to reduce object creation and consolodate functinoality.
refactor name of DataSet interface
XLCLOUD-144 refactoring
Minor refactoring of xmpp provider plugin
refactored capability matching strategy and on client side session handling
"Added a new CF for Attachments, refactored attachments"
ProjectConfig sections refactoring
Refactor: Several small changes
Refactorings to resolve bug #342677 (Refactoring of JSLibraryConcatenator)
"refactor, change terminology from ""store"" to ""send"" to alleviate possible confusion."
Removing all private/protected/public execute() methods from CitrixResourceBase class Started the refactor of the XenServer56Resource class   - Unit test added Changing the CitrixRequestWrapper in order to cope with multiple resources classes and commands
Refactor http service activator
"Refactored TestClassRunnerTest, created MethodCallSpy"
refactor request handler a tiny bit
Added _valueRequirement to EquityVarianceFunctions; Refactor of EquityFutureOption VolSurface Construction
"with feature #3374, took the opportunity to refactor some stuff to facilitate the move of publication. Thereby code moved from SessionController to the EJB."
Refactored DefaultServlet and ResourceHandler to use commong ResourceService
Refactoring listStoragePoolsAndHosts command to new API framework.
"Refactoring: moved the 'isNaN', 'isPositiveInfinity' and 'isNegativeInfinity' to the 'CDebugUtils' class."
ProductDispenser tests fixed after refactorings
Made some minor refactorings
Minor refactoring and cleanup.
Refactored Wifi to provide static method parse().
refactored internally used models to leverage the core model
Refactor scoreboard implementation
refactored the main runner & solutions for Euler001.
refactored login window with some new layout
Summary: Refactoring code for extension.(T63987)
Refactor EVERYONE user principal into the FAD.
"SPARQL endpoint, Graph Store & XSLTBuilder configuration refactoring"
Refactored package name
Cleaned up and refactored OptionMarketDataView and related classes. - Renamed UnderlierInfo to UnderlyingSymbolInfo to be consistent with the Fix naming convention - Cleaned up obsolete TODOs and commented out code - Removed test methods - Removed specific casting in FixValueExtractor.exact
fix(engine-test): refactor log operation handling
Refactor RemoveUnusedVars to allow for logic to remove properties.
Refactored to remove dependency on spring in GenericTable. Renamed wicket-spring adapter to PageAdapter to better communicate its intent.
Refactor setting variables into a method to allow for a subclass to override.
api_refactor: refactor vmgroup apis
 WINDUP-253 Refactor WindupProcessor/Impl
"fix broken links, refactor T2-Client to client to fix dependencies"
[refactoring] Fixed issues caused by notCardType. Removed notCardType - it was a relic from previous implementation. Renamed notScopeCardType to scopeNotCardType. Renamed notCardTypeList to notCardType for consistency with cardType.
make enter import alias an actual proper refactoring 
Bug 330123: Rename refactoring and const parameters.
Refactor and simplification of caching/stitching
Refactored Cube to Cell as planned in Heidelberg.
o Refactored code
Minor refactoring
Refactored into build package
Refactor suggestion user model
fix bug in computation of indent for Format Block light refactor
"Added template completions, removed / refactored completion classes"
Refactoring : Moving easysoa-samples-pureairflowers-service-ui-scaffolding to easysoa-proxy-core and renaming it to easysoa-proxy-core-scaffolderproxy.
refactor the classes into their own package
"Corrected functionality, refactored code, improved JavaDocs."
general kie refactorings
minor refactoring
"Refactored package names to fit ""org.jboss.ejb3.x"" convention"
Further refactor of the portlet view in preparation of building the RSS view of the portal.
refactor the processor interactions
#NAME?
"Progress on Dust compilation, small refactor in JS compilers"
new js sourceElementParser refactoring and use it by default
Browser module heavy refactoring
Added support to change comments of refactorings
Refactor ColorTable code
refactor package
Add test for redis cluster max redirections and refactor JedisClusterCommand exception handling
refactoring providers to allow for more convenient entity creation.
Fix web test since web pages are refactored.
HBASE-3016  Refactor zk logging in trunk; do less and and identifier to log messages to help debugging
Refactored names Fixes for setting team option
Refactored logic out of failDueToMissingException
Refactored entities based on inheritence status
refactoring: renaming ModelInputData-->AccelerationModelInputData
Refactoring GFF parsing somewhat.
[ENG-85] Refactor position master
#NAME?
[CVE-2014-0111] Refactoring JEXL evaluation
"Add support for response redirects on resource requests (by simulating them with a server-side request forward). This is needed for instance by the class editor, when a new propery is added via AJAX request: the first request adds the property while the second, a redirect, displays the new property. Refactor the code to simplify it a bit."
Refactoring added sparse vector
metamer: war manipulation and JBoss CLI invoking refactored
Refactoring  nName -> lastName vNamew -> firstName
[releng] mostly refactorings of packages and test bundles
Refactor and cleanup
"Renamed and made into a whole Maven project. Builds, but refactoring and separation is required."
Refactored: decoupled listening for daemon connection and sending the runTests command
Refactored ensureBucketExists -> validateBucket
Issue 385: refactored internals so that creating new compute providers is much easier
Refactoring of LocalSelectionTransfer to CLocalSelectionTransfer.
"initial program guide view, refactored some classes into more appropriate packages, initial program, channel, and recording delegates created"
refactor and fix simulation test classes
Refactoring of BQSRv2 to use longs (and standard bit fiddling techniques) instead of Java BitSets for performance improvements.
refactoring of the main class
"Refactoring to use the new version introspection, parent pom"
refactor(jobexecutor): renaming packages
refactord --untested
refactored SQL dialect usage added exists() to sub queries
Results refactored
WFLY-1077 IIOP subsystem: Socket factory name refactor
refactor
 * Refactor OAuth to be less complex.  * Remove oauth as a standalone api.  * Rename redundant OAuthAuthenticationFilter to OAuthFilter.  * Make AuthorizationApi more simple by using form semantics.  * Simplified OAuth by only permitting RS256 and none algos.
Portlet API refactoring
#NAME?
- GTNWSRP-35: refactored registration validation to move towards a more stateless model   + Adding a registration now requires a check against the producer expectations.   + Some RegistrationPolicy methods now requires passing producer expectations and the contextual RegistrationManager instead of recording references to these.     This reduces problems with improper state management when the policy is changed and/or reloaded from persistent storage.   + Trigger listeners after the producer configuration is reloaded so that they can be informed of changes.  - Do not notify listeners if the new policy is equal to the old one.
major builder infrastructure refactoring
refactored and finished out hook model and reworked sdef file
adding jDoc and small refactoring (S3Bucket reader extracted into new class)
Remove slf4j-jdk14 dependency. Set default config for ExpensesSheet entities obviously in ehcache.xml. Add log4j loggers. Minor changes to documentation / i18n. Code refactoring.
Little refactoring to make SimonConsoleRequestProcessor more extensible
"Refactor, tests and javadoc documentation"
Refactor conditions in Wait Matchers
"SOAP-1053 - Implement basic configuration gui for OAuth 2.0 Add FEST test for OAuth2 Basic configuration GUI (these are ignored for now since they don't work well when running all together. Will look more into this) Refactor production code affected by the above tests to be testable, by giving name to components. Refactor the FEST tests and add common set of utility classes to be used in the future. Clean up old tests not being used. Clean up system test pom file and release it from the Maven integration-test phase so it's not built by default. Refactor the RequestAuthenticationInspector into a hierarchy of inspectors based on request type"
"Refactored UnderlyingSymbolInfoViewSection into a UnderlyingSymbolInfoComposite, for simplicity and usability. - Removed AbstractViewSection (now the whole section is represented as a composite instead) - Further cleanup of the UnderlyingSymboInfoComposite class - Added getters in OptionOrderTicket and related classes for UnderlyingSymbolInfoComposite integration (in-progress)."
WyC: more refactoring of the code generation phase.
Refactored internal query items
refactor: net interfaces
Refactor to pull out common code into AbstractIndexer class.
Refactoring.
Refactor/findannotation (#1104)
refactor out all of the preprocessing steps
Refactor LegacyOutputTracker: eliminate code duplication
Refactoring
refactored to use jest-common as base.
47788: Move CU doesn't add import to cus in other package fragments of source package [refactoring]
Mayor refactoring Updated to work with UUID instead of plain names. There is currently no updater for old configs
1. removed the DirectConnectRouter and use DefaultMutilConnectRouter insteand 2. refactor the registerModule interface to the ModuleInfo instead
refactored ControllerVisitor to AnnotationVisitor
Refactor Service/Server models to reflect etter their scope.
Refactored addForeignKeyConstraintChangeStatement
Refactoring done. Fix bug for join id of type String
test refactoring
Refactored IfLabel classes in preparation for making a DAO-based version.
Basic logic of the simulator. Refactored entity names and tests.
Job refactoring (wip)
"XWIKI-7748: Refactor environment directories, add special ""xwiki-temp"" directory which is deleted on startup. Change EnvironmentConfiguration API to get the directory name as a string rather than a file which is initialized later. Moved EnvironmentConfiguration to /internal/ because it should not be used externally and would be impossible to change, being an interface. Introduced commons-storage with UnexpectedException. Throw UnexpectedException if writable directory cannot be gotten rather than giving caller an unwritable directory."
Added support to filter refactoring history wizard preview
refactor logging: now stdout/stderr is redirected to the log file and I can have everything on the console for debugging :-)
"api_refactor: resource (limit) apis, move capability and cloud identifier"
#NAME?
refactoring: renamed module 'compiler_impl' => 'compilerimpl'
Package refactoring.
Refactor exception handling in TCTokenHandler
Refactoring putAll to _putAll so the constructor can call the copying in code without running through a subclass' implementation of putAll. Reported in COLLECTIONS-317
core: MultipleActionsRunner refactor: extracted canRunActions method from execute()
some more refactoring
"REFACTORING Renamed Day.contains to Day.containsMatch, for uniformity with Day.addMatch"
"refactor Parser and remove ExpressionValidator, fixes gh-24"
JmxConfigTool refactor of JmxDatacollectionConfigGenerator to get better test support.
general refactoring
refactoring + xml completion tests
[DSU] refactor exchange gtfs
Refactoring for improved MVC architecture
refactor due to the main (reteoo/spi/rule) changes + retraction related changes + start of Waltz code (initial development checkin)
Cleaned up and refactored all Action subclasses.
Refactor mojos into categories
ROO-301: Choose between data access patterns - refactored to encapsulate service method differences within new ServiceLayerMethod enum; added support for findEntries method
General refactorings
"some refactoring and handling of : imports, qualified names"
project refactor for the reqs for v1.0 release
refactored WebProcessor: extracted AbstractProcessorDecorator which handles the core of the implementation of a XFormsProcessor
"Refactored classes a little bit (just moved them to another package). This will break code, but fix is very easy. Also for RssGenerator added another constructor for usecase when base URL isn't website's root"
Refactored client-side support so that it matches the layout of other template packages.
--Added .gitignore file. --Refactored FileCompressor classes
End of ESHelper refactoring
Fixed width handling and did some refactoring. Fixes #4
Refactored MysqlEncoder/Decoder to be more like the Postgres implementation.
Refactor the Broadcaster so unit test are easier to write. No functional changes
Some refactoring in jade-core.
SHL-42 - Refactor package name to remove reference to roo
#NAME?
matrix lookup table refactoring
some cmd line refactoring
refactoring with utils attribute
Refactor: moving the SonarRunnerUtils to sonarrunner package.
Rename CycleConfigurationService to CycleService and SimpleXStreamRepositoryConnectorConfigurationManager to CycleServiceXStreamImpl. Depends on the naming refactoring changed SessionUtil and RepositoryConnectorConfigurationManagerImplTest. 
#NAME?
"Fixed FB warnings, some smaller refactoring of console output"
Refactor Access token status to be not null
refactoring Germany
"HEMERA-2343: refactored jobexecutor interfaces into own API module and put it into shared libs on glassfish, adjusted build and jboss subsystem accordingly."
Refactored WidgetComment (RAVE-729)
SVN1.7 (wc-ng): refactorings have made by Marc Strapetz
Refactor: extract deserialize() method
Refactored.
Refactoring: HttpsProxyServlet rename to TunnelServlet
Refactor a bit - follow same test structure.
project refactor
Refactoring. Concentrate proxy logic in one class. Looks not bad =)
"Begin MockAppEngineCloudClient refactoring, moving towards more readable (& writable) tests. Also try to fix some flaky tests by replacing Thread.sleep with a latch or wait call."
NOJIRA: Refactored PersonIdentifierRepresentation into a static nested class of PersonResponseRepresentation
UiElement generics refactor part 1
Refactoring of selection matching.
refactor CustomInfo class; add readEvent() to EventRepository and EventRepositoryImpl;make all integration test running ok; replace zurich in logserver.properties; delete CustomInfoRowMapper
refactored the OntologyMatchingService to OntologyService; completed the ontology/ontologyterm interface e.g. adding getDescription() method
refactor to abstract out the wire protocol
"Refactoring: Removed empty interface IServiceStateInfo, renamed ServiceStateInfo to ServiceStore"
Added some tests and a bit of refactoring
Refactoring Lists
code refactoring
unit test refactoring now that 676 passes
Refactored code by moving up common code
Implemented consumer updateLink.  Refactored EntityId to use entity-set name instead of EdmEntitySet.
Refactor VirtualNetworkApplianceManagerImpl
Parser refactoring finished
More updates for RequestContextHolder refactor
194979: [refactoring] MoveTest reveals AFE in RefactoringHistoryManager
Refactor Msg to better handle memory and Java idiomatic
Refactored some web classes into more appropriate packages.
Refactoring names for clear purpose.
refactor Main UI class
Refactored all my code to read in the AS files easily.
Issue 440: refactored zone and region logic into top-level jclouds so that we can decouple amazon's concepts from api implementations
refactored tool-bar and moved dialogs
org.urbsat refactoring
"Refactored Chunk to GlowChunk, now implements Chunk, added GlowBlock implementing Block"
refactor testcase.
Refactored code - moved classes from org.jclif to org.jclif.parser
"refactors the Task service, pulling out TaskOwner, TaskState and TaskTransition as abstract interfaces with concrete implementations"
minor refactors; playing around with beginning to add test coverage
ROO-2745: Post 1.2.0.M1 code refactor and clean up - tidied DisplayStringMetadata
"Refactoring, pulling assertRGBEquals method up."
"refactor screenshot key controllers, refactor component factories"
Refactoring: Moved common interface 'Issue' to new package.
UI improvements and refactoring.
more reorganization and refactoring
Some Improvements for GeoPlatformFeature Editor TODO : SOME CODE REFACTORING
Refactored some classes and cleaned up some unneeded code.
Refactored decorators
"HIVE-17409 : refactor LLAP ZK registry to make the ZK-registry part reusable (Sergey Shelukhin, reviewed by Prasanth Jayachandran)"
refactor(bpmn-model-api): rename generic jsf form quickstart
Refactor to support  container migrated to Tajin
Refactor Diagram Figures Stage 1
"refactorings, splitting up tests, added ear packaging"
Refactored test to make it easier to add more tests.
REFACTOR: changed name of WaybackContext >> AccessPoint
Refactoring Modals
Refactor amazon-s3:// property file loading to support no directory
refactor of type declaration creation and property reactive mask calculation (#1290)
"refactor properties, configure job execution, enterprise webjar"
JBRULES-2347 Camel -refactoring xstream usage to use shared implementation in core -moved xstreambatchexecutiontest to camel and updated it to use camel pipeline
refactored to satisfy the bnd requirements
Refactoring
refactorings
api_refactor: refactor network apis
more refactoring
refactor: reduce and isolate dependency on servlet API
"test working again after objectbuilder changes, +refactoring of package structure"
Refactoring: moving more classes to API
refactoring batch update api
"Fixed SYNCOPE-580, refactoring and added realm stack, SYNCOPE-158"
Refactor http util
[refactoring] Moved Sets.loadDeck to a DeckImporterImplementation
Refactoring
refactored common xml building method
refactor
Optimizer Refactoring continued. WARNING: Broken
refactoring
Refactored some classes and interfaces to c.h.impl.base (issue #79)
refactor
fixes #39 Refactor Chainr to allow for a Guice Transform Loading
Refactor ChangeTable so much of its UI is reusable
refactor functions generating metadata for selected S4 method environment
"Major refactoring for better testing. Unit tests fail (DB problem concurrency), but app is running."
Resources refactoring: - Added ContentProducerResource + handling - Dynamic resources updated to use encode() instead of getInputStream() - Removed wrapper interfaces & added factory methods for creation of wrappers for dynamic resources - Removed PushResource marker file (not necessary) - Added JSONResource
refactoring
KARAF-2741 Refactorings for error and connection handling
"XWIKI-3429: Implement the new UI for the Link dialogs * Implemented wizard step to add a new page * Removed wiki, space and page from the LinkConfig serialization, to be used only to pass parameters for a new page * Refactored DefaultWysiwygService to compute link reference and to rely solely on DocumentAccessBridge for URL and reference computing"
Refactored Liquibase logic back to sql scripts
Refactor audit event system (#2687)
refactor package name and add maven exec:java plugin
Refactored AttributeMetaDesc.
Major refactoring of SSLConfig and certificate authentication
Refactored Services
"Added Tracking via GoogleAnalytics. Configuration Restructuring, Refactor'd Main Plugin Class, Cleaning."
[IO-302] ArrayIndexOutOfBoundsException in BOMInputStream when reading a file without BOM multiple times. Refactor tests to use both BOM and no-BOM test files.
TrackMate_: WIP4: major refactoring
Refactored and tested ABM-254
Minor refactoring.
refactoring api to make it more abstract
Refactoring NextBillingDateNotifier to fix dependency issues
Refactored: use the phase change pattern in SuiteConfiguration
Refactor classes.
Accepting patch for acceptance test task 2381 from Aditya Shah (GS). Includes new test cases and refactoring of create multiple loan helpers.
refactor
qa-maven-plugin: enhancements * refactored with Guice * Mac support * firefox and EAP are now unzipped to project.build.directory * firefox binaries for various OS/OS version/arch in Jenkins environment are mapped in configuration (in pom.xml) * reorganized members/formating * support for disabling of some parts of the plugin * some properties are now cached * added some tests
Very alpha build & refactoring to support location awareness
79415: Failing testcase RefactoringScannerTests#testQualifier
refactor code - rjrjr
#NAME?
restapi: refactored out updateActionTypeForQosType method
SLICE-8 Refactoring and javadocing
Refactor out all prefs / settings into a separate class
malutki refactoring
XML-related classes were changed (new methods are added + small refactoring).
"Major refactoring of extension point API classes, addresses these bugs: Bug 427021 - <modelExtension> and <customTask> extension points do not allow use of FormalExpression types Bug 427406 - Add support for EndPoint objects and define extensions Bug 355682 - Define target runtimes extension point and Preference Page This is not yet complete, but wanted to save my work."
"lots more refactoring of specs and integtests, per ISIS-463"
Minor refactoring.
API refactoring; createNestedUpdatable is now gone and is a factory instead.
refactored virtualbox scripts to use new scriptbuilder functions
Refactor: Moved project specific code to *.project package.
Continue JDBI move : - Refactored the authorization module to have class and method level   annotations instead of field level - Deleted what remained of the DataNucleus module
"More refactoring based on what Eddie started. Highlights: - Almost no checks implement their own Scanner - DescribingMatcher class deleted - Checks can implement more than one kind of matcher - Use a sentinel value rather than null for ""no match"" - Still construct efficient lists for executing checks against tree nodes based on the type of node All tests passing, and this feels nearly ready to merge to trunk. Big question is the proper resolution of the diverged SelfAssignment and SelfAssignmentChecker."
Refactoring: AbstractTask
Refactored. Added support of new providers in schema.
Refactored branding migration and the migration task as a whole
Refactoring of 2Q cache automatic increase of memory from @logart
Continued refactoring of loan schedule financial calculations. 
Refactored
refactor SequenceItemEquivalenceScorer
ACT-168: refactored TaskInvolvement to IdentityLink. Added getIdentityLinksForTask() to taskService
Refactored the browser-based tests to improve test time
"o refactoring of the creator to use request/response, another step in the round trip test works o pushed many default values to the archetype creation request to make things work in a fully embedded mode"
maven refactor
Refactoring miner
JBRULES-1408: Refactoring of ruleflow to act as a pluggable process engine
Refactored rest tests to just be.. easier to write and maintain
"A bunch of changes: I wanted to run all tests for each of the back-ends and serialization types, there's a bit of a hack by extending Suite and you need to list classes in DynamicSuiteBuilder, but it works. Also, some refactoring: - Noticed that Features were not versioned, moved them - Noticed that Tags also need versions, moved them ... looks like we could merge Atom and Particle, but will do more tests first - Some state transitions were wrong causing weird errors"
Refactor ApplicationMaster
#NAME?
TAJO-1691: Refactor visitors and planner to throw TajoException.
- Refactored the StementProvider and related classes to a simpler Statements class that's easier to configure though the xbean configuration system. - Added test cases that show this in use.
Refactored event handlers: now only two handlers are needed one which handles parent-> child relation and one handling the opposite. Dirty/commit/error handlers are all integrated in this system. Additionally validating state is added as fix for RCP-323. Added sample to check events and handlers.
"CSPACE-6520: Introduce 'reporter' database role, supplementing and ultimately replacing 'reader' role. Minor refactoring of reports post-init handler."
"Fix JUnit Ext example, refactor scanning classes."
testWhenStringHaveMultipliNumber_Refactor
#332 endless refactoring
refactor to q0r.ca namespace.
[PLAT-2271] Refactored main grid structure
refactoring to add more picketlink
Optimize chain download further by skipping merkle root verification unless there are transactions relevant to a wallet in the block. Refactor some code out of WalletTest into a new static TestUtils class.
Refactor Code
refactor jdbc data convertion
"HIVE-8718: Refactoring: move mapLocalWork field from MapWork to BaseWork (Reviewed by Szehon) merged from trunk, r1636888 w/ corresponding Spark code changes"
Bug 431622: Refactoring: Allow derived classes of RegisterVMProvider to create alternative configuration
Docs updates and minor name refactorings for config classes and annotations down to but excluding SendStatus.code()
refactor
Initial refactor leaving interfaces in net.refractions.udig.catalog and the implementation out to the info plugin
Refactorings
Refactor into multimodule project.
Refactored: separated ReferenceFactory from EntityManager
reload software manager if not hit and do a little refactoring
Refactored
"Refactored java.io.File -> java.nio.file.Path, expect lots of things to break after this commit, using resources in plugins will be a lot easier after this"
Refactor some stuff.
Refactored Create Beans Dialog and Action
refactor web alert
refactored JFrameAppliedRule
refactored AcademicServiceRequest and AcademicServiceRequestSituation to use new AcademicServiceRequestBean
refactoring project structure for maven
Lots of refactoring and code cleanup.
"Refactored code dealing with ""jobs"". Primarily this involved moving code around, but it also made the LoadPreferences job a proper Job for consistency."
ROO-1864: Refactor RooBot client
#NAME?
More refactorings on PivotRenderer and StateHolder API
Refactored the XMLHandler Added tests Added test XML to test resource folder.
Major refactoring Changed groupId Changed artifact names
"refactoring, javadoc"
Refactor tests so that logic can be shared between tests
"Refactor unit tests (Jenkins doesn't seem to like 'build with JDK 1.4, test with 5.0')"
refactor
refactored the CategoryRules
refactor Serialize.writeNull
TYCHO-570 Refactored PomDependencyProcessor
Removed SLD code Classification methods refactoring CircleSymbol and InteriorPointSymbol refactoring
"Added liking, refactored bulk activities mapper"
Re-enabled NewProjectShellTest and refactored to properly use Shell test harness.
fixed a couple bugs. minor refactoring. documentation.
Refactor interfaces and classes that are specific to HTML gamesheets to com.kblaney.ohl.gamesheets.html package.
minor number test refactoring
1.2-SNAPSHOT - TranslidDocument.insertAt and TranslidDocument.removeElements method for mixed content supporting - string building in TranslidDocument improved - total refactoring
"Good test of basic functionality, needs some refactoring and helper beans."
refactored a little and removed some unused variables
refactor EdtManagerPool
"Added Host/Domain Application URL feature, which replaces the single text control URL for applications. Included are validations for URLs based on existing domains, as well as refactoring of the application deployment wizard to use a new abstraction called a UIPart which allows for better management of error handling in the wizard. Mapped URLs also now uses the Host/Domain feature."
Cleanup and refactor of FileDownloader. Now using apache FileUtils
"thesis extraction, something refactoring"
"Refactor some variable names, update descriptions"
"added batch-job for exchange rates, needs a bit of refactoring"
EST-608 : refactoring findGuarantee; reorganising code
Created new tags for input type=password and labels. Added a small ElFunctions class as a point to add EL functions. Refactored InputTagSupport to better support the label tag. Added the until-now absent package.html for the layout tags.
#NAME?
Refactor code
Refactoring.
[OPTIQ-382] Refactoring rules to use factories
#204 refactored DB structure to deal with private and public autocompletion info
issue 69: refactored http clients to not be bound to a single endpoint such that redirects can be assigned to another host
estimate refactor
refactor package
"Refactored project into modules, splitting the HTTP layer."
#NAME?
[FR] refactor propagation engine to enable engine switching
Add service loading functionality. Refactor to always keep a reference to the used ClassLoader.
refactor api and service modules
1GET5T0: ITPJUI:WIN2000 - Missing up/down arrows in the refactoring source change browser
Refactored all the things. Now it looks cooler.
ACT-24 refactored concurrency controlling in ActivityExecution interface
Refactor to allow file-based instrumentation
Refactoring
Refactored so that the main user API is the abstract API defined in 'org.iq80.leveldb.api' package.
refactor runtime delegate
small refactoring of ComponentProvider
Additional BroadleafCheckoutController refactoring.
"refactor to use interface for FSM context, make session impl an inner class."
- Summary:Code refactoring for chart UI (#54843) - Description: 1. Refactor the chart UI classes to be more extensible
refactoring
Refactor ResourceManagerService
MIFOS-4657: refactor principal and interest calculation for each installment
"[MRM-138] add checksum tests and bugfixes, refactor digest utils out"
minor refactoring
minor refactoring of test code
"unit tests, javadocs, refactoring, testing, HSQL in memory DB for unit tests"
refactor
refactor bounds and item redraw
TEIIDDES-2482 enabled ddl importer to properly set SQL for Teiid views and procedures  * Required refactoring virtual relational objects to relational plugin  * Required adding a dependency to transformation plugin to ddl importer plugin
More refactoring of dynamock.Mock class: removed deprecated factory methods
Package refactoring. Preparing 2.6.0.CR3.
renames/refactors   - around PartialValueTuple   - around Poisson patch test   - extract dirichletPredicate property   - extract PoissonSampleConfigBase
Refactor CSV Exporter into separate plug-in
* Refactoring spring configuration classes to match new modular approach * Pulling classes in to different modules to reduce efferent coupling * Tweeking generics on APIs
Test improvement and refactorings.
Added a bunch more code to the Book Inventory example application and refactored the BookDatabase to extract common code.
Refactored: avoid *Impl / EntityManagerImpl
"#634 - Refactoring of some SystemProperty methods, add tab, no associated roles by default"
Major refactor to make per context printstream concept entirely generic
CMTC-38 : Refactor builder configuration to decouple the options from the builder
refactor ; creation and last modification date now at the friendly resource level ; suggestion origin is now a friendly resource. Every neo4j  node in graph is now a friendly resource.
Refactored Xml marshalling code for re-use.
Refactored: don't use WorkerCounter for TestFileFinderRunner
"REFACTOR: just a cleanup, no fixes."
TIKA-132: Refactor Excel extractor to parse per sheet and add hyperlink support     - Patch by Niall Pemberton
Refactored Forge start
HIVE-9418p8 : Refactor code out of RecordReader
* BPEL Bot Test refactoring
more naming refactor
Feature #7291 - PublicationInstanciator refactoring: - implementing ComponentInstanceDeletion into PublicationBmEJB and adding integration tests to validate it - removing unnecessary dependencies on notation library because it does not exist anymore!!! - implementing ComponentInstanceDeletion into DefaultRatingService and adding integration tests to validate it - re-activating all publication unit tests that was into test-waiting folder
Updated and refactored test harnesses
Big refactoring of builtins
Refactor the adapter helper to base field conversions on static methods
Refactored an AbstractPingRequest into the opennms-icmp-api project.
Unit testing additions and refactoring
"refactor (extract methods, etc), and align changes from other classes"
refactor Building class.
refactor project strucure
"test refactoring, renaming"
"Refactor Transactions to Tasks, with own IDs, and better representation for remote responses."
refactored parsing of Groovy version string into AbstractGroovyMojo
"fix for 37127 add checkbox for ""public abstract"" in Extract Interface [refactoring]"
various cleanups related to plugin refactoring
refactoring the application filter out of the search and history pages
"Refactoring for #31 part 3, fixes #31: - Remove casts to QueryCriteria."
Load balancing: small refactoring with names
unit test refactoring
"refactored test package structure, bumped version up one"
Update Commands for the CommandParameter annotation. Refactor code.
Gros refactoring BIS (allegement du swccg-holotable.jar a 2mo)
"general clean up with assistance from UCDetector, javadocs, light refactoring"
Assembler is now nicely refactored... back to the ConfigFactory
refactoring
refactor package
BUG FIX: non-module dependent scoped beans do not work as expected -- were improperly excluded from consideration. (test added) BUG FIX: introducing new classes in development mode causes Errai to fail in some cases -- add support for hot file reload directly in MetaClassFactory.               This does not work with annotations -- updated GWTUtil to throw a sane exception explaining to user the reason for the failure. BUG FIX: transmission buffer will produce corrupt data if it overflows instead of failing gracefully -- will now through and IOException (test added) REFACTORING: move Java compiling utility class from marshalling into codgen to resolve silly dependency from IOC.
refactoring to reduce complexity
refactored the overlay change listeners out of the list and back to the SwingOverlayManager. Started adding listeners for DisplayViewSelectedEvent so the selection in the manager is synced in the other direction.
JBRULES-1520 RightTuple merge for asymmetrical Rete propagations -Added MockRightTupleSink -Refactored MockTupleSink to MockLeftTupleSink
[JBMAR-69] (EOFException when deserializing objects that have references to objects with custom readObject) A bit of refactoring in the marshaller related tests so that it's clear what's tested in each test. This is the result of adding tests related to this JIRA at different levels.
- Updated to Vaadin 6.8.3 - Refactoring and cleanup - Added means to hide/show individual filter fields - Should correctly handle generated columns - Improved the demo application
Refactor 4.
Some refactoring and cleanup in properties adapters for ItemAwareElements and RootElements
Huge refactoring (before deletion of unused files)
refactorisation: extraction des declaration des contrat du constructeur de ContractList et création de methodes privé.
Simple refactoring of graph routing
Refactored tests
refactor watcher and imageservice
large refactory for possible AsciiDoc support. Needs to implement AsciiDocTab
Fixing imports and refactoring of packages
"1, added framework for shrink ironfan/ambari/cloudera manager deployed cluster 2, support shrink ironfan deployed cluster(for stateless nodegroup only) 3, fix one problem found by findbugs 4, improve error handling, add blacklist for ironfan 5, some refactor DeleteSingleVMStep.java"
HSEARCH-1841 Refactor DeleteByQuerySupport
ACT-24 refactored concurrency controlling in ActivityExecution interface
Ipv4 Capability refactored to IP Capability.
"Updated JSF version, refactoring"
Refactoring to make parser implementations more consistent across representations
refactor
Refactor to abide by Eclipse naming standards.
Bug 83343 - Show dependancy calling in the Ant stack Refactored getTextMethod
Refactored the project and implemented the REST interface.
-Big refactor here removing Bindings. They just aren't necessay and Declaration can assume there role. -Added InternalFactHandle which extends FactHandle and exposes id and recency -Made a BaseMannersTest which both reteoo and leaps can use.
refactoring output
Changing button names in refactor.
Introduced non-String EXML constants. Some refactoring allows the IDEA plugin to reuse utilities needed to guess the constant's type (if not given explicitly) and to render the constant value correctly (e.g. String quoting).
[CXF-5902] More refactoring to get the utility AesCbcHmac decryption working
Issue #779: MedSavant integration for handling variants Refactoring to pass checkstyle
#NAME?
changed slf version and refactored dbunit
Refactored appenders. Enhanced Lucene and Bdb datastore.
Minor refactoring.
"Shapes : Refactoring code generator, adding in-memory generator (work in progress)"
apppend refactor
ShowletConfig refactored to WidgetConfig
Part of the refactoring.
Many refactorings and test case fixes.
[PLAT-3477] Refactor heartbeat sender to allow another transport to be dropped in.
Refactoring package and name of Accordion
RF-12900: refactored menu components to subpackages under ui.menu
Refactoring and Improve testing on method overriding.
Refactored configuration handling
minor refactor and cleanups
refactoring for wrong package nameing
"Refactored VisualizerCanvas, moved static functions to VisualizerUtils and reorganized all the methods. Also minor cleanup and changes to the communicator and Coordinate classes. Added an FPSCounter class to show the visualizers performance."
"Refactor AST change tracking to correct inaccuracies introduced when SCRIPT became a change scope root.  SCRIPT nodes were not being set as the ""change scope"" when a function scope was pop'd from the scope stack if there was not a block scope between the script and the function.  Script nodes are only on the scope stack during some unit tests, when the traversal is started from a SCRIPT rather than a ROOT, during normal operation SCRIPT are not semantic scope roots."
BAEL-11: Minor refactorings
Refactoring of code for interacting with Clojure from Java.
XLCLOUD-1012 - resources editor fixes; template editor tests refactoring
Refactor facets to utilize the new Field class
JBEHAVE-974:  Refactored step parser to allow configuration of character class for finding parameter names.  Cleanup of class implementation.
webadmin: Refactor validations to cope with IPv6 addresses
Refactored StreamUtils a bit.
139 design refactor
Refactored
MIFOS-4322: refactor loan service facades
ROO-2745: Post 1.2.0.M1 code refactor and clean up - renamed PersistenceCustomDataKeys to CustomDataKeys and added the key from LayerCustomDataKeys and the new key for DisplayNameMetadataProviderImpl
"Refactoring * Move classes to the ""parser"" subpackages"
"Refactored the configuration to avoid requiring CacheConfigurationBuilders.   Instead developers can simple use a CacheConfiguration instance when requesting a CacheManager to ""configure"" a Cache through the CacheManager.configureCache(String, CacheConfiguration) method."
Refactor drools endpoint and report domain.
refactor
Refactored the tests to only use the Checker interface
[refactor] Move ThemeManager initialization to configuration
a bit refactoring and allow to specify different location2node indices
refactored compute provider implementation
Refactored
Refactor ManifestPluginDescriptorFinder to allow custom managing of V… (#154)
Refactoring of EIK WTP UI
added querydsl-jdoql refactorings
Refactor pixel recording code
membership registration made over connection to prevent re registration when connection is removed. Partition trigger mechanism is changed from client. Membershiplistener is converted to initial membership listener to get member list without loss of event. ClientMembershipEvent handler is refactored out from ClientInvocationServiceSupport to make it more understandable.
Refactoring for ease of testing.
MIFOS-4322: refactor service facade for offices
Refactor windows identification to a method
Preparation for enabled/disabled state support of FB plugins in Eclipse: refactored widgets to use CheckboxTableViewer
"refactoring + fixes Bug #1430 , closes Feature #1427 , closes Feature #1414 , fixes Bug #1411 , fixes Bug #1410"
ACT-741 refactoring persistence
some refactoring; use older version of webdriver and firefox since webdriver 3 is not yet stable enough
integrated nls tool into refactoring source folders
Provided a refactored folder structure for faces part (with templates protected under WEB-INF folder). Implemented an XML backed dynamic data model for the menu bar.
Refactored TabularInputRenderer. The generic input behaviour now considers the read-only property of slots.
pom clean up to use managed dependencies and package refactoring in compiler module
Unit test refactoring
"refactoring monster method, no functional changes"
Refactor to remove duplicated code
Refactoring + URL redirecting works
refactoring packages names
#POULPE-226 refactoring for edit component properties view
Refactored the JMX support to add the ability to describe the attributes and operations of the Neo4j MBeans. This makes the Neo4j MBeans almost self documenting in JConsole.
"refactoring , BSP is buggy"
HBX-1415: Phase out the use of the deprecated Configuration class - Refactor ConfigurationTask#createConfiguration() by ConfigurationTask#createMetadataSources()
refactor DocLinks in Move to (New) Source File refactorings #1065
Improve support for refactoring JSDoc annotations: * Handle stacked annotations such as @const @private {Blah} * Add support for @exports and @package * Correct bad replaces for annotations that are optionally followed by a type
"Small refactor/cleanup, removed VanillaPlayerProtocol and VanillaPlayer (Its now collectively called Human), Added VanillaPhysicsComponent to handle velocity specifications of the official protocol."
* Refactored LoadStage into LoadStage (base) and LoadDataStage * JIT avoidance moved into Blackhole
Yet another refactor to have the ANT task support a nested <property> element. This let me remove the ugly have I put in to support relative paths. Got the idea from Vincet Massol. Bug 605141.
#NAME?
updated license; refactored to align with org.jenkins-ci.plugins release
Refactored I2CBusImpl and I2CFactoryProvider
Android: Refactored getArtists() to getIndexes().
Refactoring and completing Hive Syncer (not yet working)
Refactored.
Refactor versionMismatch logic
"[HTTPCORE-5] Refactored test cases affected by the refactoring of Header, HeaderElement, NameValuePair, StatusLine, RequestLine"
-> added configure interfaces command -> refactoring for actionSet -> Added herency from ICapability -> Oper setVlanTagging -> Fix problem with classloader in velocity -> Move some packages to commons
MODE-673 Refactor JcrResources to Better Partition Logic
"General java refactoring, test improvements."
Small refactoring of new gesture methods and classes
Finished the refactorization with the new ParticipationsInterfac. Protected Issues and Journals modifications when more than one user has associations with them. Added features to be able to create event edition participations.
HUGE Refactor. I will be making an mChatCompat soon. DONT Update until this is done.
"MobSpawnerEntry additions, small refactor."
Refactor code to mikera.arrayz.impl
[PLAT-5543] Refactored masters so that initialization in component factories is standardized.
ASNN-479 http://bugs.sakaiproject.org/jira/browse/ASNN-479 Refactor Calendar and Announcement integration logic variable scope
Refactoring to DeeElementImageProvider
"Refactored SnapTest, fixed exporting animation with GifBuilder"
Support for listening to tags changes. Some refactoring.
general refactorings
refactor service tests out from bundle tests
#NAME?
"Massive refactoring of underlying models, and removal of references to unused classes"
ProblemEligibleInjectionTest added + new resource files added for test + refactoring
activiti-cdi: refactored static way of providing the process engine
swtbot tests updated and refactored
refactor data view support
Cleaning again and Refactoring for Round-trip compilation
refactoring - move custom measures related classes in the measure.custom package
Refactoring module structure
Implemented remaining base library functions required to execute data() : - unzip - loadFromConn2 - dir.create - unlink - readChar Refactored and corrected gzfile impl to correctly handle case when gzfile is called on an uncompressed file (it should be open as a normal file)
Speedup image creation: (1) new BitRaster class (2) in RasterDataNode: byte[] dataMask --> BitRaster validMask (3) method renamings and deprecations (4) other refactoring
Big refactor of the services module: exceptions and packages etc
Refactored the new traverser matrix example to be normal Java code.
MIFOS-3052 - refactor survey access
Refactored GenControllerTask and GenViewTask.
Tests and refactorings for SaxConnectorForVerifier
"Event listener refactoring, and basic handlers for sign interaction added"
Refactor
minor refactoring
refactoring
refactored ShowInBeansViews support to use the newly introduced BeansViewLocation which holds the information to locate a specific node in the BeansView
Zone Index refactored
"- refactored/restructured AbstractApplicationPage - introduced PageComponentPane interface - introduced new ApplicationPage implementations: 	- TabbedApplicationPage 	- FlexDockApplicationPage - updated DesktopApplicationPage"
HBASE-4381  Refactor split decisions into a split policy class.
fixed logging & refactor so we could force the version string in the search if we wanted
"Bug 316303 -  [Compatibility] turn actionSets into MenuContributions refactor, slight differences"
Refactored VehiclePulloutService to pull directly from external service. Changed Spring configuration so that external pipo service is only pulled from each IE instance instead of each TDS instance. VehiclePullOutService now consumes external service as XML instead of JSON.
refactoring
"Refactor AsyncHttpClientConfig, close #1003"
Refactor code
Refactor slide master for PPTX
mysql parser refactor.
"Adding code for horizontal scrolling + refactor scrollingaspect a bit (code is still largely incomprehensible). Horizontal scrolling works for the most part, left/right edge effects don't draw."
Initial refactoring of view and resource organization.
refactor
Started refactoring of server implementations
#NAME?
"Strings.after(Fn<String, Integer>). Refactoring and null-safing."
Refactored: ConcurrentMarkSweepCollector
DDF-1831 Implemented marshal method in TransactionRequestConverter and moved it to the transformer module - Moved the TransactionRequestConverter outof endpoint module to the transformer module so it can be used   for both endpoint and source. There is still more refactoring that needs to be done with another ticket   to separate out the trasformer common from the transformer converters but that is not in the scope of   this commit. - Implemented the marshal method in TransactionRequestConverter so that we can now go from Transaction objects   to xml. - Added some new constants that we now use for looking up transformers
"#JC-1251 JavaDocs improvement, small refactoring of external links functionality"
Refactor plugin type handling into handlers
Refactor content tokens and lookup
 ItEr28S14RFVistaGraficaInformacionAvance: Refactoring some method names.
Refactoring the clear tool interaction so it is more easily tested Added log entry merger Added log files used in testing
"Some corrections to the ChangeLog, make some of the cobertura-check ant attributes shorter, a small bit of refactoring, and renaming ""regexp"" to ""regex"" in a few places for consistency."
refactored param build service
refactoring
Small refactoring
refactoring - listener delegates to application
refactoring. make sure any Node related operation on current document happens within a proper boundary  and the model gets released afterwards.
"added tests, refactoring"
Refactored board input handlers into separate package.
Refactored code to implement pattern layout logging as an appender that extends the default LoggingEvent style appender. Also added tests demonstrating support of sub-documents and arrays as values.
Refactor createPageControls to extract new method prepareDialogPage
Refactor AbstractTreeIterator.pathCompare to force another mode
getVariants() refactoring DatasetGraphAccessorHTTP subclassed from Jena Version 1.0.10-SNAPSHOT
SB-617: Heavy refactoring of the strongbox-storage-* modules (Phase 2) ---------------------------------------------------------------------- SB-776: Make it possible to define layout-specific search providers
apis modules refactoring (#1369)
Refactor ProvisioningHelper into ProvisioningSession and ...Factory.  This will allow caching of the CSM authorization data for many logical role operations in a single session.
refactoring...
tools refactoring
engine: Refactor setup networks parameters builders
refactor
CMSPLT-32:  Modest refactor -- move moarkup out of a controller into a jsp
Feature #4152 : refactoring some packages and fixing some unit tests
pattern matching - some refactoring to implement nested patterns
ACT-168: refactored TaskInvolvement to IdentityLink. Added getIdentityLinksForTask() to taskService
Adding ModuleName field to the configuration page. Some refactoring.
Refactor to change PMS.get().configuration.foo() to PMS.getConfiguration().foo() - tcox
* pure refactoring (to move away from VARGL)
[PLAT-1296] Refactor time-series master; Fix EHCache serialization
"TMF: Refactor XML model code, using factories to re-use element parsers"
Refactors and cleanups
VPE refactoring: 1. Moved part of tracing code to VpeDebugUtils class 2. Removed switcher to clean up the code 3. Created factory method for SWT events out of mozilla events 4. Removed unused code and comments
Refactored some
Refactoring
Refactored EmailService
refactorings and tests for jackrabbit hotfolder
APEXMALHAR-2301 Refactor timebucketassigner to add a single timebucket assigner and change the timebucket metadata from array to map to handle unbounded time buckets
Refactoring of LocalDateInterval and InvoicingInterval; fixed error in InvoicingFrequency
MongoStore: refactor with smaller methods
refactored CDI events to separated package + refactored some Jms producers to on class: CdiJmsBridge
refactoring; unicode issues in entry names fixed
Refactored MethodLogger to MethodLogController
refactor MessageBuilder API
refactoring packages
big refactor commit. 1) all classes which were no longer necessary are either removed (no longer usable) or marked deprecated (usable but legacy) 2) modified classes now use the new headerresponse implementation and the jquery backing library which wicket uses. the library now compiles but not guarenteed to work
Refactored Engine to use literate configuration (too many optional parameters) with Default ctor und DefaultToken to carry sourceName.
"Refactored maven modules. Added a new cdk-morphline parent module, and off of that added submodules cdk-morphline-core and cdk-morphline-avro and cdk-morphline-tika, naming following their dependencies."
Refactor AbstractInterval
[REFACTOR] How the ActionNotPermitedException is used.
RESOLVED 345702: Refactor SessionSingletonBase
"Fixing/adding/refactoring tests (actually, procastinating from packing, but these are test fixes)"
refactored into Models/Views/Controllers
refactor so this is more easily subclass-able
refactor and improved the coloring support
[#3] Improved some tests [#51] Done some refactoring
Refactored some methods and MenuManager class name
"1. Implemented function to modify a loan product. 2. Added security controls so that only administrators can view, create, update, and delete loan products. 3. Refactored loan product controller hierarchy to eliminate duplicate code."
Refactoring of clientsdk properties
refactor + begin adding sentence level concurrency
refactor
#NAME?
Some refactoring of material classes
Minor code refactor
Refactored and cleaned up code
further refactoring
QUA-117 : Minor refactoring to modal feedbacks.
fixing bugs associated with publishing and revitalization publishing tests - after refactoring
Updated: A bit of refactoring and extraction
Refactor some interfaces for operations
NOJIRA: Refactored 'add person' REST API to use XML representation instead of www-form-urlencoded
refactoring and add constants to interface
[PLAT-3494] Refactor: rename ViewStatusReporterTool to ViewStatusTool
describe() refactoring
Refactoring
Refactored name of completion methods and added version filter to version completion (#33)
refactor
"refactoring of connection manager class, fixed problem with not thread safe close method, added try catch blocks for correct handle exceptions. Added log util method error and debug exception"
"[MOD] XQuery: better error messages, various refactorings"
mysql parser refactor
"Refactored artifact coordinate, started on launcher"
"fix in FireworkRocketItem, refactors Canary#logStackTrace to Canary#logStacktrace"
refactored execution getWorkflow and active execution
Minor refactoring.
Make availability reports locateable. Minor refactoring of existing code.
new actions to support proxied oauth calls from shindig; refactored OAuthStoreImpl to use these new actions instead of direct mapper calls
WyRL: refactored the code for determining equivalences of two automaton states ahead of fixing #374
Refactored: renamed classes
Refactor chart builder for better customization
Refactored
package refactor
Minor fixes and refactoring
"refactor test cases: use testNG instead of junit, as testNG can group test cases and pass parameter to test case"
"Implemented InputMessageHandler and MailInputListener, some refactorings"
Refactored packages
and yet more refactoring
"Refactor poll outages, bug #3790"
refactoring error handling logic
Feature #907 : refactoring (get back Transaction mechanism introduced by Miguel to handled the finest as possible the JPA transaction into a service) (moving user notification sending from SuggestionBox.Suggestions to SuggestionBoxService) (moving the specific status information of suggestion to the ContributionValidation that is a common object)
Refactored CycloMetric according to #445
Refactored HDFRecordReader to handly more data types efficiently
Refactor down method lengths
Refactor errai-cdi so that errai-cdi-client dependency is not required for server-side code.
Refactored rave shindig to use common person model (Supports RAVE-347)
"Gurpreet| #1984| Removed classes we don't need right now. And did some cleanup and refactoring, and renamed class to KrishnaFontTransformer since its not a generic class."
refactor watchDirectoryService and restructuring indexer package
#NAME?
Scope locking adjustments. Refactored file persistence to use quartz (removed FilePersistenceThread). Unit test fixes and some general clean up.
Refactor and test code around equals and hashCode
Nearby refactor
"STAT-104: Refactored SiteStats API, deprecated old classes, deprecated old methods, added javadocs for major API classes and methods, added flexibility in sql columns for report queries (API)"
Fixed Bug 307758: [extract local] Unable to refactor expression without resolved type in variable initializer
Generalized code between different super type refactorings
guard implementation wrongly refactored (there was richfaces-selenium specific JavaScript code) + tests for guard timing
JBRULES-1271 refactoring
Webadmin:  Refactor out the PoolSpace-Usage as a Panel for reuse. Will be reused in the PoolGroupview page.
Refactor packages
Major refactoring of 1D barcode code. Moved into com.google.zxing.oned package. Misc. other changes to support this refactoring
Refactored
Refactor or rule2 By DAOv.2
more refactoring
"refactor tests for separation of concerns, add tests for unbounded scans"
Rename INTERNAL/java/src to simply src; a source directory should be easy to find. This refactoring doesn't appear to break the build or functionality.
Small refactoring for diagnostic purposes (remove swallowing of JMSException)
Bug 471357: target runtime refactoring
"Export API refactoring and improvements. Create a ExportController implementation in the ExportAPI module to isolate export features from UI. Refactor Export SPI with a new ExporterBuilder, using similar approach than Import. Adapt existing exporters to use new API with either ByteExporter or CharacterExport. Add to controller the possibility to work from Writer or OutputStream directly. Adapt DesktopExport module to use the new controller."
jetty-9 SelectorManager refactorings.
bug fix and refactoring of final degree work features - getting only not closed execution years - checking if department administrative office has current associated departement (this shouldn't be necessary!....) - converted all DTOs involved into wrappers of domain objects - fixed JSPs accordingly
CAP-59 Refactored ajax calendar code to better handle assigning events to days in accordance with the user's time zone.  Also added inline comments.
wrap list<word> into phrase + iterator code refactoring
#NAME?
refactored layout factory
Refactoring
minor refactor to share code
Many comments & some small refactorings
refactor
Refactor Locking Project
Refactoring and documentation
"I2C-0006 - mhuckaby : refactored Image2Css class to service, increased testability and test coverage"
Refactored HBase configuration management and pulled out some common configuration options into StorageManager.
srm: Refactor representation of SURLs and paths [step 3]
Work in progress: refactoring HttpDaemonTest for using ResourceInstaller
"CAY-452: EJB QL Cayenne Query refactoring query translation, pushing it down to the JDBC layer, so that generated sql could be customized per adapter"
refactoring
Provider refactoring
Refactoring of the MongoEventStore Added constructor to EventStreamNotFoundException as the message was the same in all cases.
temp commit to get on with refactoring
More refactoring to move to JAXB for XML definitions loading.
refactored completion engines to use jdt apis instead of wala
Refactored evaluation method for operating system family names
Refactoring.
Code Refactor + some documentation
Fully combined standalone Spring database example with Tomcat webapp.  Refactored Marks code to work with mine.
CAMEL-504 - Refactored atom and added unit tests
Refactoring of indexing code; building of non-positional indexes.
Refactored to use SPI style
"JBRULES-1625 Create Scheduler API with JDK implementation -Basic refactoring for for TimerService, instead of Scheduler"
Refactored ReportManager so reports are just built in memory and not persisted
dcm4che/dcm4chee-arc-light#651 : Refactor STOW-RS tool
refactorings
"fixing and refactoring the tree, more end2end testcases."
Refactor: Also allow coordinators to view content published on execution course sites.
Refactored the Renderer from the Client.   Moved Input into the Player.  TODO: fix the mouse input events so that things rotate correctly.  
More refactoring
"rename plugin, do some refactoring"
"CheckStyle, refactor."
TAJO-224: Rearrange DataType enumeration and Refactor type systems. (hyunsik)
"Add support for to the ContainerAwareDetector for Corel OLE2 formats, and Microsoft Works (TIKA-486) Also slightly refactor the child container detectors, so we can do common fallback logic when the container detector can't figure it out"
TEIID-494 ensured that batched update commands get evaluated if needed.  also refactored the planning logic of batched updates.
"Bugzilla#282479 Fixed by revising regular expression check to complex expression like data[""country""]+""Q""+data[""Quarter""] Also refactored expression utility methods"
HV-491 Rebasing George's work onto current master and refactoring it to unify with mod10 used by CreditCard constraint.
Refactoring DefaultDomConverter...
Refactor and test periods
Refactoring integration via Gaussian quadrature. Old work that I hadn't got around to committing
Refactored the visitor names.
"changing the interface, some refactoring"
Refactor and add model package
#1 Refactor request/response models.
Major refactoring of Marshalling - Unnecessary interface methods removed from Marshaller (getEncodingType and canHandle) - Nullable type marshallers now extend AbstractNullableMarshaller to unify null handling - Removal of unused classes - Stop initializating the marshallers in a static initializer -- turns out this is BAD
Refactoring / code style.
Refactor observed classes and packages to make better use of scoping
refactor
RAVE-731 Refactored RegionWidget to replace the Widget field with WidgetID. This required updating quite a few JSP pages/tag so that the potential widget list is passed in from the page controller.
Refactored dialect interface to read from cached meta data
refactored the or;and methods
DT full refactoring (less memory consumption)
minor refactorings to orthorectification tests
Refactored the Camel consumer -> Twitter4J Consumer architecture.  This also created all direct consumers.
Refactor event painting code to add interface for rendering many events simultaneously for better performance
Refactoring FeatureReference
Refactored out totalFrequentRenterPoints code into Rental class
Refactoring tests to use new delegates setup
refactor into two modules to make it easy to implement another version
raw/generic refactor for issue #270 - CampBX
- GTNWSRP-189: attempt to rewrite textual content that's sent as binary. Added test cases. - Introduced WSRPConsumerSPI interface and made WSPRConsumerImpl implement so that we could refactor the code to be more easily testable. - Added support test classes.
[MSC-22] Refactor ServiceInstanceImpl listener notification code.
Some more refactoring
[Refactored] some classes
"client proxy refactor by removing distributedObject delegate, fix close operations"
Preparing to refactor the build-plan stuff to make it a little less complex and more usable...and to re-activate late-binding of plugins when necessary.
More refactoring and clean-up. Moved a bunch of stuff into a new 'api' directory. Removed/renamed old TPC-C cruft. Started working implementing the TATPWorker...
Refactor event handling to allow an Operation to wait for an event.
refactor scatter GL instructions
Refactored method names with beginning with big capital letter
Refactoring
refactor - change sc to broadleaf and change jndi settings and database
182346: [refactoring] Refactoring could flag affected binaries which are impacted: - added Rename Method - improved Rename Type - more tests
WIP update/refactoring on caching
"Revert ""Refactor toString() impl. into new method getFullName()."""
Refactored ProgramVariableQuery
#NAME?
"[CLEANUP] - Refactored xml domain entity serialisation into separate class to improve separation of concerns and to ease ""mockability"""
Refactored EO classes in WOO editor over to eomodel plugin Moved charset constants and NS charset conversion into CharSetUtils Added package and component location prediction to WOComponent creation wizard Added filename validation to WOComponent creation wizard Fixed typo in .settings of project templates when setting the encoding type of /Components Removed option to create woo file from WOComponent editor. It now gets created when the chosen charset is not UTF-8. Extended TemplateDefinition to support character encoding. Fixed WOComponent creation and template merge process to actually create components with the selected encoding type. References to NS* charset strings are now converted to java charsets before .woo file creation. They should probably be removed from the UI to match.
"Did a bit of class name refactoring. Clojure nature now adds the clojure bundle classpath to the JDT classpath, launcher is able to successfully start a REPL in a separate VM."
JBRULES-3324 Refactor the Simulation Fluents for World Remoting
[HAMA-457]:wq Refactoring of BSPPeerImpl
1. integraged guice-servlet 2. refactored some clases 3. implemented proper index.jsp 4. experimental XMLHttpRequest wrapper which should proxify all ajax requests
"blunt force trauma to CAst frond end: 1) Structural changes in the AstTranslator to allow retranslation and generation of custom IR.  This is mostly moving state from the translator itself into the context. 2) Some refactoring to share some AST generation code across the Java and JavaScript front ends. 3) Switching to the latest Rhino, release 1.7R3; this is a pervasive change to the JavaScript Rhino translator, since it involves switching to the new AST interface in Rhino. 4) Common code to, as an option, translate Do-style loops by replicating the loop body.  This allows the use of CAstNode.LOOP forms for such loops. 5) Some bug fixes to the mechanisms of the CAstRewriter to handle weird control flow cases. 6) An example of retranslation to specialize JavaScript methods based on how many arguments they receive at call sites."
"further work on edit mode added vi-mode, not working correctly yet refactored Config -> InputrcParser"
#NAME?
invoice payment api and dao refactoring
Refactored: renamed EventizerLocator to EventizerProvider
refactor to Term
"Refactoring a few things to support thesaurus visibility  in the web UI, BAU-210"
And a refactor here too for good measure
Refactored package org.jboss.forge.container to org.jboss.forge.furnace
" - refactoring, fixed some unnecessary sampling in BS filter, fixed a variance bug in PL filter"
test refactoring; all 3 failing cases now in 'failing' package (need to disable at some point)
"Some refactoring in histogram, added javadoc and better comments"
Refactoring
Refactored entities a little more. Updated main plugin for World Changes. Added basic The End generation (needs lots of refinement). Removed test command for getting skies (needs to be re-done).
Fix Bug 1190624: refactor CPD integration
refactor
rn Triangle -> TriangleContainer Refactor ArrayTriangle and Icosahedron into ArrayTriangleContainer
cleanup/refactoring to prepare for public announcement
Refactored to make markup creation for headers reusable - bug 372257: Revise branding-to-entrypoint binding https://bugs.eclipse.org/bugs/show_bug.cgi?id=372257
refactor: #67 move variable methods to AbstractCaseAssert and make them available for HumanTaskAssert
Refactor EndpointPathRequestMatcher
"refactored org.molgenis.framework.ui so that the UI now follows clearly Model, View and Controller (MVC) design pattern. Main objective was to make more complicated plugins follow a predictable design and loose generics where not needed. Also a lot of the boring tasks are now default solved in plugins (handleRequest, Exception handling, database transactions). Small draw back, all plugins need a small change in the constructor (ScreenModel should be ScreenController<?>) which was implemented in molgenis_apps"
 refactoring: moved annotation related code into  annotator module
Refactored PartParserTest with one test per assertion.
"In order to support combining the three standalone webapps (onebusaway-transit-data-federation-webapp, onebusaway-webapp, onebusaway-api-webapp), we do a fair bit of refactoring of the struts.xml config files and refactor all the onebusaway-api-webapp Controller classes to be Action classes to match the convention of onebusaway-webapp."
#5 Enhanced aggregation API. Code refactoring.
refactored statistics package by removing Statistic class
minor refactor of the foodDetailDTO
refactoring
[#CAM-61] Adpated more test cases and refactored the query dto classes to share common functionalities.
Behavior refactoring
"Refactor: the ChannelManager used to be responsible for getting the auth token when you initially subscribe. It only did it once, which means that if the subscription gets queued the token will be stale by the time the connection comes up. Changed it so that the fetching of the auth token and building of the subscribe message is now done by the PrivateChannelImpl and PresenceChannelImpl classes themselves, and only when they actually need to subscribe. They will also call the authorizer every time they need to subscribe, which should make resubscription after a connection loss work properly. Also added EndToEndTest.java which mocks out very little (just the websocket) so is useful for making API calls to Pusher and seeing which messages come out the other end."
111056  [refactoring] Move Member Type to New File does not make private member visible
Refactored TextUI
[Misc] Refactor the REST API module
RESTEASY-1171: A bit more refactoring of start method
Refactor Package names :)
"[jvm] new: JNode.owner(), AbstractJNode; + affected classes refactored"
code cleanup and refactor
" - Was stealing code from the wizard page for the ActionScript 2 editor when I found some horrrrrrible code that needed refactoring. So I did.  - Refactored the widget creation for each separate control. Should make it easier to steal code from, I mean, debug. Yes, debugging. Honest."
"Refactored PactModule, added SopremoModule and shared base class"
refactor code
- Summary:  Refactor code(Partial).
Some refactoring in MeshExporter.
NXP-3632 : small code refactoring
Small refactoring to make command definitions even smaller
refactor MockingUtilTest.java @bug W-1628452@ @rev tbliss@ @rev gtorres@
Refactor - rename different empblems that were named the same
Refactored some classes to consolidate all of the org.opennms.netmgt.vmmgr classes in the core/daemon project.
Refactor package structure Introduce new IO architecture Remove listener mechanism
Refactored away some duplication; ASTClassBodyDeclaration no longer extends AccessNode; ASTViewer now provides more info
#NAME?
343482 refactored overlay deployer layout to use WAR layout
1) Refactor how trip planning constraints are internally handled by api methods 2) Initial support for transit shed calculations using new OTP-based search 3) Some service alert tweaks
Minor refactor Edge class.
package refactoring
Conversion and refactor
"Added tests, refactored and improved branch spec normalization"
Refactor JWT code and add TaskRouterCapability
"JBRULES-1520 RightTuple merge for asynchronous Rete propagations -mid refactor, bit of a mess, but wan't to be prepared in case eclipse refactoring screws up."
fixed checkstyle violation refactored changeset 
registration refactorings and test stabilizations
refactoring requestinfo->methodinfo
Refactoring dependencies.
Code refactor. Fixed issues with generation of code and changed way of NGMON namespace's methods generation. Todo: Finish adding log events & add Go-match support & statistics.
"Changed AbstractFiletypeAnalyzer to expose getFileFilter() instead of getSupportedExtensions(), and refactored existing implementations to return a FileFilter instance. The new FileFilterBuilder class encapsulates building of a filter that can consider the full filename or other attributes, in addition to file extension."
"Completely refactored the mouse event handling, redefining dragging within a view, content dragging, and moving views.  Events over borders are now changing the cursor properly, and mousing is more accurate.  Now the start of a drag action does not occur until the mouse has moved three pixels vertically or horizontally, which makes it easier to perform the click gestures without accidentally starting a drag."
refactored demo added noop operator test for prob=0 added greedy scheduling algorithm
WIP: Started test renderer refactoring
refactor common block devices
XLCLOUD-228 redirection on form submit handling for vcms-gui; refactoring
Refactored
Refactor CameraHelper
"Refactored bad protocol layer design, not done yet Renamed INetworkEvent derivatives ( no more naming conflicts with protocol events )"
Refactored and unifid Java API example jobs
"http://jira.jboss.com/jira/browse/JBIDE-680 Refactor templates. New names: ""with libs"" and ""without libs"""
"Introduces the PathwayMonitor, an abstraction which refactor the reaction recursion depth monitor, and fixes bugs for the monitors."
refactored startFlush(); added additional startFlush() method
#JC-1428 Refactoring.
refactor
Refactore EIK JMX
refactored
refactor
refactor
"CSPACE-5727: Refactoring part of program flow into several methods. Restored pseudocode comments, inadvertently dropped in a previous commit."
"gdms: refactoring, MemoryDriver's methods 'start' and 'stop' renamed 'open' and 'close' for consistency."
- Summary: Chart scripting refactoring - Bugzilla Bug (s) Resolved:
JBRULES-720 Clips Parser -refactoring to use new framework version -renamed from clp to clips
"Worked on some of the win-condition setup, refactored some other code"
Refactored: make SchedulingControl the top level object
refactor PHPVersionProjectChangeHandler to a meaningful name: ProjectOptions
Refactor to abide by Eclipse naming standards.
Refactoring of EIK WTP Core
FACES-1385 Refactor icefaces3-chat-portlet to make it look more like the Liferay chat-portlet
Inital code refactoring to support test replication.
Refactor common metadata code into base class. Fixes BUKKIT-3624
PHP Plugin - Refactoring of the PhpDependResultsParser class
Refactored BuildTest to be parameterized
Refactored: moved reusable database classes to *.db.common
Major refactoring of PDBFileReader and MMCIFFileReader
1) refactored the jar2sramparchive classes (moved from client to atom) 2) added a switchyard-specific version of jar2sramparchive (v1)
Refactoring some of the tests to make them run more reliably on Windows
Refactored packages. Added priority role monitor.
DDF-285 Refactored cache implementation for retrieve product. Made changes in CatalogFrameworkImpl for new caching.
Added extract node from property refactoring.
"Refactor impl package, cont5"
"refactor command line storm overrides, ensure they have highest priority"
Package refactoring: net.recommenders.plistacontest.recommender --> net.recommenders.plista.rec Package refactoring: net.recommenders.plistacontest.utils --> net.recommenders.plista.utils
refactor
refactor common files. add some logs.  .mapreduce. package is broken
Part 1 of refactoring tcga workflow prototype code for reuse PLFM-576
Refactor of tests *Test.java to *GwtTest.java
refactor restructure plugins into two separate packages
Refactor Spring with Lombok samples
KERN-1753 Added paging to queries in mysql and derby. Refactored a chunk of code that proesses entries to create conjunctive clauses.
Refactoring
refactoring execution model.
Properties has been refactored
refactoring
Refactored test builder to extend abstract testng citrus test directly
refactoring NodeUpgrader
refactoring
Refactored in back to fieldIn and added javadco
refactor in package org.wikbook.core
refactoring utilities
"ISIS-1603: trivial refactoring of password panel, date picker panel (remove duplicate validation)"
 - some clean up and more debug refactoring
"Item retract handled, refactored some code"
WiseML-Merger: Refactored some merger classes
Refactor TextSizeUtil markup measurement
TAJO-929: Refactoring PhysicalExec to have two types Unary and Binary
(1) 4th development snapshot of the new Color Manipulation toolview (2) Refactoring of the ImageInfo API (3) Refactoring of the image factory methods in ProductUtils
"Code cleanup, reformatting and some refactoring"
"refactoring, moving to loaders, added rssLink to channel"
"MAGNOLIA-3549: - refactoring: second param to EditWorkPlace is (at least currently) a path in the tree. Also modified equals() impl not to take into account path, else a user confirm dialog is displayed even when navigating via browser's back button within the same tree."
RESOLVED 334637: Refactor GC
Start GL200 decoder refactoring
refactoring nettoyage tests actions
"Refactored the startup sequence for the app. Modularized it in case I ever want to change how it works later down the road in a different class (different FileStorePoller settings, for instance)."
Refactors the view infrastructure to more closely mimic the MVVM pattern
Javadoc + Refactoring of server-side wrappers methods to use in Functions
Refactoring core package now that xsdlib 2010.1 is deployed
Added simple @JavaBeanValue and @Factory. @Factory tests. Simple refactoring for Value/Parameter ValueMetaData creation.
refactoring and create new fetching handlers - part 2
refactored ProcessInputTermService to MatchInputTermBatchService
refactor report manager
"formatting, scoping + snapshot builder refactor/fixup"
* MCBans 3.3 Release * Important Update * Refactoring com.mcbans.mcbans to com.mcbans.firestar.mcbans
Added Detail Level. Refactored StopPointsV2Action.
"refactored user, added accessbean"
Refactor dataserver
Refactoring Projects module and Actions.
"CreatureStats uses enums, old code refactored"
SOC-885 Refactor UIUserListPortlet
"Starting version 2.0 development. Refactoring, implementing more node primitives and adding unit tests."
Added interface creation wizard. Added interface creation stub (inclomplete). Refactoring (wizards and stubs).
LogicRule refactor to distinguish btwn sampling/step/total weights
Refactoring Tasks names; Created test for undeployment script call
"refactored maaany things, added conf by xml, not yet working"
PAXSB-6 Implement refactorings.
"refactoring for CompositeItemStreamReader, can be used as util"
Refactoring user story reporting.
Refactor into multi-module maven project.
"Refactored the filter to SQL translator in order to modifythe generated SQL which was horribly slow.  The new translatorgenerates reasonable efficient queries but at the cost of slightlydifferent semantics for unusual (and uncommon) OR conditions.I decided to settle for the stricter semantics because the more generalstrategy takes nearly 100 times longer.Matt Brozowski"
put refactored code in CamusSweeper.java
Optimizations and Refactoring
refactor extension invocation.
Refactoring: renamed method.
* Aligned with test-suite. * Refactored embedded classes to (non-public) classes with package access.
[AMQ-6546] Big refactoring and cleanup of karaf itests
Refactored with helper method to move the ghost.
Refactor getWorkDir() to Repository
again big refactoring
Refactoring.
Refactoring of remote services api and rest api
refactor extracting getStyleName
SWITCHYARD-2045 Refactor camel-sap quickstart
refactoring
"https://issues.jboss.org/browse/JBIDE-7005, refactoring our jsf 2 validators."
Fixed (42868) Controls appear to be smudged when viewed in PDF using Arial Unicode MS 1. Changes the line width for simulated bold font to 0.225f 2. Refactored the PDF emitter.
"Partition refactoring, move transformers interface to SPI package, implementation go to PartitionPlugin module. API implementation go to PartitionAPI package. Delete PartitionImpl. Update panel's layout."
Refactoring for match value adapters
refactored String related functional tests out in a separate test class.
Issue 339: refactor so that scripts can be named
minor refactoring for better performance and added additional attributes from Identity
"Introduce PollStatus class representing statusRefactor PollableNode poll method.Passed tests on my Mac by the timing may have changed"
package refactoring
started to refactor function call ... but interupted during my work (however it still works)
"Component Objects do not need to extend or implement any class, SPI module refactored - implementation moved to impl, Licence headers added to Component objects API"
SRAMP-612 exceptions refactor
fixing bug #5668: - refactoring some code in order to be compliant with WildFly code migrations - activating some unit tests around the subject of REDMINE bug
[SUREFIRE-1095] NPE in JUnit 4.x RunListener + Refactoring
refactor
"[MOD] Refactorings: ""...Prop"" classes renamed to ""...Options"""
refactor package
"tests, refactorings"
Major refactoring and moving jelly scripts around
Rule refactoring into proper Language packages.
"When a COPY operation is the first statement issued in a transaction, it was not sending the BEGIN necessary to start the transaction. Refactor the non-query BEGIN code path used in fastpath calls to a common function that copy can use as well."
Refactor our common server connection funcationality
"Refactored EndpointDescriptionReader and added IEndpointDescriptionWriter implemenation (not completed yet, just added)."
issue705: refactoring WildcardType
"Added a check client-side so that server store ID matches client store ID, including refactorings to make that happen."
CAY-1438 refactoring EntityInheritanceTree lookups
Refactored so that the implicit root is explicit in the AST.
refactoring
[SSM-156] - Incomplete Refactoring to use the new API
refactoring pal to be more generic
ResultSet and DescriptorList were refactored and are now only one. Fixed the problem with result combination on the previous QueryProcessor implementations. Linear SimpleSearcher and a parallel version were added. Removed code no longer needed.
Refactor to remove duplicated code
"Major refactoring of the code. Got rid of guard-specific annotations, callbacks, interceptors, config, replacing with general versions. This makes it much simpler to add new guards. Also now there is a @GuardedBy annotation that can take a list of guards, which means that now we can have multiple guards of the same type, such as multiple rate limiters for different timescales."
Refactored PaymentPlan: - created ServiceAgreementTemplatePaymentPlan and ServiceAgreementPaymentPlan - created CustomGratuityPaymentPlan - refactored GratuityEventWithPaymentPlan to be configured with a custom payment plan - corrected SeparationCyclesManagement to move gratuity debts between
refactoring mehtod name
Refactoring.
"another round at refactoring, mostly builders and cosmetics"
"refactored and redesigned administration page (improved css design and base layout, moved project and login/logout to header, loginpage is based on BasePage)"
Upgrade Kafka 0.7=>0.8 refactor kafka operators #73
bookmark action refactor SlideExecutionEventFilter
Refactor UI construction to be more consistent across Screens
"Initial refactoring for ""load more comments"""
Refactored: task scheduler test
Major refactoring: renaming GameState->Position; Position -> Chessboard
"refactored the out the global knowledge builder, since the agent has it never the less. better to have one global less.."
Refactored ModelConstants to lib-shared-models
FijiClassLoader: refactor the addFile() method
[CXF-5311] One more refactoring
Refactored
Refactored and cleanup some code related to JsonPath extraction
Refactoring a method name
Refactor changes
bug fix and refactoring 
refactoring
"started on CSVParser; however it has highlighted that the callbacks are not being uniformly applied.  Adjusted the post process callback as stack frames are popped, but am planning a wider refactoring to reduce the number of edge cases in the current implementation"
Refactored
Refactoring: rename doRegistration as doBidirectionalRegistration.
A bit of refactoring - moved vcard classes into a separate package
WINDUP-887: Refactor XmlFile
Refactor: extract recordWorkspaceChangesetVersion
Refactor: pull some reusable bits out of gettingstarted into livexp
Refactor Xoo plugin
did refactorings
Huge refactoring to minimize time of creation of new HTTP connections
Refactoring of injection point metadata tests.
Refactoring keyindexresource unit tests.
refactor code
More refactoring of oxalis-outbound.
Code refactoring
"Refactor of MISignal to MISigHandle to not to confuse with cli ""signal SIGNAL""."
Refactored
"CAY-1230 Refactoring & unification of ""ROP"" and ""classic"" class groups Changing ROP event processing"
Refactored FilePath to expose the archive handling code.
Refactoring Java code generator test handlers
SAK-14932 Add members by email address; refactoring and error handling still needed
refactored IsLinkedClone
documenting (and refactoring) EPVC related classes
Refactored ViewResponse classes
ISIS-928: refactoring unit tests of simpleapp to use nested static class format.
"Major refactoring Renamed Assignment to Installation Renamed ConsoleAssignment to Assignment Broke inheritance between Assignment and Installation Changed Deployment to only save assignment and not installation Consolidated test assignment, installation, and repo code into helpers"
Refactor GoSafe decoder implementation
refactor tests to move long-term failures under failing/
TEIID-2215: refactored and moved code that is part of jboss-integration into runtime module to support the jgroups based object replication for clustered embedded Teiid.
End of mvp refactoring
Refactoring code.
Refactoring: Separated type handler maps into two types: one for system-specified handlers and one for user-specified. system-specified handlers are the ones that Gson comes with (DefaultTypeAdapters).
OPS: major refactor of the statistics functions
refactored package names
refactored
"merge r8370:8592 devel-aik-1-8-0 ... replicaManager Summary :  * requeue incoming messages to improve reaction on pool ""pnfs register"" command  * optimize processing of recently added /removed pnfsids in pools. Implemented in memory cacheing of incoming pnfsid update requests and reschedule updated pnfsids on the next replication pass.  - replication pass code refactored, see comments in devel branch"
refactored viewport item handling
refactor non-user APIs from org.dwr to org.dwr.extend and bug fixing after the big churn
[PLAT-1296] Refactor time-series master; Standard method names
Refactoring LedFixture and StatusPanelTest
Refactor
Further refactoring and added documentation + tests.
minor refactor
[PLAT-3477] Refactor heartbeat sender to allow another transport to be dropped in.
Object marshaller refactoring
"Small refactoring, renaming a class"
Refactor PhaseListener name
Some refactoring and improved error handling
DataArray API refactoring
flame traps have a higher terrain cost and so tend to be avoided in pathfinding.  Refactored to reduce complexity of contstructGrid() method
Refactoring nosql daos.  Dynamodb finished.  SimpleDB started.
Monster refactoring Part 3
refactor sql parser.
docu and refactoring
refactoring common parts of matcher and unifier
implemented the molgenis job framework and refactored the code
Refactor Integer Expressions
Refactoring to separate out JAXP parts
Transaction impl refactor.
Small refactoring
[PLAT-6804] Refactor BasisFunctionGenerator
Update password UC; tests refactoring
HHT refactor
Refactor: increase readability
refactor(engine): set declared engine properties based on setter name
reporting:    * Committed latest changes to the TRACNet Report (needs to be refactored)  * Added new cohort queries to framework   * Added unit tests (need to create test datasets)  * Added some useful date utility methods  * Modified preview report object to use widget handler (sort of)
Some refactorings towards a pi-message-oriented soup.  - Refactoring of the soup to remove Method/args and use Messages instead.  - Refactoring of ChannelRefs  - Jackson serialization fixed (which works but could use some more love to become less space-consuming)
refactored all road model builders into single class with one fluent api which allows easy discovery of options
Refactored the Derivers to share some of the boilerplate.
Big refactor: *Connection hierarchy
refactor and rationalise test classes
"MODE-733 Fixed an issue with AND and OR criteria, so refactored the parser to better handle rewriting criteria."
move the existing ICMP code to the new API the discovery code has not been refactored yet; I fear it's crazy threading stuff  :)
refactor tests in other package
Kiran | #6 | Refactored the code to rename all 'Call' to 'Reminder'.
"Add JavaResourceGenerator, and refactor ResourceFactory to select the most specialized resource type when performing generation"
"Implemented SGF-206 - CacheLoader and CacheWriter support on client, local Regions in a GemFire ClientCache.  Also, performed additional refactoring of related code."
Refactoring: Move code for getting history context out of HistoryReader
Freemarker support in TDD tests refactored
"Sliced the GAE in half like a gordian knot to avoid the constant merge conflicts. The GAE half has all the walker specific code.  The new ""Abstract"" GAE has the rest of the logic. More refactoring to come, with the end goal of having a tool that other java analysis programs (Queue, etc.) can use to read in genomic data."
[refactoring] Moved another field to FilterPermanent
Can rotate phone and check orientation. Also much refactoring of everything.
"Some refactoring Update to neo4j-1.3.M03 New classes: Breadcrumb, LoginCheck"
Inline materialize method in all getters - bug 342978: Refactor Tree widget to make it really virtual https://bugs.eclipse.org/bugs/show_bug.cgi?id=342978
introduced new annotation and refactored static params
o Refactored plugin
[Student] Refactor: Created a StatuteType domain entity to replace the old enum StudentStatuteType.
Refactor to call the index ActivePaneIndex rather than ActivePane
refactored method searching to allow invokes with one parameter to methods that take a list as parameter (e.g. onConnect)
"Last Jws -> Swe, some refactorings (BuiltInMappings)"
minor refactoring
refactored jinspectorpanel
Refactoring password injection + add job password injection
Refactor support for proxies to generically support arbitrary proxy libraries (now that every framework seems to use one!)
"added sort and query, refactored out client libraries"
"More refactoring. Fix an infinite migration loop caused by ""dspace database migrate [version]"" accidentally recalling DatabaseManager.initialize() (required moving MigrationUtils). Also add detailed warnings to this hidden migrate option."
cosmetic refactorings
Refactored externalizers into package not containing jboss since they're now not linked to org.jboss.marshalling API.
Refactor code related to timesheet lines list report
Refactored bulk load. Added a ruby script for performance testing.
decorators refactoring
"fixed up insight-log so it works with older pax-logging dependency. refactored the core out so we can use it inside an osgi/pax container, or we can use insight-log4j in a stand alone jvm without karaf and use the same API. also added some jolokia helper methods for easier querying with jolokia"
Refactored reduced read utilities
Initial refactoring
code refactor
Refactoring pom layout
refactor services
Refactored command line client.
Refactor org.metawidget.test to org.metawidget to allow testing protected methods
"made unused auth codes expired (they're still single-use), refactored auth code service layer"
refactoring + MatrixDrawable
BeanXML Validation test completed + refactoring + new BeanValidation Helper class
Initial commit of package refactorings discussed in the group.
refactoring constants
"B2.1 First steps in code refactoring, now webpages themselves include a minimum of functionality, instead most of it has been moved to the dk.netarkivet.archive.webinterface package"
"Refactored viewcontroller, now reloads frames by default"
"Refactoring the AffinityMatrixCreator to be an interface and create a new SimilarityFunction interface.  Additionally, any class using the WorkQueue now all use the same singleton WorkQueue, as opposed to their own.   - The two affinity matrix edge selection methods are now different     implementations of AffinityMatrixCreator.   - Each AffinityMatrixCreator takes in two SimilarityFunctions, one for     selecting edges and one for weighting edges.   - Any classes using AffinityMatrixCreator have been updated to use the     interface and take in a pre-constructed AffinityMatrixCreator as an argument   - The LPP based mains have been simplified to create AffinityMatrixCreators   - Every similarity method in Similarity has a corresponding SimilarityFunction   - The kernel functions from AffinityMatrixCreator also have a corresponding     SimilarityFunction   - A bug fix in HashBiMap is fixed that caused infinite puts   - Minor spacing or javadoc fixes as needed   - WorkQueue is now a singleton class.  Any threaded classes using the queue     now access the same queue and submit runnable's to it so that no job queues     are conflicting.   - GenericMain sets the initial size of the queue based on the -t option"
"Refactor commands into slightly more logical packages Every command is technically a utility, doesn't mean they all belong there."
Cosmetics and refactoring related to commits of bug 84144
Wiki formatter refactoring
refactor databinding
refactoring actions components
javadocs and minor refactorings
"HSEARCH-472 Refactoring test - using JUnit 4, introducing helper methods, splitting into multiple tests and adding test for restarting of session factory (currently failing)"
Showing refactoring history in property page
Refactor of EquityFutures YCNS Function to extend EquityFuturesFunction
[GUI-21] Refactor ViewportResultsJsonWriter to write both JSON and CSV for viewport results
Refactored Configuration class.
"refactored the Query/Update ""DSL"" again"
"refactoring, packages"
webadmin: Refactored base Model class probihition reason option
Refactored and implemented all Sound and Particle Effects
Add initial implementation for php generator and refactor existing generators
Check for bad requests (multiple query= or update=) Refactor.
ISPN-5791 ISPN-5872 ISPN-5873 Refactor implementation of projections
added factory methods in RefactoringStatus
Refactored to use central gui testing class
Replaced castor xml marshaller with jaxb2 and refactored samples and integration demo
WIP Thrift refactoring:  - Refactor PageDefinitionFactory construction
add JavaDoc and a bit refactoring.
Improved and corrected Fetch Plan Strategies  (Fix for issue 504) Corrected and updated TestCases Corrected hasSameContent method on ODocumentHelper Added concepts of OFetchListener and OFetchContext Various Refactor
More refactoring changes
"refactor to allow SSAAbstractInvokeInstruction to represent invokes with multiple return values, as needed by some languages"
refactor job app task id parse method
[Misc] Refactoring. Fix a bad internal package name.
Unregistering JMX beans.  Refactoring.
Refactored NcssMethodCountRule
renamed OpenSessionEventImpl to RecordNodeOpenSessionEvent.  Started refactoring HiveSessionFactory
refactor rename examples --> demo
Major refactor or authorization and token requests
refactor stoparea model
refactor tests
Refactor GUI and refactor to use Project
"UI refactor - Junit, doc and more"
refactors a bit
sql parser refactor 
"Revert ""Fixing imports and refactoring of packages"""
Refactor
Refactor method and member variable name
[MIFOS-3150] Minor refactoring. Introduced utils method to verify for empty collections
refactoring test utils
Minor refactoring and white-space fixes. Also converted from 4-space tabs to 2-space tabs.
Refactor test
"Rename, refactor some of the consumer api."
More refactoring. Fixes federated disco#info issue.
refactored out the dependency on the dev shell as it borks the generation of the commands
Follow-up to close() refactoring in r1547553 Fix some edge cases identified in some soon to be committed refactoring.
minor refactoring
Accommodating property refactoring in PMD proper:  Rule->PropertySource
refactoring sample4 stringiterator reading of line
"More refactoring, upversioned to 1.1.0"
ultralight updates and refactoring
"General cleanup, name refactoring."
Refactored main class getConf() to getMIConfig().. sounds a bit nicer
"TreeTagger based LAP added for EN, DE and IT (that adds lemma, token, POS). - eop.lap.dkpro.TreeTaggerEN, TreeTaggerDE, TreeTaggerIT. - Small, minimal test codes also added. - refactored openNLP-DKPro based LAP classes into new package name. (eop.lap.dkpro.*)"
refactoring of bindings for Marker
(experimental feature) adding support for a BananaPro GPIO provider. (experimental feature) adding support for a BananaPro GPIO pins. (experimental feature) added BananaPro GPIO listener example. refactored the GPIO providers based on WiringPi for better code reuse.
"Added unit tests; refactored DAO factory methods  to pass in parent object ID when requesting a DAO for annotations: 	DatasetDAO dao = ...; 	// old way 	dao.getFloatAnnotationDAO().addAnnotation(id, ""weight"", 100F); 	// new way 	dao.getFloatAnnotationDAO(id).addAnnotation(""weight"", 100F); Old API still exists, but is deprecated."
Adding the feature of handing animations in node attributes (useful for svg). A little refactoring: Rename of Effect class and renaming of constants
HTTPCORE-109:  * Made SessionSet synchronized * Refactored protocol integration test
refactor topology package; fix unit tests for multipath routing
#NAME?
Refactoring Value class to allow arbitrary exponentiation.
Refactored attribute validation
refactorization of deletion cases for the following domain classes:
minor refactoring
Refactored empty if checker to match on empty statements rather than ifs. Hoping to improve performance.
Fixes for teiid 7 unit tests and refactored unit tests
"Refactoring use of ParticipantIdentifier, DocumentTypeIdentifier and ProcessIdentifier."
Refactored handler into operations. Need to add/update tests and then finish supporting other helper objects.
"Bug 316303 -  [Compatibility] turn actionSets into MenuContributions refactor, so contribution code is in e4 and actionSet code is in ui.workbench"
Refactoring to reduce deplicated Web Archive processing code
Refactoring getUri function
Refactoring.
Refactored ValueSet handling.
"#365 - As a part of the customer state refactoring, do not include the login service as a default scanned bean (cherry picked from commit 37fd6450f08b6ac88793fffa078e52fc282c128f)"
Refactoring: html stuff to own service/item/html
Refactoring (done to support AlteredParts Patcher)
pmd: refactored PLSQL integration  * Using now javacc during build time to regenerate most of the AST nodes    and the parser  * all AST nodes inherit now from the new class AbstractPLSQLNode. This    class replaces the former SimpleNode. This class implements    the interface PLSQLNode which inherits from PMD's Node.  * Deleted all AST nodes that didn't have any modification after    generating them.  * PLSQL integration is now more like the Java integration
Verily refactoring...
refactor out common pattern in refactorings
Refactoring.  Push the revisions to the common aligner interface down into the aligner base classes.  Hack the managed implementation to support the new interface.
RdfaParser: some refactoring and JavaDocs
refactoring
refactoring and...  today we practice writing custom input character streams :)
Adding gamma CS01 functions that use the refactored code
refactor the name
"Refactored some code, handlers don't know it's selector directly"
"refactored model, changed input format, added plot."
CLOUDSTACK-9211: Refactor vm vram size setter method
ProcessNewColumns refactored into UpdateConfig and UpdateMaql tasks (Maql execution left up to the existing ExecuteMaql task)
refactoring to a new directory structure
Refactored context classes
Android: Refactored intent receiver.
"Refactor some IO code into .io. package, and eliminate some use of small files on HDFS"
WKT: refactored internal method names (yet again). Improved docs.
second round of refactoring for the out-of-tx behaviour
More javadoc - Refactor Signed-off-by:Craig Russell <tenowg@gmail.com>
Refactor classes presenting CFG nodes
"Refactored ""com.l2jserver.model.jdbc.dao"" to ""com.l2jserver.service.database.jdbc"""
refactor(BpmnDeployer): extract 'getNextVersion'
Refactored UI tests
Refactor
Refactored VanillaPlugin for domain change (as well as applied headers and small formatting mishaps).
Fixed Probe test failures. Refactored to leverage some of Graphene advantages such as @Page.
"Refactored Workbench action builder for 29179, cleaned up messages"
ISIS-233: refactoring JsonValueEncoder
"Refactored code to avoid throwing Exception class, Simplified some codes"
refactored the packages a little bit to make AuditEvent and AuditEventNotifier more prominent; its the main API to audit
refactoring to make it easier to override parts
"topic: code enhanced module: deegree-tools, GRViewer description: better MVC handling - refactoring and Code-simplifications"
"SOAP-2214 * Refactored encryption field. It used to be an int (three-state flag), and is now an enum. * When a project import fails due to not being able to load the project configuration, SoapUI will no longer try to fall back and create a default configuration. Instead, an error message will be displayed to the user, asking them to verify that the file they're trying to import is an actual SoapUI project file."
Completed user management section; included also change password functionality for administrators. Some refactoring in code. Added logging in backing bean.
refactor rename of MarketMetadata
refactoring: separate parser package to 'php4' and 'php5'
refactoring couple methods to StringUtil
Some refactoring
Refactoring to prepare for 1.8.0 release
Refactor command thread creation logic into BaseCommand
 use different keyspace with schema when you insert or merge you don't need cast for your object refactoring messages errors
cells: More refactoring of CommandInterpreter
refactor tests to make them simple and remove deplicate code everywhere
Filter clean-up - refactored OncePerRequestFilter out to the new AbstractFilter and NamedFilter for clarity and to constrain OPRF to only already-filtered checks (overall functionality remains the same though).  Modified WebConfiguration to add a getFilterChainResolver method and deprecated the old getFilterChain method (it still functions as expected for now).  Further modifications will wait pending mailing list discussion 'Configuration: ShiroFilter vs WebConfiguration'.  Also fixed various JavaDoc/spelling mistakes.
"[ENG-193, ENG-194, ENG-195, ENG-196, ENG-197] Refactoring to improve the ViewProcessor/View/ViewClient API, pushing down the client management layer into View. Removing inconsistencies, updating the RESTful implementations, and adding Engine-level tests for everything."
Refactor EntityMetaData to EntityType
TURMERIC-1441: Adding gwt-test-utils to the project. Refactoring of presenters to expose their views. javadoc fixes. Added gwt-test-utils related config files. Added new Presenter tests.
API changes Refactoring of soap-client Fixing proxy problems Changing soap-client to use httpclient
"Code cleanup, reformatting and some refactoring"
Refactor OWLOntologyDocumentTarget to never return closeables
"[ISPN-485] (Coherence migration pointing to wrong .xslt file) Fixed bug, refactored converter, improved tests"
[refactor] changed signature for Filter to match Criteria
Refactored Environment class
Refactored fitness-proportionate selection and fixed its bugs with de-normalised fitness scores. Implemented rank selection.
Refactored cli interface to be more sensible
refactored minesweeper model classes
"Some refactorings, and added columns"
"Cleanup of the Neo4j Server, preparing for configuration and logging refactoring."
"NOJIRA Massive 0.5 refactor, phase one: UI into CSPI."
Refactor TmfEventType and TmfEventField
Adding AbstractComponentTool which uses a RemoteComponentFactory instead of a tool context; refactoring MarketDataSnapshotTool to use this and fix a few issues
Made a refactoring of connections to master (multiple channels per client).
core: Refactor method names related to zombie treatment
"Package refactoring, we have moved to com.wunderlist.slidinglayer for a better comprehension and uniformity with the artifactId used for maven central"
Activiti Cycle: Architectural refactorings in cycle.
Even more refactoring
"refactored LoadServlet class name and added LoadServlet to log-ui, extracted server base url to Configuration class in log-ui"
"refactoring and adding javadoc, added MinFilterExample"
SONARDOTNT-274 Refactor the Gendarme plugin
Some refactoring due to WSS-549
refactored code
refactor package names of the runtime and generator packages
TEIIDES 255 - Additional refactoring for JCA changes.
Jade Refactoring:  - Moved instrument-descriptors out of instrument codebases  - Moved all instrument-descriptors under jade configuration directory  - Removed InstrumentDescriptorService  - Refactored domain model:    - Removed ParticipantInterview as it is unecessary    - InstrumentParameters are associated to InstrumentType    - InstrumentRun is associated to InstrumentType  - Instrument selection step can now take place after contraindications steps
refactor APIResponse to more closely model reality
====== WORKING ===== Refactoring started
"Core: refactor type update logic, pt.4 (#935)."
refactored feed updating
Refactored IMap tests to use getConfig method. That method will be overriden to use the same tests with different in-memory-formats
"336668 policy supports cert validation, refactored jetty policy to support better reload mechanism"
Minor refactoring for better extensibility
some refactoring and better documentation
TEZ-2242. Refactor ShuffleVertexManager code (bikas)
 - business services hierarchy refactored  - removed audit filter from filter panels as this functionality is covered by the advanced filter
Refactoring to make channel creator setup more explicit
* Java / PHP / Ruby:    * Refactored creation of RCONPackets into RCONPacketFactory    * Fixed parsing of RCON challenges for GoldSrc servers (issue 8) * PHP    * Fixed reading from data from Source RCON responses (issue 9)
Bug 347599: [refactoring] Provide a way to implement refactorings that depend on resources that have to be explicitly released
Photo chooser refactoring
Refactored Typeface methods into OakUtils.
Refactoring the code about query running on report document
"refactor , add doc"
#NAME?
Minor test refactoring
#NAME?
Refactoring generate sources phase module
"stress test tool: fixed timing, removed iterations, added enum OOperationType and refactoring"
Refactor packaging
Minor name refactoring
Extracteed PutCreatureOnBattlefieldEffect. Refactored 2 cards.
Refactor DateTime formatting to use decoration pattern
 - refactored code
Refactor Presage2CLI to make it easier to override and add commands externally.
Refactoring; Possibility to edit extracted details.
#POULPE-357 Refactoring.
PDT API refactoring: put internal classes under 'org.eclipse.php.internal.*' package.
refactored ProjectClassLoaderSupport callback to core plugin; added @Configurable precedence check to BeanConstructorArgumentRule [fixes #635]
refactoring
Refactoring the LibvirtComputingResource   - Adding LibvirtStopCommandWrapper   - LibvirtRequestWrapper   - 1 unit tests
more refactoring about objects stuff
Refactor to isolate the proxy channel creation in a class so we can run without the http proxy netty dependency and make it as optional
"Related to feature #1185, refactoring some code and deleting parameters ""thumbnailJCropDefaultWidth"" and ""thumbnailJCropDefaultHeight"" Externalizing source of new icons Enhancing render of crop modal window"
"Refactoring: four new helper methods in CodeGeneratorBase clean up the code in both subclasses a lot. IDEA's structural replace rulez! On the fly, cleaned up multiple declaration of JsWriter ""out""."
Refactored Slim3 GWT.
Thiru & Kiran | #549 | Refactored to FormSubmissionReportService. Replaces some strings with constants.
Added a new JMX bean to track build information.  Refactored a little bit the existing MBeans.
"switch on submission status on update, expose approval date for list, minor refactoring"
a whole bunch of tweaks to layout of user/role edit views; fix wrapping of permission grid rows; some refactoring of base record editor class for easier subclassing
Cleaning up TODOs and FIXMEs. Documentation tasks are moving to the github wiki and obsolete ones are removed. Some of them also triggered minor refactorings.
refactoring the private methods (helpers) in order to reduce their responisibilities
follow upstream refactoring
little refactoring: * remove Constants class * rename filter.http to filter.internal.http
Refactored usage of test rss feed on classpath
Starting refactoring of Procession ; created HeadAndTailComputer.java
"Huge refactoring to enable running the appengine cloud as a standalone application using Jetty, HSQLDB, and DataNucleus. It seems to work!"
 * Refactored `Builder` to remove the need of the `Builder.Main` class  * Added CUDA properties for Windows and Mac OS X as well
refactoring
Refactor
"Wholesale order process adaption: refactorings, new CreditNote and OrderAgreement entity. TODOs: - SpecificationIntegrationTest not working - Adapt GUI"
#NAME?
gh-62 Code Clean and Refactor
"Refactoring Recyclables to Movables, build broken but power dying."
#NAME?
"Refactor data providers to have objects for each component of a stat, and provide access to them."
refactoring for dialect
"Some initial refactoring of the help system, introduced HelpPage abstraction and HelpPageManager"
refactor/rearrange so that categorisation lives on all versionable item nodes (not just rules).
Refactor a little - new GetHandler abstract class to handle special uris targetted at caldav.
core: Refactoring AsyncTaskManager
fix locale bug fix refactoring
"Refactored some tests, and started to provide better logging for click actions."
Smoke tests: clean-up and small refactorings
"Refactored how references work, added ReferenceResolver for customizing references. Cleaned up some code and javadocs, moved some classes the the ""util"" package."
"analytics: refactoring, pass 2"
a bit of QueuePool refactoring for readability.
New Test case based on the refactored classes
CDIPerspectiveTest added + huge refactoring all cdi bot tests
Refactor Container to use Value.
Refactored GmondReader
deeply term refactor of segments
Huge refactoring of all CDI QuickFix-like test + moving resources for QuickFix tests into one folder
"Liquid isSource is now correctly used, refactored canAttachTo functions"
Minor refactoring
IO-162 Slight refactoring to simplify
#NAME?
lbbroker example Added timeouts to the base socket builder & hooked up to a couple of places. misc. refactorings.
Strategy Refactoring Pact Record Post Pass (1st part)
#NAME?
Refactored based on the latest update (commit #232) on SVN: svn://svn.bukkit.org/minecraft/transporter/mainline/trunk
Refactored iterators and explicitated cross-component iteration functionality.
"Refactored Network to use generics and put attributes as fields in node, edge, and traversal objects.  Created new package org.sandag.abm.active.sandag to hold SANDAG-specific code.  Created properties file in src/test/resources.  Wrote test SandagBikeNetworkFactoryTest for SandagBikeNetworkFactory."
Refactor test to be compliant with jongo-extras
REPLACED log4j2 logger with slf4j/logback UPDATED meta data extraction logic by refactoring duplicate code
Refactored idMaster to be an object and changed boolean fields to be real booleans
[AMQ-6546] More refactoring of karaf itests
Refs #3704: Code refactoring.
Small refactor: move IdentifierTreeImpl package.
1. added cell editors to ListComposites 2. simplified I/O parameter mapping 3. simplified variables lists 4. refactored some list provider classes 5. other minor bug fixes
made creating and searching location2id index a lot faster (normed distance+different bitset for xsearch+different limit to search in fill empty); refactored calcdistance
"refactoring: shift acc models to longmodel package, create dummy packages for lane-changing models"
Refactor core and UACA UI
Refactored tweet -> status
SONARPLUGINS-2451 refactoring of ForbiddenConfigurationChecker
more refactor and pmd
Refactoring org.eclipse.cdt.debug.core: added 'org.eclipse.cdt.debug.core.model' package.
Refactor events
Update for SpoutAPI Component refactor.
refactoring
Totally refactored
Nvp and rest refactoring and more tests
Refactor standardizer
"TONS of refactoring/cleanup of the node maps widgets, reimplemented search in GWT"
"Refactor CheckpointManager, add work on checkpointing Accumulators"
Refactored filter() to properly manage http headers with dates.
Refactor lifecycle for lookup adapters and caches (#3873)
Refactor to ObjectId
refactoring to cache query metadata in the translator
REQS-331 refactor bond test resources
Doing some tests to make sure that rename and move refactorings are properly converted into SVN copy/delete and rename functions when using Eclipse with Subversive SVN client.
Refactored the Express context and exception handling
Stitching: refactor downsampling
refactor pickers
"PerspectiveStackRenderer: refactoring, changing the way how ShowText status displayed in perspective's button context menu (now it displayed with checked icon rather then changing text)"
refactor - moved WebClientProperties from DataBaseService
minor refactoring of graph solution
Entire project refactor. Removed ide from folder. 
some refactoring
"Authentication by javascript added. This decouples the HTML-Stuff from the server, that should offer REST-Services only. Now it is possible to run the GUI stuff on a Apache Webserver - prerequisites for #66 #60, further modularization and refactoring."
refactoring for indexPosition
Larger refactoring. Introduced SimpleIterator. Optional is constructed with static class Singular
refactoring: move DRBD GUI to its own package
Refactor to ZoneId.SHORT_IDS
Refactor toString() impl. into new method getFullName().
Refactored projects and added CDI support.
Further refactoring on Value & Attribute
Refactored GC modules
"Bug 448954 - [1.8][compiler] Incorrect error: ""The method foo(String, String, X::goo) is undefined for the type X"" - refactor condition, remove now unused methods"
Finished support for self-initializing refactorings
SOAP-2095 Constant for mediaType. Method renaming. Refactoring.
Refactoring HttpUtils to introduce a template method so that marshal/unmarshal operations can be made seamless. Incomplete so have deprecated methods until completed.
#NAME?
"Introduced EXML local variables. These help to shorten reoccurring expressions in EXML code. Some refactoring, since constants and variables are very similar. On the fly, removed escaping of ""@"" in descriptions, because it prevented using @see etc."
refactor to execute Method
HDFS-2273.  Refactor BlockManager.recentInvalidateSets to a new class.
Major refactoring of editableFileRoute to tidy it up.
refactoring
Refactoring project into a multi-module project
#3046 refactor to hide most of the major differences between v1beta2 and v1beta3 so its easier to switch versions and make the code a little more version agnostic
UserAccount Entity refactorized to User
refactoring.
refactor
refactor
Refactor to make XssJournal capturing route info run-specific
"corrections and refactoring + simplified artifact names, decided to go without prefixes + moved things around, improved modularization: builder, ordinal, etc + API refinements + removed attic stuff, lets version control handle history + constructor parameter inheritence level test #84"
"added tree images and modified css so the images aren't loaded from developer.yahoo.com anymore, modified loading gif in tree, renamed tree.get webscript to child-nodes.get and refactored GUI accordingly, small layout fix in content representation view"
Refactored create client to be the jclouds way
"bug 6361: this is a good point to commit; 1st round of refactor is done, code is clean compiling and ms is deploying"
Implemented refactoring. DOES NOT PASS TESTS
"Refactoring Viterbi processing, splitting into several separate objects for building and searching. Changed timing for user dictionary overwrite of lattice."
"trunk:    - merge-tracking enhancements: refactored SVNMergeDriver, though it does not work properly yet"
NQueens: refactor Queen.y from int to Integer to align better with real world use cases
Refactor model packages
 * Adding libs  * Refactoring
Feature #4149 : user account validity - modifying database structure around users - modifying unit tests datasets around users - modifying models and query mechanism around users - adding columns into ST_User for next features - deleted users are retrieved by their state and no more by access level - changing the management of user accessLevel information - removing some dead code - centralizing/refactoring some code
Removed MessageProgram object from MessageProgramState for #17. Minor refactorings
chore(refactoring)
"TEIIDDES-1228 refactored PreviewTableDataContextAction to share code (PreviewDataWorker) with new PreviewDataAction, PreviewDataDialog"
Refactored packages to consolidate against patterns rather than entities. Makes packages a lot easier to work with.
Namespace refactor showletType -> widgetType
Refactor of BytesMessage handling to make the message facade more opaque to the JmsBytesMessage instance which allows for handling of message content scenarios being fully contained in the facade implementation.
"XWIKI-7529: Comment preview doesn't work when a sheet is applied to a document * Add a page object to model the form used to add, edit and reply to a comment. * Refactor CommentsTab to use the new CommentForm page object."
Refactoring.
refactoring jrefterm classes and converters
Completes refactoring of primitive code generation
"working on refactoring GraphOps, and adding a fluent api for configuring recipes."
refactoring DuplicateImportRule; getting ready for catching the 'single type import is duplicate of import on demand' thing
refactoring
Refactored default simple authentication
major refactoring
"Finished implementing shore view of transaction, fixed various bugs in route display, refactored some classes into seperate mona lisa gui package"
supporting haslink and refactoring to link instead of relation
Refactoring and code formatting
Refactoring to make things easier for subclassing
Refactor and reorganize json loader
"Significant renaming: remove the term ""refactor"" from error-prone, as that's just one particular use case, and probably not a common one."
Have MINA working with Postgresql after codec refactor.
"Add centralized pipeline state queries, refactor packages"
Refactor properties ivar access.
Refactors VectorWritableConverter to support transformation of vector data on store
Refactoring to put the unit tests for the checks into the proper package.
SCHEMA-775. Refactor KijiColumnNameTranslator/HBaseColumnName/LayoutCapsule
#NAME?
Refactoring package names and marshaller interface
"refactoring package structure (YES it will break your code, but you only need to fix your imports), adding a HttpServletResponse impl."
Completed refactor of section and item managment code.
- Format code. - Use Java 5 generics. - Refactor work done in doPost method into individual per-action methods. - Eliminate the use of StringBuffer except in a few cases. - Largely eliminate reuse of a single variable for different objects.
"refactoring: moved method RoutingAlgorithm.calcPath(QueryResult,QueryResult) to a helper method QueryGraph.lookup"
Refactor core widgets in order to add some unit tests
Refactor out RuleSets for ruleset generating code
"DDF-1844: Add XPath support for additional Operators that have a PropertyName element   - Refactored the changes made in DDF-1869 into the class SimpleFilterDelegate   - Added generic classes to support xpath   - Implemented csw xpathExists, xpathIsNull, xpathIsFuzzy"
refactored package to .huuto
refactoring relationship-accessors
[refactor]: move interval flush method to FileLog
Refactor
Created OpenNMSJUnit4ClassRunner which registers a complete set of TestExecutionListener instances for each unit test. Changed all TestExecutionListeners to be dormant until activated by an annotation on a JUnit test. Refactored all unit tests that use our OpenNMS-specific TestExecutionListeners to use OpenNMSJUnit4ClassRunner.
ACT-33: Refactor ProcessEngineConfiguration to separate out factory reponsibility
refactoring for cleaner code
"Minor refactoring, better javadocs"
[#LIB-77] Refactor AttributeCoercion(s)
Adding comments and refactoring a little
New test and refactoring - get annotated types discovered or added during container initialization (CDI-83) - move annotated wrappers to util package
HBASE-10963 Refactor cell ACL tests
Lots of refactoring and improvements
display wireless mode now works the same way as wired mode. Some display bug fixes and other small changes. Some refactoring in wireless chips
SONAR-5417 Initial version of batch protocol + refactoring of settings
Refactor.
view claim refactored
Refactoring: Centralized creation of Var/Param/ReturnGenerators
Refactoring of db installer engine
Refactoring UI polish
Further refactored for submission status
"Large refactor, remove last of the Bukkit dependencies"
Refactoring for #525. WIP.
minor refactor for proposal
Prismtech JAC#476/478: regression tests framework refactor
refactored to allow different data from multiple backends
Refactor testing to integration
Refactored name of GraphUtil to TableUtil.
refactored package names from org.protege.owl.dlquery -> org.coode.dlquery.
"everething is refactored. joke.  SVNDiffWindow now keeps plain instructions and new data bytes inside,  for API users that means that ISVNEditor.textDeltaChunk(...) may return ""null"" now, as returned stream is no longer used."
"refactor, move filter process method to SerializeFilterable & JavaBeanSerializer"
UF-265: User System Management: Group filtering and role assignment support: - Added group filtering support in order to exclude the roles registered in UF - Added service and user interface components to assign both groups and roles - Added services initialization callback for client entry points - Refactored and added new tests - Bug fixing - Updated documentation
Refactoring/cleanup MasterPersistence
"more refactoring.  the code is slowing moving towards a bunch of Scope types - LocalScope, CaseScope, etc, etc - with each Scope being checked in sequence and know what it covers, how shadowing works, and so on."
"refactoring of package names, ParamMapper interface"
Small refactoring on ElementsBuilderTest
configure model refactory
minor refactoring
model refactoring
Social Media Refactoring
"[changed] Utils collections refactoring. Again. Sorry. It is better. Bag is gone, Array has boolean ordered in its constructor."
Progress on importer refactoring. Still much left to do.
refactored the connection between annotation metadata and JDT types into a simpler implementation
some  name refactories
refactored all the tool-specific import handlers into their own projects so we can have fine-grained control over our dependencies
Further refactoring of the steps code to used the module structure specified in the project guidelines
Refactor listSystemVms to new API framework.  Add missing licensing info to several API response files.  Combine ConsoleProxy and SecondaryStorageVm interfaces into SystemVm interface to have common functions callable from one interface rather than having to cast overly much just to get the same data from the objects.  This also includes a partial refactoring of ListStoragePoolsAndHosts command.
First steps towards content provider additions and refactoring to get the hosted plugin devs started.
* refactored unqualified access * added test for non matching types in read/write methods
Refactor user update tests
Tidied up webservice classes to start refactoring.
Major update; complete refactor of Scope amongst other things. Also fix for issue #190.
test refactoring
Refactor interal codes
Refactored the css package to allow a clean separation from the core.
refactoring
Refactor of the job system
AS7-4700 refactor connector subsystems to make easier to browse for us and GSS
KARAF-608 Second refactoring extracting the bundle management
"Refactoring name/package of AjaxTabPanel to avoid confusion of name, behavior, etc (and in preparation for ERPrototaculous)"
refactored file structure and names. Added Java doc.
refactor to support bundle order items
refactor serialization package
Ceylon Test Plugin (rename refactoring and polishing)
Refactor get*Fields in content type to get*FieldDefs
ROO-2928: Post 1.2.0.RC1 code refactor and clean up - refactoring and cleanup
Final refactor-update to latest Jetty: v9.0.3.v20130506.
refactoring
"[PLAT-483, PLAT-1124, PLAT-1152, PLAT-1174, PLAT-485] WIP - refactoring use of market data in engine"
"add HA brooklyn-manager persistence to object store, and refactor previous to be cleaner"
refactored create method
Refactor tests
OAuth2 - fifth set of Web-Server profile implementation. OAuth2RedirectionFilter last refactoring to be reusable with Spring Security.
Refactored and renamed ExtensibleTypeInferrringSerializer to use map internally and allow for easy addition of new serializers.
Name refactoring.
Added AbstractRemoteService and refactored implementations to use it.
Refactored to reorganise bundles and make it easier to manage static files.
"Started refactoring request disapatching to resource methods.  This will make it easier to move certain ifaces and abstract classes to the API/SPI and therefore other modules, or developers, to extend."
Refactoring
Refactor test resource folder
Refactored query to extract OCommand concept: a command pattern implementation to execute arbitrary commands against the database. First version of SQL Insert command started.
refactoring walker metamodel to runtime objects
"Refactor out Database interface, MongoDatabase implementation. Make default message replacement behave. Introduce jquery-getpath"
refactoring
Refactoring: Make RouteSelector independent of Connection
Refactored duplicate export code.
Refactored GeneralFilterBand
"Adding a sort attribute to options-collection and options-enumeration. Refactored OptionsEnumerationTag to extend OptionsCollectionTag, and created a new BeanComparator for sorting beans based on properties."
Refactored and extracted open type converter in an own class.
"Added support for Detecting method calls inside 'for' statements (for statement itself, not its body). Now also processing the left-hand side of an assignment operation (useful?). Small refactorings in DependencyExtractor (stopped modifying processExpression(Expression expression) method). More unit tests."
[MIFOS-3763] General refactoring around loan schedule generation
#NAME?
"A few small refactorings while re-familiarising myself ... need to change the approach so that statistics are gathered at a level above the current state, so that state-changes don't reset the statistics and cause toggling"
Refactored and extended StandardTitanGraph implementation to facilitate integration with Faunus. Fixes #45.
Refactored interfaces for multiple API response formats. Added ODP related response object and batch method
"ISIS-970: completed the ActionAnnotationFacetFactory, with additional refactoring for DomainObjectFacetFactory"
refactored win method to determine a player has won.  Instead of determining the winning move
"Added temporary file and directory deletion, fixed bugs and refactored test classes."
Refactoring chapter 4 putting it all together
refactor
refactored CURE
[PLINK-128] - Initial refactoring to the Configuration API.
Refactored action to provide users
TAJO-825: Datetime type refactoring. (Hyoungjun Kim via jihoon)
ROO-2337: Post 1.1.3.RELEASE code refactor and clean up - code cleanup
btc-e refactor step 4
Refactor routes to paths (since they aren't really routes in a L3 context)
"Futures Refactor - changed IR and Bond FutureDefinitions to implement FixedIncomeDefinitionWithData, ie toDerivative takes some time-dependen reference data"
[misc] Refactored officeimporter wysiwyg plugin code.
Refactor - move Map and Reduce to separate classes
"refactored StringInputRowParser to handle a ByteBuffer, better wiring and configuration of KafkaFirehose"
closes #137 - Refactor Namespaces
Refactoring reporting
refactored Marshaller to be Deserializer. Move it into the CRest project
Refactored org.jigdfs.serivce to org.jigdfs.service (was mispelled).
Memory improvements: A refactoring to hide CharArray behind Appendable/CharSequence interfaces - paving the way for easy dropping in of smarter implementations.
indices documented and refactored
[PLAT-2973] Refactor main grid construction to clean up creation of columns
org.urbsat : UI refactoring (based on JAXB + TreeModel)
Merge domain layer katia's refactoring
refactoring
minor refactoring
Refactoring
core: Small refactoring of AddVmTemplateCommand
"Host property delcarations, refactored property package"
"[KARAF-3051] Refactore Cellar bundle module (commands and MBean) to use ""look'n feel"" from Karaf 3.x"
Added test for BAC value. Code refactoring. (cherry picked from commit 0f00d11)
refactoring ViewsPropertiesPageResult to use DefaultPageResult as delegate
Refactoring of PresentationObject.getLanguage() to PresentationObject.getMarkupLanguage()
refactoring of classes to work with the gov2 collection should work better with Trever's Galago tokenizer hopefully we'll get better retrieval effectiveness
"MODE-774 Applied Brian's patch, which implemented Node.getWeakReferences(String) and getWeakReferences(), fixed several minor issues, and added in several TCK and unit tests. However, I did refactor some of the code to be more DRY."
"Integrate with LinkHeader and LinkHeaderBuilder from core. Rename Link->Ref, LinkHeader->Link and associated refactoring."
refactorings
Refactored: inlined TestRunCoordinator into DaemonNetworkEndpoint
refactoring IndexationService#indexate (checkstyle flags method is too long)
#POULPE-469 Testcoverage and refactoring for Database backup functionality - adding more tests
Refactored spring bean jaxb object packages
Refactored the openorb oneport adatper into it's own little build module
Refactored Configurer interface to make implementation simpler
"Refs #121 Refactored and cleaned up sending messages, obs creation, common tasks"
Rename current service artifact to bundle in order to refactor the bundle instructions to not embed jetty. A new (uber bundle) will be created that will include this and jetty.
editor interaction refactored
Move tests to their proper package. Refactor them a bit.
More refactorings for pivot renderer and command API
refactor addDialog + optimize imports
refactoring classes names
refactor by merging ScanManager and IfSnmpCollector... move update code into *Table Objects
refactoris de cuenstas de mayor y auxilair para porcentajeIva[#25464507]
Refactored
Refactored to avoid code-duplication (inside the try/catch/finally blocks) for the transaction demarcation of the doXXX methods.
refactor
Refactor Annotated* implementations
Refactored: use BuggerStrategy as explained in the javadocs
refactor to prepare performance improvements
Refactor crosstab core API.
[FIX] XQuery: dynamic evaluation of base uri for element nodes [MOD] XQuery refactoring: ANode.base() -> baseURI()
"[svn r255] Refactored ORM library to support mappers, type of ORMContext for Mapper2 is  cofigurable. Older interface Mapper is inherited from Mapper2"
Refactor of the entity (component) classes and packages
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - renamed XmlUtilsTest to DomUtilsTest
"Refactoring the LibvirtComputingResource   - Adding LibvirtNetworkUsageCommandWrapper, LibvirtPlugNicCommandWrapper and LibvirtUnPlugNicCommandWrapper   - 9 unit tests added   - KVM hypervisor plugin with 18.3% coverage"
fixing ws tests according to JBDS 6 + some refactoring
refactoring: moved extractors and parsers to fsml package
refactored so that this code can be used from aggregator build.
Refactor Rabbit and JMS to avoid bean name clash
[OPENENGSB-1292] refactored CheckedPanel and added tests for it
CAMEL-2673 Refactored the DefaultHttpBinding so user can override it easily
WPS-T refactored
Refactor methods visibility a bit.
"extracted validation exception, refactored protected resource registration endpoint to use this format"
"Fixes #2505 : Style options and context menu items are now ordered by the ""gravity"" property. Some refactoring."
refactory: _ renamed to $ to make it working with java 8 and future versions
Refactor the MockCommand interface
refactoring to make unparsed and parsed options work more like each other
Refactored import services out to their own classes
Refactoring: moved the type and value related methods from ICVariable to ICType and ICValue.
Completed new persistance and refactored.
added the lexical match query terms based on the user defined searchTerms;refactored the SemanticSearchService
#POULPE-296 Authorization. Check whether user has enough permissions to log in Refactoring of the User Service to make code more readable
Refactored the DAO layer for a bit more thread-safety
JENA-1305: refactor TextIndex to take a separate graphURI parameter
"1) Refactor GenericAStar, RoutingService, and PathService to feature a State (origin) + Vertex (target) method, as opposed to the existing Vertex (origin) + Vertex (target) + long (time) + TraverseOptions (options) 2) Implement proper reverse() method in GraphPath 3) Slight refactor of State and StateEditor to allow sub-classing 4) A couple of simple fixes to remove warnings"
"renamed GeneratedMapperSourceCode to GeneratedSourceCode, and refactored to be usable in other generators (like ObjectFactoryGenerator) updated property name to reflect change"
[PLAT-1296] Refactor time-series master; Enhance IdBundleWithDates
rename refactoring
Refactored and fixed the loading dds process
refactoring pc code
Simplified and refactored animated canvas
REfactored interfaces and classes into smaller set of code.
Refactor + spacing
Refactoring API work
Refactor Message parsing and building logic
Applyed refactoring
refactored DynamicEntityDaoImpl for better structure and some efficiency improvements
"guarded group now supports value model (holders), for guarded items whose references change underneath refactored out BufferedListValueModel SwingFormModel.createBoundList(formProperty), for convenient creation of a list from a list model bound to a java.util.List property"
PDF-917  check in of basicly all working signature validation and respective dialog.   Some refactoring is still needed find a home for the validation scheme.
add tests and visualization refactoring
EST-536 and EST-539: polymorphic refactorings to table-of-two-halves pattern...
Added reset to candidate ass service + refactoring
Fixed a severe bug due to the refactoring of the trigger position (Thanks to Andre for pointing this out). Reverted this to the original behaviour. Also fixed a bug regarding the reading of OLS datafiles causing cursor information to be ignored. Also fixed the window close behaviour on Windows platforms.
Partial refactoring.
"MONDRIAN: Access-control, part one: big refactoring. Fix a couple of synchronization bugs in SmartMemberReader: putChildren() now checks whether the child-list is already registered; and converted mapKeyToMember to a HashMap of SoftReferences (was a WeakHashMap, and members would go missing when their keys were GCed). Move various collections of constants into enumeration classes (AxisOrdinal, Access, Category). Improve MemberReader documentation, and allow each MemberReader to describe its cache-writeback abilities. Document how to map dimensions to multiple tables."
Refactoring packages and testing POJO with reflect
tmf: Refactor bookmarks file handling
re-refactor the Event Filters... ensure they still work with EventFactory the current implementation of the eventList
Small refactoring.
Modified the SecurityManager policy file (for future use). Refactored classloader creation / handling. Refactored TomcatLoader to assist in debugging Hibernate classloader issue. Added Red5LoggerFactory to more core classes. Added SecurityManager stubs to Bootstrap and Shutdown.
It was the ultimate refactor... of ultimate destiny.
Added unit tests and refactored code.
"Using m-prefix naming convention, caching mechanism refactored into License class"
refactoring + json fixes
refactored classpath lookup mechanism to be more specific for JAR files
Refactoring of BaseFilterUtils Class (moved into Aps Entity package)
Made minot refactoring for the java client. Fixed problems in the sensei-core with json deserialization
[RHQ-1090] more refactoring to get agent plugins properly stored and retreived in the database.
WIP Thrift refactoring:  - Replace Class<?> with PageDefinition and Method with MethodDefinition  - Move simple running commands into Thrift interface  - Get (most of) Core unit tests passing again
More refactoring
Minor refactoring and bug fixes
refactoring the implementation to the current codebase
refactor
"Refactor mob farming classes to own package, fix horse health"
DDF-1754 - Increase Unit Test Coverage and refactor Idp Server Endpoint
Some refactoring to share more of the native dependency resolving code Added support for dynamically generating the static lib make file and the actual local static library include statement
Refactor FetchHTTPTest to use a TestSuite so that starting and shutting down the test http servers happen only once at start and finish respectively
lots of refactoring and some public static finaling of variables. getting ready to implement the basic gremlin grammar.
chore(engine): refactor parser
"Added suppression tests, changed suppresion string and bugpattern name. Other refactorings from code review"
refactored and slimmed vcloud compute impl
Refactor TestMap Project
NOJIRA: Email resource implementation refactoring of internals
Refactoring of the Netscape cookie draft spec
Small refactoring of InstanceImpl
ongoing mapshard refactoring...
Refactored components allocation_search and allocation_search_component
definition refactoring and fixes
refactoring and Test
#NAME?
"PLAT-4988 Refactor conventions (freq, daycount, calendar, etc. not Convention) to support common interfaces and patterns."
minor refactor of a property and exposed the selector as an MBean attribute. the selector can actually be updated in real time via JMX for non-durable topic subscriptions for AMQ-625
Refactoring.
sorted sets commands javadoc + refactoring
[KARAF-3051] Refactoring of the obr module to use Karaf 3.x syntax
"REFACTOR: SearchResult => (Url|Capture)SearchResult           required non-trivial changes, but that was the only tangible result."
made RenameTypeProcessor#getRefactoredJavaElement(..) work with arbitrary elements
more package refactoring
Update Issue 2250 Refactoring and 10-node affinity tests
Refactor VcfGenotypeData for improved performance and meta data handling
refactor
Refactoring app and script
Adapted package refactorings in Spring Data Commons.
Upstream refactoring from Joses merge
"msauer|refactored to use byte and text message, added unit test, loading files as byte array instead of FileReader, created payload to hold bytes and string"
Refactor DAO test to pull transaction logic into super class
Refactoring de la estructura de packages
Depencencies and code refactoring
"Schemes refactoring, OneTimePad"
Massive Refactoring
refactored database logging to OSGI compliance
Refactor listTemplatesCmd and listIsoCmd to use db view.
Refactored PropertyName/XLinkPropertyName/Function representation in WFS query model.
New test operating on cdi quick fix test added and QuickFixTest refactoring
Fix preference category id; refactor one class to internal
Refactorization of the External Person Module Some changes in Person Module with Tests Some changes in Publication Module with Tests
NXP-12018: refactoring and better Exception handling
JBRULES-484 refactor the core reteoo code for sinle and composite propagations -BetaNode now uses Single and Composite TupleMatchFactories
"Cleaning up from refactoring, e.g renaming modules and pom contents"
refactoring de la servlet visiteur et modif des jsp accueilFilm et header pour qu'elles integrent correctement l'action de récupération des 10 derniers films + modif des jsp listeCine et listeFilm pour inclure la barre de recherche + completion des tests pour qu'ils integrent les attributs de requete et les cas de liste vide
Refactor PlanarYUVLuminanceSource into core/
Refactored some method names in ClientCore
added pattern support; refactored message handling; refs #8
Refactor Sendable and Receivable to Sender and Receiver
A bit of refactoring
#54 refactor fabric-git-hawtio so it can reuse the GitDataStore and the same git checkout to avoid requiring 2 checkouts
small refactorings and activity trace pre-processor script
Refactored depedency resolution code into separate package.
NXP-4394 - Small space refactoring and make dashboard compile
refactor DcmDir.list()
#NAME?
Rendering refactoring to remove dependency on DocumentAccessBridge in Rendering Tests + various other small refactoring
branch:      javabot a little refactoring...  hope nothing broke...
"Refactor somewhat, but it doesn't seem to be helping."
Refactor to simplify message decoding
"Refactored Server, created interface and abstraction, improved waiting"
AbstractMatcher replacement method refactoring Removing slf4j logging call Params management
Refactoring bootstrap-extensions package structure
Refactored request lifecycle
refactor circular dependency between packages gcviewer.ctrl + gcviewer.ctrl.action
Refactored
Refactored JavaGenerator and token generation
"refactored ""*Impl"" into ""Abstract*"""
"Refactoring:   1. Make the metric plug-ins use the PluginInfo API to manage their configuration.   2. Metric plug-ins provide the same unique hash code in both registered and installed state, so make PA use it.   3. Show metric plug-ins activator on registered metrics too.   4. Deny creation of configuratiob properties through the WebAdmin on not installed metrics (could change though)."
"Introduced the Data object, a fine-granularity substitute for the Audio entity to pass into the Filter project. Consequently refactored the FilterManager into DataManager and updated all existing filters and their test cases. Also developed three more filters: PeakCounting, TrespassCounting, OrderStatistic, and their test cases."
"Slight refactoring of the traceability visitor Now handling reverse operation for complex cases Handling Strstr, Strcmp and Strtok operations"
refactored project into modules & added example
Refactor the getBackgroundRectangle method to getBoundingRectangle
Core: internal refactoring (#1062).
DATAREDIS-720 - Refactor shared connection lifecycle handling in LettuceConnectionFactory.
bug 7504: Events refactoring
General refactoring.
Refactor ServiceEndPoint as part of #4 (point 1).
Bug 415607 - Investigate supporting annotations for API Tools - refactoring change + quickfixes
Refactorings + basis for upcoming community features.
some refactoring + minimze command
Refactored addresses somewhat
Refactored TestPopupLogin into WebDriver
Further refactoring of Identiier to match spec...
Refactor to align with scm-api
#587 - Refactor - Change JsonContext.getScalar() to JsonContext.writeScalar()
o-refactored
Refactor flushing context
Fix for Bug 36659 extensions lazy loading mechanism is not thread safe. Refactor some of the test methods.
kafka gateway refactor
Refactoring
"Added Tabs, and refactored Home module to tow module : Conges and NoteFrais."
refactor HttpLang
Refactor the StringUtil.compareVersion() and do some perfermance enhancement.
refactoring: Cell state
refactoring
more refactoring
ROO-3046: Use Apache Commons libraries in Roo - refactor FileUtils and remove redundant FileCopyUtils
CITRUS-39 Refactored test method invocation as preparation for injecting test context as method parameter
"dropped jetty 5 support (it's dead, Jim), fixed 7 and 8. Refactored launcher to fix classpath, it's a lot simpler now"
A little refactoring so that it's easier to override and avoid the construction of a multi-part request when in an environment with another filter that's consuming the request stream.
Refactor: rename to appropriate package and remove unecessary files
MAGNOLIA-1431: refactored i18n content support:  - separated two levels of locales: user's locale (the one that is determined from the Magnolia User) and content's locale (the one that is determined from the URI like /es/any/page)  - user locale is stored in MgnlContext (i.e. Context); content locale is stored in AggregationState  - Template renderers (JspTemplateRenderer and FreemarkerParagraphRenderer) now grab the locale from AggregationState and expose it to the template  - fixed tests
refactoring
Some more refactoring of TypeResolver.TypeTable. I was in a hurry. The TypeTable code wasn't in a form I'd LGTM. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44403308
"o added more tests, refactored Utils, code cleanup, added comments, added missing GPL headers"
ItEr50S04ValidacionEProbasFuncionaisItEr49S04: Applying several refactorings to simplify the reload method
further refactoring for extensibility
Initial refactoring of diskstorage package
Node color problem fixed by refactoring.  Override mechanism had been removed for color.
HZN-816: Refactored InterfaceToNodeCache into the DAO packages for reuse.
refactored error reported
Timer service refactoring
Next steps in optimizer refactoring.
"* Refactored to be ""WodEditor"" (vs ""WODEditor"" to match Api naming) * moved into subpackages (.wod.*) * added a new WodModel that you can get from an IDocument with WodModelUtils * updated all your component editor stuff to use the new WodModel instead of the misc wod parsing ,etc * added in reconciler support for Wods, so syntax errors are caught now (though it's not hooked into the builder, so they only show up right now when you open a wod for the first time)"
Refactor IStatDataProvider to allow non-player blobs
refactored saveRepositoryPullRequest to savePullRequest. Closes #5
"Refactor debug API, debug plugin activation, fix several issues"
refactoring and getting pom in line
Refactor in prep for child activities
refactored ChainingTest name from 'ChaningTest'
"CacheProxy refactored, cleaned up"
Coloc 2: Refactor the result parsing of SingleWindowDisplay
Refactored classes inside core/test-api/dns and core/test-api/http so that they are in unique packages (for OSGi compliance).
Added option to paint the channel indicator as background; refactored some stuff to helper classes.
"#332 refactoring the code to make it opensourceable. * Update the parameter from JedisPool to Pool<Jedis>, so it can support all pool type. * Add clientName as connection information * Update Sentinel Pool"
"Refactoring, created maven modules frontend and backend."
DSpace refactored service api
refactor on AnnotatedTypeBuilder
JOLT : Refactored Jolt transforms to parse their spec once.
Refactor reflection tests to avoid spurious compilation error problems
[GWT20] refactor artifacts and packages
core: Refactoring VmTemplateCommand hierarchy
Fail fast if no unit tests and refactor MockBuilder in order to make citrus-java-dsl unit tests executable in Maven
Added fusing subling ParallelDos to Optimizer + refactored unit test cases
Refactoring for MultiGet queries. WIP
Refactored: extracted Actor from Actors.queueOfCurrentActor
Refactor to a new file a very handy filter for users (like me) writing application tests: org.apache.logging.log4j.core.net.server.AbstractSocketServerTest.ThreadFilter -> org.apache.logging.log4j.core.net.server.ThreadFilter.
"moved Credential interface to idm subproject, refactored IdentityManager credential management"
refactor of composite knowledge builder lifecycle
Removed PartitionStoreConfiguration. Refactoring to the File and JPA stores regarding the PartitionStore.
refactor sql parser.
[DSU] refactor exchange gtfs
Refactor the Histogram View (Bug352885)
Refactored to ignore history in the driver. Added a HandReceiver to abstract event receiving
Fix / refactor scoreboard protocol
* big ruby type inference and mixin model refactoring * created extension point for contributing user TI engines
added missing null checks to calls of IBeansModel.getConfig() [fixes #502]; refactored RenameBeanIdRefactoring.createChange()
Refactor code for getting a database connection into its own method. Eliminate warnings while I'm here. Clean up a needless Map (where all values were null) and use a SortedSet instead (hence the update to validateRule.jsp).
JFG-729: skip first aggregated point + refactoring (#781)
Refactored MyCompanyProduct Presenter naming to SampleProduct.
OPENEJB-1877 jdbc package refactoring for consistency
bobo-contrib:  Refactored GeoConverter to avoid creating intermediary Coordinate object when indexing
refactoring: method renamed to findBestGenesForExperiment
"record charts, charts refactored"
1. added the phenotying_enter parameter to the graph url (works on phenotype page only now) 2. started to refactor a little the Phenotype controller. I'm moving some classes that did solr calls there to the service classes
"ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - renamed JavaSymbolName.getReservedWordSaveName, other minor tidying"
Preparing [CXF-6267]: Refactor issuing and renewing SAML token functionality into utility class
Collision generator refactored to collision algorithm. New tests.
[TSS-26] Refactored the time series interface and implemented so far add() search() remove() and get() methods with unit tests
refactoring: every piece of feature info generating code is now implementing FeatureInfoSerializer
Refactor Log4jWebInitializer as a LifeCycle called Log4jWebLifeCycle: initialize() becomes start() and deinitialize() becomes stop().
"params refactoring, step 1+2"
#NAME?
SearchQueryExpression interface refactored
refactor
refactoring ModelerDbImportAction
cuenta de resultados refactoring
Refactored exceptions.
refactoring model/controller entry point
semantic highlighting refactoring
Refactoring project.
Refactor activity listener core types
Refactor action handling in GitHistoryPage
Removed debug logging Refactored Exception Wrapping Generation
refactor math partial utils
refactoring
refactoring for properties
refactorizing the property state management at the object context level
[US 6] Refactoring ConfigurationManager.updateResourceConfiguration() to support raw config.
"more refactoring, added unit tests"
"Refactor sendMessage, less repetitiveness"
refactor common code into ATriangularMatrix
"Refactor, removed old logging Stage 1, merged some code from a few local experiments. Testing still needs to be updated"
refactor constraint with column
Refactor BlockChain to make it more extensible.
working on GetCategory to set type (media &/| article) some refactorings on MW Bot and its inner class to simple article
Refactoring
Code cleaning + refactoring
Addded code related to vehicle speed calculation and some refactoring.
TAJO-1603: Refactor StorageManager. (hyunsik)
Refactor ServletHandler to add getMappedServlet method (#1519)
"Internal refactoring, moved Murray's UL/OL stuff to HTMLRenderer Added extra parameter to makeLink() so that section identifiers can be addded without them being HTML-encoded."
Refactoring the LibvirtComputingResource   - Adding 7 new command wrappers   - 10 unit tests added   - KVM hypervisor plugin with 14.8% coverage
Refactoring.
Marble code refactoring...
Refactored FormProviding service to delegate the form rendering to the FormProvider. Refactored KmoduleDeploymentService to include the form files created by the form-modeler. Persisted task output data after modifying it.
Refactored multiple asserts into separate tests.
refactoring to have consistent json element names
DATADOC-109 - Refactored mapping subsystem.
refactor user specific edit permissions (to migrate off of the reader base permission set)
"Move WorkPoolTests.java and fix JavaDoc, sundry files ConsumerDispatcher.java -- reference convention ConsumerWorkService.java -- minor refactor RequeueOnClose.java -- some privatisation and JavaDoc"
DataManager refactoring
Refactor for website naming. We now have a GameLobby for all our game types
Refactored the waitForCondition() support so that it can be used for non-webdriver tests. Added matchers to support Date and Jodatime dates.
Refactor and changing structure
activiti-cdi: refactored static way of providing the process engine
Cleaned up more bundle manifests so that the packages are in order from most specific to least specific. Minor package refactoring of web unit tests.
Refactoring OAuthServiceHanlderScribe to OAuthServiceHandler OPEN - issue SEAMSOCIAL-9: Refactor Api and ClassName to Avoid Handler suffix  https://issues.jboss.org/browse/SEAMSOCIAL-9
#122 Refactor Deployments per https://github.com/AmericanRedCross/OpenMapKitAndroid/issues/122#issuecomment-211544553
"Minor refactoring - method names, method order, collection construction"
Refactor to work in preprocessor and its effect on back end compiler.
Refactor package name and other
"REFACTORING: Abstract out memento related calls to MementoHandler, which implements timegate and timemap rendering. DefaultMementoHandler provided which follows the protocol. EmbeddedCDXServer provides experimental extensions FIX: Fix bug in MementoLinkWriter timemap serializer Add support for optional status field in MementoUtils AccessPoint: don't redirect in case of old-style revisit, treat it as a proper revisit"
Refactored UserREST login to populate session itself
REFACTOR: Improve robots redis check to support a non-ArcResource response.. allow for handling of plain robots txt (wrapped in RobotsTxtResource)
refactoring
Refactored export
Refactored the math packages to move wave and wavelet functions out to sub packages. Renamed some of the classes as well.
svm part refactored.
refactored a whole bunch of the foreign source and requisition stuff around to use the new Requisition object in place of the ModelImport object
"* ODE-805, fixed the axis2-war compilation error as jpa refactoring work.  (working on fixing the failed test cases now, should have another commit tomorrow)"
"#POULPE-435 Exporting database functionality - testing, refactoring"
Latest spike of the refactor of the code generation; almost done refactoing it so I can look at the C++ code shortly...
massive updates for project rename - refactoring done with added test coverage
"major refactoring. not great to gloss over details like this, but it's a prototype"
"Added deleting pm from sender, made some refactoring"
Activiti Cycle: documented RepositoryConnectorConfiguration-manipulation methods & made some minor refactorings
CXF-4014 Refactoring of OSGi startup
Core internal: refactor event manager (#935).
Refactoring for cleaner code
some refactoring and upgrade to Neo4j 1.5
Refactoring Test.
MultiBitMerchant-4 Fixing tests Refactored BaseResource methods to avoid unnecessary restriction in generic type
Added Signavio connector again after refactoring of API (not yet finished completly)
"PROV-76, refactor patient list data structure"
Major refactoring for bus/notificationQ events and raw SQL tables
refactored some factory names to factory finders since they rely on finding factories to create the objects in question
HBASE-12616 We lost the linked list commands in recent usage refactoring
refactor
"Extended timeout to 2 hours in pom.xml, refactored some code in code in ESBExampleTest.java - console switching"
added api ArrayStoreFactory
"Subtype only filter, small refactorings"
refactor structure
Refactoring
"Major refactorings/optimizations of pool caller, output still bit-true to older version: a) Move DEFAULT_PLOIDY from UnifiedGenotyperEngine to VariantContextUtils. b) Optimize iteration through all possible allele combinations. c) Don't store log PL's in hashmap from allele conformations to double, it was too slow. Things can still be optimized much more down the line if needed. d) Remove remaining traces of genotype priors."
"refactored some tests, renamed some others, and added more tests to cover new classes"
Refactored method name
Refactoring the lockAccount cmd
JBIDE-5119: Refactor PageContextFactory to improve perfomance of context creation
making process more robust/refactoring
refactor: extracted BasicDependencyArtifacts
Refactored: making the network layer generic
Refactored QRDecomposition to match up with the rest of the package.
"[PDT-4576] Add rhombus storage, refactor connection manager to use it, update CQL generation to always use keyspace name, tests for these things"
96308 [refactoring] Move Member Type to New File unnecessarily changes visibility
initial refactor to more easily support CAMEL-1015 by reusing most of the same code
[AESH-104] more refactoring and more mojo
Major refactor to try to use kafka as the queue
minor refactoring of the scope class
Refactoring of ui packages naming.
Refactors Bpr_Importer to BlockProtectionReloaded_Importer
service refactored and unwanted classes removed from service
i18n refactoring. Getting label lookup to be done consistently through the MessageLookup class as preparation for moving LookupValue lookup to also use MessageLookup (resource bundles).
"Cuarto commit, refactoring estructura basica"
[MOD] Commands: ListDB class refactored to List
"Refactoring from -web to -core, for forthcoming new NSF exporter"
"general refactoring, option to use socket.io instead of websocket, added upnp-style events to both upnp and bonjour protocols, upgrade existing examples to socketio, add new examples for events"
* refactor 2
"Extended timeout to 2 hours in pom.xml, refactored some code in code in ESBExampleTest.java - console switching"
refactoring project into multiple subprojects. packages are moving around too.
Refactored
Refactor: Extract checkInEmptyFile() method.
Refactored packages & custom ops/interactions
FIXED - bug 223266: [DataBinding] Refactor internal package names https://bugs.eclipse.org/bugs/show_bug.cgi?id=223266
Update painters after LineProgram refactor
refactoring
Simply refactor of class name org.dcache.migration.Comperator to org.dcache.migration.Comparator
"Updated docs to reflect the changes in the test suite, and cleaned up the cruft from the refactoring."
#NAME?
some optimization and refactoring...
Allow SOR to be calculated from HC Refactor StrandBiasTest classes
api_refactor: move vpn related apis to user.vpn
Implemented retrieving of binary versioon from JS artifacts and refactored the code a bit
Refactor pattern builder class
refactored similar code; added KeepingMutation (mutate slot and keep forward)
"CAY-1479 EntitySorter refactoring: make it DI-based, internalize Ashowood lib"
Refactoring: extract method
Test refactoring; adding perf test link
do some minor refactorings
removed / refactored api v1 files
Refactoring parse of generic parameters
ACT-741 refactoring persistence
"refs #176 - SPI refactored, `Friend` class introduced"
Refactoring `getExt()` to `getFormat()` for clarity. And the corresponding setter and field as well. Marked the unused methods as deprecated for backwards compatibility.
minor refactoring for perf-comparison
Refactoring addon-jpa
"more refactoring. The Rest client accepts now several languages, several output formats, and several text types"
"New feature: refactored the information on CycleCourseGroupInformation, removed the old slot GraduateTitle that is no longer used, added a new slot to keep the GraduateTitleSuffix by year, and removed it from the CycleCourseGroup"
Refactored the participants collector
ACT-293 Refactor variable map
"MAHOUT-479: added unit tests to test VectorModelClassifier, ModelDistribution serialization and to ensure GaussianClusterDistribution and DistanceMeasureClusterDistributions work in Dirichlet. Refactored model distribution arguments to allow Java developers to provide fully-configured model distributions vs multiple string parameters. Added distance measure parameter to Dirichlet for use with DMClusterDistributions."
refactoring: GenericHibernateDAOTest -> StudyDAOTest
"code refactoring (execution of external commands), threaded node reset, more info in help"
Refactored: renamed actor methods
"Refactored relay handling, testcases are not ok though, still need some work to be done there."
refactor duplicate code
Refactoring to tests DSL
"UIBean introduced, CDIUIProvider refactored"
refactor and adjust to new JAXB soap model
methods refactoring
Almanach refactoring: - fixing the participation rules about user occurrence search - adding ComponentInstanceRoutingMap API - handling permalink - fixing the uri builder for calendars - centralizing the permalink display
"Inital refactoring Reorganized packages so that instrument/makret/message were top level. Added empty mock classes in unit tests to achieve compilation, more work is needed to get them to pass."
Move WorkDuration API to internal package as it will be refactored is 4.3
Refactored Infinispan cache wrapper hieararchy * All wrappers should from now on keep linear hierarchy according to Infinispan versions (one wrapper per plugin) * Each feature should be implemented by separate object - wrapper and feature can be enriched separately * Code from the core wrapper moved to Lifecycle and BasicOperations (these are not features) - wrapper should only hold the caches and orchestrate features * InfinispanWrapper now can work as multi-cache wrapper as well (see StressTest.useBuckets)
Added the concept of a context to the RefactoringStatusEntry. Adapted code to use new context
Refactored to use dynamic proxies.
"Refactor the filter implementation, removing the intermediary FilterConfig objects and expose the filter meta-data via ReST."
"Refactoring to made code more comprehensible, useless config files removed"
refactoring to a new directory structure
Refactoring of selectors before I start with extend: #151
"metamer: refactored validation (csv, jsr303): pages, beans, tests."
refactoring container tests
[LANG-362] checkstyle; javadoc; extended testing which necessitated some refactorings
refactored to introduce Operation and set up the package structure
complete refactoring of the converters API. Small improvements in the Type Solver related classes.
181830: Refactor -> Rename now has confusing/problematic workflow
big naming convention cleanup - lots of interface method name changes (hopefully for good).  Some refactoring of participant initialization to allow making instance variables private.
refactored CreateMultipleLoanAccountsWithFeesTest and associated Page objects to make them more reusable
SONARPLUGINS-601 SCM Plugin : Support non-Java projects + refactor components
refactoring target regex tests
refactored Variable and VariableReference
Refactor
HBASE-7808 Refactor Store to use HRegionFileSystem
"Renamed package, mavenized and whole refactoring. Refactored including Java/Android best practices, Android Lint, spelling, etc."
refactored DatabaseIDFactory
Changes based on David Müller's and Pablo's tips. [Refactoring]
Page class refactored
Refactor setting module
refactored directory scanning
Refactor test of json examples. Add servlets of batch examples. Add concurrency-api dependency
"MATH-534 Refactored ""PolynomialFitter"". Moved parametric function inner class to ""PolynomialFunction"". Adapted affected classes."
"Resources leaks, refactoring and testing"
[docker] upgrade to docker 1.7 and refactor TLS support
SONAR-5056 Refactoring of restore feature
refactoring
"a lot of refactoring config values and so on for the lint mojo, this finally works as expected for html, more cleanup to come"
Refactor event binding from main to tray view
JBRULES-1734 Drools API -refactored to move org.drools.knowledge.defintions to org.drools.defintion
"refactor MetricInstrumented{Store, Iterator} and add missing getKeys(...) methods"
Added support for JPA like cascade load of Siebel child business components (akin to what was done for reading MVG fields). Added support for writing a Siebel child business component (akin to what was done for writing MVG fields). Other minor refactoring. Jira IDM-545
refactoring process
Refactoring
Clustering: refactored class packages to be more clear the Leader and Peer components. Improved error handling in case remote node hasn't the replicated record.
HDFS-8703. Merge refactor of DFSInputStream from ErasureCoding branch (Contributed by Vinayakumar B)
"Test code refactoring, trying to add better coverage of safe and unsafe impls"
refactoring of ImportVisitor and Requisitions
Refactored states
Refactor script generator
Started refactoring geometry
Refactor editor model.
Refactor TOVData so that getConservedMass() -> getRestMass(). Shooting to isotropic solution seems to be working. There needs to be the 3-domain solution and black hole solution implemented. The elastic equations integration also needs to be completed.
fix for 29711 Move refactoring doesn't honor read-only flags asking for confirmation of moving read-only files
EMBRYO-494 BUG: Fejl i reports <- Refactoring
"refactor tagging for persistence, fix bug in applying the tag"
#59: 'New folder' feature and some refactorings.
"unfinished refactoring, commit and push to github due to possible intelliJ code coverage bug"
Heavily refactored market data feed
VCA to XMS refactoring
"This change refactors the test file 'GetAllPhenotypePagesTest' to 'GetPhenotypePagesTest', as the test can be configured to run less than the full list of phenotypes. This change also fixes the 'testInvalidMpTermId()' test and deletes AbstractJunit4Tester.java, which is no longer needed."
"more PolygonPainter refactoring to eliminate duplicated code in paintTo() method -- it's still ugly, but less so than before"
core - REFACTOR - introduce AbstractResponse
completed some refactoring and added lazy loading of Organization Info and User Info
Refactored logging so Commons-Logging is used everywhere. This should allow Log4J or some other compatible lgoger to be used at runtime.
simplifying refactor
Roy: source code refactoring
ResourceLookup refactoring
"Refactoring - Renaming Packages , Classes and Interfaces"
reverted refactoring
"GUI improvements, refactoring, access token encryption. Added CodecInitializer, so codec could be used in other components (not just CookieTokenService)"
Very big refactoring. Things much easier to comprehend.
refactor Polygon to maintain a list of paths it is set up with
api_refactor: move template api preparetemplate to admin pkg
Started a refactoring
NXP-2632: refactor Children to avoid using name as a key
ISPN-2689 Remove constructors and refactor them in a fluent builder
[MOD] GUI refactorings
Refactored to org.mmsinclair.
Refactoring on redundancy class
slightly changed welcome message and refactored
SOC-525 Refactor space and profile search. Make them now as stand-alone component
Refactoring of ODEDeployer.deploy()
"big refactoring including data set based plugins, adapter first approach;"
Fix persisting case problem by refactoring the Etablishment objet. Added a code field different from the id field. The id field is responsible for persistence only while the code field is always in lower case.
refactor RequestUri
some more refactorings
WIP: Refactoring of candidate session access ctrl
Refactoring of get XCode version + strict verify parameter
Fixes GH-23: test groups on classes only were not taken into account. Also refactored early instance creation to allow test factories later on.
refactor
"feat(engine): refactor identity, add authorization"
Refactoring the internals of org.vaadin.teemu.clara.inflater.
Refactor extension registry setter detection
HypermediaFilter refactoring Namespace changes
MONDRIAN: Refactorings to make external caches work better: AggregateManager is     no longer a singleton (belogs to a MondrianServer); Aggregate now belongs to     an AggregateManager.
ClearCase plugin: Refactoring PollAction and ChangeLogAction into common HistoryAction
Client refactor and improvements.
Java backend: refactored the constructor of KLabelConstant to recieve TermContext instead of Context
Refactoring.
refactoring jpa-factory
"Check in Bug 210279 Added support to share bindings among multiple chart instances. Scale context will be stored in IReportItem after computation and re-used by multiple presentation instances for the sake of performance. Currently, share binding support is disabled for future complete integration. Refactored hardcoded property names as well."
Refactoring
Refactoring of packages
A bit of refactoring and published shorelines now being created/updated at server start
Refactoring
HBASE-15745 Refactor RPC classes to better accept async changes
package rename refactoring
"Refactoring of package names, classes, dependencies, parent pom"
"trying to refactor querybuilder, only one must be used "
refactoring ExcelBuilderFactory
Refactor patch parsing support to be usable outside of the action code
Refactorings to criteria API. Renamed existing criteria
Refactorings: factored out all prefs/settings into a separare class.
Refactor Unit test
cleanup/refactor
"XSKINX-29: Refactor duplicate code Refactor JsxAction and SsxAction. Patch from Caleb James DeLisle, applied with minor changes."
"More relaxation, refactor adapting asserts with Predicates."
Initial refactoring of Spectrum -> Function1.
 - fixed to refactoring and old webapp setup
dmn model refactored
refactorings
Refactored field and method names
"More refactoring. Fixed some issues with ""not connected"" mode"
[KARAF-963] Refactoring of the system module
"-JBRULES-720 Clips Parser -Refactored clips to its own module, drools-clips"
Updated site and refactored names =================================  - updated site and user guide for custom operators  - renamed Operation to CustomOperator for least astonishment  - added sanity check to function name
did refactorings
"[MIN] Storage: refactorings, simplifications"
HBASE-3842  Refactor RegionObserver compaction API for easier overriding of policy
Refactored markAlertAsClosed in ActionService
Gros refactoring + encoding.
refactor variable naming in dirty manager.
refactoring
refactoring and bugfixing
Refactoring
WFLY-1812 Web session clustering should not require a RegistryService if sessions aren't being replicated. Introduce CacheServiceProvider to allow dynamic service installation per clustered cache (like what ChannelServiceProvider does for channels). Refactor wildfly-clustering-registry into wildfly-clustering-api and wildfly-clustering-server Remove wildfly-clustering-api dependency on jboss-msc WFLY-1885 Refactor wildfly-clustering-singleton. Introduce a new builder API and move the actual SingletonService construction and implementation to wildfly-clustering-server Refactor a separate Group abstraction from CommandDispatcherFactory.  Add channel and cache implementations for channel view vs cache view. Add NodeFactory and implementations for creating Node objects from a JGroups or Infinispan Address. Add GlobalComponentRegistryService for use by services that need to ensure an Infinispan cache container's channel is started.
test refactoring
Refactor journal creation
Small refactorings to ConvertToTypedInterface
34231 Cannot refactor method sig from String to String[] [refactoring]
Refactoring
Clients refactored
Refactoring of the EIK Workbench
refactor WorkingMemoryEvent* to RuleRuntimeEvent*
"refactoring, moved workflow registration to taskbox, renamed getProcessId"
MOAR SPARQLEndpointBase refactoring
#NAME?
Refactor - remove duplicate TargetPlayerCardsInHand classes and made CardsInTargetHandCount shared
Refactoring classes and actioning to-do-list
SOC-1832 Refactoring on local bases on navigation-rebased branch on exogtn
Added tests and refactored
Refactorings.
"topic: code enhanced module: deegree-tools, GRViewer description: refactoring"
HtmlBurner was refactored.
refactor Request objects to use generics and be standalone in separate package.
Form Services refactor: making form services agnostic to tasks
obanyc-1678 refactored MtaUts to treat pass numbers consistently between crew and vehicle services
NXP-12456: cleanup + use methods in Assert/Locator helper + refactor Select2WidgetElement + comment
refactoring for multidimensional array support
"refactoring DAOs, added annotationSource loader (work in progress)"
engine: Refactored network.java to Network.java
refactoring
Format files and refactor
Refactored
Refactorings + added simple XML SAX-based parser for requests.
More refactoring for clean code
Refactored ClientCore to be completely free of UI code
Refactor the module names to be simpler. No need for the extra org. on the front of the artifacts as that comes as part of being under the org.j3d groupId
"Revert ""restapi: Link Creation Refactoring"""
Extensive refactoring of plugins to use a PluginRunner.
MAGNOLIA-3853: more fixes in mocks (required due to refactoring) - MockContent#getHierarchyManager will return a MockHierarchyManager - MockSession#getUserID - MockNode#canAddMixin
refactored packages
Refactored the presentation module
Refactoring to better handle flooding.
Added functionality to send files as e-mail attachments to  SendHtmlMailFunction. Moved mail functions to structr-ui and refactored package structure of built-in functions.
test refactoring
search code refactored for easier testability and reusability
refactor annotated items to allow them to be injection points
"Removal of useless classes, general clean-up and small refactoring"
Project refactoring for Selta Eoc Manager
Refactored test for too many matching beans to check for more specific cases
Refactorizando Las clases de envio de correo
Refactoring of the ManchesterOWLSyntaxEditorParser and alteration of test cases for constructs that can't be represented in Manchester OWL Syntax.
Refactor indexes out of distance metrics.
get errors widgets in place. refactored singelton stuff
CRAFTERCMS-123 - Refactoring
Refactorización de las comunicaciones
cleanup and refactoring - stage6
Add assertion for parsing test and some rrefactor.
refactoring Querydsl to new Type model
"Refactoring of mutator batching to move it to PersistenceContext, out of EntityPersister"
Refactored NIO vs OIO performance tests
Refactor mNeedsConfiguration. Tab fix and unit tests
#141 refactored properties fetcher to support fetching classes as well
#NAME?
Minor refactorization.
Refactoring of Builder and Media classes from com.idega.builder.business to com.idega.core.builder.business and com.idega.block.media.business to com.idega.core.file.business.
refactor code
Refactor marker managment 
Simplification of remoteservice.client package and rest api refactoring
Refactoring: use try-with-resources
Refactoring spring configuration classes to match new modular approach
refactored PageData class to now be WeblogTemplate 
Refactor the IOService and move it into ij-core
Unit test improved. Just used the approach from UltimateThreadGroupTest In the middle of refactoring - broken build.
Minor refactorings of test framework
refactoring execution course view student attends list
refactor
refactor of packages and names to make room for read/query family of operations
Some refactoring and more testing of oxalis-commons.
Significant refactoring before the first milestone
Refactor FlagUtils.setConfig()
refactor: main presenter
Huge refactoring of receive message action
Refactor widget creation in Watch UI into a separate function
api refactor and basis for system test
refactor packages
interceptor refactoring
Refactor GL200 protocol decoder
minor refactoring
[FIXED HUDSON-3665]  support regex for issue id pattern and refactoring. more refatoring needed.
Mega refactoring of the persistence layer.
"renaming, added modules, refactored web "
[C#] Updated deprecated APIs and refactored package names
code refactoring
Refactor isRendered method in ViewNode to isVisibleInMenus
More refactoring to clean up the clustering display examples
Webadmin: Adding a new page - PoolGroupView. Adding the needed classes to present the PoolGroupView page. Also refactored the XMLProcessor into subclasses for each specific DAO/xmltype.
ant support + refactored commonality
KARAF-1243 First part. Refactoring on trunk to remove duplicate code on mbeans and shell. Bugfix for delayed update not yet included
refactoring: cleanup dialogs
Refactored OozieProcessMapper
minor refactor and javadoc tidy up
Major refactoring of crs package.
Minor refactoring.
XWIKI-4772: Improve typing speed * Use the cache while updating the editor tool bar. * Cache the detected font name and font size (this was the most time consuming operation while typing) * Update the executables due to the recent refactoring of the Executable interface. * Other small refactorings
"refactor SWFTest, fix broken storescu, mppsscu and stgcmtscu"
refactor code in profile list in exopeople
"Refactor BulkLoader, start to create tests"
refactor designer core code
refactor(rest): remove message body reader for query DTOs
refactor on TestCase name so that it able to display result at Jenkins
refactoring to remove dependencies
minor refactoring
refactor of the UDP transport so that it can work with multicast using a DatagramSocket/MulticastSocket directly in addition to using a DatagramChannel (which only seems to work with UDP)
refactored iTunes adapter. set iTunes genres properly.
Refactored restrictor handling.
Refactor into com.kblaney.ohl.gamesheets and com.kblaney.ohl.website packages.
Small refactorings
refactor package
Refactor unary expression.
refactor test package structure
Refactored the server tests
Refactored inventory and configuration reports.
Refactor AbstractModelSelectionAction
Packages refactoring
Refactoring SectionsResource should may be desactivate
Refactoring of the endpoints for sending
Refactoring: move launch utilities out of getting started plugin into commons.ui
fixed #50 additional allowed and restricted ways some refactoring of property analysis methods
refactor
refactoring to support redirect pair=cskol
SONAR-3755 refactor comments
Minor stylistic refactoring while reading CIShell code in preparation for updates to conversion exception handling.
Huge refactoring to support mixed record types such as ORecordBytes with ODatabaseDocument instances.
Refactor SymbolModel creation
[PRD-5286] fixed the issue and refactored the saving actions
event editor refactored - events are saved only on change
"Merged the code from APPSERVER-8 and some refactoring for FLVReader and related code. (1) FLVReader now uses a prefetching buffer for file reading and the file won't be mapped to memory at the beginning but read as needed. The prefetching buffer is mainly used for reducing the disk IO overhead and the size of buffer can be configured in red5-common.xml as a static property of FLVReader ""bufferSize"". (2) Cache for FLVReader in FLV is temporarily disabled by returning null on FLVReader.getFileData(). We need to redesign the cache architecture to put cache logic beneath FLVReader so that both tag caching and file caching are feasible."
ROO-3687: Refactoring packages
Refactoring
spring security spike - make changes to pom dependencies for spring security. add all files used from applicationContext-security and refactor current login action. These spring security changes are not intregrated into the application yet. I would need to make a change to web.xml which i have not commited.
refactoring towards shared conversion framework between sharpen and decaf
Fix PluginHost start and refactor toc actions
Several refactorings
[JBRULES-3194] refactoring DSL
Refactor for code clarity. No functional changes
Refactoring for version 0.6.0
Continue work on issue #182 by refactoring more of the simple key/value pair example so that the Response doesn't escape the REST client.
HIVE-4843: Refactoring MapRedTask and ExecDriver for better re-usability and readability (Vikram Dixit K via Gunther Hagleitner)
#593 - Refactor SPI - Move methods from ElPropertyValue to ExpressionPath
Added Id annotation that is going to be used instead of primaryKey value from Column annotation as well as done some refactoring
"Code in support of RAVE-457: View Person Profile Page: - new PageType model which classifies types of Pages (User, Person Profile) - refactored PageService method names  - changed DefaultPagePermissionEvaluator to allow Person Profile pages to be viewed by anyone"
Refactored Facet API. Began implementing simple ForgeAddon Project Setup Wizard
"WPP-1 Refactored code to remove dependency on UWs code WPP-2 Created Maven 2 pom, re-arranged code to follow the Maven 2 directory structure WPP-3 Moved to latest versions of JARs"
Added metricResults(...) and sum(...) to MumpsAnalyzer. Refactored.
MEDIUM / Refactored right panel management in ViewEditor
Refactoring/re-naming message page template for Diva look
"Refactor Creator, Locator, Mutator, and Remover into wildfly-clustering-ee-spi."
Refactor to modularize each component.
REFACTORING and FIX Jenkins Build Failure
1. Refactor scale context for scale sharing 2. Refactor presentation implementation for ease of adding support 3. Added junit test for scale 4. Rename classes
refactorin de Cuenta de Mayor [#25465311]
refactored readonly resources
refactoring
"Refactor configuration data, add areas support"
Refactored Maven-plugin-api class names
Refactor PieceTypeList to Bitboard
Refactored TypeSerializer to two separate classes; StreamSerializer and PlainSerializer
cosmetic fileRepo-creation refactor
accomplished little refactoring and and added snake length
Inline refactoring
Refactor graph execution logic to separate into planning and execution. Applied to SingleNodeExecutorFactory. DependencyGraphExecutor interface no longer generic.
"Refactor/rename JacobObject to a more appropriate Process, as it maps semantically to a Pi process"
[refactoring] introduced renderErrorMessage method to render error messages
Onyx Engine refactoring - Defined action methods on IStageExecution - ActionType enum allows executing the proper action method - Created Action to Event conversion interfaces
refactor and rename to make the requirements and roles more explicit
"Refactored for user-friendliness, added more extensive code comments and JavaDocs"
Refactor UfsJournal
added Mode since we need to differentiate between movement rules for emacs and vi editing mode. added logic to make sure vi movement is within bounds. + some docs/refactoring
Updates and refactored code the mmtf reader and writer. Including the new API
"getInstance() is now synchronized.  Hopefully this helps against some serious problems with startup. Refactored scanWIkiLinks() and textToHTML() into a single (almost) routine. Now uses new API in TranslatorReader to read in links, added LinkCollector class."
Big merge (around 3 months of refactoring) from private repository Wish me luck!
PRD-4181 - Some refactorings
Refactor submitter to PersonIdent mapping in MergeOp
Refactoring project
Work on early refactoring of Main; added ConfigurationException.
Refactor to simplify adding attribute support
refactored chef module to make a new servlet context listener
goal planning adaption Base grid state driven refactoring storage building
Refactor the old/pre-image data in HunkHeader to support >1 ancestor
Refactor chart renderer
Fixes #103 Refactor PersistenceManager & Batch hierarchy design
Minor refactoring
YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli. svn merge --ignore-ancestry -c 1598094 ../../trunk/
Refactored
Refactor LocalMapStatsTest
"Refactor some code in ECKey into ECKey.ECDSASignature, and introduce a new TransactionSignature class."
Refactor AchillesPropertyHelper. Achilles CQL WIP
"More BB tests, related fixes, and refactorings. Removed source-date from V2 API."
Refactor sequences
Refactor auth
[Refactoring] Removed code duplication in DomainObjectFactory.
Refactored: avoid *Impl / TransparentReferenceFactoryImpl
Did a number of refactorings to better handle large amounts of tasks
Refactor insight:   - remove the old graph module and rename the new one to metrics   - introduce a service API to store metrics agnostic of the backend   - refactor log/jetty modules to be ES agnostic
Refactor ContactListFilterView with CursorLoader
test refactor
util: refactor InternalCallContextFactory
CheckIn: Make some refactors for javascript filter and sort helper
Refactor union type transformation to make it more extensible
some refactoring
Kernel refactoring.
discard piles are moveable refactoring
Refactor test suite to move tests into the same module
yamodroid lib refactor finished
"Refactored the archetype into separate client, common,and server modules."
BufferChangeEvent was refactor to be public ICFolder was remvoed IBuffer.java was refactor to be public IBuferChangedListerner.java is not visible Refactor of ICRoot to ICModel Refactor of ICOpenable to IOpenable all the C Resources now implement IOpenable
refactor - update to latest bitcoinj classes
Small refactoring in DHNS about iterators.
XLCLOUD-226 manage applications bean - code refactoring
"SOC-1474 | Refactor IdentityStorage: Change NodeType to NodeTypes, NodeProperty to NodeProperties in social common to avoid same name with JCR classes"
Some more refactoring of setting functionality.
refactoring to do a bit cleanup
refactored a bit and trail.data now is the class used to describe a unique event. eliminated Position class.
Refactor tests
Refactoring of CallsModelStore; Basic implementation for own BayesNet implementation based ModelStore
refactor
Refactor package name of sample app
refactor(engine/core): provide minimal engine core for BPMN and CMMN
#NAME?
Merely a name refactor. Border --> Edge.
"Ok, Object Id handling back to working as good as before refactoring, i.e. just for serialization..."
Refactored RPCExtension interface using multibindings
Graphics: Minor refactorings.
"MAHOUT-497 - Refactor matrix stuff to put cardinality, size(), rowSize() and columnSize() into Abstract matrix.  Put rowSize() and columnSize() into Matrix."
Fixed invocation of custom entity methods. Refactored invocation code into own method which is called on AbstractNode (moved from StaticRelationshipResource).
refactoring for crud example
Test steps added into several test and minor refactoring done
Changed InclusionStrategy to a Predicate Finished integrating SnmpTree into tree construction Refactor
refactor master to run rules before cleaning up; more master stats; general improvements
Feature #7291: refactoring SilverpeasBundle.getStringArray() into getStringList and adding SilverpeasBundleList.
Refactor - Move Born of the Gods tokens to shared area
Refactored operation robustness handling and retry. Added retry check for initial backend operation. Improved error messages. Fixes #236.
[CXF-1907] First part of refactoring the dispatch/provider stuff to use the same runtime parts as the non-dispatch stuff This gets the dispatch stuff fairly close.  Provider stuff is untouched.   More cruft will be removed when provider is done.
TrackMate_: minor GUI refactoring
Refactored duplication in BendableScoreDefinition
"Refactor preparing for SE-186, this also resolves SE-133 mostly"
"Fixes #40, refactored code"
DDF-111: Refactor dynamic schema resolver constructor
Refactored locking management on both schema and storage: - schema has no more own lock but uses the storage one. This simplify development and reduce dead-lock risks - storage now has a timeout lock driven by the global setting: OGlobalConfiguration.STORAGE_LOCK_TIMEOUT set to 5seconds by default - database export doesn't lock the storage anymore
Refactored ConcreteConversation per Michael's suggestion to create a deliverParticipantMessage method to take care of the null check logic
  * refactored Filter3x3Operation and related subclasses   * removed Overrides as needed for Java 1.5
refactored netty modules
Basic refactoring
#29 refactor some method name
refactor it.geosolutions.fao to it.geosolutions.fra2015
Refactor Single Era fields to BasicSingleEraDateTimeField
 * bugfix: corner cases keys were not been populated  * refactor some population code
refactoring to remove the -api module. this refactory proves that we didn't need an -api module.
#593 - Refactor SPI - Move methods from ElPropertyValue to ExpressionPath
[PLAT-3577] Refactor transitive resolution logging into pluggable resolvers
- changes according to API - refactored some parts of OWorldInfo because it wasn't enough to create a wrapper
Refactor inner class Move.Type to package local
[misc] Some refactoring
Added row clearing. Refactored BoardController.
"Big refactoring of ParsedResult: now split into ResultParser and ParsedResult classes, per Christian's suggestion. This unifies the parsed results that are produced from various input, simplifying client handling of different types."
refactor default parameters for frameworks. Adjust tests
Refactored tests to be toolkit-agnostic.
Refactored DebrisLocator class into seperate DAO/DTO class Added Debris class Modified DataPersister interface and implementations to reflect more a data store like nomenclature Added first RESTful endpoint class supporting a GET on /debris
"Refactored org.eclipse.ecf.presence.bot to allow for passing in containerFactoryName, connectID, password, roomname"
refactored for new webservice API
Refactoring
refactor tests for batch
engine: Refactor RemoveDisksSnapshot Callback
JC-1421 refactoring
Safety commit.  Almost done refactoring the node object.  Some tests still failing because of poxy node data.  Will correct that shortly
#61 Refactoring Type into a wrapper around TypeMirror
Refactoring text and shape marker infrastructure. It is now easier to set a priority when adding a marker to all points. Also text markers can be added to all points.
Tinkerpop/Gremlin refactoring
Refactored import to loop in sequence through a bpmn20.xml file
"Refactor replay/rewrite classes - Stop running String->URL->String->UsableURI conversion for baseURL - Rename RewriteRule.beanName to name (semantically more appropriate), allow setting name explicitly rather than relying on baanName - Rename MultiRegexReplaceStringTransformer to CompositeStringTransformer"
refactor
Refactoring and adding of column names
Command package refactor and build
Refactoring and path fixes.
"Refactored: changed GaspLocation to Location, Location to GeoLocation Added ""location"" DBObject to hold lat/lng coords + updated test data Tidied up MongoConnection debug logging"
APG-240 reverted split refactor
Cors related refactoring
refs #100997 Initial move of refactoring system tests out of the units area
JSON Refactor - compound type support
Refactory: Remocao de dao e controller para comentario
Refactoring of z-spread functions.
ISIS-1273: refactored RepresentationService impl ...
Refactored the handlers to use re-usable resource handlers that can be intercepted to execute strategies.
Movement behaviors and combat have been refactored and renamed. It is now simpler to use them.
refactored static XXXSettings classes to Memento implementations
https://jira.jboss.org/jira/browse/JBIDE-5499 Refactoring for hibernate code generation configuration.
Major refactorings
Refactored providers Added StringCreator
RF-13582: revert push packages refactoring
Refactored again SharedSegment
* launching tests refactorings
JAXB provider test refactoring (#922)
Refactoring JarConverter functionality. Containment and declarations for CompilationUnit + Package.
"Added BooleanPreference, plus refactorings to support it, for better support of ""binary"" yes-or-nothing preferences in data models"
Refactoring using lambda
o refactor unescapeHtml to unescapeHTML for consistency reason
small refactor. finish copyBits(). implement getInterpolatedPixel().
Move file utils methods to ops4j base. Make a project of it's own for BND Refactor osgi.bnd
fix configuration screens to working again after refactorings
refactoring for JBIDE-2077
#NAME?
#4 - REST layer Provider related authentication/authorization mechanism refactored to allow new 'Contributor' authentication type necessary for content rating
TestNG listeners for metamer/ftest refactored
"Ensured data-binding tests only run when integration-test profile is enabled, +minor refactorings"
more refactoring to share sparse indexed implementation
bunch of refactor All output formatting is moved to a separate class testCase -> testVector rename for brevity some java docs
minor refactorings in all the code
"refactor, added DDL generation"
Refactoring
Astyanax connection pool config refactoring
"Big refactor, largely to allow GraphNodes to contain extra methods (without having to copy and paste into three classes) - which resulted in even more reflection.  Should enable us to start moving logic into the new virtual superclass"
Refactor all the core broker classes from the activemq-core module into the activemq-broker module.
"Refactoring command line tool to remove '-nojsp, -nojava,-targetjdk' options. Implemented a new option ""-lang"" which must be followed by two arguments (ex: ""-lang java 1.4"")."
"MODE-2528 Refactors the relational-persistence-provider to provide better support for different types of DBs This also changes the default serialization format to Bson bytes from Json strings, which are very fast to write but slower to read."
Refactored some Backend-specific methods in the Consistency Predicate module as abstract methods in ConsistencyPredicateSupport.   * Moved the implementation of the methods to the JVSTM/OJB implementation     of ConsistencyPredicateSupport.
Refactor edge is now a node instead of relationship in backend
"Refactor of channels ingest, plus ingest of new regional/timeshift fields, and ingest of highDefinition and mediatype fields. Also now ingesting youview channel aliases where provided by the PA"
"[HAMA-417] - refactoring of Maven structure: from one project to hama-parent and its modules: hama-core, hama-examples, hama-site"
Refactored lazy initilized type checks to finer grained enum AttributeTypeKind
Pin Refactoring
more refactoring
TEIIDDES-1663: Refactor the relational and transformation dialogs
#NAME?
"http://jira.jboss.com/jira/browse/JBIDE-1562, junit tests was adjusted, was added VpeTest setup class which allows correctly import-remove test project from workspace(only once for each test suite, not for every test case).Some code was refactored."
* Updated LoanAccountAction to allow service classes to be injected via constructor for mocking. * Refactored LoanAccountAction.loadFees to make a getDefaultAndAdditionalFees which is easier to test. * Added LoanAccountActionTest with a true unit test for getDefaultAndAdditionalFees that uses mocks so that it doesn't hit the database. * Converted BusinessService into an interface (to reflect how it is used) and updated classes which implement it. * Updated the Easymock jars to the latest version (version 2.4).
Changed terminology for fitness and refactored calculations.
Refactored classes and added some more interface methods
Refactored some methods to external helper class
TROIA-133 refactored generator code.
ROO-2745: Post 1.2.0.M1 code refactor and clean up - deprecated static MemberFindingUtils methods in favour of instance methods
update  core - refactor cleanup  ui - new work on make action contributions and targets
Major refactor of the IO layers
Bug 360378 - Confusing behavior when the current file is not part of the refactoring working set. Also show preview whenever there are warnings.
Refactor example per Tammo's suggestion
renamed RefactoringScope -> RefactoringScopeFactory
refactor main
FIleDisplayActivity refactored to fix view never updated after installation in some devices and problems when all the accounts are deleted
"[refactored] BuildTarget, BuildConfig and TargetOs to separate classes. [fixed] all builder classes accordingly."
Use shared AST in Extract Function refactoring.
"Bug 1855384: refactored properties page, added back the detector configuration table"
"44283:	pull up doesn't detect duplicate (overriden) methods [refactoring]"
Refactored by pushing the eval logic to the ObjectStreamProvider as the EvalHandler should not know how to evaluate but just intercept the call and forward it to the provider. Separated the StreamProvider out of the ObjectStreamProvider.  Therefore the StreamProvider does not need to know about the proxying and other object enhancement.
Refactored string function tests into dedicated tests per function
[jclassfile] bit of refactoring (moving classes around)
refactor
ACT-1021 Refactoring: Moved BpmnError into public API and ErrorPropagation into helper package
"Simple refactoring, no functional changes"
"refactor and rename, may have broken everything"
refactor PropManager buy and consume function.
refactored script to process in and out in distinct steps. multisign still does not work
Refactoring
Bug 481796 - IndexBinaryType bugfixes and refactoring
Refactoring ButtonGroupChoice
"ROO-2928: Post 1.2.0.RC1 code refactor and clean up - changed ItdTypeDetailsBuilder.addField calls to use FieldMetadataBuilder objects rather than FielddMetadata variant to avoid the unecessary conversion from FieldMetdata to FieldMetdataBuilder, and for constructors as well"
refactored account & fieldstore so that they no longer depend on accountdao/fieldstoredao (to make account easier to use in tests); moved ifieldstore into api; updated tests to use Account
Refactorings due to integration of dynamic feature types / app schemas
KNL-481 refactor getSites() method
refactor httpclient tests to handle httpclient instance appropriately so that additional cookies can be added
[DROOLS-1074] add support for kie-spring as EAP module + related refactoring
Refactored tap message classes.
UIForumAdministrationForm now leverages BaseUIForm refactored slightly the ui init method
PerformanceProfiler: refactor the main() method
"TestRunner refactor, part2"
refactor
#10 refactored fireTableDataChangedAndKeepSelection()
correct a refactoring error on CommentRemovedEventListener and add a new Test Case method for testing DocumentRemovedCommentEventListener
"externalized strings, finished basic relationship editor, refactored"
Implemented the first Javadoc test. Still need to add some Javadoc (no pun intended) and also refactor the utility methods.
SONARDOTNT-274 Refactor the FxCop plugin
refactored the algorithmsService and moved part of its code to the new AlgorithmGenerator
refactoring of LocalDateInterval: adding new method to fetch end date from start date
First Refactor: Extracted calculateRentalPriceMethod
Adding unit tests. Some refactorization required.
refactoring with evaluators in assistant and freemarker template by egonzalez
minor api addition to allow creating TextChange instances for refactoring that save all the pom files encountered. Fixes problems with partial reload of a project when changes are distributed to multiple pom files.
Refactored a package name (without proper git-fu) and updated documentation.
Refactored the het (polyploid) consensus creation in ReduceReads.
Refactored bioprograms as a separate project plus some more class refactoring
Refactor the getPossibleType method in JsonEncoderDecoderClassCreator. I created a kind of JsonTypeInfo.Id visitor that can be reused for other matters. I extracted the code from the JsonEncoderDecoderClassCreator to put it in the visitor.
Refactoring now works for intergenicmvn -Dtest=IntergenicAnnotationTest test
o Refactored code
Added 2st task for week 6. Refactored 1 task.
ViewPanel refactoring
Refactored the ExecutionContext for method results.
gluster: Refactored gluster hook command tests
Refactoring class names.
"initial refactoring and preparation for supporting hector and astyanax, removal of hector cf templates"
SONAR-2404 Refactor reviews API - web-service and sonar-ws-client
Finished refactoring execution
Name refactoring.
Refactoring to tidy up resolving and combine object factory and manager - II
Refactored HookExecutor
"CAY-1230 Refactoring & unification of ""ROP"" and ""classic"" class groups. Making CDO subclass of PersistentObject"
Minor refactoring to collToString
[NTI] Refactoring in preparation for retaining namespaces in NTI.
"Refactor the mind-compiler to use Google Guice for dependency-injection, and improve plugin-manager."
Minor refactoring and code cleanup
Gros refactoring pour simplifier. Degenerisation des swccg.common Runtime / Subject / RuntimeAccess.
refactoring
The refactored writer still works
"Refactoring module name, cleaning"
Refactored request queue and transaction handling to reduce code duplication Improved error handling for requests Improved MySQL error handling Fixed race condition during connection with MysqlConnection Got Postgresql passing all TCK tests Made some TCK tweaks
Extract method refactoring on getting filtered methods
"Refactoring - DeriveKeyForObject variant that generates key + IV renames to DeriveKeysForObject, and one form is modified to return ContentKeys rather than bytes[][] for convenience. Also fix keyderivation tests to work with new derivekeys definition. refs #386"
refactoring ServiceDeployerImpl to ServicesManagerImpl and creating NodeBootstrapperWithBusTest
Refactored codes to change non-API interface from public to package visibility.
Refactor generic transormation functionality into separate package
#NAME?
Refactors MAC JWS provider
"Modified ship and shore layers voyage layers, implemented more dialog windows for handling route, misc refactoring, right click menus and more"
"Refactored the package names to be consistent using "".impl"" for the implementation sub-packages."
Refactored JMX code to use InetAddress and use common core/jmx/api classes. Added fallback to platform MBeanServer when trying to collect from localhost on the default OpenNMS JMX RMI port.
Closed #124 (Make MockDevice behavior configurable) Refactored MockDevice implementation (much simpler now) Refactored a little in all drivers
Bug 272604 [transport] Some exceptions are not propagated Extra checks are now made once the background job has finished. Refactored exception checking to separate method.
Refactor the code to generate zkServer.sh script
"ROO-2745: Post 1.2.0.M1 code refactor and clean up - moved and renamed some File utility methods, fixed potential NPE in FileDetails#hashCode, wrote unit tests, simplified Pom.java"
refs #233 - refactoring in progress...
refactor(cmmn-assertions): refactor stage test
Refactored project layout slightly. Removed old billboard project.
Refactor unit tests for WsdlProjects
PLINK-130 refactored relationship management
"Big intermediate commit (mostly so that I don't have to go again through merge/rebase hell) in expanding BQSR capabilities. Far from done yet: a) Add option to stratify CalibrateGenotypeLikelihoods by repeat - will add integration test in next push. b) Simulator to produce BAM files with given error profile - for now only given SNP/indel error rate can be given. A bad context can be specified and if such context is present then error rate is increased to given value. c) Rewrote RepeatLength covariate to do the right thing - not fully working yet, work in progress. d) Additional experimental covariates to log repeat unit and combined repeat unit+length. Needs code refactoring/testing"
Refactoring structure.
Merging logic-api-refactoring branch to trunk [4177]:[5869]
Even more refactoring and introduced support for About and optional Quit (so that MultiBit can veto a quit request) Pulled InvocationHandler methods up into template base classes to simplify the addition of new implementations later. Removed some handling of events from MultiBitFrame into MultiBitController where they are more suited.
VNC server refactor - code part
"Refactoring, moved start code of prefix search into nodes."
#JC-45 TopicService test refactoring
refactorings
fixing a bug when converting terms to references (the global jTerm manager was not taken into account). And other minor refactorings
Refactored: towards iterating & upgrading array values individually
Refactor
#NAME?
refactored remote bookmarks code to support JSON parsing/ iteration of Bookmark Lists
"SONAR-6137 Apply feedback on PR (refactoring of facet processing, tests split)"
"Refactored hint to valueHint, type to representedType on Node for clarity"
Big refactoring to allow full source lazy loading
First running version after domain refactoring
JBRULES-3696 Set Oriented Match -Fist refactor for Set Oriented Match. Some things are still broken
Release 0.6: - a lot of refactoring (now each object of a given type has its own package) - JTransforms updated to version 2.0 (no more power-of-two size limitation) - multithreaded implementation of Object matrices - fixed bug in DComplex.inv() and FComplex.inv()
refactor the ByreBufferDataInput
"Refactor some methods out to Utils, allow dropping of script engine JARs into plugins/jxpl/lib, log output will now prefix [jxpl]."
BridJ: refactored StructIO to allow for more customization (can now change integral fields sizes with a Customizer !)
HV-431: Refactoring to programmatic method API: * Renaming state types to XyCreationalContext * Extracting facet interfaces for creational contexts which represent the possible next operations
"refactoring, another example"
Core: refactor type storage pt.2 (#340).
Added icon adornments for const and immutable. Refactored some icon resources.
https://issues.apache.org/jira/browse/AMQ-5876 - refactor properties loading such that it can be reused by cert and props login modules. Both loading on start and refreshing if reload=true and lastMod indicates change
Refactoring mbean interface names for consistency. Renaming option interfaces for consistency.
refactor to make the editor more usable for plugin developers
CXF-3123 Some refactorings of the http auth code to make it easier to add new auth mechanisms
Refactored the diagram settings and dialog mode dialogs into a single preferences dialog; allow custom color schemes to be defined (by means of config files).
SOAP-1416 Automatic tests of logging in the request filter + test refactored
refactoring of SummaryExporter to use DataWriter Interface (renaming the class to SummaryDataWriter)
"added the ability to handle > 1 conf file, refactored AbstractFacesConfigTestCase"
refactoring and clean up
refactored inner classes from AcousticModeller to modules.acoustic package
[update:] code-refactor moving DTO to core
refactor verification logic
Refactor code into methods update melee Test for 4 enemies
temp commit to get on with refactoring
Refactored package structure
fix(engine/receive): refactore task subscription and sequential behavior
#NAME?
resilience: refactor ExceptionMessage
Fix invoice items issues in existing code + refactoring a bit
Continued refactoring of validation logic
"improved java parser to automatically import classes when adding annotations by Class<?>, continued working on scaffolding, MavenJavaSourceFacet now properly sets configuration of the maven-compiler-plugin to source level 1.6, but needs to be refactored for simplicity"
"CSPACE-173, CSPACE-325 more refactoring. Pushed down all the handleXXX methods. Added assertions for status codes in the test client."
refactor/cleanup test suite a bit apply generic tests to more configurations fix a couple of bugs that revealed
HADOOP-2555 Refactor the HTable#get and HTable#getRow methods to avoid repetition of retry-on-failure logic (thanks to Peter Dolan and Bryan Duxbury)
[SUREFIRE-592] More refactoring and hopefully fix build on sonatype grid
"Created new EntityCacheUpdaters so old cache loaders could be deprecated. Now they are only used for unit tests, and they should be refactored out of there when time allows."
HZN-791: Refactor CommandManager and menu handling
"renamed core tile API classes for consistency, in preparation of configuration refactoring"
refactor WeakformAssemblier interface
"Working on cleaning up overrides in RuleSetFactory, still a bit more of refactoring to do"
Refactored Views -- now they accept ResultSets instead of result XML strings
added AlphaBetaPruning strategy (optimized minimax) refactoring fixed unit tests
Refactoring the Item handling Improved date utilities Tidied up the client user classes
Minor refactorings to tidy things up and tp help understand resource providers to better support IoC plug-in for all components.
Refactoring Arquillian Tests
Refactoring
Refactored Controller because of datastore.
Refactoring
Updates after refactoring
Added an extension point and refactored the view to allow for these extensions. More changes will come.
Issue #1: Refactoring: Implement tasks for dealing with files
Started to refactor sensitivity calculator tests
Almanach refactoring: - modifying the PDC filter mechanism in order to be able to get filters about several component instances - modifying search services in order to search on several component instances - adding angularjs directive to handle PDC filters - using request.responseAsJson() instead of using JSON.parse(request...)
[TMPARCH-11] Refactor a bit the Asset types and tests
rsa refactoring
"ROO-2986: Post 1.2.0.RELEASE code refactor and clean up - refactoring, formatting, and documentation"
"JBEHAVE-265: Renamed @WithSteps annotation, as it will contain steps instances.  Refactored AnnotationFinder public getter method."
refactored verifyCurrentScmContentMatchesHierarchy : moved to ScmSyncConfigurationBaseTest
code clean up. Minor refactoring of ArrayDesignService
JBRULES-713 Make Dialects Pluggeable -more refactoring to get things closer to pluggeable dialects
[WICKET-4904] Refactoring for behavior DisabledAttributeLinkBehavior
More refactoring. Starting on fixing opping.
refactor assignment wizards
Some more refactoring of Collectd
snapshot of progress at beer o' clock eastern time friday;  refactor argument parsing in PSE3Tool and start writing classes for sieve3
Refactor processor to be built by jongo class
refactoring
[PLUGIN] refactoring of some packages
more common code refactoring
Refactor PerSampleReadStates into a separate class
refactor: break up larger methods to clarify intention and facilitate JVM inlining
Add maxVolatileTime para to control data provider flush interval and little refactors
Refactoring ConfigurationPropertiesProvider. Removed all references to BDB. Removed LocalPropertiesProvider Merged everything into DefaultConfigurationPropertiesProvider for simplification. Added use of DefaultConfigurationPropertiesProvider in BitwiseStoreUtil.
Refactor sumDurationUntil to use daysUntil method
+ New DynamicImplementorIntroductor : resolved MOD-236 issue. + Refactored underlying DynamicIntroductor hierarchy implementation for better implementing concrete introductors.
#1149 - Refactor move PersistenceContextUtil into ... io.ebeaninternal
[restructuring] Refactoring plug-in names for 2.0.
Refactored some DC methods to be degrees oriented instead of radians; that's what I always used any way.
refactoring
Slowly refactoring this to make it nicer
Let the user perform refactoring without saving the current editor (They still need to save other dirty editors first)
[US 403] Refactoring PluginManager to better support integration tests.
CSPACE-725 - More refactoring of common client work. 
Refactor InputStreamToFile examples
Refactor data integration code in Chart UI
in the midle of the process of refactoring
Refactored management of low level IO improving writes only when necessary.
refactoring
Some refactorings and code cleanups
Refactored TreeFetcher to use Actor so that it is completely asynchronous
LP-2: Added chunked upload support and refactoring of message handling
Refactored existing code to more loosely couple classes.
refactory
a round of debug-driven refactoring
"Refactored out traverser code from the TraversalTest into TraversalExample. Made changes to AsciiDocGenerator to be able to use snippets in test-sources and in sources. Removed yet another reference to the wiki,"
Refactoring of common functionality for retrieving and storing property records
Refactoring
various refactorings
tests passing after a big refactoring
Changed getService method to use HttpServletResponse and Request. Some refactoring
[LOG4J2-583] TCP and UDP socket servers should be able to handle XML log events. Refactor current code for XML and JSON. Create stubs for XML and JSON implementations.
Refactored NameableEntity to NamedEntity Updated german language files
"Network-refactor: Refactor NetworkManager into NetworkModel and NetworkManager. NetworkManager's exclusive focus is now  - handling plugins during orchestration, and  - to deal with ip address allocation. Those classes that used to refer to NetworkManager to get access to the datamodel now refer to NetworkModel"
CheckAccessControls: begin refactor to allow better understanding of @fileoverview visibility. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75826151
"[COLLECTION-497,498,499] Refactored test framework for bag implementations, added missing tests, added CollectionSortedBag."
Refactor: extract RepeatableProcess class
Refactored DAO. Added doctor Service. Added event table.
"Refactored, and added, tests to check resolving issues."
Refactor
Refactor tools ui. Add EdgePencil.
a bit refactoring for open formula UI ++ some bugfixes
added support for the TypeWrapper.asType method and many other small refactorings
Refactor all cf-launcher commands into a separate package
Refactoring RiverService with abstraction level - Tests are now easy to write ;-) Fix #34
"EFO support refactoring (2/3 done), fix for #2463"
Find extensions refactor
continuing container infrastructure refactoring
Refactoring cosimilarity matrix implementation
"Refactor - moved source related interfaces, classes into dedicated package hierarchy."
Package and name refactoring for vdm2jml
Refactor objectives from execution course managment interface. Deleted some unnecessary code.
"Refactoring to set Selenium as a direct dependency plus cleaning some generics, deprecations, ..."
MAJOR REFACTORING! Lots of breaking API Changes.
WebUI:: Major refactoring:
"refactor project, add profile to generate bundle, split camel into camel-ws and camel-ws-ssl"
IDE-1284: refactored test case and added more advanced tests for factory beans and autowire dependency resolution
refactor batch and support single service instance
improve - refactor transaction api
Started client api for $links.  Refactored and reformatted consumer model.
engine-core: Refactoring StorageDomainCommandBase to handle Maintenance (#593244)
"First cut of hooking OptionMarketDataView with a live data feed (in-progress) - Added OptionMessageHolder that contains a key, a call message and a put message - Added enums in UnderlierInfo - Added OptionMessageListTableFormat that will work with OptionMessageHolder (need to refactor - pull out common methods from MessageListTableFormat) - Added hack in EnumTableFormat so it will interpret strike and expiration date correctly for options, will fix in later checkins - Added TODOs in these affected classes for things that need to be fixed."
REFACTOR
Major refactoring of FaunusCompiler and FaunusPipeline. Ability to add MapReduce-based Input/OutputFormats.
RSA  additions and refactorings
"introduced blockFetchTimeout property in BlockAccountIterator. This triggered change in SolarisConnection (adding timeout for the primitive executeCommand(String), but keeping the other methods private, as no other use cases came up yet.) Refactored blockSize property. "
Refactor HttpTemplate: unify duplicated code
Minor refactoring
"Cleaned up the nature code imported from scala plugin. Refactored things to have : java project relative settings done in new project wizard, clojure plugin bin classpath entry added in nature configure() only if package 'clojure.lang' not currently accessible from java project Added the possibility to add/remove clojure nature from a clojure project or a simple java project (allows to add clojure nature to existing java projects !)"
http://issues.carrot2.org/browse/SMARTSPRITES-41: Sprite image MD5 hash or date should be part of file name rather than a request parameter: initial refactorings.
Refactored response checking.
"Fix bug with collection adds, refactor foreign key on persistence package"
"ONYX-273 Refactor event mechanism in default questionnaire UI. It is now much simpler and efficient. Need more testing for error cases, arrays etc."
Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core. Mantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.
Refactored
More dependency refactoring.
[TEST] BACKLOG-774 - uncomment and refactoring XQueryTest
#NAME?
completed refactoring of check code fixes for BYTEMAN-190
SCRUM-138 : refactored all tests (using @before for initial Node setup) and splitup into atom tests. Changed link() and added its tests.
Refactor bulk import of resolver vis map next iteration.
"Post release refactor. I moved almost everything that was package-private in com.google.inject to the internal package. The motivation is to simplify things - the previous setup was extremely awkward because c.g.i could call into internal, but not the reverse. Similarly for the SPI package."
"refactor dans les overlays,  import initial favoris,  polyline overlay de test"
"Refactored renaming operation (inherits RemoteOperation, so generates RemoteOperationResult)"
SB-761: `RepositoryPath` related refactoring
refactoring
Small refactoring
#SB-256: Refactor all *.foo.services.* packages into *.service.foo.*
"make metadata calls via discover resource, refactoring not finished, need query selections etc"
method name refactor
ISPN-5485 Refactor DataContainer and various Maps to use new Java 8 classes
Refactor
"NPE on parameterized return, don't update when invisible, type javadoc when variable selected, general refactorings."
"Refactorings: new packages for CPD & dataflow views, new abstract superclasses for actions, commands, views. For-loop conversions, ArrayList -> List reference changes. Rearranged context menu icons - still need some unique ones for three other entries Dataflow: NPE fix post view closing, view always shows first method by default, labeled method list, new tab icon, outlined & positioned nodes."
Refactoring
"Refactored the listener interface to distinguishe read-only listeners from publishing listeners. Read-only listeners (the StepListener interface) just listen to step events, whereas publishing listeners (StepPublisher) record events and report on results. Most external plugins will probably be StepListener implementations"
Refactor to have interfaces. Add cluster pipeline commands.
#NAME?
Refactoring + W$ support - way to go...
minor refactoring
refactoring: removed projectbuild plugin
Finished refactoring SABR / swaption surface fitting code
#NAME?
"Webadmin: Refactor out PoolQueuesPanel for reuse. I also renamed PoolBean to PoolSpaceBean which makes the patch look a lot bigger than it really is (sorry). I had the misunderstanding that the number of moverqueues is static, so I also corrected this error and made it dynamic in this patch."
Refactoring.
refactor code and add test
refactored a method
"Refactored BearScript (working draft), added cancellation."
WYSIWYG table plugin refactoring after mflorea review. AbstractPlugin#getTextArea() made public as suggested.
"Added deleteTree & createCommaSeperatedString to the Toolkit. Added CSharpParameterGenerator.java, still needs refactoring."
"Add CancelAction, refactor Map toolbar actions"
Some further naming refactoring.
Refactor for ResultBearing(ResultProducer) -> ResultSetIterable(mapper) -> ResultIterable<T> fluent API pipeline
a bit of refactoring on test support classes
"Refactoring, Testing, Cleaning code W.I.P"
"Refactored Lexer tests, added lexer error checking."
refactored QueryBuilder for reuse.
Added javadoc comments and did some refactoring in StudentAssignmentBean
"SAVARA-345 - refactored and updated code for relocating the 'introduces' statements within a parsed global protocol, to cope with the case where the role's behaviour is located in a sub-protocol"
engine: Refactored ExecuteVmCommand() to conform to java standards.
Refactored GeoIpLookup so it can be used in both Pig and realtime ETL
DDF-241 Moved Abstract Federation classes to implementations project. Corrected Federation Strategy classes for new refactored implementations. Deleted i4ce.png because it was moved to impl project.
Code completion improvements. Starting refactoring integration with bicycle repair man.
Sonar fixes and some refactorings.
"refactor QR decomposition, avoid mutating parameter"
minor number output refactoring
Small refactoring
[REFACTOR] Renaming of ruletype to ruleoype
refactoring growl plugin space
Refactor to eliminate the use of JMXService
major classes refactoring
Refactoring JobApplication to JobApplicationInfo to support  date the job was applied on
Refactored: using stdout/stderr with TestBench
refactor to static valueOf
[OPENENGSB-200] refactor BeanUtilsExtended and add some jdoc and unit-tests
refactoring names
HUGE refactoring - rewriting rest client DO NOT TRY TO BUILD THIS VERSION [ci skip]
"BDBJE updates, refactoring * BdbModule.java     (openDatabase) all databases now 'managed'     (getStoredMap) all reuse of prior data as for checkpoints * (others)     match above changes"
- Format code. - Use Java 5 generics. - Refactor work done in doPost method into individual per-action methods. - Eliminate the use of StringBuffer except in a few cases. - Largely eliminate reuse of a single variable for different objects.
Extending and refactoring model aggregation.
"MAGNOLIA-3001 MAGNOLIA-3002 Started refactoring ClassUtil/FactoryUtil. Entry point is now ObjectFactory (subject to renaming), which provides a configurable ClassFactory (to load and instanciate specific classes) and ComponentProvider, which provides our beloved switchable/configurable-from-repo/observed goodness"
Refactored into separate modules to enable a no-dep artifact.
DRILL-945: Implementation of repeated reader and writer for parquet. Includes a fairly substantial refactoring of the overall reader structure.
"generics break, need to concrete Document type or refactor"
Refactored mslbot-core to its own package core
Refactored code representation of web page rendering.
refactor
refactoring
refactor monstro para atender novo design
"Refactor class names, change attribute to compliance_type"
refactoring
Fiji Build: refactor to have one common getRule(String prereq)
173023: [rename] Refactor popup should allow to set placement via context menu
refactoring model with builder and dynamic casting services
Refactor options for baksmali
"Refactored Console, added options"
Preferences refactored
refactored equiv result combining
Sigificantly improved the performance of the JohnsonPathFinder. Refactored some tests to be more accurate
"Refactor the test suite, add performance spotcheck tests for profiling."
Refactor AbstractMultimap into a separate AbstractMultimap and AbstractMapBasedMultimap. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=38726867
"refactoring: Request.send() added, moved code from Client"
Re-add changes lost in refactor
Refactoring task/command stuff.
Add ConfirmationPage to model the delete page/space confirmation. Refactor DeletePage and DeleteConfirmationPage Add LiveTableElement#getFilterValue() to be able to take the value of a column filter
refactoring goodness
partners sJ1ei7pF - Refactor Http to take only a Configuration
Refactor load and save filters (keyword list and blacklist domains) and import and export on the filters panel
refactor
ACT-741 refactoring persistence: refactoring IdentitySession and Tasksession into appropriate entity based XxxxManagers
ROO-2932: Id cannot be resolved or is not a field - refactoring and cleanup
[CAST-1773] Code cleanness improvements and refactoring.
"Patch for David Daoust. <BR> Refactored the scanner to make Scanner Contexts more specific for macro expansions and inclusions, yielding performance and memory improvements."
[102405658] Refactor to CloudFoundry Branding extension point to allow programatic contributions for Cloud Server Urls.
Initial commit for refactoring abstractRestRequestDesktopPanel
Refactor out initialization/schema setup logic to its own method
Refactored modifiers into their own class so they are now easy to add
Money class refactoring.
Refactored node source range initialization. Internal changes to LexerElementSource API.
refactoring (fixes also)
Refactor
Monster refactoring Part 2
UPDATED readme to reflect changes REFACTORED some methods from disk writer to the file handle class to reduce the number of objects to keep as members UPDATED the shutdown of the application as there were cases when the remaining data was not written correctly ADDED hashCode and equals methods to FlippableData class to minimize the chance of randomly appearing further elements in the flipped queue (though this sometimes still occurs for no obvious reason)
Add ConstructIndex class and refactor package names
Issue 101: refactor client examples
Refactoring record table (work in progress)
kie-server-tests: refactoring (#504)
Ticked up version. Implemented a new HiveSessionFactoryImpl. Completed HiveSessionFactoryBuilder Refactor
Refactor package names.
NXP-4549 Refactoring Gadget Mapper
397355 [refactoring] Implemented LocalArtifactRepository with new base
"Refactorings, Documentation"
Refactored StudentCurriculum to fix reported errors for compatability with old stuff.
Preliminary refactoring of ART
Refactor method name
#684 - Refactor - rename @CacheStrategy to @Cache ... require explicit enableQueryCache=true for query cache use
refactor code into mikera.matrixx.solve namespace
srm: refactor SchedulerFactory
JBRULES-2209 Refactor Commands to mirror drools-api
refactoring of ws bot tests
collector: refactor the code to get in memory timelines
" - more bug fixes from refactoring, added a trace runner to the api project"
Refactor parameter processing to suppport plugable read from String to Java type. TODO support JAXB.
Misc. minor refactorings.
refactoring. DI classes move to new package.
Refactored base class for calculations moving some functionality into kenyacore
Refactored XML EditorKit code to be Outline EditorKit
Minor fixes and refactoring
More intermediate DeeParser / LexElementSource refactoring.
"Hey, we really should have been setting this. Not sure this is the best way to deal with woosh depth, with the whole 3d thing, but, better something than nothing.  Aaaand, while we are at it, lets remove some of this excess logging in the redstone listener. Aaaaaand... more refactors towards a unified naming scheme. Water != Portal. Activated != Light, etc."
"Fixing a bunch of stuff that was missed out in the refactoring. Removed OPS4J from the name, concentrating on PAX as branding."
Refactor code to improve encapsulation
Major rework around entitlement unit tests Refactored BusEvent queue and Notification queue
"Added support for creating endpoint configuration from ApiCollection, added method aliases to tests, minor refactoring"
Refactored Resource API to favor interfaces over convcrete and abstract classes
Refactor implementation of Connectors and Managers
"* Refactoring ErrorClosure *  - renamed ErrorClosure to ClosureFactory  - the new ClosureFactory substitutes three legacy classes: ErrorClosure, NullClosure, TimeoutClosure.  - deleted TimeoutClosure, as it the same as ClosureFactory#newConnectorException()"
TFJ-702 refactor: get*Url() to get*URL()
CAY-2050 Refactoring: ParameterBinding to contain ExtendedType property
Reworked refactoring history
"Refactor: not a collection of vbuckets, more of a configuration."
Refactoring/cleanup of parse. Comp. Unit now inherits from Window object. Moved Window object to baseBrowser library in jsdt.core
master: more refactoring and statistics output of results
Issue #461: Add a script service for accessing patient data Refactoring to remove code duplication
"Refactored DamageCause and EntityDamageEvent, so that any object can be a damage source, as opposed to only an entity. Needed to implement EntityDamageByBlock events in Bridge."
cleaned up and extended refactoring
Refactoring of HtmlTag + Tests
Refactor the name of both the directories and the artifact ids of the Almanach subprojects
Refactored structure and spacing
"1. Rename class name to make its meaning clearly. 2. Refactor data binding code, don't log exception in method, throw it directly to invoker. And refactor some methods."
RewriteEngine refactored and changed to an interface in order to be able to change the used rewrite implementation.
WIP Autotune refactor
IDE-797: some refactorings to be more inline with the rest of the ongoing work
Refactoring code from feature #3216 to remove duplication and simplify manipulations
Refactor
JBRULES-1734 Drools API  -refactored miss spelt name.
"Small Refactoring, no functional changes"
Do a refactoring to promote IOC and make class's names more suited to their purpose
"Refactor updateReadStates into PerSampleReadStateManager, add tracking of downsampling rate"
MassiveCore - Heavy Refactoring and Command improvements
"Added VincentySphere test of shapes, and refactored those test subclasses into inner classes."
[JBMICROCONT-5] - Use org.jboss.virtual for now. Refactored contexts such that a VFS context is just a normal context that has a root attribute. Finished implementations of jar and war strucuture deployments. Needs some tests for classpath generation.
NXP-11457: refactor Model to be more flexible assigning properties to fragments
Create unit tests for antibot refactoring
refactor BatchJob
XLCLOUD-1296 minor refactoring to cidr validator
"Issue #3 first stage of internal class refactoring, added a new class (WrappedElement) that takes care of dealing with the JsonElement (ie, the Gson class) instance."
ConfigRegistry refactor
major refactoring for cdh compatibility
"Oops!  Accidentally deactivated the ArgumentFactory, needed by the CleanedReadInjector, while refactoring last night."
refactored helper methods into helper class
"Refactoring : renaming easysoa to easysoa-proxy and easysoa/easysoa-proxy to easysoa-proxy/easysoa-proxy-core. Adding project GalaxyDemoTest in samples, renamed this project to easysoa-samples-smarttravel-test."
"added ExpressionBuilder and a text, refactored Calculable to Expression"
Refactored core integration tests to use HTMLUnit where possible
[JBWS-3550] refactoring JAXWS POJO invocation process to reuse AS7 component instances
refactored Apdu and ApduUtils to be able to use Apdu on android
refactor all report config merge
Refactored mapreduce classes and pulled them into their own files.
Refactor CollapseProperties and GlobalNamespace to avoid having to do retraversals of scopes when scanning for new global references. Instead take advantage of parent pointers and go directly to the nodes in question. Reduces the runtime of CollapseProperties 500-750ms in my tests. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47108208
Refactor to eliminate duplicate code between Loggers and Handlers
"added getVersionByNumber method to domain group, refactored mock coordinator in tests"
"Heavy refactoring on memento-save logic and code structure.  Optimized the number of created memento for the: check, opacity and alias layers properties. TODO: Implement on WS the new memento save operations.  	To complete the manage server functionality."
Merging report-api-refactoring to trunk [2696]:[4157]
Refactoring new locking classes
https://bugs.eclipse.org/bugs/show_bug.cgi?id=383849 - minor refactoring and cleanup and javadoc
refactoring
"Some refactoring that Mauricio and I worked through together.  Changed filters to extend from org.broadinstitute.sting.gatk.filters.ReadFilter rather than directly from net.sf.picard.filter.SamRecordFilter, which allows us to add an initialize(GATKEngine) method so that filters can do any initialization they'd like based on CL arguments, SAM headers, etc."
"Yet more refactoring, getting closer to new equilibrum... before adding long[] buffers"
#566 - Refactor internals - Initial tidy on OrmQueryDetail and OrmQueryDetailProperties - internals for fetch paths etc
[nobug] refactorings.
Refactoring Config API.
refactored layer Applicable to Interaction
refactored TimedEvent such that it is now an interface
massive refactoring of how icon decorations work
[ENG-85] Refactor position/security master
refactoring for better separation of core and ui code
slight cleanup/refactor.
Refactoring accessor and database manager classes
[BZ 948080] Add AutoRefresh capability to graphs other than portlet graphs. Refactored Auto refresh capability to be more generic so that it could be used for more than just portlets.
"fixes, refactor"
refactor for a more unified templating system and a single MailMessage api
Some light refactoring and more new contexts
"refactoring for better separation of concerns by creating the poorly named DependencyService interface and and factory, separating those from the Binding classes.  this is just phase one of further refactoring."
VNC server refactor - platform javadoc and junit stuff
Refactoring and design
Just some refactoring for choreography services (1)
engine: Refactored EndWithFailure()
Further API refactoring
Refactoring of wrappers done
Refactor entity.attribute mref --> one-to-many mapped by attribute.entity
Refactor DatasetView logic a bit:
rows[] backward compatibility and refactored codes for column binding related methods.
Expression Language Refactoring
More refactorings
Refactor AST type filter to class filters
refactoring to support other things than resolvable in settings page (to add user/role configuration)
Refactored class naming to capture ui.binding system as a general PresentationModel framework; PresentationModel and FieldModel are the key API elements now
"JC-1428 Initial version after refactoring, unit tests commented"
Enabling $ {} url injection; some refactoring
Refactor Op names
Refactoring and split learning objective into two layers (lesson and challenge) for import only
[stacktraces] LogListener refactoring
[#issue/18] Refactor hydratation code
refactor: extract methods for checking permissions and saving state
SC#QCADOO-282 qcadooView: minor naming refactor around row style resolver
Refactored the structure of the classify package.
1. Added acceptance tests to verify that access to loan products functions is restricted to administrators. 2. Refactored acceptance tests to eliminate code duplication 3. Started localizing text in loan products pages.
Refactored IStreamAwareScopeHandler and implemented SingleItemSubscriberStream.
"java refactoring, html, css, js cleanup"
REfactoring export/import junit test passes again
cleanup and refactoring - stage5
Refactor InspectionResultProcessor
refactoring of CrsSelectionPanel (now more customisable)
api_refactor: ip address apis refactoring
"Removed ThrowableDataPoint class as, in light of recent ThrowableProxy refactoring, it  had become an empty shell around StackTraceElementProxy."
Refactor class ShowsShow to ShowsAddShow
"Issue 695: Refactored domain package: created packages: virtualmachine,hardware,software,network"
Refactored expectation handling code in HttpAsyncServiceHandler; refactored exception handling code in HttpAsyncServiceHandler and HttpAsyncClientProtocolHandler
[Archi4] Refactor and simplify ArchiMate Editor Palette
refactor
Refactors TxState to hold temporary state instead of writing to PersistenceManager.
Changes made: 1. Created a new TextEditorComposite to be used in place of standard Text widgets in the UI where direct modifications of the model were being made. This composite wraps around a Text widget and provides a buffered notification mechanism to reduce the number of notifications recieved when typing text. 2. Modified all Sheets that use Text widgets for direct modification of the model to use the new composite above. 3. Refactored the ExternalizedTextComposite to ExternalizedTextEditorComposite
refactoring osgi http service tests
Initial basic ruby debugger implementation. Preferecne ids refactoring. Adding DeployerHelper class.
#910 - SQL Server update - refactor rename platform to SqlServerPlatform
Controller refactoring
refactoring the language selection to accept all possible languages supported on iphone.
 ItEr29S06CUAsignacionGrupoRecursosAPlanificacionItEr28S06: [Refactoring] Embebed WorkerSearch form into ResourceAllocation form as accordeon panel
Refactor dump/restore methods from Dialect into separate interface.
Added new tests and minor refactors to make sure everything compiles
Reorganized responsibilities for services. Tests refactored accordingly. Some are still failing.
Major refactoring of PNT sensoring
Refactor SuperColumnQuery to the API package
Last piece of refactoring wrt #110
"Refactor of Frame class, working tests"
refactored JMS to follow spec. 
dcm4che/dcm4chee-arc-light#837 :  Refactor dcm4che-tool-dcmdir: import records from CSV file into DICOMDIR
minor refactorings and cleanup+format
Completed refactoring for next level of multi-layer per dataset work.
Refactoring of Java CG related functionality
Minor refactoring of hb ui bot test EditPersistenceXMLTest
Refactor common parts of FIFORevQueue into new base class
Continued on refactoring history and UI
refactoring
refactor the jaxrs helper code so it can be used with resteasy or cxf
Refactor the packages of sonar-core
Refactoring: package extracted
Refactor package names
Refactor IncomingMessageSessionImpl.moved from com.dreamoval.motech.model.dao.imp to com.dreamoval.motech.imp
public pathToString() function refactoring in getForeignResources()
test refactor to fix all error and warning issues
Refactoring: removed UICallback dependency to obsolete JavaScriptResponseWriter
refactored examples
refactor: rename BloombergDataProvider to AbstractBloombergDataProvider as is abstract class and clean up method to get result element
Refactor IOUtils and URLUtils into StudioUtils
 Removed unused and refactored
Refactor #669 test slightly
"2.10.3-git-42: small refactor to move some private constants to public at MarkupParser and WikiRenderer, so they can be reused throughout the code and custom extensions."
refactored pa updating
drawingVector -> filterVector names refactoring
refactor and add override notations
refactoring BuildStep so that it can be used for other project types. This is so far done in a way that maintains the binary/source compatibility with old plugins.
"licenses, refactorings, jaxrs, importRoutines on package"
WFLY-1685 :  Fixing bug by setting the TCCL to the domain management module classloader which enables the JDK's LDAP Jndi code to access JBoss SSLSocket Factory  Integrating refactoring of security integration tests.  Using JUnit @Before / @After to ensure that the configuration is correctly cleaned.  Simplifying the test code.
Refactored ConsoleApplication to extract common methods.
Some refactoring + picking up the latest WSS4J change
EST-1422: refactors TaskRepository queries to leverage JDOQL; adds in next/previous mixins
Complete fixes after refactoring
I refactored the shader architecture and finally have a good implementation of the cell shader example.
Big Java 8-style refactoring
Just refactoring into utils/baq directory
refactoring
osgi: refactor DefaultServletRouter
"+ changed logic: properties are first read from database, if null always from idegaweb.pxml. properties are always stored (and removed from) database that is the idegaweb.pxml file remains unchanged (represents the factory settings). + moved business of reading the idegaweb.pxml file from ICApplicationBindingBusiness to this class. + added some special get methods that are called before the database is available + some refactoring"
refactor token package add disable of token handler plugin.
"Refactorings, prepared for imports, filter on prefixToken."
merge into refactorized classes: empty mosaic work
"Refactored internal APIs, unmodifyable are really unmodifiable"
refactor
refactoring.
refactor the test to make it easier to reuse created outages
refactoring class and package names
"Refactorings to resolve bug #342677 (Removal of ConfigurationReader), test suite performance improvments"
Refactored new classes and interfaces to handle themes into the new robocode.ui.editor.theme package.
temp commit to get on with refactoring
refactoring iteration...
CLApp now stores the pid within the lock file;  refactored FileX to make working with file contents and locks easier and less likely to leak
refactored IHE WS producers
SRAMP-578 Fuse Fabric commands refactoring
Refactoring
Refactor.
wip - refactoring DeploymentsPresenter / DeploymentsView
refactoring annotations
refactoring update tasks
[streaming_api_integration] tests refactored; smk contract fetching from REST api added
injectory factory refactor
"refactoring, move test for #47 out of 'failing' as it now passes"
"Minor tweaks, bug fix and refactoring"
Refactored controller Added AbstractController
New file loading/loaded events. Minor refactoring for ControlStateEvent -> UGSEvent
TAJO-1670: Refactor client errors and exceptions.
Refactored some stuff for better names
Initial refactor commit. Swap out DSpaceConfig/ServiceConfig for Apache Commons Configuration
*InterpreterComboBlock related refactoring
Refactor tests
refactor
[PLAT-1515] Refactoring of analytics web code to remove Cometd
A bit of refactoring
refactor
refactor to allow dom-based-scripting
Refactored connection flow for better composition and readability
[MOD] Refactorings (Proc ? Jobs). XQJ tests fail with this commit.
More refactoring...
"refactor EntityCleanupLongevityTest so that (1) it checks explicitly that things have been cleaned up, (2) we have a unit test as well as a long-running test, and (3) the long-running test makes memory assertions; currently explicitly excuses certain leaks (which we want to patch soon)"
"re-enabled rules & syntax diagrams, more renaming and refactoring"
[MIFOS-3147] Added acceptance tests around the create Question Group functionality. Also refactored the QuestionnaireController to render the system error at the top of the page
move DiscoveryConfigFactory to dao package and refactor config diving out of discovery and into DiscoveryConfig
* TI refactoring and improvements * applied patch from bug 177533
SEAMCRON3: Refactoring package names
Refactored RESTHelper. No longer a public class.
Refactoring
Moved constraint model for infer type arguments refactoring
[SSM-188] Refactoring market data sources / factories / managers to avoid special treatment of live market data (Julian)
Plain editor and related bundle messages slightly refactored to make the JSP markup more concise and logical. Certain JavaScript hooks are broken; I'll need to work with Dirk to fix this.
refactoring - FeedingButtonsController
refactor: Move newQualifiedNameNode and newName methods back to NodeUtil but rename them and make them take an AbstractCompiler instead of a CodingConvention so that calls are still not too verbose. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=76367877
Changes to support transactional observers; new RI SPI class added; refactored observer method implicit objects.
refactored code
"api_refactor: move forgotten apis, uncomment and fix mappings"
"Fix for GLASSFISH-20255: CDI Injectees to be ignored also in EJB interceptor Fix for JERSEY-1825: CDI component provider refactored, added support for qualified injections"
Refactoring for the ZipExplorerPlugin class and its tests: * renamed getFileName in getFileNameFromZipURL which seems more explicit * marked the getFileNameFromZipURL protected as it's not meant to be public
"added default value exercise, refactoring"
#NAME?
STS-1389: reorganized refactoring actions into common refactoring menu and enabled common popup menu for that
Refactor
refactoring tests
#164: Refactored encryption handling
[MOD] Refactored further. Need to overlook some of the old methods again e.g. datareceived() in the manager.
"- Major refactoring of StructuredArray, which now supports the instantiation of StructuredArray subclasses via factories, but at the same time prevents any direct instantiation (via direct constructors)."
SB-617: Heavy refactoring of the strongbox-storage-* modules
Refactored NicProfile.java for readability.
Minor refactoring.
massive refactor of database DAOs and creation of test classes that must be fleshed out
Some cleanup after refactoring
Refactoring of Bees and Config
RF# QCADOO-280 Dicationary item disabling refactored - copy button removed and name input disabled
Minor test refactoring (move straggler object id tests under 'struct')
refactoring: more methods in Experiment interface
"Add FunctionResolver support, refactor the client"
"Refactored LoggerInitializationListener, fixed javadocs"
More refactorings to the parser structure.
Refactoring.  Documentation updates.
1) Use a cluster node selector during EJB receiver context selection in a cluster 2) Some refactoring to make the class names more logical
Refactoring.
refactor
"Refactored internals: introduced Core for internal operations, BehaviorMapping such that it is now more alike regular Activiti"
Refactoring
test refactoring
"new query services, refactoring for rest objects"
Refactored OSGi related ClassFinder/AnnotationDeployer change
refactored NodeTypeFilteringTreeColumnHtmlRenderer (removed ConditionalTCHR)
major refactoring - still some to do (tags database).
[NEW TYPE INFERENCE] Refactor Scopes to include a general Declaration
refactoring; eclipse plugin repackaging prior to building with maven;
PULSE-81: Refactor main method
"End of refactoring of CIMI model to convert collections Adjustment of existing collections Added collections converters with unit tests Add field ""ressourceURI"" Adjustment of existing serialization tests"
Implemented walk to TAP path impedances.  Refactored AbstractPathChoiceLogsumMatrixApplication and PathAlternativeListGenerationConfiguration to accept separate origin and destination centroid ID maps.
ImageCanvas refactor + rework of canvas helper
Refactor ProtocolCommand execution to use new ResultFactory class
Refactor: - Deleted some non-used classes - Supressed warnings
refactor BatchTest
Various code refactoring and clean up
Refactoring Controller MVC
"Separated tests, refactored tests, added meta, started tier price implementation"
SECOAUTH-222: refactor OAuth2ClientContextFilter to push responsibilities down the stack
api_refactor: refactor project apis
refactor test structure into multi module configuration
Refactor several methods using daysUntil method
#NAME?
Refactor Search to ease testing
Refactoring of connect() methods
bug fixes and code refactoring
Refactor VersionInfo to SynapseVersionInfo
Refactor GenericResourceAllocationTest
"Internal refactorings for ""Deep Insert"""
Refactor
"trying to introduce reststate, refactored httpwrapper to restclient"
#NAME?
fix issue #9 (add proposal::content was broken by entity refactoring) && move json entities into dedicated package
"massive package refactoring. Im going for a models framework where you can create your own general xxx model. E.g. right now we have the general graph model and I started a stub for the general document model. The first for graphs and the second for key-value-based documents. The idea is that different general models can be created for connecting different data sources to Gremlin. To express this, lots of refactoring. Also, im going to have the update the wiki documentation as the graph-example-1 and graph-example-2 files have been moved...anywho---gremlin is going through some major internal changes to be able to support future additions... please bear with this process."
"Refactoring of org.eclipse.ecf.ui and org.eclipse.ecf.presence.ui plugins to simplify, make only code available in public packages that should be exposed in API, fixed string externalization in these two API plugins."
Refactored test to use lambdas and abstract common code
refactored tasklist project into multi-modules and changed name of root directory
"Tons of refactoring, should solve most threading issues in the graphdb or UI."
"Refactored PointDistance interface out of PointDistanceShape implementation. The multiple bounding box kluge was removed in favor of a minX > maxX box, for which there is special code for in Rectangle."
* Prevent the default browser behavior for operation that trigger DOM synchronization on sender. * Create DOM operations equivalent to Tree operations. * Refactor TreeClientCallback to apply the DOM operations mapped to the received Tree operations.
Refactored the code
chimera: refactor PGET into abstract node
 - another major refactoring in the api (still fixing errors)
Added some tests for placeholder extraction. Refactored and organised the code a bit.
Initializr URL preference support and refactoring
Refactored join
Refactor components from ADDIS to the common package.
"refactoring the code to use a more general ""matcher/outputter"" pattern"
Refactored/renamed the nested integer array; cleaned up code a bit.
[refactoring] Rename RPCoordinates to ReactorProjectIdentities
Refactored Index classes.
 initial groupActivity commit: i)measurementData for group changes    ii)refactor of Activity pages to share common ancestor    iii)modify group display for MixedGroups    iv)fix WS test due to recent refactor    v)add groups ActivityView2 page for parallel dev of GroupActivity work.
Refactor + Split between bad and good samples
refactoring and implementation of proper (nearly) representation for claims about individuals
refactoring: renamed PlexusTestSetup in ComponentManagerTestSetup since it's independent of the container manager implementation used and we'll want to use our embedded container manager in XWikiComponentInitiliazer in the future.
fixes and refactorings to OkHttp support
Code clean and refactoring.
Mid-refactoring. Not sure how this code worked before...
merge tool refactoring - simplifying the relation between tool view and commands
"Adding scrubbing to AuditFilter.  Set to scrub cardNumber, cvv, and expirationDate.  Some minor refactoring in the filter() method"
Further service API refactoring
Refactored existing base classes for custom datatypes and added more - TRUNK-3499
Refactored SoftLayerUtils to ProductPackagePredicates
removed unused classes. refactored the way serializer are chosen. refactored registry classes. added deserialization integration test
"REFACTOR: moved doRediction() logic into method which can be overridden, enable specific Replays to customize redirect URLs. Added ArchivalURL implementation which forwards datespec flags with the redirected URLs"
refactored query fetch file structure added test classes for fetching queries improved catching of virtuoso sparql compilation errors
Refactored mock objects in UI tests
Refactor IgnitedAsyncTask to be able to forward callbacks to handler classes.
#9 Refactor ForthIDE
[refactor] extracted common dynamic value
Refactor to clarify NetworkLinkerLibrary method and variable names. Update and clarify comments.
ComponentModel for JMS - needs a lot of refactoring
Refactored Scope.children
refactor codes about general module name context.
refactoring testutis -> testutil
97215 [refactoring] Pull Up creates error when not deleting method and enable @Override errors
wicket converter refactor
"Refactor impl package, cont2"
"Refactored Envelope to cope with any number of dimensions, in preparation for refactoring the RTree to be n-dimensional, and added some basic Envelope tests"
"Atlas-standalone: Lots of interface refactoring.  Took out sql from the interface, still need to implement some DAO methods to fetch all required data.  Changed ArrayExpressSearchService from a singleton pattern to a context-stored variable and added support to implement this in other cases if required.  Might need to add plotter to the same pattern, but at the mo I've got no good data to test this on.  Need to run a big index/netcdf build now to debug everything else.  Also, lots of general cleanup, removed a couple of unused classes.  Migrated package names for new loader/index/netcdf components to the agreed versions.  Getting there slowly, I think."
"refactorings to graph framework (GraphContext, GraphOp)"
"Document model classes, small refactors"
Refactoring InputState to generic state holder for inputs and outputs.
Extended and refactored store module
"Refactored GitHub test, added examples for Facebook and Twitter"
OPEN - issue ROO-754: Refactor Roo project and addon-maven code to add build plugins via an addon's dependencies.xml  http://jira.springframework.org/browse/ROO-754
[KARAF-3051] Refactoring of Cellar config module (commands/MBean) to use the Karaf 3.x syntax.
Another refactor of systests/transports to make the https tests more manageable
refactor(spring): renaming packages and classes
CLOUDSTACK-8814 - Refactoring the configuration of Routers and VPC routers nics
[CXF-5513] Some refactorings
"[ENG-193, ENG-194, ENG-195, ENG-196, ENG-197] Bringing Excel into line with the new View changes, REST changes and other refactoring. Quite a few improvements."
refactored all the mapping service related classes
refs #116 - refactored
Graphics: Refactoring of method names.
Refactored
Refactored Transform.and() to Transform.then()
"Some refactoring in advance of re-working automatic instance management. Also, I need to know which instance in the cluster is the leader."
annotation refactored
ACT-293 Refactor variable map
XWIKI-3489: Review the justify plugin * Added a generic BlockStyleExecutable to apply style properties to block-level elements touched by the current selection * Added a cleaning filter to remove empty attributes * Refactored StyleExecutable and FormaBlockExecutable
Refactored the mapper resolvers into a common resolver. Added PreparedStatementCallback but not supported yet.
Refactorization of parsing tests.
Refactored to clean up code
[refactored] unclear package and class naming for node painting classes
Refactored and streamlined the listener architecture. Did some more work on the model. Integrated UMLGraph into the Javadoc reporting.
refactoring
Refactor the ExprEditComposite's behavior.
OpenShift tests packages refactoring
"renamed ItiServiceInfo into WsTransactionConfiguration, refactored related stuff"
Cosmetic refactor
refactored and renamed methods
initial index refactoring
Swagr code-gen: Refactoring method names in mapper and generator interfaces
"validator refactoring, much cleaner now"
refactoring http module class another charsetencoder bug fix
Added test with complex non-interrupting behavior. That caused some refactorings to improve the logic.
Refactor some of the api classes after learing a bit about some clean code concepts.  Still a little more work to do in this regard but a good start.
refactoring/cleanup of ValueAttribute after fixing #109
Refactored page/read cache implementation to allow for cache pluggability.
Refactored Base64 and some SSL helpers into fathomdb-crypto
refactor SliceArray to extend BaseShapedArray
Big refactoring based on feedback.
Refactor a bit into the Sakai Util for LTI.
SB-617: Heavy refactoring of the strongbox-storage-* modules SB-450: Introduce the concept of a StorageProvider SB-451: Introduce the concept of a RepositoryLayoutProvider SB-628: Introduce the concept of a RepositoryProvider
Refactored Imageops package to resemble the hierarchy of the menus in the gui.
Refactoring the examples
Bug #1433: Small code refactor of this bug fix.
[PAXWEB-580] - Refactor itests / itests-karaf / itests-load
Refactor QuatSymmetryParameters to have only symmetry params
minor refactorings
"Refactor security demo, move logout button to nav menu, add descriptive javadocs."
Refactor symbol visitors
refactoring
"package refactor, corrected order of args for MockPentoStore"
Refactor + started on parsing up the Object Definitions
Refactor overlay draw/fill code
Completely refactor maven configuration
Refactor Expr.LengthOf into Expr.UnOp #502
Refactor WindowCache to allow dynamic changes in configuration
Small refactor in imageops. Created some packagesm grouped stuff together.
finished stop condition refactoring
minor refactor of the exception handling being in the base class
Continuing refactoring
Refactoring of rotation code in PyriamidBlock
Started work on #130 . Refactored mixins storage and variables should be working.
Refactor AssignmentPanel to make it easier to work with.
Starting to refactor horizon code
Refactored measures tests using abstract super-test
Refactor out RepositorySource
le début du grand refactoring des overlays... (refs #458)
refactor GAV to ReleaseId
Ongoing GPF refactoring - OperatorSpi now returns new OperatorDescriptor (so that we later can have registered Graph and Python operators).
NXP-7102 - using jackson as json lib - refactored code
add JavaDoc and a bit refactoring.
ISIS-550: refactored DomainObjectInvocationHandler and ImperativeFacets
First step towards refactoring (change ToolbarGroupDockStation into ToolbarDockStation and vice versa)
ICE-6997 - Code cleanup. Refactored DT string constant location and improved usage of global HTML string constants.
Refactor to allow file-based instrumentation command line entry point
[refactor]: extract create parser method
#NAME?
fixed bugs in HttpServer and build.xml also refactored Resources for better support of fitnesse tests
"insertion wizard refactoring, analysisRecord display, and measurement panel for unknown file type"
refactoring
Refactoring
Refactor the interaction between EventTapWriter and BatchProcessor
"Lots of refactoring because now a node can have multiple running configuration at the same time Changed the capability matcher so it works now ... As it looks for the moment, everything looks good"
first refactoring of UAC: ImageResource
Refactoring out the DFA panel to make it easier to embed
Refactorings of message services and payload classes for the sending
"Refactoring, 2D structure cleanup & colormap cleanup"
Code refactor
refactored base vcloud test class to work when parameters aren't supplied
"refactor(option, jsp, thymeleaf): refactor property to option"
Refactored getGame() to getEngine()
WIP class and tag refactor
source module search by short name refactored
PLANNER-352 Prepare for field annotations: refactor PropertyAccessor to extend AnnotatedElement
layer API refactorings
Getting started content: refactor in preparation to add support 'ReferenceApp' content type.
Major refactoring
refactoring: renamed test case class
Refactoring and NearbyPlaces migrationg to MVC
TIKA-1558. Refactor Parser blacklisting.
merged changelog-refactoring branch
reporter refactoring : rename methods with more meaningful names
Refactoring addons to generate annotations and addon jars
unit tests and refactoring. Xslt writer can be used on the commandline.
 ItEr28S11AltaEtiquetasTipoEtiquetaItEr27S11: [Refactoring] Create and assign labels now are separated methods
refactored some redundant stuff from Downloader and Converter to new superclass
Refactorings in configuration service and project setting management
"fragments + tests: new popupPanel fragment, tests refactored"
[CXF-2836]:Refactor code and fix the build
Refactoring
Refactored the course search (again) and added the correct jsonsourcet to the list controller
refactor and add sound feature
Refactored partition impl.
reattach refactor and improvements in the FilePageStore
Some minor refactoring
refactoring Querydsl to new Type model
* Refactoring structure in to modules (mostly to speed up incremental builds)
Refactored tests fo work properly with Java 8
Refactored Complex (and all uses). Added RationalComplex. Added removeOuterParenthesis to Utils. Renamed Parser to ExpressionParser. Added Parser interface. All parsers now include .parse method. Changes to NodeUnit (still beta). Added ConversionOperator base class. Added Convert operator (in beta). Added ConversionEngine exportToXMl(). Added SubUnit.getUniqueAliases(). Added UnitGroup.toXML(). Added units.xml.
minor refactor to make OverlayTranslator into a DisplayHarmonizer (and renamed OverlayHarmonizer)
refactor
refactored Querydsl Collections from AbstractIterable based evaluation to singleton QueryEngine based query evaluation
refactor
"Refactoring, include the swing listener with the main frame, like the official documentation guidelines (http://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html)"
"[NGRINDER-26] Migrate and develop user management module  fix some problem:     in user tree, id is like ""ADMIN"", not ""A"".     In user detail added user id. refactored some duplicated code."
"Refactoring classe EmployeAdministration, ajout methode verifierTeleTravail"
"UHM-1017: Dossier ID should be larger on the patient chart label Refactored into a separate ""Paper Record"" label and ""Paper Form"" label"
Package refactoring.
#NAME?
New Feature: Refactered project view interfaces to work with more than two MGP backends. Added new IST-ID project viewer role and corresponding interfaces. Also refactored code to work with project id's as strings.
[MOD] value equality refactorings
Refactor EntityMetaDataRepositoryFactory to EntityTypeRepositoryFactory
Refactoring
Refactored codes for DesignVisitor. Fixed typo in messages.properties.
refactoring project part 4:
Refactor of the STS core
small refactor of tests for cleanliness
#NAME?
"start adding isolation level support to sqlobject api. refactor packages for internal classes, deprecate some external stuff which was in wrong package"
HBASE-10324 refactor deferred-log-flush/Durability related interface/code/naming to align with changed semantic of the new write thread model
"Somewhat at a dead end, we need to refactor the DuplicationAnnotationBuilder."
refactored academic service request events code to better reflect inheritance
Refactoring solr + gazetteer integration still.
Refactor loading/saving code into fromDBObject and toDBObject methods so that we can make recursive calls.
[MOD] XQuery: additional refactorings and unifications.
"huge refactoring. separating each runner into it's specific class, preparating for purge command"
refactoring code
FIX refactor one-to-many to prevent required xref being set to null
Mujir | #953 | writing only failed validation errors to errorfile. No need for clients to explicityly saveErrors after migration. mRefactored to use CSVFile within migrator.
More api refactor - build api response is execute() method instead of getResponse method.
Refactored to use MassiveCraftCore.
refactor
refactored talend->apache
#NAME?
436345  Refactor AbstractSession to minimize burden on subclasses to implement behaviour
EST-417: refactoring fixture orders
Refactors RTCP termination.
Updated plugin archetype and some refactoring
Refactor DicomOutputStream
Add Encoder and refactor false negative tests
CMTC-15 : Exception's name refactoring
Refactored tests to conform with the new plugin name
refactoring
#NAME?
Updated maven to use hadoop cdh 4.3.0 and refactored the common parameters
refactor
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
some refactoring
Refactoring of model resolving
"some javadocs and other comments, some minor refactoring, change delimiter to ';' for the sortable key"
Corrected addChildren() and refactored ViewFetcher
core: validations from LabelNicCommand refactored out to HostInterfaceValidator
refactored package name to 'oak'
Refactor API to use a single service and introduce a Version interface
GUI refactors
refactory
"change close() method so it returns a model that documents anything that a Sink might do,  do necessary refactoring,  but demolish any classes that would have needed refactoring that are not in active use"
#NAME?
ACT-741 refactoring persistence
general refactoring of the examples and the test
Refactoring of tests after project reorganization.
WyIL: Refactored Assert / Assume bytecodes.
- more refactoring of persistence - TrueZIP updated to 7.4.1 (to allow >4GB archives)
even more refactoring
Refactoring: moved method to superclass.
Refactor: Removed domain slots containing id internals.
Refactored how the socket is read and the result handled. Fixed how unit-tests mock result readings. Fixes issue #5
Refactor to get rid of weird braces.  Also extracted a couple of methods to avoid duplciate code and to make stuff more readable.
forgot to refactor tests
Refactoring how tokens are encrypted in the STS
refactor some things in prepration for a complete change in API in 0.7
Java backend: minor refactorings for more readable code
Refactored package structure and made some getValue() methods generic
Metamer: rich:message: tests refactoring
fixing test issues after refactoring
refactor code for better reuse
"#JC-114 Refactored section breadcrumbs, section controller tests"
Refactoring of clustering tests - using getnodename from util class + changed some comments
Refactoring : Make a sca importer api free of Nuxeo dependencies
Refactoring InjectionNode Building
some package refactoring
refactor the package
"Fixed ConcurrentModificationException, +refactoring for BindableListWrapper"
DDF-1869: Refactor the FilterDelegate and all classes extending it
"SVNAdminArea17:  - writeEntry() (private implementation) is finished.  - added insertActualNode(), insertBaseNode(), insertWorkingNode()    SVNAdminArea16, SVNAdminUtil:  - refactoring: moved serializeFileExternalData from SVNAdminArea16     to SVNAdminUtil.     SVNWorkingCopyDB17:  - added addLock() method,   - moved SVNDbTableField[] constants to SVNSqlJetUtil.   SVNAbstractDbStrategy:  - added runUpdate() method."
Refactor: Move indexing-related classes to a new package
refactoring
refactorign - simplifying WS deployment model
"More refactor, and add JUnit test"
Refactoring out an abstraction over the DB
refactorings
Refactor location of files for more logical location.  report models are in the report package.  General coverage classes are in the model package.
project structure refactor with maven build files
Refactor implementation to be easier to read
More small refactorings of Mutect2 code
Refactor Channel <-> EmbeddedCacheManager dependency.
Refactorings to support resources as first class objects. Resources now have a field called isPartitioningResource to indicate if a Resource is also the Partition Dimension
refactor ChunkMesh
Refactored
Refactoring
Refactored names
Refactored SummaryReport to make it more readable and testable.
- Refactored test names in pact-common/../type/base
EHO-62 refactoring the timesheetService to have a more granular interface
Refactoring
Refactoring. Moved unnecessary classes to obsolete.
JBRULES-708 MVEL Integration -Refactoring the api to allow pluggeable implementations for return value and predicate
More refactor work on Output class hierarchy
Finished refactoring for CRAFTERCMS-1854 and fixed unit tests (integration tests still pending).
Refactor the ABTestServiceImpl
Refactor and add more list helpers to SmartStringBuilder
Refactoring changes from code review
WIP:  Refactoring
refactor and start to add support for classes as well as interfaces
more refactorings before initiating the testing phase
"* XWIKI-411 (Define checkstyle rules and define an associated build strategy). Improved checkstyle rules. * Applied defined checkstyle rules on the Zip Explorer plugin, leading to some refactoring, including removing all Vector references (replaced by List). Hopefully this shouldn't affect existing scripts. * Fixed bug in Zip Explorere plugin found by Checkstyle (checkstyle forced me to refactor the downloadAttachment method because there were too many return statements. Thus I've created a isValidZipURL() method and thus I've added a unit test for it showing the bug). The bug was that ""http://server/xwiki/bin/download/Main/Document"" was considered a valid ZIP URL... Note: There's no JIRA issue for the creation of the Zip Explorer plugin and thus I couldn't refer it from this comment."
refactor
"Pool Caller improvements: a) New non-standard private annotation Heteroplasmy which measures mean heteroplasmy (pool AF) across called samples, meant for easier mtDNA calling. Pure homoplasmic variants (pool AF = 1 or 0) would have heteroplasmy=1. b) Don't output pool genotypes by default for large pool sizes because it makes file sizes explode and they're unreadable. c) Refactored classes ExactACCounts and ExactACSet and moved to superclass AlleleFrequencyCalculationModel because both Pool and Exact AF calculation models will use it. d) Initial refactorings and skeleton for linearized multi-allelic exact model (not done yet). e) Unit test for Pool AF calculation model."
Package refactorings and class renamings. #55
Refactored recording and added context level override in the same style as the file name generator. Created interface for all Recording listeners. Updated stats collection in RTMPMinaTransport.
"Refactoring : renaming packages, classes and composites"
Refactor para eliminar paquetes
refactored reflections into new namespace org.jboss.errai.reflections
Refactoring MongoDBDriftServer to use new Mapper class
Updating variables' names. Minor refactor
refactoring work
Refactor: New phd interface now available in the teacher portal.
Minor fixes and refactoring
"Added an implementation for banded weight fulfillment pricing, refactored existing banded price fufillment to also handle banded weight"
Refactoring of APIs related to runtime.
Refactor Access level logic.
refactoring: use spring for dependencies in dialogs
Significant refactoring of the unit tests.
"refactoring frontend, backend, oodm"
refactor credential handling
Config is refactored
[PLAT-2889] Refactored blotter test
Packet Refactor
[OPEN-HUDSON-6705] UCM : Implement SCM new polling logic to support rebases better A bit of refactoring + refining some edge cases (no load rule)
"TEIID-164 TEIID-374 refactored connector metadata, removed collection setters from connector api, moved pooling and identity knowlege onto base connector api"
Refactored packages
"refactor session service for already authenticated users, and anonymous users"
broad base refactoring to create a different object handler that does code generation
"refactoring in operation parsing states (removed unneccessary OperationState, added basic OutputRedirectionState"
Refactored ConcreteConversationTest to consolidate adding a Participant to a Conversation expectations
https://bugs.eclipse.org/bugs/show_bug.cgi?id=355673 - more refactoring for AddFeature; added a DefaultDialogComposite class for popup property editing after DND; added hooks for invoking same after an AddFeature or CreateFeature completes
Refactoring of namespace and update for Newest bukkit commit.
Refactoring to support view subclasses
Working on service refactoring.
Refactored OSM Importer.
"PDI-11308 - Adding ShimDependentJobEntry, refactoring HadoopConfigurationBootstrap to initialize the HadoopConfigurationProvider on demand instead of as a lifecycle event"
* Increased code coverage of PropertyBindingSupport to 100% * Refactored class to reduce NPath and cyclic complexity * Split up test files to reduce number of methods warning * Suppressed filename check for test classes
Refactoring going on
"refactored processCommitsQueue(), extracting private methods to handle sub processes"
"major refactoring and cleanup; more objects, pass alarm data"
refactoring: proper split Client/Server Interfaces
refactor and test Multiplications
r:panel fragment refactored
refactoring email subject to use ftl template
refactor
refactor
"Some cleanup, refactoring of EssentialsHelp class"
jetty-9 used enums instead of cached strings.  Refactor of parser in progress to IO independent style.  passes 1 test
refactor RollColor to Feature class.
"[SHRINKRES-114] Refactor ResolveStageWithVersion support to truly act as an extension ""stage""; end-user should be using MavenVersionRangeResult directly, not VersionRangeResult<MavenCoordinate>"
Port refactoring
REFACTOR: Changed naming of service methods to getXXYYZZ for Coworker
StringTokenizerTest refactor (#1611)
SONARDOTNT-274 Refactor the DotNetResourceBridge API
gluster: Refactored GlusterTaskSyncJob
minor refactoring and formatting adjustments
Some refactoring in preparation of adding test for CF boot packaging
Refactor test.
re-refactor alarm filters and test to ensure the alarms page still works
"Refactor, yo"
code tidy before refactoring
Refactored code to use new method signatures
Styled tree item refactoring - moved to jface plugin (fixes #687)
Feature #4150 : user connection attempts before blocking user account - refactoring some code - adding user connection attempt verifier - saving the last date of successful user connection
More refactorings towards a nicer GUI architecture.
Refactoring for readability
"minor naming refactor, change of protocol to support, auth modality at connect."
LineParser now supports curly brackets. It have also been refactored caused by increase of complexity
refactor with goal to remove testutils from reporting
The big refactoring
refactoring like a boss
Fix for bug#54324 Refactor: Invoke rename refactoring from editor
Refactor CellStub
Improved object mapping API and did some major refactoring
"better interpolation interface, refactored old methods"
Refactoring; add CDI extension.
FIRST Refactoring to have in Layer Module a Solid Gin configuration. DONE : Gin Configuration for LayerTreeWidget. TODO : Add Gin Configuration to manage Dynamic Menu on LayerTreeWidget. TODO : Think a way to customize the code for DnD
OrderAgreement removed. Tests for Report PDFs don't need a started database any more. Major refactorings with the introduction of ReportDto
[misc] Refactored tests
AbstractCommandLineRunner: Refactor to allow for save/restore implementation.
refactor and cleaned up bobo core classes
"Refactored method in viewcontroller, added defaultButton"
Refactored to support SPI API
Moved Refactoring UI into ltk.ui plug-in
"Rollbacks for deployments, refactorings."
Refactoring: package addressen => contact. AddressXX => ContactXX.
Refactor the trusted orgs page so it works with the controller-service-dao pattern we are using in API 2.0
package refactoring controller
Refactor addInterfaces method.  Next comes the reordering of operations.
60542: Externalize Strings Wizard: proposes lowercase messages.properties [nls] [refactoring]
ItEr60S04ValidacionEProbasFuncionaisItEr59S04: Refactor.
 ItEr37S15CUAltaTipoParteDeTraballoItEr36S17 : Refactoring of the valueobject package name.
Cleanup test failures after application services refactoring.
general refactoring and addition of the class ImplementationMap
NMS-8140: VmwareTopologyProvider code cleanup and refactoring
Minor refactoring
[CXF-5652]: refactored system properties in own method
More cleanup and refactoring to reduce the number of places we directly use OSGi
"SC#QCADOO-206 I've made entity to hold multiple files, separated by comas, in the fileName field. There was no need to refactor old reports or anything. I've also updated the api a little bit, so that method that prints the report takes optional argument that specifies report number."
refactor highthroughput test
Started refactoring base package functions structure in preparation for more complete support of generics
F-1 Refactoring des packages de test
"Refactoring code for ted8168. In chart, if category series isn't set grouping, the value series just allow set running aggregates. But for flash chart, it isn't category series, it only has value series, so flash chart should can use running and summary aggregates. Doing code refactor for this case, checking if expression of category series is null, if it is null it will allow to use running and summary aggregates."
Refactor the cluster info interface.
Refactoring to use of MassiveCore
refactored rexster initialization and configuration so that it will run in tomcat properly.
Refactored code out of XeroClient into the endpoints
DDF-2644 Refactored Patch endpoint and fixed date parsing
#NAME?
"Update frizzle to get contains, and implement find, along with a little refactoring."
2008-06-24.1 Fix for filedescriptor leak Refactoring
"Refactor of package root ""net.sf.dozer*"" to ""org.dozer"". Added lib folder for plugin dependencies. "
o Refactored the MavenSettings code into the settings.mdo/Settings class.
Refactoring Responders
Refactoring IInterpreterManager.
IPluginContainer refactoring
Issue 189 about preparing the sub-query and TRAVERSE operator. First step done by refactoring SQL query to have a TARGET property as Iterable<OIdentifiable>. In this way any iterable can be the target where to execute the filtering (WHERE clause) and selecting fields (PROJECTIONS).
"chore(engine): refactor script parsing, compiling and execution"
refactor object mapper to operate on a map (fieldName -> fieldValue) instead of a list of fields
refactoring: renamed AbstractModelloGeneratorTest to AbstractModelloJavaGeneratorTest
[ARQ-694] Refactored data sets handling - introduced generic resources and cleaned up providers
Refactor bean providers to improve internal re-use
"Refactoring tests to be able to run test in 2 flavours default async and sync, adding api to check indexing activities, cleaning test a bit"
"Refactoring: moved the inputstream -> string method into StringUtils, modified DefaultWebRequestor and ClasspathWebRequestor accordingly."
194643 [change method signature] does not persist types with whitespaces correctly in Scriptable Refactoring
Refactoring of packages.
Refactoring registry notification system
Notify refactored (RF-11182)
Minor refactoring to provide the basis to loading extensions in the shared core.
"IOUtilties: Removed not throwed exception from method signature FeatureFactory: removed static methods, adding unit tests FullTextParser: minor cleanup"
"BSM-65: Seperate multiple packages to be able to pull them in karaf. Also refactor the TransactionAwareBeanProxyFactory to only use standard JDK Proxy-mechanisms, instead of aop or javaassist as that caused karaf class loader issues"
Refactoring to remove old Database Strategies and replace with new DatabaseAbstractionLayer - also started pulling in some static code anlysis reports
refactor progress indicator
"Sorry, had to refactor much of the source, the root directory didn't match our other projects"
PR: MNG-1003 Submitted by: Edwin Punzalan refactoring checkstyle report
67090 JDT UI breaks api rules by implementing SourceRange [refactoring]
Finished main refactoring for enabling the OSMImporter to run without the batch inserter.
Refactored failure messages in WaitConditions
XWIKI-14281: Refactor Data mojo based on Extension Manager
EHV-8: Refactored code a bit to take into account an additional method for adding CUSTOMERREPORTER role
Refactored
The great refactoring part 2
Refactored.
improving updates processing logic incl. eliminating redundant get-rows-for-deletion scan + some refactoring
"refactored per-problem launch mode: ui controls, internal structures, etc"
Refactored generator to be more readable and easily support changes for format.
refactor to nicer naming
Refactor identity manager implementation
refactor continuacao
first bite of logging refactoring: now logs are in line with standard Maven logging. log message string construction to address.
refactoring
"Refactored distribution package so that more general distributions can be represented and added Poisson distribution. 1) Added Distribution, AbstractDistribution 2) Added IntegerDistribution, AbstractIntegerDistribution 3) Added PoissonDistribution contributed by Fredrik Norin (PR #31688)"
Refactored Slim3 GWT.
Refactoring of some methods and completed FinalizeMapper
Implemented PathAlternativeListGenerationApplication.  Gave ShortestPath and related classes more descriptive names.  E.g. ShortestPathResultsContainer is now ModifiableShortestPathResultSet. Refactored Dijkstra strategies to take EdgeEvaluator and TraversalEvaluator instead of combined PathElementEvaluator.  Deleted additional experimental classes.
Feature #3110 : refactoring
image facets for gene page and controlAndExperiment partially refactored
refactor example code
Refactoring of Browser size workaround. Changed JavaDocProvider title.
ROO-3056: Post 1.2.1.RELEASE code refactor and clean up - refactor and cleanup
refactor
Refactored ConsultantController
[SHRINKDESC-87] Refactored queries to enum-based singletons. * Split implementation based on the type (absolute/relative). * Made RelateGetQuery thread-safe. * Refactored tests. * Introduced utility class TestTreeBuilder instead of extending   QueryTestCaseBase. * Fixed tests to use only Node operations.
Refactor websocket extensions to be transforms
refactoring to cards downloading and image path generation
Refactoring launchTask() method in GroomServer
Great refactoring: Introduced Stub classes for JaxbMappings
refactor
BorderLayout Refactoring
Refactoring - no functional change.
Refactor: Refactoring in modules
Refactor of dynamic middleware code
refactor to move session specific information in OClientConnection
Refactored DEFAULT and NULL handling in INSERT/UPDATE statements into its own class.
"Refactored ontology handling out of WorkbookManager to a new OntologyManager, as WorkbookManager was starting to encapsulate a lot of ontology related work that isn't related to Workbooks. OntologyManager now acts as a facade to OWLOntologyManager and the OntologyTermValidationManager. Removed usage of WorkbookManager in most key places it was no longer and replaced with OntologyManager"
Refactored context
STS-3248 Framework implementation and refactoring of standalone into separate plugin.
Bugfixes and more functions in PlaylistService; Implemented logger; Refactorded DummyData-Generator; Introduced some Exceptions;
"refactored problem marker handling (introduced interface and helper class, removed old stuff); validator extension point now requires ID of corresponding problem marker; BeansConfigValidator now  skips validation of beans created by namespace handler"
Refactored the security into a more CQRS based implementation
refactoring axes logic
"no functionality changed, just severely refactored for organization and maintainability"
-Big refactor here removing Bindings. They just aren't necessay and Declaration can assume there role. -Added InternalFactHandle which extends FactHandle and exposes id and recency -Made a BaseMannersTest which both reteoo and leaps can use.
DataManager refactoring
[MOD] XQuery: minor refactorings of function code
email notification refactored and new tests added and old tests updated
Changes to Plugin and ResourceType deletion - refactor PluginManagerBean.deletePlugins for scalability and perf by avoiding   an umbrella transaction and allowing for deferred resource removal. - refactor ResourceMetadataManagerBean.removeObsoleteTypes to utilize the same   approach as plugin deletion for type removal. - fix bug in ResourceManagerBean.uninventoryResources() that did not utilize   a new transaction for each resource uninventory. - Various perf enhancements.   - avoid unnecessary and timely authz checks when uninventory is being performed     by overlord/inventoryManager   - use overlord a little more efficiently in places (but still take into     consideration its session timeout limit). - Add a little defensive coding to AsyncResourceDeleteJob to log less if   the doomed resource has already been removed. This can happen when the quartz job   runs at the same time as a runtime plugin update that removes types.
"refactoring to add PaperRecord object, WIP"
refactor package structure
refactor TableTracker to use SnmpTableResult.. begin tests for SnmpTableResult
Add JavaDoc; refactor package structure.
OPENNLP-221 Refactored Name Finder cross validator to use Parameters
Small refactor of the CmpJpaConversion.  Uses updated Jaxb objects with KeyedCollections
#NAME?
Refactoring of classes and removal of unused class. LETS SORT THESE PACKAGES OUT
Refactoring of SBTree iterator
* moved Dimensionality into the top-most package * refactored abstract implementations from *Impl to   Abstract*
guice: refactor http and smile modules
Refactored matching to use libtv implementation
Refactor TokenServices tests so JWT fits in better
refactoring org.roller.model.Template to org.roller.pojos.Template
some refactoring/cleanup
Refactored BuilderHelper into UnpackedLibHelper and ArtifactResolutionHelper.
Refactored CatalogItem to Product and SellableItem to Sku
MAHOUT-236: - removed output directory deletion from DirichletDriver.writeInitialState - added runClustering option to KmeansDriver and MeanShiftCanopyDriver - refactored methods from MeanShiftCanopyJob into MeanShiftCanopyDriver and removed job - adjusted TestKmeansClustering and TestMeanShift - adjusted synthetic control examples to employ ClusterDumper of outputs - adjusted TestClusterDumper and TestDCbwEvaluator for KMeans and MeanShift job api changes - decreased number of iterations in unit tests to improve performance - all tests run
Machine reviewed and refactored
Minor name refactoring
Refactoring. This also fixes one checkstyle issue.
Some more refactoring
"Addition of ContainerAbstraction interface, and associated refactoring"
Moved/refactored EntityInfoAggregator
HBASE-16018 Refactored the ReplicationPeers interface to clear up what some methods do and move away from a ZooKeeper-specific implementation.
Refactored code.
"MASSIVE bus refactoring. Bus now has a modular transport layer. All unit tests now passing. Some things still not done, however."
refactoring
refactored NearCacheLocalImmediateInvalidateTest so that it can be extended on enterprise
Refactored GATKDocs categories some more ( GSATDG-62 )
"Refactor ModuleProperties and MpiProperties, move common things to Abstract parent class. Leave only getters in MpiProperties."
CAMEL-7316: refactor camel-ws using the refactored camel-ahc
Refactoring extraction from robots.txt
Moving validations from the stores to the DefaultIdentityManager. Code refactoring for the stores.
refactored view to use generic interface; view panel is now base swing view
refactor the webshopcontroller
Linked resource support & refactoring
1) Refactor everylastlogin support to better integrate with Spring Security 2) Add plain old username + password login with versioned + salted password hash 3) TCC Study portal development
addMultiple refactoring and fixes
Fixing RSM post processing for Mahout queries. Refactoring channel discovery fallback to super class.
o Refactored code
Refactoring common TaskServiceSession methods into the TaskService
Refactored the navigation menu system: * Removed redundant interface NavCallbackInterface * Changed names from Callback to NavItem * All other necessary changes (to other classes) were applied
Refactor permission resolver to make unit testing easier.
Stabilisation GameRuntimeImpl apres gros refactoring. Envisager une notion de Subject.Id ?
refactor
Refactored NokiaMultipartMessage.
#NAME?
#POULPE-163 Refactoring for SectionPresenterTest
Refactoring: moved the 'CDebugUtils' class to the 'org.eclipse.cdt.debug.core' package - the methods of this class are mostly used in UI plugins.
Extending the refactoring to arrays and complex values.
"Refactor ActionCommands, it will be used to merge menu actions of JPopupMenu, JToolBar and JMenuBar."
naming refactoring
maven refactor 2
 Add bookkeeper client stats and refactor code  - Add bookkeeper client stats  - Refactor the current stats implementation
Refactoring the packages and adding some models
Drift SLSB Refactoring - DriftManagerBean -> JPADriftServerBean   - DriftManagerLocal -> JPADriftServerLocal   - DriftManagerRemote -> deleted - DriftServerBean -> DriftManagerBean   - DriftServerLocal -> DriftManagerLocal   - DriftServerRemote -> DriftManagerRemote - DriftServerPluginComponent -> JPADriftServerPluginComponent
Refactoring to simplify complexity of type resolution for properties
"IMPORTANT / Refactored localization design, work in progress"
Refactor from getDesign() to getModule() in handles.
RF-12900: org.richfaces.cdi.push refactored to org.richfaces.push.cdi
some refactoring in faceting and removed ehcache from project
Refactoring
Support for halt on error/failure in Eclipse runner plus refactorings and new tab for test cases
Refactoring of user system
FELIX-1457: refactor features management layer
refactor csvmapper
refactorings
#NAME?
refactor polyglot-based java code in its own projects
refactored test packages
Refactored to use shell-common
MODIFIED: refactoring steps. TODO: more of the kind.
Smoke tests: refactoring
Refactored
[215697] refactoring to allow better customization by adopters
#NAME?
"Refactorings: * Got rid of ComponentSuiteResolver, because the ComponentSuiteRegistry has to be filled in advance, anyway, and this is what the IDEA plugin now also does. Simplified ComponentSuiteRegistry accordingly. * Split XmlToJsonHandler used for all EXML parsing into two handlers, one for the metadata (ExmlToMetadataHandler) and one for the Ext-component-JSON (ExmlToJsonHandler). The metadata is needed to (re)build the XSD, the JSON is needed when generating the AS3 class. Opened API to generate a single class. * Removed some too exhaustive logging and a few souts."
"Created ListAnnotations utility (extends CommandLineProgram) 	--Refactored listAnnotations basic method out of VA into HelpUtils 	--HelpUtils.listAnnotations() is now called by both VA and the new ListAnnotations utility (lives in sting.tools) 	--This way we keep the VA --list option but we also offer a way to list annotations without a full valid VA command-line, which was a pain users continually complained about 	--We could get rid of the VA --list option altogether ...?"
eventing refactored
refactored client package name to something sensible
#1147 - Refactor move DbMigration internals into io.ebeaninternal - change to use DbMigration.create() - move PlatformDdl into internal
"Minor change: - corrected the name of the relations with inquiriy to inquiry - renamed the existing inquiries css file - replaced some hard coded text in the QUC jsp files with label from the resource files - added a new InquiryAnswer type - started to develop the teacher quc interaction, finished the 1st part-the visualization of the teacher and UC results - refactored some beans"
XWIKI-5120: Change link parameters without deleting the selection * Refactor image and link plugins to use the generic executable for inserting/updating images/anchors
detailed reporting refactor
SONAR-2501 refactor BeanGraph layer
ItEr58S14RecalculosConexionEscenariosItEr57S15: Refactor. Necessary DAOs are provided at constructor
resolves import/exprot isssue when Lucene index is present backports refactoring from develop
Refactoring BV
refactored messaging and authentication
Javadoc'ed FileProcessor. Refactored a little too.
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
"Huge refactoring for the issues: 226, 254"
Refactor ManualSync class.
Refactored overall structure to enable multi module maven build
Refactored report builders so that * There's an abstract base class for all builders * There's an abstract base class for cohort reports not based on a calculation * There's a decsriptor class for such cohort reports
assertion refactoring
refactor to make testing easier
Refactor to support configurable volunteer availability.
"Big refactoring of timelines to put the reusable generic code in a separate package. This commit has context menus and different timeline displays for each application, but no edit capability."
Some code refactoring.
"Refactorings to resolve bug #342677 (Streamline things a little bit, improvement of test suite performance)"
*Refactor region setters & getters
Camel test refactoring
refactor couldParkIfOneParkingLotHasAvailableParkingPoints
core: Refactoring in ImagesHandler
"Refactor editing, use flags to set parameters"
Koan10 refactorign in progress. Starting test-completed ruby script.
Updater (cmdline): refactor filter functions
[SHRINKDESC-15] Refactoring of Manifest Descriptors to fit into 1.2.0-X branch
#NAME?
Minor: refactored serializer by sharing common pieces of code
mockoperation dispatch improvements and related refactorings
#POULPE-120 refactored tests for ItemPresenter
"refactored cycle API, added RenderInfo to provide standard set of available views for plug-ins, changed the content-type definition by using a mixin interface to add extensibility to the set of standard content-types, refactored API according to these changes, adapted the UI/REST component accordingly"
o bunch of fixes to ITs caused by trying to refactor in IDEA   most things are working and I'm now waiting for apache infra to come back up so i can   deploy the new IT plugins.
Refactoring
"Changed naming, fixed bugs, added save/finish operation, started refactoring gui."
[MSC-180] Refactoring - no functional change. StartTask now extends ControllerTask.
#NAME?
StoreFactories renamed.
"ACT-347: introduced delegateExpression on serviceTask, taskListener and executionListener. Also refactores all Spring tests while I was at it."
"refactoring of Property and PropertyBuilder, added BeanUtils method to set a property using a Property instance"
refactoring: extract the computation of sort from KItem constructor to helper method
refactoring package structure
"Moved the RelaxedX509TrustManager into the common opennms-util project. Added a SocketUtils class that can wrap existing sockets in an SSL context. Refactored the HTTPS, LDAPS, and NRPE monitors and plugins to use SocketUtils."
ROO-301: Choose between data access patterns - refactoring of core layer support for more generic use
refactor the webshop controller
refactoring.
Refactoring so that we can use the structure to test the java integration in other tests.
Refactoring to simply version management
Global refactoring. Support LWJGL only.
refactors packages to included openphacts.validator
"Added ProxyProviderTest, refactory ProxyFactories by adding an abstract class."
Archives refactored to use reddeer approach
"WICKET-348, align with single choice refactor"
HV-546 Refactoring existing tests. Introducing a integration test helper to build custom provider jar as well as bundled hibernate validator jars.
https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring in progress. - VpeDnD initialization has been moved from VpeVisualDomBuilder to VpeController.
"refactor reinitializedModelTest, and add test for performance @rev gtorres@ @bug W-2063113@"
issue 384: refactoring of MachineUtils. NB: some tests have been disabled to finalize mock implementation later
119822 [refactoring] NPE in when switching to refactoring preview page
#NAME?
"Refactoring + logging refining + exception reduction If we can prevent a NPE by using a != null check earlier, we'll avoid generating a NPE object in the event that the object is null."
Embryo_Tracker: more refactoring in the main class
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
ISIS-107: minor refactor (no functional change) for quickstart example
refactored the name of the packages. New FieldController.
[TACHYON-1304] Refactor the method name
refactor base CDH Test out to test module
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
refactoring: improved javadocs for call interceptors
Refactoring the file name and change to individual customer. Now the basic service works fine
StatViewServlet refactor
"General refactoring and the inclusion of the SALT package: ""Streaming API for Logic Terms processing"""
refactoring: ByRule suffix dropped
"ACT-60 more refactoring configuration, persistence and test"
"Refactoring EasySOA Registry SCA importer, work in progress."
[refactor] rename
Refactoring Code - short and simple
small refactoring on RestxArchiveUnpacker (renamed to RestxArchive) : giving the jar file during instanciation and using Files.copy() instead of handling streams by hand
Refactor a bit
small refactoring
"[bugfix, refactor]refactored cleanup bug fixes"
"refactoring of queryBuilder, singleton spring component"
Code Refactoring and Bugfixing
refactor to lambda
minor refactoring
SONARJAVA-1314 - Refactoring of NullConstraint
Refactoring and moving around the new loader classes
Refactoring
Refactoring package name for inlined objenesis
refactored code
Refactor
extra refactoring
refactor
refactoring HighlightInterceptor. - remove the dependence to Runner. - remove the dependence to receiver class.
refactoring
Refactor
"refactor some, to prepare for the real loop checking"
"JBRULES-1625 Create Scheduler API with JDK implementation -Basic refactoring for for TimerService, instead of Scheduler"
"A second wave of refactor updates moving code from ""drift config"" to ""drift definition"" terminology. Fixes some unit test failures among other things. - renames class DriftConfigurationTest to DriftDefinitionTest"
All SPIs should now implement Weighted (just in case) and some more refactoring and documentation
small refactoring
Refactoring TestDriverBase and TestDriverContext
PLANNER-355 Refactor error message into the appropriate selector config class
refactor pa updater for better logging and less deadlock
refactor rename
Refactor to remove AuthenticateTask.
#POULPE-452 Done refactoring based on code review notices
ISIS-1559: moves new Party_invoicesTo mixin from invoice module to lease module (so will be able to refactor to have it return a list of InvoiceForLease)
"Plenty of goodies in this commit: * Support to upload files into announcement boards and sections directly.  * Attachments are now able to be displayed using semantic links, read content structure, and internally forwarded to dspace. * Refactored link generation code in order to removed old path processors that could be replaced. * Creation of the Public Relation Portal, default permissions are given to role(MANAGER) although everyone should then setup the portal with the correct permissions."
Refactor chart renderer
refactored cloudstack expect tests and added CloudStackComputeServiceAdapterExpectTest
[refactor]: extract createSerializer and createParser method
Refactoring of the code used to extract method parameter's value
refactor implementation for new attributes API
Various fixes and refactor of Cloud application operations
refactor thresholder to include a ThresholdsDao for thresholds.xml - reviewed by mhuot
Code refactoring.
end of a long refactoring run...
Refactor: remove map entity
Refactor some PhysDB methods to remove old naming from LWC 1.00. This should not affect any other plugins but if it does they are doing something they probably should not be doing :) (or doing it wrong)
XWIKI-4068: Allow the page to link to to be searched for or selected from the most recently edited pages * Added functional tests. Refactored image and link tests for improved readability.
refactor & remove unused code
Refactor DynRegExp to follow the spec
"implemented validating of EPCIS Masterdata, fixed potential nullpointer accesses, extracted and refactored several methods, added javadoc"
changes 11.06  - fixed stupid code in ExperimentXmlRetrieverThread  - refactoring
refactoring out an interface for decoder/encoder
refactor solver - model - resolver
"Four step in which the use of the GroupTable class through the OrganizationSchema single instance is replaced by the use of both GroupManager and GroupDao objects that are both managed by CDI. In this refactoring, the request for group identifiers are replaced directly by the one for groups themselves when those identifiers are used just to fetch the corresponding user groups! The ListSlice collection is now a SilverpeasList. The latter defines a new method to implement: newList() to build an empty list with the same properties than the current list; this method is now used as a generic way to get an empty SilverpeasList for items of another type in the making of a collector for the Java Stream API. Fix some stuffs in the core-web-test so that integration tests in core-web work fine with the refactoring that was operated in the admin code base."
B-59299 - Categories Refactoring
"Continuing refactor, added GetActivityCount to replace UnseenActivity... classes, and removed some redundant classes"
"Refactoring GetVncPortCommand, MaintainCommand and SetupCommand to cope with new design.    - Basic test added, but could not mock all the static stuff so the test is not complete yet.      Will look further into it."
"Refactoring to change references to bug collection ""timestamps"" to ""sequence numbers"".  Timestamp will revert to being the time the analysis was performed."
Minor refactorings
Refactored ConceptService to use the latest helper methods of triplestore.
Major config refactoring
MetadataLinkInfo - refactor / simplify the implementation
refactor date creation into ScmTestCase
RF-12900: refactored AjaxRendererUtils
"add a ProcessTool which lets commands be run locally with many of the same semantics as SshTool; also refactor SshTool hierarchy (and tests) to share more code, and generally be cleaner. also removes need for \\$ in SshCli."
#NAME?
"NXP-14246, NXP-14247: refactor ecm:fulltext search using ES simple_query_string, make it work almost like NXQL, no more need to list the fulltext field in the contribution, this also fix the sort on dc:title or other field."
Refactorings to make it easier to understand the code
Refactoring to gcode parser. It wasn't handling implicit gcode commands properly which caused non-code blocks to be ignored.
refactor and remove GlobalSettings.kem
massive refactoring. This is to match the code style of my other plugins which is producing more readable and maintainable code.
Fiji Build: refactor SubFake parsing
Continued LTI refactoring prep:
Refactored DatabaseAdapter sturcture
Refactored NodeInitializer to NodeExtension
[PLAT-966] Add Link class; Refactor weak id to bundle id for now
Refactored columnTag
refactoring and moving stuff
SearchResource renamed to LabelledContainer gc:EditMode refactoring Typeahead
refactor test class names
"Refactor, no functional change"
Refactored background stressors' configuration into separate classes
RESOLVED - issue JAVAMONEY-1: Eliminate BigMoney - Refactoring for JUnit https://java.net/jira/browse/JAVAMONEY-1
javadoc and name refactoring.
Minor refactoring
"refactoring ExitException handling so that JMeterGUIMojo can use it, still doesn't work..."
Refactoring of the ERS3UploadQueue and ERCloudFilesUploadQueue to share the same implementation and avoid accidental death of the queue thread
"[PLAT-3488] Refactored most of the implementation for HTS out of RedisSimulationSeriesSource into AbstractRedisHistoricalTimeSeriesSource, so that we can implement a NonVersionedHistoricalTimeSeriesSource."
Refactoring of empty header system. Manage null headerItem
Refactored packages to better reflect platform
Refactor sending error exceptions
further refactoring.. this time of NodeInfo
[ROP-6] Refactor cds pricing to a single function
Refactored OWSProvider into ExtendedResourceProvider implementations
#NAME?
Code Refactoring;
refactor new TimeseriesMetadata/TimeseriesFeed concept move timeseriesId to TimeseriesMetadata
Refactoring AST to mimic JDT.
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
1. refactor the code. 2. default write is write through.
"DDF-1729 Refactors platform-configuration-listener module  - Renamed files ending in Migrator to instead end in Migration.  - Split files into 4 separate base packaages (admin, migration, persistence, and status), with another sub package under persistence called felix."
Changed group id/package name. Refactoring.
[refactor]: use BeanUtils instead of PropertyInvoke
Swagr code-gen: Refactoring class names of classes used in code generation
Complete refactoring of the old Powers to be just Type and Values
"UPDATE: Added log4j properties, REFACTOR: Moved connection creation inside the Factory"
"refactor AbstractGeoDnsService to use a subscription, with some tests (more coming), and extend AbstractMembershipTrackingPolicy to allow a single point of overriding"
[refactor]: extract main page handler
"refactor move,rename trade metadata classes"
"DROOLS-239 InitialFact leaks into other patterns via inheritence -The RETE fix was leaking into PHREAK code areas. Refactored it to only be in RETE. -Also migrated Multithread test, that had sotty's original test. It still fails, need to find out why."
Some minor code refactoring in BufferingHttpClientHandler
refactor BatchJob
[#CAM-61] Refactored the base query dto class to reuse the setter reflection code when setting parameters from http query parameters or from json.
Major refactoring of different localization techniques to template method pattern
refactor the ndeps decorators and fix the tests
Built on Laura's code to port the strand bias filter from M1 and refactored code aroud SomaticGenotypingEngine. Added a new integration test.
refactoring of the regression framework
Refactoring
"stress, new features & refactoring"
Refactored The code
"refactor JBoss 7 support into seperate modules. This involves making the Vfs stuff for Reflections pluggable and discoverable as an ErraiApp.properties flag. Also, support for AS6 is now dropped."
o refactored spring spesific classes out of the core api
Name and package refactoring
Refactor: getChildren in GroupBMPBean changed to getChildrenIterator and a new method called getChildren with same code created and returns Collection
generalize the NLP module + fixes + refactor
refactorings and some more tests for mergers
"refactoring to move more JSP knowledge out of XML level (works not finished, but this is a start)."
Refactor BWT interface to require character biasing
Refactored: unified the processing of primary and secondary actors
refactor
"Refactoring tests for #171, as they are failing, and may not be fixed immediately"
Refactor GitHistoryPage.initAndStartRevWalk()
"Use common ComponentSelectionDialog.java in WSDLEditor (Setting Binding, PortType, Messsage, etc...).  Refactor ComponentSelectionDialog (and related classes)."
"Refactor dynamic options with a central registry, and make GobyDriver handle option parsing. This removes  duplication of code parsing for each mode that would need dynamic options. Moved error messages produced when parsing the command line of a mode to after usage. This is a simple change that will make user's life easier (how many times have I had to scroll back up to see the actual error message hidden above a lengthy usage text)."
ARQGRA-219: whole enricher code refactored
Refactored: extracted common code to InternalErrorReporter
refactor
"Refactored: pulled out JUnitRunListenerAdapter, make the class the top-level Description"
Refactored ClassCompiler. Moved code which compiles method bodies to MethodCompiler. Refactored AppCompiler. Moved code which links the excutable to Linker. Removed class loader functions. Class info is now generated as data. Only classes reachable from a set of root classes will be linked by default. Changed a lot of char* to const char*.
refactor to move stuff into wala.util
Refactor: Rely on xs and ys arrays in computing the Delaunay triangulation
Refactoring (parameterization)
refactoring: moved sourceEncoding from CpdReport and PmdReport to AbstractPmdReport
Refactoring with @Extension and @ExtensionPoint
Bug 308785 - refactor page to show references instead of components
Refactor DNDSupport_Test.java
Refactoring
Refactored to rely on DB metadata to detect the db type
Fixes #38: Refactor the MDX parser API
CAP-26 Refactoring admin controllers and views for annotation-based controller usage.  Also refactoring css includes and moving session initialization to an initialization service.
Style bits. Refactoring of VectorWritable subclasses per mailing list discussion. Standardize on Lucene 3.0 behavior.
"Add copyDirectory, and refactor copyFile bug 32944, from Ian Springer"
Refactor out charset
more tl1d refactoring
Publications search mechanisms & jsp refactoring
did some refactoring
refactored bean class related stuff into separate interface 'IBeanClassAware'
Refactored method name to make it more clear what the function does
ACT-60 switching back from activity instances to executions: fixing persistence and refactoring queries
refactoring in progress
Added snapshot command tests. Minor refactoring.
Kiran | #645 | Refactored Report framework to not load entity when there is no reference data definition.
Bug #8679 - fixing bad PDC classification technical behavior. - refactoring ContentInterface implementations in order to be fully CDI compliant - adding SilverLogger methods to handle exception which are ignored properly - improving PDC search UI - fixing a problem around security and SilverpeasFile (adding a new processor) - fixing ticker initialization problem - fixing the PDC search which were searching globally the contributions - fixing question container indexation (on creation) and cleaning it (the project) about SilverTrace and sonar feedback - fixing a wrong index data around comments - fixing sonar feedback
"Refactor PatientActionListener and PatientCreationListener, move common logic to abstract parent class."
Refactored RingBuffer common functionality. Added RingBufferLong.
refactor
MIFOS-4684: refactor validate cashflow and installments service facade for move to loan account service facade
Refactoring: Moved getSCCSFile/getRCSFile from Util-class to the correct HistoryParser
Refactor classes in com.semperos.screwdriver.build
Refactored unknown dictionary handling and split off dictionary building/compilation into a separate compile package.  Various additional related changes.
[JBMICROCONT-330] - Don't override metadata contexts if they already exist and only remove contexts we create. Additionally some refactoring see the forum thread attached to the JIRA issue.
further refactoring to unify POJO and bean
container and core refactorings
refactoring....
[JENKINS-21486] Refactoring
[CXF-5902] More refactoring to make it easier to provide a utility code for composite algorithms
Refactor (BREAKING CHANGE):: The following classes where renamed for the sake of the human race:  ColumnsGroup -> DJGroup;  ColumnsGroupVariable -> DJGroupVariable;  ColumnsGroupVariableOperation -> DJCalculation;  and some other classes you should not care...
Some more implementation and some refactorings regarding relationship type creation.
refactor the list of PoolFixtures into its own class and put the BasicPool into its own package
Refactored searcher and indexer to be generic. Implemented rest service to search and index hubs.
refactored code to enhance readabiliy
SYNCOPE-231 Refactored AuthenticationTestITCase
"more refactoring, spring fesl config corrections"
Refactoring
Refactoring: BitLargeArray -> LogicLargeArray.
Tag Tests Refactoring
Refactored providers to composite factories to support multiple parents.
refactored DocumentForwardIndexHttpServer and CountClueWarcRecords
EST-731: New lease now validates application tenancies correctly; refactor the tests on the fly
refactor factory
Refactoring no acesso aos serviços do sistema.
"refactored methods to use already loaded locationProfile, findConnectedProfile was being called excessively, now it is called the minimum amount of times required and results in faster loading of data"
refactored the code
Refactored the EvalVP into TemplateVP Added in the first of the expert items views
Refactor few tests
NXP-7102 - refactored automation client to use jackson json parser
NIXExporter: a bit of refactoring for readability
DDF-1547 - refactored cxf client factory to only take username/password in the ctor to simplfy the client accessors.
"OPENEJB-1056 add support for .uc, .lc and .cc for JNDI name formats. Refactored usages of Swizzle Stream StringTemplate class to use new util class instead"
Refactor and finished ABM-252
"MODE-2546,MODE-2569 Fixes several locking and concurrency issues The previous exclusive locking logic relied on ReentrantLock.hasQueuedThreads which is not reliable and correct. Also, the FileDB code did not correctly use the MapDB tx API causing various corruption issues in multi-threaded cases. This commit also refactors most of the clustering tests trying to minimize the number of cluster services stopped/started with each test since these operations take a lot of time."
"- refactoring on domain for publication - adjustment of several services - remake of the following use cases:   . insert publication (supports multiple users, internal, external and order)   . edit publication (supports multiple users, internal, external and order)   . delete publication - several bugfixes in 'Ficha de docente' publication issues"
Refactor de packages
connect photon strategy module to refactored maket data
Refactor packages and artifactIds to prepare for official migration to spring-projects repo.
CvApplicationTemplateDaoImplTest refactored
refactored bean meta data infrastructure and introduced contribution mechanism for bean properties
refactor
Refactor debug console and fix debug Activator console
core: Refactoring of VM from pool allocation process
engine: Refactoring GlusterManager
[210571] Refactored number format detail pane.
Refactored TestId
refactored whole formatter class (DurationFormatter now interface)
Refactored the Cypress logic into a separate module.
Refactoring of code structure and naming for codegen core and ide part
JavaConfig internal refactor
Validation refactoring.
"inlined the RenameSupport#initialized(RenameRefactoring, String, int) method into the shared constructor. (Issue #48)"
"CheckIn: Refactor code for javascript evaluators to evaluate expressions gracefully and efficiently, which especially improve the performance and readability of code for aggregation filtering/sorting"
http://jira.jboss.com/jira/browse/JBIDE-847 Code refactoring.
refactor(jboss72): remove specific jboss version from dirs/files - part 2
Inject PostLoginActivities and refactor
ACT-119: Add web service task - Refactor data input and output associations to satisfy simple definitions - Allow disabling of schema validation
"some more details, refactorings, copyrights etc."
Some refactoring of directly-relevant type qualifier database in preparation for implementation of more exhaustive detection of relevant qualifiers (including inherited and default qualifiers.)
refactored function/filter parsing to native PDT indexer
"ROO-2745: Post 1.2.0.M1 code refactor and clean up - added MemberTypeAdditions methods, deleted unused code"
Refactored StringUtil to StringPool
Refactor to enable boards of any size
refactored structure
"thread dump call, thread dump result and code refactor"
Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (improve test coverage)
Matchers refactoring
Refactor spring-jms code samples
Minor refactoring
Refactoring of sync interfaces to create IModelSynchronizationStrategy.
[PLAT-3406] Maven - Refactor database code to better structure
More refactoring.
refactor/preparing to handle string variables in model
"refactory project,separation plugin project and example project."
Refactored getUnwrappedKey in KeyDirectory
StoreConfig -> StorageConfig to reflect it's true role. RefactorJournal to be clear when a dataset is needed and when just a StorageConfig is needed. Expose operations to allow creating BufferChannelFile without going through the system cache/tracker. Dump operation for a journal file.
refactored for better reusability.
XLCLOUD-143 - refactoring
Move org.sonar.jpa.dialect to org.sonar.persistence.dialect and refactor DialectRepository
Refactored the entity manager generator by breaking down the one giant unwieldy method into a series of smaller ones. :)
refactored POJO component to use the Registry; so it works easier with JNDI and Spring together with adding a simple JNDI context implementation; also improved the ServiceExporter to be just a simple factory bean.. Finally moved the bean component into camel-core as its not based on Spring (it uses the Registry)
ACT-60 started refactoring deletion of process instance as separate atomic operations
refactor exceptions
"[JBIDE-7063] base url for tests corrected, corrected missing copyright headers, author tags in all artifacts, refactored http related classes to be in a http-package"
further refactoring: model knows about AtlasNetCDFDAO; release data saving is broken
refactoring JPAProducer and it's commands
"added proper hamcrest support, more small refactors"
JBEHAVE-311:  Refactored Steps to allow StepRunner impls to be instantiate only once and to allow override. Refactored CandidateSteps interface methods for clarity of scope.
WPP-17 Updating the web proxy portlet to use HttpClient 4.0-beta2.  This update includes significant refactoring required by the HttpClient 4 API.  We've also updated the database persistence code to save a list of cookies rather than the lob-encoded serialized State (which no longer exists as of HttpClient 4).  The HttpClient object is now stored in the user session instead of the State object.
Bugfixes and refactoring
loan refactoring: refactor getLoanRepaymentSchedules
FELIX-1766: Refactor and enable AdminServiceMBean
refactoring code up into localurl and out of ser
Patch for Andrew Niefer: Core: - refactor symbol table function names to start with lower case letters - added better constructor support :         - IDerivableContainerSymbol.addConstructor         - IDerivableContainerSymbol.lookupConstructor         - IDerivableContainerSymbol.getConstructors - implicit user-defined conversion sequences now only use constructors not  marked explicit - user-defined conversion sequences are now only applied at most once  (12.3-4 in spec)  - changed ParserSymbolTableException.r_Unspecified to r_InternalError  which is thrown on internal symbol table inconsistancies (likely from bugs  rather than semantic problems with the parsed code)
chart axis ticks style refactor
Refactored
refactor
Minor refactoring: use class variables
Some LZMA refactoring
"[CXF-2759] Adding initial java docs, plus few minor refactorings"
Updated README.md and refactored code
Huge refactoring and moving some tests
ACT-506: Refactoring BPMN implementation classes since it was getting a mess
"refactor to eliminate munging with dropwizard.  eliminate direct dependency on Nexus, widening to service-discovery.  Add demo project to show how to run with Dropwizard, Nexus and how to provide a useful browser based UI."
Refactored GrblController into AbstractController + GrblController. In preparation for supporting future firmwares like TinyG or Smoothie.
Refactor single sign-on implementation in org.wildfly.clustering.web.spi/infinispan modules. Implement distributable SSO support for Undertow.
refactor of the abstract factory pattern
Refactor QuickserDeser for other RAIS/RAIS usage
Created a Kryo serializer that uses Java serialization which can be used for Java serializable objects that cannot be automatically serialized by Kryo. Refactored this from the Rome Syndication serializer code from contrib.
Refactor FluentAdapter for TestNG and JUnit Tests to share more code
Refactor Trackable support to allow programatic API to use it as well
Refactored HtmlTestDocGenerator and added Maven plugin Mojo
"This change moves GetAllPhenotypePagesTest from a test package that is always run under the default profile, into the web-tests profile that only runs tests in package 'phenotype.org' when the web-tests profile is selected. Also refactored test in preparation for getting its run parameters from Spring beans."
Small refactoring to improve readability
"- added new abstract superclass for m2m and o2m fields - values of o2m field are now a collection instead of a set - added license to classes, where it was missing - some minor refactorings -> use of for(foo : bar) instead of while(iterator.next()), etc.  - renaming of filter methods, to fit new names"
HSEARCH-1459 Refactor ServiceManager and ServiceProvider
First implementation of composite refactorings
Seconds step of refactoring utilitary package location: move the utilitary classes from com.stratelia.silverpeas.util to org.silverpeas.util
Refactor code to minimise cross-package dependencies.
refactoring
Refactoring Deck side et control player.side/deck.side.
Refactored SyncDatabaseHelper for reuse with different tasks.
ACT-119: Add web service task - Add support for namespace prefix - Refactor input and output associations - Enhance structure hierarchy
Fixed partial refactoring gone wrong on some SPI files
Timers on client side. Refactored.
FACES-2025 Add MessageContextFactory and refactor MessageContext implementations to take advantage of factory discovery
- upgrade to Jetty 7 and Tomcat 7 - refactoring of Jetty related test cases
refactor rests even more
Refactoring
Added GeoRecord and refactored external type package after well-known encoder / decoder pattern.
"JERSEY-1135 	- Added support for GenericEntity in MutableEntity  Patch2: Refactored MutableEntity: InstanceTypePair completely replaced by GenericEntity."
Major refactoring but no code changes otherwise.
Refactor.
#NAME?
Package refactoring
Big refactoring of upcasting process
Imran/Balaji: Refactorings-2
"Big materials package refactor, part 1! Signed-off by ZNickq<teapa011@gmail.com>"
JSDocTypeParser: small refactoring
XWIKI-6742: Add virtual extensions support Also refactored DefaultLocalExtensionRepository to make it easier to read
Refactored DistributedCommunityAlgorithm as DecentralizedCommunityAlgorithm.
[refactor] rename
"Minor test refactoring, javadoc adds"
TFJ-248 added Relationship#isSourceBlockingTarget() some test case refactors.
JBPM-4792 - Refactor DefinitionService (BPMN2DataServiceImpl) to avoid complexity with thread local closes #313
"Big refactoring of conversion code - removed a huge amount of repeated, error-prone code and moved it to a super class for a very small performance penalty (occasional unnecessary conversions).  Improved unit tests to check all the conversions in concert with the .equals operator and found several bugs in the process."
"Changed Mainframe such that corrupt files no longer get you stuck on a please wait tree. Set it so that loading a recent project when the open project had unsaved changes did not lose those changes and save over the recent project. refactored accelarator to accelerator. Prevented you from redoing an analysis on a null project, thus negating any need for changing analyzing dialog."
GORA-362 Refactor gora-dynamodb to support avro serialization
wwww-1: refactoring helper class
Refactor out ReflogEntry
refactor
"#575 - Refactor PathProperties, extract FetchPath interface, rename get(path) -> getProperties(path)"
refactor code
HUDSON-5147: Refactored BuildResult. Now a reference build is used to compute the new warnings.
"refactoring, better handling for subcommands exclusions, added: command blocking"
Refactor rates so that Rate becomes abstract class which has all the prices and reference to the Room object. RackRate is simple implementation of Rate class. SeasonRate has just reference to Season and provides name for rate. Package rate has reference to Package and also provides name for rate.
[Refactor] Added DamageWithPowerEffect and change some cards
allow the passing of config yaml as File Added another overload to startEmbeddedCassandra that takes a File object instead of a String name of a resource and refactored the existing startEmbeddedCassandra to use it.
Refactor AstMatchingNode
Refactoring and improved documentation.
Refactor the ConfigurationParserJSON for clarity.
GeoPlatform refactoring and some improvements to manage Reverse Geocoding TODO : Finish Reverse Geocoding Control TODO : Layers Tree Widget (priority 0) TODO : Finish Routing Module (priority 1)
Some refactoring of livexp utilities to support getting started guide UI.
Refactored transaction API to allow access to internal transaction instance.
pool: Refactor MetaDataRecord cache logic
"big refactoring including data set based plugins, adapter first approach;"
Minor refactoring necessary for the CSS stylable version of the ajax upload button to work
more common code refactoring
TT: use Excel format to extract cell values (required some refactoring moving most data extraction into ColumnBuilder from Workbook)
Refactoring to launch the soap monitor through a script
api_refactor: move diskoffering to offering
1. Fixed BukkitContrib compatibility 2. Refactored xAuthPermissions & xAuthHelp
Refactored multiple copies of code into a function addFile and other minor cleanup
refactored JCRLoginModule to remove redundant methods
"Removed invalid comments and some refactoring, javadoc adding"
"PLAT-4419 Refactored to extend to MarkToMarketPnLExplicitFunction - shows live bid,ask, and last prices in dep graph"
activiti-cdi: refactored static way of providing the process engine
TEIIDDES-401: Initial refactoring to work with new vdb plug-in
Refactoriing to make txn_entity to have an hierarchy. Account.
Refactor for better naming to avoid shaming my family.
Refactored ExecutionDelayTest
PDT API refactoring: put internal classes under 'org.eclipse.php.internal.*' package.
Refactor tests
Refactoring of EIK WTP UI
TEIIDDES-1739: Refactors the DDL importer
Refactoring.
 test code refactoring + add Jackson test
Refactor 'addon-test' commands and operations and removed its annotations. Now test operations have its own implementation in each addon which needs it. Added integration tests for JPA repository types.
refactoring
"minor refactor, and fix [[Links]] in module explorer doc"
refactored field registry. extenden collection api.
"Refactor equals & hashCode implementation out to static methods in the shape implementation classes for re-use. JtsPoint uses it now, making a test pass. Note: It was decided that sub-interfaces of Shape should share common equals & hashCode implementations."
refactored process input/output types.
Refactored MethodFinder to be more like a well-behaved Spring util class
"Refactored ripple-linkeddata.  Added an alternative, 'full' caching format in which each memo property is represented by a single RDF statement.  This will make it easier for third-party applications to make use of named graph metadata such as media types and time stamps.  LinkedDataSail still uses the compact, statement-per-memo format by default."
JBIDE-3424 fixed VpeController class code refactoring
Refactored commitStrategy to transactionCommitStrategy
Added sample EJB 2.x Session Bean. Refactored into sub-project.
Refactoring JPA Commands
Adding Firewall Rules to comply with the Visitor pattern implementation; refactoring the applyRules so we can reuse it.
"HIVE-14453 : refactor physical writing of ORC data and metadata to FS from the logical writers (Sergey Shelukhin, reviewed by Prasanth Jayachandran)"
Refactoring of Java CG related functionality
minor refactorings
- refactoring names for the inclusion of chapter 5
Refactor market data feed
"Fixing allowed-sources for TCK tests, and fixing CartoFixture + TCKs + CartographerBuilder such that it checks whether the DiscoverySourceManager implements LocationResolver and LocationExpander, and uses it if so. TCKs run again after GraphOps refactor."
adjusted jboss subsystem to refactorings in BPM platform
refactoring conifg classes
Refactor parse tests to regroup the test sets.
Bugfix+refactoring of extdoc overrides generation
"Username for comments, refactorings."
Refactored ExceptionMappers
"LockManager: refactored both implementation with a unique interface. Using ""old"" lock manager when running distributed"
cosmetics and minor refactoring eliminate some helper methods better naming
Refactor RuntimeOptions towards somthing that can be extracted as an interface. That will make it easier to provide multiple implementations.
"Refactoring controller->entity, renamed VanillaPlayer to VanillaPlayerController, update most components. Signed-off-by: Chris Sanders <zidane@outlook.com>"
"refactor the HostConfig interface to be much simpler; update ZkHostConfig to do the right thing, test to confirm new behavior"
Small refactoring in PartialMailMessage
IDE-1557 refactored codes about descriptor helpers
"The big renaming, part I: * use ""scripts/<artifactId>.js"" instead of ""jangaroo-module.js"" * package generated js files into ""joo/<groudId>.<artifactId>.classes.js"" instead of scripts/<artifactId>.js * joo.loadModule(“<artifactId>”) -> joo.loadModule(“<groupId>”, “<artifactId>”) * refactored JooGenerateTestResourcesMojo to reuse the same   application packaging logic as WarPackageMojo. This simplifies   creating unit tests a lot. joo.loadScript(“scripts/foo.js”) -> joo.loadScript(“joo/foo.js”) joo.loadScript(“ckeditor/ckeditor.js”) -> joo.loadScript(“ckeditor/ckeditor.js”) * use joo.baseUrl, under which to find ""scripts"" directory, instead of joo.scriptsUrl * use ""target/jangaroo-output[-test]/ instead of target/joo[-test]/ as temp dir for collecting files to package into jar"
Some more refactoring
refactoring
test refactoring
"Only refactoring, moved crawling logic into crawling service"
Refactored some method names and cleaned up a few return types. nothing major.
refactorings in splitting and merging
Refactored
refactoring and fixed closing of messageexchangedesktoppanel
refactor bridge unit test packages
Refactor and generify CompilationUnitDifferencer
"Add support for XPath 2.0 and XPath 1.0 compatibility using Saxon.  This is implemented using the Saxon OM classes, for good performance.  Existing PMD XPath functions are refactored to be compatible with Saxon's extension support.  The functions are exposed using 'pmd' and 'pmd-java' namespace prefixes, while these prefixes cause no issues for Jaxen, they are required by Saxon."
refactor
Refactoring phase 1 of 2
Huge refactoring on GraphDB: - changed class names in vertex and edge - Optimized memory consumption by removing nested records - Optimized speed in ORecord.equals() and hashCode(): now avoid field checks (experimental)
Refactoring reporting-phase module
Refactored use of PntTime
moho-remote code refactor.
Ranking Chooser refactoring.
Refactor some compiler stuff.
54444: Extract local var and Convert local to field suggest bad name [refactoring] - added content assist - default name is longest suggestion
minor person name refactoring
refactoring class name
Minor refactoring of RI classes
refactor
Refactoring of OMVRB-Tree to support a parallel provider to store key set. First alpha.
rsa refactoring and new test case
[CHECKS] Fix regression and refactor.
Hibernate ui bot test methods name refactoring and javadoc added
Refactoring
refactoring ASM factory
FALCON-1895 Refactoring of FalconCLI and FalconClient
Statisticspanels refactoring
Misc. refactorings.
PRD-3965 Second phase refactor to current specs… work in progress
Refactoring to manage multi-plexed network connections
[#11] Improved code quality by removing unecessary files and refactoring some files
"added tree images and modified css so the images aren't loaded from developer.yahoo.com anymore, modified loading gif in tree, renamed tree.get webscript to child-nodes.get and refactored GUI accordingly, small layout fix in content representation view"
refactored MustUseRule and SkipCallRule. edited functionality to distinguish the difference between rules on logical level and physical level.
"metamer: contextMenu: refactored test for @direction (no hard coded Points, now it should work in all templates), added some tolerance to assertions"
refactored the zone cache - rjrjr
Refactor Tool controller and events. Add Brush test tool.
Refactor Connection.java
Renamed according to recent refactoring discussion: ISetOfAtomContainers -> IAtomContainerSet
Refactor of Opta Events Module to remove duplication of code and simplify code paths
Refactoring
refactoring the API so it can be used at the highest level
Refactoring Security Fixing spring factories for client and security Fixing failing tests Adding license headers
Edit user profile refactoring
refactor and rename incorrectly named JsonRequestManager to DrupalServicesRequestManager and removed extraneous layer of abstraction.
Generic Elements (Complete Refactoring)
Refactored junit-liquibase
Added chunking for IoBuffer output. Refactored client id handling and manager registration. Updated connection creation flow.
refactor similarity measure
some refactoring towards separate feature layers
Refactored ProxyFactory and ProxyController
core: refactoring quota
Refactoring
#POULPE-117 refactored tests for section dao and section entity
"MODE-681 - In order limit the dependent code in the modeshape jdbc client jar, these changes refactor code from modeshape-common"
"Update javadoc, some API refactorings"
Refactor
refactored SocketRemote to extend ReceiverBase
Refactored player shot creation.
FEEL tests refactoring + some new corner cases (#7)
Refactor InfinispanTransactionManager
refactor json properties to be conform with server side
WIP showlet to widget refactor refinement
refactoring everything
Refactor commands to inject AWS clients and add unit tests
Major refactoring of the application services handling to decouple it from Application and to get rid of the reliance on magic bean names.
"Cleanup and refactor notifd (code formatting, use Java 5 generics and for loops, use dependency injection in BroadcastEventProcessor, add test to ensure that regexp in BroadcastEventProcessor compiles correctly).  brozow will review"
More refactoring to the internals of the layout inflater module.
Refactor ORBControl state code to use enums and concurrency utils
Kie API refactor
Refactored processing wizard page setting JSF portlet capabilities and catching SWTLayerException that occurs when the portlet bridge is recognized in runtime enviroment so there's no text field
refactoring algorithms to extract error rate computation
[SYNCOPE-319][SYNCOPE-209] Introducing new REST operation ConnectorService#reload() and refactoring the ConnId layer
Refactored to add sharding strategy to CQL generation. Still need get tests to pass
UI Import refactorings.
Refactor MutationScoreAnalyzer class
Refactoring
Refactored Component package. Signed-off-by: Chris Sanders <zidane@outlook.com>
JBPM-3785: disallowing use of Compensation Boundary Events (refactored linkBoundaryEvents() method into submethods)
[PLAT-3592] refactored builder to sit behind provider; added rest interface to provider; reworked configs.
refactored idobjecttable for building into base for photalbum too
"SvnRelocate operation added to the new API, refactorings and 1.7 support in progress."
"refactored code, autoresize"
refactor replaceAccount() to mergeAccountChanges() & fixes in JPAAccountsService
Refactoring of extraction tool.
Refactor: create operateWithFailoverSingleIteration() and break operateWithFailover down to smaller parts
SONAR-2693 A bit of refactoring
Little combine and refactor
#NAME?
Finished refactoring
ROO-2745: Post 1.2.0.M1 code refactor and clean up - using constants for JavaTypes
"Refactor MockRule to be part of PMD core, as an actual Rule implementation which does nothing is useful beyond just unit testing (e.g. in IDE plugin development)."
Refactor DirectionalStrings into a util
Refactoring adding a parent class for LocationWrapper
Refactor TmfTrace and dependencies - move parseEvent to ITmfEventParser
refactored result objects
webdav: refactor MiltonHandler's support of OPTIONS
SONAR-7387 Refactor TestIndex
ScriptConsole refactoring - read stdout/stderr
"refactored <lib> up to WOTask, so both woapplication and woframework have it."
Introduce proposition (true/false) layer on DHNS node and edge iterators. Include predicate for visible elements. Refactoring on DHNS graphs methods. Review unit tests and debug.
refactoring: removed creation of FuelConsumptionModels from VehicleGenerator to Simulator
Minor refactor on tests
"Work on agents, thumbnail generation (fixed some bugs), did some refactoring"
refactor
"First step in implementation of JSF.Refactoring of a few methods in PresentationObject such as:getAttribute -> getMarkupAttributegetParent -> getParentObject"
refactored number and control panels
Module refactoring : move API resources in an API module and front resources in a front module
[116223] [refactoring] ProcessorBasedRefactoring does not handle exceptions thrown by participants
Refactor common realtime classes out of onebusaway-transit-data-federation and into onebusaway-realtime-api
refactored the ECA code into a separate module
Refactoring
"pushing current state of indexer refactoring, deflector healing jobs, ..."
Generic UI table component refactoring. Also moving some classes in another package and going back to simple security.
Package refactoring
now the generic SpringExplorer provides it's own model with resource listener support [refs #532]; now the SpringExplorer's content is refreshed on model changes [fixes #561]; now BeansProject and SpringProject support adapting to IProject; refactored BeansResourceChangeListener into base SpringResourceChangeListener; refacored IBeansResourceChangeEvents into base ISpringResourceChangeEvents; deleted obsolete interface IBeansModelElement
comments refactoring add escapeSql method
Refactored
Refactoring of Attribs to deal with HRecord values
first pass of refactoring on OWLRDFConsumer
Refactored Transform to implement Operation instead of Rule
Refactor & clean & improve map BackupTest
[WFLY-456][WFLY-490] Refactor audit log handler test to not use platform mbean server
[Refactor]: Refactoring from CandidacyPrecedentDegreeInformation to PrecedentDegreeInformation. CandidacyInformationBean is no longer necessary
refactored abstract installer
refactoring package names to help support arquillian configurations
Refactor period rules to inner class
"Merged r795, r796 from 1.7 branch (Preliminary support for HL7 v3 transactions: refactored interceptors, new data binding, etc.)"
refactor and added admin resource
DDf-1831 Refactored OperationTransaction into interface and implementation - The OperationTransaction could be usefull outside of the CatalogFrameworkImpl   so an interface was extracted and put in the catalog-core-api enabling other   bundles to use this object.
Refactoring of code related to pattern transformations
Refactor module providers for subclass convenience fun.
refactory
furhter minor refactoring
"Added KeystoreManager, various small refactorings"
refactor get wechat request.
Refactoring - renamed include parser to source code include parser
"refactored training, created configuration"
"some fixes - validate plugin config, closes the pidfile stream, some minor refactoring"
Analyse: Code Viewer can be activated now also for a selected class in the decomposition view. Furthermore some restructuring and refactoring.
Major refactor to start process of eventually moving content manager classes into separate module. For now they are moved to a different subpackage but remain in the KenyaEMR module until all dependencies on KenyaEMR are removed.
Refactoring: renamed Environment -> GeneticAlgorithm
Complete refactor of the elastic capable Dempsy (0.8.x).
#182 Massive refactorings to clean up metadata and segment handling
refactor package name
Refactoring
Implement proxy ticket validation and related refactoring.
"refactored so that host info is computed in Format, rather than split"
Refactor Constraint class name
Small refactor and implementing crude working of GraphBuilder - continuing to flesh out compile graph phase specification to stablise earlier spike.
Refactoring
"Refactored ViewPoint model, with use of bindings in meta model"
Refactoring the LibvirtComputingResource   - Adding 4 new command wrappers   - 12 unit tests added   - KVM hypervisor plugin with 15.5% coverage
started transaction refactor
refactored plugins so argument parsing is simpler
SAK-10086 - refactored how Release Date/custom DISPLAY_DATE set since Release Date now takes precedence
Refactoring
Refactoring to demote more stuff in DatabindContext
Continued work on JSFUNIT-40 with major refactoring of A4J code
AS7-696 Start refactoring to share code between domain deploy and standalone deploy
"NXP-14752: refactoring deletion enable sync and recurse for this operation using delete by query api, fix pb in permanent remove. Using standard insert/update/delete term instead of index, unindex and reindex which is hard to grep"
refactoring
refactor some of the stuff that was in mustache to the builder. would like to ultimately move all of it.
CXF-5576: Initital support for CDI integration. Refactored JAXRSServerFactoryBean/Bus instantiation flow.
refactored to provide both a streaming and non-streaming search facility
refactored dvrservice to load current recordings as well as upcoming recordings
"[NTI] Refactor the property accesses on nominal types, to add an option that includes/excludes stray properties."
Refactors the AbstractDocumentsQuery such to remove the PatientIdBasedStoredQuery from the signature.
JBRULES-136: Show rule attributes in outline view  - outline view now uses parsed rule AST to determine rule attributes JBRULES-282: Funny newlines break folding  - refactoring of folding should remove this issue for outline view
Renamed and refactored some methods to make more sense.  Fixed bug #3106962.
Bug 336875: Refactor ToggleBreakpointAdapter and ToggleTracepointAdapter classes
Split for remaining UFSs and refactor
Some code refactoring to make automation api easier to use
Introduced the new URI-based type/subtype... structure.  Removed basic authentication and introduced OAuth token support.  Minor refactoring.  Updated all unit tests to reflect src changes.
refactoring to allow own implementations of ProjectCreator
"Massive refactor, IStatDataProvider does not handle async anymore."
Refactoring to the LDAP Identity Store. Added LDAPOperationManager class to centralize LDAP operations.
Refactoring deck => print/list.
Ticket #394 - Refactor duplicate SPT code into common base class + some additional SPT + GraphPath convenience methods.
"sets timestamp on dumped zipfiles, also includes refactoring for sonar compliance"
Refactored and optimized all capsd tests
XCOMMONS-1099: Refactor core extensions scanner to use new xed files generated in the WAR
PLINK-130 refactor RelationshipPolicy
"added ability to initialize cli console with custom input and output streams, refactored cli testsuite to make use of the cli api and custom streams"
Refactored HeatMeasurementsAnalyser so methods for calculating top score and top n scores use largely the same logic.
"TYRUS-341: A control frame inside a stream of continuation frames is treated as the part of the stream 	+ minor test refactoring"
refactored the fabric8:run command to fabric8:apply and make it more awesome
Test refactoring. Remove hacked classes used during testing
Refactored existing HBase test and a new HBase test.
Refactor txn pattern tests.
refactoring
Bug 430547 - refactor mozilla implementation to get version-spec IID lookups out of main implementation classes
One last package refactoring
applied patch of STS-437 (Refactor DateTypeConverter so that extending/overwriting will be cleaner)
Tests refactored and enhanced
Refactoring of ModelStores for call and overrides completion. Extraction of IO-Parts.
Refactor EntityMetaDataMetaData to EntityTypeMetadata
"refactored builder packeges in test, atom, csv, html"
refactoring and NL
Refactored API for domain change (as well as the headers @zml2008 applied).
Refactore of Eclipse felix wrapper
#JC-848. Refactored after review.
[SONARPLUGINS-575] dotnet cpd refactoring in order to be compatible with sonar2.3
Minor refactoring. VisualStyleHelper is now FIVisualStyleImpl. Added skeletons for HotNet/Microarray Analysis.
Partial refactoring of Privilege/Exception
"Larger refactor of the cmp2jpa conversion code.  Allows a user supplied openejb-cmp-jpa.xml file to be supplied with mappings.  If a mapping for a cmp is supplied it needs to be correct, though some relationship data will be added if missing."
[svn] Changes because of the refactoring of the Widget class. Updated the code to use the beta jsr-231 api.
Refactored some of the reflective method juggling into new utility methods in ReflectionUtils.
"TRUNK-3115: Rename AdministrationService.validateInManualFlushMode, and refactor it and ValidateUtil https://tickets.openmrs.org/browse/TRUNK-3115"
  * refactor ImgLibProcessor::fill(mask) to calc via object composition and hatch classes as needed   * PlanarNumericDataset - add some new signatures to interface   
small refactoring for clarity
EST-564: communicationchannels refactored
#NAME?
"Atlas-standalone: Lots of interface refactoring.  Took out sql from the interface, still need to implement some DAO methods to fetch all required data.  Changed ArrayExpressSearchService from a singleton pattern to a context-stored variable and added support to implement this in other cases if required.  Might need to add plotter to the same pattern, but at the mo I've got no good data to test this on.  Need to run a big index/netcdf build now to debug everything else.  Also, lots of general cleanup, removed a couple of unused classes.  Migrated package names for new loader/index/netcdf components to the agreed versions.  Getting there slowly, I think."
Refactoring: move some ui states to separate packages
Refactor: move BloombergHTSMasterUpdaterTool from OG-Bloomberg to OG-Integration
refactor: - PHPModelUtil -> PHPToolkitUtil (resolve ambiguity with PHPModelUtils) - *.phpModel package -> *.keywords (more correct naming for the package contents) - Put Code Assist classes into internal packge - not an API
XCOMMONS-1196: Introduce to package type containing extensions XWIKI-14281: Refactor Data mojo based on Extension Manager XWIKI-14135: Introduce a generic XWiki flavor on platform side
finished the refactoring of the expression's parser and the AST
refactoring: now object frame in jfrontend shows. Fixes issue Core-306
Impl classes in view renamed to Zk...  Plus some small refactorings
Added VisualStyleHelper. Significant refactoring and documentation.
"Fixed issue, introduced in config refactoring, where system properties where not picked up by the database. Added test to ensure it doesn't happen again."
Refactor helpers into new smf4j-util
"geopicardie-dev - plan to avoid throwing exception in finally, refactor first"
Refactored IpcBuffer: use lambdas to remove duplication in all get/set methods
delete duplicate TimeoutTracker and refactor to utils class
OPENEJB-1231 Webapp context.xml setting allows app to be ignored entirely by OpenEJB OPENEJB-1230 Webapp scanning include/exclude via context.xml settings OPENEJB-1417 webservices.xml not read when embedded in Tomcat OPENEJB-1418 Refactor TomcatWebAppBuilder
"Core: refactor instantiation, pt.1 (#935)."
Refactored heuristic to decide what should be in the system pythonpath or not and using on both places that need it.
refactor
Refactored HDFS based MapStores and fixed FileSystem close issue
Testing Sql Mapper 0.1; refactoring clauses into their own package
[JGroups] Refactored exchange creation.
"JBEHAVE-474:  Refactored determination of previous non-And step.  Step starting word functionality now provided by Keywords rather than CandidateStep, which may not be defined."
"XWIKI-2568: Continue implementing the new Rendering Architecture   * refactor MacroParameter/MacroParameterClass:     * change ""class"" to descriptor     * change ""PramaterCollection"" to ""ParameterManager""     * ""*ParameterManager"" now use #register to add the parameters descriptors one by one in place of initialize and set a whole Map in the constructor"
Refactorisation des dossiers
TURMERIC-1544: Test refactorings.
Refactored driver code to make tests faster and simpler and to prepare for Cucumber integration.
Refactoring of UI-Tests
Refactored math.set package to be called math.counting and added a Counter interface and changed genertor to implement it. Added a Permutation class to the package making two types of counters. Added appropriate static members toCounters utility class.
Integrated everyone's recent changes into RebuildHistory & refactored
[core] [refactor] Make Currency into a class
CAY-2170 MergeToken sorting is highly unstable now - introduced explicit sorting weight to MergerToken - all sorting now based exclusively on this weight - some minor refactoring
0.3-rest : add proposal & details gui / refactor model
"Refactor: improved academic rule based access control infrastructure to enable modularization, and made it independent of the organizational structure"
"Refactored CollectionProxy, HazelcastInstanceAwareInstance, IGetAwareProxy, IRemoveAwareProxy and TopicProxy to top level (issue 79)"
Refactor - repackage / move test code only
refactor for footprint
[refactoring] Split the decision to deny access to a patient access into a new authorization module
[MCHECKSTYLE-123] refactoring to prevent duplicate codes.
Refactoring creation of object to give more useful information when it fails
refactor package
Changes to reddeer test run configuration based on requirements    - Test run configuration requirements operates with multiple configurations    - Single configuration xml file    - Added processing of requirements without configuration    - Only one configuration xml file is being work with    - Support for nested suites    - Support for property based requirements    Tests:    - Refactored tests:       - PropertyBasedConfigurator       - CustomConfigurator       - TestRunConfigurationImpl       - SuiteConfiguration       - ParametriziedRequirementTest       - RequirementsSequenceTest       - InjectRequirementsBeforeRunIfTest       - RedDeerSuiteTest       - ComplexConfigurationTest    - Unit tests for RequirementConfiguration    - Unit tests for TestClassRequirementMap    - Refactored tests failing due to changes
"Added interface ImmutableEntity, refactored CentralBank to implement."
Refactored the resolving of Object via imports.
"refactored debugger (new event classes, rewind immediatly to simplify the code)"
BigList implementation was changed to to DBSimpleList. Refactoring. Storing docs in db
refactoring. evaluating jexl instead of mvel
refactor summary module's data generator part
refactor the attribute view and model event manager code
Fix Anjo's changes so that they pass some basic tests when passing lists containing nulls. Some minor refactoring and changes to better match WO54 API Fixed error in NSSet where is was not ignoring nulls. Added missing constructor to NSMutableSet Removed vector constructor body in favour of delegating to List constructor. Misc cleanups.
refactoring with minor semantic changes
refactoring
Refactoring of testing related code
#NAME?
Initial work for refactoring the Cov-Build command for compile sources.
Refactoring code
Big refactoring to cmu.arktweetnlp package
Refactor transactor impl 1. Add logging 2. Fix connection creation logic 3. Use daemon thread in idle connection terminator to prevent the executor from blocking main thread shut down
[PLAT-2751] refactor: renamed package to com.opengamma.integration.timeseries.snapshotter
JERSEY-1326: Async API refactoring (partial).
refactory internal aop model to aop.core plugin
Refactoring and moving classes for easier testing / scaling
JC-1466 refactoring tests
Refactored IntExp and RealExp to work directly with arrays
refactoring all wrong name
package refactor
refactor main class of orbisgis
refactored AlgorithmServiceImpl and SemanticSearchServiceHelper
will you be my refactoring?
Refactor Castel protocol decoder
examples restructure https://bugs.eclipse.org/bugs/show_bug.cgi?id=364900 Adding tablecombo and refactored examples
DROOLS-132 Refactor Fluent Interfaces for general use
Refactored database connecting actions
refactory and add sorting Demos
Refactoring.
Refactored the implementation code.
http://bugs.osportfolio.org/jira/browse/OSP-967 Refactoring the Matrix tool to allow multiple scaffolding to be defined in the tool.
Refactored
Refactoring CreatePathOptions.
refactored postprocessing in TempoExtraction on a perWindow-basis
Refactor PlatformConfiguration
"major work towards 2.0.0 - refactored database model - can now pardon bans without deleting them; fixes #6, #26 - metrics implemented - better caching method for faster logins - custom BanHammer events"
big refactoring
Refactored and extended test cases for core api
Code refactoring for connection events; The events are now generated and captured through the channel pipeline;
SONARPLUGINS-2202 Refactor package names to have clearer API
refactoring package names
refactor on max-size impl
Non-reviewed patch support refactored.
refactoring update provisioner
DDF-469: refactored ResourceCache and registered  as a service
PLINK-130 refactor FeatureSet
minor refactoring of tests
Refactored: Xponents v2.0-alpha baseline; consolidates previous opensextant/Xponents modules and opensextant/OpenSextantToolbox applications;  Non-GATE version of OpenSextant processing
Small refactorings. Preparing for Repository synchronization.
Refactor - rename #answer to #ask
minor refactor to allow composite demand forwarding bridge implementations
Refactored deserialization code
Fixed typos and some minor code refactoring.
#POULPE-169 refactoring for TreeNodeFactoryTest
Refactor for GWT
refactor ocl and gremlin queries to not only return strings
Refactor: extract method prepare library.
Refactored buildwrapper to launcher
Refactor compact serialization out of SPVBlockStore and into StoredBlock.
"Refactored MechanizeAgent.submit and moved methods to Form class. Form.isDoPost, Form.isMultiPart, Form.getUri"
#736: The error message is displayed in case of email delivery failure when a message is posted (refactoring).
WIP Thrift refactoring: Move after route invocation to remote executor
pool: Refactor FTP mover logging
Implemented ClientService. Refactored client tests.
"added parallel csv importer, added error handling for  disruptor, refactoring"
ProgressMonitor: Refactor to use background alarms
Refactor for code style
Refactored isNull.
small refactor
refactored create/update/reflect relationships for clearer functional boundaries
Refactored blob storage. DB threshold now compared to final blob size instead of original.
Refactored locking to reduce ConcurrentHashMap accesses
"refs#31 RecipeProvider refactor, hogy ne példányosítson mindig új filter objektumot"
Use shared AST in Hide Method refactoring.
Issue #29 - step 16 : - refactor sum views to allow in a more convenient way idempotency - add some tests
"Huge change. Now there is a method entity and dependencies are defined between methods (Dependency Extractor and associated classes were largely refactored). This enables lower level analyses. Dependencies between types can be retrieved based on those method dependencies. The same goes for dependencies between compilation units. All tests passing :-). However, there is still some work left to be done: unit test should be rewritten to assert dependencies between methods (and not between types). The implicit dependencies from constructors to attribs<> still beed to be captured."
Started to cleanup some warnings. Mainly refactored tests so that the unit tests that don't touch the filesystem can be run in eclipse (not working yet but working from ant).
#NAME?
refactoring: change Constants.java to MovsimConstants.java which is much more specific
KARAF-963 Services modules refactored
Refactor: Move NASA related classes to a separate package
Property access refactoring.
Started client api for $links.  Refactored and reformatted consumer model.
#NAME?
Refactor. Moved to Util.
UploadPack: refactor want validation
Download service refactoring: multiple downloads and cancellation support
Harshit | Refactored child reporting.
Refactor
[SUREFIRE] refactoring
fix issue 122 + code refactoring
#729 Refactor spawn handling into separate service (work in progress)
Refactor SASL auth handling
Refactored TestFiles for library-based kvpm and in-cassandra kvpm.
Refactored FizzBuzz
HAP-212 - Refactored ExtractorUtils to support resolver configuration in addition to the publisher
site + refactoring
saml: move refactor files from server to api module
refactored oauth to be more general
Refactorings to test base class.
SONARPHP-327 Small refactor.
Further refactoring + unit tests
Slightly refactor the Environment / Signal api
Refactored substituteVariables util method and added the support to read environment variables
[MIN] XQuery: various refactorings regarding query input handling
HIVE-5430 : Refactor VectorizationContext and handle NOT expression with nulls. (Jitendra Nath Pandey via Ashutosh Chauhan)
EFO Expansion package refactoring
Refactoring the RoleAssignmentService to receive a RoleAssigment object instead of URI and RoleName Thiago and Cukier
Added DaoWebAlarmRepository; refactored the AlarmFilters
Refactor IntPair to Utils
refactor
"Fix Bug 215943(partial) Added following support in chart builder: 1. In Select Type tab, ""orientation"", ""multiple Y axis"" and ""series type"" should be disabled. 2. In Select Data tab, the query combo should only show the valid binding in xtab. When users select the row dimension, chart should be transposed. Disable ""Use data  from"" radio, query input box and context menu. Sync of chart orientation and chart title are not finished yet. Also refactor some utility code"
"Added new weatherstation type, and some minor refactoring"
ISIS-917: further refactorings to simplify the API of the (newly rechristened) RepresentationService.
Refactoring PaginationPanel
Refactored
"Moved implementation classes into a impl package.  This paves the way for further refactoring. By putting all the jmdns api classes and interfaces in one package, the impl classes can be split up more without exposing public classes and methods that aren't part of the jmdns api.   This change breaks the old api, because the JmDNS and ServiceInfo classes cannot be instanciated directly.  Instead there are factory methods to create them."
Refactoring and added unittests
refactored JFrameExceptionRule.java
HV-353 Refactoring existing test prior to adding new tests for this issue
Refactored PlayerData.
refactored to use the new Configuration class.
Refactored
Issue #8 - Expose timestamp of event. - refactoring of event structure to move duplicate properties (identifier) to a single root event class. - exposed timestamp property
#NAME?
Refactor SyntacticItem.getOperands()
core: Quota refactor
Refactoring de la gestion des parametres absents dans une requete
Refactored a ExcelSheetItemWriter
#POULPE-120 further refactoring for ItemPresenter - no need to pass view each time; test refactored accordingly
1) Implement the getDoubleValue and validateDouble in the BaseActionForm 2) Refactor code to use getDoubleValue instead of Double.parseDouble or Double.valueOf 3) Fix code to use Money instead of double for calculation 4) Implement getDoubleValue for money format and interest format. 5) Configure money format and interest format in the application configuration file and the  AccoutingRule will get the configured values. 6) Change the ranges of loans to integers instead of double 7) Move error messages to properties file from LoanPrdActionForm 8) Validate users' inputs for double in LoanPrdActionForm (the checking for valid numbers entered still done in javascript)
Refactored build to allow for standalone apps to use section awareness.
Refactored checksum validation in BasicRepositoryConnector to ease testing
"refactoring of heuristics, adding heuristics"
Refactor: Allow specification of which degrees to allow for each candidacy process.
Refactored bean name
"SAK-1309 Refactored JSF backing beans for asn. details and course grades to use domain objects directly, rather than transferring their data to UI-specific objects. This required changes to the internal service api.  We can now start checking optimistic locking on individual grades. This is not a bug fix, and should not go into 2.0.1."
[Refactor] Move Shouting code to MSocial.
Refactoring EasySOA proxy management service
"Refactoring the VCF writer code; now no longer uses VCFRecord or any of its related classes, instead writing directly to the writer.  Integration tests pass, but some are actually broken and will be fixed this week."
"massive refactoring for better names, added spring test for archives"
Fixed problem marker updating for files that are not indexed due to empty scanner info. Some refactoring of problem marker generation code.
refactoring annotations. combine all annotations into one.
refactor
package refactoring
refactoring towards LOC bagit impl; stubbing some unit tests
"moved spi to core.spi, as refactoring was half way"
"Removing unused methods, small refactoring"
Refactoring API
Refactor part 4 - should be final bit
Refactor CompilerTestCase to use classes objects to describe the parts.
DfsFsck: refactor pack verify into its own method
refactor codes in modulehandle and generic module parser handler.
some refactorings
minor refactor of analyzed type
refactor
Refactored event storage to ExtensionTracker only.
#NAME?
Refactored numerous things and updated for CB 602.
Gros refactoring des noms de classe et suppression code inutile.
refactored the JCR session integration so it the SPI manages more of its life cycle
Some more refactoring for builder side
Bug 264893 Start testing modelled UI Refactored out the IContributionFactory
o Major refactoring to loose commons-vfs. It was just too painful and complex to work with. With this there will be no more random logging and I'll know what's really going on.
more refactorings for avoiding further overflows
HBASE-8449 Refactor recoverLease retries and pauses informed by findings over in hbase-8389
"Feature #8017: Refactoring the Period use since the discovering of a huge misunderstanding about the main difference between an all day event and a non all day event... - now, the Period returns LocalDate instances for an all day event, or OffsetDateTime for a non all day event - updating the version of fullCalendar from 2.9.1 to 3.1.0 - fixing a lot of small bugs - starting ICALENDAR import feature"
Refactored certain unit tests to make them faster. Added more tests for additional test coverage.
 ItEr17S10CUCreacionProxectoPlanificacionItEr16S12: Refactoring current model so it can work with another subyacent domain.
refactor C4 item extractors to be more templatey
Moving FpGrowthJob to core and renamed as FPGrowthDriver and some other refactor
"CXF-7164: Support tracing using OpenZipkin Brave. Refactored JAX-wS implementation, added more test cases."
ISPN-7963 Refactor package name
refactor and fix the test - now it *really* does what it says
"Start on rendering, refactor of sax firing"
REFACTOR: Changed naming of service methods to getXXYYZZ for TimeSPan
Refactored package structure
"refactored global build stats data migrator architecture, simplifying it with AbstractMigrator & DefaultGBSPOJO + merged XStreamReaders into Migrator classes + provided InitialMigrator"
webapp refactoring
Refactor klass pathing a bit
"Refactoring,and 1.2.2 released."
[CXF-6314] WebSocket transport should not require dependency to jetty plus refactoring specific for cxf 3.1.x
refactored indexer in preparation for multiple indexing options shortened field names changed format of path indexes in preparation for tokenization and span-based querying
Minor refactoring
[MIFOS-4216]LoanBO refactoring
Created a 'kernel' component for the Neo4j kernel. This contains the refactored version of the 'neo' component.
"Refactoring Panels, refs #5"
Docker Tests - New tests/Code refactoring/Fixes (#1530)
Refactoring of package structure for code generator mojo
Request processing API refactoring.
engine: Standartize and refactor AddExternalEventCommand
JCBC-962: Refactor SearchParams into SearchQuery
refactor
Refactoring Geocoder POJOs for JSON-Mapping
MONDRIAN: Refactor dozens of anonymous and inner classes which implement MDX functions out of BuiltinFunTable and into top-level classes.
last step to issue #110: refactor limits
Refactored DoublyLinkedNode and StraightSkeleton subsystem a bit
"Refactored Hazelcast, HazelcastInstance and FactoryImpl"
Refactoring code base to access LockServiceImpl through interface
Refactored VRS into new VBrowser VRS API.  Created mimimalistic VRS. 
Refactor validity checking of instantiation strategies.
refactor package name
Refactor append in page.
"Refactor HDMap configuration - add shaders, perspectives"
BridJ: refactored JAWTUtils to provide simple locked surface runnable architecture
Refactoring
Refactored cardinalities and adhoc sources
"Refactoring test packages, also randomly fixed a bug in player init"
"Refactoring HDF low level plugin to depends on Java NetCDF 4 libraries - Actually it depends on imageio-ext-netcdf plugin, which has NetCDFUtilities containing shared utility methods - Isolating NetCDFUtilities to a single module would be an option."
Refactored the dependendies for the resource servers - the communication required to have the auth server validate the tokens - into seperate module
"refactored ReportsUtils: - bug fix, using ConcurrentHashMap - removed hardcoded, unneeded classpath - promoting code reusage through new methods (export, createXpto)"
"config refactoring, add new config properties for kod device"
refactoring WSRefInjectionSource
OAuth clean-up and refactoring
IMPORTANT: Refactoring of PAMELA to support ModelContext and Serialization/Deserialization policies. ModelContexts allows to define a set of known entities. policies allows to indicate how the serialization process should react when it encounters unknown entities. ModelContext are capable of being based on other contexts etc... Serialization/Deserialization is now handled by the ModelFactory. Furture evolutions will allow to completely drop the duplication of ModelEntities and only create a single ModelEntityLibrary containing all the entities in a JVM. ModelContext will then only be a filter on the ModelEntityLibrary.
refactoring
QPIDJMS-125 Initial pass at refactoring local TX handling to add more thread safety and better failover handling.  
Refactor TermWeight and TermSimilarity and added test for it
Refactor Period/Duration to be date/time-based
Refactored maven api
Refactored to move (soon to be) shared matchers (#103)
map entry processor refactor
refactoring: better exception handling and introduction of guice dependency injection framework
Started refactoring the way we generated code for C/C++ structs/objects.
added index queries to rest api; unit tests for index queries; small refactoring of helper to build testable domain models
HADOOP-4205. hive: metastore and ql to use the refactored SerDe library.
continue refactoring of clientCustAction - tidy up use of ClientBuilder and IntegrationTestObjectMother for creating customer hierarchies that include clients.
Cosmetic refactoring.
"Started refactoring the mongo solution, now we use a template as the basis not the Mongo component"
JBRULES-1408: Refactoring of ruleflow to act as a pluggable process engine
Refactor uk.ac.bolton.archimate.editor.ui package
Refactored sopremo common
for cycle refactoring continued
minor test refactorings
Refactored code.
Refactored BenchmarkModule so that each implementation must return the Loader instead of invoking itself Each Loader is also given just a Connection and the BenchmarkModule handle. All of the redundant stuff (like fetching the tables from the catalog) is done automatically.
"MAGNOLIA-1188 refactored the module class into SimpleContentModule, now using the module's mechanism property MGNLEE-9 initial import"
"Add some refactoring, fix issue #54"
Another refactor of the layer preview info in the dataset DTO.
refactoring to make model stateless
Small refactor
#NAME?
"Intermediate commit refactoring FragmentPileup to (1) make it more accessible (now in utils.pileup) as well as (2) improve performance.  Passes all integration tests now.  Upcoming refactoring will change further how the system can be accessed, and further improve performance."
Refactored code
API refactoring to help with parsing classes for automatic ruby generation
refactored into new package
refactoring and cleanup
"REFACTOR: now implement ObjectFilter with strong typing, instead of inheriting from SearchResultFilter"
app refactorings
Implementations for various test cases and refactoring of code to provide both api and impl for API classes.
"Refactoring of Structure ssbonds interface, as described in #341"
Refactored
"refactoring, fixed manacurve bug"
WINDUP-299  Refactor FurnaceClasspathScanner
waitForStartup got inefficient. Refactored it.
TFJ-669 method name refactor
Refactored code.
Refactor Loss into Output Layer.
refactor package name for consistency and use ...solr.indexer as package name : now we have all indexer in one central place
LOG4J2-1296 ReusableParameterizedMessageFactory small refactoring
minimal refactor on socket management in connection manager
Small refactor
Refactor to allow more flexible flow creation (instead of purely static flows)
[SECURITY-218] - Refactor the test package to address comments from @jglick
#POULPE-469 Testcoverage and refactoring for Database backup functionality - consolidate all code under one package.
Refactor lifecycle mapping editor to use extensions to do all of it's dirty work.
property getter refactory
#675 refactored the Options/Metadata classes so they can be deserialised in AbstractDataStore; so we can killed containers now
Circle_Fitter: refactored to make it scriptable
"[updated] LwjglInput to pass delete key char for keyTyped event. [updated] TextField, refactored to match rest of scene2d.ui."
Small Graph subsystem refactoring.
Ticket#16: Refactored flash video classes and replaced FLVEncoder and FLVDecoder with java.nio.ByteBuffer.
refactor
ISIS-1243: minor refactorings while researching the issue to do with exception for action returning a Clob (now logged as ISIS-1264).
Big CollectorCron refactoring
Test refactoring; also ensure that #1413 does not occur
HGVS Parser refactorization.
GSG: refactoring: more logical java package names.
minor model refactoring
Refactoring
DS-3484: Refactoring builders and extended Browse by title test
refactor
refactored StatsDWriter to allow unit testing of issue #105 + introduced unit tests proving issue #105
Refactor tests to use varargs rather than parameters
[refactor] Extract ApplicationContext activation to class
Refactored out property manipulation. Changed Neo dependency to current b7. 
"CSPACE-418 relation entity schema is flatten CSPACE-81,394 schema extension supported between consumer and service using multipart messaging, between service and repository using nuxeo repository. relationship service is refactored to use repository client and document handler. tenant binding updated for the relationship service. service context and document handler are further refactored to accommodate the use case of ""local"" service-service interaction and ""remote"" interaction. All remotely accessible services now use RemoteServiceContext and RemoteDocumentHandler. Removed unused RepresentationHandlers from all the services where applicable. TEST: services/trunk mvn test passes"
refactor: move frontobjectmapperfactory to jackson module and make it self discoverable
Refactor IdentifierGenerator method names.
# POULPE-157 * Refactoring of methods that accept parameterized collections to use ? extends BlahBlah instead of BlahBlah simply * added test for BranchPermissionManager * Couple of methods were renamed
Issue 86: refactored code up to storage level for create options and metadata listing
Minor refactoring and cleaning up of basic authentication interceptor.
Refactored tests so that the same code can be run in single-JVM and multi-JVM environment
created javamail module and begin refactoring javamailer class
Further refactoring of client-side API
added WebDriver version of PhaseInfo class initialization of PhaseInfo in abstract classes refactored two buttons added to MetamerPage
Created a new API for invoice that triggers the creation of invoices. Also added tests and refactored the catalog tests as a start towards providing programatic catalog mocks
"Refactoring, translation and removing dead code"
refactor jwt impl for allow extensions.
ACT-33: Refactor ProcessEngineConfiguration to separate out factory reponsibility
Refactoring of open answer validator in the case of a data source is used to compare to the data entered: data source should not be serialized with the validator as it may contains unserializable beans.
refactoring
Closes feature #2085 and refactoring
Refactored MovieListGenerator module name to use convention
"Refactored server classes and finished implementation. Added xslt and updated js. Only things left are to update CSS to work with new modules list page, and test the code thoroughly (could do with adding JUnit tests now the code is complex enough to warrant it)"
First refactor for Lejos 0.9
refactoring
#NAME?
Jajascript optimisation + refactor
Initial API refactorings for multi-tenancy.
packge structure refactor
Refactor the commands and name them with a Command at the end
Refactored some of the code out of the validation error classes into two new message classes.
ISIS-903: refactoring TranslationService so can write out .pot file...
"Refactoring, code cleaning, additional tests."
[jvm] refactoring: renamed org.jackie.jmodel -> org.jackie.jvm
FACES-1385 Refactor icefaces3-chat-portlet to make it look more like the Liferay chat-portlet
Refactoring binding API. Adding support for generic types.
"Added scoping, in particular singleton scoping Refactored Variable Expression generation into decorator pattern"
issue #196: major refactoring. seperate SUs. now an live-servicemix accepts http-requests
Jetty9 - Refactored SelectorManager and SelectChannelEndPoint.
refactor(engine/container): extract JMX core
Refactorings due to integration of dynamic feature types / app schemas
core: refactor DnsSrvLocator to allow mocking
Tokenizer optimisation/refactoring
Some refactoring for pull request https://github.com/wicketstuff/core/pull/371
Refactorings regarding GUI elements. Prepared ContactPM.
"Major refactoring, win conditions are done, world preparing is done"
"Fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=256133, additional test to improve MeasurementHandler coverage for further refactorings"
refactoring
Do some refactoring. Save JMX metrics
Refactoring swift test framework.
Refactored to remove references to Spring Batch domain objects
NXP-5417: fixing errors related to management statuses refactoring https://jira.nuxeo.org/browse/NXP-5417
code refactored.
#NAME?
Refactor marshaller interface hierarchy
Closes #440 - Refactor Environment & ITBaseImpl to only use one curator
[ENG-137] ViewDefinition refactoring to add ability to specify desired SECURITY and PRIMITIVE outputs
Refactor OrderService.getOrders- TRUNK-4173
Refactor submit logic into gerrit-server
"A bit of refactoring, preparing for the second test - working with attributes"
Bit more test refactoring (to get to 2.3-rc1)
* Fixed the jvstm-mem backend Transactional Manager which was outdated. * In the middle of refactoring RelationSet (and alikes). This part of the commit is incomplete and is only for remote working purposes.
Refactor colorizing method for Java 9 standards
Simple refactoring.
SpiceList API refactored.
Refactored for ABM-227 and combining with ABM-228
TypeArguments refactoring (#477)
#NAME?
Big refactoring (JCZ 4.0.0)
Minor refactoring of Hazelcast implementation
refactor of __insert_update statements
srm: Minor refactoring of job loading
refactored running metis
Refactor move of parser classes
add - refactor craft-atom-nio component#re-test
"new constants, hop-type; refactoring to help support form-submissions"
General refactoring of system and stress tests into a consistent hierarchy.
Testklasse refactored
alertmanager: refactor Notification groups page
Refactor of xmpp provider so that xmpp provider ui can access XMPPContainer and XMPPSContainer classes without them being in internal packages.
Removed incorrect algorithms. Some refactoring. Added few data structures and algorithms.
Refactor common functions into AConstantTransform
Completed initial ResultSet. Completed SPARQL table definition process. Refactored code to make extension points clearer.
OFC-279 Perform code review and refactor DataService
"Added ActivityLifecycleListener interface, with associated Impl helper class. Refactored AdMob and Flurry integration helper classes. Added Socialize integration helper class."
Refactor gerrit flush-caches to just flush everything in Ehcache
NXP-14879: Refactor to have dedicated class per aggregate type
Refactor RabbitMQ handling
Refactored the TestRunner class.
Refactor packet writes into their own channel handler class.
"Refactored ""src/dao"" source folder to ""src/main/java""."
refactoring update tasks
Fixed broken DocnoMapping builder for medline collection; refactoring & fixed broken javadoc.
"REPORT-685 - Expand CompositionCohortDefinitions to other types of Queries.  Refactored the CompositionCohortDefinition and CohortExpressionParser to create a new abstract base class for any CompositionQuery and CompositionQueryEvaluator, re-implemented the CompositionCohortDefinition/Evaluator using this mechanism, and added a CompositionEncounterQuery/Evaluator.  Also added some unit tests for both, which were not previously present."
"Add WinstoneConstant, refactor filters, jndi manager interface, and prepare moving to net.winstone.core package"
"Minor cleanup and refactoring in workbench service tracker, use generic types"
Refactored entity element assertions for single top level community
Refactor inner class Castling.Type to package local
Refactor method names in MasterInfo.java to be consistent with other parts of code
big refactor to support latest oauth2 changes
Refactoring package names
Refactored RemoteImageLoader and RemoteImageLoaderHandler to be more general purpose and not useful only for ImageViews.
[news] Refactoring and testing for News Check Feature
RenderTasks have been refactored to use pools. This reduces garbage collector slow downs.
test refactoring
refactor neptune extension code
Jetty9 - Introduced a onReadTimeout() callback and refactored into AbstractAsyncConnection.onOpen() calls to onFillInterested() that were previously done by all subclasses.
"shell: refactor: generator templates are now layed out as they are output, and using their target extensions"
Small refactorings.
"Created ListAnnotations utility (extends CommandLineProgram) 	--Refactored listAnnotations basic method out of VA into HelpUtils 	--HelpUtils.listAnnotations() is now called by both VA and the new ListAnnotations utility (lives in sting.tools) 	--This way we keep the VA --list option but we also offer a way to list annotations without a full valid VA command-line, which was a pain users continually complained about 	--We could get rid of the VA --list option altogether ...?"
refactor the components for substitution
refactored method: addObjectsToJsonToReturnElseAddFailedPrivilegesMessages
Refactory: Equals e HashCode para model Assunto
Refactor BeanPropertyAssocOne findByParentIds use of raw expression
"refactoring. If it gets like a bean and sets like a bean, then it is a bean."
refactored the wager recording solution
Refactored SQSConnector into an abstraction to allow for easier implementation of multiple approaches.
refactored package namespaces to com.dubture
HSEARCH-1652 Refactor SerializationTest to allow reuse of most of its helpers
ACCUMULO-898 refactoring and deprecation of old tracing
Lesson 1 Step 5 (+ refactoring)
Changes to Spring security rules. Code refactoring.
refactor
Refactor the grouping code into AbstractGroupedValuesEvaluator
[SERVDEV-49] - Minor refactoring to comply to pentaho-helloworld changes.
118871: [refactoring] Rename type with similar elements should match with plurals
refactor int delta monitor
refactor
"JSEC-37 - architectural refactoring in preparation for 1.0 - simplified implementations and implemented some best practices based on Joshua Bloch's ""Effective Java"" book."
[bittrex] ticker to market summary refactoring
refactor code
security classes refactoring
refactor testcase
refactor wrong spelled name to SlowUpdateBlock
NXP-2661: some refactoring on the IndexingTaskQueue
move the existing ICMP code to the new API the discovery code has not been refactored yet; I fear it's crazy threading stuff  :)
Refactored dependency API #2
Refactored BlockDesign to supposed Quad/Vertex/Texture/SubTextures
small refactoring
refactoring knife API architecture
"refactor: implemented filtering of location by country,by type and country and type"
"More serialization refactoring of more requests (backtrace, etc)"
"more entityresolver refactoring 1. stopped using class as the cache key, using class name instead; the old impl. was a bad idea to beging with, and now with class enhancement it adds some uncertainty to the picture 2. deprecating lookupObjEntity(String) - it is a duplicate"
Finished refactoring history wizard UI
ResultSetProvider reads ResultSetRewindable SPARQL endpoint access in DataManager refactored using Jersey Client API
refactoring no road. fixing tests.
"refactoring for configuration stack, SYNCOPE-158"
Refactor out configuration save methods
Refactored test classes.
refactoring for score in frame
"[SCM-160]Refactored tck tests, added changelog tck test and added changelog, diff test for the bazaar provider Submitted by Torbjorn EIkli Smorgrav"
Mouseover->plothover event refactor
"Refactor the way a CalendarEvent and a CalendarEventOccurrence is structured. A new class is defined to gather all the properties specific to a an object in the timeline of a calendar: CalendarComponent. CalendarEvent and CalendarEventOccurrence encapsulate now an instance of CalendarComponent as the main part of their properties are now provided by an instance of CalendarComponent. CalendarComponent is a technical class that defines all the properties an object planned in a calendar must have. Its name comes from the ical specification. To prepare a change into the management of the occurrences of a recurrent event so that it matches the way they are managed in the ical specification, CalendarEventOccurrence is now an entity that can be persisted with the changes operated at the occurrence level (it diverges then from the recurrence rule of the event it comes from). For instance, the management of the occurrences of a recurrent event is kept as it is up to now; the work on the occurrence lifecycle management will be another commit"
Hibernate code generation launch dialog added and test refactored
"#220 - Refactor Persist batch, add effectively add PersistBatch.INSERT (to ALL and NONE) and allow batching per request (save(), insert(), update(), delete())"
Refactored ComplexBlock to TileEntity
* refactored git plugin some to support github!
Minor refactorings
More Preferences refactoring
"o Review, formatting, refactoring and additions for PAXLOGGING-49, PAXLOGGING-50, PAXLOGGING-51 and PAXLOGGING-55."
SLICE-109 Adding more test scenarios. Small refactoring
GTFS Validation : refactoring step 2
Refactor Extension Manager pattern so that ExtensionManager(s) no longer need to implement the Handler interface defined for the ExtensionPoint.
proto rebuilt after addition of Website and Service messages. Changes refactored all over.
"Added pageOverflow attribute to the tag library. Refactored some code because the pageOverflow attribute was always read from the browser?s URL, even in taglib mode."
Globally : - fixing Unit Test around Ffmpeg - improving automatic popup sizing javascript method - managing clipboard page as popup window - fixing display in invite page on personal space (html tag were encoded) On Contact feature : - refactoring some code - fixing some technical methods (equals and hashcode) - adding some method javadoc comment - fixing the alphabetical sorting - fixing unit tests that were showing some problems around directory item aggregation - fixing the email display of a contact when no email exists for a contact - fixing a SQL query result - fixing the directory item aggregation with contact item (contact item that represents an explicit user is ignored) - modifying the directory result label - providing fax information for contact fragments
code refactoring
"Refactored ProfileContainer, WorldGroupProfile and WorldProfile."
"Big refactoring of RecurrenceCode, to deal with little features. namely bug 7180 (change recurrence instances to all day)  and it's opposite."
Refactored so com.wormhole_xtreme can hold more projects than just wormhole
refactored settings page and breadcrumbs
Refactoring? ??? ???? ??. Test ??
Refactoring ViewNode.getURI() to ViewNode.getURIWithContextPath()
Refactor authentication handling
"Refactor diagnostic message creation to (1) ensure that the wiki link is always added, and (2) make custom messages more flexible."
refactor
Minor refactoring and improving code styles
refactor
All WORKING.  needs refactoring.
[PLAT-1296] Refactor time-series master; Rename
CSPACE-5727: Refactored into abstract and implementation methods for easier extensibility; e.g. for updating moveable locations (crates or equivalent) for some implementers.
Refactored RexsterClient use of TCPNIOTransport.
"*** Again, 4 files were not checked out in p4 due to IDEA offline mode. Hrmpf. On the fly, moved EXML namespace URI constant where it fits better. Refactorings: * Got rid of ComponentSuiteResolver, because the ComponentSuiteRegistry has to be filled in advance, anyway, and this is what the IDEA plugin now also does. Simplified ComponentSuiteRegistry accordingly. * Split XmlToJsonHandler used for all EXML parsing into two handlers, one for the metadata (ExmlToMetadataHandler) and one for the Ext-component-JSON (ExmlToJsonHandler). The metadata is needed to (re)build the XSD, the JSON is needed when generating the AS3 class. Opened API to generate a single class. * Removed some too exhaustive logging and a few souts."
[PRD-5276] - Denormalized data source refactored to have the same fixes as banded data source.
Refactor indexed repos. Reindexing
Refactor ExceptionContext and derived. Context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
SONAR-3755 refactor the way to persist component perspectives
Lots of refactoring/polish.
final refactor breakout of private classes
refactory
"GH322, GH104: Refactoring proxifiers and adding javassist support"
NQueens: refactor Queen.x and y to Column and Row to be more like real-world examples
finished SCRUM-877 - page editor: refactor of code - unnecessary buttons removed from area
WFLY-1077 IIOP subsystem: Rename subsystem to iiop-openjdk + refactor
Ticket #2869 Refactor experiment page - Generalization: GeneTooltipProperty is a separate class NameValuePair<T>... now
Refactoring some constants and new abstract tasks class
refactored string helper code to helper class
"MediaTypes refactoring based on Map<Class, List<MediaType>> MediaType constructor accepts ContentType and Lang"
Huge refactoring about the management of the connections: - clients can handle multiple channels for the same server/db - used thread local to keep sessionId at client side
Refactoring to add some new ideas.
* added initial unit tests * refactored to ArgumentCollection * changed to not reject COSMIC sites by the panel of normals * initial changes to handle reduced representation BAMs
Refactor/clean up context hierarchy
refactor packages
"Minor doc updates, inclusion of javadocs into the webapp and refactoring of ""DailyBlog"" to ""Day""."
Refactor: Splitting out a general SocketServer from the AdbServer.
"CAY-1013 the RefreshQuery does not refresh LOCAL_CACHE queries (refactoring queryCache , moving it to the common superclass of DC and CC)"
"Put the management of the Indexers to CDI. For doing, the interface of the indexers have changed: they don't depend anymore on the MainSessionController and on the ComponentContext classes, but they depend only on the ComponentInst instance concerned by the asked indexation. Indeed, ComponentInst class gathers all the information that can be required by the indexation: the component instance concerned by the indexation, the space to which the component instance belongs, and so one. Some indexations rely also on the current user asking the indexation; this information can be fetched from the UserDetail class itself (it delegates the call to the cache management above the current user session). By refactoring the indexation API by this way, the indexer can now either delegate the indexation process to a business service (for example KmeliaBm for the Kmelia application or NodeService when the nodes are concerned, ...) or perform itself the indexation by using explicitly the methods of the business service."
refactor to prepare performance improvements
Refactoring. Adding QuickSort.txt (second programming Question)
Rename Refactoring: Could get lost when different heuristics yielded the same result.
Small refactoring of exception wrapping
Refactor package name
"refactor qa-utils and remove unused properties W-1003916 rev tkral, jsimone"
Issue 244: fixed jsch bug and refactored ssh error handling
Job xml substitution refactoring
"Code refactoring, no functional changes"
"refactored signing and validation, added jwk-based cache, removed keyfetcher, refactored client side class structure"
Refactor functional/server/SSL tests to JUnit 4
Refactor common code into a private method.
"Improved social bookmarks provider, refactorings."
NXP-15010: add add webdriver test on aggregates + rename SuggestBoxTest + refactor
api_refactor: move pod apis to admin pkg
minor refactor
refactoring
Refactoring.
Tx part code refactoring: TxHttp & TxSip
Clarifying signal operations and minor refactorings (cherry picked from commit b5a230e1cfc22714e482ec680f384bea0efef06c)
refactored heuristic truck hierarchy
refactor latex backend
"Refactored player data, commands should all work for offline players now"
KARAF-1296 Refactoring to split property loading and installing of bundles
XWIKI-7879: Refactor to confine delegation of programming rights.
Refactor code for extra work.
refactor util class name
IE response building fixed. Refactoring. #123
Refactored *Tag.java to taglib package
refactoring: Translator -> AbstractOntologyTranslator
Refactored switch currency logic to reset cart on currency change; left rebuilding cart with new currency method available via a flag that can be set on the CartStateFilter.
refactoring: new classes for DocumentInfo persistence
first refactorings for own module nanolets #223
"BridJ: refactored callbacks generation (prepared Native->Java callbacks), added very basic C++ test (tested on darwin only)"
refactor robust z score prtedictor
refactor default fare service to allow code reuse by custom subclasses
#NAME?
Refactoring of .jsp structure - decreased complexity of pages. Decreased complexity of actionBean classes - decomposed. Added parent-child structure among actionBeans.
refactoring
Refactoring the UUID code and the managing of add/update together into a core class. Adding place-holder AnalysisPluginInterface and uncommenting methods that remain relevant in the FeatureStoreInterface
document and refactor WalkStep
Refactoring to avoid unnecessary internally thrown exception
149462: [refactoring] all refactorings should work without saving dirty editors
refactor LowLeveLService into a proper proxy; unit test fcrepo-kernel/Datastream
SONAR-2804 Starting to refactor code for merged coverage
"Applied patch on behalf of Randy Rohrback, containing refactored MI commands (bug 159688)."
Code refactoring
SONAR-7705 refactoring
"DROOLS-488 ""Pluggable and Encapsulated Knowledge Types"" -Refactoring Value to Mode"
Package refactoring.
Cleaned up old CompositeRefactoring stuff
Minor refactoring
Added calcBoxByDistFromPtHorizAxis() to determine the horizontal axis of the circle's bounding box.  Did some minor refactoring and fix of test code.
Refactor duplication of RestServiceImpl version check
Refactored ServiceBusSenderPool creating a generic object pool.
tiny refactor
SPARQLResource refactoring
refactor testcase
refactor HeartbeatAlert module
Some reformatting / minor refactoring in the course of writing Convert_Out.docx
CLOUDSTACK-8607 - Refactoring attribute name
Refactored the Launch command code to be more clean and testable.
ADded Wakeful requests support + sample Refactored examples (a little bit)
"Refactored TokenProvider out of FileAttachmentServlet, also corrected name"
Big refactoring on server-side commands introducing the new OHttpResponse class like in Servlet.
Refactoring (move to Errai + GWT)
"Refactor, messages and fixes"
"Summary: Refactoring code for extra work.(T58020, T58021)"
Refactoring: Remove All dependencies from MetaManager outside download engine module
CAY-943 Support multiple cayenne.xml files in the project (preliminary refactoring)
refactor and bug fix for bike rental API
"Refactor propotype creator, moving it into the core plugins"
Refactoring to remove cycles.
Refactored the testing framework and added the first unit tests for the Java client using Netty as a server.
Refactor format package to use late binding of chronology
Refactoring: clean up int strategy factory
"Minor refactorings, add documentation."
refactor SerilalizeWriter
SONAR-5111 Refactored some ws to add response examples
Refactored byte buffered channel manager
finsh module refactor
CAMEL-1507 Refactored the MimeMultipartAlternativeTest
"Added Filter package, refactored Agent "
"refactored some package names, added rough ticker to Vircurex"
Refactor cursor.
100% branch and code coverage on CSVReaderTest and CSVParserTest.  This will make it easier to do any future refactoring or code changes.
"Improved IndexedCollection, refactored test to comply with standard test framework."
Fixed diagram settings to work properly; refactored most settings to the readonly interface while the settings dialog (for now) only uses the mutable settings.
Refactoring sur l'organisation du reporting
"refactored project names, creating mvn assembly to output distribution"
refactor the attribute view and model event manager code
merged from 1.2 to trunk (1.5). This is to merge the front-end / js refactoring
[refactoring] Moved DependencyModelResolver to public package
Added caching of AdobeRGB1998 and Generic CMYK profiles for use in getInstance methods. Added debug info. Refactored profile reading slightly.
refactoring of DefaultProvisionSource
Refactor Access token status to be not null
"refactoring, readme"
"[Amir @ ThoughtWorks] Refactoring on Birt Reports, making the payment area configurable through property file"
"refactoring of the resolveTransitiveDependencies call.  simplified by removing a bunch of duplicated code in addArtifacts - no need to merge, you have the full list.  separated the original artifacts (dependency artifacts) from the resolved artifacts (getArtifacts)"
moar refactor
TEIIDDES-402 More refactoring to fix failing transformation tests
refactoring packages: proxy classes
stable version with hibernate and refactoring
refactored logElementTree to stream the screnshot back.
https://issues.apache.org/jira/browse/AMQ-4005 - plugable lockers; introduce new API and refactor current KahaDB and JDBC solutions
Refactoring and small enhancements
"refactoring and bug fixing, road building working"
test refactoring
Completion of Named Annotation Refactoring test
refactoring of chouette-exchange-neptune : move import classes to specific package
Refactor collectd in order to introduce some DAO stuff as well as improve RRD organization
Refactored AbstractActivator.
Refactor classes to pass the HTTPRequest object.
"Refactored the code to make it more WTP API compliant by putting the wizard page into plugin.xml, instead of letting it hard-coded."
Refactor: Reindex -> Index reindex -> index REINDEX -> INDEX
Further refactored parsers.
IN PROGRESS - issue SOAPUI-3370: Refactor/update code based on AlertSite feedback https://jira.eviware.com/browse/SOAPUI-3370
Ticket#6: Refactored classes to follow service provider framework.
"replaced the extension for the extension point ""org.eclipse.dltk.core.manipulation.refactoringEngine"" with the PHPRenameSuppport class. (Issue #48)"
merge from refactor branch
Refactoring out redundant parameters in TestGraph#addRelationship method
* minor refactoring
A little code refactoring + fixed portals with Essentials
JarShrinker: refactor
[update:] core refactoring
Refactoring name
just some refactor
Refactored / fixed HolidayExpressionRelativeImpl; CentralBankDecorator unit tests
refactor the builder so it is easier to override behavior
corrected too intensive name refactorings. renamed variable back from extdocProviders to providers etc.
EntityManager refactoring
Refactored deegree-test-parent into deegree-cite-tests
Refactored some code
Refactoring the Job sort operation
"PDI 8970, 8244, 8202, 7780, 8253, 7744. MongoDb input now uses latest Mongo driver and client class (MongoClient); MongoDb input now allows multiple mongo servers, connection timeouts, socket timeouts and read preference to be specified for connecting to replica sets; MongoDb input now allows the user to specify whether the query entered is a standard query or an aggregation pipeline specification; MongoDb input now has drop-down boxes for selecting database and collection. MongoDb output has had some refactoring; MongoDb output now uses the latest mongo driver and client class (MongoClient); MongoDb output now allows multiple mongo servers, connection timeouts, socket timeouts write concern ""w"" timeout, write concern, journaling writes and read preference (for reads performed when determining the applicability of a modifier update policy) to be specified."
Separated head component and general refactor
Refactorings for PythonTokenManager.
o Refactored code
Async Loggers performance test refactoring
replaced findPublicMethod() by refactored version of findMethod()
Applied patch from trunk (rev 12478): [shk3] refactored a method
refactored common actions and added update of physical details
refactoring: moved parseHeader implementation to CsvProductFile
"refactored validation class to core package, new IP interval class"
"refactoring: move xml code to EpubProcessor, move epub cleaner code to EpubCleaner"
"refactoring: mainly renaming classes as ""EmbeddedRedis"" something."
"message refactoring, SYNCOPE-158"
#NAME?
Refactoring plugins to be session-scoped pt. 2.
refactoring of some packages
Minor refactoring
Refactored the ResultReader class.
more refactoring
Refactored
https://bugs.eclipse.org/bugs/show_bug.cgi?id=386062 - refactoring complete. Added generics for ExtendedPropertiesAdapter et al to simplify implementations.
"The program executable would be expandable (in the Modules view) only if it lived in the output directory of a CDT project. It should be expandable as long as it's anywhere in a CDT project. I fixed this for shared libraries last month, and realized today the same issue is happening for the program executable. This refactors that earlier solution to fix both cases. It also fixes an NPE that would happen if the shared library was in a non-CDT project, or outside the workspace altogether."
Continued refactoring
"Refactoring of poms structure (split dependencies, cleanup...)"
Refactored: extracted ArgumentList
big refactor
minor refactoring
"ITopic, ILock, MessageListener, some refactoring changes are being committed..."
more metamodel refactoring: ISIS-64 (removing cyclic dependencies within metamodel); ISIS-65 (simplifying the implementation of JavaSpecification); ISIS-67 (moving JavaReflector/JavaSpecification back into core.metamodel); ISIS-59 (more on combining member peer with members)
refactoring and documenting
HIVE-10042: clean up TreeReaders - ORC refactoring for LLAP on trunk (Prasanth Jayachandran reviewed by Sergey Shelukhin)
 ItEr25S12AltaTipoDeEtiquetas: [Refactoring] Rename prepareForCreate to initCreate
refactoring feeder configuration cleanup
"Revert ""core: Fixing/refactoring buildAndCheckDestStorageDomains"""
Refactoring
push reconnect latency and refactored getBrowserIDFromCookie (PUSH-163)
some minor refactoring and moved a test file to the correct source root
refactor distr based predictor for MR
Refactoring dialogs.
[PLAT-1011] Refactoring to get live results into batch db
Refactor (#2538)
Refactored build so that compile and test can be run by ant or maven. Still needs ant to build dist. Long term goal is to remove the ant specific stuff
"Add Where.globalcampus command, refactor 'global$FOO' commands and channels to query."
Some refactor for DutyList and Test for DutyList was added. (requires cglib-nodep-2.2.jar and easymock-3.0.jar)
classes and packages refactored
Quick refactor to share a method
"Fixing bug of includes from subclasses, including major refactor of XStreamSerializer. Closes gh-400"
[Refactoring] Moving REST resources and components to internal packages.
code refactor.
"Added language customization to message campaign, refactored IVR Controller names"
[KARAF-1405] Refactore of the config layer [KARAF-1190] Remove property filtering
Some model refactoring
MODE-714 Changed the base connector classes a bit to make it easier to subclass and use a different RequestProcessor. This resulted in a bit of minor refactoring to clean up constructor and method arguments.
Refactoring tests.Add StatisticsHandlerUnitTest.java
Refactor unit test for bolt
ISIS-987: some minor refactorings...
Nat: major refactoring in progress.  Replaced InThisOrder/InAnyOrder with  Expectations and after/before (not yet working).
big refactoring of tajin framework
Refactoring & misc changes
Springdata refactoring: fixed all services. Tests still to be refactored.
refactored AbstractClient: extracted RequestExecutor to dedicated object. Added abstract impls for it and minimized code needed for each non abstract impl
Bug 496135 - PDT tests refactoring and clean-ups
Refactor to add additional IsSerializable marker interfaces and to make profile not dependent on open admin
Refactored onCommand into something sane
Refactored: extracted a utility method
refactoring: move block device classes to proper package
Fixed bug #261 - got rid of the specific casting of its subclasses; added and refactored getFieldMap() method so that retrieval logic is properly encapsulated; subclasses can overwrite accordingly.
Asset refactoring
Refactored
Refactoring
TAJO-268: Refactoring Scanner and Tuple interface https://dbserver.korea.ac.kr/jira/browse/TAJO-268
Cassandra-Thrift refactoring
"refactoring, preparations for release to Maven Central"
name refactoring
"Started VCS samples, refactorings for VCS plugins."
"Amir, Vishnu | #0 | Refactoring save of forms"
"MAHOUT-947: add new inputs to seq dumper, refactor to common CLI input"
Refactors StringUtilities
"#273: Completed demo's, more refactoring in MtGoxMarketDataService"
package name refactoring
refactor core abstractions
"refactored listservice, html stuff to html package"
getStatisticsForRecordTypesByInterval plus refactoring
Refactored byte array handling.
gPlazma refactor.
OGM-735 Refactoring BuiltInTypeTest to have one test method per supported type
Bug 457924 - Migrate refactoring tests to JUnit4
Code improvement: minor refactoring and exception message improvement.
[PLAT-3794] Refactored into separate methods to fix checkstyle method length warning
Major refactoring of the amqp related objects (mainly related with threading).
[MIN] Refactorings
added zip example massive refactoring for better structure
Refactor CursoredResult interface hierarchy to add getResult() method
Refactor gtfsrt-webapp code into new module
refactor emit functionality
"additional tests and refactoring of fix for https://issues.apache.org/activemq/browse/AMQ-2985, not updating subscriptionAck with an unmatched message resolves recovery of unmatched selector durables, reveting the previous change"
MemoryStats refactoring
Refactor of CRTC
refactor BasicCStoreSCP
refactor(ajax): better method names
ISIS-188: more refactoring of artifacts
"Big refactor, logic moved to ProxyConnection"
Refactored the MonochromeBitmapSource hierarchy to share a great deal of code and shrink the derived classes considerably.
Refactoring and repackaging
NXP-11260: Refactoring AutomationServerComponent and JsonComponents to provide Jackson ObjectMapper configuration on higher level
kie-server: refactor structure of -tests modules
refactorings
Refactored FabricService and ContainerProvider to provide a single method for creating agents using CreateContainerArguments. Renamed CreateContainerArguments to CreateContainerOptions.
messaging XML / XSD refactoring
Refactored to fill out defaults
Refactor listNetworks logic to use new IAM model.
ItEr58S14RecalculosConexionEscenariosItEr57S15: Refactor.
"Refactored test classes, added OSGi bundle manifest check to avoid restriction on source and destination and changed the approach of test resources."
Refactored a little tad
db kv job storage refactor
continued refactoring cli system
more refactoring of map options
Continued NodeGroup refactoring
Updated for the IGenerator/IAtomContainerGenerator refactoring
Refactoring and cosmetic changes
Refactoring related to #22. Created new ast node ListExpression which corresponds to comma or space separated lists. ComposedExpression will now be used only for binary expressions.
Refactor
"Major refactoring of the SpringHelper injection functionality, and the addition of tests for it."
Minor refactoring in TreeLCA
EST-241: refactored WithInterval interface and fixed and extended broken tests
Remove any dependency on CriteriaForm and instead fully utilize the map of request parameters for sorting an filtering list grids. Refactor the filter in list grid headers into its own partial
refactoring cont'd
refactored ConstrainedDragAndDropView for ease of subclassing
Refactor PizzaUnitTest (#1527)
ReadEntryProcessor V3 refactor
"refactor so mutable vectors support ordinary read functions: get/count/nth/function-call, with thread safety check"
Refactor maybeInit logic from plugin facets into AbstractPluginFacet and add test case.
Refactored the GremlinExtension a bit and added unit tests.
Added support for binary encoders and decoders. Refactored the decoding process in WebSocketEndpointImpl.
receive fault refactoring
Refactoring DateTimeFormatterModel
Refactor jaas login sequence to only fetch role data if user is authenticated according to that module.
refactor data load complete
"Refactoring: abstracting duplicated behaviour of the create comment and edit comment pages and comment panels for issues, documents, and milestones into abstract classes. For Issue:112."
[SHRINKWRAP-140] Renaming and API refactoring atop kpiwko experimental branch
Refactor MemoDocument to be test object
"refactor the way property value are managed, code still a bit gross, but seems what we need"
refactor HTTP headers
maven refactor
Feature #8017: - refactoring the save method of Silverpeas JPA Manager in order to avoid to handle an OperationContext - adding reflection tools for Silverpeas JPA Entities management
refactor(case/core): divide & conquer responsibilities
refactored tags
Updating synchronization for providing SSL warning when necessary; step 1: refactoring based in RemoteOperation (DONE)
Refactoring
CMSPLT-25 Refactor the Attachments portlet so that files are downloaded directly from the filesystem and move the on-demand generation of the filesystem content to a filter.
#311 - Internal refactoring to expose some Solr methods
Refactored name to be clearer.
Work in progress: refactoring HttpDaemonTest with MethodSupport.
MNGECLIPSE-1780 update maven to 3.0-SNAPSHOT-r826672 Refactored m2e transfer listener API and implementation to accommodate new maven core API (still incomplete)
Refactored Tree expandTo.
280202 - more refactoring
[refactor]: execute SQL in async jdbc instance block
Feature class name and hierarchy refactoring for consistency
Some refactoring of imprecise naming of the Infer Relationships code
finish object refactoring
"start of jndo refactor THIS DID NOT WORK for now, i just make svn backup"
Some refactoring in Winding
refactored misleading comment and method name
apply refactoring and durability changes
Global refactoring to introduce ParsingContext and PersistenceContext. Still failing unit tests
"REFACTOR: now implement ObjectFilter with strong typing, instead of inheriting from SearchResultFilter"
refactoring the annotation name from CompareObjects to Compare including some attributes.
Refactor json deserializable using anotations
"refactor again, and get tab at start of line working"
"SOAP-1477: Merged changes from BasicAuthenticationInspector and OAuth2AuthenticationInspector, and some refactoring"
refactoring
refactor testcase
refactored to move solr common objects to orcid-utils
Refactored notable code into superclass.
Refactored TCPIP (including NIO support) code for JGRP?240.  TCP_NIO no longer extends class TCP and ConnectionTableNIO no longer extends ConnectionTable.  They instead share a common abstract class with shared methods.
Issue #568: Expose the application configuration through Java APIs Major refactoring to allow custom configurations for different entities Issue #524: Improve user groups Customizing the patient record is now possible for groups
"Massive refactoring to use spring, most things are automatically injected"
"WithInterval refactorings/extensions, also layout"
Refactored the Teleportation Method. Finally Closes #1 :D
Moved net.fortytwo.ripple.flow package to net.fortytwo.flow.  This package is generally useful and will be moved to its own project after some more refactoring.
"massive refactoring --- isolating Gremlin specific stuff from the models and their implementations. Also, creating a wrapper around the function and functions interfaces of JXPath--this way we can control better how functions are defined and accessed."
Progress on Bio-Formats Importer refactoring. Probably some new bugs.
#26 added static factory methods to DeliveryHistory again. Exception thrown for contradicting PurchaseItems has message which attribute is contradicting #30 Created BusinessInputException - need to refactor all IllegalArgumentException calls
"A bit more refactoring to remove silly names, and add access modifiers."
bug 245772 - NLS Message refactoring
Refactor the tests to use a central ArrayDisordereed Diffy.
"Refactoring: QNm.uri isn't public any more, please update your code... several fixes (analyze-string, Serializer...)"
Minor refactoring
slight refactoring and polishing *tracking down bug in tree building
Updates and refactoring to kie-wb-tests-base
refactoring and archive download support (not working for at this point)
"Refactoring of DiscoveryView and associated classes.  This makes the DiscoveryView much simpler, and removes all discovery code from collab example app.  Also formatted and did string externalization for org.eclipse.ecf.discovery.ui classes.  Added extension point org.eclipse.ecf.discovery.ui.serviceAccessHandler extension point so that plugins can add service access handlers to the context menu for individual service entries in the discovery view."
"refactoring: plugins that don't generate java sources don't need to inherit from AbstractModelloGeneratorTest, AbstractModelloTest is sufficient"
"Add XYZ corner probing, fix several small bugs in XY and Z probing, refactor visualizer components for better reuse and readability."
javadoc and refactor
Refactored: renamed SilentMessageLogger to NullMessageListener
Refactor showSelectedAllocations
refactoring survey model
Added furnace block changing and refactored window messages
refactoring and added test for simple OT scenario (not yet passing)
"XWIKI-3431: Implement the new UI for the Image dialogs * refactored image insertion dialogs to use the wizard paradigm * added menu bar entry for the image options and removed the default toolbar entry XWIKI-3712: Create an improved Image & Attachment Insertion UI * added an option for selecting the image from the current page, selected by default Refactored and moved link plugin generic classes in util and widget packages to be used by both image and link plugins (and others). Fixed various javadocs, improved code. Added isc_useSimpleNames=false to prevent conflict of smartclient with prototype."
[PLAT-1296] Refactor time-series master; Change package name
ItEr43S12CUGravacionModelosUnidadesTraballoItEr42S17: Refactoring. Splitting method not cohesive method into several.
Refactoring in DefaultBackEnd
[MOD] XQuery refactoring: std. functions moved to own classes
"[AESH-270] more refactoring: - CommandRegistry have a findAllCommandNames method - CommandLineParser have methods to access childParser, clear ++"
"Refactor dexlib so that the output is generated directly, instead of using the StringTemplate library"
Test GroupWithRollUp More refactoring done for removing dependency from Pangolin
JBIDE-21059 - expand adding debugger to local servers run externally Refactor some internal classes Ensure attach-debugger setting is respected
Refactor codec and add checkpoint.
336511 - Exclude Refactoring
Massive code overhaul/refactoring. Working on objective tracking.
"ACT-119: Add web service - Create message, structure classes. - Improve parsing to handle itemDefinitions and structures. - Add a first version of the test for the web service example. - Refactor WebServiceActivity class."
Some refactoring of router classes
Refactored session handling and creation.
Full refactoring based on new integration
Refactored SubmissionState to SubmissionStatus andded SubmissionState enum
* ExtractorMultipleRegex.java     more refactoring to avoid redundant operations
PF-226: Refactoring of PanelContext and *LPanel components.
refactored test for expiration delay of entries on backup partitions.
Refactoring PreprocessClueWebEnglish.
WYCS: a fair amount of refactoring.
Added initial design for Duel and refactored existing controllers
MOAR refactoring
[FIXED JENKINS-23523] Fix external delete reg. exp and refactoring
"REFACTOR: ZipNumIndex/ZipNumCluster better error reporting for failed attempted block load, single function for doing block load (with and without cacheing) FIX: typo in cdx9 LineBufferingIterator reverse: remove old lines from buffer past limit"
JBEHAVE-691:  Added null-object impls of AnnotationMonitor and EmbedderMonitor.  Refactored all impls to extend null-object impls.
#2 Refactored Authorization Concept - Added spring project to better support spring security - added special bindings projects for backbone and angular.js
refactoring
little refactorings
Major update for Netty 4.0.0-CR5. Major refactoring to remove some unnecessary middlemen.
Refactor RequestUtil and add RequstUtilTest
refactor modello to move test code out of modello-core
Harshit & Duck | Refactored repository integration tests.
Refactored futures into toplevel classes.
Added a working Spring authentication provider. Refactored filter not to need an authentication provider.
Refactor the loading of the database of the 12th stake entities to a separate class.
Extensive refactoring of the CastorCMP11_EntityContainer Encapsulated Castor specific code into a CastorCmpEngine Renamed remaining CastorCMP11_EntityContainer to org.apache.openejb.core.cmp.CmpContainer.java CmpEngine implementation is created with a pluggable CmpEngineFactory specified with a property of the same name and the default being org.apache.openejb.alt.containers.castor_cmp11.CastorCmpEngineFactory
refactoring of 2q size increase adding test case for am queue
Continue ripping out first try at pagination / Minor method name refactoring
"Initial attempt at refactoring STIF, needs work"
Refactored some things and added a server updater.
Partial refactor for adding in new saved search logic
small refactoring set default encoding to UTF-8
"refactor WallFilter, change permit > deny"
Refactored DdocMacros. Changed behavior when processing a DDoc macro that is undefined.
refactoring
"Core: refactor type update logic, pt.2 (#935)."
"- getAcceptAcademicServiceRequestSituationTypeFor => getAcceptSituationType; refactored into sub-methods - allow concluded requests to be canceled - isRequestAvailableToSendToExternalEntity: state independent, using getAcceptedSituationTypes - getLoggedPersonCanCancel: only avoid canceling delivered and already payed requests"
teiiddes-2158: Refactored REST procedure validation and added check to the auto-generation REST WAR checkbox on the VDB editor. Will prompt user to add REST procedure if they select the checkbox without a valid REST procedure included in the VDB and set the checkbox to false.
Minor code refactorings and basic validation of 'entry/feed' tags.
CalcDistance -> DistanceCalc refactoring
#NAME?
Created NCSSelectionTree component that provides a tree view of the NCS objects. Refactored SelectionTree so that it is in the API package to be reused. Updated Javadocs for topo API classes.
TFJ-83 method name refactors
"Issu 301: refactored utilities that depend on guava. introduced Crypto, CryptoStreams, and more Payloads to help deal with encrypted payloads and headers"
Minor Refactors: renaming workaround
Added test bean and did some refactorings
The GenePage HTML table containing the gene associations changed id from 'phenotypes' to 'genes'. This change refactors all references to 'phenotypes' to the new 'genes'.
EST-564: getting to green after previous refactorings.
Refactoring runsCount for main question
Bug 472765: Restore test comments post refactoring
Refactoring of type assistant functionality
"pull#119: refactor pageObject, move some funtion to Aura*TestingUtil need to clean up WebDriverTestCase after this. @rev fabbott@ @bug W-2399472@"
"refactoring, cleanup - no functional changes"
Bug 418235 - [compiler][null] Unreported nullness error when using generic - modified version of refactoring in e638bcfa6ede2617a8de404af4af8024502bc348
"ViewNode implementation and JSF migration, refactoring of servlet context listener"
Deplow Wizard Work - remove single resource deploy - added install dir to deployment info - disabled config template selection - disabled scheduled deployment - added bundle selection (probably useful mostly for testing) - re-ordered workflow - renamed/refactored for clarity
Refactor executor service tests
Refactored OMX data set annotator. Fixed the issue if a annotation service is dependant on more then one feature. Implemented a tabix using CADD service annotator.
Refactor: Extract interface from Mutator and move it to the api package
Refactoring IconBehavior
Refactor the code a bit
"WINDUP-520: Tests passing, some more renaming & refactoring"
Refactor to pull costs and maximum rental to Movie subclasses. Tests now all pass
generalized test listeners to allow inheritance; little refactored
move the existing ICMP code to the new API the discovery code has not been refactored yet; I fear it's crazy threading stuff  :)
Refactored and cleaned up some methods in the Push command.
"Refactor one part of the ""Cov-build"" command. The part that was done in this commit is the part calling the cov-build for script sources, not compiled sources. Also, renamed the package that all the command classes are inside."
TURMERIC-1310: refactor unit tests and remove org.unitils code.
Refactored the way that additional data was stored when building for Levels and Topics. Started to update the builder to work with translated topics.
finish refactoring MFParmInterceptor
"major refactoring, 1 class -> 7 classes"
"Refactored how references work, added ReferenceResolver for customizing references. Cleaned up some code and javadocs, moved some classes the the ""util"" package."
"Refactoring, introducing a classical layered architecture (but anemic models...)"
Scalaskel refactoring
Refactor Guice injection of Forge API and Forge tools
refactored misspelled method name getminumum
#24 : working on Royalty report refactoring and tests
major renaming & refactoring (standard conform naming!)
Refactoring
refactoring
refactor Exceptions package
Refactoring LocalMBeanServer and implementing a simple TransactionManagerMBean
#NAME?
"Refactored: renamed api.impl to api.internal, renamed IEntity to EntityObject"
Refactoring: towards generic gs-content import wizard.
Refactor test map code to be more modifiable
Refactored a facade interface in over spymemcached to resolve testing issues.
FIXED bug 166600 - [DataBinding] Refactor tests to be in the correct packages https://bugs.eclipse.org/bugs/show_bug.cgi?id=166600
QBN: refactor out a remapImage method
"Refactoring some more vm commands, as well as refactoring the account and user validation into a method. Please use the same for future validation calls"
Refactoring for fixing properties variables propagation
refactored the OfferCustomPersistenceHandler to add the json directly as a property. moved the RuleBuilderFieldService implementations to the broadleaf-admin-module refactored the BroadleafAdminOfferController and rule builder to handle new persistence handler
118399: [refactoring] Rename type with similar elements does not work for URL
Internal refactoring to make it easier to write renderers. Introduced the notion of chaining listeners.
refactor done
Fix some changes lost in rebase Refactoring of core Table component to not build list grid on construction Move to explicit table configuration lifecycle Fix the rest of the list grids that were not extending Table
"refactoring invoice calculation and lease terms, fixing other errors on the fly. will break the build"
Refactoring.
Some bug fixes after testing all BPMN2 Examples from OMG. Refactored DIGenerator out of DIImport class. Added import diagnostics reporting dialog. Added Resource List to UserTask property page Removed Start Quantity and Completion Quantity from Activity property page.
Refactoring of Editable Elements
refactored generation of tiles
refactor: from com.st.stgcov to org.eclipse.linuxtools.gcov
Some minor refactorings
Refactor TmfTrace and dependencies - finalize ITmfTraceIndexer
"Immediate stars feedback, refactorings."
DNA-205 Rename/refactor classes https://jira.jboss.org/jira/browse/DNA-205
ftp: Refactor GSS FTP door on top of DssApi
Refactoring
refactored console client to be more extensible
Refactor plugin and debug console
Packages refactoring
Refactoring package structure - step 1.
Test apps refactoring; Brad's JEE sample app for JBoss added.
Refactoring
Refactor SyncDatabaseActivity to SyncDatabaseHelper POJO.
Class and methods refactoring
engine: Refactor network hibernate daos
Refactor to support release() method on CreationalContext
fix minor inheritence in renderers and refactor most of them
refactoring database utils
"JBRULES-1598 Efficient WorkingMemory serialization with binary protocol -initial non-working impl -refactorings so PropagationContexts reference LeftTuples and not activations, and also the facthandle -FactHandle now uses an int for id."
Refactored address standardization into auxiliary - also adding general vendor service support
Various logging refactoring for ...bootstrap.Main.
CubeListener refactoring changes Prepared JDBC batch size usage in JDBCLoader
refactor lease into agreement
[MRM-1704] Refactor to remove maven specific part from various repository/metadata apis
"refactoring: extract inner class from JSTypes, move factory methods to RTypes"
Refactoring the API to add end() methods to all classes for proper fluent support
Minor refactoring to move some noise out of PMD.java; cleaned up imports
Code refactoring.
Refactoring mary server.
"fixed #282, issues with turn restrictions, also important refactoring: using nodeVia always as second parameter"
Refactoring (incompleto). Fazendo testes passar
refactor FixedSizeCompressedObjectStrategy
Initial refactor of GenericBean onto Property
Refactored PlayerProfile.
refactor sql parser
refactor code
trying to refactory/simplify config-overrides access via BeanPropertyDefinition
More refactoring and testing in the same classes
"[MOD] Core, tests: global option and system property handling refactored"
Refactored state from abs client stream to abs stream parent class. Fixed some of the jetty plugin build issues. Added server stream unit test.
Intermediate commit with test case refactoring for Dan
https://jira.jboss.org/jira/browse/JBIDE-4361 - refactoring -> javaProject should not be a member of OrmDiagram.
refactoring session access behind SessionFactory
MIFOS-4190: refactor dtos to serviceInterfaces package and add spring security for centerServiceFacade
Refactor
WMC roles / datadir - refactor @jusabatier's work
Refactoring to use resteasy + jetty for serving the REST API.
"uncomment test45(), refactoring"
refactor task-specific topologycontext from a more general topology context
metamer: facelets and tests of input components for @convertor and @convertorMessage refactored
more Http and Net refactoring
"[issue:2257] IDF downscaling support, refactoring"
refactoring
api_refactor: refactor vpn and vm apis
Refactored ontology core test package names
Huge refactoring improving the OrientDB internal memory model: - level-1 cache bound to the database - level-2 cache bound to the storage
code refactoring - some cleaning work
"refactoring, trimming, documentation, cleanups"
NMS-9290: Refactoring reload operation to handle configuration errors (Part I)
LILY-359: refactored to bring a bit more structure in the code
refactoring DocumentManagerFactoryImpl
refactor package
pmd: Reviewed plsql pull request * reworked symboltable implementation of plsql to use the refactored general interfaces
refactoring a bit
fix regression of https://issues.apache.org/activemq/browse/AMQ-2870 from refactoring of fix for https://issues.apache.org/activemq/browse/AMQ-2985 - unmatched acks are now stored as negative sequence ids so that we can differenciate between a durables that have acked messages after receipt and those that have acked because of unmatched. Unmatched messages are now deleted in the normal way
Re #1256 Refactoring offset.
Fixes #1128 - Refactor the static asset services to work outside of the context of a Spring controller
Cucumber features refactored to improve readability
EST-417: Refactored Invoices and BankAccounts fixtures
[PLAT-2271] Minor refactoring and comments
"StackedPlot2D refactoring. Significantly simplified the way the layout of stacked plots is handled. Some classes were moved, so minor refactoring will be necessary."
getCause(Throwable): Refactored into two methods which are called internally.  This will allow more cause method names to be added with ease.
further refactoring for Task creation
Refactoring
api_refactor: move diskoffering to offering
Refactor Table_Test class and top index tests
Refactoring of OTransactionOptimistic. Fix warnings.
UI refactor from John
Refactored Composite ModuleConfiguration and composite annotations #29
created CreateJSFPortlet (and refactored CreatedJavaPortlet)
refactoring for L
Refactoring of blamer: make it work on slaves.
Refactor TmfTrace and dependencies - remove getTrace()
[PAXEXAM-588] Refactor of KarafTestContainer.start
ReportItemController refactored to create SQL dynamically by a FilterDispatcher. Unfortunately this commit has an error in GUI not setting the filter.
refactor - move
"refactored GpioPin interface to multiple discrete behavior driven interfaces based on pin types: digital, analog, pwm"
refactor ra module
Refactored joint estimation model to allow subclasses to overload PofD calculation over all frequencies.  Pooled model now takes only 20% of time that it used to. Added integration test for pooled model and updated other joint estimation tests to be more comprehensive now that they are faster.
Refactoring DbImport classes
Refactoring functions for equity variance swap with dividends treatment
Moved initialization code to aboutToPerformRefactoring
Refactor the code
Refactoring Jobs request list using standard UF api
Refactored TableRows to use a calculation map (still got failing tests)
Refactored
[OPENENGSB-3213] applied refactoring and checked with prePush
Refactores the db-specific codec packages.
"fixed tests with embedded jetty web server refactored connection setup refactored connection, resultset, driver added tests"
Refactor: Renamed IntersectCase to SpatialRelation  and renamed OUTSIDE to DISJOINT.  This aligns with OGC specs better.
"Replace DataStoreFactory with the DataStoreRegistrationHandler, to decouple from implementations."
Minor refactoring.
Refactoring.
[MOD] Core: various refactorings and renamings of helper functions
Added metadata endpoint to opensocial rest service and refactored for maintainability (fixes RAVE-912)
Refactored some long running tests (fixes #1269)
api refactoring
Minor refactoring in CF Application framework ApplicationDelegate implementation.
Refactoring: Now Created base class for screen and automator.
Serial performance test refactoring
Refactored some reusable code
metamer: inputNumberSlider: tests refactored to selenium 2
"Refactoring, cleanups"
Feature #8017 - renaming Silverpeas Core Calendar service project into Silverpeas Core Personal Organizer. Just refactoring the package name for now.
"Refactoring for MRELEASE-511: release:prepare ""Error parsing version, cannot determine next version: Unable to parse the version string"" when running in batch mode. "
refactored service packaging
First pass refactor to reduce or eliminate collection iteration.  All tests passing.
refactoring
Refactor restful request handling a bit.
"refactoring data model, external template"
refactor
done some refactoring to code...
"refactoring, javadoc"
Refactor merge logic in preparation for content type updates
Refactored the query side of mongo to use the spring data stuff
Aggressive refactoring.
"Added authentication for the Java client library, refactored builders and added unit tests."
#332 endless refactoring
Major refactor
#NAME?
refactoring: rename VM GUI classes
refactor
refactoring
Refactor: split up parsing without Model support.
vavr refactor (#1871)
"Refactoring - create input/output entities first, convert to MLData next."
"massive api refactor in progress. Refactored graph API, now working to bring tests and implementations into the fold."
NOJIRA refactoring packages of Config/CSP stuff.
Mini refactor the camel-cxf  test class 
XWIKI-8309: Finish new localization module More refactoring
a little more report refactoring. fix report type checking. freebusy and basicquery functional tests pass.
"o refactored Resource abstraction (again!!) now less retarded, but still not 100% as I would like. Unfortunately this actually breaks the API of all previous 2.0 releases :( o Added support for registering full json files on a key and environment. Kind of made the api breakage worth it :)"
Refactor the Synoptic code out of Skinnable portal and into the services and PortalService respectively.  (Yes I know Portal service is destined for a  jar somerday) but for now I move it into PortletService.
"refactored weights; Added population, higher ID bias factor; ASCII text matching factor"
refactoring Att Finders
Refactored: InMemoryDatabase
Refactored getIdFromEntity.
Name refactoring.
Refactored component to nameComponent on HesperidesColumn for clarity
DiracTrace refactored. Tests passed. More improvements can be implemented.
refactor usage of capability list generator
Refactoring
"Create new generated value vectors utilizing fmpp.  Includes: - First pass; integrate build system and some cursory implementations - starting to split common logic into base class - implement most of varlen value vector functionality, minor cleanup of tdd tags - added nullable derived class - Merge changes from JA, minor format cleanup. - minor fix and cleanup - added bit vector, removed widthInBits which also allowed removal of FixedBase ctor - apply TC's fix for resetAllocation() - added repeated value vectors - Hooked up templated ValueVectors to codebase.  Removed old ValueVector classes.  Cleanup. - fix repeated get() and add() - added some value vector tests.  fixed bugs in VV and some call sites.  generated TypeHelper from FMPP template.  removed unused VV methods - made base immutable, some debugging - split mutable/immutable basic VV types. minor refactoring - fix several allocation bugs - fix various bugs, only JSONRecordReader test is failing - fix nullable bit value vector - make bit vectors use ints to represent the bit value - remove superfluous logging - fix value vector getters and setter - comments and cleanup - temp disable repeated map JSONReader test - formatting - whitespace cleanups"
Massive refactoring to support a generified ObKey.
Added the refactored email subsystem
refactor the WebDAV code to support authentication and authorization - now the users will only see what their roles allow them to see.
#POULPE-312 Refactored method onDropItem() in ForumStructureVM class.
refactored Avatar persistence to use JCRSessionManager easily. Introduced the notion of JCRTask as the basic unit of work for JCR operations
Refactoring
Refactoring the LibvirtComputingResource   - Adding LibvirtGetVmStatsCommandWrapper   - 3 unit tests
some refactorings to make UaaManager's internals more reusable
#973 Setter and Update wrapper refactoring and cleanup
"- refactor iterators over values in IntVar:  > delete getLowUpIterator and getUpLowIterato, replaced by getValueIterator(boolean) > add getRangeIterator(boolean) The boolean describe the loop direction (bottom-up or top-down)"
Refactoring: moved package de.uniluebeck.itm.tr.nodeapi to de.uniluebeck.itm.tr.iwsn.nodeapi
Code readability refactoring--working on issue #1557.
"ClassData and JavaItem refactoring, implementation of rule -Change kind of API type"
Refactoring of JSON activity stream restlet in preparation for Atom restlet.  (B-06214)
changes and refactoring in order to integrate waitForPageToLoad after each HTTP request detected by RequestInterceptor
refactored to boundary service
"refactor, take 2"
Integration Tests - Dock refactor.
Some more refactorings regarding the Java5 transition
Refactored validation mechansim
SCRUM-812: a better looking mutton. Some refactoring and a couple of dirty css tricks
algorithms and jobs refactor
"[CLEANUP] - refactoring tests, for increase speed test execution apply checkstyle. remove dependency on implementation from tests"
"some refactorings, added destinations parameter to multi vehicle arrays solver"
Some major changes: - new CPD View - changed and refactored ViolationOverview - some minor changes to dataflowview to work with PMD
Refactor session implementation: rename SessionStore impls.
(ak) 1GDRW6D: ITPJUI:WINNT - refactoring wizard: should have a 'save' button instead of saving when flipping pages
Done some refactoring
Refactored exceptions.
Refactoring of ConsoleGame and Frame classes
Refactored for ABM-253 and finished.
KIE refactorings
ClearCase plugin: Refactoring PollAction and ChangeLogAction into common HistoryAction
Refactored DepartmentGroups in order to have lazzy loading. Unit functionalities now  in department portal. A new cloud tag search renderer. 
index refactor
Refactorings
"Added dao calls for looking up communities, refactored old location-based calls."
More refactoring of UpdateRRDs
refactor
Refactory by remove unnessary code
"Refactor, no functional change"
More refactoring
JSFUNIT-79 Removed HttpUnit code from JSFUnitFilter JSFUNIT-176 Removed all remnants of HttpUnit from JSFUnit - fixed/refactored/replaced many tests
Refactored PostMessageWindow.
Great TestEngine.deletepage() refactoring. MangleName() is now static
Refactored RWTServlet_Test and RWTServletContextListner_Test
"HER-1820 more eager xml link extraction  * ExtractorXML.java     instead of considering only strings that start with http(s):, consider all     strings that match UriUtils.NAIVE_LIKELY_URI_PATTERN (and, as before,     constitute the entirety of the xml tag content or attribute value) * UriUtils.java     - NAIVE_LIKELY_URI_PATTERN - add quotes to the excluded characters so it       does not eat the closing quote when matching xml attribute values, and       make visibility public for use in ExtractorXML     - isLikelyUri() - refactor false positive check into new method       isLikelyFalsePositive() so that it can be used in ExtractorXML avoiding       redundant check against NAIVE_LIKELY_URI_PATTERN"
Process Diagram API: Refactoring to also support waypoints of edges
SLICE-16 Refactoring fixes: getInjectorName method extracted. changed new-line characters to Unix-type new-line character.
DATACMNS-41 - Refactored DefaultRepositoryInformation to take custom implementation class into account as well.
misc. refactoring
"Refactor: Moved XStreamXmlPlannerBenchmarkFactoryTest to NQueens*, because of IntelliJ tests failing (wrong working dir)"
"ROO-301: Choose between data access patterns - refactored to reduce concerns and duplication in ServiceLayerProvider, added unit tests, added JavaDoc, removed duplication in JavaParserAnnotationMetadata"
"Generic mechanism for doing Attributes and Attribute Types on many classes. (Review code, and Refactor.) - TRUNK-2588"
refactoring the commands
refactoring sequence structure
[FEST-133] IN PROGRESS. Refactoring all GenericAssert_*_TestBase classes to follow a common naming scheme and structure. Changed derived test classes accordingly.
Refactored: created ArrayUpgrader and ObjectUpgrader
Refactored DatabaseMBean interface into InactiveDatabaseMBean and ActiveDatabaseMBean
#NAME?
Documentation and small refactoring
"Added DB entities, tables and DAO methods for People links and comments,  Added test case for all DAO methods Refactored Entity names to have a common naming schema added first hacky version of Signavio DIFF POC"
Minor refactoring
Initial commit of refactored http server
EJBQL joins processing (refactoring of private methods)
[BISERVER-12916]-Refactored a PreFlightFilter
Refactored class hierarchy for scheduler related classes
[PLAT-2751] Refactor: rename to RedisHTSSnapshotJob
"Significantly improved performance of Vector and Hyperassociative Map (2x - 4x). Added LayeredBrainHyperassociativeMap for properly displaying layered type brain, and using this now in examples. Refactored the name of the unit test classes slightly."
Applied refactoring by Martin.
CollectionSheetEntry: refactor the way data is fetched for display collectionSheetEntryGrid view to reduce number of queries performed. Also refactored SavingsAccountView to no longer use SavingsOfferingBO.
Refactoring still going on. Split TendiwaClientEventManager into various observers.
Finished subsetting refactoring
server: TailCommand + refactoring
Client / ClientBuilder / Clients refactoring
Minor refactorings
refactoring
refactored project structure
HTML-510: Refactor IncludeIf and ExcludeIf to be processed as regular tags
refactor API
ImporterDOT: Refactor color parsing into separate function
Refactoring Code
Refactoring. Use dependency injection on serverside
BLC-151 - Refactor Static Assets to remove folder concept
"#1215 - Allow the admin to respond to validations on a removal While I was at it, I also changed the following: - Change the remove in the admin to use AJAX to report errors better - Fix some translation problems with reporting global validation errors - Refactor the existing admin AJAX handling code for saves to be more general to work with removes"
Refactoring addon-security
Refactored argument and conf handling in CF Hadoop jobs.
Changed logs. Miner refactoring
Refactored some code. Finished test suite.
Security refactoring to support servlet use cases.
TEIIDDES-401: Initial refactoring to work with new vdb plug-in
refactoring packages
refactored Context
Refactor signature codec / factory
Minor refactoring.
Refactoring the way plugin container can be started up in the tests and converted the resource upgrade tests to use this new approach.
"limit to interfaces, refactoring"
Refactoring - introduced request package
Caching and sharing service registry instances in the RegistryFactory to improve performance (after previous refactoring to make the RegistryFactory the only public way to get a service registry instance)
refactored program/group/upcoming download and storage locations
o merging in my changes from the refactored embedder branch
unit test refactor for issue #2721
Refactor createPlofInfo method
[PLAT-6431] Refactor: rename BloombergReferenceDataStatisticsComponentFactory to DefaultBloombergReferenceDataStatisticsComponentFactory
Refactored MyCompanyProduct naming to SampleProduct.
Modernize the app: apply Guava; Path instead of File where possible; Log error instead of printStackTrace Refactoring
DATAGRAPH-5 refactored GraphDatabaseContext and updated test configuration app context xml files
"issue #129: fix breaking tests, refactor tests 1 test remains ignored because the Exchange.operation-field is not used"
"refactoring code, removed improper pairs output field as it was unused"
refactored the check for valid Maven version when using external extractor
"[ISPN-353] (Add a single shell script to handle cache server startup) Added startServer.sh/bat scripts, refactored Main into the server-core module and added server-core to the all.xml assembly."
Refactored OpenShift SWTBot tests.
"minor refactoring, more tests"
Refactor cleaners to be Path-based (I am using this in a WIP test.)
[OPENENGSB-505] * first draft for release mojos * refactorings
a little automation refactoring
Basic refactoring
#551 Email registration should fail if no server email is configured - Stop registration and issue an error if the email address setting is empty for email registration - Refactor register command into smaller portions - Create tests
Start minor refactor of MA extn to use notifcns
"Fix Concurrency, internal refactoring"
In the middle of big refactoring. Had to push to Github to be able to work remotely.
fixed problems left over from cycle API refactoring
Refactored threading model and mina protocol handling. Added more separation to the client classes to prevent clashing with server classes and also to make extraction to their own project easier. Externalized some more rtmp properties.
Merged branch B2007_01_24_STMRefactoring onto HEAD.
refactored resource classes
"""framework"" refactored"
Refactor TableDescriptor.
JBIDE-13624 BrowserSim: source code refactoring
refactory
refactored - looking much nicer.
minor refactorings in the JRef class and friends
[refactor] renaming + remove set database single access checkbox (its usage was unclear)
- Refactored OpenCFCAtMethodAction to OpenAtMethodAction 'cos it's not CFC-dependant
refactored utils into smaller util classees
refactoring
"refactored table, added channel table"
minor refactor to add similar lazy-create callback for creating headers on inbound messages; so its nice and easy to write efficient Message implementations
Refactoring: Remove unused default constructor
#NAME?
[JCLOUDS-474] refactor SoftLayer support
jpaManager to PersistenceContext refactor
Refactoring of conditions: added a more generic DataCondition based on DataSource.
#24 - Add tests for route refactoring; Added an error message if the user tries to refactor outside the context of a camel route.
refactor sql parser.
"Visualization module refactoring, setting settings into model."
refactored a lot of stuff... moved resources to common package...
Implement proper durable topic unsubscribe.  Also ensures that for a durable subscriber we detach and not close when the MessageConsumer is closed.  Tests will continue to work with ActiveMQ as it removes subscriptions on the first reattach attempt and does not currently do a remove on close.  Some of the AmqpResource code is a bit messy now and needs to be refactored a bit after this change.  
refactoring and code cleanup
[stats] add javadoc and refactor some details
refactor serializers
UserLocation refactoring: renamed some methods
refactored dialog creation and added DialogFragments
Almost done refactoring to an AbstractStepDefinition - which will simplify detection of unmatched (unused) step definitions
[SHRINKDESC-75] Rename Descriptor classes to strip the version from the class name; refactoring to match
refactoring of decorators
refactor
"fix bug in restype cache that was preventing subcats from being fetched for restypes that were loaded by a previous cache request; various minor refactoring of resource tree code (better variable names, etc.)"
mucho refactoring
refactor
Exception refactoring
"refactoring names Skill -> Entry, LearntSkills -> Timeline"
refactor tek
MNGECLIPSE-2552 sort of refactoring of code that is sort of not used (or at least I couldn't find a way to use it).. a likely candidate for removal
Console bits mostly refactored to allow stop/abort
refactoring JPA packages
Minor refactoring bits.
"tree matchers refactored, preparing for SPSM"
Refactor - replaced redundant crews abilities with shared CrewsVehicleSourceTriggeredAbility
Annotation metadata extraction refactored
refactor
"Fix for Jose's AOP/Advised problem. See mailing list under ""Conversion breakage (Was: ScriptSession hack)"" plus some cleanup of the Call objects to move them towards a more logical structure - see refactoring notes for details."
Updated and refactored
Refactored the class to express its real responsability
refactoring Hole
Refactored configuration initialization logic to a separate method.
refactor TableTracker to use SnmpTableResult.. begin tests for SnmpTableResult
TEIIDDES-570 Refactoring/fixing String name validation. Adding restrictive option to Relational name validation
JBRULES-484 refactor the core reteoo code for sinle and composite propagations -improved the AlphaNode hashing so it doesn't have to iterate a map on retract/modify
"LdapUser implemented, refactored."
yet more refactoring
"[BACKLOG-4725] - introducing parameter for import called retainInlineAnnotations.  by default import with overwrite will remove the existing catalog first, which removes the annotations.  Use the new parameter to prevent removal of catalog which retains the inline annotations.  Also refactoring tests in AnalysisServiceTest because they weren't testing anything."
"Draft implementation: added Struct to allow read-only view of messages, refactored Channel and Message."
Refactored TARDISWitherDragonListener to TARDISEntityGriefListener
Refactoring
Refactoring: extracted configuration creation code into a method.
Jetty9 - Refactored error handling logic.
refactoring
"metamer: dragSource: added missing @dragIndicator attribute to the facelet, refactored tests for @draIndicator and @dragOptions"
Some refactoring - i really don't like constructing Notifications.
[DROOLS-664] implement left tuple delete in ReactiveObject + minor refactor
refactor LiquibaseEntityResolver to use LiquibaseSchemaResolver +  added tests.
major update and refactoring
Refactor naming service. Check it is possible to work from an existing model.
"client proxy refactor by removing distributedObject delegate, fix close operations"
add a UriTemplateDefinition class to hold the configuration and lazy create the UriTemplate and refactor the code a little
"Refactor: restructure model parsing, pass down parsed models."
"refactoring, and name fix"
"TIKA-1936 -- clean up parsers and tests that aren't cleaning up tmp files, with heavy refactoring of PDFParser tests."
"DNA-467 Refactored the query functionality to minimize dependencies on the rest of 'dna-graph', meaning that we can probably extract it and that it would be useful for other projects. This impacted a fair bit of code, but it does clean up the assumptions and dependencies of the query engine.  Search is still not very decoupled.  But everything still works and all unit tests pass."
"refactored Metadata to implement Immutable Map<String, String>; addGroupToOrg GroupApi, MediaApi to use urn"
"RepeatsClassificationExplorer refactoring and testing, RepeatsExporterTest tests completed (Part 2)"
Refactor tests for BiMaps to use BiMapTestSuiteBuilder. Fix a bug with EnumBiMap in which null values throw the forward and backward maps out of sync. From Louis: http://codereview.appspot.com/5642050/ ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=27388061
Refactored locations to not rely on existing DataCenters
Refactored GroupingConflict.
HTTP Cache API refactoring: entry validation logic factored out from CacheEntry to a separate policy class; HttpCacheEntry should now contain (almost) no protocol specific code
dcm4che/dcm4chee-arc-light#837 : Refactor dcm4che-tool-dcmdir: import records from CSV file into DICOMDIR
refactored pom
refactor redux updater
Distributed: small refactoring to write distirbuted test just extending AbstractServerClusterTest
Refactored code for better readability
SCRUM-549: refactored MetaData - extracted common code - don't rely on NPE but query for null  - more tests
Structure refactor
minor refactor
Introduce jsonUtils and refactoring
Major refactoring.
refactoring and ui testing with fest
"Fixed bugs, refactored IconAnchor, added NavWidget."
Refactoring package structure
Lost of refactor and bugfixing.
#NAME?
"Issue 107: added proxy support, timeout parameters,  and refactored ssl module"
CSPACE-6937-A: More development of SAS related tests and test code refactoring.
Core: refactor Web Publishing service (#650).
Bugzilla Bug 24966: NullPointer with Oracle 9 driver - refactor close() & passivate() methods
Refactored policy server and jetty code into plugins. Updated classpaths for all plugins
Added documentation and refactoring of AbstractSharedObjectContainerAdapterFactory
Small refactoring work on test suite and logging reporter
code refactor
"started refactoring of optimization framework:  - created subpackages optimization.direct, optimization.general,    optimization.linear (currently empty) and optimization.univariate  - removed packages analysis.minimization and estimation  - renamed all Cost-related interfaces/classes into Objective    (this allows both minimization and maximization)  - added a few new general interfaces"
HUGE refactoring - rewriting rest client DO NOT TRY TO BUILD THIS VERSION [ci skip]
Refactor error messages in ChangeControl canSubmit()
"refactored as review comments of @mdogan and @ahmetmircik, ""CacheMaxSizeChecker"" interface and implementations moved to new package named ""maxsize"" under ""cache.impl"" package and some minor comment/documentation updates."
more refactorings
mostly refactored to use hector
finish up nestedLifeCycle refactoring
239347: Drag and drop any none java file doesn't refactor
Refactor opennms-model so that it does no depend on spring-security.
"refactoring, smarter adaptive timing strategy"
refactoring
refactored EquivGenerator
Refactoring codegen
Removed Help plugin support as that plugin is not updated. Minor bugfixes and refactoring
Slight refactoring of tests. Made the In-memory database more available to other tests. Made a couple of objects serializable.
refactoring to utilize MBean Utility in EJB Monitor; renamed Entry Application Manager to Entry MBean; renamed Entry Application Manager Server to Entry Application Manager - rjrjr
"refactor message receiver, add lifecycle , add activemq starter and so on"
OPENEJB-1237 openejb REST support - first refactoring to avoid to copy/paste code
refactor
Refactor a little
"Refactor CameraView a bit to move a lot of the event driven stuff into smaller functions. The events were getting out of control. Added absDiff, findContours, drawContours, drawContourRects, canny and an indexed color generator to FluentCv. Moved RANSAC to it's own class to declutter FluentCv a bit."
refactor WorkingMemoryEvent* to RuleRuntimeEvent*
progress in bringing the distance calculation on the client side also some refactor and attempt to fix stale connection
[MRM-127] start refactoring by clarifying terminology (this is more inline with what Lucene has). Take some additional notes.
refactored LocationProfileDaoHelper into singleton
Preserve Whole Object refactoring (Martin Fowler) for JettyRunner
Refactored pool and product attribute storage and access
Refactored to use FileSystemAbstraction (where there's now a EphemeralFileSystem) and proper StringLogger lifecycle
refactoring to removed duplicated code
refactoring
Method name refactoring
removed files no longer needed after refactoring moved tests to proper package
a bit refactored
Refactoring test
Initial refactoring to add encapsualtion
PreviewUI: refactored code following the MVC design pattern.
Minor refactoring.
minor refactoring
Refactoring of the Display Hierarchy (major) See ticket #730
refactor: consolidated p2 Projector use
"Major refactoring/rewrite; changing to support multi-key caches (primary, secondary, tertiary, ... keys)"
RESThub web : - refactoring tests packages - added marshalling generic tests
"Introduced ManyToOne relation class again. Some refactoring to make migration of existing projects possible. Added a maintenance command for migration: 'migrateRelationships'. Some bug fixes in the rendering code. Removed abstract link classes, we should try to use ResourceLink for all LINK relationships in the future."
#NAME?
some refactoring
refactor Dashlets to have common base with included title
refactor default privacy
[205132]  First step in refactoring IDMContext: - Removed the type parameter from IDMContext - Got rid of the IDMContext.getServiceFilter() method.
"XWIKI-8506: Generate debugging information on functional test failure * Remove XWikiWrappingDriver (moved debugging information generation to TestDebugger rule) * Refactor BrowserMethodRule to implement TestRule (since MethodRule is deprecated) and rename it accordingly * Add a TestDebugger rule to generate debugging information on test failure (screenshot, page URL, page source, test start/pass/fail) * Move takeScreenshot method from TestUtils to TestDebugger (it's not really needed in other places anyway and if a test really need to take a screenshot it can use the driver directly)"
Speed up parsing a bit by refactoring how we pull jsdoc comments into the AST.
Refactor: Renaming class.
refactoring
Refactoring Birt report acitivty creation and fixed tests
Simple Future refactor
#NAME?
PRD-4841 - refactor linebreaking for more clarity in code
refactored a bit.
refactor scheduleJob.
"Refactored everything out of SenderOptionsPanel and SenderOptionsPanelController that I could, so adding new sub preferences should require no duplicate code."
o Refactored code
"1) Connect the dots on passing ""status"" information through the transit data federation 2) Expose vehicle methods in onebusaway-api-webapp 3) Refactor the way BlockLocationRecordCollection works"
merge tool refactoring - synchronizing tool and view in progress
First refactorings on class names and tests. CustomerNumber now visible on reports. Finder-methods moved from OrderRepository to ReportRepository.
some javadoc and refactoring.
"Small refactorings here and there. Method class does not infer method bodies anymore, as it is too complicated (and thus bug prone). Now, the Method class receives the source code and the body as two different parameters. Two main fixes in CallDependencyExtractor fixes: (i) fix super invocations, and (ii) fix infix, prefix, and postfix expressions. Updated tests (there is still work to do)"
Tag Tests Refactoring
PLAT-6692 Refactored FixedLegCashFlows and FloatingLegCashFlows to use CashFlowDetails wrapper
Refactor the name of both the directories and the artifact ids of the Organizationchart subprojects
refactoring
refactoring of the SLDParser; added method to parse SLD and return StylesContainer
SHBL-53 - light refactoring and heavy re-formatting changes to attempt to make code consistent. Updated README.
"Some refactoring for permutations stuff: in particular, changed IndexType to Enumeration and made TermTermVectors use VectorStoreRAM and VectorStoreSparseRAM to make writing vectors simpler. Also wrote some checks for permutation searcher."
Some refactoring of visitor context.
refactored binder into two parts
Refactor ij-imglib project into ij-data-model.
MessageComparator refactored
Refactor: Renaming to `InstallOption`
massive refactor of completion proposals + fix #353
small refactoring
MONDRIAN    Refactored the ObjectFactory so that it has one variant that    returns new instance each call and another that is a singleton.    Added some more documentation.
org.jboss.test.selenium package refactored to org.jboss.ajocado
Major refactoring & started to implement the query view
minor refactor
Code refactoring only
refactoring ModelerDbImportAction
refactorings
Refactor the workspace allowing samples project
pmd: duplicate code: refactor to minimize dupe code
"Refactored DebuggingCommandInvoker into a cleaner Configurator, which is more extensible for other use cases"
Refactored dependency API
refactor the fabric8-setup command into the devops addon so we can reuse it within the devops create/edit projects and combine the docker and fabric8 configuration together (as longer term these mvn plugins will probably merge or at least share configuration hugely)
Refactoring
backup commit before massive refactoring
Refactor
[PLAT-3281] Refactor: rename RepositoryConfigurationSourceComponentFactory to FunctionConfigurationSourceComponentFactory
Refactor to enable custom render engines seperate from the portal framework. This will enable other projects to define the render engine implimentation.
Refactoring build method of MySQLSchemaMetaDataBuilderImpl
refactored it all. merged both projects into one and removed the different douplications of code. The commands namespaces couldn't be refactored since you're not able to inherit annotations in java.
refactored sparse vectors
refactor the code
refactoring file test dataset by creating AbstractFileDataSetTest
Code refactored
More source formatting and refactoring
ProjectAssociationProvider migrated and refactored facets
Small refactoring of Jettycell. Made it use newer methods and a bit prettier
Refactored MemoryBlock.
"CSPACE-1345 refactored role into roles.xsd, added roles_list and role CSPACE-1346 refactored permission-config to permissions.xsd, removed parent-child relationship between perm and role...made it association, permission-action has parent child rel added id, etc., added list CSPACE-1347 refactored users_roles into users_roles.xsd, added list cleaned up persistence.xml, removed list classes if not used in persistence test: authz gen_ddl, create_db, gentest, seedtest, mvn test at the service level"
"jvoll's history work, createSession refactoring."
Refactoring Cargo to accept environment variables
test refactoring
refactored the jmeter module to match naming convention
Begin refactoring to support resource dependencies.
Refactored server side tests: testNearCacheTTLExpiration & testNearCacheMaxIdleRecordsExpired
Refactored
First refactoring after code walkthrough
Refactor event-config and clean up dependencies
refactored giraph projection test case
Did some refactoring in EmployeePortlet.
refactoring
Refactor indexing of issueAuthorization
"Refactor acquisition of the ""line.separator"" system property to the API Util Strings class and reuse throughout Log4j. Replace odd code pattern that causes a FindBugs warning: "
refactored contact handling some convenience methods
refactored FilenameDecryption
Workload state refactored to a separate class
79131: Rename Type refactoring ignores qualification in comments/strings
MIFOS-4385: refactor fee service facades
refactorings related with multimap container
"HIVE-17330 : refactor TezSessionPoolManager to separate its multiple functions (Sergey Shelukhin, reviewed by Gunther Hagleitner)"
refactored the ECA package
Refactoring des interfaces Gestion des exceptions dans le service
minor refactors... cleaning up the code and fixing un-noted bugs
Refactored bean names
-changes to add another subsystem WSREMOTEAPI for remote ws testing -added extra command line check for remote ws subsystem -enable xml field access for *Criteria objects -moved all Webservice annotations from individual SLSBs to one class for efficient hosting -added uniform and versioned namespace to all beans -refactored some classes and methods to be more consistent with ManagerBean suffix. -refactored method 'executeQuery' to 'executeQueryWithPageControl' be unique as is webservice requirement -added missing beans from webservice interface and to client build.
refactoring
package refactoring
Refactored the JmxExtension to enable adding an MBean with HA info.
Starting Precondition refactoring
Refactoring and cleanup
"JBIDE-23866 - Arquillian tests refactoring and fixes, adding copyright (#1797)"
"CAY-1479 EntitySorter refactoring: make it DI-based, internalize Ashowood lib"
refactoring nettoyage code
refactor metadata parsing
Refactored to have separate read phase.
[SSHD-436] Refactor kex factories
refactored package names to be org.apache.activecluster
"refactor listeners, implementing Completion Event based sync listners"
Refactor some existing codes that used ResourceLocator directly to get data from the bundles so that they use now the new API
refactor: move some non-graph-related stuff into otp-utils so that it can be used more easily without the rest of OTP
Refactored WidgetGraphicsAdapter
[MGWT-192] gwt:soyc does not produce report. Start introducing some refactoring (composition better than inheritance :-) )
"some simplifying refactoring, but we still have not fixed the liveness issue."
DDF-1652 Refactored itest project name and moved test classes into new packages.
Implement Alex's suggested refactor to break out feature engineering
[docker] upgrade to docker 1.7 and refactor TLS support
Refactored client-map-near-cache tests
Refactory to Vaadin 7
Refactor list-entities and list-policies names to match what the server uses
Refactored package structure.
Refactored more stuff Added command system
"refactoring, some style changes, more work on BR editor"
vbo refactor
test code refactoring
SONAR-5010 refactor WebService framework
Refactoring of the converter design
gcc-bridge: fixing regressions caused by refactoring
Refactored the project
Refactoring and v0.6.1 improvements
NOJIRA K2 Refactoring to allow easier separation and splitting off the optional and spring based parts of EB
Refactored
Removed MigrationRunnerStrategy method signature receiving integer & inline method refactoring to OrderedMigrationRunnerStrategy class
"Refactored project creation and project configuration into two separate workspace modification operations, the former running in the UI thread, the latter as a worker thread. Also fixed bug where ""Finish"" button was enabled when a template was selected but the template properties page still had empty fields."
refactor connection API
Preparatory refactoring of User/InstructorUser
continue refactoring: disable adapters not on the critical path
MORE: Test Suite refactoring Pulled in some tests from Jersey Bug fixes from Jersey unit testing
Refactoring for the upcomming separation of the generator and the maven plugin
Refactor debug API
Refactored
MIFOS-3002: refactor update action method into service facade pattern and pull up persistence from Office domain entity
#NAME?
some refactors with the goal of simplifying this code and also to arrange that even if the bundle update url is not set we can still add some information to arrange that the plugin is updated.
Refactoring of Value and Attribute
refactoring
 refactor to avoid Kryo exceptions
api: Refactor move storagepool apis to storage pkg
Refactored: VCS clients are now plugins.
refactored nodepool to avoid having internal state and to survive restarts
refactoring class and package names
another big refactoring
CAY-1913 Refactor org.apache.cayenne.access.trans into query-specific packages
Use JUnit for Cucumber test execution and refactor integration test packages
refactoring handler class names and fixed final TODOs
Refactor a few classes into packages.
Refactored size() method to local and total
mucho refactoring
[MOD] XQuery: minor refactorings
Refactor event painting / listener code in preparation for painting performance improvements
Refactored the transaction retry helper.
Part 1 of refactor for new data format.
Refactoring the build to allow multiple modules
refactor GTFS
"Collapased Transformers into one. Extracted out some rules. Removed some references to Maven model in DomainModels to generalize. Removed Plugin mixins, which are no longer needed. Extension loading appears to be broken from refactoring. Need to fix this."
small corrections in refactored examples
NXP-2632: refactor to separate hierarchy-based methods of Context
"employee manager refactored, resolved todos"
Refactor row ClickHandling into NavigationTable
"org.broadinstitute.variant refactor, part 2"
Refactor Periods - no longer have a chronology - period type is based around DurationFieldType - array structure internally - not convertable to durations
"refactored declaring class attribute to be of type Class (was String), added methods relatedType and isCollection on GenericProperty"
Some refactors
#NAME?
#NAME?
Refactoring name attribute
Renamed SDA classifier + refactor
PJSM-163 Refactor JAXB classes to minimal project
api_refactor: rename sg to securitygroup
Minor progress on Bio-Formats plugins refactoring.   * Reorganize some packages.   * Simplify custom color panel logic.
[nobug] JS refactored for better subclassing
refactor the processor to be more state machine oriented
"refactor, global tiles and variables, tile id and variable key suggestion"
refactored opener
"Drift Refactoring - Settle on 'JPA' as the prefix for RHQ's default drift plugin. This avoids using the rhq project name in the naming scheme. And reflects that this is a JPA (well actually Hibernate) drift backend implementation. - Prefix more classes with 'Drift' for easier classification. - Settle on prefix-based naming for drift Criteria hierarchy - Add copyright and class-level jdoc to several classes - Ensure CoreGUI uses only GenericXXXCriteria classes and Interfaces. It was assuming the JPA drift impl in places. (note, 'Generic' was previously 'Basic' but is changed to better reflect that the class does not rely on any backend implementation choice.) - Change various signatures as needed to support drift plugin architecture. - remove a lot of warnings by qualifying type decls. - Reenable DriftManagerBeanTests"
"GenericIndexed minor bug fixes, optimizations and refactoring (#3951)"
Refactored example applets. Allow Mona Lisa example to use a different image when run from the command line.
"Refactoring service / controller hierarchy. Instead of using org.deegree.controller.XYZ, the controller (protocol-specific classes) are not put below org.deegree.XYZ together with the reset of the service classes."
Continued test profile refactoring (TACHYON-221)
refactored out Json RPC Client protocol factory from test sources to main so that clients can use the DSL
Improved SQL language: - added alias and functions also in projections - refactored functions in new packages math and geo - 
SC#QCADOO-185 refactor messages translation
refactoring partcover plugin to coverage plugin
Continue refactor
refactor / rename methods in Bitmap
[#LIB-195] Refactor SAXWriter
some refactoring to make the filter easier to read.
jetty-9 refactored configuration
refactor logging
Refactor Sampler to contain one public static method and make all other methods private
"TEIIDDES-941 Refactoring UDF framework to construct FunctionLibrary from function models. Also treating Function's as ""sources"" so they end up as model dependencies. (ala model imports). Tweaking Transformation Editor framework to improve event handling to accommodate function model edits/changes"
refactored template registry
Refactor on `CacheStatsTest`
Refactored NativeQuery to implements the OCommandRequest interface and to get able to execute it using the db.query() method.
382732 [refactor] make surefire provider pluggable
Refactor: rename ExternalRepository to Repository
move ConfigurationDefaultFactory to the package org.hibernate.console.refactored to keep the changes isolated
refactored servernetview
KIE Refactorings
Refactoring: introducing a Teagle client library
Refactor method name
More work on the refactoring descriptor API
Refactoring & renommage
refactor MFParmInterceptor
https://issues.apache.org/jira/browse/AMQ-4222 - remove region reference for all mutable producer exchanges (and some more refactorings)
"refactoring, deleted some playground stuff claimed to not survive for too long"
(1) source/target selector refactorings# (2) unmixing UI development
Refactored the ZooClient into a shared AbstractZooKeeperManager and also implemented the ClusterManager with all the wanted methods for getting master and connected/disconnected slaves.
"create specific binary implementation, exposed additional token method,minor refactors."
refactor
Refactored engine API to separate project
Added ability to inject extras optionally (@Nullable) Slight refactoring of InjectionNodeBuilders
Refactor the Welcome REST Api. First we change the package
Fight with refactor continued
Refactoring tests
Refactor association code of the generator. Update to latest fest-assert
refactored and cleaned up media import
JBRULES-817 Refactor the file upload servlet to be more tested
ACT-506: Refactoring BPMN implementation classes since it was getting a mess
refactored TemplateRegistry.java
refactored TwitterSearch.search;; fixed: resolve URL didn't work for tweets from web UI;; minor ui update
Refactoring and performance improvements
"Refactoring the delete snapshot command. This has a lot of spaghetti calls, trying my best to make it works. Hopefully it all does, on the 1st pass"
Refactor JDBC-related iterators and simplify. Fixes exception from last commit.
#NAME?
"Streaming, --encoding, --ntriples, refactoring"
refactor
1) Refactored networkOfferings:
1) Refactor struts action date converters into onebusaway-presentation so they can be shared between onebusaway-api-webapp and onebusaway-webapp 2) Refactor some TripStatus methods 2) Fixup the display of block trips in the onebusaway-webapp
Refactor the initial-setup checking code:
Refactor encryption to be two step like vanilla. Thanks @LexManos for pointing this out.
"make the core.ui plugin free of model.edit references, move the remaining method to the refactoring plugin which still needs it"
Refactor CheckUtils
"Refactoring most of the logic into the Table class and enabling the view to render multiple tables. Still only renders one, but more to come."
NXP-14013: refactor to move search to the ess service
#NAME?
"Refactored skipping indexing configuration so it just does the best thing, rather than expecting the user the choose."
docs and refactoring
[ANA-129] Testing data bundles before refactoring
refactor Locator Registrar tests
refactorerd the whole app to use analysers in threads and guesses
Refactored SimonManagerMXBeanImpl to throw SimonException
Refactored TestApp
Refactoring TechnologiesStatsService  - count stats per project.
Refactored package names.
refactor report service
refactored type system
"MONDRIAN  Enhanced support for native evaluation of virtual cubes.  Queries involving dimensions that do not join to all base cubes in the query can now be natively evaluated. This change involved refactoring of SqlTupleReader, HighCardSqlTupleReader and the Target classes used in each to eliminate duplicate code.  "
Refactored namespace to com.almuradev - Removed an unused import Signed-off-by: Steven Downer <grinch@outlook.com>
Refactoring and introducing BaseController
ISIS-1406: lots more refactoring around IsisConfiguration and IsisConfigurationBuilder.
minor refactor
CAY-753: Lifecycle Callback API Refactoring first pass
refactored JmxTemplate into a jmx package so it can be more easily exported & reused to make custom facades to services in fabric
[CXF-3132]refactor StaxUtils not to use recursive to avoid StackOverflowError
"Rollover effect to buttons, some refactoring"
Issue #139: Refactor main views so that all have optional Side Menus
#NXP-4617 Refactoring GadgetService
"Refactored parsing of Rod/IntervalBinding. Queue S/G now uses all interval arguments passed to CommandLineGATK QFunctions including support for BED/tribble types, XL, ISR, and padding. Updated HSP to use new padding arguments instead of flank intervals file, plus latest QC evals. IntervalUtils return unmodifiable lists so that utilities don't mutate the collections. Added a JavaCommandLineFunction.javaGCThreads option to test reducing java's automatic GC thread allocation based on num cpus. Added comma to list of characters to convert to underscores in GridEngine job names so that GE JSV doesn't choke on the -N values. JobRunInfo handles the null done times when jobs crash with strange errors."
"More explicit API for specifying whether a view is closeable or moveable, including some refactoring of PageLayout and Perspective."
refactor service api
RuleProperties: Further refactoring - making the delimiters configurable
Refactored and optimized batch vertex caches impls
Scorecards: refactoring the code and adding more test cases
Bug 434155 - Refactor Server to make it more easily consumable in pieces moving servlets out of configurator bundle
JBRULES-220 Refactor ObjectType to work with Templates -This also involved  refactor Evaluator to use Enums for ValueType and Operator
WELD-1590 QualifierInstance and MetaAnnotationStore refactoring
ACT-1021 Refactoring: Moved BpmnError into public API and ErrorPropagation into helper package
Refactoring
Refactored java client messages
Refactored codes for DesignEngine.
"Fix for HER-1954 bdb closed at crawl finish instead of teardown -- refactor crawl finish and teardown * PathSharingContext.java     start(), doStart(), stop(), doStop() - remove these overloaded methods, because the spring bug they were working around seems to be fixed, not seeing any problems with cyclical dependencies - might be this one https://jira.springsource.org/browse/SPR-7266     doClose() - remove because superclass version seems to work fine (this method generally wasn't being called anyway, though it would be now with other changes in this checkin) * CrawlJob.java     refactor teardown to call close() on the ApplicationContext, which calls destroy() on any beans that implement DisposableBean - this is now the way to have beans do stuff at teardown * CrawlController.java     send FINISHED crawl state event after calling appCtx.stop() so that isFinished() can indicate ready-ness for teardown * BdbModule.java     move close() to teardown, i.e. implementation of DisposableBean.destroy(); remove shutdown hook and rely on teardown; related tweaks * WorkQueueFrontier.java, CrawlerLoggerModule.java, BdbUriUniqFilter.java     move close() to teardown * CrawlMapper.java, AbstractFrontier.java, PreloadedUriPrecedencePolicy.java, FetchWhois.java, FetchHTTP.java, PersistLogProcessor.java, WriterPoolProcessor.java     add comments about cleanup that maybe should wait until teardown * UriUniqFilter.java     remove incorrect(?) comment"
refactor the vewrequest with viewfilter
Big refactoring
"Various refactorings and movings, mostly around getting better error messages when clone/fetch goes wrong"
[refactoring] Make side-effects of target platform building explicit
Added message to measures list (displayed when no measures are available).  Did some minor refactoring to MeasuresListPanel.  Minor UI changes. 
Extract test case refactoring for subclass NullSorter Created a separate test case for null sorter applied to methods from  the *sub* class. Fixed this test case so that it still works well under (jacoco) coverage.
Added support to generate pre delta for operation validation support to rename refactorings
#JC-1268 Refactoring.
Implement HEMERA-2550; refactoring
"trunk:   - merge-tracking refactorings, SVNMergeDriver refactorings (in progress)   - temporarily used File.getCanonicalFile() in SVNWCManager.isSwitchedEntry()      to make copy 51\53 tests pass (until Simon returns the path validation method)"
"refactor module structure (parent, common, a4j, rich)"
"XWIKI-12253: Add a job to move/rename nested documents * Renamed xwiki-platform-refactoring into xwiki-platform-refactoring-api and created xwiki-platform-refactoring-default to hold the default implementation (based on oldcore) for the move/rename jobs. * Create a ""refactoring"" script service * Work on the Move job"
Merge libreplan-webapp module with ZK branch. Code refactoring.
Extracting FEEL engine interface and refactoring the implementation into a non-static class.
refactorizada api detalles
refactor to nat
"Refactored the tests (sorry to do this on a broken build, but...)"
Refactoring the LibvirtComputingResource   - Adding LibvirtStartCommandWrapper   - 8 unit tests added   - KVM hypervisor plugin with 23.2% coverage
"cli2: refactoring - got rid of ""current"" target path."
refactoring - split draw run background (gdi/gdi+)
HBASE-10156 FSHLog Refactor (WAS -> Fix up the HBASE-8755 slowdown when low contention)
#173 - Slight refactoring of associating admin form actions to an EntityForm; initial prep for implementing an extension manager pattern (cherry picked from commit e7008d4fd6bcf4e5b49d7e4b6b60a93a78318761)
CvTemplateController refactored error handled if there is an error encountered during cv template creation
"web service refactored, fix in adminLogin controller"
#POULPE-350 Errors were corrected in refactoring
APIChecker: Rename refactor and add interface checkExistence
Refactoring code
Refactor Code.
"refactored package name, createt test package"
FACES-1970 Refactor bridge:inputFile to use new Java packaging scheme (Includes API Change)
"refactored Saxon/Context/QueryContext, etc so that Saxon->Config now holds some runtime support objects and Lux functions no longer hold references to Saxon"
"JENA-625, prepare for jena-csv 1.0 release: 1. modify dependency from SNAPSHOT to release 2. refactor the package layout 3. move LangCSV from jena-arq module to jena-csv 4. modify jena-csv version to 1.0"
Refactored testlink integration
refactor
[cfid-598] Heavy refactoring of Yaml reading
Updating branch with latest work towards database refactor.
Refactors such that Kafka bundles spans and shares more code
Refactoring in preparation for propertyExtension extension point to be added next
Code refactoring.
WFLY-4429 Refactor JCA subsystems ---> Use of PASSIVE services
refactoring: move (most of) the code interfacing with MongoDB to the mongo subpackage
Refactoring to pass Integration tests
* MCBans 3.3 Release * Modification 5 * Testing JSON Refactor
refactored code; added subclasses of JRRenderable for rendering the map and legend
Refactor test suite generation
jetty-9 fixed some test fails after refactor
Huge refactoring Seam3 tests + CDISeam3AllBotTests added + seam3 resources refactoring
"Finished route generation, dynamic toggle, basic types and data structures, refactored rapid response to general sar, added search pattern text and images, created search route extension"
"code refactorings (renames, etc)"
Code refactoring
yet more refactoring
Refactor the Managed routing strategy to separate guts into a set of utilities to be reused in the cluster group strategy.
"refactor of event editor, event delete dialog, connection test"
branch commit for test refactoring
resource class refactoring; introducing a reusable base class for sub-resources - also added a new RoutesResource to simplify the root resource further
HAMA-247: Discuss / Refactor HamaMaster and GroomServer
refactor spring package names and url
"Refactored EntryPointUtil: reduced public methods to getCurrentEntryPoint, moved not-found exception from manager to util"
"Refactoring, coverage"
Refactor: added AbstractDao
MAHOUT-729 Refactoring: Use Maps.newHashMap() and Lists.newArrayList() from Guava globally
358292 Refactor ProductFileManipulator for reusability
Refactor the name of both the directories and the artifact ids of the YellowPages subprojects
unit test refactoring
"minor refactor removing the dead cruft and moving classes into an easier to follow package structure with builders, processors and rules separated"
light refactor
(1) Stx fixes and refactorings (2) RasterDataNode.stx API review (3) RGB image fixes in ImageManager
quick fix bot test for cdi refactored
"refactored, implemented briefly, tested"
Refactoring to create abstract super class for creating users' menu
[MRELEASE-370] dry run does not update snapshot versions correctly Refactored test cases to ensure it was in the state it would be in a real dry run (per suggestion in MRELEASE-295)
Add Payment retry tests for PluginException and refactor test so same test  also handles PaymentFailure
Refactored the logging out of Verifier. Also fixed all gump errors.
Refactor TimelineViewer.
C4 EPG ID Refactor
"Refactored internal managers so they can share code, and added optimistic locking (though the exceptions are still bubbling up to the UI). This is not for the 2.0.1 release."
[PLAT-3397] Refactor: rename RubySassCompiler to JRubySassCompiler
General refactoring.
"Added a check client-side so that server store ID matches client store ID, including refactorings to make that happen."
"REFACTOR: changed base class from WaybackServlet to org.archive.wayback.webapp.ServletRequestContext, and added getter/setter for Spring configuration"
Name refactoring. Add XML generation support for CxfElement.
Small refactoring
"tests, fixes and refactoring"
refactored porting package packages
#1152 - Refactor EJson internals extracting io.ebean.service.SpiJsonService
Major refactoring done for most classes.
methods for handling RascalSearchPath + refactoring
staxer-core: module refactored
MassiveCore - Heavy Refactoring and Command improvements
[Refactor] Make Vault calls less ambiguous. Separate Vault into Vault Permissions / Vault Chat.
"Refactor structure to separate group-based access control from basic access control behaviors, and to enable data key decrypt from cached keys (key for point-to-point encryption behavior; might need a default access control manager to try for point-to-point decryption."
many refactorings
"#901, Trunk.  RelationshipType was left in a bad state after the api refactoring.  The DAO included query criteria for 'retired' which wasn't added to either the table or the object.  I've pulled out the criteria and adjusted the service methods to exclude the boolean argument includeRetired where applicable.  I also threw in a couple lines of unit test.  Finally, i think maybe getRelationshipTypes(String relationshipTypeName, Boolean preferred) never worked... I got invalid query syntax errors after taking out the 'retired' criteria, and fixed these."
SONAR-4188 Refactore all issues decorator in one and add false positive and unassigned issues metrics
Listeners name refactor + Fix #831 for both Spigot and CraftBukkit
"This change refactors the GraphPageTests to handle multiple graphs on a page, to handle download sections in any order, and to handle each download section's rows in any order (using sets)."
Refactored JDOTemplate and TxTemplate.
"Fix for bug1018 and a refactored bug1012. The bug1018 regression test did not exactly replicate the error, but after extensive research it seems the try rebind rule for corbaname isn't necessary after all."
ACT-1581: Refactor ProcessDiagramGenerator to take BpmnModel as input instead of ProcessDefinitionEntity + ACT-1580: Add method to retrieve BpmnModel (Pojo version of BPMN 2.0 process) to RepositoryService
Refactored the controllers
"Refactored existing engine related lookup code in ActivitiFluentTestCase into new class TestProcessInstanceLookup. Moved this class, class TestProcessInstance and class TestProcessInstanceVariable into new package '*.engine'"
Refactoring and re-building UI to match the new flows
"#110, refactored tests + sitemap tests"
refactoring + empty models on untrained recommenders
Refactor first stage of RevWalk's path limiter
Creating api-core project above all the existent Silverpeas projects. Refactoring code around integration test and unit tests (centralization of test classes into test-core project).
Refactor FluentPage to avoid strange class hierarchy
Refactoring UI polish
Refactored EnquireLinkTimer thread into AbstractSession
Small refactoring.
Refactoring FacebookImpl
Refactor to new package
Refactoring for the ZipExplorerPlugin class and its tests: * renamed getFileNameFromZipURL in getFileLocationFromZipURL which is more explicit * improved javadoc * renamed path parameter to url abd created internal variable for the computed path
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
Refactored SyntaxError/InternalFailure #669
"Javadoc, XHTML, setter for value and refactoring."
Refactor: Made DistCalc.pointOnBearingRAD be degree/native-unit based instead; removed RAD from name.  But made the DistanceUtils one be entirely RAD.
refactor
Refactoring and cleaning
"refactor child ref task, add controller"
refactor package
Refactoring the processor usage
Slightly refactored code again -- callers don't need METS.jar
Standalone Atlas: Second round of commits for refactoring.  Somehow I managed to miss most of the changes out and delete some tests - d'oh!
refactoring to a mvc way
Refactored and changed the name of getViewsFromDecorViews
refactored to provide a sum of mismatch quality scores capability as well (used by Cancer)
"Graphics"": A) Implemented Architecture Diagram improved: Shows rectangles with stereotype and icon now; B) ParentFigure improved; C) code refactored; D) layout of figures improved. "
Refactor to handle inputstreams and added logging
[PDI-7573] Refactored MapReduce code into it's own jar so that class loading of steps and their imported classes will work properly when executing on the cluster. This also introduces the new src-mapred/ source root.
"Refactored massparse test into single test, some other minor changes."
- completed syntax coloring refactoring (can now color any syntax given the appropriate subclass). Currently handle ANTLR 3 grammar and Java file - generated code now have syntax coloring also
Refactor Diagram Figures Stage 2
"Refactored and removed Cobertura support for now, as it was causing problems with the integration tests. Will put it back later on."
some refactoring around contexts
minor refactorings
Refactoring of db installer
Grand refactoring
Minor refactoring; trying to figure out why byte[]-to-byte[] builder builds invalid structure
"Refactoring: ItineRennes -> ItineRennesApplication,  ItineRennesContext -> ItineRennesActivity. "
Refactor
Refactored
[WIP] - Started draft event service impl. - Replaced RWL with SpinLock - Refactored NodeServiceImpl.
Refactor the name of both the directories and the artifact ids of the Kmelia subprojects
"Revert ""Merge branch 'rewriting-refactoring'"""
some refactoring
#NAME?
"Refactorings (classes moved to another packages), delete unused classes"
Refactor system tests to better express business and move navigation workflow one level down
Fixed pay calendar and system lunch rule.  Refactored some things with the pay calendar.
refactor
refactoring code generation code
"refactored the factory away from the functionality in messaging, reflected that change here too. also rearranged the pom dependencies for better comparison. also refactored the sensors and actors to reflect the messaging changes"
Refactored (with some amount of duplicated code) just to avoid auto-boxing
refactored HashServiceConfig
[PAXWEB-580] - Refactor itests / itests-karaf / itests-load
refactor: make DeployProcessArchive*Step extensible
refactor the table elements
Refactoring all Connector Builder Implementation
Core internal: refactor type caching (#935).
Fixed failing selenium tests due to r23255 refactoring.
refactoring
FORUM-2  INTEG - improve and refactor forum (forum + faq + answer) integration with social
code refactoring
Refactoring
[BISERVER-5682] Refactor to of the wizard to accommodate more than two datasources.
Refactored package and started to do some merging of the code base.
SizeEstimator refactoring to better fit the needs of the HD entry cost (#9680)
Refactor and comments added
test refactorings
Refactored client support
refactoring
Refactor 
Exception handling refactoring
refs #116 - refactored Hub for new SPI
refactoring and create new fetching handlers - part 1
"Fixed bug with dateboxes Optimization, code refactor"
Preparation for jar refactoring with source attachments
"Mid refactor for Multi-version, multi-repository container"
refactor default software manager
"* Continuing work on story 2182 - requiring currency to be specified for Money object construction   * worked on CustomerPersistence.getTotalAmountForAllClientsOfGroup, adding a query to check that that all loans for clients in a group use the same currency or else throw an exception * Started story 2179 - loan account gets its currency from the loan product   * hooked up loan accounts to get their currency from the loan product in order to get test cases working for story 2182 * refactored test data generation code to take a particular currency"
- refactored asciidoctor code (#2164)
"Pretty huge refactoring, structure is more DD :)"
Refactored test packages
Refactoring code for HW2 and adding yaml descriptors for the java classes I have written.
CDH-1386: flume platform support for flows/groups - quick refactor and synchronization added - test flow isolation alone - tests in conjuntion with failovers and logical translattions - Integration with flowed failovers - fixed loadConfigFile in flowconfigmanager - fix due to CDH-1379
Refactoring
"#383 - Refactor - Rename Oracle10Platform to OraclePlatform, remove Oracle9Platform (as not different)"
[KARAF-2833] Refactor activators with a single base class
Finished Player Movement Modifiers Refactored Reconnect Manager Fixed mipmapping for all texture pack sizes One chat line = 1 chat packet
AF-26: Add the ability to toggle apps and extensions via feature toggles did slight refactoring
MONDRIAN: Fix '*' syntax of 'CrossJoin' operator. Various refactorings regarding function resolution.
Refactored java package structure
"Refactored the general capability to have a library of components into dna-common, and changed the SequencerLibrary to reuse that.  Analyses will also use this, as will other components that rely upon loading Java classes that implement some interface.  "
Refactoring features/vaadin-snmp-events-and-metrics
Attribute values serialiation. Minor fixes and refactoring.
minor GSONTest refactoring
"various AlertsView classes, AlertManagerBean refactoring, Remote API refactoring"
"[MOD] WebDAV: small fixes, refactoring and optimizations"
"Refactored into IRenderer<T extends IChemObject> with modules implementations for IAtomContainer (the existing AtomContainerRenderer), IMoleculeSet, IReaction, IReactionSet, and IChemModel (all for from the existing, overloaded Renderer) (renderbasic)."
ACT-506: Refactoring BPMN implementation classes since it was getting a mess
more QueuePool refactorings.
Refs #2626: Just some minor refactoring and code cleanup.
Refactored AgoClient to own independent package.
"refactored HTTP support into top-level package ""org.springframework.http""; revised RestTemplate facility in package ""org.springframework.web.client"""
Refactored when arguments becomes files
"Moved NPN[Client|Server]Connection[Factory] classes to their own modules, akin for the ALPN classes, and refactored all code that was referencing them."
"more refactoring for updates on ISIS-463 (now complete, we hope)"
"Refactored API Events, Continued Facet-removel progress"
"refactored MessageIntegrationSPI according to issue #6, moved meta data maps from the SPI to the CamelImpl and improved javadocs"
Refactoring madness
Refactor logic from DataSourceProperties
Resources API seems to be working... tests all passing. Did some refactoring to the setCurrentX() methods in shell and ProjectContext
Some refactoring to make internationalization easier.
Feature: Department Administrative Offices and International Relations Office now have access to the students list. Refactor: StudentListByDegreeDA split into abstract super-action in commons and sub-classes in each unit that uses it. getEnumNameFromResources(Enum) is now available in FenixDispatchAction.lists
Refactored width/height values into superclass and enabled construction of RGBMonochromeBitmapSource from a Bitmap
Embryo_Tracker: refactored the LocalMaximaFinder
finished refactoring of querydsl types
refactoring spectralextraction
"JFG-889: Add TestEnvironmentRestController; Extract all exception handlers to GlobalControllerExceptionHandler; Refactoring; Add TestEnvironment model, dao and service; Add new unit tests; Disable some Checkstyle checks."
JBRULES-2538 Support JAXB as a ResourceType -Minor refactor
refactor
"Made some refactorings (which should, if anything, make things a little faster):"
Unified cancelled spelling in refactored code
update feature #1324 improve code refactoring and change default settings delete also ajax error handling for google chrome !!!
"Continue refactoring OAuth, added more shortcuts in CRestBuilder, added more tests, included Delicious Sample in the website"
Refactored and finished ABM-255
Moving summary code to its own folder and refactoring the summary classes to match the xsd
Major untested Metrics refactoring
Refactoring for v3/folders
Move test for Assertions#assertThatCode from Assertions_assertThat_with_Throwable_Test into their own class Assertions_assertThatCode_Test and refactor them a bit.
335725 refactoring
Ontology Refactor for prep for improved term searching performance
Refactor routing package
[refactored] dataservice | feature: multi subscriptions - PollTask & GraphDeleteTest
SOAP refactoring and updates (#1512)
Refactor hudson.console.UrlAnnotatorTest
Refactoring... Cleaning Up... Adding some Commands... Fixing up some mistakes etc etc etc.
"Refactor: Remove redundant method names, improve usability"
Improved socket-connector Repaired unwanted refactoring
https://jira.jboss.org/jira/browse/JBIDE-4366 - code refactoring
Major Refactor
refactoring of font handling
cache refactoring
[Issue#157]: little refactoring
Test code refactoring
Refactor and fix PostGIS signatures
[KARAF-4273] Add -o (--only-matching) option to grep command [KARAF-4376] Make grep return the list of results rather than null Also refactor grep command using the gogo jline grep implementation which uses the AttributedString for ease of use.
Refactoring the TextField view.
2LC tests - Minor refactoring of eviction tests
ACT-60 switching back from activity instances to executions: fixing persistence and refactoring queries
[BZ 1069648] Additional name refactoring.
core: refactored overgrown method
batch refactoring - batch document
Some cleanups among refactored command classes.
"More refactoring of the MOH731 to extract common cohort libraries for ART, PwP and TB"
Refactored Tree.java and AdminTreeMVCHandler - made getActivationSyndicator abstract so that each handler implements it accordint to the NodeTypes it handles. - Fixed bug http://jira.magnolia.info/browse/MAGNOLIA-915
Refactored org.eclipse.ecf.server.generic for ease of use.
"Adding lots of documentation, serverRoot is initialized from configuration when starting to read the configuration files. some minor refactoring."
Refactored the sequencer path expressions to be more user friendly.
Trying to refactor things to make it possible to filter non-Bean types (maps; any setters)
Refactored and standarized javadoc for all blocks
Refactored configuration
ACT-741 refactoring persistence
"Big refactor of Regions, Exchanges, Holidays, Yield/Discount curves and start of using configuration properly for curves etc."
Project structure refactoring
[refactor]
Refactor to set payment information and send confirmation in different methods.
Code cleanup and refactoring * Inject cleaning filters * Fix checkstyle violations * Add @Override
"more tests, refactoring"
Model refactorings
"BZ 682304 - change the RPCDataSource generic template to accept a Criteria type so we can implement a strongly typed getFetchCriteria on all datasources. the main goal here is to ensure the pageControl is set, and we do this by refactoring the creation of the criteria out of the executeFetch so the subclass can get the fetch criteria and perform some work on it (like setting page controls) and then calling executeFetch."
refactor server class + register it as mbean
"refactored alignment routines: granted access to all score matrices, reduced memory requirement"
refactor and add unit test
[nobug] - Refactored code for easier maintenance
Refactor options around ICE validation from light/smoke
JBRULES-371 Refactor any class that implements Externalizable to have empty default constructors
refactor: Split syncDbRecords code
"#566 - Refactor internals - SpiExpression, add prepareExpression() to merge queryAutoTuneHash() and queryPlanHash() - initial"
#419 Refactor guice config to use an explicit @Named parameter without type binding.  Rename JmxTransformerIT so that it actually runs
JBEHAVE-777: Refactored CrossReference to be resposible of the serialisation of the performable root.  CrossReference does not implement Format anymore.  Previous ublic methods left for binary compatibility but deprecated and non-functional.
WINDUP-793 + WINDUP-815: Compatible report refactoring
Refactor span cells on table for PPTX
Renamed and started documented some theme manager API. Still more refactorings to do.
"Cy2 session reader will not create network views for 2.x groups anymore. Cy3 session reader/writer: Saving/reading the visual style names from the ""view-type"" xgmml files. Refactored the XGMML Reader."
Ashok | #115 | Sync for group details and a bit of refactoring.
refactoring
refactor: Warehouse -> StdWarehouse
More refactoring/renaming
Refactor and expand the multi-threaded query tests to cover SELECT as well.  Determine that I can indeed reproduce the failures intermittently for JENA-399.  The tests that fail are currently @Ignore'd until a workaround can be made
Refactoring downloads
pageset refactoring
Added support to refactor JAR files with source attachment
This should be the last big refactoring before Guice 2 final...
"- added logic to consider repository in case of ""import module ..."" statements - refactoring"
refactor Trial- and SimulationHandler
"refactor ""Refresh"" and ""Watch"" action to use new GCModelLoader (#87)"
refactoring: XFormsProcessor.getXForms now returns Document instead of Node refactoring: setupTransformer method now takes a URI as argument feature: it's possible again to specify a xslt on the root node of a XForms document for easier extensibility fix: ResourceServlet did not know the application/xml+xslt mimetype - in addition it now checks for the availability of a mime type in web.xml fix: Error messages in ResourceServlet have been improved
Lookup cache refactoring (the main part of #3667) (#3697)
"refactored gzipping code, added logging statements for FTP SmartUpdate upload"
[ADD] RestXq: first test methods added; bugs fixed [MOD] XQuery: tokens and strings in HTTP client code revised [MOD] Refactoring: String arguments added to QNm constructors
Refactoring
Small refactorings
Refactor for change in audit API
CF support code refactoring
SOC-1166: Don't auto update status for user who send invitation to other \n SOC-1167: Need auto remove status after user accept invitation on People page \nSOC-1235: Mary can accept/deny the invitations of Root to John on tab Activity/Connections \n SOC-1245: Refactor LinkProvider class \n SOC-1328 [Activity] can not remove user's activities
Refactor JsonServlet's service startup to be easier to override
MAHOUT-933: Refactored actual classification out of ClusterClassifier and into ClusteringPolicies. This allows classifier to be completely generic as to the algorithm and gives policies correct use of e.g. fuzzyK 'm' Introduced Canopy and MeanShift clustering policies for classification though not used by cluster iterator Modified serialization of ClusterClassifiers to include ClusteringPolicy Added ClusterClassifier serialization methods to exploded sequenceFile representation needed for MR Updated Display examples and unit tests. All run
refactoring
Refactored ColumnAttribs
fix a bunch of bugs in the resource tree plus start cleaning up / refactoring the tree code
Model Refactoring Add new Image abstraction
small refactoring
Refactored Matchers and ReadWriteGenerators into their own packages
"Refactoring, Renaming variable"
Refactored the 2 existing parameters test cases into 2 separate methods
Refactor IDL tests to use JUnit TemporaryFolder Rule.
HTTPCORE-109: Refactored the default connecting and listening I/O reactor impls; more common code from both moved to the abstract base class
#NAME?
XCOMMONS-123: Move extension module to commons XCOMMONS-122: Move classloader module to commons Refactoring
some refactoring and…
Some refactoring.
"Refactor alignment to annotation counts for the ability to process multiple basenames. Can now generate one output per basename (when --output argument is not provided), or one aggregate output (when --output is specified)."
HBASE-2501  Refactor StoreFile Code
Minor refactoring / code cleanup.
refactor
"refactor sheets to better enable mid-crawl changes * Sheet.java     make non-abstract; allow for name that might not be beanName * SheetAssociation.java     define targets as list of names, rather than Sheets themselves * SheetForDecideRuled.java -> DecideRuledSheetAssociation.java; SheetForSurtPrefixes.java -> SurtPrefixesSheetAssociation.java     make association separate from Sheet -- so same Sheet can be associated more than one place, more than one way * SheetOverlaysManager.java     match changes to Sheet and SheetAssociations     offer convenience methods for post-construction addition of Sheets, associations     use internal name-to-Sheet mapping, allowing for mid-crawl Sheet additions not in bean factory * Precedence1SelfTest.java, Precedence4SelfTest.java     update configs for Sheet changes"
Refactored RexsterClient use of TCPNIOTransport.
HIVE-8141: Refactor the GraphTran code by moving union handling logic to UnionTran [Spark Branch] (Na via Xuefu)
"[MOD] XQuery, major refactoring: new CompileContext class"
"Refactorings, comments extended."
FestAssert integration and refactoring on comparator
Refactored and cleaned up the V2 measure API somewhat. Now we have single Measure interface for both distance and proximity measures.
refactored task back to api
minor refactoring
Refactored some of the naming for classes
preaggregation via sql refactor
Refactored WADL generation so that WadlResource depends on an injected WadlApplicationContext.
[CLEANUP] - Refactored some duplicate code and checkstyle.
Refactoring: split ResolverSourceTests class.
Refactored html generation code. Added navigation over hosts
Refactored repository store code to add memory repository store. Refs #678
[PLAT-5535] Refactored the SwapFuturesPriceDeliverable.
"Refactored project into modules, splitting the Jetty binding and the HTTP layer."
Refactored envelope forwarding API
Small refactor from Tryggvi to minimize db-access of Entities using the IC_OBJECT_INSTANCE structure
PLAN 4540: Workspace refactoring: moved to plug-ins
Refactored some of the package structure. Added the foundation to the classification packages to make way for naive bayes classification.
* refactor the client  * add rest interface for station metadata
refactor dcm4che-conf add class PreferencesDicomConfiguration
Small refactoring in AbstractCommandLineRunner ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=122306118
refactored Connection to close itself and disassociate itself from the Exchange
"scene2d refactoring: List, SelectBox, Tree now use Selection."
Refactor JBossFileService
Refactored gradebook data classes.
#160 Refactoring into targetReadAccessor and targetWriteAccessor and making them available to ftl templates
refactored SVG layer + AxisDemo
"Some refactoring, some had wrong semantics, adding find as well"
"maojor refactor use, use the new api."
refactor to centralize the remote storage session access
Refactored into scenes
WIP refactoring Showlet to widget
Issue #270 - video type fields checked and api 2.4 fields added. Unittest added. minor Refactoring
Core: refactor assoc def update logic (#935).
Some refactoring
refactoring
"bit of refactoring, browser js logs, full screen browsers"
Refactoring: replacing UUID with strongly typed NetworkAddress to allow for extension.
o first step in refactoring away from tree and into a simple map. Much easier model then :)
refactored the JmxTemplate code separately from the caching or creation of JmxConnectors' from Agents so we can reuse this abstraction in more places
Large Magma Refactoring: * Removed Collection in favor of ValueTable * Created BeanValueSet that use a BeanValueTable to resolve beans instead of passing bean resolvers around to VariableValueSource factories * Made BeanVariableValueSourceFactory implement VariableValueSourceFactory again * Modified Filtering strategy to remove the necessity to filter sets. FilterChain now filters one item at a time. * Added FsDatasource for persisting to a file system
updated copyright notice and test refactoring
hsinteral_refactor
refactoring the OtherClientDetailsIntergrationTest class and dao classes
TURMERIC-1607: additional refactorings for cleaner code.
refactor and bugfixes for deflater usage and error handling. using sentinal entry to indicate end of stream.
TYRUS-78: draw and auction samples refactoring
"#295 Refactor PropertyMapping, split into object- and collection mapping"
some refactorings and implementation of MembershipListener
Moved/refactored EntityInfoAggregator
"Adding validation code, some more minor refactoring while checking for readability"
SHBL-61 and SHBL-62 - attempting to fix local login and refactor authenticator
implemented the aspect to intercept I/O activity using aspectj and jboss-aop; refactored the agent to call the instrumentation strategy (aspectj or jboss-aop) according with the choice of the user
refactored away some duplicate code
"Refactored load methods to eliminate use of URL.toFile(). Addressing PR #25972, reported by Bill Barker."
Refactor support for multiple target objects.
Add CQL Table validation. Refactor SliceQueryBuilder. Introduce PersistenceContextFactory
"improve - refactor class package, remove concrete class from api package"
[refactoring] split o.e.t.repository.util package
refactored into tree structure
JERSEY-1957: Spring module refactoring.
Refactored
"refactoring, add new config option - the size of the software output buffer"
HADOOP-7320. Refactor the copy and move commands to conform to new FsCommand class. Contributed by Daryn Sharp.
Cleans up and refactors some internal methods.
Refactoring - Trocando o nome do metodo da interface Validator e da InvalidStateException
Refactor security request filtering
Refactored
More refactoring for clean code and rewriting of some of the results writer class
"Refactored the whole configuration system The main goal of this refactoring was to increase performance by removing lots of reflection.  * Added a new ConfigToken allowing to store a configuration, how to read it from properties and how to process it. Note that even if all configurations have been refactored to support the CamelCase, the case remains insensitive when it's read.  * Added TableConfig and ColumnConfig: placeholder for all possible configurations  * Refactored ColumnConfiguration and TableConfiguration to use ConfigToken instead of plenty of fields/accessors  * Improved exception handling when a wrong configuration group was activated  * Refactored export mechanism to be able to use a totally custom export. Some export formats use reserved words, such as ""csv"", ""pdf"", ""xml"", ""xls"" and ""xlsx"" and allow to activate default values (e.g. mimeType, built-in export classes)  * Refactored all Thymeleaf processor with the new configuration mechanism. Also eased all method signatures thanks to the abstract superclasses.  * Updated all unit tests  * Removed the cdn option from the TLD and from the Thymeleaf dialect: it now handled by Dandelion Core  * Closed dandelion/issues#141 by making some classes implementing the Serializable interface  * Closes dandelion/issues#191  * Closes dandelion/issues#176"
Refactor package names
"Export APi refactoring, add vectorial interface."
More refactoring
Refactoring client
loan refactoring: refactoring create
refactor sql parser. sqlite support limit clause. #1556
refactoring
Massive refactor of reflection support
Deploymentbrowser for domain mode working. Next is to check / refactor the related buttons
Refactoring test structure.
HBASE-18621 Refactor ClusterOptions before applying to code base
"refactor: add encoding, fix expected/actual, use proper constructor"
Refactored EAV check.
+ Massive structured query refactoring addressing some of the discovered UI issues:    #1722 null data in atlas heatmap view    #1813 atlas adv UI comments after test
More refactoring. Fix confusion between Custom Task properties and Model Extension properties
framework changes for currency refactor Leaving the integration framework alone for test cases
[JBIDE-7034] tests refactored and testing of visit count added to strategy (was in integration test only)
Refactor issue authorizations in Elasticsearch
following testcases and refactoring
"Refactoring to support HSP IoC refactor, other cleanups."
ISPN-7258 Refactor org.infinispan.objectfilter.Matcher
refactored the log query callback API so it can be used from AgentTemplate and JmxTemplate
"Hierarchy of projects, projects items and resources refactored"
Added more client command tests. Refactored the Content Spec Parser to make it easier to test and to also make it cleaner and more readable. Fixed a few unfound bugs in the parser as well.
Gros refactoring de la partie deck runtime. Generisation des deck action id. Suppression/Absorption des classes DeckPiles/DeckActions.
CAMEL-9572: Validator: clearSchemaCache method refactored
#POULPE-119 refactored tests for BranchHibernateDao
SWT refactorings
Refactoring sur package et docs
"Refactored the Message type added a simpler solution for defining an action, removed MessageType"
"refactored all the pojos added GatewayRequestDetails.hbm.xml GatewayRequestDAOImpl.java GatewayRequestDetails.java added entry in main pom.xml for commons-collections-3.2, quartz1.6.1 and spring-context-support"
refactor rename
"Refactored RubyCompletionEngine to better support prefixes at cursor, relevance grouping, and improve performance."
Refactor Discounter examples
refactoring
refactoring the code to enable polymorphic inline action
Refactoring: seperate listeners for different checks + instancing instead of static for almost anything
"Implemented the detection of strict type dependencies, i.e., inheritance and interface implementation. Refactored a lot of stuff. For now, it is not possible to distinguish between inheritance and interface implementations. Tests still need to be rewritten to assert method call dependencies. Found a bug I introduced back in commit 68bb394. Will fix it in the next commit"
Start of a complete refactor of mChatSuite to MChat. I will do this in stages so as to allow Plugin developers who depend on mChatSuite to catch up.
Refactored new createAttributeMetaDataResponse method
refactor host factory
"JBIDE-19795: Adding ""org.jboss.tools.jst.js.test"" plugin with initial Bower's tests. Refactoring"
Refactor jsr80 API to use new libusb 1.0 API as backend
refactor db code
Refactor TestSearchEngine.isTest
idg has status buttons using code from gene page - plus logo. refactored status code in geneservice so that we can pass in a doc from the solr index results
RF-13270: split event handlers from AjaxProps and refactor them to AjaxEventsProps to allow reuse
tx related refactoring
"api_refactor: swift, ldap and vlan apis to admin pkg"
"New tests for Docker, Code refactoring. (#1513)"
CheckIn: Fix bugzilla bug 316695 Refactor data set editor pages' codes[26568].
Minor refactorings
Major refactoring of the SimulcastManager.
almost finish refactor on Facebook
Refactoring (appended Condition to the name of every ConditionImpl). Fixed EquippedCondition and EnchantedCondition.
Continued ProcessingContext refactoring
Harshit | Refactoring around Mother reporting service.
"[RHQ-1169] refactor the purge job and all purge code. now, measurement compression manager is responsible for just compressing measurements; the data purge job now performs all the purging by calling all SLSB purge methods as appropriate."
Refactored: avoid *Impl / EntityInfoImpl
XWIKI-14619: Refactor xwiki-platform-notifications-scripts to use sub script services * Move script services to sub modules
Minor refactorings.
refactor
Rename and rearrange methods; some refactoring
118209: Rename type wizard does not close when pressing finish [refactoring]
"added no pickup command, and don't remove the player from banned, etc ... in removeKeyFromValues. Refactor one function"
JENKINS-21600: Refactor lazy loading.
refactored some more. no completely separated the querying part and the writing of output part
"Revert ""CLOUDSTACK-6003 fixing plus refactoring dispatcher"" as it breaks API dispatching for commands having Map<String,String> as a parameter type"
"- Added initial config.yml file support - Added ""/sms reload"" command to force reloading of signs & config.yml - Scroll wheel behaviour is configurable via config.yml - Left & right click actions are configurable via config.yml - Menu item separator character is configurable via config.yml - Refactored onPlayerInteract() method into several private methods for tidiness"
Refactored Active Speaker support.
Refactor core services
refactoring package name
Refactor
refactor the code
APEXMALHAR-2530 Refactored AbstractAppDataSnapshotServer so that subclasses don't need schemas
[CXF-3677] Some refactoring of encryption tests
Refactor out headless GenericDialog
"A bit of refactoring, added comments to a visitor"
"Refactored, that was really ugly code I had written."
source add video + refactoring
Refactoring of WS Tests
#NAME?
[NEW TYPE INFERENCE] Refactoring to simplify GlobalTypeInfo.Scope
* bugFix in TrecTopicTextFromAnnotationsFeed (Topics got probabilities of infinity) * some refactoring
refactoring class name
"finished configuration refactor, only get validations for server side entities"
SAK-8613 refactoring name of package from .util to .util.impl
Fixed bug 406786: [1.8][extract method] Extract Method refactoring in interfaces not handled
XWIKI-6742: Add virtual extensions support Also refactored DefaultLocalExtensionRepository to make it easier to read
Started refactorings for WPS plugin (process provider) concept.
refactoring DirectoryWatcher and Listener
Adding user_restricted functional tests and refactoring some of the existing tests.
converter refactoring to remove un-necessary context parameter
Refactoring collections
o Refactored the goal/plugin resolution part of the lifecycle.
refactor package name by accident: org.odata -> org.odata4j
"Ocp: Replace contents of package ""ocp"" by unrefactored code"
Refactoring to share the test name for all tests
Refactor UcmCommon code to ClearTool calls
Finished refactoring properties
Refactor retention/rotation configuration
refactor
refactor IOC SPIs to support easier extension and configuration
Refactor JcrRdfTools to streamline exposed interface
refactorings in Output
More UI refactoring
refactored the name of methods in SemanticSearchHelper
refactoring log hostobject
Refactoring 2nd part
PLFED-197: refactor the sp methods
Fix KeyOutWriter to use a single Logger instance per file name Refactor KeyOutWriter to act as base class for DailyKeyOutWriter Add DailyKeyOutWriter which uses DailyRollingFileAppender
"big refactor--renamed general graph model to property graph model--thus, renamed ggm package to pgm. optimized imports and test cases passed."
"CSPACE-1349, 1422, 1428, 1469, 1470, 1473: Adding pagination support for default page size, making a convention that query params are part of the service context, giving docHandlers a default filter, removing some of the ubiquitous Generics warnings, refactored resource service code to minimize duplicated code and boiler plating."
SQL script: refactoring
Fix Pr 50794 . Rename CViewSorter to CElementSorter and refactor in org.eclipse.cdt.ui.CElementSorter
fix osgi after kie-spring refactoring
Analyse: 1) processWaitingAssociations() refactored; 2) processInheritanceAssociations() improved and extended; 3) Speed of analysis improved; 
some refactoring
"refactor StandardProvider to use a proxy design, separating item-related tasks into ItemProvider and subscription-related tasks into SubscriptionProvider. ProviderManager returns instances of ProviderProxy which handles generating the user service but delegates all other methds to either the item or subscription provider based on target type."
Perform some refactoring on getAllQueues
Refactored out to an abstract base page
PHP Plugins - Refactoring and defect fixing
Refactored Theory runner to make it easier to extend (See StubbedTheoriesTest for one possible extension)
"Final step in error refactoring.  GATK exception is now ReviewedStingException, indicating that this exception is really what one wants.  Only use this exception when you have thought about StingException vs. UserException and made a real decision."
"Refactoring on Subscripts, now handling ""special"" cases: - [[<- NULL and [<- NULL remove elements from a list - [[<- by names adds named elements"
Refactoring: add Stanzas classes
EST-417: refactored PersonsAndOrganisationsAndCommunicationChannelsFixture
refactor packages
Refactored Order package to use recommendations from TCS
Added various comments & tasks Refactored the origin of the universe.
Minor refactor of updatedChange steps in ChangeUtil
Refactoring of file updater.
"- Fix for bug#2216 -- KSC Report list is reordered every time a new report is added. - A unique ID is assigned to each KSC report, is persisted across edits, and is used instead of the report's index in the KSC configuration file everywhere, particularly in URLs.  The ID is initialized to be the report's index (starting at 0) in the KSC configuration file and is persisted the first time changes are saved to the file during normal editing. - Instead of having a set of fields in the KSC_PerformanceReportFactory that track what report and graph are being editing, move this to the new KscReportEditor object along with related methods and store this object in the user's session. - Use Asserts in afterPropertiesSet and other methods to simplify things. - Format code in a few places. - Refactor some controller handleRequestInternal() methods."
Refactoring of edu.umd.cloud9.collection
Refactoring
refactor station data structure
Refactoring of Saga Repository and Manager to imprve transaction support
HBASE-10277 refactor AsyncProcess
"Refactor @LinkedIn qualifier to @SetLinkedIn, @LinkedInHandler to LinkedIn and LinkedInHandlerScribe to LinkedInScribe"
Refactored to use a Sensor object instead of String names
SCRUM-62: first draft: search results are shown in list view. Some refactoring needed and lots of shameful workarounds. Had to remove @Override annotations as eclipse was complaining about it being added to methods not overriding methods of super classes (i.e. it was added to methods of classes implementing interfaces).
More package refactoring
refactored a lot. Now supports multiple handle methods in the same Handler class
SONAR-5389 Refactor new measure API
MORE: Test Suite refactoring Pulled in some tests from Jersey Bug fixes from Jersey unit testing
"removing comment lines, refactoring"
[BZ 948080] Add AutoRefresh capability to graphs other than portlet graphs. Refactored Auto refresh capability to be more generic so that it could be used for more than just portlets.
[MOD] Further IntelliJ refactorings.
CheckIN:Refactor DtE code preparing for support Top/Bottom N.
Made IRefactoringContribution an abstract class
Refactored into multi-module maven project.  Moved all the core code into lokiserver-core module.  Created an integration test harness in lokiserver-integtest module.
ListBuilder & refactorings.
refactoring
Release 1.2.2 - major code cleanup and refactoring - fixed non-Eclipse-like behavoir of view selection/activation/opening (work in progress) - bud tree view monitors resource changes now - refactoring of all FindBugs views - created new icons for findbugs action and views - created new FindBugs perspective - fixed popup contribution for the problems view (was never functional) - no system.out.println callls without if(DEBUG) flag - no printStackTrace() callls without if(DEBUG) flag - other code cleanup
refactored code of the menubar
"Removed a bunch of Math.abs() that aren't needed since TextureRegion doesn't return negative width/height. Refactored some widget style constructors that had way too many arguments. Added Button ""over"" drawable. Added TiledDrawable."
Refactored to new namespace com.google.appengine.tck.*  Note: e2e multisuite and multisuite.scan still need to be moved.
Fixed local tests which where failing. Better naming with constants rather than strings. Trivial changes to finalize refactoring.
Refactored InodeFolder to store children Inodes rather than ids
[OPENENGSB-200] refactor to support any Object in Authentication
refactored screenshot taking
"IMPORTANT: New Resource model do NOT mix the 2 FlexoResource (the oldest is meant to disappear, or at least be refactored) Added generic concept of FlexoResourceCenter Added FlexoResourceCenterService Old implementation of LocalResourceServiceImplementation has been moved to OpenFlexoResourceCenter and is implemented with the previous LocalResourceServiceImplementation Added concept of UserResoureCenter Added FlexoResourceCenterService in Application context (could be delegated to a singleton later)"
Refactor TmfTrace and dependencies - finalize ITmfTraceIndexer
Refactored Swing Binding and GWT Binding to look the same
refactor Path-from-click resolution
refactored micro BC
refactoring persistance support.
XWIKI-12815: Rewrite Zip Explorer feature as Components + make it more generic * Added Java API * Added getPaths() to Scripting API * Refactorings
CLOUDSTACK-9203 refactorred DeployVM code to be used by UpdateVM as well
minor refactoring do to Channel name change
Refactor WideMapWrapper and create new factory for KeyValueIterator and Composite
issue 66: refactored http clients to not be bound to a single endpoint such that redirects can be assigned to another host
Ticket #24: Design and implement a CDI friendly way of configuring our Camel Portable Extension  * Fixed bug resulting in a message processing seeing a Request Context from a previous message processing by implementing different strategies for assigning a Weld Request Context to the current thread.  * Refactored package structure.
some class refactoring
refactoring
dcm4che/dcm4chee-arc-light#837 : Refactor dcm4che-tool-dcmdir: import records from CSV file into DICOMDIR
This set of changes is all related to fixing the handling of schedule tags. The changes to the trunk include some refactoring and dealing with complications caused by SOAP handling.
Refactored. Added maven structure.
More refactoring
Add join feature for simple collections and maps. Refactor code for entity scanning
Refactored test framework code.
Android:  - refactoring
RxJava Vertx refactor (#2531)
"CAY-1479 EntitySorter refactoring: make it DI-based, internalize Ashowood lib"
Refactored edit legend action
refactor
refactored renderChildren code
refactored code
ISPN-4670 Matcher refactoring
Fixed compilation of Struct classes after refactoring.
refactoring of mask actions
refactored
pool: Refactor handling of replica size in the repository
1) Refactored StopMonitoringV2 2) Created MonitoringActionBase as a base monitoring class to inherit from 3) Implemented most of DetailLevel changes for StopMonitoringV2
Refactor stream with indices (#2565)
refactored board urls
StatementContext refactoring where index rule interaction is using IndexRule objects directly
Refactored
HTTPCLIENT-975: more refactoring. Handled ProtocolExceptions from RequestWrapper instantiations further down in the call stack.
"Refactored class names towards more ""speaking"" names"
Refactoring date/time handling (http://tracker.deegree.org/deegree-services/ticket/301).
"Refactored Subsetting code to accomodate alternate use case in which the  coordinates of the matrix/arrays are provided in the rows of a matrix. I wasn't aware you could do this, but ran into it in the psych package. "
Refactor:  * Move *Euclidean and SchönhageStrassen to the arith package  * Move methods out of Util.java
Refactored domain model:
#662 + #639 Major refactoring of ObjectController (and 301 for redirects)
Refactoring and integration of version information for User-Agents 
Skip parameter code refactoring (#22)
[Spring Boot] Refactoring and comments.
Refactoring Went ok
"renaming refactor on deserialization related code:  - In AbstractAction class, method convertJsonStringToMapObject(String jsonTxt)  is now called parseResponseBody(String responseBody)  - In Action interface and in several other classes renamed argument names containing ""json"" to ""responseBody"""
 #19 refactor application to a microservice architecture
"Several minor refactorings done on the plane - the main one being that IncrementalDocVectors now looks more like the other building classes, building with a static factory method rather than a constructor."
refactor
lot of small refactors
#NAME?
Refactor: tagText is too long; break out tagTextCallSolrTagger
refactor things with a convenience method on mustache
"feature #907 sprint5 : Refactor the EntityRepository implementation for JPA. The EntityRepository is to represent a repository of business entities. Because the entities can be an aggregate of data persisted into different data sources (database, JCR, filesystem, ...), it is expected the repository to take into account of these by using the corresponding data managers. The JPA EntityManager is one of these managers for the persistence in databases. The EntityRepository implementation for JPA is just a manager for JPA with additional stuffs for Silverpeas. If the entities are just managed by JPA, then the repository has just to extend the SilverpeasJpaEntityManager."
WIP on refactoring of FlexoController/FlexoMainPane/FlexoFrame
refactor meta features interface
refactor crosstab model code
patch  884146 + refactoring around handling events
refactoring
Vishal #0 Minor refactor
REFACTOR: moved proxy mode timestamp association from Timestamp to BDBMap.
Did some refactoring to improve quality
refactor Chengdu and Shuangliu to one class City
make tile download layer work refactored theme combobox to be filled dynamically after choosing the map themes are searched upwards from the map plus in a themes directory
"Refactoring offsetParamValue/limitParamValue to int, plus rename."
refactoring for better package structure
Refactoring
NMS-8041: Refactor Enhanced Linkd Topology
Refactor the JPA project even more.
"Refactoring service / controller hierarchy. Instead of using org.deegree.controller.XYZ, the controller (protocol-specific classes) are not put below org.deegree.XYZ together with the reset of the service classes."
Moved math/transform package to dataprocessing/signal/transform and refactored appropriate classes. Added dataprocessing/language for processing natural language. Added basic word parser for pulling the words out of a text. Added a porter stemming algorithm implementation and made it into a word parser.
Refactoring path integral framework. Implemented simple version of MLT.
Some refactoring and bug fixes.
#https://github.com/37coins/technicalDebt/issues/65 Refactor dependencies
rsc.drivers packages refactored.
[PLAT-1296] Refactor time-series master; Rename
refactor(cmmn-assertions): move cmmn related 'assertThat' (et al) entry points to specialised class
refactoring
Refactoring some persistence classes to use CommonCommandPersistence.
Adding unit tests for tachyon.util.FormatUtils and related minor fixes and refactoring.
Sonar Persistence API refactoring
[refactoring] Better name
Refactoring
[PLAT-4020] Refactoring FX forward points base function and added PV function
refactored the template tests to remove code duplication
Refactored token servicing and context
Refactoring.
JFG-469 Refactor InformationCollector
[PLAT-2779] Storing job execution results per value specification for forming ComputedValueResults on-demand; refactoring result copying between delta cycles; ability to query cycle for ComputedValueResult instances in addition to the raw values
(1) Reverse refactoring: Plavemark is now Pin again (2) Fixes in band math
"- Refactored FloppyImageHelper service:    - There is now only one deployed web service: ""FloppyImageHelperService"".      This is calling the proper instance depending on the underlying OS      (Windows = FloppyImageHelperWin / Unix/Linux/Mac = FloppyImageHelperUnix).   - Moved FloppyImageHelperWin and FloppyImageHelperUnix to [app-Dir]/impl/utils   - adjusted build.xml to reflect changes."
refactored for multiple commits between pushes
Refactored JDOTemplate.
Refactor getXxx methods in FilenameUtils
Refactoring the ControlState -> UGSEvent in UGSPlatform.
Documentation and refactoring.
Bug 991149 - Refactor Plugin Container Services initialization
Refactor.  What is the point of subclasses based on OS type and then continuing with OS-conditional code?
"refactoring, introduced some semi-automatic tests"
Refactor fabric8-karaf module layout
"Refactoring DropDownChoiceButton, Refactoring ControlGroups, Building simple Bootstrap DateTimePicker"
merged with netcdf directory stucture refactoring from atlas-ensembl branch
REFACTOR: rearranged code to simplify testing.
"integration tested sending, refactored channel error handling, fixed issue with rabbitmq deserialization of long strings (was clobbering mule sessions)"
Refactored ordering of parameters; introduced currying API; first crack at handling updates.
refactoring steps document interface
Refactor Server deployment handlers to use AttributeDefinition
Refactoring to handle IHI dataset
Fixed some problems with the URI encoding and some refactoring
[AESH-29] added separator char and boolean flag to enable/disable appending a char at the end of a completion. refactored and added some tests.
"refactor, tests"
"loop is now available for all activies, refactored class names, service task now uses an event definition actor like the other tasks"
"more tracker refactoring, unit tests to follow"
refactoring VcfUtils + test for this class
"refactored code in person, party and unit entities; bugs fixed."
Ticket #2869 Refactor experiment page - experiment page table moved out from api request handler
Refactoring of package names in gae module
SMX4KNL-78: Small refactoring of the Feature interface
Refactoring + introduce collection memory store
Refactoring du lien entre le ProducteurImpot et la StrategieImpositionFamille. Est encore amenée à changer dans l'avenir. Ceci est fait pour incorporer les subtilités fribourgeoises dans le calcul d'impôt.
refactor kast options
refactoring
Refactoring of names for better semantics
Refactor en un controlador. Nuevas dependencias de pom con versiones actualizadas. Nuevo arquivo de configuracion para la aplicacion.
have assignment and foreach complete. refactored some stuff so that Gremlin has an evaluator that leverags the XPath evaluator for XPath based components of a statement.
"TEIIDDES-2093, TEIIDDES-2005, TEIIDDES-2074 * Added Import Properties editing in Teiid Connection Importer * Refactored core Translator property classes to designer.core * Added TranslatorUtils class to simplify getting property definitions from translator * Added data source property defn description to data source property items for display"
"Added tests. Code cleanup. Added Poi support to Excel reader, refactored the code for this."
"Bugzilla Bug 175767 bubble charts too small in some cases. Add 20% margin area to display bubbles according to bubble size and min/max when computing scale. If bubble is out of bound because of specified min/max, to clip the bubbles. Refactor the logic of outside data check. Fix a minor bug in scale UI."
tests completely refactored
Refactor to improve equals/hashCode performance
o added cleanup for diff backups o added max number of stored full backups o some refactoring
"Lots of refactoring, major updates to the network manager."
Refactored twitter listener to a standalone worker
Refactored the deleteStage service to include groups
refactor qualifiers
"Refactoring to unify prefix and direct defunit search, eliminating some underlying bugs. Some work is necessary still."
refactor: rename dmlcommand -> sqlcommand
Refactor Property
"ACT-60 more refactoring configuration, persistence and test"
* Refactored collections for them all to be generic (ADTs).
Refactor reporting
more refactoring and associated bug fix.
More testing for refactored SABR / SVI code.
"Generic mechanism for doing Attributes and Attribute Types on many classes. (Review code, and Refactor.) - TRUNK-2588"
SONAR-3315 Refactor code to better keep track of original file
ISSUE #525: Refactor PerChannelBookieClient
"Add a utility class that can make a model from input that is not dimension-reduced, along with associated refactoring"
#999 - Refactor tidy for ...  @DiscriminatorColumn columnDefinition is ignored for DDL generation
Refactored WidgetHandler. Fixes #519
"#JC-1248 JavaDocs improvement, test refactoring refactoring for banners"
"Added tests, refactored code, and removed unused code."
backend status refactor for myth services api v1.0
"Fixed weirdly missing ""polling"" refactor in package"
refactoring
Small refactoring
Initial refactoring of sparse matrix/vector
"[Archi4] Refactor UI Providers, EditParts, Figures, Icons"
"refactoring of the report stack , SYNCOPE-158"
big refactoring of DatacentreApiController
"Bundle Deployment - Generate static deployment names - Changed API such that all deployment creation (not just wizard)   generates standard naming. - Refactored deploy/revert wizards based on new naming approach - updated tests and test scripts - Also, updated GetDeploymentConfigStep to *not* incrementStep in   getCanvas call if there is no config. That approach no mightily   messes up the wizards."
Further refactorings for the MBeanServer stuff.
"refactoring: renamed *Rank to *Ranking - as it is not a rank, but ranking algorithm"
Refactoring
SONAR-2501 refactor test API and fix extraction of subgraphs
Initial refactoring of Rendering framework to support new API-based delivery of render-ready data (RAVE-924)
Refactor some files
Refactor MethodRoadie to remove duplication Remove stale TODO comments in code
Big refactor
TESB-19960 refactor SL LocatorSelectionStrategyMap
Refactoring - moved to package address.contact.
Refactored
Implemented partial indexes. Refactored how savers deal with indexing.
"huge refactorization to allow faster, more intelligent queries"
refactored the fabric8-forge app into a WAR so forge works better without adding forge stuff to the global class loader
77439 Pull up: strange change tree [refactoring] [pull up] plus changed NLS strings for MoveInstanceMethod
[Image Export] Add settings to SVG export and refactor ImageExportProvider framework
refactoring and a bug (equals should be !equals)
minor refactor to also support an XML version of the EIP diagrams
refactoring and cleaning up.
Minor refactor
refactor
misc. cleanups and refactorings
Refactoring some action names so their functions are more transparent FEND-144
Import directive test and other refactoring done in freemarker tests
refactored BitcoinURI
Partial work against jpox database refactoring.
"Refactoring complete, now need to check it all still works"
refactored to provide one abstract method to override
Added stub ISO live test and ListISOsOptions minor refactoring
 * Refactor OAuth so that it doesn't require private keys when we aren't signing anything.  * Rename constant serviceAccountCredentials to p12PrivateKeyCredentials as this better describes the credential value.
Refactor: extract superclass OperationResult from FetchResult
SONARJAVA-670 Refactoring
"AS7-5078 cli if statements parsing: a bit of refactoring, extracted tests to a separate file"
Tests and refactoring
refactored for easier extension
"refactoring; tests added, some variable and classes renamed etc."
Refactor- simplified parsing by auto-consuming whitespace at end. Plus no need to trim.
#28 : Refactor renderer API to make it easier to execute UI commands
refactor package
refactoring to improve array value assignments
Complete refactoring. Updated libraries versions. Updated package names.
Add ifExists() and refactor the LWT predicates. Introduce ifEqualCondition() and deprecate ifConditions() methods
"Large refactor action, ServiceInterface splitted into 7 interfaces"
CFID-50: Refactor use of UaaPrincipal prior to creating new package for dao classes.
document and refactor visualizer
Refactor JolokiaHttpsHandler so that it's functionality of checking for client certs is implemented as an Authenticator instead.
Refactor RejectExpressionValuesTransformer to also be available for chained transformers
refactor test
"Refactor, no functional change"
Major refactoring
"refactor preferences, update summary"
#14 - Refactored Piece and extracted utilities to PieceHelper
SOC-1192 | Refactor the Activity Object
Refactoring the LibvirtComputingResource   - Adding LibvirtRebootCommandWrapper and LibVirtRebootRouterCommandWrapper   - 2 unit tests added   - KVM hypervisor with 10.5% coverage
Refactoring generator to support method generation.
"refactor some of the dragging, worked on panning"
Refactoring nascent evaluation framework. Added new scoring based on estiamted strength.
IDE-1169: rename id refactoring now also changes references in importing config files
refactor
"refactor packages (command, object, config, common)"
interface refactoring log4j added
Refactoring of deprecation fix tooling
some code refactoring on Pattern Matching
testWhenStringHaveMultipliNumber_refactor
refactored package structure
refactoring
Still refactoring.
added some api for entity creation - refactored some merge configuration
refactoring
refactoring
"Remove various runtime classes, including several implementations of ResultSet. Refactor OptiqResultSet to allow cursor based upon an arbitrary Enumerable."
package naming refactoring; fixes #3
Refactoring
Tokenizer refactoring * Simplification of individual dictionary Tokenizer implementations. * Partial support for a default constructor
"Refactor/simplify the way we define and handle channel, cache and cache-container metrics"
Refactored dashlets and added alarm table to alarm dashlet
MIFOS-3868: refactor and tests around adjust last transaction for withdrawals.
"refactored inner class fudge builder, so it now requires autoFudge wrapper for it to work (avoids ambiguity)"
srmmanager: Refactor how various operations handle active transfers
[TACHYON-1304] Refactor code about NetAddress
Refactored: use the CMS algorithm presented by Dijkstra
"Refactoring baksmali so that the template attributes are passed in, instead of relying on reflection to get attributes from an object"
Refactored
o more refactoring
"refactoring, clean up"
dcm4che/dcm4chee-arc-light#837 : Refactor dcm4che-tool-dcmdir: import records from CSV file into DICOMDIR
Refactored TaskSchedulerSpec
api_refactor: refactor event apis
Refactored MapTTLSaturationTest.
Planned everything out then refactored to match the plan Hopefully for the last time.
more maven options; not yet refactored Delegates; update maven template
tests refactoring
Deep refactoring of environment. Step 1
refactor SMPC proxy handler
Created a Spring context for the ScanReportPollerFrontEnd and created an integration test to load the context. Did some light refactoring on the PollerFrontEnd code.
Refactoring nam from KnownGene to TranscriptModel
Refactor/Renaming
refactor
refactor code
ENH: RequestGroups refactoring
big refactor to introduce HeuristicConfigPolicy
refactor
refactor state handler
refactor serilaize filter
refactored test names
[MIFOS-4216]Refactoring LoanBO
Some API refactor. I may have missed some.
JBRULES-816 Refactor Column to be Pattern
refactoring the testAuth methods
refactored and completed attribute validation/expansion
Refactored innards of TypeStructureInformation.
#NAME?
"Refactored the comment manager class to having a file contents class. This class has the file name, lines and comments."
"Updated shell, refactored results hierarchy, exposed Sets utility in Furnace API"
Package refactoring
mega commit for multi-lane implementation: - xml input for LANE_CHANGE_MODEL (see onramp_multilane.xml) - work in progress for LC modeling  - changes in interfaces  - refactoring
refactor of export criteria to be more in line with general reporting (and benefit of cheap excel export and report caching)
Tons of refactorings. LeaveProgramModeOperation added.
"Minor test refactoring, trying to tease out a unit test fail problem"
Refactor PeriodUnit to PeriodRule and move into chronologies
Refactor PlaceService to reduce method numbers
Refactored MetroPlugin loader for possible initialization order errors.
HIVE-4810 [jira] Refactor exec package (Gunther Hagleitner via Ashutosh Chauhan)
"Implemented (untested) areNodesAlive() for SessionManagement, did a lot of refactorings and documentation for better understandability."
[#LIB-155] Refactor configuration | Error messaging improved
[refactor] start separating browser logic and rss logic
* refactored most of the LatencyXYZ to ProfilingXYZ classes * implemented logging of profiling values * profiling paths (formerly known as LatencyPaths) can now start and end at edges
Bug 281028: [xpath2] Need to Refactor Promotion rule implementation https://bugs.eclipse.org/bugs/show_bug.cgi?id=281028
Refactored code out of FileHeader to facilitate rename detection
Major Refactor: Content is no more!
"Fixed trailing tab characters in CSV output, refactored some ugly printing code."
test update for XML parsers after refactoring. Test Plan: https://docs.google.com/spreadsheets/d/1shwyuM4slD4ZyYHLO9kDfku3-HagpEnq_xjEwi2JJaY/edit#gid=0 @rev gtorres@ @bug W-2736196@
"New JPAMember class to deal with with member resolution/invocation, refactored JPAProducer to use."
Refactoring a few useful routines for detecting mendelian violations
[Updater] more refactoring
refactored cache
minor test refactoring
Refactoring per ISIS-1427
Refactored to old more simple event model
[PLAT-3281] Refactor: rename RepositoryFactory to FunctionRepositoryFactory and RepositoryFactoryBean to FunctionRepositoryFactoryBean
Refactor window actions
Docker test stabilization after last refactoring (#1716)
Refactor GTFS loader to load feeds one-at-a-time; this should allow per-feed configuration
first working version of permission management through ui some refactoring new and modified websocket commands
Removed redundant synchronization. Refactoring
"EST-282: Fix, add and refactor tests"
refactor package structure for annotators
folder structure refactoring for example
little refactoring : commitFile renamed to synchronizeFile
refactor: rename AppContainer to AppThread
"GH290, refactoring and tests for multipart package"
Refactored ScriptCaller to adopt DWR 3. Made ScriptExecutor
Refactored the common logic of variable int/long encoding/decoding to AbstractVarIntSupport and added support for it in the DataByteArrayInputStream and DataByteArrayOutputStream
[DSU] refactor exchange gtfs
name refactor
Refactored REST api code to gerrit-events
core: refactor run vm as stateless
"Refactoring to try to (eventually) solve #357; still problematic wrt contextualization, infinite recursion"
The JBoss server home directory is now correctly retrieved from the parent resource component. Included some other minor code tweaks and refactorings.
refactoring for MultiTransformation
[PLAT-2271] Javadocs / slight refactoring
Once again refactored the activity engine to get rid of inconsistent results problem that happens on production
CAMEL-7328: A minor refactoring in camel-ahc so that it can be reused for websocket client
pool: Refactor ConsistentStore
Refactored handling of online players into the core
ColorTeaming v1.5.9 : Refactored all.
BST: Refactoring - extracted interface.
refactor
Fixes and more refactoring to reconcile time type generation
  * add SampleInfo and SampleManager and modify other classes that utilized old way   * minor refactor of ImageCanvas::setColor()   * minor changes to PlanarNumericDataset interface   * minor speedup to ImgLibProcessor (via changes to TypeManager and a couple Unary functions)   * comment in CompositeImageTest
Missing moves from the org.mayocat.store.rdbms.dbi.dao -> mayoapp.dao refactoring
Refactor chronology classes to avoid dupication in code
trivial refactoring: isFile renamed to isIntervalFile and made public
A rather large refactoring to improve the way Checkstyle is configured. It all started with adding the Configuration.getProperties() method.
Léger refactoring
Fixed bug #308  - Always refresh subscriptions when addSymbol() is called - Removed the erraneous return statement - Refactored and cleaned up code 
Package Refactor
refactored both omod and server projects
Refactoring gestion d'erreur (InvalidDeckAction herite de InvalidAction et PlayerRuntimeImpl.tryTo concerve l'erreur originale au lieu de transformer en RuntimeException). Ajout tests unitaires dans core + baisse seuil tolerance couverture en attendant refonte de GameRuntimeImpl.
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
refactor ListGrid handling
Refactored locations to not rely on existing DataCenters
NXP-2514: refactor to have more natural table names
gp:skolemTemplate & Skolemizer refactoring GCS vocabulary simplified to <#Container> and <#Item> gc:EditMode improvements & RDF templates
Refactor and add
Show Active and Inactive Spaces. Refactorization in Space AccessGroups Management.
refactor
LOW / Refactored logging
Refactoring and making the likelihood functions work.
major refactoring
Refactoring of DisruptorCommandBus. It now uses UnitOfWork and CommandHandler interceptors.
some style refactoring and javadocs
refactoring some names
"A whole heap of refactoring to make the names consistent, we now have InjectLink and InjectLinks with the latter being able to be applied to List<Link> and Link[] as well as the base class for the purposes of link header."
Made some minor refactorings
Changed author name and refactor
Refactoring and cleanup
Refactored exception mapper up to the base Rayo Servlet class.
refactoring: move IBytecodeMethod to the classloader package
gui refactoring
Refactoring to actually verify Trec scores.
Initial refactoring for osgi-bundle directory structure
Minor Change: refactored AcademicServiceRequestExemption to AcademicEventExemption
CompletionProposalLabelProvider related refactoring
refactored the name of the methods
"some refactoring of node based comparators, better names and introducing NodeNameComparator"
Pie and donut chart refactoring
added usage sample method LuceneIndexManagerTest.createOrUpgradeIndex() Refactoring for cleanup
Refactored ArgsParser to separate out logical parts and become more robust. Added Environment that handles the different OS file system paths.
"Make more stanzas federated, refactor some code at the same time. Remote outgoing events now working for publishing."
"refactor common stuff into otp-utils, fixes #580"
refactor
"#506 - Changes to DB Migration, support run on startup and external version numbering - suffix/subdirectory refactor"
some refactoring
refactor some method names add error handle for flow tweak UI visual  correct a test
ACCUMULO-4317 Refactor TTimeoutTransport to be able to better test it
"RF-13582: refactor core packages, remove duplicate tests"
"MAHOUT-497 - Refactor matrix stuff to put cardinality, size(), rowSize() and columnSize() into Abstract matrix.  Put rowSize() and columnSize() into Matrix."
Refactoring of trace related functionality in the Java code generator runtime library
QPIDJMS-108 Refactoring the AMQP Provider resource management code.
TEZ-1479. Disambiguate (refactor) between ShuffleInputEventHandlers and Fetchers. (sseth)
[TSS-26] Refactored the time series interface and implemented so far add() search() remove() and get() methods with unit tests
[BISERVER-5682] Introduced WizardModel. Various refactorings to make things unit testable.
refactored sip (security)
[MIN] XQuery: refactorings
TEIIDDES-1620 re-arranged Models tab in VDB Editor Moved most model info to ModelDetailsPanel Refactored Data Roles panel info into DataRolesPanel Added VDB validation check for multple sources but Multi-Source = false
FACES-1933 Develop new ContextMapFactory in order to provide the ability to easily decorate context maps (refactored in preparation for development of alloy:inputFile and bridge:inputFile by moving MultiPartFormData.java and UploadedFile.java from liferay-faces-bridge to liferay-faces-util).
Refactor package
refactoring initialization sequence and delaying updates
refactored BeefsEnergySimulationSummarizer
Refactoring for release 3.1
Package refactoring
[REFACTOR]Refactor in the init method.
Refactored and added SliceStatistics JavaDoc
refactor
refactored a bit
Refactoring model
Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings. - refactoring
refactored EL resolution for conditional handlers
"refactor, more OO stability"
refactor(spring-servlet-pa): make it spring-servlet-pa only
Methode name refactoring
Refactored bpmn parsing to new bpmn converter module
refactored packaged to org.javastack and update to v0.0.12
CXF-7164: Support tracing using OpenZipkin Brave. Refactored JAX-WS support in the tracing-brave module.
Refactor of Funnel Cache to use LoadingCache instead of Cache.
"https://issues.jboss.org/browse/RF-10940 Client-side validation function is fixed, JSFunctionDefinition is refactored"
Refactor the REST API to drop the /1/ in the URI. * move to EJB 3.1 local SLSB * separate the examples into their own war file
343482 refactored overlay deployer layout to use WAR layout
"Refactoring of main Activities and Fragments to avoid inconsistent states leading to crashes, specially in tablet devices"
Refactored Scanner2 to make it subclassable. Started to merge GCCScannerExtension into Scanner2 making it configuration based.
complete refactoring into separate components
More refactoring
"toString simplifications, forwardingmap refactorings/renamings"
SearchRestService.search method refactored to be better extensible
tests refactoring
Refactoring to use custom @FunctionalInterfaces that allow checked exceptions
Changed the code to add in unit tests to test the AccountType. Did a bit of refactoring to move methods to the base integration tests.
"Added simple mixin parsing, AST child filtering, refactored default visitors"
Refactored and moved encryption package as part of the plugin package.  Updated and tested with GWT 2.0
Refactoring structure.
Refactored code. Introduce Guice. Done issues #4 and #5
Refactoring.
519259: refactor ConfluenceBuilderTest to use JUnit 4 annotations
"Add new pastebin services, refactor"
Major refactoring
fixes #2. made changes to api. refactored and renamed. updated doc. changed group id.
Some minor refactorings
[#LIB-77] Refactor AttributeCoercion(s)
Refactored packages structure.
"Adding the nested and ""messy"" configurations and tests for them. A couple of refactorings to enable more code reuse."
Major refactoring for switching configuration to Xstream.
"Shashank,BalajiN | #5 | Refactoring. Making classes to write excel to response generic"
"storing web pages, jpa stuff refactored"
"JBRULES-3405 Rename RelativePosition... to TotalRank.... + refactor RankingComperatorFactory to RankingWeightFactory (easier to use), similar to strenght/difficulty weighting + introduce SolverBenchmarkRankingType enum"
o Refactored to improve performance
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - refactor and cleanup
Refactored ContainerBuilder API. Added support for generic types.
Refactored
Move image conversion into new BinaryPartAbstractImage; refactor so that generation of Inline element is a separate method.
refactoring paging
Refactoring - moving code
refactorings
refactor Context
"Second round of refactoring, renaming classes, etc..."
"minor refactorings, edits"
Major refactoring of SerialCommunicator and MainForm. Attempting to simplify the SerialCommunicator (i.e. it shouldn't know anything about Grbl) and to bring all control logic into a new control class. When finished the GUI and the backend should be completely separate and I will be able to make a CLI front end.
refactor
refactored common metrics selector logic to an abstract base class
Refactor some Database stuff into packages.
Small refactoring
CAY-954 EJBQL Query: Support for single table inheritance (refactoring -> implementing a stack of the marker buffers)
refactor Context
refactorings in mailing of the OCR status
Refactor TripDetails request to support conditional inclusion of response elements
MAGNOLIA-3546: refactoring extracted Activities which were anonymous classes. 
Some refactoring
more refactoring
Removed source function and refactored PebbleTemplate to be more thread safe
Refactoring of to better support views. Still not complete!
Refactored nephele/pact outside with minimal changes to ozone (see ozone branch)
fix caching issue + refactoring
"Refresh only div when plot is toggled Add first graph to GapStatistic Cluster Indexes 1-based Add Job Cancellation logic Refactor GapStatistic to build model outside of execImpl() Lock Frame properly, etc."
demo refactoring
Addapt to changes in initilizr json. Also refactor code to be more testable
Refactored to only store connector name
CAMEL-5670: Fixed NPE in MQTT publish. Refactored code to leverage async routing engine. Polished code.
JBRULES-129 Make no-loop work - This is a big refactor of KnowledgeHelper and Consequence
fix and refactor DLX tests
refactoring- fixed name EnrolmentState
refactoring tracker experiment
some refactoring
Refactoring; move `ClassStack` as separate helper class
GPF refactoring * Operator is abstract class  * OperatorContext removed from API * Programmatical operator graphs possible (beside GPF API and Graph XML)
"PMD-76 Renaming refactoring - changed model to domain, where appropriate"
"added tree images and modified css so the images aren't loaded from developer.yahoo.com anymore, modified loading gif in tree, renamed tree.get webscript to child-nodes.get and refactored GUI accordingly, small layout fix in content representation view"
refactored bread crumb navigation
refactor to proper namespace
refactoring
Refactoring tests : Use annotations
- Cleaned SBC component - Fixed typo in cassandra config - Refactored the cassandra configuration. For applications now the row key will be the application's jid instead of the app id. This makes common queries much easier.
same type similarity MR and some refactoring
added column to route output. Refactoring.
SONARPLUGINS-1 : Refactoring to avoid issues under IE 6
Major refactoring; additions to CyTables
"#13 Google map component Refactoring + support for Markers, Polyline and Polygone"
refactoring: added dummy matrix and factory
unit test refactor for issue #2721
Refactoring of client-side API
* Stressors start recording after (optional) ramp-up period ** using volatile boolean to start the recording instead of CountDownLatch - stressors are executing requests right from the beginning ** using Phaser for signalization of end - allows changing number of stressors * Moved blackhole result consumption to makeRequest() * Refactored Completion -> Completion + OperationSelector
Created a 'kernel' component for the Neo4j kernel. This contains the refactored version of the 'neo' component.
Refactor the Xmi and Dynamic Vdb API
test wasn't renamed after refactor
"Refactoring, moving classes from ivory.core.driver to ivory.app"
"exploded annotation into single annotation. Removed Fallback classes. Refactored dependencies, samples, site and javadocs"
Refactoring
Refactored dead code elimination
"refactored to nicer ""fab"" name as we're not really implementing pomegranate - plus I can barely type that correctly :)"
"REFACTOR: nearly complete rework of ArcIndexer, BDBIndexUpdater to stream everything using AdaptedIterators."
Test refactored so it's possible to test with different classpaths
"HEMERA-2343: refactored jobexecutor interfaces into own API module and put it into shared libs on glassfish, adjusted build and jboss subsystem accordingly."
Refactored key expressions
Refactoring
refactored ListHandler for path handling
Add new group. Refactoring
#NAME?
SONAR-7899 Refactor server file system
"olap query service refactoring, move stuff to OlapQuery, small repo fix"
refactor
packages refactored
"#70 add projection operates for predicate and subject, and internal object URIs (filter out if not rdf.basekb.com) and refactor UniqTool out to simplify development of various uniq tools"
refactoring ECKey
fix #287 and refactor slightly
#NAME?
webapp: refactor webapp setup
Renomeando interfaces fluentes e refactor do formatador
Refactor URL handling in CellShell
Refactored
XWIKI-3766: Faster navigation for image and link insertion * Added functional tests Updated tests to match the refactored error classnames. Improved validation tests to also test the error markers on appropriate fields in addition to the error messages.
Refactor/merge a lot of MacOS X and Linux code into BasePosixProcess class.  Create DirectByteBuffer instances that wrap around our natively managed blocks of memory so that we completely avoid copying data.
refactoring - moving PromptDialog out
Refactored Field and GameController to avoid depencencie cycles
Initial refactoring on full file transaction support
"Fixes GH-22: -Dfile.encoding dumped as reproduction string. Also: various refactorings, pulled out Traces and ReproduceErrorMessageBuilder."
refactor getUser
"[ENG-85] Refactor position master, including type-safe identifiers"
Applying a unit test for COLLECTIONS-220. AbstractTestObject is refactored to provide a utility method that serializes and then deserializes. Dave Meikle's fix for said unit test is also applied. 
Controller refactoring
Refactoring TaskEvent persistence
Cleanup/refactor.
"Refactor location tracker for string keys, multiple ignores"
refactor again for maven
Refactoring of Relay package. Extract Android to own project
core: Refactor Default DAO to receive entity name
Further refactoring of oxalis-outbound.
"Refactored the exporters into plugins; Currently only the CSV plugin exists, and is selected by default."
a little refactoring
Refactoring unit tests
#NAME?
EST-38: refactored BreakOption
Refactor common code to abstract FileSystem class
A lot of refactoring to bootstrap code resulting from further optimizing #106.
refactoring
Refactored pucmscm
#NAME?
Refactored SkuAvailability
Refactor: Extract HappyPathYield and ExceptionalYield from MethodYield
Refactoring existing code that was using two sets of workspaces
Refactored: making the network layer generic
Small refactor.
General refactoring and improvements. Moved observers shared logic to BaseBitmapObserver class. Added getBitmapFromCacheDir method which tries to get the file from cache or file system. Fixed bulkBitmaps method so that observer gets notified. Added ResourceBitmapLoader to easily load resource bitmaps.
"UML diagram added, the example refactored."
[changed] dataservice - switch the change map equals and check methods in the super class [refactored] dataservice - multi subscription test cases
Refactoring: aligned method naming for UI actions + improve commit done in rev 34457 for AllDocsTest (we test that the action columns is avail for all users - logged and not logged. The test should be further improved to check the available actions).
Refs #3455: Removes unused code and reimplements methods from CyNetworkViewDesktopMgr that were deprecated. Some code cleanup sand refactoring.
Refactor the ldap wizards to depend on apache.directory.studio plugins
refactor
Refactored degree and degreeinfo in order to extract the degree name into the degreeInfo. That way a given degree can have different names for different years. This is a modification requested by the Cientific Council
added the refactor
refactor interval distributions. Don't collect metrics. Using data from shift-arrays
Refactored Window.
refactored String related functional tests out in a separate test class.
* Refactored complete structure
refactoring implementation of functions to allow java functions to process their tags as well.
Refactoring the views so you don't always have to create one
Refactored model objects to be standard JavaBeans.
#1 refactor #2 add /forgot-password
More refactoring
Fixes and refactoring for compound OT impl.
"qa-maven-plugin: refactoring of tasks cleanup, added some tests"
ssl feature added for client ssl-config added to client-config client-config refactored
code refactoring
#534 - REFACTOR: Internals for lazy loading specifically improving errors/logging in cases of lazy load errors due to deletes - Initial refactor
[OPENENGSB-1292] refactored wiring page and tests. added new tests and css
Project layout refactoring. Added Service creation
"Removed 21 bit limitation on string length. Broke string reading into smaller methods. Refactored variable length int and long encodings. Won't touch them again, promise! Added canReadLong. Removed variable length short (not terribly useful). Kryo now throws ConcurrentModificationException from read and write methods if invoked from a different thread, but only when DEBUG logging is enabled."
pool: Refactor meta data store interface to allow bulk updates
Introduce BatchContext. Refactor code. Unit tests still to be fixed
Refactored common repository code into template
Samples refactor and new docs for samples
Refactoring: removed IEdge interface
heavy devy refactoring. decouple EML parsing and Esper logic -> two separated modules.
"Refactored variable name logic for issue #52. Moved logic form Expression into VarSpec, where it should have been in the first place."
Fixes #335 by way of introducing an LRU VertexCache. Added configuration option tx-cache-size to make its size configurable on a per transaction basis. Greatly refactored the PerformanceTest Case to verify that the LRU cache indeed solves the running out of memory problem as well as test for other memory leaks.
"Updated Grails+Tomcat plugins, added Grails Petclinic demo, refactorings."
?????Package Refactory.
refactor messy LDAP code
refactor js engine. migrate to java 8
RequestUtils.setSiteToRequest refactored to RequestUtils.setSiteFirstPageToRequest
refactor runtime delegate
Code refactored
Implemented Simon bean unregistration in JmxReporter#stop. Refactored JmxRegisterCallback for concurrent access.
Some code refactoring for the JavaCommandLineCompiler class
[192019] View Model framework refactoring.
Refactoring processor clean-up. Removed extension point reading. Processors are now defined in code.
Test Refactoring and New Test for import by releaseId
Refactor + only present not yet provided options
refactor the webshop and membership pages and controllers
Refactored JettyMain to make it more readable
refactor to support subclass
Small validator refactor
Refactored to use java.time 
Refactor the FormBuilderService in order to provide better separations between creating new EntityForms and populating EntityForms that have been submitted and are bound to a Result
Refactoring
refactored multi region param handling
TAJO-938: Refactor LeafServer and its related stuff
refactor discovery to use the new Pinger; remove a bunch of pointless/dead code and threads... yay!
#NAME?
A bunch of refactoring and details on the shooting technique.
Refactor ProcessInstanceUtils
refactoring TCP decoder structure.
[323900] [xpath2] improvements to implementation and refactoring of code-base
"Update release notes wrt #785, minor refactoring"
"#JC-1127 Added docs for the code review editing, refactored test to be more readable."
WELD-1794 Refactoring Weld Servlet integration
refactoring the import process to not update the IDs in the staging area but later when inserting them into the target tables
refactor SerializeWriter.writeNull
HSEARCH-301 Refactored the tests to use embedded activemq as jms broker. This makes the test run faster and they are easier to understand. There is also no need anymore for all these external configuration files. Only jndi.properties is needed.  Since the activemq dependency is managed by ivy/maven it is also a step towards HSEARCH-82.
Refactored OperationBackupHandler in BasicOperationService as a singleton instance instead of creating a new instance of it on every backup operation.
PR for issue #191. Additional tests refactor
Cleanup: avoid injecting Injector directly - Inject SingletonStore to restrict the possible functions - Refactor PasswordSecurityTest to correspond to the usual way of testing
Refactor: extract interface from Row and move to the api package
"Major refactor of API component framework to generify base classes, added AbstractApiComponent to reduce boilderplate code, minor compiler warnings removed"
Code refactoring.
SCRUM-878: another bit of refactoring
"Refactored the version information so that the version object contains the user and  date/time of the last change, rather than holding them separately."
"TAJO-287: Refactor TableDesc, TableMeta, and Fragment. (hyunsik)"
entitlement: refactor DefaultEntitlement
[MOD] Core: various refactorings
refactoring :estUnentier est maintenant isInteger
some refactoring
"Small refactor, generalising method"
"ICubeListener refactoring, added: - CellAggregatedEvent and CellValueChangedEvent - AbstractCubeListener - DimensionLeafLoader for bottom left containing value for specific dimension"
[changed] representation of timestamps [changed] labels/text when graph is (initially) empty [changed] history view and delta view tabs will be enabled when there are at least 2 recorded timestamps [refactored] text-for-label generation
"refactored, added twitter login"
FIXED - bug 223266: [DataBinding] Refactor internal package names https://bugs.eclipse.org/bugs/show_bug.cgi?id=223266
Refactoring
Did a bit of refactoring and documentationalizing
"1) Refactor arrivals-and-stops-for-stop functionality into internal non-bean RealTimeStopTimeService 2) Add ""useRealTime"" param to trip planner ConstraintsBean"
Various refactoring
refactored widegtDAO getter and setter
Refactor ColorTable code
#NAME?
Initial refactor of android client into java client
Refactored RemoteBlockInStream
Refactoring du ComputerForm et deplacement de ceclui ci dans le core
Refactored JSONContext to allow configuration from options. Implemented freezing logic for ServerMessages in light of JSONContext. Updated tests accordingly.
ejb refactor (#2528)
Mass refactoring and renaming to help the library become easier to understand and to trace.
refactor to clean up variable use
Small refactoring
SONAR-5389 Refactor test coverage API
Refactored away some duplicate code
Refactored HistoricalPropertiesDao to be consistent with PropertiesDao
ROO-2789: Push-in refactor of the Mongo Id field does not remove the getter and setter methods from the Mongo ITD
refactored method overlapsWith..
refactoring fixed some warnings
Refactor Graph somewhat; GraphTest still quite integration-y.
Refactoring the JsonCollectorITCase class.
"Refactored mvc resource paths, added activation/success landing page."
"JBRULES-1993 BatchExeution and message format -Some refactoring to better names, like BatchExecutor is now just CommandExecutor"
module refactoring
"HIVE-13360: Refactoring Hive Authorization (Pengcheng Xiong, reviewed by Ashutosh Chauhan)"
refactoring to make unparsed and parsed options work more like each other
minor refactoring
HIVE-4985 : refactor/clean up partition name pruning to be usable inside metastore server (Sergey Shelukhin via Ashutosh Chauhan)
Refactoring of ClassInfo parser.
Refactored GenePageTest and GenePage to latest test spec.
"Fixed some bugs related to waiting for elements to dissapear, and refactored the PageObject class to consistantly use the fluent wait API"
Refactor scoring; eliminate execute*()
Refactored and simplified SWT mouse wrapper code in preparation for fixing SWTBridge mouse wrapper issue.
"refactors, remove MFLine and add MFBoundarys"
Partly refactored AbstractEntity
refactoring.
"Fixes for refactoring by Guido Zgraggen and Lukas Felber, bug 234783, 234786 and 234791."
SerializationService refactorings. Improved usage of config classloader.
refactored controller names and jsps
refactored packages and groups to org.elasticsotfware
Big refactoring: split SemanticConnections into flow and replaced T by MainData in many parsers.
Refactoring KVP GetFeature parsing to better suit 2.0.0
Refactor BodyChunkedInput
Added Advanced server between NeoServer and Enterprise server. Refactored the default set of server modules.
"MAHOUT-236: - moved default file directory definitions to Cluster from ClusterBase - refactored CanopyClusteringJob and ClusterDriver into CanopyDriver & removed both - added runClustering option to CanopyDriver.runJob - refactored DirichletJob into DirichletDriver - added runClustering option to DirichletDriver.runJob - added emitMostLikely and threshold options to DirichletDriver.runJob - implemented emitMostLikelyCluster and emitAllClusters (above threshold) - refactored FuzzyKMeansJob into FuzzyKMeanstDriver - added runClustering option to FuzzyKMeanstDriver.runJob - added emitMostLikely and threshold options to FuzzyKMeanstDriver.runJob - implemented emitMostLikelyCluster and emitAllClusters (above threshold) - enhanced TestClusterDumper to utilize term dictionary and enhanced printouts - updated other unit tests, all of which run"
"Revert ""Fix refactor errors"""
#NAME?
"Refactored the WebResourceGenerator using the extension mechanism  * Added new features for Export, Appear, ExtraConf, ExtraFile and ExtraHtml  * Added a new scope for the download.js dependency Cleaned code and comments Improved Javascript generation (useless instancitions, indentations)"
1. refactor to provide a runAuthorization method that subtypes can call to force an update of the authorization state of all controlled objects.
Refactoring
SONAR-3526 Some refactoring
Refactored some zoo keeper cluster code
Smallest refactor [deploy snapshot]
refactored loadIfNotValid and added some javadoc
Refactored
PLANNER-352 refactor method names and remove unneeded javax.beans imports
builders for static factory methods #63 refactor usage of type.name vs type.typeAbstract.simple in templates correctness of other type's marshalers and moved names to templates improved generated javadocs in many places generate less unused stuff
Refactored main package structure from com.joshdrummond.webpasswordsafe.* to net.webpasswordsafe.*
"mods to reflect client <-> account chooser protocol, and refactoring..."
core:refactor: Split logic to new method
rebasing local vfs refactoring to remote master
"Created planned position functionality for intended routes - refactored safehaven area, updated intended route transmitted data to include planned ETAs and active waypoint"
Refactor of method names (getXxxXxx) in MetaRepo DataSetController actually does enable/disable of collections PurchasePrice no longer used as enum in SIP-Creator
Simple refactorings to increase focus on core values
Some more refactoring and added a first implementation for getCommittedTransaction( txId ).
JENKINS-12881: Refactor the message retrieval
"More refactoring trying to unify reader/writer side property abstractions a bit, for code reuse, consistency"
Refactored: use RevisionMap in InMemoryDatabase
Refactoring to the JPA Identity Store.
ImageTilesGenerator was refactored
"Trac #96: Refactor class visitor to delegation model, reduce visibility of internal implementation classes."
"Large refactoring operation in Functions.java and DOMNode.java, built-in functions are separate classes now."
"Refactored UserPanel:   - Removed use of AjaxLanguageChoicePanel in favor of (new) LocaleDropDownChoice   - Connected locale selector model directly to User property   - Changed <input type=""submit""> to <button>   - Use AjaxButton components instead of AjaxLink   - Removed resource key duplication"
refactor the equals expression to remove the awkward right and left names
refactoring node token streams in order to split out attributes to a separate stream
refactor : now using relations insteads of properties for storing same_as and types in backend
XWIKI-11170: Add ability to register Resource Reference Handlers for new Resource Reference Types * Iso-refactoring to prepare the field for introduing a RoutingFilter Servlet Filter
code refactoring
refactor to promote performance
ACT-741 refactoring persistence
"refactoring and fixes, also started work on preferences page"
Refactoring FormGroups
Refactorings & corrections
NXP-9331: Refactor to use Open XML converters for docx and pptx + add 'advanced' tests on documents with paragraphs
refactoring
Refactoring: BaseQuestion panel and QuestionCategories panel added.
"metamer: param: tests and facelet refactored, @assignTo covered"
Refactor tests.
"Refactor, creating initialiseContentTypeManager method."
Refactor edge is now a node instead of relationship in backend
Refactoring
Fixed bug #3619: Refactored SnmpInterfacePoller
Refactor common code in ConsoleProperties to internal Property classes. Declare that ConsoleExceptions are thrown rather than DisplayMessageConsoleExceptions. Add properties for external editor configuration.
Small refactoring of MissingRequireTest ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=118588681
Mid-stage refactoring
namespace: refactor chimera based cleaner
Refactor Service/Server models to reflect etter their scope.
VersenyzoCSVUpload refactored
"Client/Server architecture extended; BaseXServer console now supports all standard BaseX commands and additional server commands (kill, show sessions, show databases). Text interface and static BaseX methods refactored."
Refactored deserialization code
Refactored some type captions into entity captions  changed image for expand/collapse arrow
Refactor: Moved professional information from employee to person
minor refactoring
Refactor RenderLinkDirective
More refactoring
refactoring / maintenance
"Added Container, Item, Order resources. Added Batch.createScanForm function for generating manifests from a batch. Refactored and added a lot of new attributes for objects across the board."
Refactoring
- 81526: Change method signature dialog performance on name changes [refactoring] - 82724: Exception in change method signature
XLCLOUD-330 entitlement-dictonaries refactoring [vcms-gui]
ItEr57S04ValidacionEProbasFuncionaisItEr56S04: Refactor. Remove unnecessary createElement method.
Services refactoring
XLCLOUD-143 refactoring
refactoring handler and dependency life cicle
blast/blat/assembly: refactored code into seperate and common map/reduce classes in pipelineLib
Refactor. Tree node can contain several metrics now
SAK-8613 refactoring package name of util classes
Added parsing of template instance with exp qualified. Some refactoring of test check code.
Refactored: ClasspathContainer -----> JsGlobalScopeContainer
refactor daiquiri.naming
More refactoring. ATP.
MINOR-REFACTOR: moved common error checking into single method.
"Small refactor. Extracted methods, fixed warnings, etc..."
Enough refactoring for today. Backing up
codan: refactored external tool invoke to be more useful
"[MIN] Storage: refactorings, documentation (cont)"
Refactor jboss profile to use instead arquillian-jboss-managed
Refactored db tests
https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring in progress. - registration of Mozilla*Listeners has been moved to VpeController
OAuth Server refactoring
Fix for Bug 157174 [Viewers] Refactor new Viewer API
Bug 468607 - Refactor the wizard to run a container
Refactored
TestDataCreator refactored
Moved refactoring history editing to background threads
Refactored
"- WSRPPortletInvocationContext.renderURL method should now process ResourceURL instead of failing with a    best-effort policy as full support won't be possible before WSRP 2, though. - Refactored WSRPPortletURL hierarchy to share more code based on refactored ContainerURL hierarchy and start    better supporting resource URLs. - Fixed MediaType detection for WSRPResourceURL. - Added hackish support for resource URLs. - Started preliminary (but inactive at the moment) support for public navigational state in WSRPRenderURL. - Will need to revisit WSRPPortletURLTestCase. - Moved AbsoluteURLReplacementGenerator (and associated test case) to common module and WSRPUtils so that it   can be used outside of the producer module. Added static method to generate an absolute URL to avoid    creating new instances when not needed. - Updated WSRPProducerImpl.isRemotable method to use the proper constant."
Bug 24941: inline method - doesn't handle implicit cast [refactoring]
Refactor to add a hasChanged method instead of using nullSafeEquals directly.
"refactored the server beans into their own classes, as the single class was becoming very very crowded. Fixed JBIDE-12157"
#NAME?
"refactored solution key handling: separate options for name, id, name-and-id"
Refactoring of how arguments are parsed and compiled in different ways
most of refactoring for string ids
Further refactoring according to new file resource handling
"Refactored out the G2DGLCanvas so it has a simple implementation of just rendering as a canvas, not an entire JComponent hierarchy."
Complete disk store refactoring and added region attributes
HBASE-15296 Break out writer and reader from StoreFile. Done using Intellij15 Refactor > Move. (Apekshit)
refactored recording rules edit to use recording rule service
REFACTORING Renamed method for uniformity reasons
"renaming, refactoring, adding MongoBeanPropertyDocumentSource"
refactoring
Refactor tag keys to try to promote reuse with GWT
Refactoring
"Refactored file-based payload logging, made it available for both WS and MLLP transactions"
"Refactor location addressing code.  - page size is parametrizable, increased to 4 KB  - location stored in 6 bytes  - fixed concurrent modification exception in cache  - synchronization for MRU cache"
refactoring to abstract methods for getting the TaskServiceOperations
Refactor task provider
[refactored] unclear package and class naming for edge painting classes
pmd: refactor PMD main class (no functional change)
Refactored test scripts into new folder reserachHub/control
"changes due to refactoring of UserGroupPlugin methods, they now return business beans instead of the data objects."
Refactoring.
added stubb for TestConfigBuilder. cleaned some code and refactor
DNA-49 refactored ddl sequencer integration tests. Separated per dialect. Added standard revoke statement parsing.
little refactory code
Refactored name.
Refactoring: remove duplication by adding Throwables#getStacktrace (#1312)
prepare major refactoring to include fastest path too. step 1: simple + ref dijkstra passes
PRD-5595 small refactoring
Refactor. The WebSocketConnection class was becoming a monolith because it was dealing with connection logic and also distributing events to channels. Introduced a new class ChannelManager which handles this logic so that the connection can just send string messages without needing to know what they are. Also added a new method onError() to the connection event listener.
fix TTL overflow and some refactorings
Some more refactoring.
refactoring JAXWS components processing plus renaming classes
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - adjusting packages in MVC add-on
Complete refactoring of mavenized Pelops version created by Dan Washusen in light of scale7.org libraries
Major refactoring to loosen coupling between weatherstations and parsers
Majour Refactor and README update with details
PerspectiveStackRenderer refactoring - move perspective switcher initialization code from process contents to createWidget
refactoring
"MONDRIAN: Addition to changelist 8977(Formatting Inheritance). Added more tests, refactored code and added comments."
Issue #1666 tests refactoring was done.
ROO-2066: Refactor ClasspathOperations methods into TypeLocationService and a new TypeManagementService
Refactor DocIDMapper
refactored services and model
"Refactoring done, starting to work on rowKey generation and some HBase stuff before swinging back to serialization"
Refactor code to enable local access to JSON stats building.
Struts2 refactoring (#1176)
Refactored DefaultIdGeneratorFactory to its own class Replaced use of CommonFactorys.defaultIdGeneratorFactory with direct instantiation of DefaultIdGeneratorFactory
"renamed Builders to Creators, some refactoring"
"REFACTOR: Moved common HTTP header parsing code into HTTPRecordAnnotater FEATURE: HTML content is now parsed using the SAX parser, to search for META robots tags FEATURE: Now HTTP headers are inspected for Robot related instructions"
BREAKAGES: Complete API refactor to include resolving Group Variables. (For better Vault Support). This may be changed/added upon before release.
Tool Tips refactor
Refactorings needed for the scm-api branch.
Refactoring: Extract CellImpl.
Refactored
TEIIDDES-407 Refactoring Connection Info to datatools plugins.
Refactoring in-memory plugins as model for M/R plugins.
JBEHAVE-976:  Added support for XWiki as REST provider.  Refactored rest example to use XWiki as it can be more easily downloaded and installed locally.
refactor: extract methods + use defaultIfNull()
api_refactor: move zone and hypervisor user level apis to appropriate pkg names
BridJ: fixed some basic tests after runtime refactoring
HDFS-8605. Merge Refactor of DFSOutputStream from HDFS-7285 branch. (vinayakumarb)
refactored URI handling
grade refactor
Refactored
Start modular map storage refactor
refactored to support multiple working repositories
refactorings und tests
[violations-plugin] Refactored test and added testTwoFileMessage()
Refactoring to get rid of unnecessary state variables
IndentationCheck: Some refactoring and fixes for some TODOs and bugs.
refactoring of GraphHopperStorage: use composition instead of inheritance
further refactoring in legacy layer
Better singleton implementation and main class refactor
refactor resource loading
"ROO-2745: Post 1.2.0.M1 code refactor and clean up - tidying, renaming, and testing, mainly of metadata-related code"
Refactor of ingest/deserialisation code for Opta events ingest.  - pushed both soccer and non-soccer ingests into same model via custom deserializers  - removed superfluous data handling classes
refactor positions / enum using the indexreader along the lines of SegmentReader
released partial fix for #108256: [refactoring] [ltk] Refactoring preview does not correctly highlight 5.0 code
Refactor the code that loads a grade book from a file so that it can also be used for saving a grade book to a file.
Refactored HTTP header parsing code (required for HTTPCORE-4)
JBRULES-2209 Refactor Commands to mirror drools-api
issue4291 - upload file refactored
refactor defaultResponse to hold onto byte array of response as well as string
Refactored
api_refactor: move listzones and listcapabilities to dc
Refactored accountHandler to accountManager for the sake of all being the same
Slight refactoring.
Minor refactoring of WikiEvent class and subclasses to pull getType() method up into the superclass.
Refactored use of MessageId and SBDH InstanceIdentifier.
Finished porting across the Javadoc checking for types. Cleaned up Javadoc errors. Removed unused imports. Minor refactoring.
"Renamed JBDSFileChange -> BaseFileChange, JBDSRefactoringWizard -> BaseRefactoringWizard"
began controller refactoring
Cleaning up old activator stuff; refactored RemoteNode to NodeProxy
Some more lightbulb tests and refactorings
code refactoring
Refactoring WIP
core: Refactor FenceProxyLocator
refactored builder to work with incremental builds
[#29][#26] refactored handle of more than one hour delays
Refactor out generics where unneeded.
Refactor and fix violations
#JC-1915: Ability to update poll ending date  * Add ending date field to post edit form  * Add translation  * Refactor service so that changing date can be saved
BLC-554 - updated all tests to be in line with catalog refactoring
Refactor MutableDetector from wildfly-clustering-web-infinispan into wildfly-clustering-ee-spi.
"refactor, add metadata class"
"Refactored project, to be able to execute multiple queries within transaction. Some cleanup."
Switched to new WPS config schema. Removed unused site folder. Additional cleanup and refactoring.  
"Fixing allowed-sources for TCK tests, and fixing CartoFixture + TCKs + CartographerBuilder such that it checks whether the DiscoverySourceManager implements LocationResolver and LocationExpander, and uses it if so. TCKs run again after GraphOps refactor."
Refactor AbandonChange code into gerrit-server
WFLY-6120 SFSB PassivationTestCase fails to resolve XPC following passivation. Restore CURRENT_GROUP reference to Cache. Restore group validation in SimpleCache.create(...) Refactor eviction scheduler to be group-based instead of bean-based. Skip scheduling for invalid sessions/beans. Passivation tests should remove any created SFSBs.
Refactored the producer/consumer/queues to make the harness a general purpose piece of infrastructure.
Refactor indexer to separate out building of entities and indexer docs.
refactor eim schema package to allow translators to produce multiple records for a single item or stamp (required for recurring events and ical properties).
Refactored XmlNode hierarchy for better NS support
Tests refactoring
package refactor
refactor
"completed refactoring, all like before"
"refactoring, wip"
First checkin for the great Spades refactor.
refactor
refactor for springmvc
#NAME?
refactoring
Move and refactor a bit
"some minor refactoring, so the ChainImpl can access this for cloning SEQRES records"
Refactor: Fixed dispersion of time table entries.
refactor DruidDataSource
Added javadoc comments and did some refactoring in EmployeeService.
[MOD] map refactorings
#NAME?
"CORE 	Removed some warnings.  	Fixed Bug 39678 : Scanner doesn't support concatenation of different-type string literals (GCC)  	Refactored ScannerContext to use constructors rather than initializers.   	Refactored IScannerContext to use enumeration-esque kinds.   	Added code assist/selection search support to Scanner.  "
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
"Refactored ExtensionFragmentParser, added a test and some documentation"
Refactored to pull error log into its own class.
SONAR-3755 refactor rendering of issues
TEIIDDES-1077 Create A Model Extension Definition (MED) Eclipse Editor. Refactored editor pages to use a base class. Implemented view registry action. Implemented an error message framework for the pages.
refactor NodeLoaded to NodeActual
refactoring
Added docs to distance package.  Made some small changes/refactorings.
refactor EncapsulatedPixelDataImageInputStream fix DicomImageReader.seekFrame(frameIndex)
Refactoring of whole deferred binding process
Major refactoring of intermediary result handlers to condition evaluation listener
refactor and added admin resource
Refactor to better reflect what the function and variables are.
"model refactoring , new data services , use real dao service in rest"
refactor code from fabric8-forge so its easier to reuse code between forge and maven for creating/importing projects
refactoring and extending test case
Refactored repository
Refactoring a lot
"Partly working refactor to expose my own interface, rather than Jackson's JsonNode which was becoming problematic because it's not interface based"
ACT-741 refactoring persistence
refactoring
"Got labeling to compile, test. Refactored AbstractROIs somewhat"
[OPENENGSB-876] moved version of maven openjpa plugin to root. Some little code refactorings.
value refactoring
Refactor Period to have normalized nanos
refactor
SPARQLEndpointProxy-based refactoring
Bug 396524 - [refactoring] Pull Up and Extract Interface refactorings add unexpected @Override
Did some refactoring of forwards and added future as forward pricing.
RichFacesAccordion refactoring
[DROOLS-751] refactor propagation queue
refactoring - no release jar
Renamed Bfs classes; refactoring to kill warnings.
Arch will now be taken into account when finding a DeviceType to prevent that a 32-bit only simulator is used when launching in 64-bit mode. Refactored DeviceType lookup and moved the code used by the Gradle and Maven plugins to the core project. (fixes #691)
"Refactor to replace ""process"" with abstract ""worker"". This is ground work for an implementation based on threads rather than processes for debugging purposes."
"JBRULES-607 Working memory is not disposed when releasing the RuleSession -WorkingMemories now dispose() correctly, and stateless sessions no longer request to keep references -Minor refactor for more code reuse"
XWIKI-8870: Upgrade the Jetty distribution to the latest Jetty 8 version + refactored the jetty tools under a single directory structure
"Profiles refactored, shared elements in AbstractProfile. WARC-Refers-To-Date now set as long and correctly formated in getWarcHeaders."
Did an additional refactor to remove all references to ColumnInfoMap to ValueQuery and ComponentQuery
IMPORTANT / Refactored deletion for EditionPattern instances
refactor the getTraitValue since both drift and bundle managers need it
[refactor] rename method
"Created main class, added some comments and refactoring"
refactor ExceptionHandler
Changed names in schema documentation to match refactoring.  Regenerated javadocs
ModelResponse refactoring
Some refactoring
Refactor: Fenix Mavenification
Changes to support additiom of xmpp provider test plugin.  Refactoring to allow for easier creation of test plugins for new providers for various APIs
aes method name refactor
enabled UiBinder UI's to use Buttons to Navigate to pages by refactoring to allow id's to be defined post-construction.
HSEARCH-215 * Refactoring also applied to org.hibernate.search.jpa.Search
Flat rate interest refactoring.
Refactor / Generalization of EquityFuturesFunction to all FuturesSecurity types. NOTE CONTAINS REF PRICE HACK
fixed a bit refactoring
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - use better naming conventions and tidyup
Huge refactoring and moving some tests
refactored Jetty tab
Somewhat complicated refactor to move retrieveResponse() to Target.
Refactored
"Refactored monitor package.  In a nutshell, the monitor functionality (IO and Memory) was decomposed into 2 sets of classes: Stats and Monitors.  Stats acts a model that holds the statistics for the monitor and monitor collects and parses the stats."
bit of test refactoring
Refactored tests for build
Refactor #94
"refactored, created searchQuery interface based, NativeSearchQueryBuilder support"
"Refactored the ground config to share common bits with wall  config, moved painting code to separate utility class."
more refactoring
Some refactoring for code clarity in ColorMixing algorithm.
"[utils, compiler] refactoring: moved a few general-purpose utilities to 'utils' module"
included BTrace script used to profile Java KRun; minor refactorings to ease the writing of BTrace script or circumvent BTrace bugs
"cleanup, refactoring"
Refactor and add typed Options in order to improve the serialized contribution
Refactoring of classes from com.idega.util.text to com.idega.presentation.util
Fiji.jar: Refactor IJ1-specific stuff out into fiji-compat.jar
Some refactoring to make room for new commands
Refactored ProxyResponse class into separate interface and implementation.
Refactored serialization internal classes.
Integration Tests - NotificationBar refactor.
"Started adding tests for cursor tools, plus a bit of test class refactoring"
XLCLOUD-1848 Refactored EntitlementValidator to allow similar functionality in XSA.
"stress, new features & refactoring"
"JBIDE-19795: Clean up. Removing ""Bower Init"" launch shortcut. Minor Refactoring"
more refactoring of FTS code add some missing license headers
code cleanup and refactoring
Refactor the cli module
Refactor connection tests with waitFor method
additional refactoring of the microchip potentiometer impl
refactored; added test case that passes
"Refactored GraphTest, and GraphPageCategorical to latest test spec. Renamed GraphTest to GraphPageTest for consistency. Updated testIterations.properties."
Use the url commons in mvn handler and refactor to update configuration only when resolver changes.
Some design refactoring and code cleanup.
refactor test cases in terms of initializing 'Document's
Refactoring. This also fixes the remaining checkstyle issue.
"refactored and cleaned up the code, thanks @alexnederlof"
PLAN 4303: CUI refactoring
[MIFOS-4349] Refactoring around CollectionUtils and implemented the dates ordering validations
[DS-732] Further browse refactoring for efficiency
Refactoring:  Internalize (make private) state of the AbstractController. Add protected helpers for common tasks releated to the state for subclasses to use. Be extra parnoid about an error from registering a context.
org.orbisgis.geoview.basic: modification in the schema (fromXmlToSqlTree.xsd) + refactoring
First round of SqlStatementBuilder refactoring
"Refactors SequenceFile{Loader, Storage} to extend LzoBaseLoadFunc and BaseStoreFunc respectively"
"Refactor, clarify, tidy & comment context editor code"
Refactor command handling to support subcommands in Guice
Did some refactoring work to simplify how we deploy onto underlying Web servers. 
refactor attachment to API
Various refactorings and bug-fixes
SWC-136: minor refactoring
Make availability reports locateable. Minor refactoring of existing code.
"[MENFORCER-152] Refactor code, there are more spots with dependencies"
refactored
Some name and package refactoring. Added copyright
refactoring: move PageCache again
"refactoring, performance improvements by using array vs. lists"
Even more refactoring API work
refactoring: block devices
Refactor to stop ze loops of infinity
refactor the NCS component service to allow deleting orphaned components
Refactoring: added Pages
Refactor ImageCalculator to use OPS' ImageCombiner
Continued refactoring serialization
"refactoring of the schema and notification stack + bugfixing, SYNCOPE-158"
[*] make some refactoring
Refactoring
Refactor the name of both the directories and the artifact ids of the QuestionReply project and of its subprojects
Rename and refactor
#NAME?
Refactored PropertyDesc.
Refactor memcache test
REFACTOR: Timestamp package change: org.archive.wayback.core => org.archive.wayback.util
Refactored UIPrompt
Refactoring mise.marssa to org.marssa
Refactor SettingsPanel to use a Listenable object
"Refactor ProtocolMode to SubProtocol, ProtocolConstants to MinecraftConstants."
Refactored out of wrappers package.
Refactoring session clock to unify CEP and processes clock implementations
Some refactoring/renaming.  Fixed bug in tournament selection.
refactor to support *.java when generating scaladoc
"Refactor away Process and ShellImpl from ReadlineConsole. Need to have some sort of ProsessManager logic, not implemented yet"
#NAME?
PR: MNG-505 artifact refactoring to facilitate version ranges
Refactored package structure
Refactor
implement PageControl.equals() and refactor getRowData() to leverage it; get sorting working using AJAX
"Refactoring out handle...() methods, using Text instance where possible, and cleaning up message type switches"
Heavily refactored market data feed
Refactoring servlet filter to support x-frame-options
security classes refactoring
"FACES-1921 Develop alloy:outputRemainingChars component tag (refactored due to generator changes) FACES-1915 Develop alloy:selectOneRadio, alloy:selectStarRating, and alloy:selectThumbRating component tags (refactored due to generator changes)"
refactor investigating not persisting customField
more refactoring
DRILL-4275: create TransientStore for short-lived objects; refactor PersistentStore to introduce pagination mechanism
refactored names
"code cleanup, few refactoring"
[2109] refactor artikelstamm importer to new update service extpoint
#NAME?
typos & refactoring
A little more refactoring on DFA
SONAR-4069 Refactoring of Task extension * @RequiresProject is no more in API * Simplify TaskModule
CAY-1912 BatchQueryBuilder refactoring
refactoring packages + unit tests
ItEr27S06CUAsignacionGrupoRecursosAPlanificacionItEr26S07: Refactoring. Inlining some methods.
Refactor: extract waitForQueuedBuild() method.
refactoring solver
"* Attempt to gracefully handle truncated Deltavision files.  See QA #2892, closes #583. * Minor refactoring, so that I didn't have to make the above fix in two places."
DataManager refactoring
determinant refactoring
"Refactored TemplatesProvider to cache multiple stylesheets in Map<URI, Templates>"
Initial basic ruby debugger implementation. Preferecne ids refactoring. Adding DeployerHelper class.
CAY-1912 BatchQueryBuilder refactoring
Refactoring reconfiguration experiments
removed some unused classes and got rid of some unused methods.  Just the usual refactoring
[refactoring] Simplify PublishProductMojo
refactored base test classes for our own internal test suite
"refactor, comment, exception handling"
pre refactor
"refactored loopy into separate api, spi and impl modules"
Refactored createXPathToNode() to xpath.core
Refactored the TestLifecycle class.
Refactored StoreFeatures so that transactional is no longer depending on configuration.
MIFOS-4322: loan service facade refactoring for retreiving loan information.
finish JPA discriminator refactoring so there is now ServerPlugin entity (Plugin entity is now only for agent plugins)
Refactored TextUI
metamer: datatables filtering tests refactored
added priority argument in addSecureRepository with some refactoring.
more refactoring during initial UI integration
"[FIX] Core, HTTP: Refactorings. #1401"
XWIKI-10219: Move LDAP authenticator to its own module * refactor legacy LDAP
Refactoring of XACML code
Added several new tests and worked through a lot of test guice issues with the refactor
#NAME?
Initial refactoring for Bug 90257 [Preferences] Want to create an instanceof of a WorkingCopyManager
Refactored: now all TestFileFinder implementations send exactly one onAllTestFilesFound event
#328 Refactored instrumentation
Refactor StrutsWidgetBuilder/SpringWidgetBuilder into WidgetProcessors
refactoring of runtime and skeleton for crawlers
some refactoring
Refactoring and SRS support
"VNC client refactor - fixes, javadoc and junit stuff"
"major refactoring: dropped navigator addon due to its limitations for our use case and used a (temporary, experimental?) solution based on Vaadin's uri fragment utility. Made tree view generic (just pass the repo name to the constructor). IFrame view also works. Plugged in actions. Removed all specific tree view implementations. "
refactor to existing style
refactor test
Refactored deliver cancel
"Refactored some files, implemented the basic functions needed for search patterns"
Refactored all requests to use JSON and Strong Types
minor refactoring
refactor
Refactored code in XmlStudentParse to make it easier to work with.
"Refactor the conformance rules to remove some redundancy. Also modify ""CheckConformance"" so that scopes include extern vars in preparation for future conformance rules."
Refactor ModuleIdentifier out into its own class
ROO-2745: Post 1.2.0.M1 code refactor and clean up - reduce code duplication when creating fields and methods
"<CORELIB-SOLR> Minor refactoring of methods - Changed types of PrefLabel and AltLabel to Map<String,String> instead of String[][]"
"Refactored KernelExtension to make it easier to work with it as a stateless object. Did the same thing for IndexProvider, which is no longer a KernelExtension, but rather its own thing."
"#981 Refactoring, move SourceRHS init to start of property build."
[MOD] WebDAV: refactoring and fixes
- richfaces-selenium 2.0 - initial commit of refactored sources
Refactored the output executor functionality so that it's easy to inherit from and modify.
Refactor code.
refactor DTO
wip begin refactoring package build tools
Partial refactoring of DB building (to avoid svn issues)
refactor on aggregations changes
"Refactored out common code for ""move"" methods"
Implement counters. Fix issues. Refactor code and tests
much better validation in Move Unit refactorings
still refactoring DeploymentPreparer
Refactorings and preparations for extend #151
Refactored copy logic to new CoreMetadata method
Refactor potion capture to be sane/consistent
Refactored: created constructor generator and renamed methods
a little bit of refactoring
Refactoring in preparation for moving to Pax-Build
Client request processing refactoring.
Refactor setting module to admin module
"#JC-1378 Small refactoring (test method names, javadocs)."
refactorings
refactored Browser from API to Impl
Refactored citrus exceptions
JBRULES-1668 Smooks Data Loader -minor refactor
CAY-1912 BatchQueryBuilder refactoring
"Refactoring, to make nexusUrl non-needed."
Extensions and code refactoring; version 1.1.
"Refactored Thymeleaf Dialects so that BLC only has one dialect named ""blc:"".    Moved code to common to support new content processor.   Moved code in framework to streamline packaging."
some tidying and refactoring
SYNCOPE-231 Small refactoring of UserService and test
"larger refactoring. Basically included bnd usage directly into codebase, fixed a number of issues while doing so (defaults handling). Added Tests."
Tree converter names refactoring Added TODO for ComponentIterators class
Refactoring file permission logic into a help method
Refactor: move Util classes to util package and rename SVNUtil to Subversion Service as it works as a service.
Fiji Build: refactor Rule to provide a getBaseName() method
refactorings for and implementation of tcp listener feature
Refactored class organisation.
"Added Javadoc Provider & Subclassing Directives Provider to Extdoc view, refactored packages; added extension point for extdoc providers"
"Big UG refactoring and intermediate commit to support indels in pool caller (not done yet). Lots of code pulled out of long spaghetti-like functions and modularized to be easily shareable. Add functionality in ErrorModel to count indel matches/mismatches (but left part disabled as not to change integration tests in this commit), add computation of pool genotype likelihoods for indels (not fully working yet in more realistic cases, only working in artificial nice pools). Lot's of TBD's still but existing UG and pool SNP functionality should be intact"
Refactor classes in com.screwdriver.semperos.watch.*
Code refactoring.
Refactor to move reusable functionality out of SkinnableCharonPortal and into PortalService.
NXP-3343 : Extract IPTC metadata only with jpeg + refactoring
"More refactoring, fixed a small issue in X12 encodation of \r"
Refactoring SecurityService and SecurityAspect
Issue 435: refactored savvis code
SAK-2068 Refactored Profile tool to support Roster tool
configuration refactor
refactoring to ixa-pipe-ml
Refactoring SelectTranslator for better extensibility
Core: refactor internal Property API (#941).
Refactor elastic search and domain model.
"refactoring: new package roadsegment for all classes related to a single RoadSegment. During the integration the classes from the roadSection package (TrafficLight, Up/DownStream etc) will be moved into this new package"
[Archi4] Refactor IObjectUIProvider to take instances
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - applied varargs to minimise calling code
"Refactoring, to make things work wrt databind issue #69"
"PR: MNG-471, MNG-489 - refactor project out of MavenSession so that it can be cloned - refactor lifecycle construction out so we can clone the existing one and pass it into a new execution - only resolve plugins that are executed (MNG-489)"
refactor registry and add registry tests
"refactoring for index addition, tests for type conversion"
"Misc fixes/refactorings: * ""Transactions parsed"" count was twice what it should be * Made cancel variable volatile * Made ""TransactionPuller"" class reuseable."
MNGECLIPSE-810: refactor JDT support out of m2e core plugin
"refactored new renderers, created cleaner way to create them with builders and factory, first version of AGVRenderer is done"
Refactor - SkywardEyeProphetsEffect is shared so moved to new RevealTopLandToBattlefieldElseHandEffect
Refactoring statements
Refactored to use java.time
Refactored load balancing and changed headers to reflect enStratus -> enstratius name change
refactored to maven multi-module project structure
Refactored: make SchedulingControl the top level object
refactor config manager
Visual improvements to root pom file. Add license header to many files. Add new strings to i18n. Code refactoring. Add few comments to classes. Add new method for NotificationModel. Optimizing imports. Manually add constraints for email/username at E-mail connector page. A lot of changes to SendEmail class.
Small refactoring.
small refactoring
"Made the Bible book name drop down, by creating a BookName class. Refactored some methods to make their purpose clearer."
Refactored the interactive shell's API to its own module.
ENH: Refactoring - abstract DAO
JBRULES-816 Refactor Column to be Pattern
rsa additions/refactorings
Refactored workspacecontroller to be coupled with maincontroller
Small refactoring for creating plugin objects.
Refactor directions to Square
refactoring Numerator...
"javadocs improved, minor refactorings"
Refactoring to support different testing methods
"add '-detail' and 'refresh-interval' argument, some code refactor"
refactor CacheMissAction to CacheMissHandler
"IDE-1663 continued xml search ui tests - source refactoring - fixed issues on Windows, always keep one project in workspace - added TODOs for QA team"
Refactored vca structure
"HBASE-2641 Refactor HLog splitLog, hbase-2437 continued; break out split code as new classes"
[refactor]: clean up code
"Started on integration tests, refactoring model because H2 does not allow 'users' table"
refactor testcase
QBN: more refactoring
 - major refactoring and addition of initial gwt webapp
Got rid of index flags and put in a new mechanism for indexers to add files to the index directly. Got rid of IDocument and replaced it with IFile resources throughout all indexing framework. Minor refactoring of CSearchPage to get rid of internal dependency.
Refactor various admin services
refactored Operators
code refactoring
182346: [refactoring] Refactoring could flag affected binaries which are impacted: - added Rename Package
Cleaned up manifests by moving Require-Bundle to Import-Package (in many cases).  Also fixed problem with xmpp provider introduced by refactoring
jpaManager to PersistenceContext refactor
refactored to remove duplicate code.
refactorings in controllers
Refactor all 3 three Pair classes from o.a.c.l to o.a.c.l.tuple.
"Refactoring LayerTreeWidget Menu Creation. TODO : Refactoting of MenuSecureBaseAction and add Binding for Paste and Copy Action. 	Add WFS-T plugable Implementation"
refactoring
refactor
Refactored
chore(test/mt): refactor/clean up code
"Refactor the functional test so that it works correctly when doing a ""release"" build.  It's also separate from the normal Cobertura build.  And it works when run from Eclipse now, too."
refactored a bit to make DirectoryHolder a mix-in. Changed the name to DirectoryBrowserSupport.
Refactored: decoupled RevisionCounter from RevisionMap
SONAR-8724 refactor static method WebhookPayload#from()
[SHRINKWRAP-140] Unified entry point for DependencyResolver creation; refactoring to simplify and separate the API.  All tests passing.
refactoring reader classes to have a simpler gerarchy
refactoring
Cleanup and minor refactoring
Refactor: change names from API***Result to ***Result.
Major refactor of column and EntityFacade logic.  Added both caching as well as encapsulation for various field types.
"Refactored core, moved IEventHandler -> core.IHandler"
"NXP-4319: code refactoring, use the utility classe created for the image magick commands support"
"1) More simulation controls 2) Refactored trip status to use block status as its data source 3) Fixed a number of api fields that robert had been asking for 4) Tweaks for the inference engine, including a new (better?) motion model"
refactored SVG into widget style...
Refactor core annotation processing
"Cleaning form generator classes, refactoring to remove duplicate code. EasyWSDl is the default WSDL parser because we have a library version problem with Woden."
refactor code and fix test error
Refactor: Rename some functions in Rasterizer to match the paper writeup
Fix for deadlock in Cloud Foundry console. Additional refactoring of console code.
"work in progress - hibernate annotations, tests and DAOs, refactoring - introduced BioMartConnection"
Refactored the selection objects so that everything is statically typed rather than a conditional instanceof check. I used a pseudo visitor pattern approach. I also factored out the selection implementations into an abstract super class. I also simplified the selection objects and removed all unnecessary calls.
PDT API refactoring: put internal classes under 'org.eclipse.php.internal.*' package.
Refactor to separate general index code from specific use for a store
done some refactorings for common reference nodes sharing a IMember
Refactor IPage use Builder.
AS7-2134 Refactor the outbound socket binding implementation based on Brian's review
Ongoing refactoring (Users / Roles / Groups).
migrate some gallery-ejb test - only moving file because of refactoring history problem - Move some tests
SONAR-2447 Refactor permission check to work with resource key instead of ids
HADOOP-10432. Refactor SSLFactory to expose static method to determine HostnameVerifier. (tucu)
rather big refactoring. consolidated classes thats part of the command api under org.aesh.command. also moved impl classes under org.aesh.command.impl
#NAME?
Refactored serialization & type system. Types are now specified completely through Java interfaces. The redundant and confusing type system has been removed. I also removed some convience type functions such as isNull(). Please replace with instance NullNode or == NullNode.getInstance().
core: minor refactoring in run-vm
Did some refactoring and added some performance improvements to the partitioner.
refactoring partcover plugin to coverage plugin
refactoring
minor refactorings
Refactoring unit test cases.
refactor
[72920] InvocationTargetException when in-lining a method [refactoring] [inline method]
"refactor for centralize channel acquire and release/remove, issue #5841"
Lots of refactoring.
refactor thrift option
Refactored.
"Having problems moving packages around, tool is telling me to commit changes first.  Committing basic refactoring, this clearly broken, a correction will follow later today."
MIFOS-4684: fix fundbug warnings and refactor feeDto for loan creation flow.
Refactor scope of DbTester
"Refactored all transaction classes to extend ""RawTransaction""."
"REFACTOR: Many small tweaks and shuffling, added lots of logging, cleaned up some interfaces."
"ZooClient knows about the backup service port, so that ClusterManager can see it. Also some refactoring regarding parsing of the backup server port"
"Massive refactor for 0.3.0. Smaller codebase, easier to understand."
"refactor, fixes"
Refactor some to hook averaging methylation writer.
refactored servant lifecycle. created own package that contains the logic to activate and deactivate the notify servants.
Refactor some diagram menu items
" ItEr14S11CUConfiguracionDeOrganizacionsDeTraballoConUnidadesTraballoItEr13S13: Refactoring package ""workorders"" (now called ""orders"") and classes names inside this package."
Refactor the starter to Bootstrapper.
refactoring
"Refactor name, artifact id and hierarchy of hbase impl module"
refactoring add fleet business component.
Moved and refactored tests to run as both modeshape and jackrabbit.
logdb code refactoring
refactor common templates into common.st
TFJ-334 method name refactorings
Refactored.
Refactored HttpAsyncServiceHandler API; code cleanup in HttpAsyncServiceHandler and HttpAsyncClientProtocolHandler
Refactor and document the Metrics CDI example
Refactoring project creation
Refactored main method
refactored and simplified SecurityContext and Authenticator logic
Refactoring test runner to make regression test framework. Committing some static test data files.
In the middle of Lazy Tree Loading Implementation ToDo: code refactoring
#NAME?
Embryo_Tracker: refactored tracking
Code refactoring and trying Encog Machine Learning library
Initial implementation of ROP refactoring decoupling Hessian from connectivity layer and introducing pluggable serialization and connectivity layers.
"Done a part of admin functions, refactor view"
Provided some general-purpose factories.  Slight refactorings of operators and removed some primitive array operators that are unlikely to be used (they can be re=added at a later date if somebody really needs them).
refactor
Refactor selestion event processing in IdeCodeListener
refactor modules and add a all-inclusion module.
Refactored all tests into kie-remote-tests
Refactoring of a core part of the Enigma M3 and Enigma M4 simulation
#NAME?
"Refactor trie package: reduce interface by extending IterableSortedMap and only adding prefixMap method, remove all key analyzers but the StringKeyAnalyzer, refactor PatriciaTrie class by moving all remaining methods to AbstractPatriciaTrie and fixing the key type to String, integrating the test classes into the framework."
Enhanced ToolItem to show tool-tips Refactored ToolItem LCA's Introduced preserveFont on WidgetLCAUtil and moved writeFont from ItemLCAUtil to WidgetLCAUtil
"(1) Changes for PLFM-372 ""add stack prefix to IAM user name"" (2) Changes for PLFM-343 ""Support pre-signed HEAD requests to S3 since S3 does not support conditional PUTS"" (3) Some refactoring and commented out code in preparation for PLFM-216 ""Production Readiness: Prod and Test isolation"""
"#15 Refactored submit routines, removed duplicated logic, simplified  and moved the left over logic to MechanizeAgent.RequestBuilder. Also Parameters.getNames() was altered to return the parameter names in the order they where added instead of a sorted order. This helps to test and understand the outcome of a request better since the order to add parameters follows a logical rather than a natural order."
"Started to refactor/cleanup this component. Stuff in org.neo4j.graphalgo.path will be kept, whereas org.neo4j.graphalgo.sortestpath will be removed rather soon."
"ashish, gopal | #0000 | Pulled the InfoParser to base class and refactored the corresponding classes."
moved web.xml related methods to info.magnolia.cms.util.WebXmlUtil - will refactor more
CSPACE-267 intake service refactored to use java or rest apis of nuxeo using new framework test: IntakeServiceTest
refactored common functionality
Refactored package structure
Tweaks and refactoring
refactored - tested AsyncRequest
Refactoring: merged common code in search controllers
[GSCOLLECT-936] Refactor primitive hash set test to extend from abstract primitive collection test case.
refactor sql parser.
[C#] Code refactored&cleaned-up; removed violations; added unit tests
"Adding ThresholdingVisitor Tests. I made some refactoring on ThresholdingVisitor implementation to avoid static initializations to make junit tests more easy. This changes affects other classes like ThreshdConfigFactory, Collectd and CollectableService"
engine: Refactor validateVlanId method
Refactored test so it's ~75% faster.
"Migrate from xml based configuration to Java based configuration, add unit test for file list services, initial refactor of service code from web based part to dedicated part"
refactor sql parser.
Tests: refactor opening the database
#JC-536: Run email sending in a separate thread * Refactor MailSender
HAMA-886: Refactoring core.bundle package (edwardyoon)
"JBNADM-2827 - further refactoring to better batch the work and xactional boundaries, because prelim testing showed things still bombed on very large groups; "
refactor testcase
CheckIn: extract IJsFilter interface and make some refactors
plugin dependency init refactor
Refactored demo.client.local.game into smaller packages.
Resources + Other needed classes for new CDI test for EL refactoring added
Refactor GlimpsePainterImpl to GlimpsePainterBase
HD Skins Hotbar switching option Hide chat key Fixed custom block sending Protocol refactor
Refactor clear and fix code Forum
"EST-301, EST-308: add suspended status to lease item, refactor trail and approved value into effective value"
"csv export, different resultset formatters, refactored exporters"
Refactored (with some amount of duplicated code) just to avoid auto-boxing
"HIVE-17380 : refactor LlapProtocolClientProxy to be usable with other protocols (Sergey Shelukhin, reviewed by Siddharth Seth)"
"The core elements of HBASE-2037: refactoring flushing, and adding configurability in which HRegion subclass is instantiated"
refactoring the enum value methods so you don't have to work with a map anymore
Big refactoring.
ongoing refactoring: moving command buttons to the device frame.
Enable updating maps. Some clean and refactoring. Need test.
"DATADOC-160 refactoring to make parameter ordering more consistent, especially for string parameter specifying collection name override; renamed insertList methods; removed unnecessary methods"
Refactor.
[Bug #803] Refactor LimitingResourcesPanel
XSLT fixes SubjectRewriteFilter refactoring for better extensibility
important refactoring: TurnCostExtension.addTurnInfo to use fromEdge as first argument and move turn cost stuff out of encoder into OSMReader
Projects refactoring
JBIDE-18903 Refactor implementations of ITagLibRecognizer
"Added interface for Matrix Project, refactoring."
Refactoring of functional tests to remove horrid static dependencies. Introduced a server builder to deal with it instead.
Lots more work on test refactoring
"Refactor common API pattern for org.apache.logging.log4j.core.config.Configurator.initialize(String, ClassLoader, String) (calling with a null class loader) into a new API: org.apache.logging.log4j.core.config.Configurator.initialize(String, String)."
context renderers refactored
[gcc-demangler] massive refactoring and rewrite to handle gcc-shortcuts properly
Refactor classes to untangle dependency and clean-up architecture
"Futures Refactor - Deprecated InterestRateFutureTransaction*. Folded this into the Security, and renamed to InterestRateFuture"
Refactoring functions to use @ParameterName annotation. Implementing date arithmetics. Fixing bugs. Improving function invocation code.
refactor
Ticket #2869 Refactor experiment page Experiment chart data moved out from the ExperimentResultAdapter
test refactor preliminary XPath query optimization
Refactored ResourceLocator as separate bundle
align getter name to refactoring
core: entity mapping - refactor how entities are deserialized from request body [BREAKING]
Single event object refactoring in-progress Added GenericEvent Added GenericEventFilter + Test
"1. Refactored perform method 2. Added writeFile, currentBuildResultFailure, currentBuildResultSuccess methods"
Refactoring Results and verify()
"Refactored --snippet option. Closes #561, #302"
Support multiple selection for refactoring.
ZEN-19 Unable to correctly detect changed parameters & ZEN-53 General change comment generation fixed. Refactored change event handling to be generic for all attriute changes. Change information comment and Zendesk attribute update separated into different calls.
big hibernate refactor
"Refactor emitter descriptor to accept enhancements.(T50458, 55057)"
Refactor ConsumerGuest to GuestId.
light refactor
Refactored SQL generators to executors.
"-Changed default SNMP capsd plugin to be the new SNMPv3Plugin class-Changed the way the v3 capable service is detected by using the ""force version"" parameter to the v3 plugi-Changed default SNMP poller service monitor to use the new SNMPv3Monitor class-Changed the SNMPv3 service monitor status flag to ""off""-Created OpenNMSTestCase base class.  Eventually, all OpenNMS JUnit tests will use this base class if tests require a network, an agent, Eventd, and Database access-Refactored EventdTest and DJ's TrapdTest JUnit tests to use new OpenNMSTestCase base class-Enhanced v3 plugin and v3 monitor to handle all SNMP detection and monitoring.-The SNMP monitor now does a get instead of a getNext on the passed OID to check for a variable.David Hustace"
Refactoring and add class name to sheet
Adjusted and refactored testcase
refactor tests boundary -> aoi
Refactor chessman to piece type
Refactoring read to use instantiators.
refactor for support for 3.x services module (forthcoming) by moving existing site context to v2 package.
OPENNLP-880: Refactor data indexer
SB-617: Heavy refactoring of the strongbox-storage-* modules SB-450: Introduce the concept of a StorageProvider SB-451: Introduce the concept of a RepositoryLayoutProvider SB-628: Introduce the concept of a RepositoryProvider
Refactoring of MetaDataCriteria API to prepare support radio stations Added templates for meta data criteria query builders
[TMPARCH-16] Reimplement the VFS Memory Archive.  Needs more support from VFS to be fully-functional.  Needs proper tests.Consolidated some logic from MemoryMap impl into a common ArchiveBase as part of related refactoring.
Some refactoring of the metadata fetching mechanism
minor refactor of node and mixin type name terminology
Refactored coercing
 ItEr47S04ValidacionEProbasFuncionaisItEr46S04 : Refactoring the assigned hours controller and assigned hours model.
Added filter support to listImages(..) on MachineImageSupport w/ MachineImageFilterOptions. Refactored and deprecated similar methods in favor of more generic implementation.
Renaming and Refactoring methods in BSPPeerInterface
Refactoring ValidationsViewsFactory. Not it is more generic
refactoring DelayedRequestEnforcer
Refactored: renamed PrintStreamFailureHandler to PrintStreamFailureLogger
Refactoring to use new CacheConfiguration interfaces
Add README and LICENCE files Add .gitignore file Convert to maven and refactoring file structure to mave standart Included br.com.caelum.vraptor.packages file to prepare convert to vraptor plugin
Refactoring and some web
refactor restxcontext into restxsession add documentation to restxsession fail on invalid signature
Refactored to show Job API state
"Refactoring, JabatJobOperator -> JobOperatorImpl"
Legacy 3.x code removal ELUtils refactoring
"* Machine Setup now monitors for changes in children and attempts to refresh the nodes. This doesn't work perfectly yet, but it's an improvement and allows for dynamic updates such as adding feeders, cameras, etc. * CamerasPanel (from tabs at bottom) has been removed and it's functionality moved to the Machine Setup tab. * Cameras can now be added and removed without restarting OpenPnP. * Name and Looking properties added to camera wizard. These were previously settable in the table, but the table has been removed, so now they are fields on the wizard. * Auto generated action methods removed from cameras to allow the actions from the ReferenceCamera through. This enables the delete action in Machine Setup. * Minor refactoring and improvements."
using classes instead of packages to define profiles so that it's more easily loaded by a classloader and more easily subject to refactoring
"CLI: credentials prompt code refactored to use password-masking when available; pressing ctrl-c at credentials prompt should result in program termination, not in reprompting."
"HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang."
#1653: Refactored quickstarts to have beginner folder. Also reduced their naming in pom.
"refactored BLC so that instance variables in services, daos and entities are set to package level protection. also, methods that were formally private in these services are now package as well. added equals and hashcode to all entities. minor api refactoring as well."
undo some refactoring to maintain Vault compatibility
refactory packaging
"Small refactorings on AdaterFactoryRegistry, AdapterManager and respecive tests"
Large scale additionsand refactoring to pretty much everything.
Refactor var
[refactor]: rename handlerPool to handlerExecutorService
"Initial implementation of PrioritySerialTaskScheduler. Refactored ""Envelope"" generic class -- renamed it to ""Serialized"" and added transient object field to store deserialized object."
EHO-369 Added integration test for filtering customers. Gave the integration tests some refactor love.
Refactored response handling so that things work better with ERXStyleSheet. Changed from taking a WOElement to a WOComponent because we need a page component.
refactored and added utility methods within Sender classes
builder switchers and parameters + refactoring
refactored gyroscope impls ADXL345 and HCM5883L into components
Refactor of OpenWire code generation together with move to apache package
Refactor invoice calculation to make use of invoice calculation parameters
Started to refactor AsessmentItemController
JBEHAVE-754: Made cglib dependency optional.  Refactored unit tests to use inner classes.  Added TraderStoriesWithSpringWithAnnotationConfiguration as embeddable that uses annotation configuration.
refactored ReflectionTemplateBuilder.java and ReflectionBeansTemplateBuilder.java
interpreter refactored
refactored shortestPathDistance into shortestPathEuclidianDistance
Refactored PreCheckout class to be named BuildWrapper
TEIIDDES-1776: Refactor TeiidServerManager and ModelerCore
finished refactor
Refactor
ARQGRA-286: support for PhantomJS debugging + big refactoring
Refactor cloud-utils project into Maven default structure
refactored packages.
Major refactoring to make it work on OSGi.
refactoring
Code clean up. Module refactoring. MXDump as separate module.
refactorin a cuenta auxiliar
Refactored VariantsToTable so that 1) genotype-level fields can be specified (stabilized and supported code) and 2) the --moltenize argument could be supported to produce molten output of the data.  Added tests that cover these capabilities.
"TYRUS-372: Revise Match class 	+ match tests refactored 	+ ParameterizedHelloTest removed -> it tests regex URI matching that is not suported in Tyrus anymore"
Refactor implementation of Connectors and Managers
Refactored ObjectDataOutput and ObjectDataInput.
"https://issues.jboss.org/browse/JBIDE-7003, code refactoring"
#JC-1869: Fixed remarks: *labels names lowercased *PluginController#getModel refactored *Added unit tests for QuestionsAndAnswersPlugin
Refactoring
"page-fragments + tests: completion of select, test refactored with new fragment"
Code refactoring: added a scheduling internal execution method and the management of execution exceptions.
Refactored TrampolineCompiler a bit to make the flow clearer.
"Refactoring low level calls, in progress"
meeple event refactoring
Provider refactoring
cleanups and some more refactors
refactor again the modules - create the core module
"crecoskie July 1, 2005 - Applying minor patch from Jerimiah Lott to refactor some code into protected methods.  This should allow for better subclassing of the wizard."
"Changed Tree/TreeItem#getCreatedItems to render only materialized items, removed unneeded preserved property MATERIALIZED from LCA, fixed failing tests, cleanup - bug 342978: Refactor Tree widget to make it really virtual https://bugs.eclipse.org/bugs/show_bug.cgi?id=342978"
Bug 125227 Refactoring the URL Convertor
Refactored code to improve the testability
[MATH-1038] Refactor code as agreed on the mailinglist.
"minor refactoring, no functional changes"
Refactored GcAwareEntityRepository
"Graphics: Code refactored relating to the initialization of the components of the graphics frame, the layout of the centerPane, te activation of the threads, and the activation/deactivation of the loadingPanel. Includes solving some bugs (thread related error messages, errors when proportional line thickness is combined with violation relations)."
Refactor PlaceService to reduce method numbers
Model refactoring
Creating mapping for pathoutage table as a secondary node table Begin refactoring importer to populate the pathoutage table based on parent data
"Updated Environment to have unique name. Refactored BootActionsTask Updated environment to allow no VPCs. Instances will just be launched in EC2. All resources are now tagged in AWS with ""terraform.environment"" and the unique environment name Instances now can have a 'zone' which is required if there is no VPC present. Abstracted out SshTask to PostCreateAction"
refactory do projeto search-google
Refactor the datagram to create the connection base when the handler is added + improvements / fixes
Refactored to Eclipse/OSGI packaging conventions
"[HER-1905] H3: allow crawling to begin while large seed list still loading * TextSeedModule     refactor announceSeeds to occur in background thread if non-default blockAwaitingSeedLines value is set     signal CountDownLatch on each line, allowing calling thread to proceed at right count * profile-crawler-beans.cxml     commented-out blockAwaitingSeedLines default settings (-1, meaning wait for all seed lines)"
Added some javadoc and refactored somewhat
OPEN - task 2: Refactor Fql elements into a separate package  http://github.com/agorava/agorava-facebook/issues/issue/2
"Refactored. Converted to Maven, Organized, Updated."
rearranging of a lot of the outage stuff in the UI to match alarms and events in preparation for a dao refactor; only the outage display page is left to fix
started compute refactoring
Refactor computation stack
Packages refactoring
"[TEST] - fix ignored tests, checkstyle, refactoring"
Centroid linkage algorithm + small refactoring
refactoring / addition of quickfixes for creating/browsing for classes
Action refactoring
Refactoring
Refactoring - no functional change.
[MOD] XQuery/storage: faster double/integer parsing [MIN] Refactoring continued
Today refactoring results. No new functions.
"Refactor cut: (3) simplify the way Solver is reset + deal with propagators added more than once in the prop engine (actually, an exception is thrown -- to be patched)"
Huge refactoring of SQL Select: - changed ORecord to OIdentifiable in all the operators to work with any targets (now as Iterable<? extends OIdentifiable> - created new OCommandExecutorSQLExtractAbstract class as base class for SELECT and TRAVERSE since they have a lot in common - moved OIndexSearchResult in a separate class because Select was enough large - removed OStorageEmbedded.browse() methods - improved iterators to reuse fetched records
"Refactoring, reformatting"
refactoring for view specific wall displays part 3
refactoring: to allow EFO-enabled searches right after webapp is reloaded (based on previously indexed material)
refactored to remove Classifier factory pattern and allow for model polymorphism
Refactor built-in DSLDs for Groovy 2.5
Refactoring to make base Solr setup reusable.
refactoring. move abstract classes to data library
[MATH-1205] Major refactoring of the descriptive statistics package.
refactor
FACES-1566 Develop ResourceHandlerWrapperBase class for Liferay Faces Util and refactor existing ResourceHandler implementations to subclass it
minor refactoring
Bug 309392 - Need a way to set framework properties from web.xml cleanup and refactoring
"Only need one kind of scanner, regardless of whether refactoring is enabled."
refactoring UI model
" r4432@admins-computer:  adridg | 2007-10-25 13:12:33 +0200  Add throws to the interface; refactor a little; implement getSender() in a naive fashion.  r4433@admins-computer:  adridg | 2007-10-25 13:23:12 +0200  Mostly docs  r4434@admins-computer:  adridg | 2007-10-25 13:32:20 +0200  Factor out scanning for a particular header  r4435@admins-computer:  adridg | 2007-10-25 13:36:30 +0200  Document scanForHeader  r4436@admins-computer:  adridg | 2007-10-25 13:53:28 +0200  Implement getMessages for date intervals in a kludgy and inefficient way.  r4437@admins-computer:  adridg | 2007-10-25 14:04:51 +0200  Push the loggers around a little, give TDAccessor a MailAccessor to return.  r4438@admins-computer:  adridg | 2007-10-25 14:21:24 +0200  The BTS interface was buggered (ha\!) and add an interface for single bugs.  r4439@admins-computer:  adridg | 2007-10-25 14:50:44 +0200  Implement Bug  r4440@admins-computer:  adridg | 2007-10-25 15:00:13 +0200  Implement the HPFS (Hallucinogene Paddestoelen Fantasie Systeem, roughly 'Magic mushroom fantasy system') bug system access; this returns null for everything until we have a clue about what bug system is going to be used or how things will be stored.  r4441@admins-computer:  adridg | 2007-10-25 15:05:20 +0200  - Give BTS accessors the name of their project.  - Create the BTSAccessor from within the TDAccessor  r4442@admins-computer:  adridg | 2007-10-25 15:06:15 +0200  Give the BTS accessor a logger"
Progress on Bio-Formats Importer refactoring and tests.
HV-490: Refactored
"Project refactoring, add proper ""utils"" project."
refactoring: split to model view presenter (3)
some refactorings
Refactor unit tests for Control LCAs
Fix for id error and refactoring/string externalization
Refactor Bitmap.
"Refactoring of interfaces to make RichSObject first class, hide ids, and allow immunutable set and copies"
"refactored Hits into the org.neo4j.index.impl.lucene package namespace, to ensure it is included and avoid conflicts with lucene itself (which had dropped Hits)"
Added Blessed Wind and few refactors
[DSU] gtfs refactor
Done more exception refactoring
"Refactor graph code to eliminiate ResponseTimeModel.  There's some KSC breakage, but that will be fixed once some more refactoring is done."
Fixed some poorly refactored unit test in heritrix1-controller.
Refactoring.
Refactor: Avoids having stale transport lingering around.
Refactored tests to use JUnit.
bookkeeper stats refactor
small refactoring
Refactor for R1.0
"refactoring to prepare for using Eclipse project information, and some bug fixes"
REFACTOR: moved various Adapter<*SearchResult> into org.archive.wayback.resourceindex.adapters
Added CompositeDescriptor and refactored other classes for best fit
refactor ftl
#9 dependency injection from plexus container + big refactoring #7 more tests for package scope
Missed a method name in the refactor
Refactor util methods to check message/location of Exceptions
Minor refactor
"Loader refactoring: - better progress tracking API (not just percents, but text) - defaultAtlasLoader is one less thread per load and a bit cleaner"
[KARAF-2752] Small refactoring
Refactored HBase KCVS for future use in Faunus
Refactored the test cases for remote-graphdb to reuse the same test cases for all transport layer implementations.
Refactoring
this is a big one - fixed modal targetting and refactored getText()
Moved effect from framework to card implementation (only one card used it and very few cards can use it) Also some small refactoring.
Console module refactory
A lot of refactoring for RS and WSN federator
refactoring API
Small vnmapper test refactor.
Refactored Server Module/Webserver setup / reused ExecutionEngine in CypherService
refactor for consistency
B2.1 partial - start of refactoring including moving some logic from webinterface classes to bitpreservation calsses. Still work in progress.
"1. Resolves Issue #72: Introduced CachEntryListenerRegistration interface support 2. Introduced RICacheEventDispatcher to support capturing all events to be raised during an operation on a cache and the dispatching said events to appropriate CacheEntryListeners. (note: support for filtering is yet to be added but now we have the infrastructure in place). 3. Refactored existing event dispatch algorithms to use the RICacheEventDispatcher (note: need to complete the rest of the ""TODOs"" to finish event dispatching and listener support as part of Issue #62)"
Refactor more
Refactor to prepare for other methods of adding nodes.
"refactoring to be consistent and clear about method and variable names, adding javadocs"
Refactor Log4JFilter and improve branch coverage
Bug 372795 - Refactor common code in GDBControl* classes
refactored submissionView to submissionList
Preprocessor refactoring. Fixed a bug joining three tables.
core: Refactor SetupNetworksVdsCommand
fragments: waiting api refactored
Refactor AggregateQuadTree helper classes
Continued refactoring
Refactor functors from inner classes to subpackage
WebDAV: Refactor Transfer class; add billing and transfer monitoring
Panel menu icons refactoring
"MODE-1396 Tck Versioning Tests fixes: - fixed getVersionByLabel (was not using the fully qualified label name) - fixed setting & updating of successors and predecessors (root node was not taken into account & no value was being set when the mix:versionable was applied for the first time) - added & refactored session state validation in the JcrVersionManager - fixed children names and reordering  when restoring versioned children  -update the JcrTckTest class to be able to exclude only specific tests from the TCK, instead of entire test cases"
Core: refactor some storage code (#389).
"Moved some security test resources around, updated crypto properties to WSS4J 1.6 tags, and did some refactoring of the WSS4JInOutTest."
Refactoring
Refactoring Builder process + add unit tests
[SUREFIRE] Refactoring
Make preauth session check not fail when no principal found.  Refactor principal populators step 1.
refactored GOP and GKOP Configurations (and related Pool/Factory) according to http://wiki.apache.org/commons/PoolRoadMap
"Refactored ""allocate vlan to account"" code"
Refactored DAO and Service layer.
CacheRequest and refactoring
Refactoring Change classes
Huge refactor. Going open source!
Some more refactoring
done documentation and refactoring
clean up & refactor HTTP separating protocol impl from auxiliary stuff
Refactor retrieve() to keep a consistent level of abstraction throughout. This will allow us to break down our test a bit.
ISPN-5349 Refactor query DSL to be able to use it for event filtering
Jetty9 - More refactorings and renamings.
Renamed HtmlResponseWriter to JavaScriptResponseWriter in order to reflect what it actually does - bug 340927: Cleanup and refactor HtmlResponseWriter https://bugs.eclipse.org/bugs/show_bug.cgi?id=340927
jira-integration: Several refactorizations in JiraTimesheetSynchronizer
Refactor EntityMetaDataValidator to EntityTypeValidator
Refactor behaviors
"MGNLSAMPLE-4/MGNLSAMPLE-5/MGNLSAMPLE-6: refactored paragraphCollection configuration:  * ""columns"" now named ""paragraphCollections""  * introduced SamplesModuleConfigHelper (SamplesConfig wrapper) that can easily be used in JSP templates with <jsp:useBean> tags"
Refactor the way calls to findSimilarTo are resolved (untested)
more refactoring
Preparations to restructure StockWatcher module into 2 separate vertical panels. StockList is the firs panel and therefore refactored async callbacks. The other one will be GWT form to launch HTTP request for JSON stock data.
complete refactoring to the error handling code and small corrections to the converters
Refactor and more tests
"http://jira.sakaiproject.org/jira/browse/EVALSYS-515 Removed the use of scheduler APIs directly from the jobs scheduling code, updated external logic APIs to have jobs methods, fixed up all related jobs logic, removed many try catch blocks, and refactored parts of the job scheduler code, fixed up the jobs code to deal with the new states correctly, fixed up the evaluation saving logic to correctly handle the new states and send the right trigger to the jobs logic"
Refactor getter name.
Much refactoring Added crude echonest stubs
Refactor subscribe set before adding notifications
JPA package structure refactoring and provider class renaming
Annother forced commit on refactor
Refactored ContextMenu classes slightly so that more code is consolidated inside the TopoContextMenu class.
General refactorings and adding comments
HK2 Factory usage refactorings.
code refactoring and added support for annotations on parameters of constructor
More tests (and refactored tests) around class-loading
fix hibernate transaction issue. refactor code
Refactored class renaming detection so it is easier to use from the various WarningComparator classes.
Refactor tests and add openjpa tests
Refactor class for the changes according to BSI-TR-03124-1 v1.2 section 2.2.1.
Start refactoring for issue #11
"[MSUREFIRE-23] refactor pojo only methods into pojo test set, and create TestNGXmlTestSuite"
"refactor MedianSplit, add MedianSplitObserver"
Refactor package
"MAHOUT-947: add new inputs to seq dumper, refactor to common CLI input"
[JBIDE-7208] refactored
huge refactoring : renamed t / r to in / out for input and output parameters
"Fixed UI labels, refactored types, added docs, and fixed bug when replacing option values for tunnel commands"
"Not ending refactoring command pattern in ServerController.java 	modified:   src/main/java/ru/cinimex/client/ClientController.java 	modified:   src/main/java/ru/cinimex/server/FieldLogic.java 	modified:   src/main/java/ru/cinimex/server/ServerController.java 	modified:   src/test/java/ru/cinimex/test/FieldLogicTest.java"
minor refactor to make it easier to override starting
Implement basic margin collapsing / Various refactorings in preparation for shrink-to-fit / Add hack to treat auto margins as zero
Several Refactorings on overlay network Fixed #185 (IWSN on portal server won't shut down in time)
"Rename all classes, refactor raw trading classes"
"Refactoring intervals, separating the process of parsing interval lists,  sorting and merging interval lists, and creating RODs from intervals.  This gives Doug the ability to keep using our interval list parsing code when sorting intervals on our behalf."
Started refactoring apache client implementation to be thread safe. Need unit tests to verify it works!
"refactored out Map<String, Serializable> in most places...still working to get imports / tests right"
Another part of refactor
[Spring Boot] Refactoring.
Refactoring to prepare the addition of models object in social services
Summary: Refactoring code.(T57944)
UI Fixes. Small bits of refactoring to aid decoupling of some classes.
rename package mapper2 to mapper now that refactor is performed
"Cosmetic refactoring: making Deserializers callbacks more similar, passing same common args"
"ROO-435: Introspect an existing database to support simple automatic JPA entities - extensive refactoring, eliminate need for identifier details in @RooEntity, use new addon-jdbc for JDBC driver acquisition, misc other improvements"
FLUME-292: Refactor OutputFormat and OutputFormatBuilder to better support plugin authoring
refactored MessagePack.java and TemplateRegistry.java
refactored properties handling
#NAME?
MBM-21 Refactored the builders to use an improved and consistent API.
[REFACTOR] Move TimeMethod in TimeCommand since these method are only used for that Type of Command. See #352
ACT-696: refactored compareTo on LazyLoadingQuery and moved it to the items themselves.
"Refactoring, reformatting"
Refactoring package name
Refactored the  code to methods
Further Refactoring
State machine refactor (#1520)
Refactor package naming.
Refactoring for better package and name organization and changed httpclient from 4.2.5 to 4.0.3 for GWT compatibility
[refactored] dataservice | feature: multi subscriptions - ifmapj PollResult mocking ( heavy ) [changed] dataservice | feature: multi subscriptions - PollTaskTest & ExtensiveSingleMultivalueTest for the new mocking ( other multisubscription test cases coming soon)
TFJ-30 some code refactors Renaming Scattergram to LineGraph
Minor change: - some adjustments to the results interfaces - refactored the code used for delegate so that it is on the domain class
Refactoring for Bug 72720
#NAME?
More work to make rename refactorings API
Refactor thread safety tests.
"some varaible naming refactor, issue #27 - allow empty plots"
Feature #6192 - user sort of favorite links: * Fixing modified user link query that did not work with MsSQL database (SQLException) * Modifying the mechanism that compute the order in order to perform the treatment only into the service that handled a change of position * Modifying and adding a lot of unit tests * Refactoring some code to get a more readable one
Refactor on smart tasks forms and lists.
#NAME?
Refactored: moved matching logic out of AsynchronousSink
PRD-4181 - Some more refactorings - moving inner classes to AbstractRendererComponent
Further refactoring of `JsonFactory`
some DSL refactorings
mvn refactoring + add first step on testng
refactored: interpretation for each action type in its own method
"refactored driver generation to BaseTest, which is the base class for any test wanting to use the remote.server for configuration of the driver"
K transformers refactoring and improvements
Major refactor to use response handlers for validating HTTP status codes. Remove URL property from exception class as the caller knows already about it. Add constructor to DavResource to get fields from DAV response. Simplify handling of URIs in PROPFIND response using java.net.URI instead of string concat.
fix jsp errors with customer positions when editing group details due to refactoring and using dto.
Refactoring: Moved ignoreFilters logic into SlicerResolutionStrategy
Refactoring stuff for new workflow adapter + implementing NoOpUserWorkflowAdapter
simple refactoring; added test
Refactored ShapeDrawer
#NAME?
Large refactoring to better abstract out the type system. Provides better handling of alternative type systems such as XML Schema. Continuation of the XSD generator.
Finished refactor.  Order collectios now broken.
Refactorings to resolve bug #342677 (Refactorings to remove ThemeManagerHolder)
"Issue: 46 - Refactored indent strategies into their own subpackage - Split the original CFAutoIndentStrategy into two classes:     -> CFEIndentStrategy - contains indent strategy generic code     -> CFScriptIndentStrategy - contains indent strategy code specific to CFScript - Created a TagBased indent strategy (more where that's come from soon...) - Moved tag-autocompletion, auto-quote close & quote step through into indent strategy NB: above original code is still in the content assist. My next job is to remove it - The indent strategy provided to the editor is now dependent on the partition type the user is in. CFScript blocks gets the CFScript strategy, for all else the TagBased strategy"
Refactoring Menu ToolBar adding
refactor the validation for  source register types
Refactor tests a bit.
Finished refactoring annotation stuff
refactor model
"Refactor message bus facitlity to avoid confusing with event bus for external notification, planning to use it in VMSync"
"Updated FilterCommand with IntBitSet implementations. Added an additional worst case test for Filtering, which currently fails. Refactored a few things."
#NAME?
refactor pixel extraction ui.      Add pattern sub dialog after directory selection refactor PixExOp
refactor code about endDocument to reuse this logic.
#NAME?
"#277 Refactoring, updated integration test"
ENH: Service layer name convention and refactoring
refactoring unreadable codes
refactored MembershipListenerTest
[WAGON-109] Refactor Wagon HTTP and Wagon WebDav Merged from: WAGON-109 branch r657713:658098
More refactoring of CT utilities
#NAME?
Refactored CommonExceptionProcessor and added a couple tests.
Refactored package structure into one package for each layer.
Refactored: renamed classes
refactor usage of dendrogram data
RF-12900: refactored utils related to Select components to org.richfaces.ui.select
OOZIE-1311 Refactor action Main classes into sharelibs (rkanter)
JERSEY-1957: refactor: move Spring integration initialization code to SpringComponentProvider
[PLAT-3806] Refactor: separate function to add curve and surface functions
#NAME?
Minor refactorings in core
"BUGFIX/REFACTOR: moved XML transform methods from UIQueryResults to UIResults base class, XML ErrorResults.jsp now uses base class only."
small refactorings
Implemented @AlsoLoad. Implemented @LoadOnly. Deprecated @OldName (but still works). Significant refactoring of setter generation process.
uaaUrl added to Cloud object & refactoring
oauth2 refactorings and oauth2 test
TIKA-811: Upgrade metadatExtractor version for OpenJDK 7 support    - Upgraded metadata-extractor to 2.6.2    - Refactored calls to metadata-extractor library methods and tags for new API    - Simplified use of JpegMetadataReader to use readMetadata method    - Updated TIFF parsing to utilize a temp File since metadata-extractor method accepting InputStream is now deprecated TIKA-915: Image geodata being rounded to integers    - Refactored GeotagHandler to use metadata-extractor's GeoLocation object    - Updated JpegParserTest for the better precision now available from metadata-extractor library    - Enabled testJPEGGeo2 test
"This is a fully refactoring of Aspirin without changing the API. In the list below we list the changes and the causes too. We would like to use Aspirin to send emails and newsletters. We found some small problems with the sending, these was fixed in the previous change rounds."
#NAME?
fixed: pdf-view.xml suffered under refactoring
refactoring / maintenance
Bug 408966: [1.8][inline] Invalid inline constant and inline temp refactorings using lambda expressions
refactoring
Refactorings to match Sonatypes repo convention
Refactoring JobApplicationFilters package
Package refactoring
Refactored SimpleHttpServer
"refactored dispatch, staticreply and other stuff"
"Refactoring of DatePatternToRegexUtil and SequenceToRegex4SDF, editing in layouts.html"
Refactor the display of the images
refactor ConfigFilter
refactor automatic thumnail generator logic
major refactor of the operations
o refactoring the way plugin prefix metadata is found. the lifecycle executor is not the right place for this and the plugin manager is now strictly for already fully configured executions. so it belongs somewhere specific to augmenting the base set of information in order to make it complete but this first pass will do here. i just want to check it in as well because i'm traveling.
refactored bean class references content contribution to the ProjectExplorer; added new filters to the ProjectExplorer (filtering for bean class references and BeansConfigSet)
Feature #8568: - making some little adjustments - refactoring a little the user authentication listener mechanism
Refactoring
 NMS-8041: Refactor Enhanced Linkd Topology
o refactoring test modules
"- SelectionSpecifique.java : correction coquille from/into - correction erreur renommage du conNectionLinkComparator - correction prise en compte timeout ActionLock - correction configuration struts : retrait du controlleur struts principal rajouté lors du refactoring (web.xml), rétablissement configuration spring dans le struts properties et désactivation de l'autowire"
TEIIDDES-1622: Refactor the delete action
Refactored classes into new url and view packages to handle URL sharing and view sharing.
"clean up / refactor JSP rendering code (interim checkin - not thoroughly tested)   make UIResults, BubbleCalendarData, Partition and UrlSearchResults more JSP-friendly.   new TextReplayRenderer.buildInsertText() method for common JSP insertion task   move StringFormatter to UIResults   use CharSequence to save unnecessary String copy.   add JSP insert test."
Refactor GeneratedFileManager and implement reconcile time type generation
[BACKLOG-1498] Refactor Model Annotation Models
Refactor messages (#464).
Fixed slow Malloc reallocation. JavaInternals refactoring.
SCRUM-517: refactored code to extract common logic in base class protected methods
refactor heartbeat module
refactoring in session handling
"- refactored candidacy interfaces and actions - remove restriction: student can enrol in 2º Cycle even if 1º Cycle is not finished - created confirm page when sending information to jury, to coordinator and to scientific council - bug fix: when cancel candidcy cancel debt"
update platform configurator refactoring
Refactoring addon-json
refactoring package capm -> portfolio
refactor command handler and add more jdbc test
removed odocument tostring thread local and refactored field _size name
Refactored sopremo; enhanced simple jaql parser
Refactor pool updates
Issue 550: Refactored the ISO 3166 filtering methods for Providers API.
SONAR-6736 refactor step names and descriptions
created javamail module and begin refactoring javamailer class
Refactor Service/Server models to reflect etter their scope.
LaunchBar - junits - more tweaks and refactoring
"Atlas-external 2/2: Moving model components into new model, and moving new DAO elements to atlas-dao from within the indexbuilder. Refactoring where necessary to use new package names.  General code cleanup."
"Refactor NodeContainer methods to getChild, addChild, etc."
Removed MetaData class. Lots of refactoring.
Refactored: extract InMemoryDatabaseManager from InMemoryDatabase
refactoring the storage
bobo-contrib:  minor refactoring
More refactoring to cleanup the Worker base class
A little bit of refactoring
refactoring changes
MNGECLIPSE-810: refactor JDT support out of m2e core plugin
Refactor the type definition and its validation to api-impl module
Refactor UITableViewCell to allow changes of the background gradient color
big refactoring part two:
Minor: refactoring
Refactored Gauss2 -> Gauss in imglib2 as it is finished now
Refactoring changes. - Member variables private and final where possible. - Remove some unused code - Simplified validation and fixup of parameters using new `Values` class - Rename Logger.Debug to Logger.debug - Rename timezone variables in DateUtils - Make escapeXML method use more conventional character iteration - Simplified the file scanners - Made reading of entire file content more robust
Added ASTNode; added concept of parents for refactoring.
Refactoring the tests
refactoring
"#JC-299 Refactor ImagePreprocessor, ImageUtils"
Refactored the model package to allow easier separation of security objects
HIVE-102. Refactor DDLTask. (Johan Oskarsson through zshao)
Refactoring internals  of the ResultIterator class.
session refactoring
Added a working camel-jpa test case. Added an ExecutionService property to the Endpoint which defaults to the Component. Refactored the DefaultEndpoint constructor to take a Component parameter.
Refactoring chapter 9 samples
refactored the forge REST API so that it always uses the namespace/projectName REST UI for working with git repos
"Refactored annotationList. Still needs some work, but most tests OK"
refactory recordings ui. works differently on tablets in landscape postion.
- Fix #32 - Refactor compilers to better share code between instances - Rename template tests to templates subpackage to avoid clashing with unit tests in parent directory - Fix #33 - Substitution variables not passed to default teaservlet.xml files in META-INF/ - Add test cases for BeanPropertyAccessor
Refactor GJ named classes to less specific Basic named classes
Minor refactoring: implemented abstract binary expression class
refactored out the iteration of common root directories into AbstractPathMatchingBeansConfigLocator and introduced java project specific implementations.
Refactoring.
Refactored meteor grammer; now without backtracking
Refactored EmbargoType to Embargo.
refactored TKey into eu.europeana.uim.common package
Refactor: Rename for clarity
fixes and refactoring.
Refactor to allow non local file system based volumes
add a new stat + refactoring
refactor(ProcessInstanceAssert): move code for has(Not)Passed assertions to shared private method
refactor a bit
"Refactored Building, Room and RoomOccupation into space subdomain package."
#52 Refactor Sensors to read settings at module level + cleanup
"Further refactored, compiles and cleaned up."
Refactoring more world related code.
Refactored repository to accommodate Maven directory structure.
Refactoring templates structure.
SVNErrorCode and SVNErrorMessage introduced. DAV engine refactored to support new error mechanics.
refactored the UDP transport to push most of the code and logic back into the transport layer itself.
224958: [api] make CompilationUnitChange API (moved from org.eclipse.jdt.ui's org.eclipse.jdt.internal.corext.refactoring.changes to  org.eclipse.jdt.core.manipulation's org.eclipse.jdt.core.refactoring)
Refactored subscribe(...) in BasicSubject. Added private onSubscription event in BehaviorSubject.
Some refactorings
Minor refactoring to use try-with-resources and better map-building
Refactoring to model package
Refactoring: rename class Errors to Problems in configuration. Preparing to add warnings to this concept.
"JBRULES-1520 RightTuple merge for asynchronous Rete propagations -mid refactor, bit of a mess, but wan't to be prepared in case eclipse refactoring screws up."
Finished refactoring into Movables (not Recyclables). AI commented out (for now).
docu and refactoring
#NAME?
Refactor the new builder policy to use the old packager if the new way is not supported.
refactored packages structure.
"Refactored and improved support for ignoredValues, added basic abstractProcessors for better extensions"
Refactoring: introduce a package hierarchy (based on application names) in order to scale
Refactor and remove duplicate code between Movies and Episodes
MAHOUT-846: Refactored pdf() to sum the exponents and perform the exponentiation only once. All tests run
refactor
refactored packages to avoid cyclic package dependencies
refactor double Acceptor.calculateAcceptChance() to boolean Acceptor.isAccepted()
<No story> Refactored MongoDBServer by creating an interface to use the same object for controlled vocabularies
refactor redisHandler renamed to MatchingDBHandler
Full refactor to modularized builds.
Minor refactoring of CoverageStatistics to allow simultaneous output of per-sample and per-read group statistics.
Contexts refactoring
"fixed how we handle looting, lots of refactoring"
Refactoring
Refactoring.
Add documentation and refactor API.
TAJO-102: Add AlgebraVisitor and Refactor LogicalPlanner to use the visitor. (hyunsik)
"Refactoring into a state machine SPARQLEndpoint interface Hash calculation for ResultSet DataManager optimizations (closing query executions) QueryBuilder implements Query, new SelectBuilder implements Select"
"Fixed reordering of streams, and took the opportunity to refactor away the cache and database components from each other."
Mass changes to separate GUI components from the model to some extent. Will support programmatic creation of ISA-tab files for the 1.7 release of the tool. This also required some refactoring. Tested major functions and all appears to work well.
Refactor report domain and some bug fixes.
"Initial refactoring (totally broken, I know)"
"Revert ""MIFOS-4385: refactoring of PersonAction"""
Initial refactoring of exception classes
"Issue 695: Refactored domain package: created packages: virtualmachine,hardware,software,network"
JBRULES-1271 refactoring
CheckIN:Refactor data engine code
"CDIFindObserverForEventTest + CDIFacetTest + huge refactoring + resources, needed for tests, added"
A little refactoring of the API
Refactoring.
[refactoring] macro-wikibridge is not really a macro
SOC-852 | Pluggable share action: refactory and change artifact dependency
refactoring da GlobalData.java a Acqua.java
get the tests refactored and passing after the submodule reorg
Refactoring Clock Widget
Refactor to forge-scaffold-faces
api_refactor: refactor volume apis
"Refactored code base to use libtv to perform the filename matching. Moved to Maven build environment. Using libtv, multi-episodes can now be matched and replaced. Replacements now take multi-episodes into consideration and only allow full episode replacements (e.g. replacing s02e01e02 with s01e01 should not be allowed). Directories are now accepted as an input file. The contents will be scanned for video files to move/copy The -s, --skip-not-matched flag has been added to allow unmatched input files to be skipped instead of exiting early. Removed some classes to reuse code from libtv"
JUnit launcher and related refactoring
Fix the bug 182938: Refactor OLAP engine implementation in data engine.
Refactor functional/server/SSL tests to JUnit 4
[OPENENGSB-3018] refactored ManipulationUtils
minor test refactoring
Fiji Build: refactor the newer-than-Fake check
metamer: MenuDelayTester refactoring (RFPL-4115)
"refactoring: sequence diff generator supports ""context"" now. not yet tested,just initial version."
unit test refactoring
"[TEST] Uncomment junit tests, add test and small refactoring in pentaho-platform-core"
Refactored the gateway infrastructure to use the sensei plugin framework
Refactoring to prep for the fact that I'm going to need to modify the DatumReader/DatumWriter to support Scala collection types
Refactored: use RevisionCounter in InMemoryDatabase
"Package refactor, generic to ensure backwards compat"
Refactored
Refactor: renamed some classes and method.
more refactoring
ISIS-214: final major bit of the Oid refactoring
"fix(engine): refactor FoxJobRetryCmd to be more ""silent"" and failsafe"
"engine,restapi,webadmin: refactor VmNetworkInterface.active to plugged"
"In preparation for refactoring retrieveResponse(), I realized that it was being used to test what is now the functionality inside rectifyURI(). Making that more visible and changing the tests to exercise it directly simplify things, including letting me delete the spy I created. All still green."
- refactoring - search for VAR(INDEX) also - just in case
First round of refactoring of Neo4jTemplate.
Refactor: Improve differentiation between elements in timetable.
Fixed - 302837: [Combo/CCombo] Refactor ComboThemeAdapter https://bugs.eclipse.org/bugs/show_bug.cgi?id=302837
Added unit tests for the TermHandler class and created SudoKey events and refactored some of the code to appear and function cleaner
refactoring: all property classes moved to org.structr.core.property package
ISessionDelta refactoring
Include Rentals EOModel in eogen configuration. Refactor EOs from the Rentals model to use superclass methods where possible. Add ERCoreUserInterface implementation to User entity and use this instead of the newly added AppUser entity. Remove AppUser entity from the Movies model and delete the related migration.
refactoring libraycontroller to support video
minor refactor for filters
Refactored out JCommander initialization so it can be extended in subclasses.
refactoring base URL handling.
"SONARPLUGINS-75: New metric plugin: number of API breaks * Refactored, cleaned code, fixed violations * Added unit tests for most important stuff * Repackaged to be conform to the other plugins + Added support for exclusions (class filter)"
SONAR-4694 Refactor GlobalPermission definitions by replacing object by string and add ComponentPermissions containing component permissions
Minor name refactoring
Some Refactoring for better CatalogSpatialComponents Encapsulation TODO : Add Logic to manage binding with AreaInfo Bean
refactoring PEP impls to support FESL PEP
"Refactor boolean cast code, add tests (#3016)"
Activiti Cycle: documented RepositoryConnectorConfiguration-manipulation methods & made some minor refactorings
rename refactoring
Private: Refactored names of classes.
Refactored
minor refactor
Tests refactored and added feature to confirm without order item id
Refactoring: Moved encoding conversion into Service and added Testcases
Refactored serialization process
totally refactor everything
[MARKET-227] - Corrected BaPluginServiceTests to work with new maven structure. - Minor refactoring.
https://jira.jboss.org/browse/JBIDE-7258 : DnD in VPE does not work with rich:calendar - problem fixing - code refactoring
"refactor (2.1) cleanup code, removed excessive debugging code, reduced number of methods"
Minor refactoring to clean up test code.
unit test refactoring
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
ModelResponse refactoring DataManager refactoring
Refactor: Renaming to verify response
Added background sync thread for BerkeleyDB and Lucene datastores. Plus other major refactoring and enhancements.
"[ENG-193, ENG-194, ENG-195, ENG-196, ENG-197] Bringing Excel into line with the new View changes, REST changes and other refactoring. Quite a few improvements."
147516: [refactoring] warn when refactoring derived files 157466: [quick fix] 'Rename in File' in does not perform the required checks
"Quick commit in advance of Aaron's. Just a bunch of refactoring (private classes separated out, put in proper package). Also support added for coverage by read group rather than sample."
RF-12900: refactored org.richfaces.ui.util.CoreRendererUtils to org.richfaces.context.ContextUtils
Refactoring solr configuration approach. Streamlining.
Refactored tests to improve code reuse.
Refactoring
Bunch of refactoring now to handle floating point number right.  Better.
Bug 209568 [eventadmin] refactor to have internal in namespace
More refactoring and a bunch of fixes. TestLongPdbVsMmCif works now
More notification work and some refactoring of names
companion to r11704. Refactor RegisterAction to use ambra base services
test refactoring
Closes GH-0542 Refactor CoordSuspendXCommand & CoordResumeXCommand to TransitionXCommand based
Refactored input and output gates to support plugins
Refactored ADT-specific code behind adaptor.
Changes to indexing: Refactored analyzers into analyzer package. Stemming is now enabled Strong's numbers now index H19a and the like Made analyzers and filters take a book argument and not a language. Optimized filters to reuse tokens.
[84533] Refactoring does not do anything...
[MCOBERTURA-46] Upgrading plugin to use cobertura-1.8 * Refactored tests to allow easier version upgrade in future. * Added cobertura:dump-datafile mojo to aid in testing. * Future-proofed datafile parameter.
"some refactorings to simplify things, e.g. added implicit same-package and top level package import extends and implements are now (qualified)ides rather than types handle imported ide declarations in PackageDeclaration handle usage marker call in TopLevelIdeExpr plus Extends+Implements"
333679 Refactored jetty-jmx. Moved mbeans to modules.
(2) DefaultAsyncJobExecutor refactoring WIP.
Refactoring of topics so that class can also deal with commands and globals.
- request #339 Convert URIs to labels - reimplement - refactor action implemented
"refactored, cleaned code, fixed bug which gave exception if you logged in as user who wasn't in DB already"
"Refactoring of data provided to AbstractArchivingTest's test methods. Also add more test cases, especially for directory/file filters."
REFACTOR: changing names of RequestParser subclasses
refactor feature sets
Refactor of modifier accessors
refactor TypeFactory to handle only fresh variables bindings
#POULPE-296 Authorization. Check whether user has enough permissions to log in * Added JavaDocs * Refactored AclAwareDecisionVoter to be more readable
"Adaptations to accomodate Tribble API changes, comprising mostly of the following. * Refactoring implementations of readHeader(LineReader) -> readActualHeader(LineIterator), including nullary implementations where applicable. * Galvanizing fo generic types. * Test fixups, mostly to pass around LineIterators instead of LineReaders. * New rev of tribble, which incorporates a fix that addresses a problem with TribbleIndexedFeatureReader reading a header twice in some instances. * New rev of sam, to make AbstractIterator visible (was moved from picard -> sam in Tribble API refactor)."
Refactor improve quantities by default in resource allocation window
SCRUM-877 - page editor: refactor of code - move Widgets into widget package - remove Widget from classnames - rename EditBar to ComponentBar
Refactor the name of both the directories and the artifact ids of the DataWarning project and of its subprojects
Refactor Requst/Reponce Utils
Bug Fix: Refactoring remote classes
major refactoring
Complete refactor of webapp using yeoman
[refactoring] Split target platform configuration and computation
instruction stack refactoring
"MAGNOLIA-3620:  - refactoring -- renamed DetailView as SidebarView (ok, I have little imagination for names)  -- extracted ActionLIstView and DetailView (or preview, that thing under the action list) as interfaces and implemented them -- moved workbench actions to the right package"
"Refactored ""Cov-Capture"" command to its own class from CoverityToolHandler"
Refactor Cholesky implementation to impl namespace
Refactors and adds new OOPath tests (#1130)
Refactor + Split between bad and good samples
MASSIVE refactor
refactored that request execution support
"Anvils Added, Hoppers refactored."
testgen: refactored a util class to be non-static
Refactored to use abstract image support and rename MachineImagefilterOptions
C# Plugins - Refactoring to better package names and API exposure / POMs improvements
Refactor preview ui model and rationalize the way how components communicate with it
SONAR-3911 refactor the plugins cobertura and jacoco
Refactored the JmxExtension to enable adding an MBean with HA info.
Big ol' material refactor Added render package
Refactor the dependency loading
Refactored and added support for req_feat
Continued Validation refactoring with expressions
WELD-1503 Refactor metadata structures supporting bean interception - Part 1 InterceptorMetadata
refactoring package structures
CXF-3972: refactor wsdl2java mojo to make room for js.
Added intent-filter related annotations Refactored Mergeable interface into abstract class
Introduced UI participant for refactoring wizards
Refactored out model. Added some jsf stuff. Now shows list of matches.
Small refactoring
solving refactoring problems
"further refactoring, fitted everything to new persistence lookup strategy"
JBRULES-1598 Efficient WorkingMemory serialization with binary protocol -Some refactoring tidyups on various class names
Refactor type integrity test to use new structure.
Issue 316: refactored ssh to use Payload object; deprecated non-payload methods
Big refactoring of the Cachesystem (merged class and DB) + imporved cache admin activity
Big refactor in jsquery so as classes namespaces match gwtquery core and plugins packages
Refactor unit test that were not executed
Refactoring FFProbeWrapper stuff
"MODE-1859 - Fixed the removal of ModeShape services when a repository is removed. Refactored the general remove & recover operations, as they are very similar."
"[SUREFIRE] fixed pending issues, refactoring"
Refactored wordifiers to store their locale
in process of refactoring how generated names work - should mostly be handled in one place by cooperation bewteen IRIManager and (DB)Connection
JBIDE-13938 Refactored pkg org.jboss.ide.eclipse.as.reddeer.server.wizard.page
Refactor Board to Position
Refactored packages to make them entity-centric to assist navigation Introduced fluent interface to ItemBuilder
"refactor AsyncHttpClient connection to support the two variants of constructor, LoginCommand or apiKey"
Rename current service artifact to bundle in order to refactor the bundle instructions to not embed jetty. A new (uber bundle) will be created that will include this and jetty.
BeansXMLValidationTest + OpenOn test on assignable beans + huge refactoring of all tests
refactoring and unused API removal
refactored Environment (directory structure in ~/.jabox/)
minor refactoring
[misc] Finishing OfficeImporter refactoring.
SugarCRM pre-release refactoring
Refactor TmfRequest
minor refactoring
refactored PomConfigHelper to be a generic tools and cleaned up usage in classpatmodifier
refactor java backend to use more dependency injection
userportal: refactor in UserPortalListModel & BootSequenceModel
bug fix and refactoring
[TACHYON-1199] Refactor code about newTestConf
Refactoring tracing facility.
refactor SurveillanceDashlet to have a Loader/Viewer add a Loader/Viewer to AlarmDashlet
Refactor
REFACTORING!!! xpath ftw!
some refactoring
refactor the model event info code
DDF-111: Refactor dynamic schema resolver constructor
refactoring param 
Refactored the listener to a top-level abstraction
ARQ-1893 Refactor undeploy to check for application state instead of waiting for 3000ms
Minor refactoring for cross-drive scoring.
Undo implementation if Refactoring fails with exception [db]
xforms module: refactoring and solving a crush when downloading patient sets
implemented operation package and refactored some code
RF-12900: refactored input components to subpackages under ui.input
first cut of lightweight rename refactoring
refactor
refactoring - introducing JAXRPC POJO integration processor
Refactored Injectors to use cached reflection if target class cannot be found
Several refactorings on dml-maven-plugin and DmlCompiler
Refactoring
Added the --api option and completers for that option. Refactored the service factories to have better support for apis. Fixed some minor bugs.
Refactoring
Refactoring Packet4{Server => World}Update
[cleanup] Refactored tests
* ti & mxins refactorings
refactoring
DROOLS-132 Refactor Fluent interfaces for general use
Refactor: clean up executeDoCommand
"Annotation override + additional features tests. Added hash + equals to DemandMD, DependMD, SupplyMD. Refactored equal compare on CallbackAnnotationPlugin."
"A bit of refactoring, added a first Health implementation with a basic test"
core: Refactor qcow compat update.
https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring in progress.
Refactoring. Package location changes. Error handling and validation.
A little refactoring
Upgraded to Spring 4.0.6 and refactored Mule module because that doesn't work with Spring 4.x
Refactoring of BQSRv2 to use longs (and standard bit fiddling techniques) instead of Java BitSets for performance improvements.
Refactoring to tidy up resolving and combine object factory and manager - V
Refactored models for tests. All unit tests passing now.
Refactored password reset functionality to avoid using HTTP session for token storage. Token is stored directly as a property on the corresponding user node. Also introduced token expiration (by default it is equal to the session expiration time) ( BACKLOG-6259 )
"iprovements to send qrcode, refactor of AbstractTradePanel, ReceiveBitcoinPanel, SendBitcoinPanel"
- Summary: Refactoring data service logic of chart report item.(#21743)
Simpler Java tests without refactoring to remove duplication.
refactoring package names
Big refactoring to separate out Populator from Translator
"Second pass at refactoring GAVs, packages etc"
code refactoring
simple refactor
Refactoring for clarity and generality
core: backup awareness refactoring
big package refactor and reverse ajax is now working in iframe more
Bug 216308 [api tooling] API tooling set up should present as refactoring
Package refactoring
AtlasProperties refactoring stage 1:  - get rid of static methods calling and convert class into proper Spring bean - replace all calls getXXProperty(name) with specific getSomeNamePropertyValue() methods with correct return type - introduce update notification API for those beans who cache property values somehow in internal structures
code refactoring
Refactored the JmxExtension to enable adding an MBean with HA info.
Continue addressing #182 by refactoring airline web application project to not expose Responses outside of the REST client.
"refactored due to changes in RinECJ, created HeuristicTruck for gendreau"
Refactored
"[PLAT-1296] Refactor time-series master; New database, stage 3"
"REFACTOR: removed buggy local-cache, added less buggy cache which relies on varnish/squid to do RAM/Filesystem caching, new implementation uses Heritrix HTTP Recorder code to write raw bytes from the web into ARCs, rather than whatever the apache HTTP client returned."
Refactored CheckboxListFactory to use DefaultCheckBoxOperator
refactor package
Light refactor of IntIterableSet
"HSEARCH-969 Moving FieldConstraintFilter into orm module, because it is only used in a test in there. Must be a left over from the module refactoring"
DDF-1319: Refactored DDF resources to make use of the SecureCxfClientFactory.
small refactorings
Refactor Injection
WL-2466 Refactor content_sync so that it has a better ueue and doesn't block requests.
gui.controls.list refactored
"- refactored the reference manager for being usable by path relationships - remove @Hierarchic annotation in order to have instead @OneToMany being sufficient - added RelationshipType with HIERARCHIC, REFERENCE, PATH"
small refactor in DAO
refactored MongoOperations to use UpdateDefinition/QueryDefinition throughout; added skip/limit/sort to CursorPreparer for queries; cleanup; refactored Query
Feature #4150 : user connection attempts before blocking user account - using new containers created by Miguel - renaming some methods - refactoring some code
CAY-948 Implement flattened attributes in Cayenne (preliminary refactoring of EJBQL translator)
refactored and fixed Principal/Person/User inheritance fixed CRUD UI made auto-creation of users after authentication optional and configurable
"Thanks to Platform Computing tech support, found the magical environment variable BSUB_QUIET. Minor refactoring to add more of the CLibrary including setenv()."
"SOC-408 Refactor code in profile, remove some unuse code"
o Refactored code
refactoring packing names
Refactor: Phd Emails split between PhdProcesses and PhdPrograms and no longer associated with Messages
Small refactorings.
Balanced Random Forest: refactored GiniFunction in order to increase the spped. The inner class AttributeClassPair is now extern and the comparator is static.
Various refactoring for easier testing and better encapsulation
[MOD] Serializer: minor refactoring
JUnit integration refactored.
refactor api and service
refactoring to better organize source
Updated to compile with build 83. Refactored the package structure.
test refactoring
converting the main detection logics. major refactoring to the learning part in order to force using of normalizer.
Email refactored to use JavaMail API over Spring Integration. Sending reimplmented. Integration tests added
ls-projects: Refactor --tree support to shorten code
TFJ-231 refactoring
"ISPN-2552 Support concurrent updates for non-transactional caches - refactored the distribution interceptor into NonTxDistributionInterceptor, L1NonTxInterceptor, TxDistributionInterceptor, L1NonTxInterceptor and BaseDistributionInterceptor - added support for concurrent writes for non-transactional distributed caches: NonTxConcurrentDistributionInterceptor - updated the xml parser in order to support concurrent writes for distributed caches configuration"
added domain extraction and some minor refactoring
"Refactor- NodeManager is now managing all operators in a given node, as well as the initialization and instantiation of these."
Refactor semgentation
Refactorings to resolve bug #342677 (Done a first approach to remove resources on application context deactivation)
HSEARCH-1260 Refactor existing MassIndexer components
Refactor: Fixed externalId.equals
POULPE-469 Testcoverage and refactoring for Database backup functionality - Making Sonar happy
[NGRINDER-689] Refactor home content logic.
"page-fragments + metamer: autocomplete setting value with scrolling type moved to advanced, metamer test refactored"
[OPENENGSB-937] some code refactoring
refactoring services
"minor refactoring, javadoc"
"Refactor, code cleaning"
Refactor: Extract interface from HSuperColumn and move it to the api package
#NAME?
[PLAT-1296] Refactor time-series master; Refactor history request
refactored CRestProperty to CRestConfig
Did some refactoring to clean up the code a bit.
[FIN-111] Refactor SecurityMaster
Added IAdaptable as super interface for IIDStore.  Also refactored impl classes into API
#POULPE-312 Refactoring in ForumStructureVM.
"Initial cut at dynamically creating/updating LookUpValueEntity and  LookUpValueLocaleEntity objects.  Refactored, renamed and removed some classes related to lookup values.  Added comments to try capture some understanding gained in the process.  This is still a work in progress and there remains a lot to do."
refactor the work of Cecile in order to keep the ImportReportManager thread-safe
small refactoring
[refactor]rename
activejdbc-282 #282 Refactoring with appendSelect()
Completed pom refactoring making sure the test cases can run. Refactored Backend.java to pull storage manager definitions from titan.properties
"big refactoring. Added ""Test Connection"" button to global config."
Refactor instantiation of implicit constructors ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=73941761
"Refactor - moved packages algorithm, expression under definition package."
CAY-943 Support multiple cayenne.xml files in the project (preliminary refactoring)
refactor package
TURMERIC-1601: Test code refactor and cleanup.
JBRULES-571 Export-Import from XML drools-repository backend refactory to handle with compressed repository export
"Refactored plugins, some tests had the wrong package."
"Adding the nested and ""messy"" configurations and tests for them. A couple of refactorings to enable more code reuse."
Refactor service classes into new artifacts.
More refactoring to accomodate oldname methods.
[FABRICPRV-79] Refactored the api to use the container instead of agent.
[task #8] Refactor: modified project configurer to be more object-orientated.
Refactor and fix probing API
Refactoring update/delete lbs and better error messages
"refactoring, renaming"
"refactor IP address handling * use InetAddress internaly, instead of String * fix camel casing (localIP -> localIp) * fix some comments * fix some doc comments"
Refactoring to better test CF Run Target creation via junits.
refactor out logic into checkout class
refactored codes to create a new element int the ElementExporter.
small refactorings
refactoring monitored service and managament service
Refactored
"Minor refactoring, rulesets are now filtered to remove dysfunctional rules before execution.  These are recorded in the report. (Need to adapt the various reports to show them)"
testSaveTimeWhenTransactionWithdraw and Deposit refactor
major code refactor
ACT-60 pvm refactoring of atomic operations for scopes and events
Package refactoring
#JC-1187 refactored tests with pagination in TopicHibernateDaoTest.java
"Removed SimpleRootedTreeGraph, changed RootedTreeGraph to a bidirected graph. Added some Javadocs. Fixed some errors caused by refactoring in the examples project."
ParameterExpressionParser refactored
[ADD] EXPath Geo Module: refactoring/finalization of Masoumeh's code       See @BaseXdb/basex#330
"[#1672] Refactored Address requests to separate out credit card from transaction, so we can add options to CreditCardAddressRequest.  Renamed OptionsRequest to CreditCardOptionsRequest to match naming convention."
"Minor refactoring of Subscriptiondata Major test cleanup and integration to run using profile ""localtest"" => Use standlaone mysql instance (and reduces build time from 15 minutes -> 5 minutes)"
"cloudmanager cleaned, refactored"
refactor done
support rename refactoring from wod or html
refactor(rest-test): restructure tests to be extensible
* renamed beanClass parameter and variable names to type * refactored test
"https://issues.apache.org/jira/browse/AMQ-3646 - Allow KahaDB to run without disk syncs, higher through put without the jms persistence guarantee. Allow 0 peroid to disable checkpoint/cleanup. Allow jmx gc operation to invoke cleanup so that store gc can be initiated via jms to ensure disk is reclaimed. Ensure periodic checkpoint does not sync when enableJournalDiskSyncs=false, it waits for completion but does not force to disk. fix cached buffer allocation and refactor to reuse more code in CallerBufferingDataFileAppender"
"refactorings, code optimizations, tests"
"SaveEncounterORU_R01ValidatorAndEnricher: refactoring, added new tests, improved existing tests"
Refactoring
Refactoring of GraphDatabaseConfiguration. Added more configuration for blueprints tests.
"refactor message loading to be less generic, but fit better in Gringotts architecture"
Refactor PageInitializer in PageInjector.
Refactoring using more meaningful names for properties interface and getter
refactored microchip potentiometer impl into components
Refactor tests. Extract common assertions to separate method.
Refactoring of Attribs to deal with HRecord values
minor test refactoring
refactor exceptions into their own package
test refactoring
Refactored the abstract shader implementation and got a semi-working implementation of the stroked line shader.
refactored search param builders
Changelog: - added a parameter in the configuration file to chose the dynamic/fixed upper bound threshold - refactoring of UtilizationUpperBoundComputation in UtilizationUpperBoundDynamic 
#283 refactoring ut for builtin methods to detect faulty imports
Refactored CapsdIntegrationTest to use annotation-based Spring test framework instead of inheriting from OpenNMSIntegrationTestCase.
SubjectRewriteFilter HypermediaFilter refactoring XSLT refactoring based on gc:layoutOf/gc:uri/gp:pageOf hypermedia Conneg fix
ISIS-109: more refactoring domain object/service rep builders; adding in cache control headers throughout and last-modified header
engine: refactor UpdateVdsCommandTest
"Refactored discovery and distribution interfaces/classes, and changed warning settings"
Refactorings for 5.0.0
Refactored use of properties files in CommandLineXmlProcessor so that defaults can be retrieved from a file within the jar and optionally overridden by the user via a file in the same directory as the jar.
Refactoring IDM classes to a better name
refactors the _saveAsInvoice and _saveAsOrder classification mixins for IncomingInvoiceViewModel so that they inherit from DomainObject_triggerAbstract.
big refactoring to accommodate the swagger way of doing things. partial implementation of swagger 2.0
MONDRIAN: refactors OrderSet() using chained comparator; improves performance of BreakArrayComparator by pre-computing member value
BridJ:  - added THROW_EXCEPTION macro with printf varargs - renamed MethodCallInfo.index to virtualIndex (need to recompile native libs) - fixed CPPTest and JAWTTest - refactored Pointer class to centralize subclassing in newPointer method
Refactord. Cluster CRUD pages added. 
"* moved retrieving of ConfigurationAdmin to where it is actually used by using the bundle context * stopped creating a temporary thread in AlgorithmAction to put the algorithm directly into the scheduler. This used to be necessary when we did some data conversion before going to the scheduler * combined micah's putting stuff into functions and adding userprefs with the other bug fixes/""refactors"" I had simultaneously applied"
Refactoring + documentation + bugs resolution
chore(engine): refactor PVM for BPMN execution
The JBoss server home directory is now correctly retrieved from the parent resource component. Included some other minor code tweaks and refactorings.
Refactored Packages / Added Feed
"after a massive refactorying to use gwt 2.2, things are beginning to work again"
#644 Workaround for problems with the Eclipse implementation of asMemberOf. Refactored SpecificCompilerWorkarounds to be primarily used through a decorated variant of Types that is now used throughout MapStruct.
"Refactor XaLogicalLog to do read, apply and write entry in separate code sections."
Refactoring smile fitting code so that it can be used more easily to produce surfaces. Haven't removed the old classes yet.
drunkardmob refactoring
package refactor
refactor modules
Refactoring of CSS part of GQuery. Add implementation of many css properties
Refactor
KARAF-2762 Refactored CommandExporter and implemented removal on stop
refactoring en cours des actions
refactor jca assets in preparation for xa datasource operations
[MNG-5681] Properties on command line with leading or trailing quotes are stripped Refactored out cleanArgs method from CLIManager into separate class and added appropriate tests which proves the solution of the issue.
"renamed ""database"" to ""databaseLock"" and refactored a method"
OPENNLP-239: refactored the classes to have single case sensitivity flag.
Refactoring parameters processing in all XSLT depending transmogrifiers.
refactored name class utilities a bit for more code reuse. backward comaptible change.
Small refactoring
NXP-7275: refactor Children cache into a more generic Selection cache mechanism
Refactor duplicate code
minor refactor of packages and naming
Refactored API / Servlet Impl
refactor test
Refactoring
refactoring trafficlight approaching: encapsulate behavioral model in own class in package longModels
"Added uniform metadata handling for atoms/refs/agents/vars/namespaces Note - breaking change for agent/ref when supplying validator - validator must be passed using :validator option Added :validator and :meta options to agent/ref/atom Added alter-meta! and reset-meta! for reference types renamed set-validator to set-validator! Validators now can simply return false, or throw Refactoring, added IMeta, IReference Switched to longs for Ref ids"
some refactoring to clean up KItem
refactored codes.
[task] refactor UpdateUser
Refactor
"Refactor to more-generic ""Identifier"" in lieu of ""NameToken"" and basic support for multiple Activities handling a single Identifier."
refactored
refactored tests
"ARTIF-683 JPA/RDBMS repository, Hibernate Search full-text, refactored/abstracted common repo logic, rearchitected repo unit tests, installation/integration for EAP/Wildfly"
refactorointia
Refactor into proper packages
Refactored MySql MINA driver to use generic decoder. Moved MySql MINA code to org.adbcj.mysql.mina package.
Took field clases out of gene & allele service + refactored code to use the fields from the DTOs
Robustness for GroovyCompilationUnitTests#testGetModuleNode_7(). Test ModuleNodeMapper cache after each test tear down method.Basic refactoring and clean up.
Refactored Properties and Plugin dir location into ForgeEnvironment
Refactor: Teacher credits
Initial refactoring of core package structure to clarify design and reduce design tangles
Refactor alarm loading ability and service launcher
Refactored SQL storage for reconnect
Graphics.task further refactored: DrawingController doesn't create figures now and does'nt do anything actively with DTOs now; that is done by the drawing-specific subclasses. FirgureMap  removed. Graphics test class improved.
"refactored, should cover all position data now"
refactoring so that SymbolTable clients are less aware of the SymbolTable's internal data type.  Now it looks more like a stack
Refactored SFTP transfer to support export
"Standardized code to use the term ""change"" over ""refactor"""
"Different approach for error-prone compiler plugin: refactor plexus-compiler-javac to allow easier extension and classloading, and depend directly on error_prone_core from plexus-compiler-javac-errorprone."
"refactored: - bug fix in sorting (must sort all the list, not only the visible page) - showing student requests when viewing new requests"
Added subscriber methods. Refactoring
"refactored to fix recordings not showing on second access, still needs work"
[Refactor/Feature/Feature] Convert all getName() references to UUID./Start of Custom Event addition./Add TabCompletion of Commands.
fragments: hotKey refactored so that user need to set the hotKey before invocation
refactoring several things
Refactoring
Added colors to relationship strokes. Some refactoring of other view menu code.
"Added logging, some minor refactoring."
Cleanup refactoring.
OR-124: Refactored - more reuse
"search API - added facet parameter parsing, refactoring and more tests in parameters parser"
Refactored install and run scripts
greedy and brute force: general cleanup + walker refactors (unfinished)
core: minor refactoring in pool related commands
doing package refactor
Bael 817 refactor (#2575)
Started refactoring of internal integration tests
SONARJAVA-1489 Refactor xml checks to initialize xpath expressions before scan
Refactor for maven
"Refactoring of Reprica Skills system, to reduce boilerplate code"
Major entity refactor.  
Cumulative patch with refactored Raniz's changes
Refactoring and doc update
"Refactored the Atom Binding layer to be more generic.  Now we have horizontal jax-rs services that handle all of the different artifact types, rather than a duplicate resource per artifact type."
refactoring financial security visitors
refactor meta-propag for proba-alldiff
Fixed a bug in teset and refactored to untilCall
Refactoring: converting nested types 'SourceListDialogField' and 'SourceLookupLabelProvider' of 'SourceLookupBlock' to the top level types. Added 'dispose' method to 'SourceLookupBlock'.
Refactored generalized apartment miner
RichEditor page fragment refactored
Bug 343285 - [region] refactor to equinox package names
refactor packages
massive package refactor
"Small refactoring: Extract part of visitClass into a separate method. It's already almost 180 lines, this brings it down slightly. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=123908625"
Refactored
Some more refactoring and added a first implementation for getCommittedTransaction( txId ).
Refactored transactional observer code for better encapsulation and runtime performance.
package refactoring and consolidation
refactored exception name (typo)
"started refactoring ResourceNameIterator and ResourceStream to make the locale, style etc. available for which the resource was found. Will eventually allow to remove duplicate code e.g. in PackageResource."
TrackMate_: refactor settings object
"Refactoring caching:    - changed CacheContainer into a Map<String, CachedSentence>    - made caching and parsing two separate steps: first lookup in cache then parse and remove deleted rules."
"Did quite a refactoring on the commad handling part. The new callback makes a lot of new features possible, while completely maintaining old functionality."
ISPN-1881 Refactor CommandAwareRpcDispatcher to treat calls to single recipients in a more optimised manner
Refactoring partly done. functionality BROKEN!
"refactor api, based on suggestion from community"
"XWIKI-2924: Create box macro XWIKI-2885: Fix Code Macro bugs (Box, Speed and Formatting) * refactor to extends new box macro * upgrade Pygments dependency to 1.0"
fixing DAOTest and some internal method name refactorings
"refactoring, made decodeTest run again"
"Spring data + jpa entites refactoring and tests.  Refactoring not completeded yet, jpa entities tests incomplete."
"correctly handled inner class names, refactored code from string builder tostring, added methods to handle return types and param classes"
"Wow. I did so much in this commit, I can't list it all. Refactored commands, completely isolate Bukkit, implement interfaces, etc etc etc."
"Fixed bug (via testing) in intersect2DRectangle in which distance space was wrongly compared to x,y space, failing in geo contexts.  Also refactored common leading code calculating bboxSect from both intersection algos."
* Some Refactorings * Added support for set directive
refactor StatusCode
"Move-to-line feature. Application of the patch in bugzilla 118147. Includes refactoring of resume-at-line feature which used ""jump to line"" terminology. While such terminology is aligned with gdb (it invokes the 'jump' command), it is otherwise counter intuitive and collides with the ""move to line"" concept. The interfaces and code are now consistent throughout in its use of ""resume at line"" terminology."
Jmx Config Tool refactoring + moved to features
Refactored.
listcomponentsincontext: Refactor occurence counting code
Refactor alert service (#2937)
"refactored prov-xml, prov-n, and prov-dot with QualifiedName"
NOJIRA: Refactored the name
performance refactoring on WS split
refactor service tests
example reporting for junit tests - fixed a failing test case and refactored some code.
[JBIDE-21457] Refactor deployment mapper so it handles resource notifications in any order
Refactored to more sensible name.
Refactor to make 'VALUE_HINTS' attached to specifc types more flexible
refactor SimulcastController#accept
Refactoring Android Classes
 * Refactorying TpccTransactions  * Adding the possibility to avoid most of the NoSuchElementExceptons
"[PDI-7807] [PDI-7808] Added Sqoop Import and Sqoop Export job entries quick setup UI. Many other changes include: refactored backing model classes, improved testing."
Move GridSampler into common package and refactor to ready it for use with Data Matrix
Refactored ChefRecipe to RunlistElement
more refactoring
"Dds.java, ImageSet.java refactored"
"Refactored API Classes, Added Calls to Schedule Methods"
Refactoring class names
refactor
Refactor tests to interface based subpackages
Refactored
big refactoring of condition stuff
Refactoring.Compact buffer data.
Refactor a little bit
refactor test base
Final stage of Fourier and FFT pricing refactoring - removing the old classes
Refactored tx log error handling and handling of running out of disk errors:
refactor some event creation methods to be less capsd specific  so they can be used in the model-importer
refactor method name
refactored Mains
Refactored integration test classes slightly
Valve test refactoring in order to reuse common parts for global valve vs authenticator tests
Major Refactoring:
refactor Modal dialog add demo for date picker inside a modal dialog (#64)
Back porting to 1.9.x: Refactor FormResource-related code to use the newly-refactored interfaces - TRUNK-3039
test refactor. now it's just a simple test with a data provider
RDF/POST parser refactoring
refactored some Generators
added some early refactorings for CAMEL-97
Refactoring API work & Participant tests
CAY-2008 Connection pool refactoring and validation query support in Cayenne DataSource
refactoring code to update metrics index
Added in framework to allow for ambiguities to be resolved after parse completes by using a heuristic in evalutaing the validity of a binding. Also added in extra IProblem generation in BaseScanner for invalid characters. 2 outstanding broken tests : Andrew is investigating Template failing test. I am investigating the Refactoring broken test.
Some refactoring
Refactored to cover non-default schema support.
method refactorization
Refactor DependencyGraphBuilder (descriptions below).
SONARJAVA-1389 SE: Use persistent collections and refactor visibility of ProgramState internals
add changes for refactor->move action
client proxy refactor
Some refactorings
"Refactor of tests, add problem reader and builder"
"#25 Complete switch to the new group api, refactor NodeState to be optional in groups and to become a default class instead of an interface"
"Add the missing events for the reader, refactor the EasyBatchEngine and put the step processing into methods for easier reference."
cdi-1.1 Refactoring to make full use of cdi.
Fixed the shutdown problem for JavaScript perspectives that I caused in the recent refactoring
test udpate and code cleaning for AuraResourceServlet refactoring @rev goliver@ @bug W-2746656@
#NAME?
Refactor to seperate public and private API
Refactor EntityMetaDataResponse to EntityTypeResponse
Refactor WS about association of Q profiles and projects
Refactor stuff in Glue into Runtime
Permissions refactor.
refactor and simplify move/copy project operations
created reward source factory when reading config misc code clean-up/refactoring
refactoring
refactoring
"Implements more api, and some refactor"
tiny refactoring => ninja-appengine-blog-archetype
Resources + Other needed classes for new CDI test for EL refactoring added
refactoring a bit management of provisioning.properties to be able to use it from standalone too
refactored old code to use new tag controls
Refactoring und neues Beispiel
"https://issues.apache.org/jira/browse/AMQ-4682 - add jmx mbean, manual update, validation and test refactor"
refactor doMethod
Simon manager configuration initial refactoring + other little fixes and adjustments.
"Integrate new SQL changes with Hive storage engine, moving to automatic file detection.  Rename storage engine to storage plugin. Separate storage plugins from format plugins, updating Parquet and JSON to format engines. Refactor distribution logic and enable use within JSON format and all EasyFormatPlugins."
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - created SpringJavaType class with JavaType constants for common Spring types; applied these constants throughout
Refactors RTCP termination strategies.
"RF-10712 Refactoring Listeners classes, methods and Event names according to standard JSF convention. [WAS processUpload vs. processFileUpload - naming conventions] - reviewed by Gleb Galkin"
Refactor ListView to allow to set includeRegex programmatically
"Partial refactor for instrument, still broken"
refactored experiments package
CHANGED: Did some refactoring
"Some refactoring. Deleted old comments, moved files, changed maven back to 1.6 jvm"
"RAVE-303: refactor usage of PageService.addNewDefaultPage for security reasons.  New Behavior - when a new user is registered a default page is no longer created at registration time.  Now, anytime the PageController is hit and the user has zero existing pages, a new default page will be created for the user.  I also moved the service tests into the impl package since they were incorrectly located."
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Add support for test descriptions (so that we're able to extract them later on when we generate syntax reports) * API refactorings
Simplify translation class generation and refactor classes
Refactored DataSnaphshot
XWIKI-8878: Refactor wiki manager to use new LocalizationManager instead of its own customized XWikiMessageTool XWIKI-8879: Refactor application manager to use new LocalizationManager instead of its own customized XWikiMessageTool XWIKI-8880: Refactor workspaces to use new LocalizationManager instead of its own customized XWikiMessageTool
Implementing / Refactoring Events
refactor view out
"* Made file ""View With..."" use the same improved functionality as file ""View"". * Did a little bit of other refactoring. * Reviewed by Russell. * If time ever permits, the rest of this plugin should be refactored."
Refactored Medical -> Doctor Created package com.wordpress.salaboy.events.wiimote
Minor fixes and refactoring
Refactoring just a little the new JdbcSqlQuery API.
Bug 379568: Refactoring of DSF-GDB JUnit tests to use inheritance.
refactoring
Refactor integration tests
"refactor course switch,cancel,sum"
Moved http related classes to citrus-http-module Refactored http server impl
#JC-545 refactoring in UserProfileController.java
refactoring
JBPM-4651 - kie-spring jBPM - refactored and added integration tests
refactoring interfaces and adding comments to them
NXP-3024: adapt publication to new workflow (refactor publishing module structure)
222748: refactor semantic routines to separate package
Major refactoring of transformer instanciation process. XMLReader instances are now retrieved from a pull.
"add random forests, refactor the voting classifier"
refactor of package name.
refactoring.
Refactor Tag Dialog
"Refactor of getArgs, add some convenience methods"
"XWIKI-5842: Add titles and decoration to gadgets in the dashboard macro * Refactored the container macro and added an abstract container to allow building other macros on top of it * Added parameter for the container macro, to set the class attribute for css styling * Added gadget titles from the macro names, and a wrapper created from an extended container to allow styling * Added extra parameter to the dashboard macro to set the class attribute"
Minor improvements to the visualization layer as well as minor refactoring.
refactor into independent methods
"More Spring refactorings: - Efo is not singleton anymore, not it is bean configurable with properties and injected into applicable services - Efo can be loaded from resource (use special ""resource:path/to/resource"" URI) or from any external URL (no need to keep EFO in codebase now, it can be anywhere on the filesystem or network) - Efo doesn't pollute /tmp directory with its indexes anymore, actual path is configured with property (and defined in context.xml, so update your archetype please)  - Index builder doesn't handle index deployment anymore and doesn't manage its own SOLR corecontainer & servers - Index builder components (services) are now beans, with SOLR servers, DAOs and Efo injected with Spring - No more index service registry, services are regsitered in DefaultIndexBuilder with Spring - SolrContainerFactory now handles empty index deployment (hence, template index moved to atlas-index-api module) and deploys actual cores found in template solr.xml"
refactoring
WebApplicationDescriptor refactoring
Refactor: extract buildServerUrl() method.
refactored highlighting code to support tests
#NAME?
"StringBuffer -> StringBuilder switchovers, refactoring"
refactor sort algrithm
"Added a new writeTimeSeries method that takes a time series objectId rather than an externalId bundle, for cases where we know the id of an existing time series that we want to write to. Refactored existing writeTimeSeries method to call this one once objectId is known."
"Refactor table creation, add selection listener helpers to base tab"
Variable referencing refactoring starting.
"Fixed a Windows path issue when uploading files, and other refactorings."
 - some refactoring to make the BusTime situation easier before the api overhaul
[OPENENGSB-3386] refactor TransformationHandling-Cod in InvocationHandlers to be more OOP-like
refactor to make steps available to other backends
Refactored SQL query engine to let to the developer to plug custom operators.
[review][minor][refactor] Class name change LoggingAndRememberingRequestResponder -> LogAndStoreRequestResponder
Refactoring
"Added CharacterDemo, a refactored version of Symbiosis's character control tutorial"
Refactoring and introduce a simple unit-test
[cfid-348] Refactor app sample to use UAA scopes
"Name refactoring, removed unused and empty classes, added 'require' as ruby keyword."
"Bug 428786 - [1.8][compiler] Inference needs to compute the ""ground target type"" when reducing a lambda compatibility constraint - preparatory refactoring"
"Bug fix: #327379 - shiftGroupingProperties were always being created new, even when they existed and should be edited - refactor some code and completed the delete method in the Grouping class instead of the service"
Initial refactoring of encoding package done. Now on to the clients...
refactor and implement better multiply operations
Refactoring repositories.
refactored. templates and controllers now need to be in same package as the model object
core: continue refactoring VmInfoBuilder
"Refactoring to make the main project be the root, removed the old release project and moved the example under source"
General refactoring and tidying up
refactoring
refactoring step 2
Code tested and refactored - ready for additional Thread code
Refactored binned data writer (2)
refactoring - moving helper stuff to separate package
refactored method name
Refactoring check permissions into single method on CIMInstance
"XWIKI-7023: Add Workspace Manager to XWiki Platform - Renamed maven artefacts and java packages, fixed poms and checkstyle issues, added javadocs and minor refactorings to integrate with the platform."
Refactord public evaluations interface to display more evaluations especifications and to show a bit more information.
Refactor instant factories to be fromInstant() to avoid ambiguous method resolution problems
"Refactoring nearing completion, MarketDisplay and unit tests next"
Refactored ogr datastore into jni and bridj based implementations
Refactor listZones to new API framework.
Work in progress on MIFOS-2551 * refactoring related work done on this issue
Caching refactoring;
Reason: The computation of the length of separate line in legend was changed in last refactoring. Solution: The former behavior is remained.
Refactoring of remote services api and rest api
refactor
refactor
[SUREFIRE] refactoring
Refactor content assist request class for easier implementation and maintenance.
refactored for clarity
Refactor TestCommandLineUtilities to use test objects
Refactored tests to wait for pages to load and to thread-wait so as to not overload the Harwell servers. Folded GetGenePagesTest into the already existing GenePageTest and standardized the output messages. Renamed PhenotypePagesTest to PhenotypePageTest to be consistent with existing test file names.
Fully implemented new Forge Addon project (complex type) - Still needs some Facet refactoring. EXTENSIVE TESTS.
refactoring name board to json
CDIPerspectiveTest added + huge refactoring all cdi bot tests
Refactored inventory and configuration reports.
Some more implementation and some refactorings regarding relationship type creation.
refactoring
Refactored persistence to be consistent/organized and fixed escalation tests.
getRemoteStore() & getRemoteEndpoint() refactoring
(Alternative) refactoring of subset operations - wip
"DDF-463 Refactored code to move out each filter, etc."
more refactoring
Refactor command line tests for CPD and create a BaseCPDCLITest class
- Refactored MultipleStageDependencyCondition to work a list of StageDependencyCondition instead of only 2. - Renamed ConsentStageDependencyCondition to StageVariableStageDependencyCondition.
Refactor report domain.
refactor error metric code
refactoring to make stacked time plot customization easier (particularly with regards to tooltips). I'm not sure that I'm happy with how tooltip customization works at the moment however
"vishnu, amir | #000 | Refactoring to have the a single transaction for processing the request, in order to avoid deadlocks."
Refactored FilterCriterion.
Refactor how coding conventions are set (Nick) R=alan
Use SnapshotKeeper refactor Index and FileBitmaps. Fix aggregate bug in DefaultBatch.
Box service refactored
Renamed and refactored ConfiguredTreePage to TreeController as a first step to MVC
Refactor IdeCommitListener
Initial refactoring.
added account manager refactoring theme
refactor a method
"refactoring, RelationshipUtils class, removing warnings and deprecated calls"
Refactored processing into multi-threaded transactional approach
SONAR-2757 Refactor the purge mechanisms to prevent any fullscan SQL requests on snapshots table
"Remove unnecessary finals, format code, fix some issues - remove unnecessary finals but add missing finals - refactor activator synchronization - remove core utilities package"
"more refactoring, and adding new errai-persistence module."
refactored some
CheckIn: Fix bugzilla bug 297918 Refactor data set editor pages' codes[19973]
refactor parsing of G1 logs
Further refactoring of the reporting classes to support the MOH711 * IndicatorReportBuilders now support muliple data sets per report * Created new indicator libraries
small refactor
SONAR-5056 Refactoring of DebtModelService to have a clean dedicated server side API of debt
refactor turn left method
Feature #8017: using highest term instead of greater or greatest when dealing with user roles. Using lambda for WebTreatment processes. Fixing also an error introduced during the work of old JavaScript alerts to nice popup refactoring.
refactored and fixed up some remote poller code
"Major refactoring: Moved processing of build scripts to own Processor class, generified model items and introduced package ""model"", added downwards compatibility and bundled configuration items in configuration class"
Refactoring of Java code generation related constants
"- It is now possible to declare a default class for a sub-component as an @annotation.   Thus, it is no longer necessary to specify the class name as an xml attribute for sub-components    - refactoring of sibling appender "
ISIS-1355: minor refactoring to extract method in wicket viewer.
"remove @ContextPath, refactored behavior of @Path. improved a bit HttpRequestBuilder. Url slashes"
Refactored send of the queue upon connect.
"major refactor for api, core and schema repo"
Tests refactoring to use more SWTBotExt features
Fixing some compilation errors and restructuring/refactoring AMP
refactored 2PC job executors
Major refactoring. Broken into modules.
XLCLOUD-143 refactoring
"Refactoring Inode, InodeFile, and InodeDirectory and Create*Options."
Refactoring test classes package name in order to remove FQN duplications among different modules
Refactored IterateStage to use TestStage as base class * TestStage got timeout and synchronousRequests properties * Generalized the way how results are gathered from stressors/logic * IterationStatistics generalized to IterationData * added example configuration for iteration
gcov & gprof refactoring: move internal classes in internal packages
ModifyingArchiveTest included in suite + refactoring
"[PLAT-3191] Refactor the ViewComputationJob class into SingleThreadViewComputationJob, preventing an abstraction to ViewProcessImpl that allows other execution semantics."
Refactor ranking api.
added preview to lightweight rename refactoring
Low level plumbing work required to have a context dependent error model with the new indel probabilistic alignment model. This just adds an extra input argument and does some refactoring so that when an actual model is ready it will be easy to plug in.
refactor
Added guava as an explicit dependency. Added tests and refactored.
Refactoring to introduce correct product list context in collection template
Refactor abstract registration internals
Refactoring of some functionality in the JavaFormatAssistant to promote reuse
Minimal refactoring for a8c3a031c068d3a356c105af42c2819dc3962124
Refactored: ConcurrentMarkSweepCollector
[np] Initial cglib support. Needs refactoring.
QUA-22 open answer UI refactoring.
intermediate commit while refactoring
More refactoring of Streams for new API
massive refactoring
"HBASE-17174 Refactor the AsyncProcess, BufferedMutatorImpl, and HTable"
"fixes for refactoring + if an editor is open, the cache will use the document inside the editor instead of the file version"
some refactoring on profile
Refactored test packages
Refactor Mapping class for extensibility
refactor project service
Refactored SimpleMapTest.
refactoring avec separation de la configuration xml du reste du code
"NMS-4535 - big refactor to make Event be JAXB marshalled, and contain an InetAddress"
Add tests for RouteComposer (refactoring on the way)
"minor refactoring, bug fixing"
refactoring step 1
some more refactoring done
refactor
Refactor 5.
"WINDUP-520: API Designed, Partial Refactor"
refactoring to move custom TypeConverter registration in a super class (issue #105)
refactoring
Start refactoring permissions manager
refactor AbstractAppProvider into ScanningAppProvider. support new deployment API for jetty OSGi. added some ways to extend the behavior of App and ScanningAppProvider
Refactoring and code cleanup.
"Futures Refactor - Removal of old BondFuture, then the Analytics Transaction of BondFutureSecurity and InterestRateFutureSecurity, with a rename of those removing the Security, ie InterestRateFutureSecurity > InterestRateFuture. This disambiguates the Analytics Derivative from the Financial Security"
refactor package
refactoring...
RF-11543: refactor ResourceMappingConfiguration to service
more core and refactor of structure 
"refactored to pull out dryRun method, renamed variable and code clean up"
refactored tck-runner packages
Endpoint mapping and package refactoring
"First stages of model refactoring, and added unzip to temp folder support"
Refactored SavableForm and MessageForm
"More AST refactoring, printing CSS is close now"
refactored base package
JBRULES-1734 Drools API  -Refactoring to expose ConsequenceExceptionHandler
Some refactoring of TwoCameraFusion.
"Refactored launch configuration, its associated UI tabs, and moved some behavior from the JBossServerBehavior class to the JBossLaunchConfigurationDelegate instead."
Small refactorings
* Moved AlarmDao & ControllerDao to new module * Refactored ControllerDao not to use MessageManager
add TreeMenuController tests and refactor
TAJO-853: Refactoring FilterPushDown for OUTER JOIN. (Hyoungjun Kim via hyunsik)
refactor core: all registrations now in Expressions class
common refactoring and add segment tree in structs
Refactored DownloadServlet tests to run in the integration test phase
Refactor and tidy up
Refactoring into subpackages and introducing JobPolicy
[Java container] Refactored ProcessManagerController to improve its testability.
# 479 Pool will return null when the request to claim times out.  Refactor to support this use case.
Refactoring related to threading issues
minor refactor
#NAME?
Major refactoring. Added async sorting as well.
* Fixed some cookie issues in Security Provider. * Working in refactoring of Admin Console.
Clean up the path refactoring now that I know what methods need to be available to be overridden.
Big refactoring attempt.  Not yet convinced.
#2143 first spike of a refactor of the remote arquillian container code to make it easier to reuse code between the command line remote and the docker implementation
Issue 29 Refactor IntelliJ plugin to be organized more like the Groovy plugin.  Also added an easyb language as an extension to groovy and defined an easyb file type.
refactored the source code
refact(qa): refactor instance migration test infrastructure
SEAMFACES-33 Refactored ViewData* to ViewConfig*
Refactor doInitialImport into own method to allow for better testing
Refactored the core test code to build as OSGi bundles.
grizzly container refactoring
Refactored/moved client transaction package to its top level package.
#NAME?
Removing the too specififc hasDeclaredPublicMethods class assertion Refactoring class assertions related to fields and methods
Refactored CatalogItem to Product and SellableItem to Sku
"added webscript to add RepositoryArtifact instances, refactored initialization of java backed cycle webscripts by adding abstract super class, added MultipartRequestObject"
XWIKI-4753: Refactor old model to use the new Entity Reference classes
Refactored FeatureModel to be store the active strategy instead of it's id
Code style fixes and refactorings
refactor frontendexception alert
Refactored code to add logging and more testcases for EntityManager
some refactoring
refactor code
[OPENENGSB-3786] refactor xlink
HIVE-13902 : [Refactor] Minimize metastore jar dependencies on task nodes (Ashutosh Chauhan via Sergey Shelukhin)
Refactor to make more sensible package names.
Refactored Service to Use Selta Build Classes
"Added comment attribute on relation and rel-id to fk links, corrected field comment location. Small refactoring with new RelationDescription inner class."
#NAME?
"Fixed provider order storage, code examples for constructors, refactorings."
binding system refactoring - work in progress
"Finished the AttributeFacetHandler Implemendtation, plus some minor fixes, plus refactored and enhanced integration tests"
"[issue:2212]introducing an abstract class for interface TimeSeriesVisualisation, spellcheking of javadocs, refactoring of event classes"
[refactor] renamed and moved BaseFilteTest to BaseModifierTest
Initial commit of Util refactor
[GraceShutdown] Shutdown listener refactoring to allow dynamic configuration.   Implemented Shutdown method in each component instead coding a general procedure.
refactored SpringProjectBuilder to support validators [refs #171]
Refactored VO conversion
"full stored procedure support; added entity stored procedure editor; added stored proc reference failure checks; refactored generation of fully qualified model names into a common interface (ModelName/Entity:Whatever/Attribute:Whatever ,etc)"
HTTP client: refactored request listeners to support lambdas.
[DROOLS-1649] ServiceRegistry refactor (#254)
Moved dictionary-related classes into ivory.core.data.dictionary; beginning of refactoring.
"More refactoring, piping through ""wrapper name"" so downstream code need not use introspector"
Refactored ecf event classes.   Added (sub) interfaces to specify accessors for certain event types.
Refactor the StringUtil.compareVersion() and do some perfermance enhancement.
"refactoring Builders to allow for post creation injection from Container, which greatly simplifies startup."
Refactoring:  /trunk/ItineRennes     -> /trunk/itinerennes /trunk/ItineRennesTest -> /trunk/itinerennes-android-tests
refactor
Just.. an unbelievable amount of changes. Mostly related to vision configuration but also lots of refactoring and moving code around.
major graph diagram refactorings
multiple refactorings to push delegation of responsibilities into the right classes - preliminary support for target templates
"code review workoff for oauth refactoring, mostly involving updating to use DomainMapper instead of one-off mappers"
Refactored the HA branch to facilitate using different implementations of LockManagers and IdGenerators.
More Preferences refactoring. Added popup dialog as alternative to List-Detail panel
Refactorization to improve the implemtation
Refactors AST nodes to reflect teiid engine packages
Refactored Evaluation system
Package refactoring
Refactored NULL expression
further refactoring of the assembly
refactored
 ItEr37S17CUCalculoValorGanadoItEr36S19: Refactoring code related with company load chart.
refactored/relocated BananaPi & BananaPro example into subdirectories to better organize the platform specific examples. added build scripts for new platforms subdirectories in examples
"XWIKI-8851: Add the ability to do a fake office import using the office viewer * Add a generic CurrentMacroEntityReferenceResolver and refactor CurrentMacroDocumentReferenceResolver to used it. Also add CurrentMacroAttachmentReferenceResolver to be used by the Office Macro to resolve its 'attachment' reference. * Refactor the Office Macro to use the CurrentMacroAttachmentReferenceResolver, thus taking into account the BASE meta data when resolving the 'attachment' parameter. * Add a check box on the 'Import Office Document' dialog to allow the users to use the office macro when importing an office file. Unchecked by default. * Enhance the WYSIWYG Editor's Office Import service to support an office macro based import."
Refactoring matchers to read in a more friendly manner
api_refactor: vpc admin apis
refactoring the immutable objects support
"WyBS: beginning to refactor the design of the build system.  This is necessary to enable the production of multiple binary files from a single source file, in order to support the construction of ""lambda classes"" for the JVM back end.  Furthermore, I'm hoping to clear up some of the issues related to dependency tracking which are needed for the eclipse plugin."
"BridJ: refactored the new native list API : - only expose NativeList as a lightweight interface that's able to return a pointer to the list (which not necessarily points to the first element of the list, depending on the list's implementation ! For instance vector<T>'s pointer points to the vector structure's start) - allocation of a new native list from scratch passes through Pointer.allocateList(io, capacity)"
CSPACE-6959: Refactored client code to deal better with init exceptions.
"much refactoring of REST index apis, using new index api."
#77 Refactor hacky code to force fields to show up after validation failure. The current version led itself to show fields that were not relevant for that particular entity at all (like show ProductBundle fields when editing a Product)
Refactoring having merged pulled-request for #45
package refactor
Some refactorings in Switch
"HIVE-14198: Refactor aux jar related code to make them more consistent (Aihua Xu, reviewed by Mohit Sabharwal)"
Almanach refactoring: - adding bundles keys and values - event notifications (little refactoring about user notification builder) - silverpeas-permalink angularjs component is able to wrap the permalink displays as today or to display a new version called simple - handling portlets displayed from an iframe
Refactor UTF8 BOM removal for use on files from URL
"CheckIn:Refactor Code, Use new Aggregation Framework throughout Data project"
[DEL] Tests: removed unnecessary methods [MOD] Tests: added more descriptive comments [MOD] Tests: refactoring
"TEIIDDES-1076 Create Model Extension Registry Eclipse View. Added initial icons for images, implemented selection listener and registry listeners. Other refactoring and minor changes."
Gratuity related code refactorized
Refactor to create TimePeriod and make Duration millisecond only
Huge refactor to GwtcService
Refactor some verbose classes to shorter names.
"CacheProxy refactored, cleaned up, (review)"
"Refactoring configuration file classes to accept files in the constructor to allow testing. Also, added basic configuration files for testing."
"Refactored the connection handling to allow sessions to float free, but keep connections bound to the thread, until the thread dies. The connection must not be kept anywhere since it must not cross a thead boundary. The Client is lightweight and can be used in multiple threads."
Refactor ChangeHookRunner as an interface
Refactor Math to Obj not Fn. Refactor how builtin types register.
MBM-66 Public can update their cart Refactored Customer Cart resources to use Public Introduced anonymous public concept
Fixed passing parameters by pointer and renaming of parameters in Extract Function refactoring.
HIVE-6677: HBaseSerDe needs to be refactored (reviewed by Prasad)
DNA-115: Create federation service - Completed another round of refactoring to simplify configuration that also allows distribution/clustering
Refactored the java model
interim checkin - annotations not functional at the moment (currently working on refactor)
some refactoring.
"Some refactoring of inherited index behavior.  Fields now get the indexed default state from their declaring class, not from the final class in the inheritance chain."
Refactor skip garbage pack logic into a method
refactoring: moved propsToArgList method to TestUtils.
"1) Refactor the BrokerMain into a BrokerMain and a BrokerNode to allow for extensions 2) Rename ServerMain to ComputeMain 3) Refactor ComputeMain to ComputeMain and ComputeNode to allow for extensions 4) Remove ""TheSizeAdjuster"", was old legacy stuff that's not relevant anymore 5) Fix bug with registering different IndexIO handlers 6) Adjust it so that when a query type is unknown, it returns an error message instead of just emitting an alert and returning nothing 7) Create super classes for the various *Node classes that allow for code sharing on pieces that are common"
worked on the Annotation parser  * Added more handled annotation constructs like array  * Changed classes locations     Visitors and Tree are in a dedicated package  * Changed how argument are added to the Annotation class  * Removed and ignored .tokens file as they are not needed  * Completely refactored the visitors so they visit their children only    when needed
"Refactor how container extraction works - Jukka's patch from TIKA-509 Replace the AutoContainerExtractor with ParserContainerExtractor, and push more of the work to the Parsers"
Refactored.
HTTPCLIENT-898: Refactored socket factory API (new socket factory interfaces are better suited for multihome hosts)
Ticket#18: Refactored Movie to use streams and removed decode fields - instead if a Decoder for an object type is not registered then the data will be wrapped for example in a ShapeData or MovieData object. Changed Encoding and Signatures for Movie to enums. Simplified number of methods on class.
Refactor response body processing so the whole body is parsed together. Fix bug in request body processing where wrong buffer length was used.
"RF-11909: refactored classes to reflect new meaning of 'resource loading', added alternative names for web.xml configuration params"
refactor(engine): renaming packages and classes
"JBRULES-533 refactored state, added dublin core, more tests"
Refactor session tests to common base; add option to save session when created.
[PLAT-2785] Refactored formatters to support multiple arbitrary formats per data type
Refactor some Inferencing related test code so Gradle tests can use it.
[PLAT-3281] Refactor: rename RepositoryConfigurationSource to FunctionConfigurationSource
Refactored TestClassRunner to use WorkerCounter
camel-undertow: refactor unit tests to use dynamic ports
Refactoring temporal primitive model to fix bug #301 (http://tracker.deegree.org/deegree-services/ticket/301)
page-fragments: refactoring of popupPanel fragment
Refactored to ease development
Adapters refactoring
Refactored: removed unnecessary interface / EntityIdFactory
#NAME?
"OmimHpo annotator refactored, fixed tests. Removed huge comment blocks. Made all static methods non static. Creating beans is now done in constructor instead of every run through annotateEntity. Big performance boost."
refactor package
YARN-3974. Refactor the reservation system test cases to use parameterized base test. (subru via curino)
Refactor non-compiling classes to separate subtree
a couple of refactorings in FilterInterceptor
Refactor to use reflection to avoid needing a million new classes
Refactored GWT classes
"Refactored sprite movement to be more readable/maintainable. Also added SpriteRunningMode, which will represent the mode the Sprite is in (on a wall, on the ground etc)."
Refactoring AccountDiffPreference vs PatchScriptSettings+PrettySettings
refactor: rename expectChannelError to expectError since it works just as well for detecting connection errors
"CLOUDSTACK-724: add basic zone wide storage support, refactor storage allocator, need ui support"
Refactor by RubyEnumerableBase & RubyEnumeratorBase interfaces
Refactor toString() impl. into new method getFullName().
some refactoring
Refactor the name of both the directories and the artifact ids of the RssAggregator project and of its subprojects
"47837: Move CU should support creation of destination [refactoring] + corrected title of reorg move dialog to show ""Textual Move"" only iff moving SubCuElements"
refactor for readability
"[wrappedModel] UI working, model wrapping has to be refactored"
Refactored to eliminate Notifier and its subclasses. You don't pull your weight around here and you're history.
Minor refactoring
"Refactored File dialog chooser with better method names, and switched the logic to use FileDialog for Mac & Windows, otherwise JFileChooser. Added a progress dialog & task for when fetching list of ontologies from Bioportal. Added a black border to the icon"
Refactoring
refactoring
complete refactor of the compilation code into a separate module
Refactoring of Java code generator test execution classes
"HBASE-7110 refactor the compaction selection and config code similarly to 0.89-fb changes; REVERT of original patch and ADDENDUM because applied old patch originally, v8"
#609 refactored the load balancing code so we have a set of LoadBalancer implementations which are easier to use in a protocol/transport agnostic way
SEAMFACES-136: Refactor the security related classes into a security package
- Updated to Vaadin 6.8.3 - Refactoring and cleanup - Added means to hide/show individual filter fields - Should correctly handle generated columns - Improved the demo application
"refactoring, work in progress"
Refactor. Change package of dynamic model refreshing utils.
Refactored cleaning of FBA tables and Locator meta
"MODE-1590 - Refactored and extracted a common base class for all the binary stores tests. Also, in the process, cleaned up the API a bit and fixed some issues."
"Refactor impl package, cont5"
"Use a separate thread per connection, don't share it. Improved failure cleanup logic. Refactored redirect & not-modified response logic."
"XWIKI-12388: Use the refactoring API for the top menu actions (copy, rename, delete) * space delete and document copy/rename/delete should use the new refactoring API * keep interactive job mode off by default (untill we have the UI to ask job questions) * add support in the refactoring API for copying/deleting only a specific document translation"
Refactors such that Kafka bundles spans and shares more code
issue #2 - refactor unused classes; improve configuration
Minor renaming and refactoring.
Refactor - moved ZuberasDiedWatcher to shared area
ROO-2986: Post 1.2.0.RELEASE code refactor and clean up - refactored JavaTypeConverter in preparation for fixing ROO-2994
"Negative tests and their examples added. Basic refactoring of existing tests. We can now test for exceptions being thrown, errors being reported and warnings being reported."
Refactored RabbitMQ and service descriptions out
Refactored DRUM to follow a package structure as the root folder was a bit messy as all files (except event files) have been in the same directory. Added plenty of JavaDoc which was updated to the latest state too
Finished sunset calculations.  All JUnit tests finally work.  Will begin refactoring.
Refactored region factories
Refactored
Got rid of unused parameter on IndexStorageStrategy. Refactored it into the collection/api project.
"initial commit of operators branch (will be tagged 4.1 eventally, nick's 4.2 branch). this commit contains several tea language enhancements known as operators by nick as well as lots of generic typing refactorings. a full description of these changes will be documented elsewhere... builds... basically tested."
refactor milestone
refactor(javaee) renaming classes & packages
Refactored all Maven modules
TEIIDDES-567 Refactor DisplayNode logic to defer to LanguageObjects whenever possible
[misc] Refactoring
fix for 33405 Refactoring extract local variable fails in nested if statements
The Big Score Refactor
"o Refactored the plugin extractors to accept a MavenProject only, and pull the information they need from it in order to extract the mojos they're responsible for."
Refactoring from bjoern-thalheim
refactoring the project
Renaming testng listener as part of refactoring for CassandraClustermanager
"some refactoring to make bug 7180, 7632 easier to deal with"
refactor for fcrepo-944 test support
created new rules for Credits Calculation. refactored code in credits.
"refactor, fix compiler errors"
Test refactoring and new tests
refactoring
"added builders for chapters 1-8, cleaned up roo version for 1-9, refactoring ongoing"
refactor for serialize performance
Refactor: SQLUpdateGenerator is now able to generate drops if -genDrops option is supplied. The changes generated without the -genDrops option are semantically equivalent to the previous version.
Refactor: Extract interface from ColumnSlice and move it to the api package
Refactor TmfExperiment
Refactoring of Content heirarchy: * Removed HtmlContent - moved processing logic into HtmlContentProcessor. * Merged ContentStub and BaseContent into InMemoryContent and used that everywhere instead.
Big refactoring on top automation objects hierarchy Integrate Transient state manager Create Local event bus
Refactored tests to new plugin fragment project. Test cases are now added at run-time to a newly created workspace. Included in continuous integration tests at https://github.com/cderoove/damp.ekeko.releng
Refactorings in module loading.
refactor begging
Refactoring rebalance for producer/consumer
[SCRUM-72][SCRUM-169] admin central navigation: refactored out NavigationGroup
Refactored to remove references to v4.
Refactored snapshots in support of core changes
"Added mailing list functionality, refactored DAO hierarchy, and modified users to account for different types of users being added"
"Refactored a super interface for what was previously known as ObjectIndex, now Enumerator."
"Created builder java classes for Suggest and SuggestRefresh - New SuggestRequestBuilder and SuggestRefreshRequestBuilder classes - Refactoring of all request and response classes - The term, field, similarity and size fields are not part of the query source anymore, but own fields"
NMS-8041: Refactor Enhanced Linkd Topology
"Refactor engine, and add ""done"" workflow node to perform clean up."
pool: Refactor MetaDataStore and FileStore to use Path rather than File
Refactored GangliaProbe
polishing / minor refactoring to make configuration easy for users of dialog related classes
Refactor all permission logic out of main class in preparation for on-the-fly permission adjustment
Ticket #2869 Refactor experiment page - gxa.plot package moved to web.ui.plot package as there are only ui rendering classes
MODE-1666 - Moved JndiRepositoryFactory to modeshape-jcr module and refactored code inside RepositoryManager
Refactoring
Refactor moviesMetadataRetrievero module name to use convention
* Refactoring structure
incomplete cleanup of extension point refactor - relates to JBIDE-9864 and JBIDE-9724
Fix issues wrt recent refactoring of databind
#JC-726 Synchronized checkbox with db state .Coverage and minor refactoring.
Some simplifications and refactoring in advance of versioning.
"2004-10-31 Alain Magloire 	Refactor ICDIVariableObject --> ICDIVariableDescriptor 	Refactor ICDIArgumentObject --> ICDIArgumentDescriptor 	Refactor ICDIRegisterObject --> ICDIRegisterDescriptor 	Addition ICDIThreadStorageDescriptor, ICDIThreadStorage 	Addition ICDILocalVariableDescriptor, ICDILocalVariable 	Addition ICDIGlobalVariableDescriptor, ICDIGlovalVariable"
Update refactoring support to provide error messages when attempting to perform refactoring with an invalid selection for #46
Partial Fix and Refactoring for JIRA issue SGF-236 enabling the <gfe:lookup-region/> nested element syntax to function properly.
Refactored BundleManagementService caching. Added nearbyStops to cache building process.
Refactor structure for examples and extensions
some tweaks and refactorings
"Refactored application properties design:   - ScreensaverProperties is now a Spring-managed singleton bean.   - AbstractBackingBean.applicationProperties is now the singleton ScreensaverProperty instance, rather than a separate Properties object.   - Moved AbstractBackingBean ""features"" methods to ScreensaverProperties   - ScreensaverProperties now logs all defined properties, for improved auditing/troubleshooting of deployment environment (and test environment); password is hidden"
"refactoring: move around event extraction classes, pass 1"
XWIKI-10370: Fold the Action module into the Resource module XWIKI-10371: Rename Resource into ResourceReference and all ancillary classes accordingly XWIKI-10372: Refactor the Resource API XWIKI-10373: Start implementing the Serialization part of the URL module XWIKI-10374: Add ability to plug in Resource Handlers for new Resource Reference types XWIKI-10375: Refactor the temporary resource concept inside the Resource module
refactoring and new representation types
wall refactored. works fine getting all posts or given count
Refactored waffle.tomcat into waffle.apache and waffle.servlet. http://waffle.codeplex.com/WorkItem/View.aspx?WorkItemId=8569
"BROKEN. 1/2 way commit on new forum service architecture. did some refactoring, but will back it out in next revision."
Major refactor of the theme-based mechanism. Launch.properties file has been refactored as well. A path to the delving_themes.xml external theme file is now required. Also the themed email sender is now using the PortalTheme mechanism as well
Finish refactoring
XWIKI-2497: Refactor the code that uses DOM instead of Element and Event. Add a rule for enabling indent and outdent features only inside lists. Add horizontal rule feature. Prepare the text plug-in for typewriter style; this feature will be included in the following releases.
Did a number of refactorings.
refactor high-level organization algo
refactor(engine): migrating process instance parsing
refactored code for proxy connections
Removed api module in favor of a public dependency. Replaced Maven with Gradle. Removed GPS stuff. Refactored a lot of stuff (god saves Roboguice!).
Refactored SWT tests. Fixes #607
refactored code
Huge refactoring Seam3 tests + CDISeam3AllBotTests added + seam3 resources refactoring
Fixes #19 : Add cause assertions to ThrowableAssert (minor refactoring)
refactored OSM / OAM related code added diff functionality
Refactoring
Fixed bugs and code refactoring.
[PLAT-2499] Refactor: move EHCachingConfigSource from master package to core package and reworked the test case not to use master
REFACTORED state updates to reduce repeatable code and to increase readability
157165 Rename refactroing test packages to have refactoring in the name
Saving patient's photo - refactoring
More LP indexing algorithm refactoring.
Refactoring sample code
refactored the keys into two new types:  dependencies and type keys
refactor discovery to use the new Pinger; remove a bunch of pointless/dead code and threads... yay!
CDI OpenOn test correction + huge refactoring of all CDI tests
EST-496: some refactoring
refactor
Refactor the reindex action registration service into the molgneis data.
"Refactors package names and structure to hs-hannover.de domain (including license headers, pom.xml, etc)"
refactoring
refactoring the CLI
refactored the and;or operatons
router and taxi service refactoring
"Refactor geom->model, add Union class"
Refactores JMX relevant part to an own module. Fixes OSGi exports.
prematch and spring refactor
refactor packages
Feature #4286 : upgrading resource manager application - changing the calendar mechanism (using the same that the one of Almanach application) - adding some new features to choose more freely how to display the calendar - adding Web Services that expose reservation data - refactoring some code - harmonizing the display of the current period label with applications that are using a calendar
Kiran | Refactored mother report service.
Some refactorings for shorter classnames in RUP Decoder/Encoder
"Package refactoring to move acceptedpaymenttype, fees and fund packages from org.mifos.application to org.mifos.accounts."
"Made all dependencies of SeleniumSteps injectable.  Refactored SeleniumConfiguration to use builder paradigm, like configuration.  Added SeleniumPage as based class of Selenium-based page objects."
Minor refactoring
 refactor of jpa integration api.
JBIDE-1497. Refactoring
Refactoring of resolver template based tests.
"Issue 695: Refactoring2: Introduced Resource for links,actions,name from schema. Removes duplication"
only some refactoring
Refactor DataLoader
refactor add2 method
Bug 383988 Minor Refactoring to add a method to create external server debug configuration widgets that can be overriden. Add missing dispose method.
fix al refactor
Refactored exception name. Added new tests and functionality to support these passing tests
Major refactoring (#7)
SONARIDE-331 Refactor creation of violation markers * It is now the same code for local and remote mode
refactor with goal to remove testutils from reporting
refactored tests
Rack packaging doesn't fully override rails logging Refactored platform hooks in to the Rails application by using the correct Railtie approach Refactored Ruby code and initialization to separate classes into separate files and clean up code
[Misc] Refactor the REST API module
refactored packages
PLANNER-252 Refactor simplify ChainedChange/SwapMove to deal with Smart ordering of shadow variable after* notifications
refactored packages for separation
Activiti Cycle: documented RepositoryConnectorConfiguration-manipulation methods & made some minor refactorings
XLCLOUD-788 Refactoring of VcmsGuiPathParams
light refactoring
"[87920] ExtractMethod refactoring should not use ASTNodeFactory.newType(AST, ITypeBinding, boolean)"
"Refactoring, NPE fixed. #123"
Made a refactoring of connections to master (multiple channels per client).
Refactor TaskCommentsView/Presenter for unit testability & add unit tests
EST-417: Refactored Lease Break Options
FEATURE: Now can create ARC/WARC Resources from URL + offset REFACTOR: moved common code into private methods
Refactor - moved FinancialCalendarGenerator to HolidayOutputWriter.
Major refactoring of 1D barcode code. Moved into com.google.zxing.oned package. Misc. other changes to support this refactoring
refactor and fixes to createparameterproposal linked mode
refactor validation pipe building
Refactor UKItemIdentificationStrategy implementation
Refactoring some utilities.
- refactored Updater to be better testable - [FIXED HUDSON-4572] don't strip JIRA ids from comments - fixed an issue with [HUDSON-4132]
Moving userId to Cloud object & refactoring
SCRUM-810: another bit of refactoring
Refactoring of db installer engine
ProductManager refactoring
refactor out toplevel classes + do less fragile look-ups
Refactor: HistoryCache should be an interface
refactorings in cloning and splitting of processes
"Add connections pool support and HTTP 1.1 connection handling (was there, got wrongly removed in one of the refactoring)"
Refactoring package names.
"Refactored API, updated documentation and added more tests"
Refactored
Refactor LegendsPanel (especially the init method)
Merging api-refactoring to trunk [3595]:[4355]
Refactoring package structure
Big CQ Result: Refactored code so that Instructions doesn't return DataSources. It is necessary to call DataSourceFactory and use the instruction as a parameter
Refactoring of packages and Processor names.
Improved highlighting of freeforms and polylines.  Began refactoring FreeformTool and OverlayNodedObject.
"Upgrades and changes to LeftAlignVariants, motivated by 1000G consensus indel production: -- Added ability to trim common bases in front of indels before left-aligning. Otherwise, records may not be left-aligned if they have common bases, as they will be mistaken by complext records. -- Added ability to split multiallelic records and then left align them, otherwise we miss a lot of good left-aligneable indels. -- Motivated by this, renamed walker to LeftAlignAndTrimVariants. -- Code refactoring, cleanup and bring up to latest coding standards. -- Added unit testing to make sure left alignment is performed correctly for all offsets. -- Changed phase 3 HC script to new syntax. Add command line options, more memory and reduce alt alleles because jobs keep crashing."
Refactoring of client factory bean
Refactoring the configuration to support multiple tables.
"major refactoring, order matches at same price and quantity are removed from order book."
EST-371: completing refactor of fixtures for setting up LeaseItems and terms.
Refactor some duplicate code.
Refactoring to tidy up resolving and combine object factory and manager - complete - released to DSFA 14/7/05
refactor: move implementation of Prepared and Callable statements to PgPreparedStatement and PgCallableStatement
Added NodeFilter to filter things like security and visibility. Refactored way Id's were formatted to allow more flexibility in formatting options.
ACT-741 refactoring persistence
RF view job and CM refactoring.
Refactoring of fd types; implementation of all sort orders.
Refactored Endpoint
Refactor: academic service request state workflow corrected for rectorate based requests
"Refactor TwitterClientFrame, TwitterClientMain"
minor refactoring to tidy up method names (as they are exposed in WADL)
refactor
"Added missing MutableInt class, and refactored the Reducer as it is generic."
#JC-1514 Refactoring.
Code refactor for extension
refactor websocket (CXF-5339) into a seprate transport component
PLAT-4128 - Refactor component manager to load/init/start sections
Refactor muffinmanager
Refactored AbstractCell such that the message dispatch code can be used  indepedently.
Refactoring to more readable code (and probably better performance)
refactoring and adding websocket implementation of https://github.com/wso2/jaggery/pull/15
refactor custom draw
"Refactored factory methods in Content (removed method duplicated under a different name, renamed method to be in line with the naming of the other methods); updated dependent classes"
report refactor
page-fragments: message fragment refactoring
- Refactored EmailComponent; Much cleaner code and correct multipart usage. Switched from PentahoURLRewriter to MailURLRewritter
"archive-commons: extend TimestampDedupIterator with TimestampCustomDedupIterator which also checks an additional field (default status field) when doing dedup (will probably be refactored more) ia-tools: fix bug in HttpZipNumDerefLineRecordReader, init cluster before use"
"Fixed parsing of REMARK 350 records in PDB files (Biological Assemblies) to accommodate various format inconsistencies. Also refactored PDBBioAssemblyParser to create bioassemblies where the models and chains are ordered in the same way as in the PDB bioassembly files (xxxx.pdb1, etc.)."
Refactor des Panels et suppression classes
#1765 first spike of integration with rhq-metrics and refactored the previous elasticsearch specific metrics code so we can use either rhq metrics or elasticsearch
Lots of refactoring and upgrades of depenencies.
XLCLOUD-100 Refactoring
Always use the writer to output HTML response in order to follow portlet recommendations (PLT.12.5.2). Implement support for query string URL mapping. Prevent the dispatch filter from handling the same request multimple times (in case of nested includes/forwards). Refactor URL rewriter (extracted the XML filter in a separate class) Set character encoding on the response data from the portlet response until we extract it from the content type. Added an XHTML serialization filter based on dom4j's XMLWriter. Rewrite the action attribute of HTML form elements. Added more entries to the URL mapping file. Added dom4j dependency. Changed NekoHTML dependency scope to runtime because we don't work with their SAXParser implementation directly.
Refactor: changed some name of classes.
refactor
Annotations support for actors & endpoint actors. Small refactoring around spring context injection.
"Final minor refactor bonds, bond forwards and bond futures in OG-Analytics in preparation for a major one shortly."
Work towards refactoring what is done in the content provider sync v. an individual repo sync.
refactored FieldAccessors
Tag Tests Refactoring
#NAME?
[262765] [xpath2] W3C Test Suite - Refactored Test Suite. https://bugs.eclipse.org/bugs/show_bug.cgi?id=262765
H2 driver refactoring + NewDBResource
[issue:2100] refactored the plugin and added rmic configuration to pom so that stubs and stub jar will be generated during build
Updates to the metrics module to support paging of results. Various other updates and refactorings to support this change.
#NAME?
Refactored injectors
refactoring + improved custom UserDetailsService implementation + improved layout
Refactoring the SimpleGenomeLoc into the now public utility UnvalidatingGenomeLoc and the RR-specific FinishedGenomeLoc. Moved the merging utility methods into GenomeLoc and moved the unit tests around accordingly.
commit before full refactoring
#JC-1428 refactoring.
concept mapping:   packages refactored.   in the process of putting all stuffs together.
SONAR-2501 code refactoring
refactoring
Numerous bug fixes and refactoring.
Refactor of FlowdockNotifier to make it more testable. Added some tests for FlowdockNotifier.
Refactor out the equalSolverRanking method
Removed unneeded public methods from HtmlResponseWriter - bug 340927: Cleanup and refactor HtmlResponseWriter https://bugs.eclipse.org/bugs/show_bug.cgi?id=340927
"Add GLFramebuffer, refactor FrameBuffer and FrameBufferCubempa to extend it"
Refactor: getChildren in GroupBMPBean changed to getChildrenIterator and now calles getChildren().iterator() which returns Collection
"MAN-124 MAN-125 added Capability IP migrate setIP and listInterfaces Actions to IP capability configureEthernet.vm change name to configureIPv4.vm Refactoring of Karaf commands  	chassis:seInterface --> ip:setIPv4 Adapt tests (integrations and JUnit) to this changes."
refactoring packages
refactored prototype selection
Refactored EJB support based on a better understanding of JNDI names.
neuron building refactorization
Fixed missing attributes for natural geometries referenced by the test SLD (which now renders more polygons). Also did some refactoring to simplify the access to attributes in preparation for expanding to typed attributes.
"refactored to a single build method to help structure things, will split up again later"
Refactoring history performance improvements Cleanup and consolidation
refactoring
refactor
Refactoring Category retrieval and sorting
Extract Parameter refactoring #866
Did some refactoring work to simplify how we deploy onto underlying Web servers. 
refactored UserController#editProfile and improved test. +small changes in other classes
package name refactoring
Refactored method to retrieve current Credential entity. Fixed the query to the credential attributes.
serious refactoring. server no longer relies on client code.
Simplify and refactor the logic to ensure that Immutable(Bi)Map.Builder and friends create entries that can be reused by RegularImmutable(Bi)Map to avoid redundant copies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43407355
"AddTrait and RemoveTrait events, refactor"
refactoring
Refactor BBC A-to-Z adapter to mainly use ION over /programmes RDF
Service structure refactoring
SOAPUI-1288 - refactoring log results
refactor package name to be consistent
Refactoring getAdvanceMeasurement method to getAdvanceMeasurementAtDateOrPrevious.
"dashboard update fixed, small refactorings"
refactored base vcloud test class to work when parameters aren't supplied
heavy refactoring in progress with breaking changes
Refactoring
"[MOD] XQuery, various refactorings (better counts, less obsolete code)"
commit working non-forked version before trying to refactor to support forks
Refactored shared object handling. Added linger time so the shared objects are not removed too soon when not acquired nor persistent. Changed RTMPConnManager to provide a static instance.
Refactored performance history. M2 code. Test cases updated.
[MRM-1704] Refactor to remove maven specific part from various repository/metadata apis
[refactor] SolarisEntry deserves to have a searchForAttribute method.
"""III"" refactored"
"Mutables loaded from config file, refactoring"
Minor refactoring for DeeProjectModuleResolver
"Rename the match+suggested fix to ""Refactor"""
Implemented walk to TAP path impedances.  Refactored AbstractPathChoiceLogsumMatrixApplication and PathAlternativeListGenerationConfiguration to accept separate origin and destination centroid ID maps.
"SpotTracker: added javadocs to tracker classes, refactored LAPTracker"
Refactoring
Mega refactor
refactored a whole bunch of the foreign source and requisition stuff around to use the new Requisition object in place of the ModelImport object
"-Refactoring OpenNMSTestCase and fixes to tearDown() method.David Hustace"
Refactor package names.
Refactored Search.java to make parsing arguments and searching much cleaner. Refactors VectorSearcher accordingly - VectorSearchers now have to look after building the appropriate queries from the query arguments.
refactoring for more consistent internal API
"Clone wizard and related: refactor, clean-up, fixes or improvements"
refactorings + optimizations + new virtual funtions introduced
Refactored to remove direct Spring Data dependency in the endpoint code.
Refactored scheduler metadata to include job history.
Refactor Getopt class
invoice: refactor invoice item adjustment in DefaultInvoiceDao
[refactor] Renames AbstractPocketResponse to AbstractAuthorizationResponse
displaying example count; refactored gui init code
[US 6] Refactoring Configuration.deepCopy() to properly handle hibernate proxies.
Refactor presentation and generation classes  by means of moving and renaming methods.
big refactory - strech does not work yet
Refactored
Refactor Native DND to Diagram to support sub-classing
"[MOD] XQuery, Core: Results interface removed, various refactorings"
Refactored: modules
"InplaceSelect, InputNumberSpinner, InputNumberSlider refactored"
Refactor academic terms
DDF-1573: Refactored Unit Tests
refactor
refactor code
Sowmya | #926 | Refactoring the code.
simple refactoring in LoginAlgorithms implementations
lots of refactoring and documentation
Refactor commands
"GS-11795 refactoring, method terminateGSC() fixed"
TIKA-2210 -- add experimental SAX parser for pptx -- this is a first cut.  More refactoring is in order.
refactoring!
Refactor name
"Refactoring of IWContext.getLanguage() to IWContext.getMarkupLanguage()and IWContext.setLanguage() to IWContext.setMarkupLanguage()"
[SONARPLUGINS-1414] buildConfiguration/platform parameter refactoring [SONARPLUGINS-929] fix assembly search mechanism
Minor refactoring
Implemented PathAlternativeListGenerationApplication.  Gave ShortestPath and related classes more descriptive names.  E.g. ShortestPathResultsContainer is now ModifiableShortestPathResultSet. Refactored Dijkstra strategies to take EdgeEvaluator and TraversalEvaluator instead of combined PathElementEvaluator.  Deleted additional experimental classes.
"More refactoring, adding unit tests as well"
CAY-1942 Refactoring of NamedObjectFactory and NamingStrategy
refactor codes.
refactor listeners tests
Refactor PPTX no repeated background on table
minor refactoring
"big refactor, at half way, remove MFBoundary , add MFLoad AnaylysisModel"
Renamed several classes. Implemented help. Refactored some code.
MODE-1435 Refactored ModeShape subsystem for AS7
minor refactoring a test updates
IAM refactoring - change of package
Refactoring code.
More refactoring
ISIS-109: started refactoring so that representation builders are looked up by media type (eventually: will be taken from Accept header)
major chameleon refactoring
Refactor the new Protocol extension API to allow other protocol to take advantage of it
MAHOUT-176: Refactor out VectorIterable in favor of Iterable<Vector>
refactorointia ja javadocin päivitystä
"refactoring: introduced interface Column, deleted term ""tree"" in package as well as in TreeColumn (now AbstractColumn) as these Column can be used for lists as well"
ASNN-198 http://bugs.sakaiproject.org/jira/browse/ASNN-198 Refactor use of generic-dao to ensure it is not deployed to shared Step 1 - reorganize code
Refactor the cached Authenticator data out of AwtAuthenticator
HIVE-5663 : Refactor ORC RecordReader to operate on direct & wrapped ByteBuffers (Gopal V via Owen Omalley)
Fixed compile errors from Doc refactoring
Refactoring: BioEntity annotation loading is done in Java without PL-SQL
Refactor TombCreateEvent to PreTombCreateEvent
JPAIdentityStore code refactoring.
Refactored ObjectFactories
Added -notify. Fixed some bugs. Refactoring.
Additional predicate refactoring.  Created PredicateFactory
Made minor refactorings. Changed the package structure
Refactoring the paging options so that the code can be reused for extensions. #95
#NAME?
Refactor
Add documentation and minor refactoring.
Fix a bug in navigation strategy: test added and some other fixes and refactoring.
[refactoring] Extract method in BuildQualifierMojo
Refactoring As2MessageSender to make it more readable.
Refactored the old submit controller into Student and the many submission steps.
refactor code to extract general sender
delete duplicate TimeoutTracker and refactor to utils class
test updates after interface refactored
ldapadmin - refactoring email related classes into the same package
Refactored: use RevisionCounter in InMemoryDatabase
"Refactored Network to use generics and put attributes as fields in node, edge, and traversal objects.  Created new package org.sandag.abm.active.sandag to hold SANDAG-specific code.  Created properties file in src/test/resources.  Wrote test SandagBikeNetworkFactoryTest for SandagBikeNetworkFactory."
refactored arrival time into orderAnnounceTime
Refactoring of presence API as per bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=167363
Refactor tests
"Major refactoring to improve and clean-up media player events, especially for meta data and detecting when a video output has started."
refactorings for dependency goal
[refactoring] Make MutablePomFile only expose effective values
adding refreshable task lists + ambulance turbo + SlickBasicGame name refactor
[JENKINS-8173] major refactoring of polling
refactoring add BlockProcessor and ExpressionProcessor
Refactoring Conf class and creating property configuration for channel default role and access mode. Related to issue #109 (almost finished)
refactored after messup
light refactoring of DocumentationHover
Refactoring of frequency distributions; returns both raw counts and frequencies.
Refactored
[refactor]: extract transactional manager interface
refactoring: main menu
Teiid 773 -  refactored back in the way jbedsp transaction classes where defined and added the other integration test
#NAME?
AS7-6325 pure refactoring
Refactored a little and patched Context to prevent exceptions when looking up beans. Added preliminary code to allow removal of the StreamTracker.
refactored PatternMatcher to provide better api for the new rewriting algorithm
Refactory dev frame
refactor package
"XWIKI-4068: Allow the page to link to to be searched for or selected from the most recently edited pages * Added Recent Changes tab to the wiki page selector, and service function to retrieve the needed info * Refactored aggregator selector wizard step * Adjusted styles * Added the default editor plugins and menus to the debug wysiwyg instance"
Refactored checks for secure schemes.
major refactoring of fare code in preparation for supporting NYC fares
[Tutorships] Refactor: Removed useless overridden methods in abstract subclasses.  Removed the getNumberOfEntriesStudentInSecretary() method from the AbstractPrescriptionRule. The Moments use the registration start instead.
In the middle of some major refactoring of the API...
HIVE-3514 Refactor Partition Pruner so that logic can be reused. (Gang Tim Liu via namit)
refactored logging engine
[OPENENGSB-200] refactor SecurityAttribute and start implementing ServiceACL
Fixes GH-34: Consolidate random seed property override between randomized runner and junit4. Piggybacks a small refactoring inside randomized runner (extraction of seed parsing utilities).
"Revert ""manager refactor , invoke js in constructor as default"""
Fix bugs in refactoring of UURI/UsableURI
Refactoring (EOD Feb 27)
NMS-8041: Refactor Enhanced Linkd Topology
[updated] refactored readPolicyFromGraph method
HypermediaFilter refactoring
massive refactoring
refactored classes for noise models and voting rules
refactoring & generics
refactor packages
hotfix and refactored
"Huge refactor around expected types, types generated and casting between the two"
Refactored dataset packaging/loading (again)
Refactor the ElementHelper to retrieve annotation values.
Refactored it a bit and made it more readable
Cambios en los controladores para refactor y para estandarizar la API.
"#1987 initial refactoring so that we can pass in the AutoScaleRequest into the autoscaler API to create containers; so that we can pass in the FabricRequirements and ProfileRequirements along with other things like FabricService so we can provide more metadata to help the auto scaler know what machines should be used (e.g. which docker hosts, which roots for child containers or for ssh which remote hosts to use etc)"
Refactored rules into the rules module
#914 - Page / PageTemplate / PageField refactoring
* Refactoring * Modified summing up of predicates
continue refactoring of clientCustAction - refactored preview and removed need for setting parent customer on action form.
Refactored NavPanel: * replaced #initPanel with #onInitialize * changed naming
Package refactoring
GTFS Validation: first refactoring
refactoring of statistical namefinder
refactored file://'s log internals
Refactors DebugFilter.
Refactoring existing functionality and making b-m-p more light while moving stuff to b-c so I can play with reuse with functionality later on
RDF/POST parser refactoring
Updates to lists and tests Refactor field names Copyright year
refactoring to more easily bootstrap
refactor branch code finished
Cleaned up code for by interval traversals for Jared.  Initialization code refactored and made clear.  by loci and by loci by interval use the same underlying code now.  Everyone uses the same initialization code to set things up.  It's a party in the TraversalEngine and everyone's invited...
restapi: refactor capabilities resource to behave as restfull collection
more refactorings of the test cases to further simplify them. Also made the SpringTestSupport derive from the ContextTestSupport so we can reuse all of the helper methods on ContextTestSupport
Refactored for Cache creation only through CacheManager
Ticket #2869 Refactor experiment page - design element accession column added to the results of find.best.design.elements call
#NAME?
Refactor ValueIntegrator (#1089)
"heavy refactor, change implementation class package."
"add logging, remove sessionservlet, refactor for better exception handling, .."
Significant progress on refactoring errai-security.
"Scene2d refactoring + more. [added] WidgetGroup, a Group that does Layout. [updated] Layout, added pack, invalidateHierarchy, and validate. [fixed] Group lastTouchedChild. [fixed] Stack layout. [updated] LwjglFrame, setVisible called automatically. [fixed] LwjglCanvas cursor. [fixed] Warnigns, javadocs. [fixed] TextureRegion size float rounding. [updated] TableLayout pref size calculation. [fixed] TextField cursor blink when clicked."
"Refactor URI build/rewrite framework for implementing sophisticated rewrite, and simpler configuration. First round of work. For internetarchive/wayback#53, ARI-4033."
fixed spawner camp message bug some message refactoring
BasicTopologyManager refactoring for TCK
XLC-246 XLC-247 Major DAO refactoring. Paging and ordering added.
"[RHQ-2165] [RHQ-1181] Set the REMOTEAPI serialization strategy on all remote commands coming via java remote clients (CLI).  Refactor the name (drop RHQ prefix)  of RemoteClient and RemoteClientProxy and clean them up a bit in preparation of making them used for any java client using remoting, not just the CLI.  Added a couple of remote interface placeholders that will get filled in later."
More refactoring of the extraction engine
"BookKeeper Client: Reorder read sequence for rack aware ensemble placement - Within the same region, we should de-prioritize nodes that are down in the read sequence - When using region aware placement, if all nodes are in the same region, call the reorder method on the super class (Rack aware placement) - Refactor code between RackAware and Region aware placement to remove some of the redundant code"
Mayor refactor; Add asyncronic execution; Improve logs
Minor refactoring of requester and server bootstrap APIs
api_refactor: refactor list hypervisor api
"Finished refactoring view model adapter, cleaned up warnings, added column support (bugs 159161, 159679, 161981)."
"[TACHYON-1520] Refactor TachyonWorker and BlockWorker, so workers are initialized in TachyonWorker"
refactor Android specific ChainCleaner code under AndroidPlatform
Refactor to move calls into ServerService
[SYNCOPE-290] Preliminary refactoring
Minor refactorings
JBEHAVE-265:  Refactored GuiceAnnotationBuilder to be more in line with Spring one.  Renamed @UsingControls annotation.
o Refactored execution event firing
Refactored editor startup into own package
minor refactor in XPathFacade API and added a little javadoc example
refactoring JPAProducer and it's commands
"Refactor Cluster Update REST API. Use /api/cluster/{name} for updating cluster attributes and /api/cluster/{name}/action?state={stop,start,resume} for changing cluster state."
Partial refactor from RPC to Commands -- mostly just broke stuff.
Refactoring publisher Module extracting interface and Imp without CXF dependencies and annotations
"more refactoring, and unify the configuration facilities.  DRY is an important principle."
Refactor to tuning the evaluator performance
refactor the GraphSort to live inside the InjectionContext
Make a little refactor for Olap data access
Some refactoring in tests
"CDX Integration Part 2: Additional refactoring of AuthChecker, formal CDXFilter and CDXAccessFilter Fixes to TimemapRequestParser Support for UrlSearchResults within CDX server embedded loader"
[JBRULES-3668] refactor KJarBuilder and KContainer features in a single class
"TEIIDDES-816 Refactor Common Code Between TeiidAdminInfo And TeiidJdbcInfo Into A Superclass. Create the TeiidConnectionInfo base class and moved ""host"" property to ""Server."" Updated tests."
"Completed refactoring of AnnotatedClass, now fully lazily initialized"
Refactored package mgm to auth
ResourceBase functional refactoring & clean-up Graphity Processor vocabulary refactoring (added some owl:AnnotationPropery)
more refactoring on report generation
Minor refactoring + test for jersey-exporter
refactor printfs
[FIXED JENKINS-27565] Refactor the Queue and Nodes to use a consistent locking strategy
STAT-88: Additional code refactoring; added missing resource bundle keys for pt_PT
Refactor bulk import.
Implemented caching for the lookupParameterNames() and lookupParameterNamesForMethod() methods.  Refactored DefaultParanamer to be easier to understand (less String manipulation and index managing).
little refactor of recovery dispatch as now only used for browser dispatch
Refactored the sauce test class to a base and subclass with test content. Reused sauce base test class to run session id and job-name printing test and checking output by capturing stdout. The nature of the feature being tested forced some unorthodox testing. Also removed build id update from the SauceOnDemandTestListener class to give user the freedom to set their own. In the earlier setup the Jenkins tag was overwriting the user set one causing odd behaviour.
refactored a bit
Refactor advance and move block in stream.
Refactored some tests and fixed #THUCYDIDES-46
"Refactoring tests to use only the Drools 5 API, instead of old Drools 4 API"
"Incomplete - task : Refactoring the JAX-RS Tooling to support JavaElementChanges along wih ResourceChanges, to and fix issues, too. "
#NAME?
1) Refactor/add some methods in the TripPositionService 2) Whitespace
Refactored converters. SampleConverter and implementations wnet into sub-package converter.readwrite. Converter went into sup-package converter.read. Access for both converter methods share common abstract implementations that were extracted from the existing implemenations for SamplerConverter. Added access implementations for Converter. Added Converters class with three basic convenience factory methods similar to Views and RealViews. (cherry picked from commit c89f585ee06ba24cc4d1455288cda4864930f8a1) (cherry picked from commit 2e4de724b091694e25ea5266924259deba47cbb5)
refactoring to consistently use UUIDs where appropriate
core: refactor: use config rather than system property for main router factory settings nad restx.mode
"refactor project structure, break down into api module and httpclient module"
refactor code
"More refactoring of old tests,  trying to remove usage of Module.getModuleUnit()"
"Refactored parsing of Rod/IntervalBinding. Queue S/G now uses all interval arguments passed to CommandLineGATK QFunctions including support for BED/tribble types, XL, ISR, and padding. Updated HSP to use new padding arguments instead of flank intervals file, plus latest QC evals. IntervalUtils return unmodifiable lists so that utilities don't mutate the collections. Added a JavaCommandLineFunction.javaGCThreads option to test reducing java's automatic GC thread allocation based on num cpus. Added comma to list of characters to convert to underscores in GridEngine job names so that GE JSV doesn't choke on the -N values. JobRunInfo handles the null done times when jobs crash with strange errors."
Refactoring class hierarchy
pool: Refactor BerkeleyDB meta data store to enable reuse
Refactor log4j-jdk to make log4j-core optional.
Contacts API refactored for addresses
API refactorings and POM consistency fixups
Delivery part code refactoring: extra sources refactoring for all SBBs
"Further refactoring into client, data and server."
[BACKLOG-1498] Refactor. Add utility methods in model annotation definition
CAY-926 Refactoring class generator classes (replacing CayenneGeneratorUtil with CayenneGeneratorMapLoader to streamline generation flow: refactopring - split into loader and filter actions)
Refactoring of blamer interface. Use actual task listener.
Making refactoring.
* Refactored encoders/decoders * Added support for GeometryCollection
Bobo browser bug fix and refactor
Third round of Pax-Construct refactor.
Created abstraction for markers supported views. Refactored ProblemsView
disambiguation-work -- refactoring in progress
"refactored OAuth, finished implementing delicious sample"
Refactor test
refactoring
Bug 255984 - [planner] [ui] Uninstall does not remove entry from Installed Software Refactoring of actions and wizards to keep track of the resolution operation (and original ProfileChangeRequest)
Updated to refactor functionality out of the WindupEngine.
"Project and Workspace API refactoring. Using central lookup concept to store and share models in workspace. Create additional interface for Project and Workspace information, to clarify Project API. Delete WorkspaceDataProvider concept and adapt existing code to use Workspace's lookup instead. Minor bugfix."
minor refactoring
refactored method
Refactoring
Refactored CategoryImageMap to CategoryImage
[refactor] add more component into picocontainer
started refactoring IsoToIMachine to re-use error handling
refactoring out interfaces and entry points
[refactor] adhere to checkstyle where possible
refactor
refactored resolution of javadoc url
SCRUM-94 - added ToolboxAction.isAvailable() - refactored package structure - introduced ToolboxActionConfigurationProvider - put website workspace actions and columns in separate package - source code formatting
[MECHNET] Refactored generator and generated API
"Refactoring JQueryScript to use Duration, closes #28"
"Fixed NPE when initial contribution not available, refactorings"
Refactored part 3: fixing bugs
FACES-1894 Add general utilities for Liferay Faces Alloy Components (general refactoring)
"Refactor HistoryGuru - move more into the Repositories, and introduce RepositoryFactory"
SCRUM-877: moved and renamed buttons consistently with the previous refactoring 
cleanup refactoring of ASTNodeFinder
Minor refactoring in CodePrinterTest to remove duplication
Major refactoring to the server-side bus architecture. Introduced a new layer of abstraction that separates knowledge about the transport and its behavior from the MessageQueue implementation. It also lays the ground-work for abstracting the difference between synchronous and asynchronous IO.
Minor refactoring
refactoring
Continued major refactoring. More unit-tests and bug fixes discovered in the meanwhile. Updates issue #10.
Refactoring of test-code to support Maven 2 building (bug 2005)
"Formatting, and refactor into artron package"
"UserId long, user-page, refactored ad navigation, disabled url logging, login- transactionlogging, User-Bean added"
Refactor test infrastructure to allow testing against heuristic bushy-join optimizer.
Some refactoring for readability
[PLAT-3794] refactored BlotterColumns into SecurityAttributes (moved to OG-Financial to sit along side Security classes); fixed several warnings
refactored TemplateProcessor to keep a reference to a parent task
Refactoring
Refactoring + Structure
Refactoring. Renamed HomeActivity to DashboardActivity.
refactor loadClass
gh-62 Code Clean and Refactor
Refactored FeedGenerator
"refactor based on Alex's suggestion, make it easier to combine multiple enrich strategies"
refactoring
Refactor the URI standardization to its own method.
Refactoring: Moved getSCCSFile/getRCSFile from Util-class to the correct HistoryParser
more refactor
Refactored buffer growth algorithm Added sanity check for initial memory allocation Removed implicit use of maxMemorySize where buffer length was intended
"Refactored relationships api to interfaces + impls, then split tests into parallelizable classes. I refactored TCK framework into tests + driver interface to make it easier to run from an IDE and debug individually."
[TMPARCH-20] Refactor to org.jboss.shrinkwrap
Create test update + refactor.
Resolved review comments: Refactored processing of TestContextManagers from stop() method to its own method call. Added empty lines at end of files.
"Merged revisions 24854,24862,24946,25411,25418-25419,25478,25699,25701,25770,25832,25834,26401-26404 via svnmerge from  https://www.dev.java.net/svn/hudson/branches/test-result-refactor"
Fixes to have first version of refactored modules compiling.
Refactored the serializer.
"Refactor - move glusterfs-hadoop/* from gluster core repo, update stale code in hadoop-glusterfs repo."
Refactored attribute handling. Fixes #307.
"Revert ""refactor context selectors: extract delegation into ComposedContextSelector"""
Added embedded graphs. Analyzer refactored
"refactored some classes converted query results object to one generic query results object, so we can also use xml results (not implemented yet)"
Did a refactor of the TransportBindingHandler + added a systest for a Kerberos EndorsingEncryptedSupportingToken
minor refactoring
Refactoring: create 'validateParameter' method in 'ValidatorHelperRequest' to validate single parameter Adapt 'preValidate' method to return 'ValidatorHelperResult' type instead of boolean 
Fixing/breaking tests and refactoring.
Refactor into an interface.
Refactor the implementation to allow for custom marshallers and align as per latest requirement doc
ROO-2745: Post 1.2.0.M1 code refactor and clean up - static imports for JPA classes
MNGECLIPSE-810: refactor JDT support out of m2e core plugin
code refactoring (structural) simulator changes:  * introduction of ModelManager * Road model is a Model Viewer changes: * synchronized view refresh * speedUp parameter instead of delay Example changes: * RandomWalker example adopted to above changes Playground: * module for test code
Initial version of refactored PartialInstant
1 Fix search box for individual user 2 Refactoring user login page dispatcher
Framework Enhanced and Refactor
"Refactoring geral nos testes , adicionando Credencial"
Refactored AOP code to allow for other aspect frameworks besides AspectJ to make use of the code.
multiple refactorings; Using getData instead of getTile to retrieve image data (cherry-picked from edc7921)
Some refactoring. AStar moved into separate class.  Tests added for pathfinding and unit move speed. Text context added for testing spring autowired services. Optimized imports
Light refactoring; Updated docs; Moved old classes into attic/
#NAME?
CheckIn:Refactor Data Engine Code
"Refactored rest API and remote service API, so as to allow non-rest usage of IRemoteCallable and IRemoteCallableRequestType"
"Completed refactoring of publication Some services were deleted for redundancy, others were rewritten in a much simpler form Tests were created a priori and are running for the domain methods that were then produced"
MAGNOLIA-3546:  - refactoring: simplified tree/list configuration by consolidating code common to views in JcrView* classes. Removed lots of duplicated code.
refactor tests
refactored media browser to support folders
Bug 270989 Context refactoring
- Added etCommon dependency. - Updated for Bukkit 1.1-R1 - Uses new bukkit event system - Fixed redstone torch output CB1.1 bug - Fixed lever update doesn't apply physics around the output block. - Refactoring….
"Big refactor, had to separate create from populating an object for cyclic references to work."
"Refactor the BAllocThreads, giving parts of it some descriptive methods"
Refactored into a builder pattern.
code refactor
NetworkBasicCapability refactoring
refactored
PRD-4319: Some refactoring.  Moved ResultSetTableModelFactory & ScrollableResultSetTableModel into *.datafactory.sql package.  Removed duplicate config properties from tablemodel config properties file.
Perspective Editor and Apps: some refactorings and now you can remove tags and directories
#NAME?
"https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring in progress. - Classes renamed: VpeVisualInnerDropInfo->VpeVisualDropInfo, VpeSourceInnerDropInfo->VpeSourceDropInfo ."
Refactor for jobs dialog
[ALLUXIO-2743] Refactor ufs related classes
refactoring mocks and requestparser;  Adding more logic to put post
refactor to try to organize the renderer code
"ZooClient knows about the backup service port, so that ClusterManager can see it. Also some refactoring regarding parsing of the backup server port"
Some refactoring for code clarity in ColorMixing algorithm.
refactoring: access mode
Refactored method name for accuracy
refactor package
"Refactored, extracting method getPart."
Reconcile changes from master with StatementRewriter refactor.
More refactoring.
a little refactor
SONAR-8287 Refactor project measures index and WS domain
refactor Report class
adjust remove bar size with dip some refactoring (method names / extract)
"CSPACE-852. Added support in tenant-bindings.xml and in associated scanner to specify authority reference fields in a schema. Added support for ""authorityrefs"" sub-resource, that returns a list of references, and some convenient info for them. Added some RefName utilities to pull apart refnames and produce useful pieces for clients and server to deal with.  Currently only working with Intake (must be ported to CollectionObject and Acquisition). This may benefit from some refactoring once I get the other ports done. To test this work, refactored the base test (AbstractServiceTestImpl.java) so that it is easier to produce tests that do not focus on CRUD (these an inherit from a new BaseServiceTest class (yes, it could use a better name)."
[SYNCOPE-714] Preliminary changes + small refactoring of ConnectorService
Working on createLoan refactoring and test. Moved some tests classes to test framework module.
[PLAT-2271] Refactored MainGridResultsMapper
MAR-1 - Refactor CDS handling in aggregation functions so common code can be reused
"#POULPE-260 Added an application shutdown listener in order to unregister a JDBC driver so that we don't have errors from Tomcat while shutting down.(UPD:  Tests fixed, no more problems with server fails because of listener, several code refactoring )"
"SONAR-8704 Refactor Elasticsearch types ""authorization"""
Refactoring. Moving @Before and @After methods to all tests parent
"[SWITCHYARD-340] Refactored split package, fixed properties and feature dependencies"
RF-13214: refactored Tree model and converters to allow RF4.5 have own implementation
in progress * refactored fit tests to include slim tests * refactored rest fixture to decopule formatter from logic * fixing unit tests
Refactor the document browser. Use Jackson for parsing json configuration files and data binding.
RF-12900: refactored org.richfaces.util.Util to org.richfaces.resource.ResourceUtils
refactor and add some explain
[MOD] refactoring read-method
Completed refactorings/code changes due to serialization changes.
"added addView, dropView, mergeColumns refactorings"
async ops + refactoring
refactoring tree structure
HTTPCLIENT-975: refactoring primary execute method in  CachingHttpClient (mostly method extraction).
testTransaction_refactor
Ticket#5: Refactored classes to follow service provider framework.
Refactored impl with helper functions
minor refactorings and IDEA intentions
refactoring
simple refactoring over MavenLogFormatter and PlainResultFormatter
"Refactor and improve core APIs, alter plugin loading behavior"
refactor
large bout of refactoring: org.springframework.binding packages - forms and forms.support is hosted over here for now org.springframework.richclient packages with plural names were renamed singular org.springframework.richclient.command - ActionCommandExecutor in favor of CommandDelegate (clearer) various polishing / cleanup
Created a 'kernel' component for the Neo4j kernel. This contains the refactored version of the 'neo' component.
refactor EventType (BEWARE)
Shaping up the indexer class API. Extracting main() method to a testing class. Refactoring for better object orientation.
BLC-139 - Refactor StructuredContentType - Changed Structured Content to intoduce an abstraction from content type to content template. - Updated annotations on page template and sc type to better display in the admin.
Added support to search for dependencies in multiple source folders. Refactored FilesystemUtils. Renamed DependencyExtractor to CallDependencyExtractor to make it explicit that it only finds *call dependencies* between classes (for now)
"Refactor core logic to support static as well as dynamic proxies. Need to come up with a better name than ""ProxyFactoryFactory""... Add support for Blob.setBinaryStream(long), Clob.setAsciiStream(long), and Clob.setCharacterStream(long) using OutputStream and Writer proxies. Add configurable input-sink support, including file and in-memory implementations Add IOException factory type. Fix service loading to skip providers with unmet dependencies."
Refactorings to aid switching between native rabbit libs and Spring AMQP RabbitTemplate
Feature #8017 - refactoring the WEB services and the UI to be compliant with the new version of the new calendar engine. - adding some useful methods into calendar model - adding a request cache dedicated to Securable implementations in order to compute entity access flags one time (occurrence entities) - fixing some bugs around the calendar engine - fixing an non UTF-8 conversion - updating angularjs version from 1.5.7 to 1.5.11 - speaking about occurrence instead of event (except the case of event creation) - fixing IE11 problem with disabled directive attribute (don't call a directive attribute as it!!!) - fixing sonar feedback (import & export not yet wired)
Refactored exec-ing of a process from java to use Mike's implementation from the integration tests.
Refactoring of Measures computation and saving Add more unit tests
minore refactoring
Refactored server detectors and removed any product specific code from MBeanServerHandler.
ServiceClient refactoring
Refactored startSession to make it shorter
TRUNK-4971 Fixes and refactoring
Remove draft servlet spec 3 pojo annotation types; refactor annotation processing to make processing of non-classpath files easier (eg for jetty-maven-plugin); take out some debug printlns accidentally left in.
HTML-50: HTML Form Entry module needs to support Problem Added / Problem Removed functionality added tests and did some slight refactoring
Really big data model refactoring.
"* Improved ""View"" functionality so CSV-compatible data types (both file-based and in-memory) are viewed in Excel after conversion. * Also significantly refactored code."
Refactored issues list
Ashish | #00 | Refactoring code
Initial set of refactoring for issue 583
HTTPAuthentication code refactored to allow adding NTLM support.
[MOD] Minor refactoring.
Refactoring Begin Seperating the Source from the Subscription
Refactored CompareTerms slightly to be able to run in tests. Coded up a couple of tests for orthographic usage.
Refactored some of the class packaged and removed the command line nci app as it was non-functional and needs a rewrite.
Refactoring of CIMI model to prepare new collections and
Refactor cloud-plugin-network-nvp project into Maven default structure
"showcase: integration tests stabilization (RFPL-3958) * method for implicit waiting added * AbstractDataScrollerPage: made fields static to avoid warnings from Graphene * push test refactored * tests stabilization for: collapsiblePanel, contextMenu, dataTable, editor, inplaceInput, inplaceSelect, notify, progressBar, status"
continue refactoring - remove groupBOIntegration tests and rewrite tests applicable to customer service
refactorings und Umstellung auf Tei p5 mit <pc> Elementen
Refactored HTTP benchmark; added a basic smoke test
refactoring paging
refactor mbean
Refactor to support PaletteViewer configuration
"Ticket #1146 - Initial refactoring of ReportService.  Mainly addition of method comments and the deprecation of separate create / update methods in favor of a single new save method.  Removal of unused ""getCurrentEvaluationContext"" functionality.  Addition of ""Run Report"" privilege."
refactoring
Intermediate state of large refactoring
Refactored the RouteManager. (More refactoring needed.)
"dal refactory, spread tables to specific projects"
SONAR-3755 refactor comments
Refactor CommonJS rewriting and force script to module rewriting to be normal passes.
Refactor CalendarSimplificationLibrary such that it doesn't depend on CalendarService directly.
"refactoring of package name to prepare for adding of other non-spatial ops, such as classification."
ROO-2928: Post 1.2.0.RC1 code refactor and clean up - consistent field naming
"Refactored the ChartUtils class into opennms-web-api so that opennms-services doesn't need a dependency on JFreeChart. Reduced the dependencies of the remote-poller project so that the install package of the remote poller is smaller, it went from 49MB down to about 37MB."
Small refactoring
Refactore + Parse les essais manqués
Refactoring project folder structure
#NAME?
"Fixed issue 797. This required a quite huge refactoring to the storage API to pull up the version at database level to being updated into the record. Local storage now saves the version as: (version+1)*-1. This allow to know if the record is deleted (negative number) but, and this is the news, with last version number. On recycling the version is computed as version*-1. On remote storage the version now is sent back to the clients."
Refactored URI path resolving to use a UriPathResolver interface. This will make it easier to plug in different URI resolving algorithms.
1) Refactor location of GtfsStopRegionSourceImpl 2) Kill some empty packages
Refactor the bind method and close TcpLink if an exception is thrown.
"Refactoring for better CMD interface, API and documentation."
refactor various shell implementations to be sub packages of org.crsh.shell.impl
Refactor for commandline tools. Ensure Flyway is NOT kicked off during test connections. Refactor DatabaseManager to move commandline tools to DatabaseUtils
Refactored
"refactored, pulled gratuity pre-processing verification to CertificateRequest"
Minor refactor for maven compatibility
removed unique/notunique and lucene version refactor
 refactored eperiment setup improved fetching triples from queries (still does not work properly though
Refactoring of model CIMI : add Interface CimiHref 
Small refactoring
Refactor to better names
"refactoring, moving window"
Bug 511849 (part 2)[Browser] Refactor Browser Listener tests 
Refactoring common base for parsers.
refactor the build detection logic
"Revert ""major refactoring and cleanup; more objects, pass alarm data"""
refactoring bindings
refactor by creating an AbstractXmlDataSet
First refactoring leveraging on utilities and geocore
"fix upload streaming by using commons FileUpload, fix CXF logging, minor refactoring"
A bit of refactoring
HEMERA-2549: Spring tests / refactorings
"1.initial checkin of ReportsDataService: provides the values for loan products and branches of report ""Detailed Aging Portfolio at Risk""; 2.initial checkin OF easymock; 3.refactored OfficeBusinessService.getActiveBranchesUnderUser; 4.changed test case LoanPrdPersistenceTest.testGetAllLoanOfferings to testGetAllLoanOfferingsShouldReturnLoanOfferingListSortedByName: rename and test the order of the returned loan offerings; 5.made ReportsBusinessServiceTest work. <eric/wenjing>"
refactoring and new test
Added BehemothReducer which uses the DocumentFilter. Refactored GATEDriver to use it and removed from GATEProcessor
Refactor updateComplete to markUpdateComplete and move it to AbstractRingGroup
Player refactor Added syncGameMode method Removed GameModeHandler Seperated survival specific code into SurvivalPlayer Signed-off-by: Windwaker <wjcrouse913@aim.com>
Refactor ArrayEvent constructors so that a byte array of max size is not created by default.
Move distinct tests and refactor index creation
"SecurityContext refactory - moved configuration and caching to RI (these should be RI-related as other possible implementations may handle configuration and caching separately, or may not even directly support them)."
Very large scheduler refactor (DDMS ticket 2946).
refactored selection restoration
Bug 434155 - Refactor Server to make it more easily consumable in pieces Separating out authentication - still more work to do to cleanup server.configurator and move authorization logic out of filters and into the service implementation
Getting more unit tests up.  Refactored deleteTicket -> deleteRecord and getTicket -> getRecord
refactor
#NAME?
[refactor] extract classes and move to subpackage
Entities refactoring
[KARAF-2257] Refactore SCR examples
Refactor: Several lists' code refactored. SearchDiplomas and SearchStudents FenixServices removed - the searches are now preformed directly in the actions.
"refactor role validation, configuration validation"
"Refactoring of the template resolution - Try to get template content from tenant folder, then global folder,   then classpath - Generate an technical id (hashcode) for each template instead of   readable id, since it does not have a real meaning"
Refactor H02 protocol decoder
minor refactoring
#232 Refactored RQNT Command to reflect changes imposed by concurrency design.
refactor graph building interfaces
"major abstraction refactor, log4j, and selfish topology added"
No bug - Improve test resources handling in refactoring tests 
Refactor equality & linear equations
Some minor refactorings
Refactoring of the NodeWeight API.
"Refs #3217: Adds 3 new menu items (""Hide unselected nodes and edges"", ""Hide unselected nodes"", ""Hide unselected edges""). Disables menu items that shows hidden nodes/edges when there is no hidden elements. Minor refactoring."
[MIN] Refactorings
Cleaned up and refactored the validation rules.
refactored new field wizard to use AbstractForgeWizard
Major refactor and rounding out of unit tests.  Considering this the first usable version.
docu and refactoring
Refactored duration tests to make it simpler to add new ones. Added a few edge cases to test the replacement for the += 31 code
Locking refactoring WIP
Refactoring notes to other module
Refactored SendSnitchInfo
Core: refactor create operation (#935).
QPIDJMS-191 Refactor the Netty based test server
[PLAT-2271] Refactored grid and viewport Separated common logic from the main grids in preparation for dependency graphs
OGM-1257 Refactor Neo4j test for remote authentication
class rename for refactor
FIXED bug 17256 - [DataBinding] Refactor converters to use ICU4J https://bugs.eclipse.org/bugs/show_bug.cgi?id=177256
Refactoring: separate out Cache.Retriever to top level interface and make Cache implement it too for neatness
o Fixed problem with dual logs during recovery not saving the right log files o Fixed problem with wrong log version getting set in neostore after recovery o Refactored dump logical log tool to use existing code o Turned on the tests to trigger these log issues
more linked mode refactoring
Debug messages and refactoring
"BISERVER-5683 - refactored the domain setting on the ModelerWorkspace to detect a legacy model (created without the separate OLAP LogicalTables & LogicalColumns) and silently upConvert to the new model. Also, resets any Measures and Dimensions to their new OLAP instances of the LogicalColumns.   Added Unit tests around this functionality as well as making sure mondrian xml files export without change following this upConvert process."
Refactoring configuration of logging.
A bunch of refactoring to support SWT-hosted LWJGL.
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
"Refactored Messages, ConnectionWorker and NetworkUtils:"
Refactor.
Refactoring
Refactored bootstrap
Refactored to have only one logic for with or without space morse code encode.
Refactored inventories and update for API changes
add tests for GetWhatLinshere add test sources refactor the action structure
"Refactoring to clean up object hierarchy, add popup handling, and fixing unit tests"
refactoring
code refactoring : user is called customer now
NXP-13721: Refactor pkg4Download to pkg4Install + take into account packages with no filename + handle virtual packages (CAP) + add nuxeo-drive package
Refactored the artifact usage store to map GAVs to nodes in a dependency graph.  This makes it trivial to pull an entire tree at once & makes it possible to render multiple levels of the tree easily.
Refactoring ErrorHandler to use EndpointInvoker.
refactoring
"Refactored items, blocks, and materials all into a more structured materials package as an attempt to organize things in Vanilla (definitely needs a look over to see what we are doing is fine)."
Refactored to use a Repository interface and introduced a RepositoryAggregator that is responsible for coordinating downloads from several Downloaders.
Refactored still more and simplified code where possible
Move I18n to administration category and refactor administration category
[AS7-5121] Refactor messaging transport
"Refactored Renderable implementing classes into new com.rpgsheet.xcom.render package Renamed ButtonRenderer to Button, TextRenderer to Label, WindowRenderer to Window Cleaned up the rendering math in Button Added a label component to button; Button now draws a centered Label on itself"
Refactored HeritableBehavior
Refactor validations
"Changed packages to com.sppad.jots Refactor on construction package, changed visibility"
"repackage unit tests for customers and refactor and add tests around updating customer status (client, group, center)"
general code refactorings
Refactored package structure
Refactoring the TemporaryEnterpriseObjectProvider class into TemporaryEditingContext class.
[MOD] XQuery: Various refactorings on updating and declared return types
Mostly refactorings. Started SecureSocial deployment demo.
"Refactored unittests, added JSONCharsetDecoder unittest."
Further tidy of code before refactoring
ViewModel refactoring
WINDUP-520: Refactor complete. Needs testing.
[refactor]: move log to firefly-slf4j module
POULPE-503 The UserExistException is't used . (Replaced by ValidationException). Removes '{' and '}' from code messages. Refactoring of the code.
refactored to use proper Address class instead of byte []
refactored jclouds-location to separate project
Some more implementation and some refactorings regarding relationship type creation.
JBRULES-2209 Refactor Commands to mirror drools-api
HBASE-2977. Refactor master command line to a new class
Refactored NativeQuery to implements the OCommandRequest interface and to get able to execute it using the db.query() method.
test package refactoring
web monitor refactor
refactor dependency handler
refactoring
Refactored a bit and added more JMX values
Launchconf and project elements refactored to inherit common stuff
XLCLOUD-1200 - Heat models refactoring; added .gitignore
"Refactoring to @AutoWired, Testing added with mock database"
- Eliminate warnings in tests. - Refactor C3P0ConnectionFactory while I'm here.
refactoring
refactoring: renaming java.util.JID to tigase.util.JIDUtils
Make the root folder an IDEA project. Refactoring
closing feature #1154. Refactoring list of publications (using list style instead of table). Adding span elements to permit personalization.
multi windows refactoring part8. some WebView tests on catalog
DLNAMediaSubtitle refactoring (access to deprecated variables removed)
o merge of the maven-embedder-refactor branch into the trunk
Javadocs/minor code refactorings
Refactor ElasticSearchUnitTest
Incremental refactor
more refactoring
bug 7842: events refactoring. Still wrok in progress
refactoring: use (more) spring for dependencies
refactoring and new features.
a bit more refactoring
SONAR-4357 Little refactoring
Refactored the name from address validation to address verification.
Test refactoring in local sync tests
Refactor Service/Server models to reflect etter their scope.
refactored class package to change some of the names of the classes as well as to seperate out immutable and mutable versions of the graphs and edges.
"refactored PA updaters, including a schedule-filler for the complete update"
Refactored tests to help with abort/restart testing
XWIKI-12253: Add a job to move/rename nested documents * Refactor a bit the code so that the refactoring jobs are not aware of nested documents but of nested spaces. * Add unit tests
o Refactored code
Refactored message correlator usage and added automatic correlation in sync communication
Refactors ViewRequest to make it easier to work with.
refactoring
#NAME?
"Refactor and rename registries to have ""fluent"" names when used through the Configurable interface."
"XLC-224 Refactored: vcbsManager, provisioning in virtual cluster manager."
ISIS-130: onlinedemo now intelligently redirects to doc; json-viewer authentication is using HTTP Basic Auth; refactored and simplified the init-params for IsisSessionFilter
Refactor to support re-packaging
Mega refactoring. Artifacts' resolver and bundler have been decoupled from the main plugin Mojo... Improved style and code quality. Removed duplicated code.
Major LinkedDataResource refactoring (splitting interfaces) org.graphity.ldp package for JAX-RS specific stuff
" - a little refactoring, added/finished bootstrap tests"
Refactored test classes
Thiru & Kiran | #543 | Refactored FormSubmissionReportServiceTest.
"Refactored the ScmReport class to handle the SCMs with the maven-scm component. Generates reports for all SCMs supported by the maven-scm-provider component: ClearCase, CVS, Perforce, Starteam and SVN."
"refactoring, added more easing classes, updated example, fixed onLayoutChange"
REFACTOR ColumnsGroupVariableOperation renamed to DJCalculation
"Fixed a problem regarding reflection. There was: getVisible(Boolean) setVisible(Boolean) and isVisible(boolean) the PropertyUtils was finding 1st the last method and thinking there should be a setVisible(boolean), the fix was refactoring isVisible into isNodeVisible."
Some OISC RP refactoring
Refactoring into a SimpleLayout
ARQ-967: stabilization of tests after refactoring
removing interfaces that share the same domain - refactored using generics
"[MNG-1980] Removing the duplicate ID, the reactor will catch duplicate IDs in a single build so it doesn't not need            to be checked for in the project builder. I have removed the model caching for now while I'm refactoring            the project builder. The plan is to break the 1000+ lines down into its constituent components and use            a pipeline to build up the project."
CQL WIP. Refactoring
CheckIn: Refactor data codes
refactoring project
refactored
Refactored USB Controller state decoding. Now Android and Desctop appications are using same decoding API
FALCON-927 Refactoring of entity helpers in falcon-regression. Contributed by Ruslan Ostafiychuk
Activiti Cycle: Architectural refactorings in cycle.
pinmanager: Refactor bulk pinning
Refactoring of serializer and upcaster interfaces
Refactored
NXP-5801 refactor TypesTool
Massive refactoring of entities' types' system; before trying to get rid of ids of floor types and wall types
Small UrlProcessor refactor
refactor builtins -  wip
#742 - refactoring to extract use billing address into own overridable method and ability to use temporary billing address instead of the one returned from the gateway
"PRD-4769 - Refactored report-context handling so that we can replace report instances on the fly, as needed for Undo/redo support on edit-crosstabs"
Refactor a few names for clarity
Huge refactor. Merged in Netty style codec for NATS. Refactored code to use codec. Moved around classes to accommodate codec. There are still some bugs that need to be worked out. Fixed #7 Empty messages result in exception.
Refactor SimpleForm to be able to add multiple components to one row
Refactored tests to use a separate database
refactor
refactored for a better reusability
* add some tests * refactor loading components from JAR XCOMMONS-308: Component related events send Class based role instead of Type based
Refactor LU decomposition results
Refactoring common DbLoaderDelegate code.
MAGNOLIA-1699 : some refactoring and method reordering on UserManager
o Refactoring: Extracted schedules out of DefaultLifecycles
refactoring eval entrypoint
"topic: code enhanced type: other module: deegree-core, deegree-services, deegree-tools description: Started refactoring WPVS related classes."
[fixed] metadata node information with timestamp [refactored] Piccolo2D node rendering; Identifier/Metadata information now usable
"Add ExternalFilenameFactory, and refactor dependencies."
Refactor to use generic nuxeo-training prefixes everywhere + upgrade to 5.7-SNAPSHOT
Refactored interfaces and view implementations
Refactored method Evalutor#getTarget() to Consumer#getTargetField()
ObjectDB refactorings
Another DataManager refactoring... Back to LocatorLinkedData b/c JAX-RS Client/Provider cannot provide base URI for reading Model
Refactor to allow contextual parameters
"Wired up first SQS-enabled test. Refactored non-vendor-specific logic from NevadoMessage to AbstractMessage. Added string serialization to be able to put entire NevadoMessages into SQS body. Created send, receive, and delete functionality. Wired up simple message acknowledgement logic."
misc. refactor
Moved decompilers into their own decompiler module and did a little name refactoring.
Refactoring
"i18n, refactoring etc"
HV-673 Making sure that method validation properly calls traversable resolver  Refactored isValidationRequired and isCascadeRequired. Introduced a shared isReachable. Adding special handling of ValueContext in case of parameter validation
Refactoring to the LDAP Identity Store.
"Refactoring: Moved BaseJettyServerInitializer.java to JettyServerInitUtils.java and changed it from abstract class to a utils class containing static methods And, moved jetty stuff to its own package io.druid.server.initialization.jetty"
refactor package structure
"started big refactoring, created TimeModel, Simulator can only be constructed via builder"
refactors
Addedtemp. method to getting the complete URI to ContainerREquest (will be removed when UriINfo is updated as part of JSR-311). Refactored C14Npath tests and included test with query param.
Refactored String#replace so that nested special characters work.
HIVE-6580 : Refactor ThriftBinaryCLIService and ThriftHttpCLIService tests. (Vaibhav Gumashta via Ashutosh Chauhan)
refactored to make payment more extensible
https://issues.jboss.org/browse/JBIDE-10431 : browsersim should be sexy - added iPhone3 horizontal orientation - added possibility to turn skins - refactored code
More WS-SecPol refactoring
"refactor names and code, added more tests, added javadocs"
"Refactorings, pom generation plugin."
"Loader refactoring: - better progress tracking API (not just percents, but text) - defaultAtlasLoader is one less thread per load and a bit cleaner"
Some refactoring
- Summary: Refactor the TaskSelectType so that the available sub types can be customized in its sub classes (#57222)
correction jsp+action pr consulter seances cinema + refactoring nettoyage. Reste à résoudre le soucis d'affichage des formats de séances
[ENG-85] Refactor security master
A little refactoring
Refactoring: TaskInfoBean - UUID-based Primary Key
Refactor the NumberFormatTest a bit
"First set of refactor to the auto connection creation facility, to make it reusable from other areas in the code (like the cluster node connection creation)"
Refactored the handling of integer properties.
"JBRULES-3606 Project Model and CDI Generation -Big refactor, using synthetic beans and no longer uses generated code. -Handles discovery of jar/folder META-INF/kproject.xml"
moving tasking logic to correct places - refactoring some interfaces
Refactoring task related base types and cleanup
"iterator refactoring, helpers"
refactoring: cleanup
Refactored client to use MVC pattern.
Draft support to estimate count differences between pairs of samples that belong to the same group. Refactor methylation region output to write counts only when a dynamic option is set to true.
minor refactor
Refactoring
"simple query caching, first comparison refactoring"
SOAP-1642 Implement the Request authorized scenario Minor refactoring
Add new algorithm and refactor tests
minor refactorings
small refactoring to eliminate package with only two classes
refactor redux updater
"Major refactoring of APIs, bug fixes, new features"
minor refactoring
"- Deleted obsolete / dead code. - Started a heavy refactoring of the ServiceDescriptionFactory class in order to make it a ""fail fast"" factory to avoid any runtime errors due to misconfiguration."
more refactoring
"hibernate4 : Refactor ScheduleEvent: - migrate the hibernate O/R mapping of entities to a JPA O/R mapping, - add some tests on the DAO"
Refactored outside into outOfBounds
Refactor variables and methods to make it easier to read
Take into account both the refactor of the ContentManagerException into a true Java exception and the DomainDriverManager is now a singleton.
"Added descriptions, added more ways to trigger a request, refactoring"
"[ENG-173] Refactoring to prepare for views which do not reference a portfolio, and generally removing the emphasis on portfolios"
"refactor, improve doc"
refactored tests
refactor for avoid double serialization when remote and server serialier are the same. issue #2148
Mapping class refactored
CXF-5543 Some more refactoring in the jms systests
some refactoring
- [#21] refactored filtering of more than 1h delays - Enhanced EOF detection in case of Excel sheet read
Refactoring Nitro ingest
Refactoring
Minor refactoring
"- add MIN, DIV and MOD; - add Shutdown hook on AbstractProblem - refactor assignments - Tests - [MZN] some fixes"
Refactored indexes to reuse portions of code
Initial implementation of stacktrace crawler for bugzilla; Refactoring of webservice components.
Asyncs.get() refactor
"Java reorg: moved access control classes into new profiles.access package. Note that automated Eclipse refactor seemed to not get this quite right and so manual addition to import list for PrincipalInfo was done in AccessControlManager, GroupManager, and KeyDirectory. Refs #480"
refactor AptUtil#getPackageName
Refactored Exception usage.
refactor: class moved
refactor active unit/player to roserules
BroadleafCommerce/BroadleafCommerce#485  - finalizing cleanup of Payment Refactoring - fixing REST endpoints related to Payments
Code Refactor Fix 456310
refactored EventTemplate class
HSEARCH-750 - break in huge refactoring: doesn't even compile but is looking good
refactor RealtimeChart01 to use SwingWrapper
refactoring properties panel and events
Refactored the resolveGenericType method to external helper class
ACT-506: Refactoring BPMN implementation classes since it was getting a mess
refactor design
refactoring
TFJ-231  refactored Configuration  made HttpClient stateless
Refactoring
feature #5814 : - refactoring and simplifying web parts - using tagIt to display users and groups - removing useless code and properties
Fixes for UI nits and refactoring of XMPP container code
Refactored unit-tests. Logic in getFullBuildModel was duplicated over all test classes. Moved this logic to an abstract class for the tests.
"refactoring, game events addition and jbehave..."
refactored GPFunctions
Refactoring
"Resolves Spec Issue #8: Refactored Caching class, CachingProvider and CacheManager interfaces to support multiple CachingProvider instances with class loader isolation (removed need for CacheManagerFactory) Resolves Spec Issue #87: Removed Caching.isAnnotationsSupported() method."
" SAK-5149, SAK-5081, refactoring qti code to resolve classDefNotFound error, "
feature 001: do some refactoring
"factored out dimension config converter, refactored complex methods"
Significant refactoring to support other primitive types than byte...
"big refactory on the received messages handling; now there's a default handler for each message type, and the subclass may implement just one, not the entire message handler"
Removed singletons. VpvServer refactoring. Created VpvController.
Repo refactoring
"1) ClockActor eliminated. Transaction.executeOn() now has a new Date timestamp parameter generated by Prevayler itself. 2) Rollback demo2 simplified. Just transfer 666 from one account to another and you'll get a RuntimeException. 3) XmlSnapshotManager moved from util to implementation. The util package is only for things build ""on top of"" Prevayler, not Prevayler implementation stuff. 4) Duplicate test classes eliminated. 5) Minor refactorings."
Minor refactorings
Refactor- some simple renames and did away with toLowerCase() on original wkt
#NAME?
refactoring printing framework
NOJIRA refactoring of DocumentWrapper. It is now a generic type. Does not require creating derived types.
"Fixed issue #1683 about providing JSON configuration for modules. Refactoring of packages to move everything under ""plugin"""
pool: Refactor locking of the repository
Refactor test classes.
Finished refactor of jannovar to have sensible names (v1)
[CORE-WEBUI] Image was to big in web ui. Refactoring all downloading system to download only once images and get them it correct size (not too big).
Minor code refactor
updated SubjectBuilder/WebSubjectBuilder implementations.  Refactored ThreadStateManager to be interface-driven (ThreadState).  Refactored code where necessary to call these APIs.  Still debating on final name for SubjectBuilder (mailing list post to ensue).
Refactor the JsonServlet to make the current ActiveCall available
Refactored: extract ByteBufferSequenceContract from AllocatedByteBufferSequenceTest
Renamed RepositorySearcher to RepositoryIndexSearcher and also some more refactoring
Refactored the code
https://jira.jboss.org/jira/browse/JBIDE-6276 - preview for JSF 2 refactoring was created. SWTBot tests were added.
test refactoring
- can now run ANTLR and compile java file in project's document - refactored ANTLR generation and compiler
Code refactoring
Refactoring of content providers for Bug 111425 [Markers] Problems View needs to support a category attribute for markers
[SONARPLUGINS-2119] analysis does not crash anymore because of ndeps. Sensor support classes have been refactored
Refactored to com.google.gwt.query Fixup javadocs Add tests
#NAME?
Refactor loading of VM metrics into re-usable command
Refactor of the Routing Strategy.
"Refactored to change ""bulk entry"" reference to be ""collection sheet entry"". Added a dbunit dataset (acceptance_default_003) for an empty (default) mifos database."
Refactored it a bit and made it more readable
ACT-168: refactored TaskInvolvement to IdentityLink. Added getIdentityLinksForTask() to taskService
srm: Refactor persistence architecture
 Bug 298538 -  Refactoring fails to update model caches
GraphEcexutor refactoring
refactoring
refactor Endpoint domain object to support beans and endpoints
refactor save
finished refactoring
will you be my refactoring?
refactoring
more refactoring
ACT-741 refactoring persistence: refactoring RuuntimeSession into ExecutionManager and JobManager
#NAME?
refactor test domain: namespace + buildEntityDescriptor
DATACMNS-34 - Adapted refactorings in Spring Data Commons regarding PersistenceConstructor discovery.
"srm: revert ""refactor SchedulerFactory"""
Refactoring Specification Loader to do validation by using validators
#1287 - Refactor products and categories to reference a single parent category
MassiveCore - Heavy Refactoring and Command improvements
refactor of json DataSet and Add yaml DataSet
refactored the table code. moved a lot of it into a separate table package introduced a new grid object to manage cell spans
"Refactored GetFeature + added support for WFS 2.0.0 GetFeature, GetPropertyValue"
Refactored back to CommandDistributor
Namespace refactoring. #123
Global refactoring: deleted GraphFactory and Graphs + extracted inner classes of Graphs to toplevel.
"- Changed all prints to log statements in the main package. I've shortened some of the process counter printing to avoid console verbiage here. - Refactored some of the big classes (TermVectorsFromLucene, TermTermVectorsFromLucene) to make the internal state more explicit and the constructor process a bit easier to follow (I hope)."
Refactored to ease development
"Revert ""XWIKI-7879: Refactor to confine delegation of programming rights."""
Refactor the name of both the directories and the artifact ids of the WebSites project and of its subprojects
[MOD] Further refactoring.
REFACTOR: Updating methods visibility
Refactoring to use 1 BulkProcessor per index/type
refactor into a service
Bug 337303: Refactor DisassemblyToggleBreakpointsTarget and DisassemblyToggleTracepointsTarget
refactor all evictors to use an allocator during eviction
refactorings. split up big methods into smaller ones. removed duplication.
"[GSCOLLECT-1647] Refactor CharAdapter, CodePointAdapter and CodePointList to be more fluent."
Refactored render() in MapView to use helpers
Refactor: Rename BloombergHistoricalLoader and its tool component to a name that closely match what they do
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
Summary: Refactoring code.(T54828)
CLOUDSTACK-8537 refactor registerSSHKeyPair() for legibility and testability reasons
Refactor sensor
http://bugs.sakaiproject.org/jira/browse/SAK-3108 refactored EntityProducer to allow it to be used from metaobj
refactor
Refactor QuickStep to use a single data array
"CAY-1479 EntitySorter refactoring: make it DI-based, internalize Ashowood lib"
Refactoring logic for embedded cluster deployment
"Various fixes including refactoring CF console to define console stream content in a new abstraction, handling errors for each to prevent failures in any one streaming operation to affect other log streaming. This refactoring will also be used to stream staging logs to the console on application start up. Fixed various timing issues, cleaned up code with unnecessary operations, fixed 400 Bad Request error when checking for app instance stats. Fixed issue where login failure was not correctly being detected as the exceptions were wrapped in a CoreException. Also fixed error where console output stream were not being closed when an application was stopped."
EST-501: Key tables now are created correctly; refactoring budget calculations; clean up code
"Lots of Code Refactoring + improved segregation into functions for neater code , more re-usability and simplified recursion"
renamed the rule and refactored it to work like the other file rules and take an array of files to check.
"Refactored SyslogParser API back to use SyslogMessage. Changed processId from Integer to String. Made a shallow clone() method for ParserState so that the state is cloned as each stage executes. Fixed problem in Rfc5424SyslogParser where it was trying to match ""BOM"" instead of the Unicode byte order marker (0xFEFF)."
Initial and partial mods for refactoring
More presence javadoc. BrowserModule refactorings
Hello Hazelcast servlet refactored
Refactored filters for performance tuning.
SPR-7812 RequestCondition refactoring with the possibility for custom request conditions in mind.
More refactoring math out of gcode parser.
Refactor of label packaging. Adding weight class for future use.
MIFOS-4305: STAGE 1 - pull out just enough from application along with some refactoring to decouple dependencies to allow build to compile and pass all tests.
minor test refactoring
XWIKI-3205: Non inline MacroMarker is not rendered properly * refactored macro using a boolean isinline instead of InlineMacroBlock/StandaloneMacroBlock and same refactor for events
[Core] 0.10.x: refactored all AJAX-related features
BTC-E refactor move and javadocs
Refactoring of last link to exclude a call.
refactoring: use ampel and matrix factory
Fixed problems with NextMethod() refactor
rsa refactoring
GraphType Selection changes complete. Some code refactoring to remove view-based implementation in first version
"Refactoring in IF/common and IF/techreg: hiding our verbose and mutable format class (now MutableFormat, package private) behind an interface (Format)"
minor refactoring (fixed typo)
TOMEE-212 small refactoring to move the threadlocal where it is needed
"Improvements, simplification, refactoring"
WIP:  Refactoring
Converted rename refactorings to processor/participant architecture
refactor + add Dnd on the editor
"Resolves Spec Issue #8: Refactored Caching class, CachingProvider and CacheManager interfaces to support multiple CachingProvider instances with class loader isolation (removed need for CacheManagerFactory) Resolves Spec Issue #87: Removed Caching.isAnnotationsSupported() method."
package refactoring
made delete refactorings undoable
updated some tests and finished refactoring properties suport
small refactoring
"import thresholder tests, refactory SnmpThresholder -- reviewing with mhuot"
Refactoring code to have 2 maven modules
"refactor, merge ser & deser to codec"
"Backing up, code still won't compile. Refactoring is going well."
refactored some stuff
LocationHeaderTest Refactoring
"Re-introduce a subclass of TreeScanner for matchers to implement. This lets us merge the RefactoringVisitorState and SearchingVisitorState back into one VisitorState, though it now has a dependency on both kinds of listener."
more type support and some utils / refactory
"Add last-hour timing info for servlets, refactoring relevant classes"
"Refactor handleFailures(Map) to handlePartialFailure(Map, Map). Added deactivate logic."
Refactor Jvm backend #502
Refactoring.
[issue 70] Added support for generating Gson compatible types. Changes include: Added Gson dependency. Minor refactor of Annotator interface in order to add GsonAnnotator. Extending an AbstractAnnotator makes creating implementations a tad easier. GsonAnnotator logic only adds SerializedName annotation to fields when it's necessary.
Model refactoring
small refactoring
"Mov ""toTrack"" method to GenomeBrowserTrack object, and refactor GenomeBrowserTrack to AutoValue"
JBEHAVE-263:  Refactored creation of parametrised step to allow lazy parameter conversion.
refactored JavaParameterGenerator
[ymeng] calculator: refactor token parser
Refactored waiting and conditions
refactoring
"ISIS-1182: refactoring ownership of list of services [ABORTIVE: the simpleapp runs up, but todoapp seems to hang?]"
GORA-105 DataStoreFactory does not properly support multiple stores
"Refactored OAuth2Request, AuthorizationRequest, and TokenRequest"
Refactoring of JSON related deferred binding code finished (xml pending)
#NAME?
minor refactoring of pinging
Refactor: inline checkout() method.
refactored localizer
refactored provisioning to be named like other things
"Added a refresh menu item to the menu bar. Fixed an issue with the current implementation of the figurefactory: the defineservice returns a moduleDTO with type ""module"". This only works _well_ with the new version from control which I tested, but am not allowed to merge yet."
o Refactoring only; Separated BooterConfiguration and ProviderConfiguration and renamed both.
Lots of refactoring and renaming to make things more extensible.
Refactored Authorization
ACT-119: Add web service task - Refactor data input and output associations to satisfy simple definitions - Allow disabling of schema validation
Refactored sqlite test
Refactoring: Theme and CssValuesMap
BuiltTemplate removed and applicationBuilder ntroduces applicationSource refactored to provide asset hazelcast upgraded application applicationConfig and applicationBuilt refactored
Refactoring from WebUtils to WebUtilsService: hasParentSpace getParentSpace
"Light refactoring, moving everything into Director"
Refactor implementaton packages of modules to avoid package leaking issues.
"* refactor 4, generics"
Feature #7579 Refactoring of the new Silverpeas Logging API in order to simplify its management. The simplification breaks now the way of work of SilverTrace and SilverTrace requires to be replaces by the new Silverpeas Logging API in the code that uses again it
minor refactor
"Refactored the toCDR() implementation, moving the generic parts to ProtocolAddressBase, and having that call write() to get the protocol specific details written"
Refactor the name of both the directories and the artifact ids of the DelegatedNews subprojects
data-binding: refactoring / cleanup of new @Model support
temp commit to get on with refactoring
code refactoring
Bug fix(s) and refactoring
small refactoring for annotators
Added clientId to loans to associate a loan with a client. Removed productId field from the loan creation UI. Test refactoring to standardize on TestNG asserts.
"File browser refactoring, and toolbar."
refactored mbean name and properties to more comply with https://github.com/hawtio/hawtio/blob/master/doc/HealthMBeans.md#health-mbeans and make it a little more descriptive for users
Bug 471662 - Refactor the run image wizard into a launcher
code refactorings and test fixes after introducing new concept of predecessors and successors
refactor
JENA 625 test improvements: 1. refactor PropertyTableBuilder for unit tests 2. tests and bug fixes for parsing irregular csv table 3. out of bound tests for PropertyTableArrayImpl
120846 [hierarchy] Jar Export/Import with refactorings fails when renaming type and similar elements
Refactoring of the annotation support to make configuration of snapshotters easier.
Huge refactor to create sip-core module to be used by meta-repo and sip-creator.
refactored ListHandler for path handling
Refactorization of method retrieveUser
HV-433 Refactoring test and adding a new test for method level validation
"userportal, webadmin: refactor use of PatternFly grid classes"
refactor
Refactor the @record processing code (after cl 108737076)
refactoring
"A lot of refactoring, moving code and reorganization; When trying to activate a circuit made of invalid block types a nice error message is sent; Renamed RedstoneChips.getPrefsManager() to getPrefs(); Many new lines of code making sure chunks don't get loaded unless necessary; The coordinates of all chunks used by a circuit are saved in the circuits file; New /rcsel list command prints list of all active circuits in the selection; When saving circuit states each circuit is scanned to make sure it's structure is intact; Changed plugin loading messages a bit; Rewrote command handling to use a separate class for each command; Fixed a bug where left-clicking an empty sign would throw an exception; /rchelp now uses pages and the command description looks a bit better; Fixed wrong number of lines used in /rcchannels;"
SGF-376 - The GemFire WAN GatewayHub support needs refactoring and test coverage.
Credential Management support for both LDAP and JPA stores. Code refactoring.
"MAHOUT-139 and minor MAHOUT-137: Vector improvements, some utilities and some minor refactoring of common code in Cluster and Canopy"
Refactored
release 2.3.0:added missing documentation and refactored a bit of AdamViolationsDecorator to make it more clear.
HV-181 - Refactor ConstraintDescriptorImpl
core: refactor: renamed methods of ObjectCounter
refactor view
Refactored the code so that DataDrivenTestRunner as well as SpringTestRunner share the common code. This will make the life easier when we add/modify/remove things that are common to both the runners.
Refactored method signature for BroadcastService to use customer ID Updated the MVC controllers to extend a common base class to allow common model injection
FACES-1563 Develop jsf2-login-portlet demo for 3.0.x-legacy branch (Refactored 3.1.x branch in order to keep LoginBackingBean the same in all branches)
MOAR LDP Resource refactoring...
re-refactor the Event Filters... ensure they still work with EventFactory the current implementation of the eventList
Going on with the refactoring. found a difficult point with the node-ops mapping
major button refactoring
Refactoring to support both Jackson versions at the same time
HAMA-903: Refactor Queue interface and implementations
"Add setDiskAutoDelete to InstanceApi, Refactor AttachDisk."
NOJIRA: additional code refactoring
"oops, fix local-only refactorings"
slides reader refactored moved to api.io pacakage
Refactored: GC option modules
refactory for better layout
Added new class Utils with input validation methods. Refactored CommandLineTools methods to use Utils. Partial implementation of method fecho in external_IO.
XWIKI-3497: Add support for Opera browser * Added a custom selection implementation that queries the selection object instead of the range object. Also refactored a bit the tests since most of them required the same setup.
httpd: Refactor transfer collection
Refactor the name of both the directories and the artifact ids of the SpaceMembers subprojects
ROO-2100: Refactor the GWT add-on so Services are not passed in via GwtMetadata's constructor
"fix Annotator dependency resolving, refactor names for readability"
Moving all helper class to CDIBase instead of CDITestBase + refactoring QuickFixTestBase
removed package *.repository.wrapper & some refactoring & cleanup
refactor broker-service
Refactoring the repository content factory
Refactored operation execution logic into DatabaseCluster
"Refactoring of init method, removal of unused methods"
Refactor FindNodeVisitor and fix some autocompletion bugs
Taint detector refactored to a hierarchy of classes
"Move to 1.5.0-SNAPSHOT, refactor packages"
[102404592] Refactor to CloudFoundry Branding extension point to allow programatic contributions for Cloud Server Urls.
"-dlna services -location filename refactor and restructuration, safe algorithms to the file system forbidden chars -webapp refactor (separation logics-jar webapp-war)"
Refactor testing for bundle metadata
ensureSession refactor
Slightly refactored the Parser / Command Executor backend
Small fixes to ?s? and then fixing the refactoring shit from eiki in the report inputhandler
"fixing build issues on Java6 with type inference, update to guava 13 and start refactoring of vertices and their storage"
refactored dendrogram tree interface
Added basic logging using slf4j. Refactored package names.
mappings refactored
"Improved performances and precision of the occurrences finder, which will improve: - the refactoring - the hover - the occurrence highlighter - the search"
"refactor namespace to new name ""errai"""
refactored code.
Refactor all: Simplize internal API to developer.
Refactoring here and there.
Refactoring Raw Implementation of Meter Mapper  and Reducer
Various refactoring to accommodate outbound messages.
-Refactoring getmaxA() --> getMaxA() -Refactoring getmaxB() --> getMaxB() -Refactoring getmaxC() --> getMaxC() -Refactoring getmaxD() --> getMaxD() -Refactoring getmaxE() --> getMaxE()
Made refactorings according to:  * http://lists.neo4j.org/pipermail/user/2010-January/002349.html  * http://wiki.neo4j.org/content/Component_Naming
Issue #1629 markDirty and release methods were refactored.
Refactor REST api to reflect emphasis on root resources and content negociation
"Added copyright headers, did some name refactoring for consistency"
Refactored the plugin so the main logic can be used by other SLD providers such as external tools.
Refactor the class EndDateCommunicationToCustomer to be EndDateCommunication.
Refactored Datastore.
Refactored FieldHandler classes for better code reuse.
Massive tests refactoring result checks now performed using Sesame introduced helper class unified test structure test filtering moved to SPARQL queries
refactor Table.refresh() to make it more straightforward
gplazma: refactor unit tests based on BDD
Refactored
Fixing a technical problem around organizational LDAP / GROUP applications by refactoring a little bit (but it is not yet heaven).
made some refactoring and tests
MathAssess extension now updated and refactored
"More API cleanup inside the provisioning code. Separated the MINA-specific code from the AsyncBasicDetector code. There is no change in functionality here, just refactoring."
"refactored notifications to core, turned services into components"
Bit of refactoring
refactored and enhanced tests
"o Refactored mojo/plugin generation, extraction, etc. to accommodate multiple mojo languages. o Tested with java mojos, mboot to verify nothing broken by refactor. o TODO: Add marmalade support tests...currently only java-mojos are supported in mboot2, so this isn't going to interrupt things. o TODO: Once marmalade support is tested, add to the list of artifacts built by mboot2."
"Refactoring of Model2Code Added generation for NodeTypes, ChannelTypes and GroupTypes Tests suite engaged. Not really completed."
refactoring: cleanup cluster class
Refactored EndExecutionOperation to better handle scoped executions. Added a test with a timer that doesn't fire that didnt work before.
HBASE-7110 refactor the compaction selection and config code similarly to 0.89-fb changes; REAPPLY v9
Fix a bad refactor.
Refactor large amounts of code. Improved readability and maintainability. Split last friends generation phases and serialization
big refactor
Refactored WarpFilter to expose request processor and lifecycle out of filter itself
"1/Set chouette object as Root Element in replacement of type => ASK CONFIRMATION 2/Add entry points for AFNOR format exports in ExportManager. 3/Correct precedent conflicts merge : restablished internationalisation (and and a forgotten message) 4/Add 2 tests for AFNOR exports, one with a well-done format, in export unit test, the other with a bad enum value of user mobilty, in validation test. Note : begin test folders refactoring, creating a folder for input and output data"
Refactored: Fixed license plugin issue.
Refactor: [Renderers] Calling the getRenderedObject() method from FenixDispatchAction no longer requires a cast to the needed object type.
Fix unit tests and refactor ThriftJoinLoaderImpl
"Subversion 1.7 support, refactoring (work in progress)."
refactor
Refactor UcmCommon code to ClearTool calls
DS-2701 refactored jspui request item
Refactor.
BusHandler refactoring
refactored some validation packages
refactorings of generator package
Refactor abstract processor
Refactor to allow BLC to run without the CMS module
refactoring;
"CAY-1873 final cleanup   - generics in DataRowStore and related classes   - rename default event bridge to NoopEventBridge and check for it in DataRowStoreFactory   - return ""shared cache"" checkbox for DataDomain in Modeler"
missed test class during refactoring
"refactored content provider, label provider and link helper; added open action provider; refs #329"
Refactored sources.
Big package refactoring to fix tool dependencies on the dao layer and ensure they are no longer possible
Refactor all NGgram analyzer classes to use dependency injection
"207185 [name guessing] Refactor ""Extract local variable"" for parameter value should suggest the name of the parameter for the local variable"
Refactor common code to abstract Display class
Refactored the directed and network subpackages of graph into the main graph package.
Refactorings
A lot of refactoring to support a more flexible handler architecture and creation-time method building.
Start refactoring the Tosa API more aggressively by moving logic off of IDatabase and onto IDBExecutionKernel.
refactored RuleDetailsJPanel
refactor run class
SONAR-3959 Refactor existing notification-related code 
IDEA-plugin-friendly refactorings
start on refactor fromJson for setting ones with a temporary id
Refactored a bit so that the check bit can be calculated too directly
Model refactoring for simple xml binding has been done.
Database assertion refactor.
"code redux, refactored"
Agilo #44 - More refactoring of content sources -> content providers and adding in hooks for retrieving repo information.
refactor names
Starting to refactor derivative visitors
Small refactor
refactor : filesystem.stream
HTTPCLIENT-1156: Refactored NegotiateScheme into separate SPNegoScheme and KerberosScheme implementations; deprecated NegotiateScheme and related classes
"Initial import / export refactoring and cleaning-up. Re-worked ExportData and subclasses to make them handle persistence directly, removed PersistedExportData. Started simplifying ExportPersistenceManager, might need some more cleaning up to better handle persistence use cases."
refactor code
Controller refactoring
"JBRULES-720 Clips Parser -Working on creaet$, not yet finished -In the middle of a broken refactor"
core: Refactor SchedulerUtilQuartz
WIP AutoTune refactor
tiny refactoring and include some map interfaces in javadocs
refactored the example to match the name 'example' rather than 'sample'
Refactoring.
Big code refactoring. Added shrink/expand thread functionality
CDITCK-439 add default constructor and some injection point + minor class name refactoring
Refactoring while investigating JIRA JMOCK-202
"FELIX-1107, FELIX-1109, FELIX-1110: refactor the deployer into its own module, add a blueprint deployer and extract the features deployer in its own module"
"Added retrofit module, refactored sample for retrofit. Tests are missing (actually wrong)."
This is pretty much a complete refactor and rethink of how this thing should work.
"lots of improvements around versioning, major refactoring"
"[CXF-5902] Refactoring Jwe helpers to better support diffent key encryption algorithms, more to follow"
Refactor some of the packages
slight refactoring
Refactor of the partition refiner classes to remove redundancy
refactor and javadoc
Intent: refactor the way to generate popup menu (issue #32)
"Serialization refactoring, preparing for HtmlSerializer"
Refactoring for multi-tenant compatibility
refactor
WFLY-2422 Ejb client descriptor parsers refactor
#NAME?
Refactor QEvent.
refactored out AHC factory from test sources to main so that clients can use the DSL
"More work toward STS-614. TypeHandlerCache is now even more general-purpose and includes the class hierarchy scanning capabilities from DefaultFormatterFactory. Hierarchy scanning can now be turned on or off, as required by DefaultTypeConverterFactory. DefaultFormatterFactory has been refactored to use TypeHandlerCache with hierarchy scanning enabled."
Further refactored parsers.
Refactoring org.bestgrid -> nz.org.nesi
Refactored TokenInfoDictionary and introduced AbstractTokenInfoDictionaryCompiler and moved per-dictionary compilation things to a compile package. A few other minor cleanups.
refactor DTO
re-refactor the Event Filters... ensure they still work with EventFactory the current implementation of the eventList
"separated reward types into material, entity and custom misc. refactoring"
"Refactored index building methods in OWLOntologyImplInternalsDefault; LockingOWLOntologyInternals now locks on index creation, so no duplicate effort is made."
"a few refactorings, as well as adding support for the latest change in the spec, which now assumes that a consumer key is passeds in the auth request and response."
Support for XML fix. Refactoring.
"refactor ProgramLoader, RunProcess to remove static state"
Massive refactoring / merging. Untested + likely broken.
Refactored the layout of EocNetwork
77622: Invalid problem report when renaming statically imported field [refactoring] [rename]
#NAME?
"STAT-94: Additional refactoring, fixed resource bundle location"
Refactor for trying to fix [HUDSON-7323]
More refactoring.
ItEr30S04XestionDaComunidadeItEr29S04: Refactoring task to replace <grid> by <newdatasortablegrid>
refactoring: separated the app config from the use of Config class in triggers and commands. Now AppCOnfig class is guice injected and it's not an xml file anymore but just a java properties file
Refactoring. Parsing was improved
refactored by moving plist stacking to PList - even though really a builder class should be created and a factory for PListObjects from strings; added Base64 support;
diverse fixes and Refactorings as well as several comments in javadoc
refactoring proxifiers
more refactoring
core: Add/update VM Pool commands refactoring
Refactoring to avoid duplication
jpaManager to PersistenceContext refactor
TEIIDDES-1059 Third pass at XML File importer.  - Refactored Flat File version as well. Moved Parser/settings dialog to wizard page.  - Changed concept to only import ONE data file at a time  - Made XML and Flat File separate import options
"Refactored frequently repeated service config (provider,credential etc) into new class BaseVersionedServiceLiveTest and used it in BaseCompute, BaseTerremarkClient and BaseVCloudClient live tests"
"Refactor Shell API, which is a lot."
refactor
"More refactoring. Some parts of this may need to be revoked later, but for now it's better to commit them than to throw them away."
Added Behavioural patterns for IA. Had to refactor Actions. Fixed a bug in SkyDomeRenderTask where no size was given when loading uniforms. Other minor fixes.
"XQJ: ""serverName"" and ""port"" added as dummy options. Main project: minor refactorings."
#374 - Add @History support with MySql - refactor extracting DbTriggerBasedHistoryDdl
Various refactorings to remove duplication
Refactoring code so that it can be tested easier
refactored javassist-based template builder
Did some refactoring of code related to testing and introduced some flag variables to make it easier to run specific tests
[REST Proxy] Refactor project structure
Refactoring of the concrete implementation class names.
Refactoring
Add support for /proxy URI and refactor session check.
samples for integration modules refactored
WIP action name refactor and reltive jsp alignment
Probability Evaluator refactoring
Fix ImageMosaic Metadata pubblication and Encoder refactoring
o Refactored repo aggregation and tracked mirrored repositories
[TEST] Added unit test for MetadataService class  - Refactored MetadataService.java and MetadataServiceUtil.java (useful for unit testing mocking )
Minor code refactoring in get target charset name 
JDO configuration. Package refactoring.
Refactored the Coding checks
"Core: refactor instantiation, pt.2 (#935)."
Some refactoring before adding modules
generics refactor. some unresolved test failures
Refactoring of functional tests to remove horrid static dependencies. Introduced a server builder to deal with it instead.
Monitor refactoring
refactor move
refactor sql parser about the desc and explain parts of the code
refactor on cacherecordstore for expiration time for wan replication
"Refactored to which methods the configuration options are sent. Moved options from ""options class"" to ""action class"". Added TagHandlers (similar to Taglets). Support for outputting class fields when using the StandardDocumentCreator."
lots of refactoring
refactor 
"Restored working behavior and removed compilation errors, after database refactoring."
refactor to use latest bukkitutil version
Refactored names.
Refactor database pool helper to a fluent interface
AIP Work:  Bug fixes to Group Restore process.  Split the 'PackageUtils.crosswalkDefaultGroupName()' into two separate methods -- 'translateGroupNameForExport()' and 'translateGroupNameForImport()'.  This fixes a bug where occasionally a group would be created twice.  Refactoring around those changes. Also resolved a bug where current Admin user (who is running restore) would be removed from Administrator group during restore (if that user didn't previously exist as an Admin in the system).
DDF-3071 refactor how function factories are handled and add divisibleBy function (#2088)
Completed the first stage of refactoring PDE option pricing
state manager refactoring
element visibility configuration via Solr schema This really touched a lot of stuff had to refactor the analysis chain quite a bit
 - fixed gps likelihood bug  - removed some multi-threading  - refactored movement model methods  - adjusted likelihood terms
"MONDRIAN: A bit of refactoring. Rename Exp.resolve(Validator) to 'accept', and all of the Validator.resolveChild methods to 'validate'. Introduce FunDef.resolveCall(Validator,FunCall), which allows us to remove FunDef.getResultType() from the interface, and also allows us to remove some special-case code."
some refactoring
refactorings for checking free space in hotfolder
Refactored several methods for owner-product querying
ItEr21S04ArquitecturaServidorItEr20S04: Refactoring tests to increase readability.
Ticket #19: EXPERIMENT: Implement a CDI Portable Extension for Apache Camel  * Threw away code that is not needed anymore.  * Slightly refactored package structure.  * Finished implementing a basic but working CDI Portable Extension for Apache Camel.
"Moved fullyAuthenticated check from  StormpathWebSecurityConfigurer to StormpathWebSecurityConfigurerAdapter in order to have user overrides take precedence, but still have everything locked down by default. Refactored tutorial code examples to all use stormpath-default-spring-boot-starter. Added config properties to disable Spring Security for the first two tutorial examples. Updated all SpringSecurityWebAppConfig in the tutorial to have the minimum configuration necessary."
RequestContextHolder implementation refactor
refactoring for better and consistent package structure
refactoring
refactor to make tasks more orthogonal; needed for cebu
Refactored OWLOntology implementation to move imports logic out
"XWIKI-4068: Allow the page to link to to be searched for or selected from the most recently edited pages * Added search tab in the link insert dialog, with needed service functions XWIKI-3991:  Livetables don't work when edited in the WYSIWYG editor * Changed wysiwyg input template evaluation to the 'edit' action so that javascript transformations can detect it and not make changes on the DOM which would be saved by the wysiwyg * Ensured that 'rel' attributes are tranformed in 'target' attributes only in view mode Adjusted the getAttributeNames() DOMUtils function to eliminate all object and function attributes, to eliminate custom properties on IE, along with a test for this. Refactoring of the wizard step names for image and link to follow naming conventions."
"Refactoring, cleanup, removed unnecessary find tests, isolated tests requiring @transactional for lazy fetching."
Refactoring
Refactorings for 5.0.0
Refactor importer
Refactored WhileyFile Opcodes / Expressions #768
Refactor equivalence configuration for readability
Improvements on GeoPlatform OXM Google Parsing Add Spring Support TODO : Add same improvements for reverse geocoding and refactoring GeocodingBean model for all properties in the xml
fixed broken factory descriptors (after refactoring)
refactored to allow tracker start either as a controller or standalone
[REFACTOR] Let MetaDataService retrieve the metadata information.
Added Jobs and refactored Context model
Refactor magic string into a constant. Oops created sanity test in the wrong module.
#NAME?
Variable importance API refactoring.
api_refactor: admin apis for vpc
Refactor EntityWidgetBuilder to JspEntityWidgetBuilder.
refactoring of class / package layout.
Refactor Rx tests to avoid the use of blocking operators.
Minor refactorings.
"HIVE-15392: Refactoring the validate function of HiveSchemaTool to make the output consistent (Aihua Xu, reviewed by Chaoyu Tang)"
"Refactoring FailoverTargetsSelector a bit to make it simpler to customize it, based on the feedback from Jacek Obarymski"
Bug 434155 - Refactor Server to make it more easily consumable in pieces
Package refactoring in geoplatform-configuration module
Refactoring Bank/Card classes
+Cleaned up pom.xml and fixed snakeyaml dependency. #Refactor: me.neatmonster --> net.xereo
Refactor: me.neatmonster --> net.xereo
Le rabais d'impôt n'est plus spécifique à Genève. L'IFD a un processus de rabais également depuis 2011. Refactoring des classes de rabais
Refactoring Button Example Page
EST-1068: refactors InvoiceServiceMenuAndContributions to use multi-select
#NAME?
TFJ-397 refactored UserStreamImpl
https://issues.jboss.org/browse/JBIDE-8147 - update junit tests -> check Hibernate Configuration & code refactoring
api refactoring
Refactored graph so that it actually shows warnings by user and priority.
srm: Refactor Scheduler#schedule method
Refs #1969: Improved VizMapper editors and renderers: better tooltips; discrete property editor is now sorted and can have the value set directly by double-clicking any element; font cell editor is now a simple combo box; icon renderer is better aligned. Some code refactoring.
refactoring - moving helper stuff to separate package
Refactoring
"Refactored OMP, OMI and Webapp to work with updated POJOs. Added updated services in OMP for sending and querying messages.Updated OMI and Webapp webservices. Added service methods to OMI for Processing requests and retries."
Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
Refactoring while getting ready for mixin reference elipsis #288
Refactoring of #309
Regex utilities (alarms) refactored for reusability
DefaultShowlet child name in Page model refactored (and test package renamed)
Refactoring of serial/deserial entities
"Refactor: removing reSetMaximum method, this removes some not needed loops so it increases the efficiency and the code is understandable"
"NOJIRA: Refactored -> renamed internal 'magic*' methods to more descriptive ones. Sorry, I can't live with the obfuscated names like this :-)"
Experiment Evostar2016_Utils: clearing output and refactoring
Refactoring of WebdavClient creation and setup
JBRULES-1408: Refactoring of ruleflow to act as a pluggable process engine
Continued to work on channel refactoring
"ICE-8094 - Added staticHeaders table scrolling parameter. Refactored DataTable rendering to combine scrollable and ""regular"" table code paths. Added static helper classes to modularize independent sections of the rendering and reduce the 1200+ lines of code in the DataTableRenderer. "
Refactoring model packages
separate result sets from populations; refactor raster populations
refactoring
refactoring Solver
refactored logs packaging
Finished refactoring parametric VaR
Refactored: test readability
minor refactorings in the BDD viewer
refactoring.
Major refactoring done for Generic DAO
Class name refactor+aspect test fix
Units Domain Refactored. Create Unit Subclasses.
Some refactoring to the LDAPIdentityStore.
refactored LiveTest code to share property initialization
refactor sql parser.
Refactoring of testcases
"fix issues with jdbi transactions in AccountDaoWrapper; move tags and fields to util for use in subscription, etc; refactor Invoice to use Entity stack"
refactored design to optomize constant running of hash scanners
mock refactor
refactoring OpenIdAutoRegisteringUserDetailsService
Continued refactoring of the calibration class and addition of additional analytics and tests for handling through life evolution of trades
"track validationtype as part of selected entity model and use that for generating the preview, along with minor refactoring related to this. Class hierarchy tree is also now only single selection (since the underlying model doesnt support multiple selected items and just chooses the first one"
Refactor for v2.0
api_refactor: refactor account apis
[refactor]
"PR 58 review (last one): rename score2 to optimisticBound/pessimisticBound + hardcode level sizes in tests (in tests this is fine and even encouraged to make them more readable) + refactor Score.parseScore to Score.valueOf + use exact primitive types (-7L for longs, -7.0 for doubles instead of just -7) to avoid casting surprises"
[refactoring] Better method name (thanks @tmortagne)
"JavaDoc, configuration options, refactoring"
Refactored
Image generator refactoring
chore(engine/test): refactor tests to JUnit 4
big hibernate refactor
TEIID-1199 update to security naming.  this is not a deep refactoring - it only changes what is exposed.
"refactoring of NIS operation for Create, so other NIS operations can share common methods."
Refactored the strategy to be a static variable on the generated MdTerm.
NewTracerAnalyzer refactored
refactored Xslt/SchematronTransmogrifiers/Validators made Xslt/SchematronTransmogrifiers configurable Added xslt()/schematron() extensions to transmogrify() Added many tests
1) Refactor location of TimeBean 2) Create new DateLibrary with common date functionality 3) Make date library unit test work in any timezone
refactored CsvReaders to have abstract CsvBufferedReaderMultiline and than have subclasses implement the 'reset'. Now both 'molgenis' and 'xqtl' pass tests
converter system refactoring from community input
fix(batch): refactor test
Refactor the entire login panel to avoid reloading the module
improve - refactor api
Refactorization of GerritTriggeredEvents
refactor some map proxy support methods
"yet another refactor, add ASF license"
"refactored readers to two separate kinds - bulk and metadata. the bulk reader can only fetch all values, the metdata reader can first be queried for the metadata and then each single value can be queried separately"
Done with changes for making gatewayService as a bean. Refactored code by adding methods to appropriate Services.
Refactored packages
webadmin: VLanPanel refactoring
#15 - Refactoring and testing AbmConfigurationHelper
Refactor to avoid unecessary instanceof call
more refactor
Issue 54: refactoring project structure to multi modules separating Jersey and CXF dependencies
Miscellaneous refactoring.
Refactoring Twitter source into examples artifact
Refactors the package serialization format
Completed refactoring of build part (not yet lookup part)
Minor refactoring.
"[SPR-8386] SmartContextLoader enhancements: - introduced processContextConfigurationAttributes() method in SmartContextLoader SPI - refactored AnnotationConfigContextLoader, AbstractContextLoader, AbstractGenericContextLoader, ContextLoaderUtils, and TestContext implementations to take advantage of the SmartContextLoader SPI, MergedContextConfiguration, and ContextConfigurationAttributes - deleted ResourceTypeAwareContextLoader - deleted ContextLoaderUtils.LocationsResolver and implementations - moved context key generation from TestContext to MergedContextConfiguration"
refactor code
[test] new: JackieTest; refactored BugTest
major refactoring
Big CQ Result: Created a DiskBufferDriver that can be used as custom query result. Changed GDMS format with backward compatibility. Driver has been refactored to obtain a library that is used on the DiskBufferDriver
SONAR-5417 Refactor existing batch WS to more easily add a new action
Refactored names of classes and packages
Refactored ObjCObject.toObjCObject() to make sure we always return an instance of the expected type (or throw an exception if there's already a peer which cannot be replaced). Also fixed a bug in ObjCObject.removePeerObject() when the peer instance in the peers map isn't the same instance as the one being removed. (#821) (#954)
Refactored filter paths code to reusable widget.
#NAME?
Refactoring of dependency auth libraries.
Code refactored and updated to be compatible with newer m2e versions
CARBON-15588: Improving test coverage in TransportManager.java and refactored.
Bits refactoring
Assertions refactoring with custom assertThat
#NAME?
Further refactoring code [AMECHE-327]
stupid eclipse - trying to get this fixed - the renamed/refactored classes
Progressing on the refactor.  Added new abstractions and continuing to work on the resolver piece.
Refactoring to support Dropwizard approach as part of a larger simplification operation
refactoring project services api user entity dao+rest+test
Code refactoring
refactorings
"Refactor code: simplification, and avoid findbugs warning"
o refactoring package: test implementations
HBASE-12735 Refactor TestAcidGuarantees so it can live as unit test and as an integration test
LOW / Refactored ModelObject selector
Refactor Data Project
Refactored: removed EntityReference caching from EntityManager
core: refactoring of HostSetupNetworksCommand
reload testers refactored
Added tests for usage job. Some refactoring to package structure for core jobs. (v1 TK-11257)
Refactored BoardController and BoardModel classes.
Refactored the classes needed to run an ActiveMQ JMS client out from the activemq-core module to the activemq-client module.
#628 - Refactor Clustering - extract ClusterBroadcast implementations (TCP and Multicast)
SMR-16 changing the velocity version back to 1.4 Velocity 1.5 is slooooooow! Some tiny refactors.
"Refactored the source tree, added log4j.properties to control Log4j"
fixed issues with tab indentation; refactoring
More testing and some more refactoring
"CDX/ZipNum Refactoring * Added AbstractSeekableLineReader, made SeekableLineReader interface * Added support for getNthPage() to ZipNumIndex * Sorted text file supports binary search with custom comparator"
Some more refactorings (html/plain)
Refactoring Logic from Property classes to Property Factory #76
Huge refactoring for wikibrain!
Refactored StringToOpenTypeConverter in order to reduce complexity.
"Bug 384380 - False positive on a Â« Potential null pointer access Â» after a continue - prepare by some refactorings, no semantic changes yet"
o Refactor FileLockManager injection/service location
Refactoring
"Fixed a bug with filter placement in OpSequence. However, I fear the restriction object needs to be refactored to make it fully working."
Intense refactor of jhn.wp package
DDF-285 Refactored first iteration of cache implementation.
some refactorings
refactored and exposing some JMX attributes
minor test refactoring
bug 153575 - refactor actions
"Refactor limits, solver (+ add javadoc), search loop,"
"refactor, use Project and Settings classes"
Removed references to 1.4.1-SNAPSHOT in the develop branch - it should always be develop-SNAPSHOT (this was causing build errors) First cut of the refactored code to support a clean connect()/disconnect(). Refactored getExchangeEvent() to remove parameters. Introduced an ExchangeServiceConfiguration implementation to allow additional configuration outside of the ExchangeSpecification (allows for multiple instances of queues targeting different indices)
Add html template support. Refactor configuration keys.
Move to new package - idea is failing to do this at the same time as refactoring
"Convert Fuzzy KMeans to CLI2, hook in random initialization option, refactor random stuff slightly to improve consumability"
Refactored configuration to private methods
refactored startFlush(); added additional startFlush() method
Refactor Hide Topic (no deadlocks) (#1073)
"Import modules refactoring and renaming. Rename ImportStandard to ImportPlugin. Merge ImportContainerStandard to ImportAPI. Reorganize ImportAPI packages, create SPI. Rename ImportProcessorStandard to ProcessorPlugin. Merge DatabaseStandardUI with DesktopUI. Minor refactoring on Import with deleting ImportException. Update ImportAPI dependencies."
refactor state country to create their own service/dao
refactoring - moving helper stuff to separate package
Refactored the MonochromeBitmapSource hierarchy to share a great deal of code and shrink the derived classes considerably.
Refactor registration API.
Refactor List Instances in Service Operations
refactor Navbar
"Refactoring Instantiator: teased out a new, more cohesive Instantiator"
refactor
refactor search-elasticsearch module to support ES repo decoration
Do refactoring
Refactors ExtMockito into two separate classes: ExtMockito (now in test-util) and MockitoPersistence.
Did some refactoring and excluded assignments for which no student has a grade.
Refactoring and StaticInfoDao javadoc improved
"Refactoring of core parts. Created interfaces for event handlers, application initializer, removed obsolete basic event bus. Now root event bus extends child event bus, no mistakes, it is fully logical. TODO remove layout and header, make it more abstract"
Major refactoring of .dao package. Break up PermissionDao into PermissionDao/PermissionService. Open the way for alternate or even composite implementations.
refactored duplicate code
"No caching yet, just refactoring to prepare it for caching the shapes."
minor refactor
initial changes to MemoryRealm/PropertyFilesRealm refactoring (in progress)
Code refactor
Refactoring: Automator => Mechanize
Refactoring plugins to be session-scoped pt. 1.
Minor refactoring: add ability to MathUtils.normalizeFromLog10 to not go to linear domain but just substract max value from log values and return. Use this function in snp and indel GL computation.
Refactor a bit the template metamodel
refactored DeploymentEnricher to enrich protocolArchive instead of applicationArchive
start of refactor of DataProviders. tweaked timing of transaction clear on reset transactions
Refactoring PlayLogger: added validate method in update method.
refactoring
MAGNOLIA-4553 refactor NodeUtil.isNodeType to works also with supertypes when node is frozenNode Used Rule.isAllowed(Node) instead isAllowed(String) which doesnt work with supertypes
"Done refactoring box borders, margin and padding. Hover is working again."
"Refactor ExcludeElement to be a superclass of either BloomFilter or a new ExcludeComponent. Significantly simplifies the Exclude filter code. Also remove use of BloomFilter when adding components to an ExcludeFilter, since it will match more than it is supposed to. Fix tests to match..."
refactoring nettoyage code
Major refactor to commands. Updates #10.
"Refactored tests to avoid depending on Thread.sleep() to await conditions, now we explicitly check for the condition instead."
"introduced reader and writer contexts, even more refactorings"
refactoring
refactor!
"Move beans to -web project, some packages refactoring"
MEDIUM / Refactored inspector management
More refactoring; get depot now just piggybacks on get vehicles-for-depot.
FIxed HUDSON-8938 (Option to notify user of Hudson account creation Refactored MailSender in order to simplify the logic Improved mail templates.
Vicious refactoring of deferred graph pipeliner (wip)
Refactored import static feature into new plug-in
Refactored Interpreter #502
MAHOUT-479: Refactored Model and Cluster hierarchies to include DistanceMeasure in cluster state. All unit tests run
Refactoring of stream/resource methods.
refactored into Model - DataStoreModel ...
refactoring and new neural network player
Refactored: renamed StackTrace.copyOf() to StackTrace.from()
"Issue #966: Refactor the PatientData interface to expose 3 different types of data: simple values, lists and dictionaries Final refactoring."
Made a refactoring of connections to master (multiple channels per client).
refactoring. moving the type handling components from errai-bus into errai-common.
refactored to use Gson
major topology refactor
MODE-1898 Teiid DDL Parser Problems Found When Integrating With Teiid Designer Refactored into a new method the code that uses a regex to determine if a column name appears in an index expression. Modified the regex so that it was case insensitive and created a test case for the new method.
Refactor panels into a more sensible package.
Refactored
Refactor sorting logic
Refactor and add documentation template
Refactor JettyConnectionDetails into WebServerAddress
BSM-82: Refactored layers to have seperated service models and DTOs
HSEARCH-2260 Made FieldHelper publicly accesible to enable further refactoring
code refactored.
There were several inconsistencies in this code which are hopefully now fixed.  It was unclear in places whether it was using a refactor using regular expressions or by some other method.   Some strange transformations were being applied to the namespaces (URLDecoder) which were causing changes to be reported by the interface but not heeded.
refactored core packages
refactorings
Package refactoring
Refactor GlobalTypeInfo into a data class and a separate pass.
refactoring class name DateTimeUtil -> DateTimeUtils
Minor refactoring in sample
Refactored package names for executor.
"Some refactoring in GQuery Animation classes, to reuse code from super classes"
[GEOT-5374] WFSDataAccessFactory and WFSDataStoreFactory break if the GML compliance level is not an integer
rsa refactorings
"#451 refactor the io.fabric8.agent.utils code into io.fabric8.utils so its easier to reuse without requiring the agent bundle, so its easier to use in pax-exam test cases"
refactor federation
"Refactor ProgramState and SymbolicValue ""constrain"" methods"
framework - some refactoring for future changes
Refactor executors
DDF-1489 Refactored code and fixed logging
"Reorganized som packages which were named incorrectly. Started refactoring the Document Type Identification concept, which I had made too simple."
Futher refactoring.
webadmin: Refactored more code into NeutronAgentModel
Refactor test (dynamic dataset loading) + enhance texttokenizer
"Refactor to use java.io.Closeable for ending life cycle of InjectionContext, BeanLifeCycle and ApplicationLifeCycle"
[WIP] - Refactored MapProxy. Added RemoteService. Cleanup.
name refactoring
Refactored test locations
"various fixes: 1) went through remote api with fine-toothed comb and add security as necessary to ALL methods missing it;  2) fix for [RHQ-2240] so that resourceGroups under a role can only be seen by those with MANAGE_SECURITY global permission;  3) refactored Configuration model, replacing instances of ""aggregate"" with ""group"", so as to better mirror resource/group the terminology in other remote interfaces (measurement, operations) 4) remove several unused queries and one unused SLSB method"
NOJIRA: internal refactoring
"Core: refactor storage layer, pt.8 (#391)."
refactor
"Convert group and role ids to names on group instantiation, refactored MockJCRXXXIterators, added wrappers for collections of Content and NodeData for converting them to collections of Node and Property respectively."
package refactoring
* Applied code style * Small refactoring to make the code more legible
Some refactorings: moved LocationCodec to proper package and made DataFile package protected.
"removed duplicate type reifiers, implemented asConstructors for functions in the interpreter, fixed compilation errors caused by refactoring type reification"
Refactor emitter config to accept fragment enhancement.(T50458)
refactor out AccessibleType
Refactor the QueryService and SyntaxFactory
"Revert ""api refactoring"""
Renaming and refactoring some RowLog classes.
Refactored LightArrowEffect to TorchArrowEffect
"Lot of refactoring, tests added, bugs fixed."
"page-fragments: refactored rich:list fragment, updated metamer and showcase tests."
Major refactoring
refactoring
Refactored theme deletion to clear cache correctly and increase performance. Corrected cascading on Theme entity.
name refactoring
Major refactoring. Untangling. Separation of logic
"Refactored to follow graphene-2.0.0.Alpha2, added API for Tabbable component"
refactor theme package
moderate refactoring
"ui refactoring, authentication"
Some refactoring / renames related to JtsGeometry.relate()
TFJ-334 method name refactorings
"license information, code cleanup, javadoc, refactoring, some new methods and other assorted changes"
refactored; moving via commands
Renaming refactor
refactor
#NAME?
"BroadleafCommerce/BroadleafCommerce#485 - Continue refactoring DTOs in order to accommodate issues found when integrating with Framework (checkout service, etc…)"
Refactoring
Many thread-safety and generics refactoring changes.
Packages refactored.
refactor
Refactor method names in MasterInfo.java to be consistent with other parts of code
77609 Move instance method and references in binary types [refactoring] [move]
quick fix bot test for cdi refactored
refactoring
Refactored Exception usage.
Added new class UncheckedIOException for cases where an interface prohibits throwing IOException directly. Also did some refactoring of KBestExtractor to remove redundant code.
Refactor ExactCallLogger into a separate class
Refactoring
refactoring to a new directory structure
WIP Thrift refactoring:  - Remove need for coordinator to know crawl start point URLs  - Change Thrift interface to startRoute() instead of visit()
Refactor permissions to belong to a role.
Started implementation of attributes and refactoring of RuntimeInvoker
PRD-4181 - Some more refactorings - moving inner classes to AbstractRendererComponent.  Removed getRootBand() for concrete classes.
"refactor how a check for child of Equals is performed, fix gh-26"
refactoring and update to latest bukkitutils
"Large refactor, migrating from single file library"
refactor tests
[PLAT-3281] Refactor: rename CombiningRepositoryConfigurationSource to CombiningFunctionConfigurationSource
Refactoring
error reporting improved refactored tests that check error messages
Starting 'pageset-refactoring' branch
[refactor]: rename write method
More refactoring
Refactor: extract Process interface
refactored test based on profile count.
refactored code to make app compatible with Android ICS+ only
cleanup and refactoring to enable for better testing
Refactored read/write methods so that there are no nested begin/end
Refactoring type implementation to prevent class cast exceptions
Refactor tests for visibility calculation
#NAME?
refactor tests a bit too
Refactoring
"[CXF-5944] Finalizing the current round of refactorings with introducing a dedicated rt rs security module, idea from Luigi Lo Iacono"
general refactorings and removed duplication
"* ODE-704, apply the great patch from Aaron Anderson, which includes: * jpa refactoring. * Enabled the axis2-war module testing. * Add the jpa implemenation for scheduler module."
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - made some APIs more flexible
"Removed unnecessary InstallForkMojo, refactored code into AbstractInstallMojo"
Added comments and minor refactorings
More refactoring to make the harness generic
Major refactor of profile containers. Separated the concept of a world group into its own class separate from a ProfileContainer. ProfileContainers for world groups now have their own store.
refactoring main
"Major refactoring; also, preliminary work for #7"
"#157 renaming ParameterAssignment in the more suitable TargetAssignment, creating package creation in processor for creation helpers, refactor MappingResolver"
Refactoring + UI
Minor refactoring - ExtractMethod
refactor(engine): implement review  hints
refactoring of javadoc for better understanding
Refactored WorldProfileManager into correct package.
more refactors. added tests for Grouper
GET virtual ips now working in core. Refactored virtual repositories to use interfaces for autowiring
#NAME?
Refactoring
A bit more refactoring to complete the move to the new common project
added caching and processing of css minor refactoring
Refactoring and naming improvements
"Refactored RequestLocator, ResponseLocator and ServletContextLocator."
SolarisConnection#waitForRootShellPrompt refactoring: M       main/java/org/identityconnectors/solaris/operation/CreateNativeUser.java M       main/java/org/identityconnectors/solaris/operation/nis/DeleteNISUser.java M       main/java/org/identityconnectors/solaris/operation/nis/AbstractNISOp.java M       main/java/org/identityconnectors/solaris/attr/AccountAttribute.java M       main/java/org/identityconnectors/solaris/SolarisConnection.java cleanup: M       main/java/org/identityconnectors/solaris/operation/CreateNativeUser.java M       main/java/org/identityconnectors/solaris/attr/AccountAttribute.java
"interceptor refactoring, caching"
Updated #JC-1542 -refactor code according to code review http://fisheye.jtalks.org/cru/JC-164
#311 - Internal refactorings of some utility classes/methods
Refactorize setupNameFilter
"Refactored read clipping framework into a generic utilities class, independent of ClipReadsWalker, which now uses this framework.  Some more cleanup is really needed, as some of the arguments to the classes are really only useful for ClipReads"
metamer: ajax: tests for @listener refactored
Refactored out the legacy openwire marshalers to a new module.
minor refactor so that the BuilderSupport can easily create endpoints and the deadLetterChannel policy and added some test cases showing how to configure the policy and redelivery policy
111576: [refactoring] Move CU: 'New' button not clear moved to top right
Refactoring JHDF access lib. Added abstract methods to AbstractH4Object to be queried during attributes build Improved Iterator and ListIterators management Added logging messages on disposing/initializations Improved finalize methods Added more checks on read operations Improved Checks on failing initializations
CAMEL-10612: API refactoring and documentation
Embryo_Tracker: major refactoring
Refactor compression code and move classes around
refactor how multiplicity is handled leading to more coherent flow
Refactored SubReferenceNodeTypeStrategy to work like the others. The IndexingNodeTypeStrategy is now pluggable for the subref one.
Minor refactoring
Refactored BillingItem table and related classes into custom classes; ref #16
RESThub web server Javadoc + class names refactoring
response refactor
Refactor the name of both the directories and the artifact ids of the WebPages project and of its subprojects
Reorg move and copy refactorings now sent out a pre delta notification
refactored quite a bit to shorted methods and also added logic to read both up and down scripts
europeana/uim folder refactoring
MODE-1334 Ported java sequencer from 2.x -removed old OriginalFormatSourceFileRecorder -refactored test code so that the class file and java file sequencers use the same test files -fixed JDT parser so that 1.5 files (and greater) are properly handled -refactored JDT metadata classes
refactoring - losg importers are now in packages pl.edu.icm.coansys.importers.*
HZN-939: Refactor Discovery to use the Ping Sweep RPC module.
[cfid-645] Refactor SCIM bootstrap
A bit of refactoring and some documentation improvements as well as turning on one time token authentication for password resets.
Bug #8944: fixing a regression introduced on administration transaction management refactoring.
major refactoring of * filtering by tag/id * serialization * resolving references * main options
Robot refactoring
"Refactored getExperimentDTO method in ExperimentService to accept sex, zygosity, strain and organisation parameters. "
refactor cat-client's StatusInfo part
"refactored commands, new interface MusicMountServer"
Refactor method call transformation infrastructure.
Refactored RecordingService for Arraylist blacklist
Refactoring Ajout Spring Assert
[SUHET] spectrumtoolview refactoring
"JBRULES-3664 BeliefSystem Should keep each logically asserted object -Majore refactor and cleanup, with working tests"
"Refactorings, new Tests."
refactored code from private method (3 lines only) back into calling method (1 method)
extensions: Refactor Java package names
#NAME?
Progress on Volume refactoring - just about runs the unit tests now
Refactor ListProjectAccountCmd and ProjectAccountResponse.
MIFOS-4657: refactor fee calculation and fee installment
small refactorings to improve code readability
"introduce processor, improve javadoc and minor refactorings"
[trunk] Refactoring & cleanup of /spawnmob
refactor schedule modal
[types] Refactor & test type services
Refactored mapping packages.
dictionary: refactor to support trailing quarter block as dictionary; only setting one gzip header/trailer.
webadmin: minor refactoring
TEZ-3395. Refactor ShuffleVertexManager to make parts of it re-usable in other plugins. Contributed by Ming Ma.
SB-562 code reformat and refactor
Making refactoring.
Package refactoring for chart related stuff and changed p-value chart on IDG page to show values by gene instead of by phenotype
Refactor naming of TransactionRetryHelper methods.
"Refactored package structure, initial mappings for views"
refactor CellsClasses and replace deprecated superclass
Refactor to ease the usage of non object based commands
Some Refactoring and cleanups
Created the dummy CompletionEngine class and refactored the test code
refactoring: HybrindKB
Did some code refactoring and initial responsive design
"Partial fix for MIFOS-3051, refactoring get method of LoanAccountAction"
Small refactoring
Refactoring to apply MVC. The goal is to test the refactoring before a complete refactoring for all GUI
IPositionProvider refactor
CAY-2268 DI: Refactor ListBuilder API ambiguities for before() / after() bindings
minor refactoring
Fixed regression after refactoring. Wrong parameter was being provided to findArtifacts.
refactory storm
Done some refactoring among various classes.
simple refactor in atomic operation for remove not needed map lookup.
JadlerMockerTest refactored and improved; a param checking bug fixed. Closes #8
Major refactoring and now completely secure
JBEHAVE-298:  Merged StepdocGenerator/Reporter into CandidateStepFinder/Reporter.  Refactored Stepdoc to be a facade around CandidateStep.
Refactor env handling.
[SYNCOPE-709] Refactoring completed
refactor the exceptions in the api
refactoring package
[KARAF-4973] Refactoring of features extension
refactorings. abstract base class. repackaging
"#545 refactored bean/annotation package structure, added copyright, some javadoc"
Some cleanup and refactoring
CMS API refactoring
minor refactor of RefComponent so it can be used as a base class for RegistryComponent. See http://www.nabble.com/Registry-Repository-support-in-CAMEL-td20774062s22882.html
Refactoring towards the new REST api structure
Refactored SailGraph and LinkedDataSailGraph for compatibility with manageable thread-local connections.  This should be a definitive fix to the 'danging connections' issue.
small refactoring
test refactoring
refactoring
Minor refactoring
ACT-1021 Refactoring: Moved error propagation code from ErrorEndEventActivityBehavior to separate class ErrorPropagation
Added SessionStoreFactory as per WICKET-38
"refactor the config history views to abstract out the parts that are reusable for plugin config views create plugin config views we now have the plugin config history views and they look pretty much the same as the config history views (due to the use of the abstracted classes for both) still have some work to do to finish, mainly in the area of deleting/rolling back and other operations like that the data that you can view seems correct still needs testing"
http://jira.jboss.com/jira/browse/EXIN-216 Refactored Seam tools model.
refactor(engine/test): fix test naming
"a small refactoring, and some documentation cleanup"
Refactored the fulfillment pricing provider package name from 'processor' to 'provider'
Refactor
Refactor modifs to be in manager
core: refactor failure to run vm flow - part 3
"Minor changes: JSON Code refactoring, updated testcases and JavaDocs."
First batch of refactoring.
"refactor drag detect, experiment with set/getDragDetect() API /*public*/"
maven pom hiearchy refactoring selenium version upgrade better exception throwing on page object loading package refactoring basic carousel functionality w/ tests
refactored AbstractExoContainerBasedTestCase as TestNG test in order to allow starting several JCR in a testsuite sequence
TEIID-1092 adding session variables and a minor refactoring of dqpcore inner classes
"Refactored maven directories and java packages replacing ""sting"" with ""gatk"". To reduce merge conflicts, this commit modifies contents of files, while file renamings are in previous commit. See previous commit message for list of changes."
1. Refactor: remove some parameters. Set a global admin flag
Refactoring: Removing old (unused) implementation of the py unit framework and creating a new package to put preferences-related code.
Inline Method refactoring. First version
Much refactoring of query code.
various improvements and refactorings
Bootstrap: create interfaces for BS attributes + refactor components
More work on refactored binary redis data. Wrote some tests.
o Refactored code
Done some refactoring
Refactored FuelStatsActivity and pager Fragments to use ContentProvider.  Used Intellij to format code
Small refactorings and fixes.
"Exception handling, Logging changes, Refactoring, and start of IoSession seperation."
moderators presenter and its tests reafactored; and Branch class partially refactored too reflecting changes in the presenter
Refactor packages (format/zone)
"#POULPE-100 Removing unneeded classes, package refactoring"
"Cleaning up imports, minor refactoring"
Feature #5157 - refactoring of portlet page & adding the management of the thumbnails of the new media
refactoring messaging module
Refactoring LP indexing algorithm to new Hadoop API. Added integration test.
User Roles panel refactoring to minimize server calls and bug fixes.
mostly documentation changes with a little refactoring
"Minor refactoring, split up C into C, EPoll, and PosixSpawn classes."
Refactor index functionality into abstract base class where appropriate
"PageNotFoundExceptions are now caught and thrown just about everywhere they should be, plus or minus whatever errors I made in the (very fast) process of refactoring. Generally speaking: all method signatures that find and return WikiPages *and* whose page/attachment parameters are Strings now throw PageNotFoundExceptions."
refactoring to use generics
IMPROVE: Refactor Split Point
Refactored the way base bundles are built to make things more flexible.
"Major refactoring changes in packages, overall sequence biology relationships and pushing common things down to common classes when possible"
refactoring and adding keepServerAlive parameter to fix issue #149
"liferay-dm-info-viewer-issues-2: Refactored classes and properties to enable compatibility with Liferay Portal 6.1 EE GA2 (6.1.20) patch ""plugin-deployment-1-6120""."
refactoring TaxiMeter Class
Refactored consumer in its own module. Updated consumer agent runner (correctly uses Joran). Minor refactorings and fixes.
Refactored UIforms and JFace plugins (fixes #1038)
XWIKI-13683: Remove GWT WYSIWYG Editor + GWT Services * Refactor xwiki-platform-wysiwyg-server into xwiki-platform-wysiwyg-api
Removed parentheses from generated tree; refactored targets
Refactored.
refactored EbiServiceAnnotator to be streaming
refactored ec2 tests so that they can be used in aws-ec2
PAXSB-14 adding fix packs ( in between refactoring )
error fixed in SeamRefactoring tests
Refactor ES proxy requests
Refactor to pass reference to BeardStat class instead of static access
Refactored recommender classes and servlets to load TranslatingClientRecommender one time only
"Commit post refactoring, and adding new classes and tests."
refactor class livro
refactor bitcoin controller
refactor Heartbeat history part
#POULPE-169 further refactoring
Major refactoring efforts on renderer API.
Refactored the bundle activator.
refactor am tests setup
refactored PomContentAssistProcessor to remove class loops and folded template package
Refactored ReturnValueIgnored and CheckReturnValue checks.
Refactor ZoneId test
162908: [refactoring] Refactoring preview: should not mark CU children as derived
dcap: refactor command processing loop
Some minor refactoring. All tests running.
TIKA-132: Refactor Excel extractor to parse per sheet and add hyperlink support     - Further refactoring to simplify cell value handling
Ability to select moving or static type of food + refactoring
Refactored packages again
Refactored Steps in AbstractTestsClass
Code Refactor: Enhance RTP related feature.
"TAJO-923: Refactor the package tree and rename obsolete prefix ""TAJO""."
"added IdentityStoreInvocationContext, refactor IdentityStore.createUser() methods"
Refactor ThreadHandler to handle Tasks (leading to decomposable tasks in the future)
CSPACE-6937-A: More development of SAS related tests and test code refactoring.
[Refactoring] Extract code into a separate method
DROOLS-192 Refactor Drools legacy classes and interfaces
"Revert ""Model refactoring"""
"refactore the action factory to be usable with proper print outs, as well as time actor"
[refactor] extracted JoinLiteralsHint
Refactoring DTOs.
"[MIFOS-3166] UI and acceptance tests for multi and single select questions, refactored javascript of questionnaire and link names in Admin page (ftl and struts)"
"Massive refactoring to exception handling. I'm trying to simplify things, but they are currently a little bit more complicated. I'll do another round shortly."
Refactored the test packages to sync up with the refactoring done in the core packages.
refactor test suite for service
#902: Refactored camel-webservice-example from fusesoruce to fabric8.io packaging
Minor LongTask refactoring. Various documentation.
HV-431 Clean and refactor the programmatic API.
"refactor beans -> model,  adapter simple pour lister les prochains bus"
Refactored Long Method
continue refactoring of clientCustAction - refactoring of createClient - add back in support for creating saving accounts from client creation
"Refactored class names to net.sf.kraken, and also some updates for QQ support and ""proper"" builds."
Kie API refactor
refactor all classes into com.squareup.cascading_helpers
Refactor of policy validators
1) Added start logic to the VPC 2) VirtualRouterManagerImpl - refactored deployVirtualRouter method 3) Added vpcId to domain_router/user_ip_address tables and corresponding vo objects
Refactor GT06 protocol decoder
"DRILL-5319: Refactor ""contexts"" for unit testing closes #787"
Lots of additional refactoring steps and comments.
cleaned up/refactored code
Operations View now using Commands instead of Actions;  refactored recent changes to the Keystore View
Fix accidental shutdown of container due to checking Futures that had previously experienced ExecutionException. Also refactor Addon and AddonRegistry for further simplification of API.
Refactor calendrical to be stateful mutable class
Refactored security.ftl to individual asset templates
refactoring
[OPENENGSB-2281] refactored
Refactored code to address performance and reliability issues
major refactor preparing for JSON models needs izhikevich neuron model builder refactor
refactored names in SupplierRngs and improved documentation
"Some refactoring in db, added dynamic records. First steps toward shiro security in jetty-webapp."
"refactor, take 3"
Refactoring SiblingColumnStorageStrategy
#NAME?
Refactor: Remove arity and varargs from constructors of method yields
refactoring wrapper tests
refactorointia ja korjailua
Refactor Context_Help
refactor Task to a base class with Executor based 'SyncTask' as a child
refactor
"Refactoring and integration tests for Wikipedia preprocessing (crosslingual, English side)."
Doris the refactorasaurus. Restructured the whole client object resolution process so that it can be done by other entities than just the client management services. Coordination between these parties is managed so that no toes are stepped on in the course of loading and unloading clients and everything is generally much nicer.
" ItEr39S09CUAltaFormularioCalidade : Refactoring to add the items on top, fixing the validation messages and removing unnecessary comments."
Domain Refactoring: - moved method createCurricularCourse from CourseGroup to DegreeCurriculaPlan (makes sense there) - merged getDcpCourseGroups and getDcpCurricularCourse to getDcpDegreeModules
Summary: Refactor code for extra work.(T69031)
"SVNWCDb refactoring, work in progress."
Refactoring tests: creating commit matcher and author builder
FALCON-2187 Refactoring to move entity xsd and jxb bindings to a new nmodule
"Apprach v2.  Added python analysis script, so java no longer must be used to analyses quality score data.  About to refactor out lots of unneeded code"
Class refactoring
fix #920 make convert to class a linked mode not a refactoring
"Refactored, introduced StringInstruction superclass"
"[MOD] Performance stress, refactoring"
Metamer: refactored components' attributes for WebDriver tests.
Refactoring: close Closeables for BootstrapExtractor.
Feature: [CompetenceCourse] Transfer between departments is now versioned. A competence course can now have a different department for each execution semester. Refactor: Competence course information can now be viewed for each semester. Bug fix:  Corrected a small problem with the transfer from where the competence group was not cleared when changing the department.
Adding the first JUnit tests for ServiceDescriptionFactory and began the refactoring process.
IN PROGRESS - issue SOAPUI-2958: Clean up and refactor the keystore and WSS entries together with corresponding tests  https://jira.eviware.com/browse/SOAPUI-2958
#NAME?
refactoring & fixes resulting from wuery callback
"[JENKINS-15098] - Refactoring Moved base class to another package, modified visibility and javadoc."
refactor by merging ScanManager and IfSnmpCollector... move update code into *Table Objects
rwandareports:  Refactor a bunch of utility methods for looking up metadata out of GlobalPropertyManagement and into a MetadataLookup class
Issue #53: refactoring of CompletionCache to be an interface.
SB-617: Heavy refactoring of the strongbox-storage-* modules ------------------------------------------------------------
"Changes to profile download code: * Refactored class to improve performance and use a queue. * Added ""unknown"" image."
"Deser refactoring, renaming"
Refactoring Wikipedia collection classes to make more consistent with other collection processing classes.
Refactor server code and clean up lobby/gameroom removal logic.
Implemented consumer updateLink.  Refactored EntityId to use entity-set name instead of EdmEntitySet.
Refactoring to fix multi line receiver issues
"namespace/lib detection: code refactoring, creation of method ClojureCore.findMaybeLibNamespace"
first part of MongoTemplate/Query refactoring
Refactored UICallBackManager_Test
refactory
Fixed refactoring error (swap name of GetFunction and new HttpGetFunction)
refactored to prepare for IntelliJ plugin
Refactoring: Changed process and class names
refactoring
TURMERIC-1350: Refactor ErrorLibraryFactoryProvider to follow Factory pattern.
"Added Working Staff Service, Added Enunciate, Refactored Validators"
Finalize Kernel Rest support Move kernel.exec module into Waarp R66 (strong dependency) Create CommandExecutorInterface following the refactoring of kernel.exec module Move HttpWriteCacheEnable in this common package
Did some refactoring and added basic filtering.
minor refactoring
refactoring building content
Refactoring of all the tool dependencies and related spring files
Refactor on *Key* methods to be compliant with new Msg interface. Go back to java 1.6 for j2c.
"Comments, minor refactoring"
Refactoring: New package for module repositories
UIForumAdministrationForm now leverages BaseUIForm refactored slightly the ui init method
SSL refactorings.
refactoring package names
XWIKI-4906: Includes are not taken into account when renaming a page - Fixed checkstyle warnings and refactored to minimise some of the duplicate code - Added tests
Major refactoring to remove spesific weather station types
Refactored MetricListener interface.
Refactor itests to use RedDeer2
"Various small refactorings, javadoc and comments"
"Huge Refactoring to remove warnings in Types, using a LinkedType for this Not finished yet"
wwww-13: refactor provider property files
Refactor Xpath validation context path expression naming
Refactor Http classes: no need of an AbstractHttpGnipStream
More loan disbursal refactoring clean up some commented out code and remove unnecessary private method
* TI refactoring and improvements * applied patch from bug 177533
Server-side 'expect: 100-continue' code refactored
org.eclipse.dltk.internal.codeassist.impl.Engine refactoring
Refactor #82 Data lossless automatic schema modification
refactored prov-xml with QualifiedName
Refactoring of selection classes : - use generics instead of CollectionMap to have something more readable - save memory by initializing lists and sets with size 1 - fix bug 2792806
Refactor javadoc
refactored package name and groupId to follow what other OSS projects in github do... apparently
Refactored the bayesian dynamic package into a more generalized Graphical Model varient as part of the new design.
refactor command reading
refactoring: split to model view presenter
Completed refactor to use an OutputStream inside a normal PrintStream instead of a customised PrintStream
Refactor - moved KorAllyToken to shared area
446564 Refactored RequestLog Mechanism
Refactored shapes stuff into shape package
Refactored RequestMessageQueue: * Got rid of extra Thread.sleep() * Removed duplication
Refactored: combined SystemStartupListener and SystemShutdownListener to SystemLifecycleListener
Issue #2276. SQL Select. Refactoring of: Index existence
refactored old disco model type
refactor
Refactored connection methods - moved them out to ConnectionUtils.java
refactor into a BaseCmpServletTestCase and a CmpGetTest. add a CmpDeleteTest.
"Refactoring, initial pass at Sprout parser. Signed-off-by: Chris Sanders <zidane@outlook.com>"
BAEL-592: Cleanup and refactor (#1823)
Refactoring REST API packages
simple refactoring in DataPlacementAlgorithm
- Summary: Refactor chart report item filter code to support further features and fixed a few minor bugs.(#22127)
Refactorings
Refactoring of the EIK Workbench
WIP : Refactor Dispatch for Java8
refactoring of permissions
[BACKLOG-1015] - Refactored existing logic for DiscoverFields into an interface.
minor refactor of Exchange.getExchangePattern() -> Exchange.getPattern()
Fix for github issue #409 and refactor
api refactoring
refactoring class and package names
directory refactoring
refactoring
"NlpWriter, with some refactorings. Started documentation."
docu and refactoring
"Big refactoring of Cycle API, compiling and test running but distro not yet checked (impossible in the train without internet). Not yet stable!"
Initial work preparing for refactoring of the Money class (Story #317) and loan interest scheduling and calculation (Story #318). 
Refactoring to use RepositoryConfiguration not GlobalConfiguration.
"Various refactoring to achieve hapmap and dbsnp awareness, the ability to set pop-gen and secondary base priors from the command-line, and general code cleanup."
refactoring
Refactored
big refactoring part three:
IDE-1662 refactored languageProperty -> resourceBundle names
minor refactorings
HSEARCH-1020 Refactored the test case to make it more maintainable
Refactored/defined interfaces to decouple RI from Spec.
refactor workspace to workingDirectory (#126)
Refactored and static methods to setup mock mvc
minor refactoring
Refactor to support validation of form input
JNI packages refactored. Support for linux i386 systems added.
NXP-2514: refactoring to allow for complex properties children
Refactor and sight creation.
"- Move maven-surefire-plugin adn maven-failsafe-plugin the top-level   (with only a small number of exceptions). - Cleanup a few tests that failed due to the changes (test interdependency,   dependency on opennms.home setting, not cleanly initializing configs, etc.). - Timezone cleanups in a few tests that didn't work outside of US/Eastern. - Refactor reusable parts from PollOutagesConfigManager into   AbstractWritableJaxbConfigDao and also create its Castor equivalent. - Moved Abstract*ConfigDao to core/xml. Their tests still exist in their   current places because they test with config classes that aren't in core/xml. - Use the AbstractWritableJaxbConfigDao to cleanup WmiPeerFactory. - Fix some bugs in SnmpPeerFactory due to overuse of static fields.   This class is refactoring opportunity to use AbstractWritableJaxbConfigDao."
Split GATKDoclet from ResourceBundleDoclet.  Refactored GaTKDocWorkUnit
HBASE-4015 Refactor the TimeoutMonitor to make it less racy -- reapply with HBASE-4015_reprepared_trunk_2.patch
refactored PropertyNavigator (more sane hasNext method) minor other changes (JavaDocs/headers)
#NAME?
Start refactoring methods from instreams into the parent class.
Added Repec importer. Added OpenDocument spreadsheet export similar to OOo calc. Several refactorings that don't change functionality.
Started test rendering service refactoring
Small refactoring
[MOD] Various minor sequence and array refactorings.
"Monster commit toward issue #365, externalisation, localisation, refactoring, clean up, fixed up os detection to be clean, lowered various issue counts in the site output. Much better. Some parts of this work have been omitted to avoid bad conflicts with my other already-done work."
"refactoring structure, refactoring file-filter"
refactored packages to now have nowellpoint domain
"Refactored the websocket commands for listing and removing unattached nodes. Fixes a bug which caused nodes created under special circumstances to be removed with the command, while still be in use."
Separated parsing from UI (still depend on TozeTextArea). Created unit tests and sample specification files. Removed unused/replaced classes related to UI. Refactored common/repeated code into reusable methods.
FUSETOOLS-1789 - Refactor Property views code (#500)
Minor code refactorings
Refactoring almost done. Functionality complete.
Refactor Module properties to not save them in Map. Since properties may be changed in runtime.
#NAME?
trunk:   - refactored merge-tracking code to reflect differences between empty and null Maps     containing merge info.   - added SVNDiffClient.getAvailableMergeInfo() & SVNDiffClient.suggestMergeSources() 
Refactor validation of PluginDescriptors (#130)
some refactors
Added ignore mode and command to toggle it. Refactored PlayerSettings.java to Protection.java. Closes #71
Major refactoring of filters/tests/functions/macros to prepare for named arguments
"First round of refactoring, will pull most logic up into SolarEventCalculator and streamline logic."
DefaultTreeItem constructors refactored
Refactored html generation code. Added navigation over hosts
refactoring
Refactor fill()/fillSelect() and add unit tests
"Revert ""Fix for bug1018 and a refactored bug1012."""
UHM-603: Create controller to return schema + current values in JSON format UHM-604: Refactor Html Form Schema
"Protocol handling API refactoring (no functional changes, mostly moving code to different packages)"
Refactored materials a bit and cleaned up VanillaMaterials.
"Revert ""Merge branch 'rewriting-refactoring'"""
WIP Thrift refactoring:  - Rename getRootPageClass to getRootPageDefinition
ftp: Refactor file transfer related code to use Transfer class
Refactoring project.
ISPN-4670 Refactor Predicate/Predicates to not use IntervalTrees for the single-filter scenario
Refactored GridReferenceSystem to conform with SpatialPrefixGrid.  Fixed a bug or two in GeoHashPrefixFilter.
Small refactorings for sweeping.
minor refactoring to follow java beans conventions.
Refactored slave impl to allow for future non readable slave.
"refactored cycle API, made CycleService the central API, added connectorId to all methods in cycle service, got rid of root connector, seperated persistence into several services with interfaces and impl package, refactored GUI according to changes, removed some obsolete files and classes"
"Refactored PagesController, separating data retrieval to separate methods. Corrected getPagesWithNullValue test to use PagesController."
"add study definition catalog loading, refactored catalog loading"
Refactoring event based gateway to new model
Refactor deployment to enable use as a maven plugin. Add jar inclusion capability
Refactored an AbstractPingRequest into the opennms-icmp-api project.
Simple omission during previous refactor broke describeSObject and there was not test to catch it. There is not.
refactor of the authorization plugin to make it easier to create alternative data structures for capturing the different ACLs; such as a single tree based authorization map
Further refactor and more tests
refactor sql parser.
EHO-244: refactoring password change panel
finished refactoring of JdbcAnnotaionProcessor class
"Refactored & improved paissadtools-mail module, added mail code examples"
bug fix and refactoring
unit test refactoring
Regenerate and refactor package structure of Gratex services
FALCON-1170 Falcon Native Scheduler - Refactor existing workflow/coord/bundle builder. Contributed by Pallavi Rao
Minor refactorings
"Added documentation, refactored code base and have base API fixed"
Refactoring so we can use now the value as the key (for controllerName)
refactor(deploymentCache): remove duplicated code
refactoring of presentations work to new packages
ControlUI.waitForFooterLogo refactored into a generic WaitForHTMLElement taking the new HTMLElement enum as a parameter.
Refactored package structure.
WIP Thrift refactoring:  - Move custom submit/traverser & instantiator to remote executor
"refactoring of htmlparsers, abstractparambuilder"
"zipping results for galc, small refactor"
add add/refactor test cases for crosswiki search
XWIKI-4162: When in edit mode (all editors) back/forward looses the content you have changed * Make sure the cache is updated before the window is closed XWIKI-4392: Place the caret at the beginning of the content when swtching to WYSIWYG Source editor XWIKI-4415: Context document not set when refreshing macros XWIKI-3965: Relative images are not displayed when switching from Source tab to Wysiwyg tab * Improve the way the rich text area loads and add the ability to reload it * Reload the rich text area when refreshing macros and when switching from Source tab to WYSIWYG tab * Move parseAndRender method from WYSIWYG service to WYSIWYG plugin to be accessible in the velocity context Also refactor the code to use Document#createXXX methods instead of Document#xCreateYYY ones.
182346: [refactoring] Refactoring could flag affected binaries which are impacted
Updater: refactor writing out single file objects
Enhancements and refactoring of BPEL bot tests
refactoring reports into renderers
Refactored Rule base classes around Rule interface instead of around AST Visitor interfaces.
cleaned up and refactored shape feature store/core-layer module
"clean code: review continued, refactored, comments"
- Made changes to enable testing on an Android emulator. - Added AndroidManifest.xml. - Added method setupDatabaseFileAndJDBCDriver(String dbFile) to refactor code pertaining to initializing a database and the JDBC driver. - Added tests for ResultSets in a new method testResultsSets().
JBRULES-1598 Efficient WorkingMemory serialization with binary protocol -Some refactoring tidyups on various class names
"Small refactor, gave another material a class."
Refactored agent launcher.
#POULPE-299 now pagination works correctly with search; refactoring
"Refactor the ""harakiri"" command stuff"
Refactoring addon-layers-repository-jpa
refactoring for maintainability; fix alignment of elements
[nobug] refactor core web tests
(Final) refactoring of 'D2W' prefixed component name to be less generic
improved tests and small refactoring
core: MultipleActionsRunner refactor: extracted initCommandsAndReturnValues method from execute()
refactor to separate names from the old version
Refactor Perspectives as a Place.
refactoring
Sky refactor Made VanillaSky an abstract class Deleted Sky interface Made VanillaSky handle the tick processes Signed-off-by: Windwaker <wjcrouse913@aim.com>
ONYX-822 : Modify OnyxDataExport to take interview statuses into account.  Also did some refactoring of the code at the same time.
"#474 refactoring, handling beanmapping similar as iterablemapping and mapmapping"
Refactor code for project903.
"Further refactoring so that pooled calling will work. Okay, Mark, you should be all set."
Injected Space Logs Code. Refactored Code. Bugs Fixed.
Refactoring to simplify LDP package - multiple class Response logic now contained in LinkedDataResourceBase
SONAR-5007 refactor restore of built-in profiles
Refactored JpaTestHelper and removed inheritance of this class
refactored merging
SONARDOTNT-274 Refactor sonar-csharp-core-plugin
"Refactored getEssentials and getAll to share code by adding a set of flags so you can say what fields you want serialized into the map.  This resulted in a small signature change because getEssentials could now return List<Map<String,Object>>"
Refactor Jar resource access and entry list
PT-2287: RESTful API for accessing/managing patient record permissions Big refactoring: resource methods now receive full representations instead of the raw request body
Feature #7291 - fixing gallery problems while verifying the gallery instance deletion: - missing transaction declarations - refactoring entirely the scheduler which was alerting administrators that some media will be no more visible - fixing some update that were performing inserts !!! - fixing a problem introduced by the fix made for #7388... - and plenty of minor problems...
"stress, refactoring"
refactor the refactorings
refactoring
Refactored resource. Added playground resource for better testing.
refactor the Manager classes
"Added HostChartsManager to maintain the hostChart reference, so as to keep hostChart sync with plotChart in copy/paste case. Removed hostChart reference from plotChart due to endless loop issue for double-reference. Refactor the code due to new chartType property added"
package refactoring
various refactoring
Minor refactoring around channel identity
Refactored CClassCommand class.
refactoring
refactoring
ChunkReloader is fixed. Code refactoring to help to add backward compatibility with 1.9.2
* improved and working history for both FF and IE (XWIKI-2739); small adjustments still have to be done regarding when is the history updated. * little refactoring * more java doc
"Fixes for inheritance related bugs, refactoring"
Refactoring ivory.app classes to reduce code duplication.
[*] make some refactoring
"Massive refactor of ops to use recipes and java8 lambdas, drastically simplifying boilerplate code. Still more to do here to get basic Ops component APIs to full recipe orientation."
algo: refactoring
Refactored JUnit tests into a seperate module and configured them to execute as part of the build
- Refactored view model implementation so that more of the common code is integrated into base classes (bug# 161981). - Split org.eclipse.dd.dsf so that packages depending on org.eclipse.debug.core are in a separate plugin (bug# 161948). - Refactored Data Model and View Model interfaces and classes to use a consistent naming scheme.
#279: completed refactoring BitstampMarketDataService and associated demo's
"-Moved call to rebuildPackageIpList to BroadcastEventProcessor to improveCollectd startup time, especially when more than 1 package defined.-Some simple refactoring to make source easier to read.David"
Some refactoring of tests to better support the introduction of ZooKeeper
refactor
major refactoring of disambiguation strategy; separates passes so we can reorder them (and tracks how often each is triggered)
refactoring
Renamed IInitializableRefactoringObject
XWIKI-8688: Add support for upgrading refactored XAR extensions
"Refactoring, code cleanup, moved executionHistories to ""data"""
Refactored to reduce complexity.
#NAME?
intermediate commit: lots of refactoring for use of sql based persistence
Refactoring Action & shortcuts on the sql editor
Refactor ldap authenticator
Continued refactoring code. Fixed #1635.
Refactoring + fix for #25
simple refactoring (***List => ***s)
"refactor controllers, services"
"Parsers now share a similar API, which should be refactored to a superclass   - removed most of the tests in order to focus on making OWLAPI queries work."
Refactor SQL validator testing infrastructure so SQL parser is configurable.
Refactoring: changes in addressing.
refactoring paths
"some refactoring, testing, and adding of ability to add constraints"
ForwardMessage method refactored to forwardMessage.
"Refactor RestQueryCreatorTest, add MpiProperties dependency mock."
refactoring session
refactor StatServlet
added copyright and javadoc headers; refactored to use explicit method-level path mappings in Controllers instead of relying on less clearly defined class-level mapping behavior
EPD-129: Major refactoring of e-Nav services
#JC-916 Refactored tests for the BranchService#getAvailableBranchesInSection method. Test for the BranchService#getAllAvailableBranches have been temporarily disabled.
implemented getProductComponents for PRISM - refactorings
api_refactor: refactor snapshot apis
refactor rename unit test classes
add ParseUser annotation and refactor testcase
minor refactor to reuse the lazy construction logic of the DataSource across the journaled and pure JDBC persistence adapter
Delivery part code refactoring: draft rxsipsbb update
major refactoring: - renamed tasks to commands - added lots of utility functions to CanonCamera - less verbosity - all commands are now async by default. call .get() or .now() to wait for the result - the set property task has gotten smarter - changed the package structure (explained in the readme) - added package descriptions - added a license - added a readme
refactoring: split converter tests logically instead of testing different converter classes within a same test class - checked test count remains equal to before refactoring
refactor the motion service api
Refactoring vertex query a bit.
Refactor: move GeohashUtils to 'io' package since it is after all an encoding format.  No need for 'util' packabge anymore.
Refactor ElasticSearchUnitTest
Minor refactorings to clean up xxh64 code
#NAME?
refactoring - createAlias -> getAlias
REFACTOR: moved indexing related code into indexer package
small refactoring between addObject and addRootObject
#NAME?
refactoring
"STS-2306 Added context menu action to display tunnels from Servers view, added support for automatic deployment of Caldecott helper from Eclipse using an OSGi class loader, and refactored debug context menu to reuse code for the Caldecott display tunnel context menu."
#NAME?
stabilizations and refactoring (#1838)
WELD-1503 Refactor metadata structures supporting bean interception - Part 2 InterceptionModel
Little refactoring + support for HTML file (for testing purposes at least)
Refactor component meta model
"o Refactored the PluginManager into GeneratorPluginManager and   MetaDataPluginManager. o File paramaters and variables are now Files instead of Strings. o Adding test case for the Java generator. o Changed how metadata is added to the model/class/field.   - Removed the <metadata> elements.   - Now the metadata is read from the attributes of the <model>, <class>,     <field> elements."
Console-Templates Refactoring
Refactoring the label decoration part; distinguish input node visually. Wrote a bit more docs.
Refactored PackReader->PackFile.
refactor DMTNUserObjectBasedStrRenderer to remove the 'Str' part
Refactored call ordering in builder API: extracted duplicate code into method
refactored Cachefactory bean to work with Gemfire 6 and some enhancements to region data policy validation
 - Refactored FSCommitEditor: moved beginTransactionForCommit to     FSTrancsactionRoot  - make activity handler (in progress)
CSPACE-5493 - adding missing support for externalURL behavior on hierarchy. Required refactoring UISpec generation code to support multiple ui behaviors. Updated all the test UISPecs that use hierarchy.
Refactored OBinarySerializerFactory to support 3rd party serializers
Refactoring. Spring pur.
refactor apis
refactoring ArrayVector -> AArrayVector
"""add to working set"" in the project wizard + small refactoring"
"refactoring: moved json parsers to marshalling package, and further improved mapping model API. Exception marshalling tests not yet passing. Also, updated all copyrights."
Assignment B2.1 refactoring: Exclusion of failing unit tests. Use new methods in preservation actions
"implemented hierarchy of virtual folders for the different models and their elements [fixes #571]; refactored all label providers to leverage the new DecoratingWorkbenchTreePathLabelProvider; renamed navigator filter ""Non-Spring Artefacts"" to ""Non-Spring Elements""; removed support for adapting to IModelElement and IProject; moved navigator content IDs from content provider to corresponding UI plugin"
Refactored Model package out of test folder(s)
"Added the dock option to the Mac openpnp.sh startup script so it puts the right title in the menu bar. Temporarily changed the Show Part button in FeedersPanel (which is temporary itself) to be toggleable. Changed JobPanel Move To Board Location to move camera, not tool. Rebuilt the Reticle system to allow multiple Reticles on one CameraView. The Reticles are keyed so that different parts of the app can add and remove them as needed. There is also a default reticle which operates the way the old one did. Added a new OutlineReticle which replaces the outline on CameraView. Updates Reticles to allow for rotation based on the tool's rotation. Refactored NullDriver to include C and Z in movement updates. Changed Location add and subtract to leave rotation alone. Added the HslColor class, used for getting complementary colors."
NOJIRA: small refactoring -> test method name rename
Refactored ModelMeta.
minor refactoring in reverce geocoding URL generation
refactorings in the context of splitting commons-ihe-pixpdqv3 into commons-ihe-pixpdqv3 and commons-ihe-hl7v3
"ugly but working unified tile/fragment management, cleanup refactor forthcoming"
Refactor to mimin w3c Websocket specification
This is the last refactor move I promice.
refactoring bugfix: archive added stands to spy added initial configuration added base league stats
introduced shadow document to connect reusable components to refactored-out drag'n drop into dragndrop.js
Refactor the name of both the directories and the artifact ids of the Mailinglist subprojects
refactored
"CDIFindObserverForEventTest + CDIFacetTest + huge refactoring + resources, needed for tests, added"
"Adding ThresholdingVisitor Tests. I made some refactoring on ThresholdingVisitor implementation to avoid static initializations to make junit tests more easy. This changes affects other classes like ThreshdConfigFactory, Collectd and CollectableService"
Refactored xpath methods
Refactored AndroidPulseGenerator to be more thread safe. Made all tests in mslbot-android use MSLBotAndroidTestRunner
refactor
Refactor XSSFBuilder
Added JavaDoc. Refactored to provide access to the Coordinator in most places.
finishing up code cleanup and control refactoring
Refactoring
refactor NamePreFilter -> PropertyPreFilter
Refactoring FormGroupInputFile
cleanup and refactoring
Refactored
Refactored interface EntityRegistry to HasEntityRegistry
Minor smoke test refactoring and slightly increased test coverage for some classes.
"remove UpdateQueue model which was not up-to-date, add overload of `create`, refactor existing `create` method"
Refactored scratch directory.
Added Advanced server between NeoServer and Enterprise server. Refactored the default set of server modules.
Refactor commands to make use of refactored code + testability improvements
Content Assist and Refactoring bug fixes
"Slight update, bit of refactoring and cleanup"
ItEr50S13AdaptacionServiciosRESTItEr49S18 : Refactoring the enumeration UnitTypeEnum to an Entity.
Start/stop gui Refactor Workflow parser
TrackMate_: refactoring: track methods are delegated to a specialized class
[87156118] - Various fixes related to refresh module refactoring and code cleanup.
Moves tryWorkflowOnly from ToolPageContext to BulkWorkflow. Changes BulkWorkflowSearchResultAction to open in _top instead of a popup. Adds confirmation message with success count. Refactors BulkWorkflow display and logic to work as a standalone module.
Refactor XsrfUtil to be a general token signing service
Refactor path and routing APIs into their own web-routable. Add archipelago support to REST API.
Initial step refactoring the monolithic RegistrarBean.
minor refactoring in configuration validation added one more test to subselect mapping
Build refactoring to add more robustness - Add full build at the beginning - Wait for full build to typecheck opened file - More robustness in lazyLoading (replace synchronization by flags)
"Refactoring noms de classe pour lisibilite du code. HasCards(Impl/Test) => Cards(Impl/Test). LocationCard => Location. CharacterCard => Character. WeaponCard => Weapon. CharacterWeaponCard => CharacterWeapon. CardRuntime => Deployed. Utilisation des types de Card specifiques dans Player (LocationAction, etc.). Externalisation des cartes de test de ProgramTest => TestCards. Utilisation/heritage de TestCards dans ProgramTest et SyntaxTest."
serialization/deserialization refactor
Refactor tests
Authentication manager method refactoring
Refactored IRCBot to net.krinsoft.irc package;
"massive api refactor in progress. Refactored graph API, now working to bring tests and implementations into the fold."
"added FATAL log, some refactoring"
Refactored the JmxExtension to enable adding an MBean with HA info.
Refactored AppRunner
Added Interfaces section and composites Many bug fixes in schema selection and import dialogs Some refactoring
Refactorings
Location refactor.
"a bit of code refactoring, moving common image and video recording functionality to base class."
"Refactored the tests (sorry to do this on a broken build, but...)"
JCBC-58: Refactoring HttpFuture and ViewFuture
refactor
"manager refactor , invoke js in constructor as default"
tests und refactorings
"Revert ""Meta model refactoring"""
"[#LIB-155] Refactor configuration | Set support, ConfigClass'ed classes as child nodes supported"
Refactor to change lore assignment to happen before attributes update data.
"One massive refactoring, which stops the usage of a client jar, and tries to handle the situation anyway. Each legacy support is broken out into its own bundle, and one needs to load and start those needed. The Pax Logging Service should now be reloadable without stopping the dependents. Not tested yet|||||"
Refactoring to move svcapi back to killbill internal apis
tests refactoring
199016: Creating a Refactoring Script logs tons of errors (246KB!)
unit test; refactoring; source line number in generated bytecode; call method with parameters
Major refactoring to introduce com.ibm.wala.ide.   Many related changes and patches from Marcelo Paternostro.
Refactoring of reservation package into item
[SHRINKDESC-79] Refactoring on 1.2.0-X branch to match SPI changes on master
"JBRULES-1520 RightTuple merge for asynchronous Rete propagations -mid refactor, bit of a mess, but wan't to be prepared in case eclipse refactoring screws up."
Refactoring to MyBatis
Refactored Stack interface
"Refactored the code for File > Load mechanism suitably. Made changes in all the input file validators to include detailed comments. Added ambiguous_extension field to all the validators that have ambgiuous_extension. for e.g. a CSV file can be a plain csv, NSF or SCOPUS. modified the codebase to handle the use cases generated by these.  Code Reviewed By Micah"
Refactor: Remove more non-declarations when doing initial pruning.
"refactoring add subscription, moving transitions to the main activity"
"NXP-14549: refactor and clean a bit the cmd stack, skip duplicate indexing in async and recurse, fixing NXP-14547 by preventing to skip indexing command on updated document"
Refactor ConsoleViewTest to be more simple and stabel. Fixes #1086
(feat) Refactor test
refactor: cleanup Parser and NativeQuery after #311
"refactor, now the jdbc layer is working 100% against interfaces against the internals"
Added a test with non-interrupting timer boundary event. This led to again refactorings in the EndExecutionOperation. That seems to be a quite crucial operation in the grand scheme of things.
last minor refactoring changes
Code refactoring + minor fixes in Marble.
Refactoring
"Fiji Build: further, rather massive, refactoring"
Refactoring/cleanup
EST-1288: refactors bank account verification state
Refactoring
Refactored CustomActionDefinition and CustomActionValue
Minor code refactor. Update CHANGELOG.md Add Javadoc entries
[changed] More BitmapFont refactoring. It is getting very nice now!
refactoring
Refactored AbstractCollectionSetVisitor into the model project. Cleaned up some class hierarchy duplication inside the CollectionSetVisitor classes. Cleaned up a few Eclipse warnings.
Merge from 1_0_X + refactoring content import / export for using Spring's JdbcTemplate instead of plain java.sql classes
Major code cleanup and refactoring.
"Refactoring of the main startup class, now don't depends on sun.misc.Signal."
"GWT broken down into 2 modules: stockwatcher and stockreader, refactoring"
"Updated VEFA PEPPOL, some more cleaning and refactoring."
Refactoring some stuff. Adding missing integration tests. Adding tools to execute easily SQL queries.
Bug 283427: [refactoring] [api] RefactoringWizardOpenOperation/RefactoringWizard should have a way to use a specified IRunnableContext
Small refactorings.
Refactoring. Changes the semantic of bundle preference hierarchy
"[LOG4J2-428] Implement a GELF layout. Refactor compression type enum to make it create the deflator stream, which avoid a switch in the layout, a bit more OO. Also test ZLIB compression and no compression."
Refactor to demo library style.
"https://issues.jboss.org/browse/JBIDE-7003 bundle map has been refactored, work under validator still in progress"
o Refactored code
Added cluster services support; refactoring of packages
"refactor, document, distances (2/2)"
Refactored to be cohesive between java and groovy
Summary: Code refactoring for extra work.(T61708)
Refactor - moved HumanSoldierToken to shared area
Started to refactor routing layer
Core: refactor service tracking (#686).
major refactoring of  properties descriptor
"Work on binding, testing multiple inputs, dependency, Refactoring..."
Resource refactoring: SPARQL results now also a Resource
Adjusting some stuffs around Almanach & JPA refactoring. Renaming some Silverpeas JavaScript Framework API and tools. Fixing a problem with time zone identifier not recognized by ZoneId Java API
Refactor cache a bit
Refactored project layout for legacy windup addon - simplification
Modified tests to show how to configure plugin via in-schema bindings (issue #28). Refactored the code so that argument parsing and customization parsing use the same codebase.
"MAHOUT-633 new iterators over SequenceFiles, used in 90% of the code involving reading SequenceFiles; other refactoring of iterators and some related HDFS usages (PathFilters); some small style changes along the way too"
refactor
refactoring
refactored the package to match the camel-web module name
"Refactorings:   - renamed SVNAbstractSelectStrategy to SVNCommonDbStrategy     as it must provide read\write strategy methods     simultaneously  - renamed ISVNSelectHandler to ISVNRecordHanler     as the cursor may be open for writing as well, so     the handler interface must be common."
Refactor public interface of CommandExecutionStateHandler
Refactor activity preference and service internals
"Test Refactor: moved SpatialArgsParser test to its own test class, and moved Shape check for equals & hashcode into TestShapes2D (no better place)."
"Added PointObserver to SpoutAPI, refactored entity package."
"[Pramod\ThoughtWorks] Refactored HolidayUtils, mainly split up adjustDate() into smaller methods"
Java backend: refactoring: renamed field CellCollection#isStar to hasStar to better reflect its actual meaning
Small project refactoring. Documentation files.
Major refactorings
"refactored - RDFExporter takes an IRI for the rootID, rather than just a String"
#NAME?
3D Viewer: refactor the import functions
Cooldown reimplementation Refactored RegexUtils into messages Altered Hal's cooldown warning to use the new channel linking feature
Major refactor of non-static methods from MMO to MMOPlugin
MAHOUT-294:  - Refactored clustering jobs to subclass AbstractJob.  - Added fuzzy k-means example to synthetic control examples - Added cluster dump to synthetic control examples - Fixed _log file access bug in ClusterDumper when run on Hadoop - all synthetic control examples run on Hadoop cluster - Fuzzy k-Means produces numerically odd-looking clusters - added unit tests of run() command line option for each clustering algorithm - all unit tests run
refactored ImportedListener to a generic Listener and fixed Layer delete op
Refactored Groovy script execution and added tests
Some UI checking added. Minor refactoring.
"ISIS-284: refactored isis-maven-plugin, factoring out IsisMojoAbstract superclass to remove boilerplate in future mojos."
TEIIDDES-1622: Modifies the refactor model handlers
"a bit more refactoring, expose.services added"
refactor: merge all security rest code to same package
Cleanup and refactoring
 ItEr31S14CUConfiguracionDeOrganizacionsDeTraballoConUnidadesTraballoItEr19S09: [Refactoring] Remove createWindow for Order and use only editWindow
refactoring of support for tests with Eclipse projects
refactor flow structure
CDI-92 update - minor refactoring - intercepted and decorated beans
"Refactoring of KeyBindingManager Addons which listen to KeyBindings have to update to a new method. Also, everyone should check which screen is open when a keybinding is pressed."
"missing sdk implementation for UsersApi, some refactoring, changes to catalogs paths (no more ""catalog/"" prefix)"
"Added: Two new @Test refactorings (pull to class level, push to method level)"
Refactored HistoryManager slightly so that SavedHistory can save options from HistoryOperations.
WFLY-5145 Jacorb migration: add describe-migration operation + refactor
loan refactoring - remove references to domain entites from action classes and suppress warnings
Refactoring for better timing of the packets. Filter out all non-AV data to avoid wrong ts. The client needs to setup a play buffer (like 100ms) to play the content to avoid audio popping and stuttering issue in SN-60.
refactoring unit tests.
Refactor of indexing to avoid duplicate issues with row keys.  
"API refactoring - made DatabindingContext internal, new class DataBinding is the new entry point."
[refactor]: remove reactive transactional manager
cassandra refactoring complete - compiles and all unit tests pass again - now ready for astyanax 
refactor Kast to lazy initliaze the parser generator
Refactored the list of names splitting into a NamesListBuilder class
[CXF-6738] Minor refactoring
refactor alert summary
refactoring registration
"Refactoring fixes, implementation moved from GenericSlingMapper.java to ChildrenFieldProcessor.java"
Refactoring.
refactored ExportThread
refactor code - remove aurora footprints
JBRULES-2642 Getting tests working for new updated parser.\n-Initial refactor of XML parser to work with ExprConstraintDescr
refactoring of javadoc for better understanding
refactoring galore
Major filtering refactor
refactored SPSM filter
Refactor cookie encryption
quick fix bot test for cdi refactored
Refactored
Refactor some more stuff now it should compile fine
refactor - make use of google-guava
Refactored class names and moved them into the multitable package.
Refactoring of the webserver package
"1) Refactor block indices into block trip indices for better performance (this will require a bundle rebuild: use -skipTo block_indices to reuse what you've already got) 2) Flesh out service alert code, with: 2a) Some support in the onebusaway-webapp admin interface for creating simple service alerts 2b) Very simple backend support (currently, no serialization) 2c) Api support (currently, attached to tripStatus elements)"
Refactor TmfEventContent and adjust other model types
KARAF-963 obr modules refactored
Minor Refactors: Consistently using DataSet camelcase
SONAR-3755 refactor issue dates
#712 - Refactor: Rename DbMigrationConfig dbUser to dbUsername
"Upnp refactor - fixes, javadoc and junit stuff"
WS-Security Examples systests refactor
Refactoring. Getting ready for 0.1
refactoring: moving some common functionality to JGitCommon
REFACTOR: Moved the events to the events/subpackages; created new base type for each category; normalized naming.
Moved RefactoringScopeFactory from rename to general refactoring package
Refs #3704: Code refactoring.
refactoring. propper support for variables and function calls. variable/function/path libs are now in seporate package (refactored) - moving to context step by step.
#JC-97 Added DateUtil class. Minor refactoring.
Refactor semantic class layout.
refactor SecurityUtils (step 1)
Refs #2626: Better JSON serialization. Some refactoring and code cleanup.
"refactoring/removing ui and logic that handles the source of ""load text"" actions created new substitution-analysis plugin"
cleanup and refactor using afterburner.fx framework
"Work on story 1312, task 1348 continued CustomerBO refactoring. * Removed some CustomerBO constructor dependencies on Persistence classes."
Minor fixes and refactoring.
Refactored logs
more refactoring of constants
refactor config building
refactored GremlinExtension so that it utilizes helper methods where possible.
Refactor DataGenerator
"refactored parsers, added parser for enums"
"ISIS-1250: some more docs, minor refactoring/renaming of RestfulObjectsMessageBodyWriter to RestfulObjectsJaxbWriterForXml."
Some minor refactorings
#NAME?
refactor core workload to reduce redundant key and field generation code
Update and refactor UI listeners
Refactoring DeckActionArg pour ne plus utiliser que FromPile et ToPile. La resolution des DeckPiles est faite au dernier moment dans execute. L'idee est de sortir les Actions de player. On accedera au player de l'action via le runtime (la game). Reste a sortir les actions du DeckRuntime.
refactoring : externalize class toolbar button 'start hermes' 
hbase support refactor
"refactored decoders to return a wrapper class and moved get timestamp, etc. logic to wrapper"
First attempt at refactoring for github v3 support
Added first test cases for recommenders completion context; required some refactorings/movings of several test classes.
"XWIKI-12068, XWIKI-12128, XWIKI-12129, XWIKI-12130: Refactor the mail API for a better management of error reporting"
code refactoring: added syncCompactor to SimpleDataArray
Minor refactoring
Refactoring and cleanup
Refactored Jade instrument message source:  - Moved all messages into single resource bundle : messages_??.properties  - Added attribute to OnyxMessageSource to load instrument bundles
Refactoring from com.idega.faces.smile to com.idega.faces.componentbased
refactor package
Refactor the cookie access into ActiveCall
"Finished refactoring of Search.java, several different search options now work pretty smoothly. Subspace disjunctions still seem to need debugging, wrote one test for this so far. Added first blush at kMeansCLustering routine; not happy with results."
got tests working after refactor
refactor config
Refactored package
Refactored LexElement API.
"Refactoring a lot of code in order to migrate from vraptor 2 to vraptor 3. Changed the controllers suffix from Action to Controller, and changed the package name as well. Other major code fixes, but the project still does not compile"
Refactored logic from GameBrowser to GameTree
Refactored the test cases for remote-graphdb to reuse the same test cases for all transport layer implementations.
refactoring
refactored subscription activity as it will become a view pager
Big refactoring. Tuples = arrays.
Fix Controller Generics signature Improved booking services and controllers Add findEquals and findLike to GenericDao Begin package refactoring (dao/jpa -> dao)
Some refactoring. Fix to DSA certificate generation. Added KeyStoreCreator tests.
Refactoring session clock to unify CEP and processes clock implementations
XWIKI-10375: Refactor the temporary resource concept inside the Resource module * Deprecate the TempResourceAction * Move the code related to temporaty resources in a separate module (xwiki-platform-resource-temporary) * Extract most of the code from WebJarsResourceReferenceHandler into AbstractServletResourceReferenceHandler so that it can be used also for serving temporary resources. * Update the SVG rasterizer to use the temporary resource API.
Refactor SmartStringBuilder exception handling for appendTo
XLCLOUD-205 Added virtual-cluster-applications tab to vcms-gui; refactoring
Refactored
Various package refactoring of other projects. Updated the builder to build translations differently. Now it will take in an English content spec and then pull down the translations and apply them in the builder. It also adds escaped information to publican.cfg to allow any title.
"DRILL-1885: fix a problem regarding ordinal to vector mapping that report incorrect result or fails a query & refactor code, eliminiate redundancy support case insensitive vector lookup yet case sensitive result reporting rely on fields in the order that they show up in the schema while copying vectors"
Email value object is added and other refactoring
Refactor testclient to new messaging strategy used by context endpoint.
implemented support for AJDT's cross reference view; some refactorings done; added context menu action for xref view
Refactor write concern.
Refactoring to extract method so that it is easier to subclass the TopLevelTransaction and disable the persistence of data.
Refactored test of upgradable lock serialization
"Refactored trac components, build up via Spring (not ready yet)"
"Switch 1.8.1-SNAPSHOT ===================== Major CDX Server Refactoring: Allow embedding in wayback (and other applications) Refactoring of cdx server processing pipeline CDXQuery handles cdx querying, CDXWriter handles output CDXToCaptureSearchResultWriter to convert cdx server output to CaptureSearchResults Support for wayback running of EmbeddedCDXServerIndex Custom timemap support using CDX server with full cdx server query support"
refactor NamePreFilter -> PropertyPreFilter
refactor BubbleParsing
lots of changes here--loads of refactoring. you can now include java functions and gremlin functions using a new include keyword. created a new variable bindings class. implemented the script engine interface from Java 1.6 so Gremlin can be used over Linked Process--that was a pain. Lots more test cases.
"started id_token creation with jwt for token endpoint with openid scope, refactorings"
Removed refactoring references from signatures to avoid class loading
Refactor Episodes
Big refactoring.
Refactored company form handling and built simple course listing
"Refactor separate ""impl"" package, general renaming"
"- Major refactoring to reduce code size and have at least halfway reasonable structure. - Added ""Bounce"" action - Fixed refuseNewSessions bug"
Fix SonarQube errors and refactor a bit
CAMEL-264: Refactored RouteContext to avoid the spi package being dependent on impl package - thanks to Christian Schneider for the patch
Finishing IntervalTree refactoring.
adding a test case for this issue - and a minor refactor: http://www.nabble.com/Problem-with-concurrent-dir-file-access--tf4724448s22882.html#a13507397
CAY-1942 Refactoring of NamedObjectFactory and NamingStrategy
Code refactoring
SONAR-10020 Refactor system/info WS
"Refactoring: Joined JooClass into ComponentClass. Simplifies and makes it easier to first scan for all ComponentClasses, then generate AS code from all XML-based ComponentClasses."
* Refactoring for uuids
"refactored cluster evaluation interface, dataset doesn't have to be passed"
YARN-2716. Refactor ZKRMStateStore retry code with Apache Curator. Contributed by Karthik Kambatla (cherry picked from commit 960b8f19ca98dbcfdd30f2f1f275b8718d2e872f)
refactoring
refactor deserialization splitting method for full and partial deserialization
Refactored inheritance.
STS-3199 Fix for white space problem as well as refactored process launching into a separate process type.
"added some more javadoc, refactored options again"
NMS-8041: Refactor Enhanced Linkd Topology
Progress on Bio-Formats Importer refactoring.
Refactored BasicRepositoryConnector.*TaskRunner to reduce duplication
 HSEARCH-250 * Refactored SharingBufferReaderprovider to cache reader per directory not per direcory provider since some providers have more than one directory (eg FSSlaveDirectoryProvider). The refactoring ment that now not all directories/readers can be initalised in the initialize() mehod. Some readers can only be initilized when the provider switched to a new directory. * Updated tests
"#49 Add componentModel ""jsr330"" o Refactor the other component model implementations to reduce code-duplication"
[KARAF-3102] Small refactoring
Even more refactoring.
refactor for reset
folder structure refactoring
refactored read-only and get audit in place
refactor sql parser & support tableMapping. issue #1432
refactor utils class in records.ts
Major refactor of camel-api-component-maven-plugin to simplify generated API pom.xml
Copier refactor - cloning code is located on the entity itself
Minor refactoring
cleanup and refactor methods to reduce redundancy
ISIS-781: cosmetic refactorings/reformattings
name refactoring
HtmlBurner was refactored.
"Core: refactor storage layer, pt.6 (#389, #391)."
[SSM-260] Refactored fixings lookup
HDFS-2562. Refactor DN configuration variables out of DataNode class. Contributed by Todd Lipcon.
refactoring and code cleanup
Minor refactoring
ODE-987. Refactor Channel classes to not rely on code generation (step 1)
"refactored nimbus to be in terms of executors, supervisor, workers, and executor.clj left"
Refactorings of the Scion client code.
refactored hwbot prime structure
Start to refactor Screen inheriting from Container. Start cleaning up Widget.
"- refactored FindBugs worker/builder/run action - FB detects now only bugs from classes on project's classpath (no double work on    duplicated class files - fixed bug introduced by the bad patch for 1867951: FB cannot be executed incrementally    on a folder of file - fixed job rule: now jobs for different projects may run in parallel if running on a    multi-core PC and ""fb.allowParallelBuild"" system property is set to true  - fixed FB auto-build not started if .fbprefs or .classpath was changed - fixed not reporting bugs on secondary types (classes defined in java files with    different name)"
"Revert ""HIVE-12442: Refactor/repackage HiveServer2's Thrift code so that it can be used in the tasks (Rohit Dholakia reviewed by Vaibhav Gumashta)"""
Refactor gobbling mechanism.
More jdt refactoring work
"getting rid of ""plus"" functionality; refactoring options/configuration api; adding new Component module type to support sub-components as replacement for previous plus approach"
More cleanup / refactoring: Name Fragments consistantly way
XLCLOUD-330 refactoring subject-owned-entitlements [vcms-gui]
Refactor UrlTemplate to support optional paths
refactor method name
"removed duplicate classes, refactored objectFactory to ioc package"
Refactor org.metawidget.test to org.metawidget so we can test protected methods
Updated ADLSerialiser and some tests to match changes in AOM (ArchetypeTerm). Also refactored and commented some spots to increase readability.
Refactored Date.compareTo logic to a static method.
refactor project
"Much refactoring and reorganization of code to incorporate security changes, this is part 1 of 2 parts of refactoring.  The next refactoring check in will attempt to clean up the DAO getter code strewn throughout the layers of the controllers."
Some refactorings in APP server
Added support for refactoring instance creators
Fix the bug 182938: Refactor OLAP engine implementation in data engine.
#NAME?
"javadoc,refactor"
Trivial refactoring of PI estimator
Refactored content length delimited input stream and related classes
TFJ-83 method name refactors
refactoring prior to normalization
changes 12.06  - final refactoring
"refactored the maven project to support archetypes, for quick development :) More goodies to come. -- work in progress"
Refactoring: changement nom de fonction obtenirJourAPartirJSONArray
refs #409 - `VersionBuilder` refactored to `Versions`
Added javadoc and refactored some variable names
Refactored Kubernetes-api pulling out mbeans package fixes #3348
"just some refactorings, leading to lots of updates"
Adds documentation and refactors minor issues on CascadingMap and its test case.
Kumaran & Kiran | #281 | Refactored code to move child related code of pnc registration OA to child service.
JBRULES-758 Moved re-usable stuff from BRMS to compiler - MAJOR refactoring
"Refactored neural package (and subpackages) to use proper interfaces instead of classes directly. Made bias weights an external StaticNeuron with synapse, StaticNeuron represents a neuron with no inputs and a constant value as its output."
Ping pong examples refactoring. Ready to support rooms
refactoring of starter project
Creating a better spec for TestGraph and fleshing out implementation. A big refactor is looming and better test coverage of existing behaviour is required
Another Refactor. Fixed small bits of code.
prolog package refactored
Refactored more nested evaluations
An initial refactor about how policies are asserted
Some refactoring of tests to better support the introduction of ZooKeeper
Added a AuthorizableManager and refactored the protocol handling to support re-use of the protocol anywhere. Also improved test coverage.
some refactoring of the start classes
Started refactoring to use one persistance manager per request + use DataNucleus standard multitenancy support
Huuuge amount of refactoring. And it's only start!
started the big refactor
Refactored swallowed exceptions
score_refactor attempt 1 - subpart of Score and ScoreComparator without weaving them into the code
"adding missing java doc, small refactoring remove unused calsses, methods, visibility"
[BZ 1089108] File Systems -> Free Space graph off by a factor of 1000. Refactored to a much cleaner solution with no IF logic. Removed some dead code from Measurement helper classes.
Refactored search interfaces into their own package. Started working on charting SPIs.
refactored managers
more refactoring on qunit oracle generator
Refactoring template method
Refactor action classes
refactor api
Refactoring of schemes
Refactor SSH commands to use request scoped database handle
[refactor]: extract writeNumberArray method
refactored the ProxyHelper class a little to clean it up a bit and to also allow a Producer to be passed in - then added a destroy() to shut down proxies properly when they are completed
Refactor strucuture (#7)
Refactor EntryOutputStream to be unit testable
#122 Refactor Deployments per https://github.com/AmericanRedCross/OpenMapKitAndroid/issues/122#issuecomment-211544553
Another big refactoring of class translation.
Refactored the unit tests.
refactoring MapEditor Automaton actions In order to add non-automaton actions in the Drawing toolbars
NMS-4583 Refactor usage of getIPList()
"Implemented ACT-140 ""REST API for Show process definition diagram"" & REST API refactor to make streaming binary code common - Moved common binary streaming code from ContentGet to ActivitiStreamingWebScript  - New Class ActivitiRequest that now wrapps the getMandatory[String/PathParam/Int] code so it can be used in both Activiti base webscript classes - Now extend the activitiStreamingWebscript (in web-application-context.xml) & ActivitiStreamingWebScript (in XxxGet.java) for webscripts that return test and/or binary data such as images"
Refactor the repo structure: API clarification/simplification and facilitate multiple artifact descriptors per artifact
Refactored Recoverer so that it queries ResourceRegistrar instead of expecting resources to be registered. This required updating some code in the ResourceLoader as well.
some refactoring + added autoscroll on the binding drag
fragments + tests: popupMenues refactored
More refactoring to support aggregating 6 hr and 24 hr data
"CSPACE-1927 - Refactoring and adding detection of displayName and refName changes, in preparation for final fix."
light refactoring
"major upgrade to iphone skin and refactoring some code. interaction is a wip, but basic tweet detail navigation works"
Refactored package names
sitesearch test refactoring
The great refactor
Minor tidy and refactor of reporting service
Refactored to create a SPI and correct bindings that were outside the SPI or published API.  No changes have been made to the API. #139 
"clean code: some refactorings, comments Some TODOs included to extend plug-in in next iterations"
code refactored
"Refactored the operation calculation logic 	Calculation now supports item stock with and without expiration dates and only checks the validity when the operation is originally submitted. 	Refactored operation reservation logic to be clearer and (hopefully) more robust 	Added tests for new calculation logic 	^inv-138 fixed"
"Refactoring de la partie Duty. On ne verifie plus juste la duty du joueur en cours. Si un autre joueur (que le joueur en cours) a une duty, on provoque desormais une erreur. Les duties sont donc deplacees dans GameRuntime plutot que PlayerRuntime."
[refactor] rename
gdx-freetype: refactored jni interface for better object orientation
CAMEL-1217  Get the Jetty component's 'httpClient.' options to be set into the indeed apache http client; also some refactoring of camel-http component
Refactoring input....
Refactoring the code in forums
refactor rule config manager
Refactor - move ReleasePage related components to pages.rel.co
BLTI-45 Clean up compiler warnings and FindBugs issues in XMLMap BLTI-46 Introduce a BasicLTIConstants class BLTI-47 Refactor BasicLTIUtil class for a variety of reasons
"Refactor tests by moving failing (for now) tests out of regular dirs, to isolate them and allow builds"
Refactoring - moving StreamUtils to Utils
"Refactoring ReportTestSuite, extracting XML parsing logic into a separate TestSuiteXmlParser.  This is in preparation for fixing SUREFIRE-433; wanted to checkpoint before I plowed ahead."
module refactoring
refactor of the DataStore so that we have a ZooKeeper and Git implementation (with the ZooKeeper one still enabled by default)
Refactored the SyslogdTest so that it uses JUnit4 annotations.
api_refactor: move listcapabilites to dc
EFO support refactoring (3/4 done)
refs #13 refactor AssessColumn to AssessRow As the title described. Signed-off-by: zjulzq <kanysome@zju.edu.cn>
refactoring (consider finite lane-changing time)
"[MOD] Core, locking: various refactorings"
Refactored load/add/remove part.  Semantics are that load is to load an existing part (ie for which we can expect the relationship to already be in place).  Add also sets up the relationship.  The natural place for these methods is in RelationshipPart (and so that is where I have put them).
Completion of Named Annotation Refactoring test
SAM REST service refactoring
* Fixed backup loss issue during graceful shutdown. * Improved replica sync retry process. * Refactored partitioning code.
Package refactoring
Refactor populateSPW() method.
"rename R configuration variables (more consistently), refactor workspace directory setting, integrate filtering for incoming commands"
Refactored classes and menus to improve usability
first stage of refactoring to re-integrate crapi improvements:
Little refactoring
Refactoring model/view and add Organization Unit entity
Spring Integ. Refactoring through Transformers
"test refactoring; move #738 test to 'misc', from 'failing'"
Refactoring.
"Refactored Canary to provide ""direct access"" to subsystems. Instead of having to go with Canary.get().getSomething() it's now possible to do Canary.bans() to get the ban manager, for example"
More refactorings to the parser structure.
Refactor SupportLagrange and WeakformAssemblier
refactoring: rename some Util classes
DS-3266: Refactor 'for' loop in METSRightsCrosswalk to work properly and remove unused methods
Fixed silverfish missed during refactor Refactored other parts missed from Glow to Spout
Refactored the SystemIncludePathAspect class.
refactoring test
"IMPROVE: Refactor all application for have 2 separate modules, one for login, the other for application. IMPROVE: Optimize GWT compilation for developement profile"
definition refactoring and fixes
Refactored.
Refactor class names
"- Summary:Fix Custom tooltip does not work in live preview.(#49303)      - Bugzilla Bug(s) Resolved:      - Description:(#49303) There is no ActionRenderer in the RuntimeContext when previewing the chart in the chart wizard, so the custom tooltip is not evaluated and thus not displayed. The fix is to refactor the tooltip evaluate code to a static function the BIRTActionRenderer class and call it directly to evaluate the custom tooltip when previewing in the chart wizard."
Minor refactoring
MEDIUM / Refactored CED to VPM and introduce validation
"Some refactoring, REST client updates"
minor refactor
add documentation to the API parts of the refactoring.
more work on cursor change; refactorings; format
"major refactoring, cleaning the code"
refactoring of smartos-ssh
RepoImpl test refactored - generic tests for all RepoImpl
Refactoring
ModifyingArchiveTest included in suite + refactoring
Refactor CLIFF to use a plugin system for Entity Extraction
Refactor MultiInstanceActivityBehavior to allow a subclass override retrieval of collection value.
Refactored some methods/attributes regarding the UserActionLogController and created a new class to maintain the MVC pattern.
some refactoring and ran the idegaweb plugin
Fixed evasion abilities. Splitted canBlock to canBeBlocked and canBlock methods (previous version caused bugs). Refactored some cards.
Refactor path cleaning
refactor baseline service
147516: [refactoring] warn when refactoring derived files
Minor refactoring.
ISIS-1766: refactors to introduce bs3 for menubars (work in progress)
Refactored to improve names and fluency of interface.
"Refactored DashBoardUtils, added Update template"
"EST-1119: Adds invoicedBy property to Lease Item, only consider Landlord in the invoice calculation; some refactoring of LeaseContants to."
"refactored tile classes, added tile pyramid and tile cover classes"
refactor package name
RF-12900: refactored validation components to subpackages under ui.validation
Refactoring
Fixed bug in collection entity with a small refactoring. Added test for structure of a single collection in the show action. Fixed running a single test in the pom.xml file
[refactor] json support in UrlBuilder
"much refactoring of REST index apis, using new index api."
Refactor the implementation of the XMLRPC Confluence API (XWIKI-1617) True Interoperability with Confluence (XWIKI-1616) Proper exception handling for XML-RPC code (XWIKI-1618)
Refactoring the option parsing into CommandLineParser.
"Heavy refactoring, core completed, DHT not yet tested"
Refactored row-clearing code in BoardController.
Switch to CDI including majore refactoring. JPA doesn't work properly yet... so it *wip*
Refactored cloud credentials handling
Refactored to store efos as OR-ed experiment-(ef-efv)attribute GeneConditions
Refactor the condition models.
refactor
chart legend style refactor
[TACHYON-1304] Refactor WorkClient to use the  methods from super class
"fix for issue #50; a lot of refactoring, mainly to do with the code expecting files instead of abstract URLs in a lot of places..."
bug 7059: refactored the API to now add the single embedded object tag after a response
Refactoring
Added dial chart. Refactored PlotContent_Pie. Removed warnings.
refactored XpathLocator to XPathLocator (ARQAJO-35)
Start refactor of all daos
"* use ""<artifactId>.js"" instead of ""jangaroo-module.js"" * renamed ""jangaroo-modules.js"" to ""jangaroo-application.js"" * refactored JooGenerateTestResourcesMojo to reuse the same   application packaging logic as WarPackageMojo. This simplifies   creating unit tests a lot."
Refactoring : Remove static and singletons and use SCA references instead
did some refactoring of SIGLE plugins as there is not need anymore to have them in separate folder for maintenance - I moved them to *.openjump.core.ui*
Feature invariantAxisPropertyDeletion. Fix an incomprehensible bug occuring in some machines during tests by refactoring the silverpeas Web service test API implementation. Now the resources on which the test cases depend on are decorallated from the test class itself; they are now managed by a resources wrapper through the Spring container (that is bootstrapped by the Jersey Test Framework). The tests on the REST web services in Silverpeas Core are updated as consequently
refactored and documented Laundry API
RUBY-10 Reviewed and refactored Barcode part parsers
WINDUP-133: Refactor much of the BlackList/Classification functioanlity to use the more traditional graph/rule interaction. (Needs more work)
refactor Events
refactor multi thread code in Spider
refactor property loader and added PK to config
refactoring to add job runner and job logging
Refactored
"StockPriceService - changed returned list of stock to array of stocks + massive refactoring in StockWatcher, UI Widgets extracted to another object."
Emails Refactoring:   - Docencia Portal (Disciplina/Alunos/Enviar Email)   - Secretaria Académica (Gestão de Pautas/Enviar Email)
Refactor AnnotationTree to support Eclipse compiler
Refactored package structure and removed unused files
FORGE-2321 : Refactor common code into the xxxOperations classes
Refactoring ChangeSetWriterImpl to take a Headers object
"Refactoring of StressTestStage * removed ClientStressTestStage: repeat or loop should be used instead * removed StressTestWarmupStage: just set test-name=""warmup"" (or leave this empty) * stage hierarchy: ** TestStage spawns the threads, and also manages transactions ** CacheTestStage provides key and value generators and entry-size ** CacheOperationsTestStage provides key selector *** CollidingKeysSelector replaces shared-keys=""true"" *** ConcurrentKeysSelector replaces shared-keys=""false"" ** xOperationsTestStages implement the logic for invoking operations ** KeyExpirationTestStage replaces fixed-keys=""false"" * Stressor does not need the ugly switch for operation type, OperationLogic calls it with Invocation instance * removed variants of operations from some traits, now the derivations are defined inside Invocations * ReflexiveListConverter -> ReflexiveConverters.ListConverter, added ReflexiveConverters.ObjectConverter for single object * fixed XSD schema generator (each property can be defined as element only once), forcing element count provided to ComplexConverter"
o Refactored code
RF-12562: added FocusManager - richfaces-jsf-event.js sends form's ajaxsubmit event which bubbles - refactored unit tests for ServiceTracker to expose   AbstractServicesTest
refactorings and renames
ISIS-993: reuse Wicket's isVisible() for dynamically visible content (refactor of HasDynamicallyVisibleContent interface).
 ItEr58S10CUAsignacionRecursosLimitantesItEr57S11: Refactor method get criterion names out of a list of criteria
Merge pull request #596 from yuyijq:refactoroverridenotify
Minor refactorings.
[All] Huge code & configuration cleanup and options refactoring
refactor tests
Added guard for non-existent rtmp sample access bean in Channel. Refactored some of the other classes based on mp4 branch changes.
Substantial refactor around PrefixMap
Mostly refactoring and removing old code.
improve - refactor package name using io.craft.xx
"Incorporated FixMessageUtil.mergeMarketDataMessages() to interpret incremental refresh in OptionMessagesComposite (the messages table section). - Modified updateQuote() to detect if the current message is a full or incremental refresh, and then update the original message accordingly - Refactored the callback creation code into a cleaner method - Added convenient method to indicate whether the OptionMessagesComposite is for showing all option market data (in OptionMarketDataView) or only the specified contract (in OptionOrderTicketView)"
Options class method refactoring
big test refactor
Refactored constants into classes where they really belong.
fee refactoring - add fee service and fee dao for use in service facade and wire all up to spring
"More refactoring, fixed a bug in state enumeration.  Some decisions seem to be really fast, while others take forever."
Refactoring of ExtDocView
"compute() has been optimized and all old code is gone. We no longer need to compute trees for each cluster. Furthermore, the computation of broadcast ports has been streamlined. Other routing/topology refactoring has been done as well."
some minor refactoring; also added ability for RuleSetFactory.createRuleSet() to accept a comma-delimited set of ruleset names
"refactored asseturl, one URL class to rule them all"
Refactored more classes to fix compile errors from opennms-config reorganization.
Refactoring of index document creation.
Refactor and cleanup duplicated code for defining screens menus
Refactoring and documentation
refactored all OSM objects to have OSM prefix in class name
Refactored reduction in type inference to work for multiple levels of nesting.
Preparing refactoring for issue #6
refactor ref testcase
Refactored endpoint class names
"* refactoring SeekingInputStream, ByteMatcher etc"
Cleanup test failures after application services refactoring.
"refactorings, metrics API has it's own namespace."
Grammar refactoring in progress. Tests failures: 9/121.
Refactor fileenricher to make better use of the transform-framework.
Refactored FidoParser and PythonExecutor classes.
Refactored the ListenerPreparer class.
added single primitive input contract test renamed DataStruct (test obj) member refactored DataStruct populating methods into it
#1195 refactored the container profiles to avoid the unnecessary docker folder; so they work both with docker and child container providers; also moved away from environment variables to using io.fabric8.container.java PID by default so its easier to tool the configuration UI via OSGi MetaType
#NAME?
Refactoring
Migrated plugin/property to unsupported/property-old and unsupported/property-ng to plugin/property. Updated poms. Refactored packages. Updated display names
small refactoring
fix 1430 for genotype filters; refactored filter() method; added unit and integration test; more comprehensive fix must be done first on htsjdk side in JEXLMap (#1456)
"Refactor: Reduced modules. Spatial-extras-test -> spatial-extras-base, spatial-test -> spatial-lucene, spatial-base -> spatial-lucene. Some packages were changed."
Refactored/renamed the nested integer array; cleaned up code a bit.
refactoring - moved projects menu items producer to appropriate package
Major configuration and DI refactorings.
[refactor]: extract method objToJsonObject and objToJsonArray
refactored generation of ANNOTATE ORDER BY clause and node identification in SaltAnnotateSqlGenerator.extractData
Bug #8371: refactoring a little the RepositoryIndexer.
Translation refactoring
SONAR-6834 refactor CeQueue.submit()
"Adding HTTPS support for UCS, refactored code for o.a.c.httpclient.contrib"
 * added log record cursor for ascending/descending iteration  * replaced query result file format (file buffer list to logstorage file)  * renamed sort2/stats2/timechart2 to sort/stats/timechart  * refactored logstorage file package  * logstorage file now support non-compressed format for performance  * offset and limit type is changed to 'long' type
"Refactored based on decision that the builder would not be API, at least for now, since all of the known entry providers currently reside in the module. The remaining API is the resolution report and its listener."
"updated documentation, small refactoring"
Refactored tests
o Refactored code
SOAPUI-585 name refactoring
Shashank | Refactored PNCScheduleService to ChildScheduleService and added some new classes
Refactored coordinates-aware locations into separate mixin interface
[ymeng] chinese-number: refactor to extract method
refactored code.
Refactoring knowledge-internal-api packages names to org.kie
[GWT20] Refactor package names
Refactoring for M3 updates
refactored logging api into org.jboss.solder.logging package
Parameter identification refactor + Decoder and PathParam integration
minor refactoring
refactor package
Refactored containers with more appropriate names.
Refactored TableCache
Refactorings to allow GotoTestStep to work with all kinds of sampler teststeps
Fixed text in TableScanner to properly display in a Label instead of a TextPane. Added setSelectedCamera to CameraPanel. Refactored CameraView to store scaled and unscaled selections. Increases accuracy and reduces complexity. Removed calibration mode from the CameraView popup menu. This is now done in the CameraConfigurationWizard. Started work on calibration mode in camera wizard.
refactored useroptions
"[JENKINS-4912] Added build health/threshold evaluation for m2 jobs. Totally refactored the calculation code, introduced new parent class."
[misc] Refactor and fix UserProfilePage (patch from Sorin Burjan applied with modifications)
Refactoring reporting
Refactor Builder.
Refactoring for consistency of usage
Refactor builder and destroyer class name and methods to reflect use of presets
Issue 260: fixed i/o threadpool to min=max; refactored session expiry logic. Issue 258 refactored load balancer code
#NAME?
Start refactoring of command handling (work in progress)
bug 11791 upgrade abdera libraries to release version of 0.4.0-incubating which required refactoring current atom server code
"added some javadoc, minor refactoring"
"Added parametrisation for: width/height of graph, optional vertex labeling with full Id. Refactored project for easier testability."
refactoring core as independent project
Market data refactoring to module form - reviewed as ENG-82
refactor payload
refactoring more of wms protocol
add MultiplicityWrapper some refactorings
Refactor all things. Adds more packages to better organize things.
Updated pom with correct version Abstract SecurityGroupRef. Each subclass uses different fetch methods to find the correct security group. Refactored some of the create steps in InstanceTask - still needs work. Updated ele-class map for different security groups
A refactor that basically decompose the old JGitUtil to a command based approach (#779)
refactoring to make the different types of options work more like each other
DATAREST-93 - Further refactorings and refinements regarding the search resource mapping.
Progress on new cart operation workflows Refactor legacy test group names
Refactor completer creation
Further refactoring of collectd.  Mostly in CollectableService
Refactor ThreadLocal variables to strict minimum.
"TMI-21: Implemented getRawImageType and getImageTypes for CMYK/YCCK. TMI-16: Refactorings, cleaner color space determination + tests for thumbnail readers."
"Script generation tests now compare against ""stock"" examples and don't actually hit the database Remove (confusing) eclipse project files because they're no longer up to date with the IDEA ones Various refactoring to try to ensure each class has one responsibility (this is ongoing!)"
"- Added 3rd toolbar variant. - Refactored the popup windows for image, link, PDF, and HMTL heavily. - Changed how keyboard input is handled between editor and functions. - Can now configure keys in settings."
"proper port number handling for all commands, minor refactoring"
refactoring
Almanach refactoring: - adding the possibility to group also by month for next events view - adding the month filtering behavior on next event view - fixing user right management
MODE-2545 Removes XA support for JcrSession and refactors a bunch of transaction-related code
TAJO-774: Refactor existing built-in aggregation functions for four steps
Completely refactored the TransactionPuller.
refactoring: moved some classes to testsuite shared
refactoring (2): use Users list from XML file
Refactor CollectdConfigFactory
Refactored mechanism for exposing type methods to launguage processor.
small refactoring and added an async testcase for the ask method
Refactored newMaster() slightly and added a retry loop to avoid getting stuck at shutdown state
Integration Tests - SelectManyCheckbox refactor.
"Refactored most of the RAMPART codebase to use the latest Conan classes and data structures.  This involved removing most of the executor classes, and modifying mocks in tests as appropriate.  Also the params and args classes were merged into the process classes where approprate."
Refactoring to avoid unnecessary conversion of content to NSData (and back)
"refactoring of BioMartAnnotator, more tests"
[jayes] refactored utils
Addon/plugin refactor
refactor to make restapi happy
refactor
"Refactored all classes from ""*cluster*"" to ""*distributed*"""
Export architecture refactor.
RF-12900: refactored misc components to subpackages under ui.misc
Refactored asynchronous cache rebuild to use Executor interfaces - Dropped ProcessGroup and recreated MonitoredExecutor (test similar) - All users of ProcessGroup.spawn() could be converted to Runnable - Clarified thread separation of scan and completion in Loader - Final benefit: Easier testing for StepCandidateCacheLoader - added unit tests for StepCandidateCacheLoader
"Minor refactoring, added detection of hlines"
refactor
refactoring classes to injection package plus symplifying integration
Fixed issue 156.  Added support for serializing an object field (or array elements) as per its actual type. Refactored inheritance related tests into its own test class. Added regression tests for issue 156.
Minor refactoring.
Refactor UserPermissionDto
ROO-1494: Refactor gwt-addon to produce GWT applications that better reflect GWT structure guidelines
Refactoring to facilitate dom scripting engine incorporation
"Refactoring: add `FullyNamed`, demote `Named` to core, rename LRUMap as SimpleLookupCache"
REFACTOR: Changed call signatures so that creation of different objects can be handled autonomous.
NIO refactoring.
DATADOC-24 - Refactored SimpleParameterAccessor to improve usability.
Refactored formatters out to a toplevel package.
Refactoring: putting all Python code in the same place (org.python.pydev plugin) and renaming folders to be all lowercase (as well as renaming some python modules themselves).
tmf: Refactor TMF statistics
"Wfs-ng: tests: refactor, reorganise, complete, fix"
"huge refactoring. Reaching 100% test coverage (96.9%, the rest cannot be reached). A lot more constraints checking. Closes #20."
host and networks refactoring
refactor mustache builder code generation into a factory
Refactoring project
"121880 [build path] refactoring of build path code (simplify, code sharing)  - new source folder wizard"
Refactored some names and packages
"Refactoring deleteDomain to new API framework.  Cleaning up some compilation errors that resulted from previous refactoring, namely there was a requirement to keep the old manager method around for createDiskOffering and createZone in order for the ConfigurationServer to work."
"[PLAT-1296] Refactor time-series master; New database, stage 9"
Refactor: extract aggregate anonymizer from repository security decorator
Got the JAVA_DATE_STRING and JAVA_DATE_LONG stuff working now for the Android support.  Looking good.  More internal refactoring.
aps-34 APS-APIs split refactoring
Refactoring in progress: better whitespace handling. Introduced FragmentWriter.
"config refactoring, more mocks, convert monitoring locations to jaxb"
Refactor text management and complete TextModel.
[CLEANUP] Refactor SubClassConvention to SuperClassInheritanceConvention
"Support for unbounded intervals, refactoring of interval interface, allowing ""holes"" in intervals"
Refactor code for rebasing changes to make it reusable
"Refactored and cleanup of models, repos. WIP refactor and cleanup on tests"
Refactor as part of - Ensure that Ebean.currentTransaction is available in lifecycle handlers (#1166) #1175
TAJO-932: Refactoring the hierarchy of Query
refactor common code
"code discovery : added jaxrs interfaces, java implemented interfaces, injection of both, refactored"
refactored and code cleaned up
Refactoring collections using TumlRuntimeProperties to simplify collections for qualifiers
"Optimization and refactoring of lists for Collections, Albums to avoid repeated queries when paging. Optimization of paging behavior and fixing the paging behavior bugs Fixing the search/filter combination bugs: filter and search for collections and albums were not working together. Fixing Filter display bug for Albums (when albums were searched, no filter to remove the search was ever displayed)."
refactored closing input streams
some refactoring
Finished refactoring
Refactored
more refactoring
Revert back to dynamic filtering with refactoring. Rationalize graph package and separate filtered implementations. Reset view management and processing.
Refactoring
Added the PullSnapshot command tests. Did some refactoring to some commands to remove duplicated code.
refactor Dashlets to have common base with included title
A bit of refactoring. Move soem comon code into EventInfo
Little refactoring to make SimonConsoleRequestProcessor more extensible
continued refactoring of namespace management
Refactored API impl
Enabling some functionality after refactoring.
"Feature #5893 : migrate org.silverpeas.cache package (lib-core, web-core and war-core) - first step SilverTrace refactoring in order to get an empty behavior for integration tests - migrating o forgotten batch around notification (by implementing Initialization interface) - fixing some injections with qualifiers - removing from Quota the JDBC persistence implementation in order to keep only the one of JPA - adding the clone feature to AbstractIdentifiableEntity abstraction - adding the Singleton annotation to some Services, Managers and Repositories implementations"
paramétrage jpa + paramétrage base de test + création utilisateurEM + lib nécessaires + ajout em aux actions s'identifier et s'inscrire + refactoring des actions pour utiliser méthode estVide de StringUtils
Refactor transactions abstraction to have a transaction local context.
[SHRINKWRAP-55] Refactor Asset.getStream to Asset.openStream
Minor refactoring
OAuth2 synchronizations and refactorings
"reporting:  Refactoring the location of the ConfigurationProperty related classes, and start adding support for handling DataSetDefinitions which have had breaking changes made after serialization."
EST-82: refactoring of tags...
"Yet more refactoring, eliminating BeanProperty from TypeSerializer"
Refactoring Read Enhancers (were called Error Correctors).
refactored for XSL mostly
"MOAR REFACTORING!! All Response building logic moved to SPARQLEndpointBase LinkedDataResourceBase greatly simplified as a result, QueriedResource removed SPIN & Saxon dependencies moved to Graphity Client"
"#903 - Refactor: Internals, BeanPropertyAccess getter and setter methods can be cached and don't need constructor"
Feature #3178 - upgrading forum subscriptions - wiring specific message subscription services to the common subscription services - adding forum subscription - adding forum application subscription - improving some treatments - improving navigation - refactoring some code
RESTWS-167 : Refactor test packages to v1_0
KARAF-2696 Refactoring to share common code between BundleRef and ConfigFileRef
refactoring NodeUpdater
Refactored colocolized pixels image generation method
"Refactoring, using wake-on wifi service to post data"
Refactored chunk generator class name
refactor Proc class for junit reports
"Refactor Indexz creation, add docs"
Refactored to use DI / guice
Refactored: InMemoryDatabase
Refactor chart UI extension framework to support customizing task page.
Huge refactoring about Import. Split import process into Importer and Processor. Redesign import container. Architecture to allow other way of importing like DB or Generator.
Metamer: some beans for input validation refactored
refactor to account for comments
XE-651: RSS feed for search results doesn't work XTVALIDATOR-6: Add RSS validator * added RSS validator plus some refactoring
"Refactored OEntity, added NetflixConsumerExample"
Minor refactor of CompilerAsset#assertSource
Refactoring
Refactor the WideMap API to simplify operations
handlers refactor and add more unittest o(???)o
Refactor of the property. Edit of the virtual machine
refactor different option types
"Refactoring of marshaler lookup. A marshaler class now defines the types it can marshal using the method signatures. A marshaler method can have any name, must have a signature matching a specific pattern and must be marked with @MarshalsPointer/@MarshalsValue/@MarshalsArray. (#240) Fixed problem with marshaling of blocks when subclassing ObjC classes that have methods that take blocks. (#235)"
Refactors the SmartMemberCache implementations into a structure which uses a ReadWriteLock instead of low level synchronized blocks. This allows concurrent read access to the caches of members when multiple queries are run at the same time.
TEIID-4070 refactoring the modules to avoid class loading issues with wildfly
refactored wizard
XWIKI-4857: Split the wysiwyg module in order to make the editor reusable outside XWiki. * Refactor the WysiwygEditor to make the editor more reusable and to fix checkstyle errors.
Minor refactoring
Minor refactorings
refactoring to handle arbitrary controls
refactoring
refactored out the configuration of the http method
Refactored more tests to use JUnit4 annotations.
Minor refactoring
TEIIDDES-1701: More bug fixes for refactoring
Completed command-line refactoring in Command Line Runner
"Refactored contacts visibility to public, student, staff"
Refactored random number generation -- RandomUtil and CategoricalRandom moved to ca.eandb.jmist.framework.random package.  All public RandomUtil methods take a Random as a parameter.
multi windows refactoring part2. About to delete oroginal Webinspector.
refactoring: move CRM GUI to its own package
ItEr21S04ArquitecturaServidorItEr20S04: Refactoring test so it expresses its intent in a clearer way.
Refactorings
refactored shuffle into MembershipImpl refactored shuffle into MembershipImpl
Refactoring to the LDAP store impl. Closing search results after the processing.
Refactored table cache refresh into its own class. Removed redundant / out of date comment
refactor: changed P2MetadataProvider to return dependency metadata
SONARGROOV-19 Refactor CustomSourceAnalyzer to be based on files instead of directories
Closes #328 (Modify REST API to work in federated environments) and some refactorings
Refactor a bit test code and move load tests in a separate profile. A few additional test cleanup.
fixes for docs and minor refactorings
core: Refactored roles to Role.
refactored center/zoom changed
"VNC server refactor - fixes, javadoc and junit stuff"
Locking refactoring and javadoc cleanup
Refactor NewIndex
Refactoring tests
"Refactoring to use ""BreakpointEvent"" instead of ""Catchpoint"" to be consistent with how we refer to the feature at the UI level."
refactoring of TypedValue
Refactoring of Profiler to allow injection of Enterprise one
"clean api refactor:  - refactored AbstractAction to support ""clean api"" parameters and http parameters at the same time  - refactored ""clean api"" actions NodesInfo, NodesStats, and State to match with new functionality in AbstractAction  - removed some obsolete methods and members from AbstractAction"
"refactor to sub module, refactor the addition of simple jmx discovery and cascade module."
"#JC-1508 Refactoring of the SimpleAuthentication plugin interface, now it has the validate method instead of the 'dryRun' flag"
refactoring
More actions got logging. Some refactoring to use ActionWithResult.
refactor to contract-oriented package structure.
refactor the usage of generics in a better way
Refactor x509 entitlement certificates stuff to new EntitlementManager SLSB.
vcms sdk refactoring - EntitlementsFactory to simplify the process of creating entitlements
NOJIRA: Refactored DBHelper class (final stage)
Refactoring
[Refactor] Remove Doxygen uploading.
[246024] Refactor XML outline
"* Refactored packages from mc4j to mailjimp * Some misc. cleanup - I might have broken the unit tests, don't have time to check"
refactoring command flow handling.
Refactor NCSA formatting for plain servlet
[269281] Refactor org.eclipse.jem.util plugin contents
Refactor ShowInterfacesCommand in ChassisCapability.
[PLAT-1296] Refactor time-series master; Rename
refactoring tree
Refactor the .i.js generation pass to better represent declarations.
"XQJ: ""serverName"" and ""port"" added as dummy options. Main project: minor refactorings."
refactor: Move interface MultigetSubSliceQuery to the api package
Fix PMD warnings with refactoring
GPF refactorings
Sending OS user contact information + refactoring.
Provider refactoring
refactorings docs add xsl html processor
refactor to use EmailMessage to build message and then join with Session at the send
Refactor test to extract checkEmptyCache operation to OgmTestCase
Added factory method to create from MethodDescriptor and Location. Some other minor refactoring.
- Upgrade to Spring 2.0.5 - Added CachedTargetRegistry - Refactored package structure - Added TargetPostProcessor
"refactored audio/tag parsing stuff into ""audio"" package"
Refactoring
Monster getKeys refactoring and testing commit
refactoring
A (very) little bit of refactoring
PRD-4242: Refactoring as subreport and crosstab share common functionality
some refactoring
jbide-23900: refactoring of openshift server adapter (#1462)
Refactored ProtObject so it can be both class and instance.
* Refactored DefaultGraphBuilder * Changed node DTO type for MethodNode * Updated to latest succor version
Add owner field on book / refactor and cleanup activation context methods / Refactor unit test packages
Refactoring of Java test related code
Code refactoring.
code refactoring
"Non-blocking container server API drafted, inc. refactoring of the current API."
Some refactoring
Refactored code. Renaming consistend with elexis style. Similar to omnivore-plus/direct
refactored test classes
#3271 minor refactor so that its easier to share the assertAssertionError across modules and to reduce the number of Assert*s classes so that there's only an Assertions class for the static imports of all kubernetes related assertThat() methods (the generated Assertions class is now in a separate internal package that folks can exclude from their IDE completion list)
Refactor code for getting a database connection into its own method. Eliminate warnings while I'm here. Clean up a needless Map (where all values were null) and use a SortedSet instead (hence the update to validateRule.jsp).
createImagePart from FilePath - refactored a bit
"SSE updates, fixes and refactorings."
IntMap refactoring
Refactored nnotations to return only one Annotation object per variant with combined annotations
refactor package names: notification.email.list -> notification.email.scan
"REFACTOR: moved TagMagix from org.archive.wayback.archivalurl to org.archive.wayback.replay, as it is used by several Replay Renderers."
Refactor Ctx test to simplify a bit.
Removed non blocking cluster listener thread of client. Cluster Listener work as normal listener registration. Refactored ClientConnectionManager to make functions consistent with its name.
Minor refactoring: Moved Wikipedia utility code into 'com.oltpbenchmark.benchmarks.wikipedia.util'
refactor channel code
"- Implemented ""automatic transcoding"" (no transcoding engine needed) for image formats that ImageIO can handle:   - Created DLNAImageInputStream   - Adapted method overloads in DLNAImage, DLNAThumbnail, DLNAThumbnailInputStream   - Implemented DLNAResource.appendImage() and made it responsible for creating all image resources in getDidlString() (Temporarily breaks RAW transcoding)   - Updated Request.answer() and RequestV2.answer() to perform automatic image transcoding - Refined logic for what image formats and order to offer renderers for images and thumbnails:   - Implemented DLNAImageProfile.getFormat(), useThumbnailSource(), toString(), hashCode() and equals()   - Created ImageResElement   - Refactored DLNAResource.appendThumbnail() to use similar logic to appendImage()   - Refactored DLNAResource.addImageResource() to use the new logic   - Created DLNAProfileException   - Forced PNM to be parsed without MediaInfo - Improved logging in RequestHandlerV2"
Quick refactor of impl classes. Added enum list values to BankController and SponsorshipController.
refactor test
"Code cleanup, comments, refactoring, minor fixes."
"refactored in order to make it simpler...no more ""launchers"" all over the place...behaviors centralized in a Launcher API and a single HarnessLauncher..."
refactor for Apache Storm 1.x
TAJO-79: Refactor and Improve TajoCli. (hyunsik)
Code refactoring
Working version. TODO: refactoring CurrentMainDistStage and init time stamp
Major refactoring
Refactor opennms-model so that it does no depend on spring-security.
refactor field names to starting with m.
Massive  refactoring:)
"Fixed some maven exclusion issues, refactored ES clients into a single factory"
Great Database API refactoring and stuff
refactor: use interface for models and jpa entities
Folded IntDocVectorReader inside IntDocVector; same with TermDocVector; refactoring of other classes.
"Move UACA proxy into separate plugin, partially refactor some stuff"
"IDM-546 Rename and refactor a bunch of things.  - More renaming of ""databean"" to ""persistence session""  - More removal of ""DSS"""
PDF layout refactor (T8037)
"Some more refactoring, javadoc-ing. Created an SDK feature containing sources and javadocs. Removed unnecessary ""site"" directory."
Changed package name and refactored to use events instead
Refactoring and addng some more stream matcher Tests
Some refactoring in Permissions handlers
refactor code using ModelQuery
Refactored CRS handling.
Refactored EvaluationContext and reduced it to a minimum that is necessary to (de-)serialize data
refactor code
"Refactor block spread/decay, improve anti-virus capability"
"Starting setup of docker image (not working yet), and refactoring configuration a bit"
Refactoring and finished for ABM-249
Minor refactoring
beginning refactor of config/builder api
refactor config
"fixed localization, refactor dao & entity"
Refactor to prepare for external process test cluster
Project name refactor PrimeWorkbench -> PrimesWorkbench Why? Because the splashscreen logo says so!
"Started a huge refactoring of HaskellFormatter, some tests were removed"
[CXF-2991]:Refactor the code. Thanks Dan for reviewing the code and his suggestions
fix hdf withnew refactor
Refactor QueryIndexPermutation to use either the global query index occurence (prune limit) or each entry's query_index_occurences field.
ROO-3795: Refactorize audit addon. Moved from security addon to JPA addon
Refactoring
refactoring for demo purposes
Refactor out warp-parsing from configuration to method
Major refactoring and rename of project to nmr-fid.
Minor refactoring.
architecture refactoring
fcrepo-1149: refactor for unit testing HTTP HEAD passthru - Pass HEAD request through to external datastream content services - Normalize ETag values as MD5 checksums - Finish refactor of DOTranslationUtility for testability
start refactoring indexer * Thread and Indexer are two classes now * still need to fix visitors
"Fix issue #349: wrong isEntailed in PropSum, PropScalar and PropBoolSum + refactoring these classes."
Minor refactoring.   - move ConnectionManager out of the provider - remains package private.
"MAGNOLIA-2844, MAGNOLIA-3074, MAGNOLIA-1652 more changes after review - removed usage of google-collections - refactored cache key map into smaller chunks stored in separate cache - moved all cache-key handling into single place - CachePolicy - renamed various components (MBean, DefaultCacheKey, etc) - fixed issue with cache policy firing unnecessarily to make full flush also on changes to version space (e.g. when commenting on the page)."
"Some minor refactoring - method renaming, removed an unnecessary check"
ACT-119: Add web service task - Add support for namespace prefix - Refactor input and output associations - Enhance structure hierarchy
"Some refactoring, last commit before 5.11."
Big ID for Bible before getBible refactor
 - inferred edge/path refactoring
Refactored: construct the upgrader only after UpgradeStep
Refactored model processor.
Many refactorings to make the refactoring engine work with builtins.
refactor and optimize HBase implementation
refactored SVG hierarchy + refactored slider implementation to use D3 + svg
webadmin: SetupNetworkModel refactoring
fix bugs introduced in refactoring
Still refactoring
[BACKLOG-194] Reverted RepositoryResource refactor. Refactor does not work and creates file not found errors.
resources refactored
Refactor in OpennnasBeanUtils and some bugs resolved.
LocationHeaderTest Refactoring
refactoring names and messages on ServicesManagerImpl
Refactor of Channel Number simplification. Modification of condition around filtering numberings when the history annotation isn't specified
Refactor PPTX Table to handle TableGroupArea
refactoring a bit to have tests picked up automatically by maven. Flagging the broken tests.
Refactoring to create less redundant code
Converted Move static members refactoring to AST rewrite
Bug 337977: [quick fix] Add quick fixes for null annotations - Refactor/Move code around to fit existing patterns
Refactoring PrepareForMigrationCommand and MigrateCommand in order to cope with the new design   - Basic tests added
More refactoring.
* refactored tests * change parameter validation
Refactoring - tabs to spaces and naming conventions
refactoring cloneRow and cloneColumn
minor refactor
"refactoring of the index API.  * BTree.getRow() got renamed to Btree.rangeQuery (which is what it actually does).  * AdHocIndex.getIterator() got renamed to AdHocIndex.query (which is what it actually does).  * All query methods that take a visitor now do not return anything, they just propagate down the visitor.  * When an index is queried with a visitor, both index implementation now simply notify the visitor when a matched element is found, and do nothing more (no more aggregation of row indexes)."
"refactored test cases, added test cases for new functionality, fixed bugs"
ROO-2745: Post 1.2.0.M1 code refactor and clean up - more reducing code duplication when creating fields and methods
Refactorign + Default configuration
Refactored IO to reduce redundant code and hence the probability or errors occuring.
"refactoring of relcount, tests passing, cleanup tbd"
"Rename, refactor some of the consumer api."
Set/Map refactorings.
refactor
"Create MockDatabase code to help test OutagedBegin an outaged test classrefactor outaged to be testable"
Refactored: renamed TestClassFinder to TestFileFinder
"Refactored OEntity, added NetflixConsumerExample"
AM-3396 - refactor based on review comments.
refactoring
"Refactory SQLDataSetEditorPage and MetaDataProvider,makes it easy to extend in future"
"refactoring, javadoc"
logging subsystem refactored and slightly simplified
refactor Swagger extensions to separate project
"remove unnecessary code, refactoring"
Refactor and reorganise
refactor ObjectMapper provider into proper modules
refactor Migrator so that repositories are cleanly stopped if migration throws an exception. move Migrator from log4j to stderr and stdout. fix up userdb url with needed schem info.
refactor AuraClientException and getSourceCode code snippet for where error happens
MAHOUT-11 - refactors lots of the clustering code to get rid of its static fields. Thanks to Drew Farris for fixing most of the code.
Refactor query assertions.
Refactored SnapTest
Minor refactoring
code refactor
Finish refactoring of Refresh Access Token Methods and Access Token Starting Status
refactoring
Refactored the code so that a new OperationService can be injected.
Refactored code changed access specifiers.
Refactor into multi-module project. Drop Registry abstraction. Revert license back to LGPL.
minor refactor
ACCUMULO-841 Refactor randomwalk State class
Refactored the i18n impl to use an AsyncGenerator rather than a decorator.  This will make it easier to also output a JSON file that developers can use as a starting point for thier translation files.
REFACTOR: Changed naming of service methods to getXXYYZZ for Customer
modified by refactor
"refactoring for CompositeItemStreamReader, can be used as util"
Finished initial refactoring in database package.
Refactored InsertCommandTest for using TestResourceTree
refactoring
Long-needed refactor
refactor struktur modul supaya lebih reusable
Resource API refactoring - reference to the IWrfRepository was added in the IWrfResourceProvider interface.
Moving reference types in the same package and subsequent refactoring.
Minor refactoring in the Karaf Workbench project to stage support for the editors
Refactor ManagerToken name and tests
Introduced SplitByChapter command along with necessary refactorings
intermediate refactoring step
"Activiti Cycle -  Architectural Refactoring: restructured MimeTypes, RepositoryArtifactTypes, ContentRepresenations and others using annotations. "
refactored
added new ADTs and refactored existing ones
"[changed] AndroidApplication.initialize() refactored, doesn't take a LayoutParams anymore. Will just set the GLSurfaceView to the contentView, filling it. [added] AndroidApplication.initializeForView(), will return the GLSurfaceView (but typed to a View, don't mess with it) so you can put it in your layout wherever you want."
Refactored getGame() to getEngine()
Fix missed refactor that was causing build failure
Almanach refactoring: - wiring the stuffs around the creation and the destruction of an Almanach - adding the ground of almanach UI features from the work done for user calendars.
core: Refactor of getJsonDiskDescription
HADOOP-2555 Refactor the HTable#get and HTable#getRow methods to avoid repetition of retry-on-failure logic (thanks to Peter Dolan and Bryan Duxbury)
[refactor] register mavenContext service from maven
Major clean-up and refactoring. Use interfaces for media players. API is now not backwards compatible with vlcj 1.1.x.
Adapter has been refactored again. Code PASS the unit tests =)
HSEARCH-1370 Refactor integrationtests/AS into Narayana integration tests
Refactor tests to mock the HttpServiceBalancer
* refactored test framework slightly to support more interesting tests and to make the contract more enforceable * added some new tests and test cases
refactoring: decouple DIImport from DiagramEditor
"MessageSource Refactoring:  - Created OnyxMessageSourceFactoryBean responsible for building a MessageSource specific to Onyx  - Renamed ruby's resource bundles to the new convention (language_en -> messages_en)  - IStageExecution is not responsible for building its own status message, it now returns 2 MessageSourceResolvable beans that are displayed as required in the StageSelectionPanel.  - Removed dependency on ApplicationContext and UserSessionService from AbstractStageState  - Refactored stages accordingly."
"Moved according to recent refactoring discussion: IAtomContainer.getIntersection() -> AtomContainerManipulator.getIntersection(IAtomContainer, IAtomContainer)"
Refactoring.
Refactored serialization now working
o Refactored code
MLHR-1255: refactoring of cache manager
[CXF-6232] Refactor CXF's Atmosphere based WebSocket transport for more flexible and extensible handling
#NAME?
ObjectPartition api refactoring
RF-12900: refactored some utils to respected ui packages
Code refactoring
Refactored *MathFunction classes to be named *Function instead. Added a parent Function interface.
"Core: refactor update logic, pt.11 (#935)."
refactor
refactoring and improving AsynchronousRequest class structure
"Feature #6237 : - fixing merge conflict (REBASE) - refactoring the scheduleevent user notification builders in order to factorize the most as possible the redundant code - adding common user message template for call again notification message content - fixing the fact of that participants could not be removed ! - simplifying some code in order to get it more readable - optimizing the ""Call Again"" popin display"
Done moving integration to SpringData + some cleanup and refactoring
"Refactored a bit, trying to get my head around a decent approach. Introduced Guice for dependency injection (couldn't stand not having it available anymore)"
"Fix Scanner issue, rename teams, refactor main method to be more user friendly"
package rename refactoring
refactor: moved DemoMastersHelper to the src tree
Moved threadhandling code into a separate package. Started refactoring code (all thread data now held in an enum which is easy to update).
Refactoring and modularized the replication to a separate package
refactored AbstractExoContainerBasedTestCase as TestNG test in order to allow starting several JCR in a testsuite sequence
Refactoring
"Major refactor. Fiction scripts are now being parsed. There is still some dead code to trim, but now the fiction and parser configuration (vocabulary) are being loaded from the file. I still need to process expressions when verb messages are received."
"refactor promote block code, adding comments and format"
refactor mock SNMP agent and SNMP tests
- Enhance fval servlet for structured query's gene auto-completion support - Some refactoring of structured query service
"metamer: panelMenuGroup: client side handlers tests refactored, passing tests put back to suite"
more cleanup / refactoring.
refactoring
Delivery part code refactoring: draft rxsmppsbb update
refactoring
Refactoring
Resource Refactoring - bug 153329
refactored code. Created Space material management interface.
refactor logging
Refactoring http responses
Fix build errors related to refactoring
Finished first draft of streams refactor with no polish.
o Refactored code
"Add current value check to RedisInstaUpdater, only update redis if not equal to same value Decrease timeouts to 5secs Cleanup and refactor some"
Refactored ProtocolViewerContoller to spring controller
Refactorted Externalizer interface to marshall package since now it's not linked to org.jboss.marshalling. Also moved MarshalUtil class containing helper methods.
"Overlapping matches are now handled correctly, and due to some refactorings, all tests pass again"
"LoggingMain, refactor out method of Examination, better starting solution generation for Examination"
Refactored some classes into singletons
Refactor into maven modules.
Code refactoring
Converter and base class refactoring finished: From 109 GWT tests 10 have erros and 10 are failing.
refactor event publishing and fix the origin of the event
Minor refactoring
"Fixed a bug when locating JavaScript runtime, and refactored common code"
refactor: moved WorkingSetGroup composite to components package
"Some minor refactoring, initial code for kickball task with qualifying test, and many bugfixes.  Will require DB update."
Refactoring of RestClientContainer and RestClientService by adding AbstractRestClientContainer and AbstractRestClientService.
some refactoring
Refactor for Maven Shading :)
updating after huge revision and refactors
Refactor session panel. Add an ability to add metricPanel selection listeners
103044 [import rewrite] Problems with nested captures in quick fixes and extract ... refactorings
refactore geocode dialog to find places
Began refactoring Shell to use CommandController API
"First bit of refactoring done, now testing"
Refactoring and more types.
CAMEL-10638: Refactor ServiceCall EIP
refactor
Refactored importer and datasetdeleter to Spring controllers
Refactor Logging system
"Fixed issues 798 and 799: - new binary protocol version with huge refactoring of addCluster, addDataSegment and dropDataSegment - strong refactoring to clean the code behind cluster management - created new OClusterFactory to be used from Orient class - deprecated Logical cluster (yeah!) - new ODatabase.getSize()"
Refactor tests
Refactor ConnectionTest some more
refactored the AlgorithmServiceImpl to separated the methods that generate algorithms in different ways
DRILL-3987: (REFACTOR) Working TPCH unit tests
refactor
Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (move buffering of probe measurement requests  to MeasurementOperator)
- Summary: Checked into CVS Head and 2.5.x branch. Refactor chart filter code for further features and fixed minor bugs.(#23107)
refactor of bean-converters
Refactor and port to source level 1.7
+ improved sessionHolderProvider discovery mechanism (declarative list or JDK 1.3 META-INF/services supported out-of-the-box) + TransactionAwareRepository added + refactored JcrOperations in different interfaces to mirror + added complete JCR exception convertor + changed the contract of SessionFactory interface
"Refactored control package so all basic classes (Permission, FieldAbout, ActionAbout, State) are no interfaces.  Created default implementations in a subpackage."
Refactoring to spring
Heavily refactored market data feed
Base d'implémentation pour l'affichage des notifications de mises à jour. Probablement des choses à corriger/améliorer/refactorer. ref #521
Sample refactor
SRCH-111 refactor after data scale testing
Fix bug in PlayerStreaksSupplierImpl that allowed a player to get back on a goal or assist streak even when they had a game with zero goals or zero assists. Refactor Urls.getPlayerStatsUrl method into getSkaterStatsUrl and getGoalieStatsUrl methods.
Refactored CacheLoader to have a push mechanism.
Additional Kernel32 definitions + a bit of refactoring and initial attempts at a non-IOCP version (overlapped).
[SUREFIRE] refactoring
KS-2168 : rRSS processing refactoring :  - removed usage of SessionProvider in favor of SessionManager jcr tasks - splitted respoisibility between Answers and Forum dedicated processors - made smaller methods
Refactoring for 1.0.3
Refactoring DbImport classes
"added parameter handler, refactored code, and used the existing repository importSchema code"
Make StateProvidet gather data from the hypervisor; some refactoring
refactor code structure
init première servlet + refactoring en français + petit nettoyage de l'architecture
RESTWS-211 - Refactoring SearchResult to PageableResult
RAVE-647 Refactored Region and RegionWidget
refactoring the token replacement in the config and inventory export files to be more efficient. everything should ready for the actual tests now
refactored error handling
core: Refactor SubchainInfo
refactor project structure
Refactor for SubreportBuilder and the way subreports are handled
"Updated polarized reference priors, need DiploidGenotypePriors class that is directly used by the NewHotness genotypelikelihoods, more bug fixes and refactoring, etc."
Changed: refactor security code
Converted emoticons to image resources. Refactored message formatting. Fixes issue 242
Files plugin: refactor security (#815).
Started refactoring FindNullDeref to take advantage of @NonNull parameter annotations.
#14 Filtering fixed and refactored
#204 TIFF metadata refactor
refactoring + adding click via atoms.
OGM-946 Refactor *UpdateTest
ARQ-2041 Refactored project structure to have an impl module to allow for ftests.
Refactored Future API
more package refactoring -- distinction between graphcentric and vertexcentric graph algorithms. PeerPressureVertexProgram rewritten with latest API update.
Refactor to prepare linux to use posix_spawn.
refactor persisting code into the provision service
#NAME?
Refactor: Remove old visualization operations and use the new ones instead
Extending builder better work in Eclipse #107 Nailing down the details Refactorings
refactored class name
DDF-2644 Refactored EndpointUtil and RealEndpoint
Delivery part code refactoring: draft mtsbb update
Refactored Board related classes.
minor refactorings
Refactor excel emitter for ooxml use.
Refactor code
yet another refactor of HttpInput.... must read -1 before isFinished is true
#1166 - Refactor to use beginServerTransaction() to make Ebean.currentTransaction available in lifecycle handlers
[US 6] Refactoring common test classes into test-utils module.
DDF-210 - KmlEndpoint refactored - removed subscription logic
"MONDRIAN: Access control for XMLA requests, contributed by Pedro Cassals. Each XMLA request for metadata now executes in the specified role, not as the superuser. Move RolapSchema.getSchemaLoadDate() up to Schema. Move RolapConnection.getDataSource() up to Connection. Add generic Pair<Type1,Type2> class, and use in various places, and other refactorings to make things more strongly typed. Remove uses of the deprecated 'DriverManager.getConnection(..., boolean fresh)' parameter from the code base. Clean up logic which determines whether the schema-pool is used. Take a pass over the test suites, minimize the number which are creating their private schema (to improve performance) and fix those which are polluting the shared public schema."
"refactor to move all the jar files into 'lib' directories, and to move core/spi into core/api and split core/convert into core/api and core/impl. This latter change is because java can't separate an implementation dependency from an interface dependency."
Some more refactoring to test code.
missied a few 'capsd' import statments... also some simplying refactoring of the Table classes... paired with Ben Reed on this
Refactoring tryReplaceArguments method (was 120 + lines)
"Minor refactoring - method names, method order, collection construction"
refactoring (use KVPUtils to create query string)
refactor several classes' packages; remove residual submission related classes and declaration
Package refactoring related to reports: * Move org.mifos.application.reports to org.mifos.reports * Move org.mifos.application.admindocument to org.mifos.reports * Move org.mifos.application.branchreport to org.mifos.reports * Move org.mifos.application.cashconfirmationreport to org.mifos.reports
Minor refactorings
Refactoring: Provide UISession to session singletons
Refactor FileSystemMaster side permission checking
Refactor JUnit Tests for VR
HDFS-7430. Refactor the BlockScanner to use O(1) memory and use multiple threads (cmccabe)
TIKA-132: Refactor Excel extractor to parse per sheet and add hyperlink support     - Refactored processCellValue to a getCellValue factory method
"first phase of the refactoring. IOSDriver now controls everything happening on the machine, and supportspotentially multiple sessions ( not sure how possible that is with instruments. 1 simulator only, but maybe several devices from the same machine in the future ). The old classes still have to be removed. Some tests need to be refactored to pass again too."
GTNPORTAL-1091: Refactor method and change access modifier
Refactor SOAP message handling. Move from string to SOAPMessage
"Improved the export feature URL parameters are now decoded if necessary (closes dandelion/issues#189) Refactored the passed export parameters. Now all requests (default or custom export) contains the tableId being exported Generated Javascript is better displayed (indentation, CR) Better exception handling when the export class is not present in the classpath URLUtils has been cleaned and all export-related methods have been moved to ExportUtils"
Refactored class names from *Comet* to *Cometd*
Minor refactoring
A whole bunch of refactoring to support a MediaOverlay which will allow us to render sprites and animations anywhere in the frame for those times when you just need to draw outside the lines.
"Refactored SAAJ implementation from two separate class hierarchies (SAAJ 1.2 and SAAJ 1.3) into one single hierarchy, using bridge pattern (SaajImplementation)."
Refactored SynchronizedPrintStream: don't expose the CGLIB Factory interface
refactor the detectMatchedQueries method
Refactored db controllers.
FIX Typo refactor rename
refactored nodepool to avoid having internal state and to survive restarts
Converted two more refactoring tests to the new framework.
"Refactored tests to avoid collisions when run as a super suite, corrected line-endings in Ruby files."
Join Refactoring to use new Join DTO model
refactoring of cdi(seam3 as well) tests to use new version of OpenOnHelper + some other enhancement
Refactoring JavaScript compression so it is pluggable
Refactoring jannovar to put parse code into IO
Wires BPMN placeholder. Further refactoring towards re-use of drools-belief
[DSU] refactor gtfs
refactored buttons toggle to reuse code
"Version 1.4.0 : jump to feature, sending and sharing photos, G2ConnectionUtils refactoring"
refactoring to prep for more parsing
Applied the patch(finally) And done some refactoring here and there.
Refactoring to convert Position and Rotation into bukkit.Location
Updates due to refactoring in kie-services-remote
Refactored invocation dispatcher classes to remove duplication Added method to set explicit error message on expect-never
"More refactor, and add JUnit test"
"Adding comments, refactoring a couple of methods"
Refactor Y optional grouping UI code to remain using UI provider pattern.
refactor packages
refactoring
refactoring exemplos
refactor/bug fix
Refactored wizards to  allow to add import and export wizard
additional work done on getting fabric side of IDE working again. Still lots of refactoring needed due to the latest changes on fabric side (git & curator)
"Refactor of Frame class, additional tests"
refactoring and added cobertura
Refactored the DefaultPopulationStrategy to also include some of the decision logic that was previously in the tag. Made the PopulationStrategy a ConfigurableComponentn and wired it into the configuration.
Added new hover icons Refactored InstalledPack/PackButton/ModpackSelector for further clean code and direction towards custom modpacks
Refactored and removed CandidateSessionStatus
Refactored Ant tasks.
refactorings
"add koala-rest example, refactorings, fixes #148"
Added BZ#1036976 - RFE: Provide a way to automatically build translated books. Refactored Translation Server details to be stored in the database.
"Refactoring functions in analytics that deal with SABR results - they now handle various sorts of instruments (e.g. swaptions, cap/floors and CM swaps), rather than having one function per security type."
More refactoring to make the main method smaller.
refactor dataFile into subclasses
Refactoring code.
ItEr28S06CUAsignacionGrupoRecursosAPlanificacionItEr27S06: Refactoring AdvancedAllocationController initialization so it's clearer.
"I am doing a massive refactoring, to make the structure a bit more understandable. Need to commit to continue this."
Refactor itests to use RedDeer2 (#536)
Made playerData a static class and refactored accordingly
"refactored loading sij file, minor bug fix for null pointer exception"
minor refactoring and (not so minor) documentation of AE test code Hopefully this makes it somewhat easier to understand.
Refactoring and more solr stuff
refactor domain object
"Refactor how netstat works, now use /port_info endpoint to get all the info about a given port"
refactor provisioning 'differ' into the model classes
Big refactoring of module/plugin framework.
Refactoring core operation
Moving things around (refactoring).
Code refactor and Free Avatars
refactor AdministrationView and InventoryView to extend the new AbstractSectionedLeftNavigationView base class; add a new Test top view for lumping together various test views
"CASC-33 Add SingleSignOutValve, which required some refactoring in core org.jasig.cas.client.session package to facilitate code reuse."
Refactored four managers
Refactored method name: SolarisFilter#get[Attribute]Name()
"121880[build path] refactoring of build path code (simplify, code sharing) - set/edit filter wizard"
refactoring
Refactored find(ModelQuery) and findWithOrder(ModelQuery).
refactor checksum bridge
Refactor constructor with array paramter into a method of its own.
report refactor part1
refactoring to allow for alternative flow graph implementations
avg function: small refactoring to improve code reuse and fix possible ArithmeticException on non distributed executions
Refactor to matbooth.co.uk namespace.
[refactor] moved Balance into account package with Wallet
Refactored button enable/disable in PlayerView
fixed some messages still appearing with messaging turned off fixed spawner radius calculation fixed outdated sections of ecoCreature.yml wired option to reward wolf owners for mob kills by their wolves replaced ecoEcon class with Register heavily refactored code to ease maintenance moving forward
Refactor now-deprecated Thymeleaf processor
"Refactoring, buildpack if missing in the manifest will be left missing. Ensure we never lookup cloud app given the project since it's not a 1-to-1 mapping"
Refactor the code. Enable thread local session.
Minor fixes and refactoring
Refactored 1-1 NAT feature:
refactor JCR maven structure
refactoring
large source refactoring
refactor
Issue 440: started refactoring maven for sandbox items
refactored everything
Refactor tombstone implementation
refactor the model event info code
Add configuration test with wrappers and builder to enable view refactor
Refactored test
Package refactoring
Refactoring `getExt()` to `getFormat()` for clarity.
Refactor RemoteQuery
refactor a bit and javadoc
refactored code between BasePersist and DatastoreHelper. Simplified transaction-with-retry methods. Fixed bug related to retrying transaction after ConcurrentModificationException.
hplace sample refactor and changes
Refactor GitHub types
Refactor method name
https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE - Highlighting of drop container has been added. - Drop algorithm has been rewritten. - Code has been refactored.
"Refactoring and architecture about object3d classes, initializer and objects3d. The engine is more isolated about the objets the octree contains and interface has been created for better extend types of objects supported. An object library is set to the engine which gives information about object classes."
#POULPE-483 - Refactoring
#NAME?
Refactoring of testing related code
some refactoring
refactor(engine): reuse activity execution mapping in modification
Bug 113663 [plan item] Refactor the runtime.  Initail commit
Fix NPE when previous coordinator is restarted. Refactor command dispatcher logic using channel that does not discard its own messages.
refactored StrategyLoader
Refactoring XML loading to make it generic (not Catalog specific)
Refactoring out warnings. Changed project graph to display on first successfully parsed build. Updated config help to tell about GLOB usage. Updated tests and test workspaces for splitted output and failed since tests.
Refactoring du modele
DNA-467 Additional refactoring to move toward a working search engine.
"refactoring WorkspaceProviderTest, cleaning up methods"
"add tests, refactor get-all-parse-tree stuff. add Trees support routines."
refactor(engine): allow different spin formats for spin variable type
Refactor Grails workaround to fix issues with run-app.
#517 - Refactor DdlGenerator such that it is not an SpiEbeanPlugin
prepared for CVE data by refactoring CPE code
Refactor all occurrences of pheasn.de to nicewuerfel.com
ISIS-1153: minor refactorings on DataNucleusApplicationComponents; reverting CreateSchemaObjectFromClassMetadata to instead go back to creating own connection rather than through PMF
"#81, refactoring MappingMethodReference to MethodReference to accomodate for factory usage of this method"
Pretty huge refactor related to properties files and configuration. This allows configuration files to be read from the classpath (and eventually in-memory).
"Refactor web sockets - Remove High Level API (2 different API's is enough) - Add utiltiy classes for dealing with low level API - Refactor JSR-356 implementation - Get everything passing autobahn against (low level, programatic JSR-356 and annotated JSR-356)"
"* New violation outline view with additional (optional) columns, uses new symbols * Column sorting for AST view and Violation Outline * Rule table shows dysfunctional rules in italics with warning symbols * Bugfix for rule selection in grouping mode * Refactored rule column descriptors * Initial support for custom formats for column data * Support for new File property type * Property panel now disables property controls deemed non-functional by the rule * Refactored cell painter builders"
Refactored Simulator to send test related operations directly to the SimulatorAddress of the test instead of its parent Worker. Removed all testId String from test related operations.
js ast visitor refactoring
Refactored the previous pull request to require less work during animation update.
"SONAR-5111 Complete ""api/qualitygates"" WS documentation and do some refactoring to split actions of this WS into multiple classes"
Issue 377: refactored value classes and tests so that we could test and implement credential storage
minor refactoring
"internal changes and some refactoring. slightly different final report. Now can take tracks that implement either Genotype or GenotypeList; takes an arg specifying what variants to look for (POINT - aka snp - or INDEL); takes an arg specifying whether default ref/ref call of one type (INDEL/POINT) should be implicitly assumed if another call (POINT/INDEL respectively) was made at the same position [this is probably most useful for indels and only (?) for sam pileups: if we have only point mutation call at a given position, it does mean that we do have coverage, and that there was no evidence whatsoever for an indel, so we have an implicit 'no-indel' call]"
(1) Add support for Spring data JPA (including integration with JPA) (2) Refactoring
refactored the doConfigSubmit method.
"refactored ExecutionPeriod, create some new methods: isCurrent, isClosed, etc"
Refactor - made card specific effects to attack random opponent shared effects
Refactored code to distribute order adjustments to order items to instead distribute order adjustments to fulfillment order items.
refactoring.
Refactor ssh-related classes into their own package
adjustments for recent refactor in jbpm-console
storage remote refactor for centralize connection reopen
JBIDE-19795: Fixing Bower preferences. Refactoring
"Massive refactor, encapsulated actions and q values into states"
Refactor to allow non material enums
Big refactor
new method pointsToPassesPred() for demand points-to analysis; various refactorings; some new tests
A few comments and refactoring
Refactor portlet controller
Revue checkstyle + refactoring.
more reorganization and refactoring
Refactored animation management to work towards more complex animation trees
Refactoring
364134 Refactoring: Split off target platform computation
Deepamehta 3 Server refactored as a regular plugin. Their is no proprietary bundle activator anymore. Version changed from 0.4.3 to 0.4.4-SNAPSHOT.
refactoring to reuse some common parts
refactor the tests some more to make eacy simpler
JBRULES-584 - major refactor and cleanup
"Refactored the code in order to correct errors & warnings from audit tools 'checkstyle, findbugs, cpd ...'"
common: Refactor PortRange and move to common module
Refactor metrics to expose richer feature set
general refactoring. Adding more support for Logtalk related operations
Refactoring to tidy up resolving and combine object factory and manager - II
refactoring the tests
refactor bundlizer from plugin creation operation
added support for 1.8 mobs refactored player messaging
Refactorings and cleanup of the Kernel
[jayes] refactoring
Refactored: renamed TransparentReferenceImpl -> TransparentReferenceBackend
Start of refactor trying to cope with Android Issue 12117
added notion of driver and refactored data access
More saga stuff and a small refactoring in the model. Now the orders are related to portfolio instead of users.
kitchensink: Refactored the database manipulation into a service layer to facilitate testing
Refactored the data structure.
[WFLY-490] refactor StandardRolesBasicTestCase to use all the management interfaces
refactoring
Refactoring GeoJson deserializers
"Distance calculation refactorings: Eliminated legacy LatLng class. Ported the arcDistance() method to DistanceUtils.  Still yet to determine if that logic is haversine or something else, and how it performs. Refactored DistanceCalculator to take an x,y, and removed to distance-to-shape method (wasn't used), and added an abstract base class with a convenience method."
Small refactor.
methods refactor
"Refactor of XMLReader to IBXMLReader and XMLWriter to IBXMLWriter.Refatoring all methods from static to instance methods."
"NOJIRA Major refactor to split out the utils into their own package and remove hibernate dependencies from entity broker, still need to add in DDL for Oracle and other database though"
"Major refactoring. Added javadocs, ITopologicalSortCoordinator, cleaned up generics implementation, and cleaned up DependencyGraph."
Refactored the code a bit so it makes more sense
Refactor: removed first level subpackage samples
#NAME?
refactor SamplePortlet.java
Fixed error when removing calls to system exit (fixes issues #5 and #6) + Refactoring: renamed a method
extracted IAnchorable interface and refactored
More refactoring of parsed results / result parsers; added basic vCard support
code refactored(methods extraced)
Really big refactory in Service Deployer
127668 Refactorings with wizard based user interface have bad dialog sizes
"ISIS-14: refactoring TCK dom repositories, starting on tests for parent/child"
#NAME?
Refactor: split validate method in method per validation type
refactoring change MenuBarApi to MenuScriptService
"[MODELLO-56] Major modello-plugin-xdoc refactoring Submitted by: Denis Cabasson I did not really apply the patch, since it did not apply, instead I picked many of the good refactoring ideas The patch also contained bugfixes: I limited the changes to refactoring work"
refactoring event processing service
Finish refactoring of Bitmap and refactor BitmapBounds and ErasePatch. Move tests into separate source folder.
Method refactoring.
Minor: refactoring
"fixed webapp integration tests, and refactored so easier to run just some, and to extend"
About to do major refactor
page fragment for r:dataScroller refactored tests for list with data scroller refactored
DRY refactoring via AbstractCertificateRepository
refactor
#NAME?
refactor injector
refactored package structure
refactoring (Default)AdministrationDao to be split into two parts and don't use an interface any longer
"-Added LB serive provider (seperating it out from Firewall service provider) -Bringing add/delete/list of all external network devices under one unified API's (addNetworkDevice, deleteNetworkDevice, listNetworkDevice) -Refactoring External network manager to work from both sets of API's add/delete/list NetworkDevice and add/delete/list External Firewall/LoadBalancer"
"Fixing PMD violations, some refactorings, adding logging aspects"
Refactored admin interface structure
Refactored method
refactored group search
Java8 Refactoring
final refactoring update
- split persistenceInit into an interface and implementation - refactor reportsGenerator:     - move into helper     - add test -> from tests fix failures where implementation did not follow the specification
refactor assignment wizards
ISSUE #10 - gwt support  - Added gwt dependencies - Changed JsonDiff to use addFirst and removeFirst instead of push and pop (not supporte by gwt's jre emulation) - Minor Tests Refactor to allow GWTTestCase
added some user plugin hooks and a little refactoring to use them
Refactor into a single activity - No more random spinners ^.^
api_refactor
"adding google guice, unit tests and some refactoring"
Refactor LIBS into utils.locusiterator before refactoring
CAMEL-1533: Refactored Expression interface to only contain a single method. And fixed that camel-bam delay betweens sleep bug also.
~ Refactoring to imply the design that the tailed reader's source could be anything other than file's
fixed more refactoring related stuff
Refactored FaveDataGrid into own class
"Refactoring sink interface, element interface"
- PR 95 by nicolasegomez - refactor doc list
refactoring main components
 XWIKI-11486: Batch API to send large volumes of mail * Refactoring to reduce Class Fan Out of DefaultMailSender (was 21 instead of 20)
Beginning refactor of jannovar with interval tree
Refactoring in preparation for handling @import stylesheets
refactoring to Whole/Partial message handlers
Refactor de registro de profesor
"[Tutorships] Refactor: In the AbstractPrescriptionRule hierarchy: renamed classes to correct typos, renamed a method to avoid confusions."
HADOOP-9805. Refactor RawLocalFileSystem#rename for improved testability. Contributed by Jean-Pierre Matsumoto.
start of command packet refactoring
refactorings
1. Refine stack unit to adapt two stack policies and mark Area using stack together policy 2. Refactor stack code in Bar and Line chart 3. Render bottom tape of Area chart if current value is negative number(188029)
Refactored
Further refactoring and test additions.
https://issues.apache.org/jira/browse/AMQ-4103 - fix default jdbc locker impl - same problem as lease after refactor from https://issues.apache.org/jira/browse/AMQ-4005
Update Spring Boot version. Refactoring.
Small pull-up refactoring
further Shrike refactoring to generalize instructions
TestRestRefactored
"Work in progress for PSD metadata support:  - Refactored metadata support  - Moved standard metadata support (EXIF, IPTC & XMP) to separate module  - Changes to PSD metadata implementation"
"New way of defining configurations, now global with a matcher to determine the configs to apply on a computer Remotev the need for node property class Lots of refactoring"
some more refactoring
Refactor+SetVar
Refactorización: he extraido un par de métodos nuevos.
refactoring
refactor
Refactored default rhyme
Refactored Rayo Server to support XMPP Servlets V2 and Prism 11
"[JBDS-1321] refactored code, added keys for JBDS reporting"
Bunch more policy refactory to get nested policies asserted and their interceptors added
Refactoring
refactor post body wechat request.
Refactor topological test sort to extract graph and results
bugfix: missing end brace after refactor
Previous commit caused test failures with gdb 6.8 due to a breakpoint hit not being generated when using SyncUtil to set the breakpoint. Avoid using SyncUti for setting a line breakpoint. Also some refactoring to reduce clutter and code duplication.
"refactored integration tests, added boundary events to sub processes, fixed triggering of receive task with attached boundary event"
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
vjax refactoring - marshaller now uses xml type rather than string concatenation
[MIN] Refactorings
Fix for #865 Refactor/Re-implement BroadcasterCache API
FutureSecurityBean refactored to separate asset class types
refactor test for http://code.google.com/p/mybatis/issues/detail?id=506 
Updated SPDY code to HttpChannel refactorings.
Refactoring. Fix layout issue in result picture.
* Refactoring structure
metamer: @columnClasses and @rowClasses tests refactored
Refactoring. more like ehcache impl.(2)
some minor refactoring to fix some typos
Huge refactoring and moving some tests
"FEND-304: Refactor to fetch ""about the authors"" fields from article XML as lists. Page omits the header if none and displays as <ul> if more than one."
Refactored noughtsandcrosses example to use uispec4j.
"More work on support for primitive generics. Ported NextMethod() logic from C code, and started building up test coverage. Refactoring is next.."
https://issues.jboss.org/browse/JBIDE-8115 : Support for multiple selection in visual part - small refactoring has been done
Can group MojoExecution by artifactId + refactor.
refactor all statements (factory approach)
refactored global to resource documents
SONAR-4700 Refactor the way to get differential periods by loading them only at project levels
Instantiator and proxies refactoring
refactoring
Refactored to make demos a top level module.  Added new assembly modules for cli and demos.
refactoring: renamed getDeclaringNamespace to findDeclaringNamespace. Made regex heuristic work for in-ns as well as ns
Refactored test to use ui-test-harness
GenericParser-related refactoring.
JLANG-39 small refactorings to DataValueGenerator + made some parts public
Refactor functors from inner classes to subpackage
"Major refactoring of core. Added configuration outside of web.xml, jaxb for core and spring namespace for spring. Introduced Authorization and protocolhandling."
Refactor with better naming and prep for release.
#NAME?
first refactor of security contexts
refactored some view methods to viewelements change query icon when query is false
cross validator refactoring
Another piece of code refactoring after noce walk through
Refactored callbacks to be based on Guice EventBus.
partial refactor of eval
Renamed packages of core refactoring to internal [db]
refactored to use Jetty Continuations for Async HTTP request processing
Refactor: extract method & add field for tests.
"Refactoring to work with newly refactored StoreClient, PutOperation"
api_refactor: move admin level domain apis to admin pkg
Refactor on how RR treats soft clips
fix STS-803 (small refactors over pull request)
cdn code refactor
refactored test classes:   (i) removed assertNotNull(jestResult) lines because result object cannot be null   (ii) now using error message from json response as the error message when asserting result.isSucceeded
REfactoring
"Refactoring commands, stage 2"
Refactor some readers and writers.
"Changing API, adding factory feature, refactoring tests and code"
Refactoring.
DRILL-4994: Refactor DrillCursor
"refactor (big step, bad, shame :(   )"
refactoring: Putting all operations to org.ic.solaris.operation.impl
Refactored communicator so that we can not do some things in the peer client (which runs on the server) that we do in a normal client (which runs on a user's computer). Eventually we'll make a custom Communicator for use on the server that integrates with the ConnectionManager's polled socket I/O which will be easier now that this bit of factoring has been done.
Refactoring (not completed)
o Refactored IT plugin
Refactor all packages and references to replace com.metamatrix with org.teiid
- Added missing state (NOT APPLICABLE) to Ruby state machine. - Added corresponding unit tests (and refactored existing ones).
refactor class name
"Fix for [HER-1291] accurate scoping not possible at log-recovery time; URIs may be recrawled against expectations * FrontierJournal.java     refactor to always operate on CrawlURI instances (with hops-path and via info), and to write longer info on success/failure lines"
PDT API refactoring: put internal classes under 'org.eclipse.php.internal.*' package.
Refactored AisView and made a multisource filter solution
"JBRULES-1625 Create Scheduler API with JDK implementation -Basic refactoring for for TimerService, instead of Scheduler"
issue #101 wrong refactoring of previous commit corrected
"major refactoring of Errai IOC -- also, achieved 100% code coverage of the core TypeInjector and ProxyInjector classes. Yay!"
"More refactoring; mainly pushing more stuff out of MD.java and into the clients.  This may end up getting pushed back in again, but I think it's the right thing to do for now."
refactoring
CAMEL-2603: camel-cache now supports GET operation. Refactored code to properly shutdown cache manager. Applied patch with thanks to Volodymyr Buell.
[AS7-6334] messaging resource transformers refactoring
Added air robots and refactored code pieces and introduced unit tests
the big scope refactor
refactoring slightly
"DDF-1149 Improve resource stream reading and service lookup.  - Read resource stream to a file backed output stream, to limit memory usage.  - Construct dynamic service filters to lookup transformers directly by schema instead of iterating through all services.  - Refactor open search source to allow unit tests to override service lookup."
Refactor getSchedulesByCriteria to findSchedulesByCriteria to fit naming convention for remote API
Renamed IInitializableRefactoring
Refactoring  + Make the decoder aware of the event type so message like open and close can be discarted. Decoder API is not backward compatible  + Improve generics for derived Client and Request implementation
add Winstone test webapp and refactor some test case very early commit....
[DS-2648] Refactored class name and field names for files available feature to reflect the operating priciple of the feature.
"Major refactor of app installation code. Resolves dependencies in a more robust fashion, ensuring all dependencies are fulfilled before starting install. Also provides support for multiple apps installed as one batch, fulfilling dependencies from that batch if possible. This same code is also used when installing from the App Store, allowing dependencies to be resolved in that case. "
"Refactored the constructors of DBFTable, pulling out a private parse() method and adding a new constructor that takes an InputStream."
"Refactored classes, more tests, concurrent tests"
Added remove operation and refactor
Refactor unfavoring of virtual edges (#885) (#909)
Refactored greeter test.
First bit of minor refactoring of base types/vals
Refactoring toute est pas mal faite. Je crois avoir tester pas mal tout ( pas avec les test Junit) ... Hésitez pas a faire des tests avant la remise de demain!!
[KARAF-572] - Command to show all registered servlets and their contexts refactoring: - removed the CommandUtils out of the http and war bundle
Refactor non-broker ClientTests to JUnit 4
#NAME?
"Dropped BlockFactory, added Object factory, refactored CanaryBlock"
Refactor Jetty launches to have a common base and to all use the same package as a way to prevent external users from seeing it
WINDUP-102: Refactor java legacy rules
Major refactor of DiagramModel
Refactoring: Split up integration test for p2-enabled RCP
view fix and some refactoring
"Rename modules, and refactor framework core."
Refactored - moved a couple of classes to simplify package structure.
Refactoring POJOs with attributes used only by the client side
rename refactor
Refactored ChromeDriverConfig to override quitBrowser() instead of threadFinished()
Refactored the ActiveText and FailureTrace classes.
First refactoring session.
Refactor the org.crsh.command package
refactoring process
Refactor RPC Client to better handle timeouts
#POULPE-100 Wrote JavaDocs and refactored the BasicAclBuilder and UserGroupSid
"Removed biopax-api and decoupled cpath2-impl from biopax-impl core plugins. Removed/refactored plenty of old code (e.g., internal factories and interfaces). However, I had to copy some static and private methods from biopax-impl to cpath2-impl in order to create there multiple biopax attributes - after the web service gets BINARY_SIF (rather than BIOPAX) formatted data first; if there weren't the requirement to keep all the plugin's features from Cy2, >30% of code could be further cleaned from the cpath2-impl...)"
Refactored and cleaned-up diskstorage package. Added javadoc documentation where missing.
Move to Unit refactoring
Refactored some methods into ConfigResource
More manager refactorings and testing
"bug fix, return empty list; refactored to more intuitive name"
Added and refactored forced actions (next/prev/cancel/finish)
"refactorings: results class should be the future reports, delegating report generation in various forms to the issue"
Refactoring code to accommodate changes related to showing the remaining time in the tray icon (issue #17)
Small refactor for common function
config refactor
Refactorings to resolve bug #342677 (Refactorings to make StartupPageConfigurer package private)
"[SHRINKRES-51][SHRINKRES-60] Refactor the API to clearly delineate settings configuration as separate from loading POM metadata.  Allow configs to only be applied once.  Settings, if applicable, are applied before POM metadata is loaded, always."
Heavy refactoring of the Transport layer in the client.  
Refactoring: changement de package pour inf2015.tp
Refactoring Added Jetty in maven Spring io platform 1.0.3.RELEASE
Refactor PatientService add PatientServiceTest add StoreServiceTest
https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring - Drag&Drop-related methods have been moved from VpeSelectionBuilder to VpeDnD. - Other minor changes like commenting unused methods etc.
Refactored the CommandLineRunner a bit.
"Refactoring of PollHandler, and Batch to create a common hierarchy which helps us protect against CSRF attacks."
-Refactoring PsychoContract() --> psychoContract()
Refactoring.
"code cleanup, refactoring"
"refactor downloadlistener, sync system vm templates when adding a new image store"
Bug 394734: more refactoring of ideas
Massive refactoring of entities' types' system; before trying to get rid of ids of floor types and wall types
refactored the marshaller/unmarshaller tests to remove code duplication
refactor package structure
JBRULES-725 And major refactoring
SB-617: Heavy refactoring of the strongbox-storage-* modules ------------------------------------------------------------
First Refactoring to manage GenericClientTool for TreeMenu Implementation. TODO : Add GPTreeStoreComposite Implementation and Registar for the Actions. Write tests
refactor cosmo ui a bit:
refactor
"Refactor languages/i18n functionality. There are 8 standard languages: ""en"", ""nl"", ""de"", ""es"", ""it"", ""pt"", ""fr"", ""jj"" en: is default jj: is a placeholder for my language"
[OPENENGSB-2201] refactored base layout; two css errors
SWC-136: minor refactoring
general refactoring limiting the usage of the TermConvertable class
refactor + new GeoLift jar
refactoring class name
[refactored] dataservice - multi subscription test cases
CSPACE-361: Initial steps toward larger refactoring of ID Service
"NXP-5053: refactor RowMapper API, refactor context and fragment internals"
Refactored for better timeout message
refactor out admin tests
Refactored message dispatching message handler and extended support for header mapping and soap action mapping
api_refactor: refactor vpc apis
[PLAT-2921] Refactor SecurityLoader
refactor packages & introduce OpenIMAJ
o Refactored code
Refactoring finished. Tests not running. #30
refactor this
starting to refactor
"Humpff, big refactoring => use jbehaveProject almost everywhere, since localization can be project based"
CAY-948 Implement flattened attributes in Cayenne (preliminary refactoring of EJBQL translator)
Continued refactoring the tests - still not complete
Reduced CPU load (see #108) and refactored driver interface to accept an ExecutorService instead of a ScheduledExecutorService which saves a lot of resources as scheduling is not necessary anymore...
Further refactorings for modularity and decoupling
"Refactorings for SPI. OpenEJB currently failing due to classpath issues, skipping for now"
"websocket-api:1.0-b14 integrated, tests are passing. TODO: Refactor, TYRUS-122, TYRUS-123"
HBASE-5937 Refactor HLog into an interface
- Eliminate warnings in tests. - Refactor C3P0ConnectionFactory while I'm here.
Refactor init method logic extract codes to functions
"some refactoring, renaming"
Refactor MultipleNodeExecutor into the ExecutionPlan pattern.
"ObjectMapper renamed to Mapper, extended Mapper interface with allowsToMap methods, .using(context) merged into methods signature due to performance reasons, extracted handcraft implementation framework-independent part into separate module, made MappingContext more reusable, refactored lot of stuff, updated readme.md."
REFACTOR: Rename package to repository due to naming consistency
Complete refactoring of the exception handling in the disk storage layer of Titan. Added transaction retries for temporary storage failures. Closes #32.
Service refactored
"Updated DAO's to using the right type T, which caused some refactoring. Implement finder pattern."
Refactoring and stabilizing the tests
#NAME?
[164263] [refactoring] The JSP Java refactoring participants do not cooperate well with themselves or others
"- Refactored ChatValidator into ChatFilter, which can invalidate a message   by returning null instead of a filtered version. - Changed the MuteDirector to implement ChatFilter. - ChatDirector no longer needs a reference to the MuteDirector because   the outgoing mute-checking is now handled by the standard filtering code. - Fixed a bug introduced by Walter back in December that caused the   MuteDirector to be _removed_ as a validator the first time you try to   /tell to a player that you've muted. How we never detected this, I'll   stay awake at night wondering..."
refactored recorded and upcoming programs to use new dao's
Refactored camel-ftp so the producer and consumer share more code between the FTP and SFTP parts in their common super class.
"Refactoring, endpoint-creator change to exporter component."
MAHOUT-294:  - Refactored clustering jobs to subclass AbstractJob.  - Added fuzzy k-means example to synthetic control examples - Added cluster dump to synthetic control examples - Fixed _log file access bug in ClusterDumper when run on Hadoop - all synthetic control examples run on Hadoop cluster - Fuzzy k-Means produces numerically odd-looking clusters - added unit tests of run() command line option for each clustering algorithm - all unit tests run
Refactored listeners
Refactored tests.
"WELD-1715, WELD-1714, WELD-1658 Extensive refactoring of weld-se and weld-servlet"
Code refactoring
added lombok to graphonomy core and initial refactoring for schema repo
"Refactor Data Flow Analysis from pmd.dfa into pmd.lang.dfa and pmd.lang.java.dfa.  Much of the DFA code does not appear to be Java specific, hence the pmd.lang.dfa package.  I split the code between these packages based up whether or not there is usage of Language specific AST nodes.  The DataFlowHandler is used to handle a few language specific aspects of DFA processing, there by moving more code into the non Language specific packaging."
added duration to BecomesCreatureSourceEffect + refactored some cards
"Evaluation scripts. Scripts to validate input data loaders. Added optimization as an Optimization class and usable. Code refactoring to make project more flexible and easily configurable, namely data loaders and features."
https://issues.apache.org/jira/browse/AMQ-2665 - refactoring the test a bit
Refactoring resource pools
1) Refactor trip query beans 2) Add additional trip-for-vehicle method
Start of Claims refactor
"Fix xref/mref indexing, some refactoring"
Refactor config loading.
Branch 2.1.refactor committed
put refactor
refactored FrameworkSet
Refactor copyObject
Issue #92 Refactor code in TaskDetails
"add cube metadata calls, some refactoring"
Refactor ISet tests
"* do not use SourceDisplay directly to paint MultiBoxOverlay. Instead, use a list of IntervalAndTransform. * synchronize methods that modify SpimViewer state. * some refactoring"
refactored the extraction of the boundary to an separate method.
Refactor
* app now reacts on configuration changes like price group * current day tab is now only preselected once each day * did some refactoring to separate clearer between views and data
#NAME?
Code refactor
Refactor route augmentation:  - DjikstraResult now responsible for creating routes  - RequiredTraversalAppender creates new routes when an untraversed method doesn't start at a leaf node
OPENNLP-221 Refactored SentenceDetector cross validator to use BasicCrossValidatorParameters
improving JavaDocs minor internal refactorings
Refactored BaseOrderedEntity. Embargo extending BaseOrderedEntity.
More router refactoring.
some minor refactoring
TemplatesProvider refactoring
Refactored Plus model classes: made mutable and using field mapping
[MIN] XQuery refactorings
a bunch of other changes for network refactoring
Small changes: comments an refactoring
Refactor adding new links functionality
"refactoring to separate GUI, cloud and core FindBugs code"
Refactor: [Phd] Alert Messages entry page interface shows only the latest 100 messages. All unread messages and other older messages are archived and accessible through links.
"[Bug 296764] refactored slightly at Jason's suggestion (added interfaces, marked internal etc)"
Refactoring.
Refactor Repository.openObject to be Repository.open
Refactored properties code in preparation for final issue #34 implementation. Tests still need to be refactored!
refactor determinant code and tests
client-side refactoring
refactored BeansModel image stuff; added support for factory beans; fixes #259; refs #261
major refactorings
"Refactoring, including: Additional constructor for Https class Remove redundant methods of Request and Response class Change class Cipher access modifier to package-only Renamed InvalidDataFormat to SDKException"
refactor end
Moving inherited properties from MasterDataEntity to its children Entities. This will make JPA mapping simpler and ease the refactoring for *TypeEntity (which can be replaced by Enum types later).
Clean up refactoring mistakes
HSEARCH-1354 Refactoring of test harness. Test based on Junit 3 and 4 were using the same base class which can potentially cause problems
"Refactor DefferedValueSetter into a ValueSetter interface, such that new ValueSetter implementations (including dynamically evaluated value setters) may be supported in the future.  See issue #48."
"Reworked community features, prepared communication with server, general refactoring."
Javadocs and refactoring
refactoring to leverage the Context and #prepare pattern
Added an NIO version of the SyslogReceiver and refactored some util classes to accept NIO ByteBuffers.
OPENEJB-1237 refactoring to prepare REST EJB management
refactor and add the topK algorithm
#NAME?
NXP-2514: refactored Mapper and SQLInfo for simpler selects; proxy implementation; read-only documents (proxy/version)
Just some quick refactoring and cleanup before I refactor and change the Analysis/AnalysisSet/FeatureSet relationships to reflect our meeting
Refactored the Dot1dBaseGroup and Dot1dStpGroup
BridJ: started refactoring Pointer
minor refactoring
"TIKA-48 - Merge MS Extractors and Parsers     - Moved MSExtractor base class to org.apache.tika.ms.MSParser     - Extracted the PropertiesReaderListener class to a top level class     - Merged MS Extractor classes to MS Parsers     - Refactored the Excel parsing functionality into smaller methods     - Various cleanups (indentation, formatting, etc.)"
"refactor: remove instanceof, introduce abstract RX"
"Refactored the StringData class to simplify its most common use, which is to render a properly quoted string for use in SQL statements."
"api: Refactor ResourceTagResponse and ListTagsCmd, add db view for ResourceTag."
issue #3: refactored criteria result values
"JERSEY-1617: Content length determining   - Added buffering functionality to CommitingOutputStream   - MBWorkers.MessageBodySizeCallback merged to (Buffering)StreamProvider   - Added configuration enableBuffering() into ContainerResponseWriter   - Refactored writing and buffering entity on ther client side     - RequestEnityWriter unified     - connectors refactored (InMemory connector simulates now Container side)     - non needed callback interfacess removed   - Settable added for the future use   - PS4:     - minor stylistic changes and javadoc updates.     - uncommented tests that should have been fixed as part of the task (still failing)   - PS5:     - added support for HEAD methods     - enabled buffering for grizzly container     - committing of response replaced by closing (fixes gzip streams)     - PropertiesHelper: RuntimeType support added to all methods (tests added)     - Removed BufferedOutputStream, buffering refactored (simplified)     - Removed RequestEntityWriter (part of ClientRequest now)   - PS6:   	- review comments incorporated   - PS7:   	- copyright fixed"
Minor clean up; refactor property and variable name used for JNDI Name property
WyIL: refactored CodeBlock to extend ArrayList.
Initial refactor
"Main page that displays tweets, posts a new tweet and search tweets. Also, some refactoring"
refactored 'stage' to 'perception'
"stress, refactoring"
#915 - Refactor internals - Change update plan to string key
Minor refactoring to close resources and style normalization for database stuff
refactor the client implementation get session from signature instead of from thread local
"refactor snmp peer factory more, fix a deadlock in the access service"
jetty-9 refactored common IOFuture pattern
"Improved call timeout handling. Refactored CallTimeoutException to CallTimeoutResponse. Instead of sending a call-timeout-exception to the caller during a single call-timeout, a new response, timeout-response, will be send. Purpose here is to avoid Throwable/stack-trace serialization/deserialization cost."
Refactoring outline.
Android: Refactored ImageLoader.
"Revert ""Refactor: me.neatmonster --> net.xereo"""
slight refactoring of generators
Refactorings of ApplicationConfiguration API
Refactor JDBC-related iterators and simplify. Fixes exception from last commit.
refactor packages
Refactor PPTXEmitter to have have edit mode option
Bug 455261 - Zend Debugger connection handlers needs some refactoring & improvements
"Now we have multiple routing template and buitin templates now, refactor template download code, that can handle it. Basically, change the meaning of type field in template table: SYSTEM means sytem vm template, BUILIIN means buildin templates."
RF-9680: - Added children() method to TreeDataModel & tuples - Related refactorings for UIDataAdaptor - Redesign API for walking over model - Renderer updated for new API
Refactoring extrators into read accessors and unifying the write accessors framework
A whole lotta changes: * Work on groovy script launcher * Refactored SimpleTypeLookup * navigation on this and super keywords * navigation and inferencing on class field in static context
Renaming and refactoring towards debugging functionality
Refactor: pull methods up
added <util> namespace editor support; some refactorings
"Refactored to load name -> type from commands.properties Exposed registerCommand(String, String) Fixed up completer installation for plexus Moved some bits into o.a.m.shell.execute"
A lot of architectural refactoring.
IDE-348 Continued remote server support and refactored some common methods to core plugin
"introduced RetryHandler, refactored OAuth, added delicious sample"
Refactored the preferences section to make it a bit more maintainable.
Refactoring
o Refactored code to isolate Xpp3Dom related generation
Refactored reconnection logic for ThreadServiceWorker.
"HIVE-15518: Refactoring rows and range related classes to put the window type on Window (Aihua Xu, reviewed by Yongzhi Chen)"
Refactored Active Speaker events.
added usage trigger list + tests + refactoring
"[96692714] - Various fixes, refactoring and integration of creating run target in Boot Dash view."
re-refactor alarm filters and test to ensure the alarms page still works
Refactor to have a bean as compiler result rather than a List of messages.
ScriptConsole refactoring - read stdout/stderr
Refactoring of EIK WTP Core
"Refactored updates processing MR job (removed weird threads utilization, simplified implementation)"
[changed] SpriteSheet to TextureAtlas and completed texture region / sprite refactoring (except javadocs).
Refactored some to test Jenkins
Refactored
refactor(engine): extract abstract definition deployer
[WFLY-405] refactoring
"Misc class, constants and action name refactored"
CR #894 refactored according comments
suite teardown failure now fails tests. This required refactoring and cleaning the parsing.
refactored packages and added util.io and util.wrappers.
refactorings in lock file handling
Small refactoring to remove useless binding methods Fixed form method binding with UI
The Query model classes have been refactored again (Condition class has been moved back)
Refactored: API to decode one message at a time
Final refactoring of Substance (I forgot this).
Refactored STS REST implementation to be able to return different token formats
[REMJMX-47]/[REMJMX-43] Initial work to add the second protocol and to refactor the existing code to allow for MBeanServer selection whilst allowing the original API to remain in-tact and function as before.
refactor move org.json to restx.build  to avoid problems with other dependencies when used together with other modules
Refactoring of some CT utilities
More refactoring
Refactored FeedbackWindow and ActionWindow to be provided by the Page instance instead of injected in the stage component. Simplifies the code somewhat.
Refactor according to review comments
Refactor methods between Map and BattleMap
refactoring + add
more refactor
"Minor change: - refactored the way the reports are generated, uniformized the RAIDES reports"
more image generation refactoring
"added test for missing beans in @action, lot of refactoring TODO"
Refactor Duration to create MillisDuration for millisecond based durations
refactor prep for drop decorators
XWIKI-6619: Add an option to the image menu for inserting external images Also refactored existing wizard steps by moving part of the logic to non-interactive steps.
"Refactor updateReadStates into PerSampleReadStateManager, add tracking of downsampling rate"
Refactored.
Refactoring
Refactor generic insertion and query
[MIN] Storage: refactorings (cont)
Refactoring to prevent sql injection
Halfway through refactoring phrase analyzer.
"Refactoring of stages * removed Stressors (as a concept), logic moved to stages * statistics moved to separate package * stages moved to packages according to used features * refactored logics out of stresstest stage to separate classes"
"Refactored code deprecating org.jclif package, Added java docs"
"Intial working implementation of ""seqware bundle launch"" using refactored components."
Minor refactoring.
just refactoring some methods (to make it more readable)
refactored OAuthApi to use CRestBuilder. exploded handler test in more specifics units. moved split into pattern.
refactored common location logic in aws and moved elb to its own module
Minor refactor on builder logic regarding static route.
"MEDIUM / Ontologies manipulation, bug fixing, refactoring and testing"
small renames and refactorings
Huge refactorings that lead to the creation of a new prj (vme-dao)
refactored accessors to be based on graphbacked
"Small refactorings in Control: field initialization now takes place in constructor, moved tabIndex field from ControlAdapter to Control"
Refactorings to TransactionPuller.
Packages refactoring
Slowly refactoring out the dependence on RVM.
cross fingers : major refactoring and broken code !!
MetadataWS. Removed logging that printed stack traces in the exists* methods. BasicDecider: refactored the checks for running or failed previous workflows. Not totally done yet.
Refactored so that the Jolokia agent part uses notifications to be notified when the Jolokia MBeanServer is available.
Fixed role/acl assignment. Added bit extra on permissions check. Refactored various node wrappers and moved around the utilities to (hopefully) more sensible locations. 
refactored out rackspace cloudloadblancers api from us provider specifics
refactorings
Finished refactoring util
api_refactor: refactor register apis
issue #15 and minor refactorings
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - deprecated inappropriately named mail command method and added suitable replacement; added JavaDoc
Refactored client xml config.
Minor refactoring
refactoring
refactor createQuality --> createQualityScores
Refactor parseSynapseEvent in LoggingUtils
Optimize test code in BirtReportsUploadActionTest.java  Change the file error message  Refactoring
"Refactoring stage 1 (RAW): Get rid of some reflection, synchronization questions."
reprise foreign keys et debut refactoring restrictionConstraint
refactor interface
 ItEr38S14CUIntroducionPartesTraballoManualmenteItEr37S19 : Refactoring the work reports list using DTOs to sort it.
befroe refactory
A couple slight refactorings for WeblogTemplate.java which affected some other classes. namely ...   - changed getTemplate() to getContents() to conform to Template interface   - changed getUpdateTime() to getLastModified() to conform to Template interface   - changed member access levels from protected to private
TEZ-317. Refactor AM-Task identifier transfer code path (bikas)
Refactoring for better readability
createCustomElementDelta() refactoring
Refactor internal event binding mechanics to use guava EventBus
Refactored Sopremo building blocks to increase type safety Please change usages of JsonCollector to JsonCollector<IJsonNode> to get rid of compilation errors and warnings
"Refactoring, implementing listeners and communication protocols"
complete refactoring
Refactor pmd.ScopedLogHandlersManager to pmd.util.log.ScopedLogHandlersManager.
NIF 2.0  & NIF 2.1: package refactoring
refactor JPA tests to improve efficiency
Refactored Datastore.
big fatty refactor -- tests do not pass.
subquery support and refactor of base names.
[GSCOLLECT-1525] Refactor implementation of equals in AbstractMutableList.
refactor netcdf reader for better extensibility
Issue #160: Refactor watched status indicators
minor refactor
"Second step into the refactoring of ResourceLocator. Refine its API: SilverpeasBundle#getString(String) throws a MissingResourceException if either the bundle doesn't exist or the data in the bundle isn't defined, add some methods from ResourceLocator to SilverpeasBundle (getStringArray) and to LocalizationBundle (getStringWithParams), SettingBundle#getString(String, String) use the default value when the data isn't defined in the bundle, and so on. Refactor some existing codes that used ResourceLocator directly to get data from the bundles so that they use now the new API"
WINDUP-237: Refactor API for adding ApplicationReports to make adding the reports to the index less awkward
Refactors Algorithm into sub-classes
refactored AlignedSequence to have a Sequence generic type in addition to a Compound generic type
SLICE-91 small refactoring
code refactoring
Upgraded DW to 0.6.2 Refactored to demonstrate stateless request handling (storage of DiscoveryInformation)
Finishing work on PDE pricing refactor
Refactoring project + demo REST service for Document UI Activity
"Refactoring of ""User"" classes"
Get CacheMXBean wired in and add Configuration information. Refactor utility.
Refactored Generic CertificateStore + SslUtil and CertificateDialog classes.  Updated API and removed dead code. 
Refactoring to use Maven.
refactor
#590 - Refactor internals - Remove duplicate isBatch() logic in JdbcTransaction
Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (replacement of MeasurementHandler with TextSizeMeasurementListener)
Applied patches from bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=187060.  Also refactored some of org.eclipse.ecf.example.collab.  Also internalized strings.
Remove activity references Refactor ServerAPI Fix scrolling bug
Improved javadoc. Some refactoring to prepare an StaX-based ExecuteRequest parser.
UI refactoring.
[changed] configuration file to YAML [fixed] strange behavior caused by PowerMock [refactored] IF-MAP connection setup code
"Refactored group definitions set->withSet, first->withOne etc. and group getters set->getSet, first->getOne etc."
nurse rostering: Refactored to design choice alternative 2b because a shift may NOT have more employees working than there are required (more info on blog of design choices soon).
Refactor ShadowMenu to implement Collection.
Refactoring the LibvirtComputingResource   - Addin LibvirtPvlanSetupCommandWrapper   - 6 unit tests added   - KVM hypervisor plugin with 21% coverage
refactoring to make better names;
refactoring...
refactor save into btree class
SEO Product and Category changes.   URLHandler refactoring
Cleanups & refactorings; introduce Alerts
FALCON-1707 Code Refactoring for Falcon Client. Contributed by Ajay Yadava.
Refactored tests so that the same code can be run in single-JVM and multi-JVM environment
Refactor class names to more suitable names
"record master-detail, layouts, refactor color preferences, color picker layout"
refactoring components package
"Updated DMatrix3, DMatrix3C, DVector3I, DVector3View with Javadocs. Also made some minor refactoring favoring the use of using interface references as parameters to methods over their concrete classes."
refactor duplicate code for playing lands from grave
switched to java 7 added SSHProxyPinger added help needs refactoring
"Package structure refactoring, CDI Events PoC"
Clone methods. Refactored predicate to field predicate.
SONAR-7426 Refactor QualityModelMeasuresVisitor to be ready for new metrics
refactoring
"Major refactor that fixes #29: We now have a proper composite structure of test suites and test results, rather than the enforced 2-level setup previously. With this, the runner now correctly generates sub-suites for each QUnit module."
refactor tree
1. https://jira.jboss.org/jira/browse/JBIDE-3146 2. code refactoring
"More work on JavaMail Imap implementation, some refactoring."
Refactor marshalling configuration from wildfly-clustering-web-infinispan into wildfly-clustering-web-undertow. Session manager modules need to be independent of class resolution.
refactoring: rename DRBD GUI classes
Crazy refactoring
"PENDING: FieldContext refactoring to enable reuse in ArrayFieldHandler, CollectionFieldHandler and MapFieldHandler"
refactor cluster manager code to extract common code
Refactored NcssMethodCountRule to use metrics
Refactor packages
API refactoring.
"refactored ControlsDemo, added new FillLayoutTab and GridLayoutTab to LayoutDemo, refactored FontSizeEstimation"
TFJ-30 some code refactors refining LineGraph interface 
Added extra lines in the test input vcf. Added samples. Refactored test class to use methods for generating data.
"reformatted all, used BigMoney and BigDecimal in more places, refactored Order, LimitOrder, and MarketOrder classes."
Refactor formal parameter list model to use it for arow function paramters.
"Added javadoc comments, and a bit of other minor refactoring."
"Another refactor, door and bed implemented, new property loading system"
refactor - move scanner classes to ast.scanner package
FORGE-2261: Refactoring the Bean Validation Commands
just small refactoring
more refactoring to improve memory usage; refs #227
Tool refactoring to make easier the development
light refactoring of processor
refactored
"minor refactoring, eagerly construct output options (instead of lazy)"
"refactored, json improvements"
Refactoring - nome do metodo
Refactored the KenyaEmrUiUtils utility class into a singleton bean and moved it into the API layer so it's accessible to other modules
Refactor IPage and Chunk with general.
Refactor common code to abstrac superclass
Refactored configuration handling
Small refactorings.
oauth provider refactoring
"Refactor to put looking for jars into a method which can be overridden (eg by the jetty-maven-plugin, which does not have a WEB-INF/lib to look through, but must look through the classloader or the dependencies)."
Refactored coordinators evaluations interface into a single calendar page.
started refactor to tinkerpop3
core: multiple tests & refactoring of HostSetupNetworksValidator.java
Refactored visitors; added no parameter visitor
"This change refactors DataExportTest and its supporting components for better code reuse for the gene, pheno, and graph pages."
 r1025@thor:  alex | 2006-11-04 20:06:34 +0200  + fixed reports for various concurrent execution  + refactoring of Invoker implementation  + improved thread contention behavior
refactored maze class to encapsulate logic
[ISPN-353] (Add a single shell script to handle cache server startup) Fixed startServer.sh/bat scripts and removed old memcached.* scripts. - Sorted out server/core module assembly. - Refactored classes only used by memcached into this module.
minor cleanup & refactoring
"Some refactorings - package names, protobuf message name"
Lots of fixes. Groovy Script Launcher.  Moved groovy jars in 1.7 plugin to lib folder. Refactoring TypeUtils.  Some cleaning up of listeners after stopping GroovyPlugin
refactor package name
Chart code refactor for more flexible reusing.
"[MOD] XQuery: various module refactorings (Async ? Jobs, etc.)"
Refactor: Moving server code into Jadb from the test package.
Refactored class names to refer to Jenkins not Hudson
"Name refactor Primes -> PrimeWorkbench - Removed icon loading from PrimesApplication, that is PrimesGUI's job - Fixed version left unchanged in pom.xml - Fixed resources in pom.xml - Removed wrong resources - Deleted PrimeUsages due to misconception - Deleted PrimesModel"
Refactor logging system
Refactor isSubsort into syntactic and semantic check.
Refactored sheet readers and portfolio readers to simplify their use
"PENDING: FieldContext refactoring to enable reuse in ArrayFieldHandler, CollectionFieldHandler and MapFieldHandler"
"Big UG refactoring and intermediate commit to support indels in pool caller (not done yet). Lots of code pulled out of long spaghetti-like functions and modularized to be easily shareable. Add functionality in ErrorModel to count indel matches/mismatches (but left part disabled as not to change integration tests in this commit), add computation of pool genotype likelihoods for indels (not fully working yet in more realistic cases, only working in artificial nice pools). Lot's of TBD's still but existing UG and pool SNP functionality should be intact"
restructured/refactored code
test code refactoring
refactored nr to number
SONAR-4898 refactor process monitoring
first draft of visitor refactoring
Massive refactoring of XML parser logic and structure.  Some bug fixes as well.
LDAP management refactoring
serious test case refactoring.
refactored iteration tests
Refactor to 2.0 coming along nicely~;
Renamed setRefactoringHistory
"- Make ""PMD"" happy - Large amount of refactoring - Many bug fixes (to very little used features or I would have expected a bug report by now) - Cleans up GanttTester.java - Adds lots more options under ""Advanced"" tab in GanttTester - GanttTester now uses Preferences to remember/restore last used selections - Should speed up the chart slightly as well as some code-optimizations were done (as much as Java 1.4 can be optimized... )"
refactor fabric-activemq-demo to use declarative services
[Refactor] On going Notification
"refactoring, improved load strategy tests"
Small refactoring of http transport
"Refactor @Facebook Qualifier to @SetFacebook, FacebookHandler to Facebook and FacebookHandlerScribe to FacebookScribe CODING IN PROGRESS - issue SEAMSOCIAL-9: Refactor Api and ClassName to Avoid Handler suffix  https://issues.jboss.org/browse/SEAMSOCIAL-9"
Refactor events. BREAKING CHANGE FOR PLUGINS LISTENING TO REPORTRTS.
SONAR-3887 refactor semaphore API
"small refactoring in grammar, prototype of syntax coloring, prototype of outline view"
refactor code out of AbstractTask
Refactored feature tests
Started refactoring of GUI main menu
Server refactored
Refactored all Addons to package prefix org.jboss.forge.addon
More refactoring for unit- vs integration-level tests/specs.
Refactored: abstracted TaskScope into a reusable ThreadScope
LdapClaimsHandler code refactoring
Added test for creating projects witch java 1.7 Refactoring tests.
misc cleanup and refactoring
SB-575: Replace the REST-related test cases with rest-assured SB-693: Make sure the strongbox-web-integration-tests still work after the refactoring in SB-575
refactoring: renaming mobileApp to mobileVariant
second stab at params refactoring
Some minor refactorings and cleanups
"XWIKI-3712: Create an improved Image & Attachment Insertion UI * implemented behaviour for the attached file links * Refactored the selector wizard step hierarchy to be able to contain any kind of selecting method * Added an aggregator for the linked attached file selection, to handle a tree and a current page attachments list, with support for configuration. * Added a current page attachments selector, with styles and graphics * Added method in the WysiwygService to obtain all the attachments of a page XWIKI-3616: When a new page being created hasn't been saved yet, it doesn't show up in the treeview thus no attachment can be added * the behaviour implemented was the one in the 1.0 editor, where once a new page was attached a file, it is saved even if the user hits cancel at the end XWIKI-3676: Edit link does not set the edited page correctly when the reference is relative Added a ResourceName class to store and process data describing a resource in the wiki, operating with the wiki:Space.Page@file form."
"#JC-388 AvatarControlller: refactoring user message creation, added unit tests for invalid image format case."
refactored/simplified site service
Refactored page owner (RAVE-729)
Refactoring of the and expression transformation
Refactor parameter loading into loadParameters
TOMEE-334 small refactoring for lisibility
[MIN] XQuery: minor renamings and refactorings
"Snapshots, templates, refactor"
Refactoring
"Finally finished refactoring bonds, bond forwards and bond futures."
"[NTI] Refactoring in GlobalTypeInfo, in preparation for inferring @const types for namespace properties."
Refactor: Moving and renaming things around for better visibility.
refactoring
refactored and added tests
Refactor table ANALYSIS_REPORTS because of MySQL packet size limitation
Metamer: AbstractWebDriverTest refactoring
[SUREFIRE] refactoring
Minor refactoring of I/O reactor code
refactored
"Generator improvement, refactor and cleanup"
chimera: Minor refactoring of tag reading code
refactor a bit
"LocalVariableCouldBeFinal and MethodArgumentCouldBeFinal use the same detection methods, refactoring"
refactoring: replaced selfwritten object configuration code with picocontainer. bugfixing.
Refactoring serial to secret makes more sense into otp domain
additional refactoring of the microchip potentiometer impl
support for specifying a loop variable type and refactoring
refactored log segment flush task for hendle new flush logic
refactor to *SimFluent
Removed unneeded methods and fields from HtmlResponseWriter - bug 340927: Cleanup and refactor HtmlResponseWriter https://bugs.eclipse.org/bugs/show_bug.cgi?id=340927
refactor
"RF-14157: showcase: integration tests: repeat: fixed locators, refactored tests"
"#566 - Refactor internals - SpiExpression, add prepareExpression() to merge queryAutoTuneHash() and queryPlanHash() - tidy up OrmQueryDetail"
Refactor: moved a test to a better place.
refactored test testMapLoaderLoadUpdatingIndex
Refactored: renamed AbstractSink to AsynchronousSink
Removed Item Manager Refactored Item packets Added chunk custom block override packet
Refactor core AST API
etl refactored and cleaned to avoid NPE at startup #5592
Refactored BerkeleyDB datastore.
"Refactor ""org.spearce.jgit.fetch"" package to be ""org.spearce.jgit.transport"""
"[RHQ-1181] An intermediate check-in of various remote related things.  Updated the ResourceGroupRemote/Local/Bean to satisfy the remote definition, this caused some refactoring to handle the new standard exceptions as used in the remote api and, where the impl is common, the locals.  Fixed javac build flags for the cli. work on cli parameter autocomplete is in progress."
Refactored inode tests
refactored per @mrioan and @lhazlewood
Refactor and rework cleanup code to better clean up clusters
Feature #907 : continuing the refactor of request router mechanism.
Added Dashboard perspective into dashboard-client module. Refactored jBPM console showcase home page meus and links for dashboards section.
refactored gyroscope impls ADXL345 and HCM5883L into components
GEOT-3639 - finished- the cql temporal predicates were refactored taking advantages of temporal filters 
refactoring more precise method in MetricTesting class to enable easy static import
core: Refactored getInterfaceDAO in  ActivateDeactivateVmNicCommand
[HAMA-499]: Refactor clearZKNodes() in BSPMaster contributed by Apurv Verma
"Refactor Flyway DatabaseUtils to properly search by Oracle ""Schema"" (i.e. User), see getSchemaName() Also add a (hidden) ability to initialize an *old* version of a DSpace DB for testing purposes."
merging person-refactoring branch into trunk
refactor(engine): split if/else into multiple methods
renamed nls packages to .refactoring.nls
Refactoring of CherryPick merge-strategy
"Diff refactoring: moved matches(object, accordingTo) to service pattern"
merge tool refactoring - synchronizing tool and view
major refactorings
"Major refactoring to fix runtime errors, better fastbreak and fly check, and a better API. Thanks a ton @SuperSpyTX"
Refactor SuggestionCompletionEngine to use AssetItem and ModuleItem
[TACHYON-964] Refactor security module: Have separate class for AuthType and move AuthenticationProviderFactory inside AuthenticationProvider
Fixed .nfs files issue in DcStorage and refactored bag completion code. Changed the bag archiving functionality to archive individual files instead of complete bags. Fixed an issue where tagfile entries were removed when adding new files.
small refactoring
InplaceInput page fragment refactored
"refactoring to add PaperRecord object, WIP"
"Patch by Duane Griffin. (getValue, print, printContained): Refactor common code from print methods into separate method to get the declaration's value. Ensure that this method correctly handles short type codes (bug #631)."
Refactor DefaultRemoteReader for easier code reuse
Refactor GitCloneWizard
Refactored SQLErrorCodesResolver to use several constructors instead of setter.
"First round of refactoring, plus applied some of VG's comments."
Refactor edge is now a node instead of relationship in backend
refactoring repo.backup -> repo.prepareSource/copyFrom
"#899 Refactoring adderwrapper, simplifying SourceRHS."
Refactored code to allow students to create final degree work candidacies in previous execution years.
some incremental refactoring changes as part of issue 1500
JBEHAVE-625:  Refactored MetaFilter to support multiple MetaMatcher implementations.
Automatic formatting of code affected by refactoring.
[KARAF-3614] Refactore the features distributed map to provide a more reliable sync behavior
First refactory of the VME server code
"KS-2165 : moved UIBaseForm to eXoApplication.common,  refactored popup handling"
TEIIDDES-912 Refactored PropertyDefinition from designer.core to core.designer. Changes in imports to other classes. And changes to the 2 plugin manifests.
Refactoring chapter05 in chapter03
Refactored CurrentRun
"First wave of RestAnnotationParser refactoring introduces Invokable, removes SeedAnnotationCache and associated race conditions"
Refactoring: renaming packages to expected name
HSEARCH-472 Formatting and class/method refactoring
bugfix in Readme.md code refactor
DeviceSnapshot Refactoring
Construct and refactor the event management system.
Refactoring. I can't stay organized...
Refactor: extract FtpEndpoint
ROO-2745: Post 1.2.0.M1 code refactor and clean up - formatting and tidyup
Refactoring done and configuration changed.
refactor functional tests of adl-backend :
small refactoring
HIVE-10383: Add tests for partition level statistics + refactor stats tests of TestHBaseStore [hbase-metastore branch] (Vaibhav Gumashta reviewed by Alan Gates)
Table Browser: Just some minor refactoring.
 Refactor ledger storage to separate out InterleavedLedgerStorage and SkipListLedgerStorage  - Refactor ledger storage to separate out InterleavedLedgerStorage and SkipListLedgerStorage
refactor real search
refactor testcase
refactor home code
"Refactored how ""work dirs"" are calculated."
Refactor and documentation for Tools.
"refactor code, remove direct 'System.out.println'  call"
Patch to make loading of relative file paths work. Basically duplicating the work that ANT used to do. There had to be some pain in the refactoring. ;-)
Git connectors refactored
"refactored Metadata to implement Immutable Map<String, String>; addGroupToOrg GroupApi, MediaApi to use urn"
Refactored class name for Eoc Manager
"refactor, Junit4 integration test, test support classes. Prepare to convert to DAO DB access"
"This is a fairly extensive refactoring of the UI code.  Specifically, we now make use of XSWT for building the UIs for order tickets.  We use JFace databinding wherever possible to bind the model to the user interface."
"eventCycle: - use synchronized data structures in order to allow concurrent access to the setter, getter methods of the event cycle - refactor the way tags are added to eventCycle - do no more leak internal datastructures via getters TestAdaptor: - provide real tag data from a given file. Report: - optimize access to datastructures"
Refactor extractContentFromResponse() in a way that will support output testability.
refactoring
some refactorings to make code more legible
"* Fixed StandardFeaturesTest.testDialogContentIsPreservedAfterBeingMoved() to close the dialog after using it, otherwise it can interfere with other tests running after it. * Added functions in the framework for manipulating dialogs and refactored test classes to use these functions."
Completely refactored BookmarksPanel:
Refactoring
Refactor `toString()` down to `JsonStreamContext`
Major refactoring. Many little changes.
refactor testcases.
JDT- Groovy Refactoring Deleting unused classes Changes to jdt langauge support---two new kinds of multiplexing parsers Changes to jdt core patch.  Match locator should do a little more processing of groovy files so that lookups can work Lots of little tweaks to inferencing
RegistrationState refactorings
Credentials refactoring
"Further refinements to Stripes-related JSPs. Refactoring of Login/Profile/View ActionBeans. Introduction of Stripes layout system, which makes templating somewhat easier (but at the moment all Stripes JSPs are  hardwired to 'default')."
Refactored configuration processor into the configuration module
Refactored tests.
#390 - ChangeLog - Refactor DefaultChangeLogListener (simplify to use standard logger)
Refactored code. Added loggers in block
"70135: Add ""Deprecate"" to Rename refactoring [refactoring] Patch from Philip to leave delegates for Change Method Signature, Introduce Parameter, Rename Method, and Rename Field (constants)"
"FCREPO-701: reverted back to jersey 1.0-series. 1.2 breaks request dispatch for fieldsearch & getnextpid. Also refactored DateUtility so that for most cases, callers can choose between 1) parseDateOrNull which only throws an IllegalArgumentException if the input is malformed (but null and empty is ok), 2) parseDateLoose which just returns null for all null/malformed input 3) and parseDateStrict which throws a ParseException for any input that fails to parse."
refactoring in code. No functionality changes.
com.xeiam ==> org.knowm refactor
Refactored coaleser.
Feature #907 : continuing the refactor of request router mechanism. (adding dynamic redirection behavior & adding onError LowestRoleAccess behavior)
Refactor PostToStream to remove Bindable (B-07547)
"more refactoring, still need to fix the regression..."
more refactorings of the editor package
Feature #3687 : updating slide show system for Gallery application - adding full compliance with API token from REST Web-Services - refactoring some code - removing some warnings
refactor converters
"Respondable interface, ResponseRunner and RequestProcessor refactor"
"code refactoring, also - added target=_blank as a default to LinkElement"
Make a little refactor in QueryExecutor class .
more refactoring
Refactor
refactor
Refactoring ognlfacade
88806: [refactoring] Change Method Signature removes comment between parameter type and name + extracted TightSourceRangeComputer from InlineConstantRefactoring
refactored exceptions a bit
some refactoring and bug fixing; changed license header in structr-ui to AGPL
#NAME?
Refactored filesystem and classpath test case services
-MOJO-1061: option to specify directly to run SCM action -Refactor test to use plexus's getBasedir() -Add option where to pickup buildNumber.properties
Refactor crosstab code API to use level binding name as expression when creating cube query aggregation on binding.
General refactoring
Refactor GradeBook XML code so that I can write a failing test that tests that letter grade ranges are persisted.
HTML-92: Handle checkbox style (multiple select) in single obs element (Did some refactoring of this new feature)
added mount chance feature massive refactoring of code base
Handle mouse events on sprites; begin refactoring of sprites and screens.
refactored ldap strategies to be a mapper.
EnactmentEngine interface refactory
* HttpRequestExecutor code cleanup * Minor code refactoring in http-async module related to HttpRequestExecutor
"DRILL-5721: Query with only root fragment and no non-root fragment hangs when Drillbit to Drillbit Control Connection has network issues             Note: 1) To resolve the issue all the fragments including root fragment which are assigned to be executed on Foreman node                      are scheduled locally and not sent over Control Tunnel. Also the FragmentStatusReporter is updated to sent the                      status update locally by fragments running on Foreman node.                   2) Refactor for FragmentManager, setupRootFragment and startNewFragment                   3) Update the test added for DRILL-5701 as there is change in behavior"
"Refactored Filters so that no session is created if the @Value(""${use.session.for.request.processing}"") is set to false."
Refactored Citrus command line app and added unit tests
Refactor session listeners and integrate them into servlet code
Refactorizado persistencia para que use un Factory
"add optional KeyedObjectPool.addObject(key) method and test refactor extract getActiveCount(key), incrementActiveCount(key) and decrementActiveCount(key) methods in GenericKeyedObjectPool and StackKeyedObjectPool"
"Refactor of reporting code * ReportManager interfaces become ReportBuilder * New ReportManager utility class same as FormManager, RegimenManager, MetadataManager etc Also * Added section 3.9 to Moh731 report"
refactoring
Refactored code
JBIDE-8969 : Refactored Maven Profile Management logic to the core plugin.  Added a source column to the profile selection UI
refactored ssh connections so that they can be shared across views
Refactor: extract adjustVersionSpec() method.
o Refactored code
Refactored Group interface and HetAtomImpl to use ResidueNumber as a replacement for the get/setPDBCode.
436345  Refactor AbstractSession to minimize burden on subclasses to implement behaviour
Massive refactoring
Refactor move the setResopnseHeaders to base
refactor ConfigFilter
Imran/Balaji: Refactorings
Refactoring
Clean and refactoring - stage2
[MOD] XQuery: numerous tweaks & refactorings
Refactor the pool metrics to be reusable for other kind of pools that can exposed to the metrics implementation
Refactor package structure
Refactor test.
Refactoring and some JUnit tests
Refactored method name to prepareEndpointAddress
ISPN-6858 Refactor endpoint parser to a single class
[CXF-6121] Minor refactoring
[BZ 759615] refactor the domain jar's org.rhq.core.server package name to org.rhq.core.domain.server
More module refactoring.
Fixes #1357 - Refactored date/time handling and added tests for RolloverFileOutputStream
JC-1817 Small unit test refactoring. add comments to make them more readable.
Refactoring registry frascati
"Overall code refactoring for NLP dependencies, chunks and feature extraction. - Token dependencies are now represented as a graph (enhanced information). - Chunks representation is now a list of chunks instead of just token features (enhanced information). - Pre-processing features are now performed using a processing pipeline of the corpus. - Removed previous dependency features using MALLET's pipeline. - Defined FeatureType to support dynamic extraction of WORD, LEMMA, POS and CHUNK features. - Added support to dependency features, between token and other tokens given a max hops limit. - Added support to shortest path features, between token and closest concept. - Added support to n-gram features for dependency windows and shortest path."
refactoring. added code for reset(). fixed various snapshot code.
SOC-186: Create new template for exo-space manage; SOC-198: Refactor ManageSpacesPortlet; SOC-189: Put proper Java doc
DATACMNS-810 - Refactor Query by Example API.
refactored the name of a method
Lots of refactoring/polish.
First iteration of refactoring. May not work yet.
Refactored: separated serialization to its own package
data-binding: refactored unit tests
"Refs #3330. Minor refactoring, changed some names."
Refactor: Seperate the thrift classes from the Cluster interface so it doesn't import any thrift specific classes and create a ThriftCluster implementation
Refactor transation attribute information into a re-usable class
"Added 3 cards, little refactoring (Unattach cost)"
1. script tests refactoring 2. tests that blank lines are inserted before element docs and not between docs and element as before
All commands refactored
GROS refactoring
Refactor common code to abstract CentralProcessor class
refactor Expressions/DelegateExpressions
Refactor code and add some API documentation.
Finished beta versionof jannovar refactoring
REFACTOR: changed name of Never to fit into regular adopted naming standard
"JBRULES-1520 RightTuple merge for asynchronous Rete propagations -mid refactor, bit of a mess, but wan't to be prepared in case eclipse refactoring screws up."
support function within select clause and evaluator package refactory
Moved SyslogdBroadcastEventProcessorTest into features/events/syslog and updated the test to work with refactored code inside Syslogd.
refactoring
MIFOS-4657: refactor loan schedule creation from installment details and rawAmount (total fees and interest for loan schedule) calculation
Refactored AssociativeMap into HyperassociativeMap
CAY-1049 Refactor QueryAssembler/SelectTranslator
MAGNOLIA-2492 mail module refactoring
Refactor ioc containers to allow views to work as a task.
Refactored client xml config api.
Refactor: Completed implementation of micropayments portal.
refactored avible to available
refactoring WsaUtils: XmlObject and content are created in the constructor
Refactoring the handling of streams with SliceInput and SliceOutput to use a slice as buffer for performance
SurveyRunning entity refactored to SurveyInstance
Refactor and tidy. Configuration classes moved into configuration package. TestListener moved into testrunner package. Consolidated some duplicate functionality.
Refactor DateTimeFormatSymbols
"Refactored makePersistent, and modified it so it will not try and persist objects that are suppose to be persistent (marked us Persistable.TRANSIENT)."
MetamerPage and ValidationPage refactored
Refactor / distinction between Stop and StopOnRoute
"refactor APIExecutor to be testable, test it"
Added bandwidth detection on the server-side which will modify the adjustment window and client bandwidth. Refactored the ServerClientDetection class to be more simple.
Refactor filtering input and sorting output to other methods to reuse in fuzzy enrichment. Rename numOfTargetBgGenes to numOfTermGenes.
"ROO-847: Refactor addons' dependencies.xml files to be more generic so to allow maven plugins, repositories, plugin repositories and properties"
Small refactoring to reduce cyclomatic complexity of CheckStyleTask.execute().
Version pre 1.10 Modifyworld refactoring. New modifyworld options. CommandsManager refactoring.
Refactoring: LoginManager now uses the new Credential class. Much cleaner code.
MIFOS-4684: refactor validation for variable installments to loanAccountServiceFacade
DDF-1605 - DDF-1726 refactored into our changes
Refactor security classes/interfaces into more specific packages.
" - removed unused  - refactored several classes regarding history data , export to excel data , and representing to table history data  - replaced all ""session.setAttribute(""object"", object)""  occurrence  to ""request.setAttribute(""object"", object)""  - all 'Servlets' now inherited from 'AbstractServlet'"
Intermediate progress on the OEntityKey work.  New unit test and some refactoring.
api refactoring for Vert.x 2.0
#NAME?
[MOD] REST: refactorings; always open specified resource.
"ISIS-1427: renamed IsisSystem to IsisSessionFactoryBuilder; bind IsisSessionFactory to http servlet context rather than IsisSystem (also do this in IsisWicketApplication); make OidMarshaller a singleton; remove convenience accessors from ServicesInjector; bind DeploymentCategory as a ""service"" (bean) in ServicesInjector; similarly refactor to remove AuthenticationSessionProvider service; MSG_ constants now listed in MessageRegistry"
"Added support for compression of HTTP response bodies, using gzip or deflate. This involved major refactoring; for example HttpMessage is now separate from OAuthMessage."
MOAR refactoring
minor refactoring
Refactoring of Guice modules for greater test modularity
#279: Completed refactoring BitstampTradeService and associated demo's
refactored for modularity
Refactor tree kinds corresponding to IdentifierTree
structure refactored throughout for performance improvements
Refactorings in CommandsCompleter and Console
"started with GA implementation, reworked and refactored some other parts as well"
Refactor the new Protocol extension API to allow other protocol to take advantage of it
"Refactoring - added ""subscription tree"" as a wrapper (POM) parent artifact for 2 modules: counting tree and langparser."
"refactor so JS gui is separate, and REST *Resource classes are independent of dropwizard. next is refactoring so DW is a separate project"
Refactor package for stuff related to importers
refactor package
refactor of various context names
Refactored to allow using BinaryStoreManager directly rather than over the event bus.
Refactoring Module / Application Configuration
some refactorings
Refactored SIFT_ExtractPointRoi to be callable from plugins.
"Add callbacks to ObjectListHandler's, and refactor FileRecordingObjectListHandler into callbacks."
refactored copyNormalizedKey & getMaxNormalizedKeyLen -> JsonNode implements a standard behavior which can be overriden if another behavior is necessary
Refactor a bit to make the responsiblity of classes more clear. Still work in progress
Core: refactor class AttachedChildTopics (#785).
Refactoring UI polish
HAMA-838: Refactor aggregator.
#NAME?
Simplified HttpEntity interface; refactored HttpEntity implementation classes
#JC-1506 Refactored tests to be more readable.
wip & refactoring
* Snall additions to DTLK DBGp protocol handling. * Few refactorings to be able to do a web socket based DBGp protocol sessions. 
"Backwards Compatible Event Factory!, Version Change, Refactoring Names, maybe more stuff..."
Refactor State and Property to support deferring evaluation with Runnable
framework: refactor base URL reading and use lazy initialization for the Jetty local server
Refactored
sparse vector refactoring
Refactor BugChecker not to store @BugPattern annotation and just copy needed information into fields. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=77683869
Big refactor. Add boostrap. Add testing.
"fix for ""<!CDATA"" issue, adding test that simulate behaviour of WS multilanguage Specific Measure. General refactoring of services."
"fix bug setting up classpath, refactor"
Refactoring.
Refactor - moved ZuberasDiedDynamicValue to shared area
FALCON-978 Refactoring FeedLateRerunTest to be parametrized test. Contributed by Paul Isaychuk
WebUI:: Minor refactoring.
#310 Refactoring: Mojo works on own isolated properties object now and publishes results when done.
"Huge refactoring on: - serialization format (added "" even in storage for strings), better support for floats - new db configuration settings such as: localeLanguage, localeCountry, schemaRecordId, securityRecordId, dictionaryRecordId - User management. Now all the settings reside in the new ORole class"
DATACMNS-20 - Adapted refactoring of findById(…) to findOne(…).
"added gif and bmp export, refactored BitmapEncoder"
Refactored to use FileSystemAbstraction (where there's now a EphemeralFileSystem) and proper StringLogger lifecycle
"HIVE-8037 : CBO: Refactor Join condn gen code, loosen restrictions on Join Conditions (John Pullokkaran via Ashutosh Chauhan)"
Refactor: WikiHomePage
"Refactor textbox implementation, so everything is done in the Writer (PictWriter) and dependency on downstream renderer is (largely) avoided."
1. Major refactorization to allow DeclarationRequests to be payable:
Still some refactoring here and there
o Refactored & simplified mutable state mess
before refactoring + without improving training
* bunch of refactoring and added some unit tests - still incomplete
Refactored most of the REST request to have a clean API
Added some docs and refactored out parseShapeByType()
"mavenized project, refactored to CDK 1.5.0"
KARAF-608 Small refactoring of the FeatureServiceImpl. Extracting the config management and the boot feature installation
Refactored failing updates_on_same_key_when_in_memory_format_is_object test. It should have been refactored after the fix of issue https://github.com/hazelcast/hazelcast/issues/4957
working version big refactoring with new logic
Refactored
"... refactoring, still"
security classes refactoring
refactoring to manage multi real device and reserve / release them proeprly.
"Add listener support to TransactionManager, refactoring it into an abstract class"
Created new tags for input type=password and labels. Added a small ElFunctions class as a point to add EL functions. Refactored InputTagSupport to better support the label tag. Added the until-now absent package.html for the layout tags.
Refactored test package names
[MOD] HTTP Client: slight refactorings
refactoring for easier subclassing
minor refactoring
More refactoring; Locator is now merged into Mark
"refactor AMatrix to extend AbstractArray, add new MatrixTransform class"
refactored scaffold tests slightly
refactoring
Refactoring tests
Refactoring
optimize refactorings that don't touch other units
#NAME?
Major refactor to implement the RightCurly check. Required the ANTLR grammar to be worked to:
refactor
"Refactored the message type mechanism.  Prior to this change, message types were managed as enums.  However, because we want to use the Chime framework as a general purpose service framework, we separated the Chime domain messages from the core messaging classes in a previous commit.  This exposed a problem with the enums because enums don't support inheritance in Java.  In order to manage a combined set of message types it was necessary to abandon the use of enums for message type and move to using integers."
"Refactored into using Component base class for components, removed need to register components"
Lil Bit of Refactoring
More refactoring to separate authentication out from server.core to allow easier embedding of just Git and File Service
Create PopulatedTemporaryDatabaseTestCase and start refactoring to use a DataSource so we can use Sprng's JdbcTemplate class
"TAJO-1350: Refactor FilterPushDownRule::visitJoin() into well-defined, small methods. (jihoon)"
"Refactoring + Safety: It is very important to release mutex, and end sudo scripts. Putting them into try/finally blocks."
"Refactored addition of proxy headers into two methods, to allow subclasses to override this behavior more easily."
SONAR-6293 refactor loading of default values of sonar.properties
Continued on refactoring details
refactored test suite to use eleasticsearch-test package instead of tlrx's elasticsearch-test. NodeChecker test is still acting up...
Refactor Basis into its own class
"[MOD] Core, locking: various refactorings"
lots of cleanups and work to get ready for Big Refactoring
refactoring
PLFED-197: refactor the sp methods
Refactor persistence
Android: Refactor server selection.
"Refactoring of the class VersionNumber that more variations are easier to process, in addition, a review of the comparison function performed with much more unit tests"
Refactored http clinet
add tests before refactor #586
STS-3204 Initial implementation to support environment variables and additional refactoring of service tunnel command feature.
"Removed all synthetic defUnits, refactor PartialPackageDefUnit."
Big refactor
"-Merge from snmpv3 branch to head-Fixes in notifd.jmx.Notifd preventing notifd from starting up-Refactored DatabaseConnectionFactory usage back into Eventd (thanks brozow and mhuot)-David"
Refactor common code to abstract GlobalMemory class
Refactoring of the lazy deserializing implementations of the ...Message interfaces
refactored: stopCreateStartProducer e altri metodi
refactoring
refactoring and clean-up
HLQRY-9 - Create the service methods to render the templates (refactored to make it easier to cache compiled templates in the future)
Refactores wiki.examples to examples and fixes sample tests
"Experiment creation cleaning, refactoring"
Issue 101 - refactor simple consumer examples
Working to issue #21: http://code.google.com/p/orient/issues/detail?id=21 Refactored all the indexes and supported the Full Text Index
refactoring HtmlElement
Refactor JsonExtractor for use in another context
"refactor, move some classes to api."
cassandra: refactor editors
refactor
Refactoring to allow existing FindBugs code to enable FindBugs2 to handle bug/error/missing class counts and exit codes.
References #570: Refactored layouts so that nodes to layout are specified explicitly rather than through locking/unlocking.
Refactoring
* refactored request class names * added domain class for comment * adde service for adding comments
started refactoring ScenarioGenerator
Refactored some code. Added some exceptions handlers
 refactor for move the blob cluster definition interface to the database api.
chore(rest): refactor mock provider/builder
Refactored GATKDocs categories some more ( GSATDG-62 )
Refactor category saving
Refactored StreetDetector
Refactor RDF production to leverage iterators
"smartsprites: SMARTSPRITES-44: some refactorings Ibrahim's patch: 1) ResourceHandler definition made more coherent, charset support added, implementation updated, 2) two extra delegations made to the resource handler in places I thought they will be needed"
Bug 316303 -  [Compatibility] turn actionSets into MenuContributions Refactoring to get Menu bar contributions and ToolBar contributions working the same way
"refactoring: operator constraints, genutil"
Refactoring DebuggeeContext management to help implement the server
MONDRIAN: Refactors XmlaSupport so that all the methods of processXmla and processSoapXmla take a cache object as a parameter. This allows test classes to cleanup properly at the tearDown phase.
[Refactor] Change 'ca.q0r.mchat.config' namespace to 'ca.q0r.mchat.yml'.
"Fix HER-1914 cookie loading and saving does not work properly * AbstractCookieStorage.java     make cookiesLoadFile a ConfigFile and use obtainReader() so that the file is snapshotted into launch dir     saveCookies() - include expiration date, so file format match the format it claims to use, and what loadCookies() expects      loadCookies() - handle expiration date field, and actually put each cookie in the cookie map     refactor loadCookies() for use with Reader from ConfigFile.obtainReader()     fix up javadocs some"
Refactored OpenEntityManagerInView and OpenEntityManagerInterceptor to enable hibernate filters
Refactoring
refactored the methods for Explain API
Refactor a getUploadsDir method out of UploadsServlet.
delete accounts from settings reset passwords from settings dlna for devices !XBOX (like samsung tvs) dlna login sucessfull about page 40% daouser refactorized
refactored xml parser to its own project (x2o)
refactor: Separate @Transactional annotation into separate project
Refactored pom.xml to include name change for rest-provider.
major refactoring of the core code base towards cleaner responsibilities and more flexibility
Incremental update to VariantOptimizer. Refactored parts of the clustering code to make it more clear. More comments.
Refactorisation des dossiers
Refactoring packages
Implemented checkbox viewer updating Added refactoring index indicator
Refactored multiple occurences of code
Refactored key/value lookup cache. Made it more generic #270
"Refactor api to use session id as string, and class for context id; mostly port mongo sessions."
Refactors WktTokenizer into seperate Geom and CRS WktTokenizers.
"- Fix (LANG-624) SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM - Refactor for unit testing. - Remove odd test code which is copy and pasted from SystemUtils, which therefore does not test anything."
refactor ComponentDefTest @bug W-1483583@ @rev tbliss@
"Refactored and fixed failing test cases after the integration of SGF-207, SGF-254, SGF-307, SGF-309, SGF-310, SGF-311 and SGF-312."
"Refactor how Require, ModuleProvider, and friends."
Refactor ConfigFactory and optimize VBucket memory heap size.
refactoring to favor components over pages
log charts refactor
Refactor the pipeline library mechanism - There is now a PipelineLibrary class - PipelineContext contains or references a PipelineLibrary - The pipeline parser now uses a single PipelineContext exclusively
[PLAT-3281] Refactor: rename SimpleRepositoryConfigurationSource to SimpleFunctionConfigurationSource
continue refactoring - rewriting integration tests around service for group transfer.
Koan10 refactoring (Language->LanguageK10) in progress.
Refactor test due to MySQL DataType System introduced
SCRUM-240: clean up - renamed RendererRegistryTest -> AbstractRegistryTest (after last refactoring that's what is being tested) - removed unused code
refactor main directory
#POULPE-169 small refactoring to moderator view
refactor
Refactored the gcode parser out of AbstractController and GcodeViewParse. It is now a reusable object shared by both classes.
ItEr60S04ValidacionEProbasFuncionaisItEr59S04: Refactor.
Refactored RfcUtil class and added copyright statements to poms and source files
refactor ; creation and last modification date now at the friendly resource level ; suggestion origin is now a friendly resource. Every neo4j  node in graph is now a friendly resource.
[OPENENGSB-1049] refactored a bit and added another interface
Refactor to make configs its own parent module
Fixing compilation erros and minor refactoring.
Make the IsolatedClassLoader more of a helper. Fix the transform chain so it actually returns the modified byte code. Make the JDKCheckerFactory work even when it is not visible from the TCL. Refactor the includeJava to the PatternClassFilter. Add a CombiningClassFilter
refactoring input into logical divisons
gdms: CQ refactoring
more refactoring and UT passing at this point
HZN-735: Refactor common SearchProvider logic into the SimpleSearchProvider.
refactoring paths
Massive refactoring of VaR code.
"Refactorings to allow easy switching between signaling protocols, such as XMPP and SIP"
"Refactor org.wildfly.clustering.spi, org.wildfly.clustering.ejb.spi, and org.wildfly.clustering.web.spi to leverage Builder<T> abstraction."
REFACTOR: Adding inner functions to CGPConfiguration
Refactored tests to be more consistent and extract common parts into a separate class
Major refactoring
DDF-1814 refactor extendable classes out of security-core-impl to ddd-security-common remove embedded guava and upgrade to 18.0 remove embedded validation-api and use an imported bundle instead create a separate feature for common-libraries fix woodstock dependencies
"DDF-1219 Collapsing, normalizing, and refactoring unit tests. There are more opportunities for refactoring, but this represents approximately a 15% reduction in class size and removes much of the duplicate code."
DDF-1413 Modified variable names and refactored code to make it more readable
Big refactoring.
Refactoring
Refactored the PDM schema generation. Added the Pdm objects.
refactoring adjustCurrentFrame for strike
refactoring: renamed peers and torrents classes
Refactor EC2Slave to EC2SpotSlave and EC2OndemandSlave
refactoring en cours des actions
Refactor LIBS into utils.locusiterator before refactoring
refactoring package structures
Refactoring not to rely on being same package as Jackson annotation stuff; prepare for 2.3.0-rc1
Refactor how per artifact context lookup is done -- better OO.
Refactor perf publisher (#106)
Refactored the session and datastore nonsense into a single service
Refactoring method names
#947 working on JTabbedPane and some refactoring
Refactoring of Namespaces
refactored config handling in virtualbox and cleaned up classes
refactored for new serial impl; updated to require Java 8
refactoring for maven central sync
refactored daos
Refactored NEXT support (used for labels) into separate class
More refactoring of the Console/ConsoleUI/ConsoleCommunication split.
little refactor and decode experiment
Work on duplicating sub graphs and some refactoring.
Refactoring of ri/alphazero package; bug fix and cleanup; GETSET support.
Some refactor
JPAProducer refactoring to JPQL
Refactoring majeur: Création classe Jour avec sous-classe JourOuvrable et JourWeekend
"cleanup of comments, refactoring, added getAllVerses to Versification."
refactored common methods from DatabaseBasicAuthConfiguration & JPAConfiguration into a shared base class ConfigurationParser
made refactors requested by chris
Execution refactoring
Next round of refactoring. Attempting to normalize the terminology used. Fixed some bugs that have been around for a while too.
refactor to prepare from real SingleStatistics
[PLAT-1296] Refactor time-series master; Rename MetaData to Info
couple of refactorings on the stories
Refactor: extract runUserTrigger() method.
Major code refactoring for configuration DAOs. The decorator pattern is now used to add cache and deploy functionalities to DAO.
Response refactored
Refactor the Agenda Event model  -Now supports before and after on Activations -Takes Activation as a parameter instead of Tuple and Rule
"2.7.0-svn-4: new js/css compressor, section edit, hideable favorites menus, refactore user-prefs, selectable language, various bugfixes"
Refactored and cleaned up a bit
refactoring to utilize MBean Utility in EJB Monitor; renamed Entry Application Manager to Entry MBean; renamed Entry Application Manager Server to Entry Application Manager - rjrjr
refactor the request creation to more general creation that can easy be overritten in subclasses
o Refactored code
[refactored] history navigation panels to be implementations of a new strategy (with own type-enum and factory)
Refactor FunctionImportParameter
Refactor MetricNameDto=PlotNameDto
Simple refactoring.
deodex refactoring part 1
refactor testcase
"Complete refactoring client command 	deleted:    src/main/java/ru/cinimex/client/commands/ReactionOnGoodShot.java 	renamed:    src/main/java/ru/cinimex/client/ReactionOnNotStroke.java -> src/main/java/ru/cinimex/client/commands/ReactionOnNotStroke.java"
Refactored tests for common functionality.
Refactored all integration tests
First Stage of Reorganization: Refactoring of UIUtil to support separation of webui from kernel. See:
refactor: break up larger methods to clarify intention and facilitate JVM inlining
Addresses issue #11 where a general refactor is needed to improve the cohesion of the creation of property value mergers.
Refactored inverse mapping of quads
Refactored DMU for ABM-228
Refactoring
Small fixes and refactorings.
Refactor core.tests/suite/org.eclipse.cdt.testplugin and ui.tests/src/org.eclipse.cdt.testplugin packages to  org.eclipse.cdt.core.testplugin and org.eclipse.cdt.ui.testplugin respectively.
"The Node object is a really memory expensive object to hold on to since it contains references to the entire AST and compiler. This change removes the pointer to the Node when constructing a SuggestedFix class for JavaScript refactoring. Since some tools later down the line need some information about the original matched node, a new class is introduced to keep track of just that information."
Refactored and combined
refactor ContentHandlerAdapter
added more documentation removed unused method small refactoring/combining of methods
generify IMySelf refactor LCF
refactored all classes into a sinlge package
Move Parameters into it's own package (has no cyclic dependencies) Refactor Parameters to use LinkedHashMap to maintain map and order in one data structure.
WIP json refactor - initial tidy
Package refactoring and MultipointLinker legend
Code refactoring.
NARC-17: Refactor ChannelId access: Merging final result from channel_refac branch.
StateManager refactor
"Making use of java.util.ServiceLoader to load standard handlers, refactored ScriptableTable"
dbbackup - refactoring after codereview
"Minor fixes and refactoring, also included full unit test for data outlined in http://wiki.developers.facebook.com/index.php/Attachment_(Streams) to prove that Java-to-JSON mapping works as advertised."
Refactored CreateGroupOperation into the app so that it can be reused by all topology providers. Fixed Window operations so that the form works now.
Refactor GitHubRepositoryName tests to simplify code.
Refactored Attachment to Product
Refactor file into the right sample directory and fix checkstyle errors
Refactor search result to a common search result to be used elsewhere too
Refactoring: moving some classes into different packages
Respondent class has been refactorized to RespondentAnswers
Initial refactoring.
"refactors configuration for spotter and spot selector into SpotterConfiguration, adds exceptions to OccurrenceDataProviderSQL"
"Fully refactored, mostly cleaned up version of VariantEval using StratificationManager"
refactor(jobexecutor): renaming classes & packages
Refactored inquiries stuff to correctly handle professorships that are not teachers.
Refactoring of lightweight decorators
refactor on paging
Started refactorying the config object registry so that we can make a database-backed implementation to replace the Java preferences backed version.
Minor refactoring of conditional logic in ChessboardComponent
"Introduced VincentySphereDistCalc, and refactored out GeodesicSphereDistCalc from HaversineDC."
SECOAUTH-139: start to refactor AuthorizationEndpoint - remove unused token type - remove cycle - remove RefreshTokenDetails - rename AuthenticationCache
refactor
refactor
Updated to version 1.1 Refactored into plugins Released to Maven.
"Refactoring package names, tidying up POM."
refs #116 - CpaHelper refactored
"Project module refactoring, split Impl between API and a new ProjectUI module. Create workspace SPI package."
refactoring findElement for native apps to support xpath.
initial refactoring for reddit api bug
minor refactor
Updater: refactor the update-the-updater functionality
Refactor profiles.  Half of certificate processing done.
HBASE-16225 Refactor ScanQueryMatcher
Move Data Laboratory to Data Table UI. Branding modules and set all Specification version to 0.7. Fill Display meta-data to all modules. Minor refactoring.
Continuing to refactor credit default swap pricing
"The continuing saga of collectd refactoring... synch lifetimes of data and object Agent and SnmpCollection have a very long life time (one from the db, one from the config file) CollectionSet is being tweaked to have a life time of a single collection"
Refactored CLI to enable use of different implementations
added QuerySpec and associated support classes; refactored UpdateSpec to implement Update interface
Method refactor.
Refactoring to generify implementation classes
Refactored SPDY modules to extract into a different module the tests that required NPN to run.
Refactor MetricNameDto
"Merge of level-sets-albert and re-factored code New factory class for Level Set Implementations Refactored the code that all the parameters and instanting of the Level Set implementations is handled by a new LevelSetFactory class. All the implmentations and default parameters are specified in LevelSetFactory now. The parameters of each implementation are in the constructor now. Thus, the parameters can be handled with the final modifier which should speed up things. Each implementation is derived from the LevelSetImplementation stub class and final. Thus, new implementations must be sub-classed from LevelSetImplementation and entered into LevelSetFactory. After f..ing for >2h trying to merge branches, I give up. Checked out fiji.git again and merged to master branch...."
"Added pkg headers to output, enum now with quotes and some refactoring"
refactor
refactoring: cleanup renaming and add unittests
refactor (rename patient to patron)
refactoring configuration
"Start of support for custom suppressions.  Refactored Scanner code, didn't break it."
#NAME?
A slight refactor of role parsing in the STS
refactored to use new error-prone API
refactoring: now we can specified executor service termination with close parameters
First stab at refactoring maven-archiver to provide file/directory permissions in a more general way in the api. This is necessary to make MNG-632 easier.
Refactored and Reorganized sopremo-common
"PMD-76 Renaming refactoring - changed businessview to businessmodel, where appropriate"
Massive refactoring of SecurityUtil and ActiveUserProvider. Most logic is now in SecurityContext (non-static).
"Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer"
little refactor
"[RHQ-2411]  Change strategy such that required permissions are evaluated at check-time.  Note, as a future refactor we should consolidate the checks in CriteriaQueryGenerator as opposed to individual SLSB criteria methods."
Applied some findBugs and PMD hints. Also refactored some of the packages to match the existing package naming scheme.
refactored IdentityStore implementations to be stateless
Refactor bundle resolver code to facilitate reuse
applied patch of STS-437 (Refactor DateTypeConverter so that extending/overwriting will be cleaner)
first refactoring pass :  - distinct draw path for Open GL ES - use newt events as primary event types - partial AWT classes removal
a little refactoring of the jettyserver
Page Entity refactored to QuestionGroup
swtbot tests updated and refactored
refactoring
refactoring: renamed org.structr.core.node to org.structr.core.graph
Refactored the code
Refactored Property to use TypeInformation infrastructure.
refactor FileRecordReader to use Files.walkFileTree instead of a recursive call to directory.listFiles
Refactoring
some code cleanup of code comments and method refactoring
HablarPages refactoring part 1: extract logic from view
"CSPACE-2903, CSPACE-2421. Added support for postgresql, cleaned up configuration and various sql statements and resources that were mysql-specific. Refactored lots of configuration to take DB info from build properties. Note that in this version, mysql is still the configured DB."
Method refactoring and enabling providers to implement Credentials
Deploy plugin refactor:    each container has been moved to a separate package    Glassfish initial support implementation added
refactoring code
minor refactoring
bug fixes and final code-completion of the dependency refactoring
spacemanager: Refactor message dispatching code
Refactored BTCChina
refactoring dao's and editing dao services
"Fix hashCode/equals, refactor some"
refactors
Refactor Search to ease testing
"MAHOUT-294: - modified most DisplayClustering subclasses to use the new sequential method on drivers. (Not Dirichlet yet) - using file system to transmit Clusters required a rework since they were not serializing needed state - refactored Canopy, Cluster, SoftCluster and MeanShiftCanopy significantly, abstracting shared behavior to new AbstractCluster class. - deleted ClusterBase after moving static method to AbstractCluster - added ClusterObservations to replace KMeansInfo and FuzzyKMeansInfo - changed all cluster identifier formatting to include type indication - upshot of new clusters is improved posterior statistics for all with radius() now returning stdDev(), a vector - new radius() used in Display examples to show elliptical clusters - adjusted unit tests and all pass"
MODE-637 - Added ping operation for Connector and refactored connection logic
Refactor a bit
"EST-1352: Fixes integ test, refactoring of user role"
This commit includes: * Support for PhD gratuities * Research Contracts Refactored  * Presentation Cards Renderers (for single person or collection of them)
Refactor cube to be a shape and add a triangle.
"Big refactoring, in particular move stuff into org.lsst.ccs.command.demo and subpackages Add more test cases Add more javadoc No more cliche"
PT-2323 Refactor the REST service to use the delete method from PatientRepository
it feels good to finally be able to refactor some expressiveness into this class.
refactored closing input streams
Refactored a bunch of code to make things cleaner. Moved 'dbms_collectors' out of 'util' and into 'api' Brought in some thread pool code from H-Store so that we can make the benchmark loaders multi-threaded.
Refactored - moved HashMaps to NumberingDefinitionsPart. Initial implementation of getInd.
refactor: maven??
refactor(all): maven coordinates & folder rename
refactored remote library added private flag to playlist
Refactored categories
refactored the build and debug/debug workflow: the starting rule is now selected in the input text dialog
refactored to extract example application
refactoring: use Users XML representation for Users
Fix for #358121 (Utf8Appendable refactored to use Bjoern Hoehrmann's decoder).
#NAME?
refactor move
Alter SpaceResponsabilityManagement interface. Code refactored in OrganizationalStructureInterface.
#NAME?
ENH: Refactoring of biobank jsps started. Link from account permissions done.
Some refactoring/cleanup
refactorings und coverage
Big shade plugin refactor.  Its large enough that I doubt it will be accepted upstream.  Renaming plugin to avoid confusion.
Refactored tools folder structure
Refactoring
"Frank server, not Symbiote server. Also refactor some request/response stuff."
Refactoring
Refactoring on choreography creation and better equals for spec classes
refactor SurveillanceDashlet to have a Loader/Viewer add a Loader/Viewer to AlarmDashlet
docu and refactoring
Greater refactoring
Refactor.
observes registration refactoring
first round of refactoring
refactor sql parser group by
Pipeline internal refactoring
Major refactor
Added tests for PreconditionsCheckNotNull and refactored how we run tests
MIFOS-4684: refactor validation for variable installments to loanAccountServiceFacade
common refactorings: - evaluation gets promoted to own package + example listener for minimizers in neuralnetworks to check for overfitting - minimizer will return no tuples anymore (better readable class) - update to junit4 in code
Refactor the Builder error handling / reporting.
refactor packages
Huge Refactor. I smell an RB coming ;).
Progress. Lot of refactoring. Started implementing SMS
Minor refactoring of ORole class
REFACTORING Renamed RoleGroup class to RolesGroup
resolver refactored slightly
Refactor all the tab APIs
Refactor MappableBufferBuilder
"Removed 21 bit limitation on string length. Broke string reading into smaller methods. Refactored variable length int and long encodings. Won't touch them again, promise! Added canReadLong. Removed variable length short (not terribly useful). Kryo now throws ConcurrentModificationException from read and write methods if invoked from a different thread, but only when DEBUG logging is enabled."
refactoring
Issue 10: Started implementing jdbc event store based on hsqldb. Refactored some classes to make them not depending on mongodb.
refactored formatting procedure
Small refactoring of XML-related classes.
CAY-1912 BatchQueryBuilder refactoring
refactored ArrayStack example
APEXMALHAR-2459 1)Refactor the existing Kafka Input Operator. 2)Added the support of KafkaInputOperator using 0.10 consumer API
Enabling query resolution to a human readable document label. Introducing disk management class. Code refactoring.
refactored Authentication classes to OAuthSession and OAuthSessionContext
AST Node refactorings for resolver
"Refactored, especially for ABM-250"
Refactoring unit tests.
Refactor launcher
"CORE & UI  	Removed IParserCallback.   	Partially converted DOM to ISourceElementRequestor (requires refactoring of CModelBuilder & StuctureComparator modules in near future).   	Completely finished ISourceElementRequestor/IASTFactory work for QuickParse mode.   	Added pointer to methods/functions into AST callback structure.   	Restructured AST class hierarchy.   	Removed the old IParserCallback return Objects from every Parser method."
"Refactor @Twitter qualifier to @SetTwitter, TwitterHandler to Twitter and TwitterHandlerScribe to TwitterScribe CODING IN PROGRESS - issue SEAMSOCIAL-9: Refactor Api and ClassName to Avoid Handler suffix  https://issues.jboss.org/browse/SEAMSOCIAL-9"
#NAME?
Convert DelayedCreationFileOutputStream to DelayedCreationFileWriter. Rename ProcessContextImplementation to ProcessContext. Rename ThreadContextImplementation to ThreadContext. Refactor functionality from GrinderProcess to ProcessContext and GrinderThread to ThreadContext with an eye on the inverted control of G3.
Refactor Decompressor interface and manager
Nice ResourceXHTMLWriter refactoring
#54 first part of refactoring to separate test framework logic from JBossAS commands
refactor out ResourceDTO so resource-cli does not depend on it
"- Summary:Refactor the code to fix bug 256238,Shouldn't update figure before inserting extended item such as Chart in library editor"
"Fixing REPORT-107 - Allow user to configure a scheduled task that runs a time/CPU intensive report (Some specific refactoring is still required, plus this will currently only run in OpenMRS 1.7+, since the scheduled tasks assume they're run as the daemon user.) Added jackson json library (the same version as is in OpenMRS core from 1.7. Added an AjaxUtil.toJson method. Implemented queued reports. (Reports run directly through the UI do not currently participate in this queue.) Implemented a ""mappedPropertyForObject"" tag which lets you pick a value for a mapped property, and put it in a form field (as opposed to the mappedProperty portlet, which writes it directly to the database) Added pages for managing scheduled reports"
[100212] [refactoring] Encapsulate field breaks static import statement.
"Reformat, Refactoring android specific stuff, working with Client instances instead of static functions"
SSM-9 - Refactoring to use annotated methods as input functions
further refactoring removed spotiseek stubs added some ui elements to app
"made reconnect service externally configurable, more streaming code refactoring, unit tests"
refactoring
"refactoring a bit the code, moving into a more logical packaging. "
refactored build path
"Refactoring module name, cleaning"
"REFACTORING Changed package, in order to converge to jarachis suite naming convention"
refactorizing the Map -> id based API
Added support for rendering incoming refactorings
Added SltPoller and refactored packages
Refactoring package names
SB-617: Heavy refactoring of the strongbox-storage-* modules ------------------------------------------------------------------------ SB-759: Create an implementation for repository features
"thumbnails cahce + G2connectionutils refactoring, using only android httpclient beginning move to photo number functionality"
Refactored RandomGenerator tests. * Added RandomGeneratorAbstractTest collecting stock tests for RandomGenerator   implementations and running RandomDataTest test cases using RandomDataImpls   constructed from generators under test. * Added BitsStreamGeneratorTest extending RandomGeneratorAbstractTest to test   abstract method implementations in BitStreamGenerator. * Changed Mersenne and Well generator tests to extend RandomGeneratorAbstractTest. * Improved test coverage (discovering MATH-640) of AbstractRandomGeneratorTest   by making this class extend RandomGeneratorAbstractTest. All new tests use fixed seeds.
refactored game to ui relation
bug #1980 : adding some tests before refactoring
Refactoring the Deflector/Indexer hierarchy
Refactor network interfaces
refactorings in the Viewer
"Still refactoring, getting more tests to pass."
"Refactored HttpTarget, HttpResource, HttpServlet to a more meaningfull Resource and ResourceImpl. Changed handling of resources by using a servlet. Change unit tests to reflect the changes."
"fix permalink with multiple timeseries, some refactoring/renamings"
"Next iteration of view recycling (on hold due to android listener implementation, need to be able to have multiple listeners per slot) and refactoring to layout code base to decrease mutability and instances of two-phase construction."
Refactored MavenMetadata
dcache: Refactor message forward logic
refactored passage.Books to passage.BibleInfo
Refactor to merge the connection managers in a single one
[console] refactoring packaged script templates
refactoring to support 12-byte symbols as separate case
Refactoring preconditions
ItEr36S07ValidacionEProbasFuncionaisItEr35S08: [Bug #106] Method name refactorization and comment removal.
"Some refactoring and updating, minor fixes here and there, updated to 1.4.2"
Simple refactoring for consistency
Almanach refactoring: - handling PDC
Refactoring Column
Bundle Revert Work - Added RevertWizard - Added Revert button to BundleDestinationView - Fixed up SLSB logic and remote/ws revert API - Fixed BundleDestination.toString - Fixed typo in findBundlesWithLatestVersionCompositesByCriteria method name - Some cosmetic refactoring to deploy and revert wizards
refs #358 - `maximum()` implementation refactored
Refactored maven artifact names and directory structure
Define: 1) update of a module's name is reflected immediately now in the module tree; 2) update of module type is processed now correctly. Define refactored inDomainGateway
Refactorings to get a Widget Application running. This requires Pax Web > 1.1.2
vm: refactor parsing
Perspective Editor UI: some bug fixes and refactorings
SCRUM-987: check that analyzer and textFilterClasses are not set - modified /website/workspace.xml to be 4.5 compliant - added /outdated/workspace.xml to make sure test would fail on outdated config - refactored WorksapceXMLUtil to be reusable - more tests
Refactor Jogger to match new namespace Rename groupId to com.elibom Update version to 0.2.0 Refactor project layout Delete parent project and archeotype
"General refactoring, new UI tests for memcheck, new outputDirectoryProvider extension point."
Refactored out Web Resource Cache and Compiler interfaces.   Moved tag lib.
ModifyingArchiveTest included in suite + refactoring
Finished refactoring for now.
reattach refactor
Refactoring path integral framework.
refactor context initialization spi
SOC-485: Refactor ActivityRestService
Refactoring of jboss deployer plugin
Refactored cluster/join tests.
refactoring osgi http service tests
Refactor the persistent writer interface to common package
fix for 37836 Push down: Forces me to select a method [refactoring]
refactor to use guice. Abstracted rhino specific context stuff to ExecutionContext
"182346: [refactoring] Refactoring could flag affected binaries which are impacted: - move (CUs, static members, instance method)"
refactored loading upcoming recordings into program content provider
Changed and refactor code
refactor and cleanup. extra database-specific http calls from general.
"Update Cypher DSL to v1.7 Refactored pretty much everything to be more in line with how Cypher works All statics moved to CypherQuery, for easier access and avoided delegation Javadoced CypherQuery"
refactored unit test to be more extensible
TEIIDDES-1701: Tighten up the checks on resources before refactoring
"More work on result writer, specifically the dynamic table header writer. Added some overloaded methods for functionality.  Refactored some of the functionality to support this."
Refactoring JDSL for Jerializers
RF# refactor menu service
refactor-rename of some methods to simplify and clarify
SONAR-2706 / SONAR-2541 Refactoring
refactor nakeduml names gen restlet component and application
"182346: [refactoring] Refactoring could flag affected binaries which are impacted (without constructors, see bug 226151)"
Refactor chart code for project 903 as follows: 1. Add IChartPreviewPainter interface to customize chart preview logic in chart builder 2. Add protected method in StandardChartDataSheet to customize available data types in data sheet 3. Refactor TaskFormatChart to customize subtask node path 4. Refactor TaskSelectData to customize optional grouping UI 5. Refactor TaskSelectType to customize misc UI 6. Refactor some subtasks to remove unsupported properties in flash chart 7. Set useDetail as false in query definition to filter out detail data in grouping case 8. Replace complex expression with a new binding name so that the expression can be evaluated in data extraction task
"Refactored runnable package into logic, added more stubs for more creatures' attack AI, and cleaned up existing logic. Signed-off-by: Chris Sanders <zidane@outlook.com>"
Start of refactored AssessmentRenderer
refactoring for github integration
Refactor REST resource logic to services
"Improve phase-tracking, event dispatching, and align build headers as events dispatched to the default event monitor...also, add debug-level enter/exit phase output in the default event monitor. Finally, refactored code that actually renders the build plan and executes the mojos for each task-segment in the lifecycle executor, to eliminate all the duplication."
"Beginning of the /quest command refactor. This simplifies the menu down greatly, and no longer involves complicated functions to users like enter/exit. (However, in reality, this is all being performed in the background, for the future should GUIs come into play, where this will need to be done (e.g. setting active quest and entering))."
Refactoring addon-test
"MODE-2489 Refactored mime-type handling and added the possibility of configuring the repository to use either ""content"", ""name"" or no mime-type detection at all."
[ENG-124] Batch db - refactoring
refactoring :la metode estDateValide est maintenant isDateValid
Refactor 4.0
Refactor to leave a LongStack only. Remove the toy implementations
"More refactoring, usage of constructors"
Completed refactoring of singletons and unit tests
BLC-567 - Added a FulfillmentOption entity and refactored the FulfillmentGroupType to just be FulfillmentType since it is now used in multiple entities
Refactoring of text constants
perform code-refactoring;
Refactor abstract chronology classes to be package scoped and better named
ui refactor
ACT-60 switching back from activity instances to executions: fixing persistence and refactoring queries
Refactored to be able to use it as a JPanel too.
Refactored frontend encoder to use generic streams.
Refactored the JMX support to add the ability to describe the attributes and operations of the Neo4j MBeans. This makes the Neo4j MBeans almost self documenting in JConsole.
Refactored the different feature maps to single FeatureMap class
#POULPE-404 Refactored onDrop* methods in ForumStructureTreeModel. Added tests for it.
Refactor yaml & properties reconciler to allow injecting a  SeverityProvider
Small refactor
refactoring grobid finder switching to java 8
Large-scale refactoring to allow tile-based conversion.
Added new code writer. Added comments and did some refactoring.
Refactor class name
Refactor DumpRestoreSupport interface to support dialects that don't require external process execution.
Refactored: removed duplication of service and controller registration from ServiceModule implementations
"adding support for HiLog logic terms, general improvements in the loading mechanism and other small refactorings"
refactoring and adding projectConnection comboBox
fix refactor WeatherTopic.
"Big ""refactoring"" to change dynamic URIResolvedRegistry system into a Java services based system."
Small refactor
Refactored ServiceExemption & LegalRegimen Entities.
"Cleanup, typos, refactoring"
make menus selectable across application navigation small refactorings for navigation controller and helpview
#34 : Refactoring RiverService with abstraction level - package refactoring
"Refactor VectorSpaceIndex, format and document source code"
refactored all query related code into its own package
Bug 430547 - refactor mozilla implementation to get version-spec IID lookups out of main implementation classes
Split MD5 and Unzip logic. Refactored Unzipper to work as a single use object.
"params refactoring, step 6 - Moved param hierarchy building methods to an optional interface extending HttpParams"
WYBS: a little bit of refactoring.
"Refactor, no functional change"
Refactor base test classes.
"refactor AsyncLogger, RingBufferLogEvent and RingBufferLogEventTranslator: these changes resulted in a 10% increase in throughput"
* fixes * some validator refactorings
osgi: refactored war bundle sample test; simplified http service test (hudson will stop complaining now hopefully)
#NAME?
Some minor PDF refactorings
refactoring: removing code duplication and changing method name
[refactoring] Moved model aspects to impl package
Refactored jpbm-wb-human-tasks-client class and package names (#709)
Some more refactorings + fixes
[refactor] configure loader and GenericFileWriter. add comments with Hypervisor and ThreadsGroup
#NAME?
refactor LastConflict
cookie refactor
HBASE-15949 Cleanup TestRegionServerMetrics. @Before and @After to setup/teardown tables using @Rule to set table name based on testname. Refactor out copy-pasted code fragments to single function. (Apekshit)
Programmatic resource modeling API refactored.
TEIIDDES-1434: Refactor the ISecureStorageProvider
Refactor Compatibility suite
Add a comment to the To class and refactor the PCollection interface to make writeTo -> write
Refactored fledgling OutputStreamer
Proper content display in IE/Firefox + small refactoring
Refactoring
refactoring templating system to extract out resource string template factory
"Refactor TopMenu links, made it panel. Added dynamic values on TopMenu links (name, tooltip, url) Updated NexusServer to v1.5.0"
Minor refactoring to reduce inter-dependencies between modules
Refactored address names
refactor package name
minor refactor
Refactored Test. Now simpler.
[REFACTOR] Some refactoring by separating how the setCoreInstance work. Will be easier when modify it.
completed RTree refactoring
Refactor REST API responses. @TheMalloum I disabled RESTAPI tests. We need to talk about this commit.
lots of changes here--loads of refactoring. you can now include java functions and gremlin functions using a new include keyword. created a new variable bindings class. implemented the script engine interface from Java 1.6 so Gremlin can be used over Linked Process--that was a pain. Lots more test cases.
Refactoring of property value resolution
various refactorings
Minor refactoring + added typed non-entity test for Criteria API
JBIDE-15302 CordovaSim: Refactoring. Adding cordova-3.1.0 support
[SUREFIRE] refactoring: varargs and Class wildcard <?>
"#JENKINS-17352 Returned back unit tests, small refactoring"
all: Refactor MessageCallback
caching refactored
refactor broker && modify app js
bookdata refactor and new javadoc
Refactoring Code - Naming corrections
IdentityQuery refactoring
KNL-1250 fix from Paul at Western U to resolve an issue where many unnecessary inserts were happening when refreshAuthzGroup was being called. The bug was originally introduced in KNL-800. This patch contains a fair bit of refactoring and has been discussed quite a bit on the Core Team call and core-team list.
Refactor the Response and view to send a page content when the response is of type Response.Content and introduced Response.Body for unwrapped responses
refactoring process
Refactored OnmsIpInterface.inetAddress to be OnmsIpInterface.ipInterface so that the Hibernate and REST properties have the same name. This fixes some query problems with the REST interface.
[PLINK-128] - Initial refactoring to the Configuration API.
Refactoring.
Refactor RangeSet into an interface and an abstract skeleton ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=34047917
Refactored AbstractBugReporter and subclasses so that analysis errors are handled in terms of AnalysisError objects rather than lines of text.  This should make dealing with exception stack traces more sensible.
HADOOP-1834 Scanners ignore timestamp passed on creation  M src/contrib/hbase/src/test/org/apache/hadoop/hbase/HBaseTestCase.java     (addContents): Added overrides that allow specifying a timestamp. M  src/contrib/hbase/src/test/org/apache/hadoop/hbase/TestTimestamp.java     Made it so test inherits from HBaseTestCase instead of from HBaseClusterTestCase     so could add in tests that do not use cluster.     (testTimestampScanning): Added test for hadoop-1834 bug.     (testTimestamp): Refactored to remove duplicated code. M  src/contrib/hbase/src/java/org/apache/hadoop/hbase/HStore.java     (getNext): Make it respect the timestamp set on construction. M  src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMemcache.java     Removed eclipse yellow flag warnings around empty parens and     auto-boxing longs.     (getNext): Make it respect the timestamp set on construction.
Refactoring and upgrad commons-collections 1.3 -> 1.3.1
Store suggestion item labels in properties file. Refactor LocalProperties stuff.
"Refactored ControlService, Gui now starts from the service, not from the Main, this fixes many nullpointer exceptions and removes many earlyer needed static attributes and methods. Added temp workaround for localeController concurrent modification exception. Moved locale logic from service to localeController. Refactored languageMenu. Updated testSuite. Build now only generates 1 JUnit report."
refactor some methods
Refactor everything to get rid of the DomainGroupVersion abstraction
Some refactorings
XWIKI-6742: Add virtual extensions support Also refactored DefaultLocalExtensionRepository to make it easier to read
@davidfestal's Extract refactoring is broken ... ... we need to get that looked at
"JBRULES-1993 BatchExeution and message format -Some refactoring to better names, like BatchExecutor is now just CommandExecutor"
fee action refactoring
Refactoring GUI.
fixes and unit tests for stif task refactor. cleaned up test resources.
"1) onebusaway-container module documentation 2) Refactoring of a number of the Spring support classes in onebusaway-container, along with updates to all dependent modules to reflect the changes"
refactoring
Refactoring plugin parser code to generate and store config templates
refactor: moved SecurityTestCaseMethods from OG-MasterDB project to OG-Financial so it can be available to OG-Web
Refactored Research Domain
Merged branches/B2007_03_19_RefactoringSpaces on to HEAD
Refactors library/stage configuration to be a bit more structured.
refactor
Refactored to reflect changes in AtlasStatisticsQueryService
QueuedEntityPlacerConfig must support multiple ValuePlacerConfigs + nominateMove refactor
Refactoring of some Java code generation related constants
"Refactored ops API to use request/result style instead of recipe/generic-collection, then moved these into a proper model module, to facilitate easy inclusion in client-api style applications. Refactored calculation ops into a graph analyzer and a graph calculator."
refactoring on state machine
"Model refactoring, Author is now know User"
CheckIN:Refactor OLAP Cursor
[PLAT-3281] Refactor: rename ExampleRepositoryConfigurationSourceComponentFactory to ExampleFunctionConfigurationSourceComponentFactory
Refactor doEndToEnd() method for easier testing in the future   new rewrite() method takes InputStream; easier to pass InputStream from getResourceAsStream()
Refactor to create getPart (which is recursive) and getRawPart (which isn't)
refactored code: now uses our query analysis based on YASGUI paper (this is closed source though; implemented as eclipse dependent project
renaming packages from br.com.fixturefactory to br.com.six2six.fixturefactory
"- FIXED: Removed equals() and hashCode() implementations from AbstractTransition to avoid issue where multiple transitions with the same head/tail couldn't be added to a graph.  The implementations didn't consider that an API user might have multiple transitions to/from the same state(s), but with different valid inputs and onTransition() implementations.  Duh! - Moved states and transitions into their own packages - Refactored StateMachine to add instances of new StateMachineEventListener interface and call its methods where appropriate."
refactored into packages
refactoring in page-fragments module
#POULPE-345 Search field isn't cleared after adding Banning user Started to correct a problem with search field and refactoring. Had to commit a bit of rubbish that doesn't work. Will correct soon
Refactoring: org.eclipse.php.debug.core.debugger shouldn't know about the launch.
SONAR-9721 Refactor TelemetryDaemon
Code cleaning and refactoring
behavior refactor Issue: WICKET-3206
Refactoring code about report document
HtmlElementInitializationTest is refactored
FACES-1898 Develop alloy:outputTooltip component (refactored to use Overlay and OverlayRendererBase)
"- Fix for bug#2216 -- KSC Report list is reordered every time a new report is added. - A unique ID is assigned to each KSC report, is persisted across edits, and is used instead of the report's index in the KSC configuration file everywhere, particularly in URLs.  The ID is initialized to be the report's index (starting at 0) in the KSC configuration file and is persisted the first time changes are saved to the file during normal editing. - Instead of having a set of fields in the KSC_PerformanceReportFactory that track what report and graph are being editing, move this to the new KscReportEditor object along with related methods and store this object in the user's session. - Use Asserts in afterPropertiesSet and other methods to simplify things. - Format code in a few places. - Refactor some controller handleRequestInternal() methods."
refactor serilaize filter
Review of javadoc and bits of refactoring.
"Code refactoring, one place!"
GSA-507: Thread monitoring refactored so it can work without a thread factory
refactored the code for bindings
Refactored for 27159
EL refactoring for @Named beans doesn't work properly https://issues.jboss.org/browse/JBIDE-10210
Refactorting WIP
Minor refactor to instructor authn filters
refactored Worker interface/abstract-class
REFACTORING Moved 'prefix' parameter from reading method to constructor REFACTORING Renamed readign method to readBaseConfiguration. Specific subconfigurations will be read through a new readConfiguration(String key) method
Fixed crawler engine. Refactored commons between crawler and search. Fixed bootstrap scripts.
Refactor to produce war file as well
Package refactor
"integrated new version of monitoring spi - refactored interfaces (monitoring provider split up to (request|dispatching|response)listener - added some methods (onExceptionMapper, ..)"
refactor
refactoring + incl. camel
https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring in progress. - Some Drag&Drop related methods have been moved from VpeVisualDomBuilder to VpeDnD.
unit test refactor
"refactored filtering of updated/inserted etc objects, can now be called without fetching"
Ashish|#00|Refactoring some code
Refactored LogstashFormatter to use the jackson streaming api where possible.
started work on testCompositeSubcases(). Began refactor for general support of indexed data values.
refactoring test to integration test suite and making it always to execute
"[PLAT-2212] Adding clientShutdown() call to ViewResultListener; checkstyle, documentation and refactoring of new Batch-related calls on ViewResultListener; bug fix for new Batch-related call in MergingViewProcessListener; tests"
Refactoring.
Refactor CommentedChangeActionDialog to be more reusable
Refactored a bit more
"userportal,webadmin: refactored badly overgrown method to more understandable parts"
[Refactoring] Extract code into a separate method
Refactored theme tests.  Committed with TC.
SOAP-2214 The starter page now has a button for creating a data driven test project from a template file. It works! * Added a dummy starter page for experimentation * SoapUI Pro now has its own starter page (URLDesktopPanelPro) and corresponding methods * Some name refactoring
refactor waitForInput in CommandLine class.
Invocation interceptor refactoring
[PLAT-1296] Refactor time-series master; Rename
Refactoring
some refactoring and better documentation
Backing up after a lot of refactoring
- [#3291] move code from core module to web and batch modules - core-to-batch module class refactoring - all command line applications are now in the batch module - batch module is now a java project (jar maven packaging)
Refactored duplicate code into separate method.
initial refactor for obj-c module
First commit of the new Interceptor system for Stripes.  Includes a major refactoring of the DispatcherServlet to cleanly break it into one method per lifecycle phase.  Also includes a new SpringInterceptor which will be the preferred mechanism for integrating with Spring from now on.
[AS7-2943] Start refactoring into common code used for copying files across and move the FileRepository stuff into the deployment repository
Started refactoring geometry
TurtleSerializer refactoring
Refactored methods to set text and icon in tree cell renderer
refactoring + renaming LegacyKore
refactored for access in maven plugin
Reverted method name refactoring on Directory interface.
Fixes synchronization between network and network view selection on the UI. Some refactoring.
package refactoring - pubsubhubbub 
Refactoring
added tests; refactored vector
refactor unit test for cleaning purpose
refactoring saikumondrian helper into saiku-olap-util
OR-60: Minor changes related to code review comments i.e. refactored 'validateActivationKey' -> 'VerifyActivationKey'; ActivationService API does not expose the fact of keys expiration in 'invalidateActivationKey'
Refactoring of old logging system
Fix compilation errors after AST core refactoring
"Refactorings:    Adding some copyright headers    AbstractPMDProperty to AbstractPropery    DataSource stuff into pmd.util.datasource    Log stuff into pmd.util.log    MockRule, AbstractDelegateRule, RuleReference into pmd.lang.rule"
Merged Predictive ID refactor with the main branch
first iteration of initialization process refactoring. clean up all the grown mess
Refactored Attribute iface to support XML NS.
"Tutorship: Tutors selected from a list instead of a input field with a name, implied some refactoring and reorganization of common code."
Refactoring
QPIDJMS-105 Refactor the session send method a bit to simplify some things and clean up how message ID is handled when message IDs are disabled.  
Refactoring & new tests
refactored to separate out JPA from cache logic
Finished the refactoring of link tests
Add hasNoParameters assertion for URIs and URLs. Refactor hasParameter/hasNoParameter error messages.
Refactor the name of class
refactoring...
Initial pass toi refactor internal/external APIs
NXP-2514: refactor fragment state management to be able to process cross-session invalidations
"Complete refactor of pdf export classes: seperate classes to convert DOM and FO and performance logging of Pdf creator. Better naming and more story telling in code. Except for removing system.exit(1) and some bad exception handling (which is still present), all functionality is still present"
"Refactored InstrumentGUID out of api, moved to inst"
Refactor
"ISIS-1603: renames the refactored ScalarPanelAbstract and ScalarModelSubscriber, and brings back in older versions for backward compatibility"
api_refactor: refactor job (async jobs) apis
Refactor addInterfaces method.  Next comes the reordering of operations.
refactor
"The ""Merry Christmas"" commit. This is a first stage of web interface refactoring process."
refactored field to tkey
refactoring to ease cron scheduling
#NAME?
Forced to commit during refactor
Refactoring
"Activiti Cycle -  Architectural Refactoring: restructured MimeTypes, RepositoryArtifactTypes, ContentRepresenations and others using annotations. "
"JBRULES-1197 Extends actions support to include other dialects and callback -I'm updating PackageBuilder to be able to handle actions. It's still very messy, but all unit tests are currently passing. So I'm  committing now, before I start on more major refactorings."
"- Thumnbnails refactoring - Introduce the notion of ""module"" and ""entity meta"" - get rid of the ""base"" package"
Renamed utils class and refactoring
LanguageModelFF.estimateFutureCost refactorings and test
Did some refactoring due to newly discovered RepositoryRefsChangedEvent
continue refactoring - begin fixing ignored tests - fix audit logging around updating center status
"OrderController, refactoring mvc package -> item, list"
"refactoring of EJBQL translator - consistent use of the newly introduced ""context"" in child translators"
Benchmark report aggregator: Big refactor to split up *BenchmarkResult from *BenchmarkRunner and BenchmarkReport (to make Results and Report reusable).
Refactored upload mechanism a bit
"Refactoring, add CsvMapper.copy(), make CsvMapper JDK serializable"
"Refactored pressure, temperature and percentage-usage related commands. Unit-tests followed. Updates issue #10."
DB refactor pass 1
first successful partitioning of dbpedia live dump;  some general demolition and refactoring.
refactored TestNG main (contained dependency order between the setters)
FIXED - bug 230296: [DataBinding] Refactoring in ViewerUpdaters https://bugs.eclipse.org/bugs/show_bug.cgi?id=230296
First cut at refactoring graph tests.
Refactor versionMismatch logic
Refactoring of RemoteServiceAdminView to allow for accessing remote RSA implementations
refactoring : rafactorisation de la validation de la forme du document xml en input input.
LDAPProvider refactoring
ISIS-1427: minor refactoring of IsisConfigurationForJdoIntegTests to allow reuse within custom AppManifests in integration tests
Refactoring of JML generator tests
"Some refactorings and cleanup, namely: - Moved all relevant null checks into Resource - Made create firewall use FirewallOptions instead of a Firewall obj - Consolidated a lot of the HttpRequests in the expect tests to allow for reuse (in compute)"
[MOD] XQuery: refactorings; support for ASCII case-insensitive collation
"Lots of refactoring related gh-7, gh-8 (refector player and robot). Also fixed gh-10 (multi-player scoring)."
91324: [refactoring] refactoring extract constant failed + test for analogon of 92483: Extract local doesn't handle wildcards
Refactoring of OMVRB-Tree to support a parallel provider to store key set. First alpha.
"Taint safe objects config: Refactor names from ""method summaries"" to ""taint config"" to better reflect the taint-config/* files can contain not only methods"
refactoring method names
refactored default api implementation into separat plugin
refactor to get rid of redundancy
WINDUP-74: Refactoring to support script location metadata and extendable groovy syntax
Refactored test framework
refactored to use cons-list as the internal data structure for KSequence; simplified CopyOnWriteTransformer#transform(KSequence)
"refactored, making sure bolonha degrees are treated"
Refactoring in Ranking modules.
fix marker selection problem after category refactoring
refactored some code
Refactor to make ConnectionFactory the entry point.
Did significant refactoring of method names and class names in the classify package.
Refactored GeoCircleImpl subclass from CircleImpl
A little refactoring to make things clearer
refactoring databinding
Refactor of all Entity messages
UNRELEASED * Refactoring.
[UF-132] Some cleanups and refactorings on uberfire-js. JS native code moved from JSEntryPoint to UberfireJSAPIExporter
Simple refactoring
Refactor project removed ide. 
minor refactoring
Refactor framework Catalog entities to utilize TCS columns
"With the update of some of the dependencies and the removal of some of very old dependencies, some codes have been refactored: - The very old informa library to produce or to consume RSS feeds is now   replaced by the last version of Rome. All the codes that used informa are now   refactored to use Rome instead of informa. This is mainly the case of the   application RssAggregator."
mimic: replay only once + refactor record state to the replayer (in case there are multiple replayers)
Massive refactor to remove code that in practice isn't very useful. The main goal of this refactor is to simplify the code.
Refactoring
some refactoring
Refactored tcx2nikeplus.uploader package to tcx2nikeplus.http.
Refactoring of the domain layer
Attributs API refactoring. Rename manager to model and class to table. Encapsulate AttributeModel in workspaces and add merge methods. Adapt existing modules to use current workspace's AttributeModel. Adapt Import Container and Processor to new model use. Add some methods and cleaning in AttributesImpl.
"Stage 2 of Variation refactoring: VCFRecord now implements Variation, VCFGenotypeRecord now implements Genotype."
refactor the tests some more to make eacy simpler
pool: Minor refactoring of how movers invoke post processing
"refactoring of framework configuration handling, optimizing imports"
CLOUDSTACK-5779: Refactor mechanism for calling routerProxy in CitrixResource
Refactoring security.
"refactor js library defs, bug fixes, and tests @bug W-2360275@ @bug W-2318010@ @bug W-2328644@ @rev goliver@"
Refactor unit test.
refactoring some things
code review - javadocs and minor refactoring (common classes moved to common-utils)
Refactor Connection Policies and Reconnection Commands
token stream filtering refactoring
More refactoring of TypeQualifierDataflowAnalysis. Moved some methods down to ForwardTypeQualifierDataflowAnalysis.
refactored initialization
IO - some serious refactoring to streamline design of Cursors and RandomAccesses
Refactored location module's packages.
#6 Create Interceptor architecture for mongo - refactoring packages and arring some documentation https://github.com/ddelizia/vcrud/wiki/Interceptors
ActiveBPELDeployer: refactor sending requests
Refactoring of #237 and #240
Refactored Apple Device registration process
Enhancements and refactor in source codes.
Refactoring: moved creation of qx appearance theme out of theme manager
"[refactoring] Improve Rendering Tests by ensuring that all *.test files are executed automatically, even when new ones are added"
(Vivek/Srikanth) Refactored some service methods.
[#3] Improved testing + done some refactoring
Refactored naming conventions
Minor Change: Adapt EPFL applications to Phd Applications Submission refactored in middle of this year
Refactored VariableLong adding support for better prefix writing and backward writing of variable long.
"Refactor WebSocket implementation by making WebSocketProcessor a singleton, shared amongs requests"
"refactored cycle API, made CycleService the central API, added connectorId to all methods in cycle service, got rid of root connector, seperated persistence into several services with interfaces and impl package, refactored GUI according to changes, removed some obsolete files and classes"
Refactor XSDs
refactor
"[3893] and [3894] ; refactoring of calibration engines (the successive least square and the successive root finder), now we can use prices as input (typically matrix or cube of double)."
185338 [refactoring] [dcr] Extract Class
some minor refactorings
In progress refactor of Spring Security. Got rid of old StormpathWebSecurityConfigurer and renamed StormpathWebSecurityConfigurerAdapter to StormpathWebSecurityConfigurer. Refactored Spring Security WebMVC examples and is working. Refactored stormpath default spring boot starter and /login is NOT working.
HBASE-5892 [hbck] Refactor parallel WorkItem* to Futures (Andrew Wang)
"Refactor the Toc Renderer, produce an image that merge the row icon and the checkbox."
refactor ingest class names
refactored GlobalBuildStatsPlugin class with a split into GlobalBuildStatsBusiness and GlobalBuildStatsValidator
Refactor question conditions Add tabs for array question
Added a Hive.load where you can pass in a DirectoryFacadeProvider. Hack so that development can proceed on MemcacheD directory while Hive creation gets refactored.
refactor Input/OutputCommand.
refactor
refactoring - remove code duplications
Refactored packages. Added Aggregates and SENSEI-151 Better query template variable support https://linkedin.jira.com/browse/SENSEI-151
Summary: Refactoring code for extra work.(T55182)
Refactored package naming.
Refactoring test path
Kie API refactor
Agreements finders tested + refactoring of deprecated annotations
Refactored ArchiveContentIdentifiers to make more DRY and remove tmp files on exception
Refactored MySQLConfiguration and MySQLConstants Implemented Select for MySQL
Implemented getCurrent/getExistingCurrent methods. Refactored existing assertions code to make use of this functionality.
simple code refactoring to clean a bit
minor refactoring
adding testcoverage and some structural refactorings
bug fixed for BeanToArray & refactor testcase
[217020] Refactored ICommandControl interface to use a token to identify queued commands.
some refactoring
"Refactored CommandParser to provide additional meta-information on the parsing process (for use in CommandCompleter), command completer now functions admirably :)"
"Structured query bugfixes and refactorings: - do not crash on non-existent conditions, just ignored it and write a suitable message in expansion area - code around condition efvs resultion made cleaner - try to consider up/down specification for ""any condition"" type queries (not working properly, actually) - correctly switch factor back to ""any"" - attempt to remove last condition just cleans it instead of do nothing"
CAY-802  Split Expressions (refactoring of QueryAssembler to support split joins. NOte that it makes it incompatible with 2.0 version)
refactored the code to make it cleaner and easier to use. Also added more comments and javadocs
[refactor] move constants
Refactor
#NAME?
refactoring growl plugin space
finished refactoring the aspect to use field accessors and dirty handling
refactor SnmpCollection a little
initial attempt at CAMEL-12; creating a DOT file for the route definitions. Also a minor refactor of the CamelContext implementations to add a way to registry route definitions along with a getter to view the route definitions
more refactoring
small refactor
refactored; removed /stream/json in favor of /stream/?output=json
"Refactored, moved utility functions to the proper utility classes."
Massive refactoring of XML parser logic and structure.  Some bug fixes as well.
Refactored to made it easier to use by subclasses.
Issue 101 - refactor simple consumer examples
Move static memcached stuff into loader and other refactorings
Templates: Refactoring and improvements
"Refactoring of clone methods. _clone(iwc,askPermission) => clonePermissionChecked(iwc,askPermission) and clone(iwc) => clonePermissionChecked(iwc).Added TableCell class and replaced the PresentationObject Array in Table."
Refactor
refactor package
completed.jsp refactoring
Refactored Log4jAdapter so it would be easier to accept logs from other logging frameworks
Phase 1 - pass env as -D option + small refactor
#NAME?
FIAS XML Saver has been refactored
Some refactorization.
Module refactoring to make aspects available during compile time of the monitoring API consuming modules
Refactor the value type system
Remove file system refactoring from API
"huge refactoring of timeseries API and creation of adapter classes, converters and output classes"
Fix for CARBON-15563 refactor kernel components and move everything under org.wso2.carbon.kernel package
Extensive client refactoring and rework
Refactoring of color blending functions before #293
#NAME?
Large refactoring.
Refactor ValaLabelProvider further using CodeVisitor.
Refactored multiple copies of code into a function addFile and other minor cleanup
WIP: NodeStore refactor
Refactoring
Refactoring of SimpleGeoClient to support URLConnections (and GAE by extension).
Further refactorings on the way to HL7 v3 transactions
Refactored name of getPlatformIdParmValue() to getAlertSourceParmValue() since the parameter name has changed.
preprocessing code refactored.
[DEMO] java gui demo refactoring
more cleanup and refactoring
Outputting BMP barcodes and a bunch of refactoring to this thing as im learning a lot on the fly!
Refactoring
refactoring finish
grap: D8 algorithms refactoring
Refactored Graph Native API to use the underlying OGraphDatabase constants + new test cases for OGraphDatabase class.
"Added automated tests for org.openmrs.api.db.hibernate.HibernatePatientDAO and org.openmrs.api.db.hibernate.PatientSearchCriteria Refactored org.openmrs.api.db.hibernate.PatientSearchCriteria Added and implemented org.openmrs.api.db.PatientDAO#getPatients(String,Integer,Integer) Added and implemented org.openmrs.api.db.PatientDAO#getCountOfPatients(String) Marked org.openmrs.api.db.PatientDAO#getPatients(String,String,List,boolean,Integer,Integer) as deprecated Marked org.openmrs.api.db.PatientDAO#getCountOfPatients(String,String,List,boolean,boolean) as deprecated Moved tests from org.openmrs.api.db.hibernate.HibernatePatientDAOTest to org.openmrs.api.db.PatientDAOTest"
Refactor: Move the input format and readers that use the new MapReduce interface to a separate package
refactoring -- for maven
restapi: Snapshot Refactoring
ROO-2745: Post 1.2.0.M1 code refactor and clean up - more static imports
BAEL-276 - Refactoring encoding test
refactored test for expiration delay of entries on backup partitions .
Started refactoring the org.jmock.dynamock.Mock class Added some unit tests for the org.jmock.dynamock.Mock class
Refactored names and fixed imports.
refactor(engine): Improve logging for MBeanDeploymentSteps
refactor of narrative generation code which hopefully fixes #508 and #412
refactoring from java to scala
refactored PreferenceService - rjrjr
Refactoring of plugins package
"MAHOUT-798: add in examples for working with ASF email archive, plus various refactorings to clusterdumper, etc. for viewing results"
Refactor database access code into a general BaseServiceImplementation
"metamer: refactoring of configurators * configs refactored, config can now be of other type * templates names are parsed vie the custom method in Template class (now the template alias can be used) * some comments added * annotations cleanup"
Some refactoring of the monitor apis
"Added support to check that commas ',' are followed by whitespace (ala the Sun coding standard). This mainly involved refactoring the code I just wrote for checking casts."
Refactored and updated comments.
"CSPACE-1079. Work towards supporting search for documents by a field value. Some refactoring of the ServiceBinding and TenantBinding support, and some new utility methods."
Refactor the Measurements API into separate projects and enable dynamic registration of fetch strategy implementations.
refactoring: common devices events
Refactor package names
clean pom.xml + minor refactor
Refactor domain package. Change default landing pages. For domain it's server status overview now. For profile it's the datasource view. The 'overview' will probably go.
renamed nls packages to .refactoring.nls
"write-only refactoring for the conditional classes, they should now all support ERXElse and are all dynamic elements instead of components. Also added ERXKeyValueConditional"
SONAR-3755 refactor comments
refactoring on enum list support with has function
"Multi instance refactoring: introduced the 'IS_MI_ROOT_' column to indicate an execution is the root of a multi instance. Every multi instance (sequential and parallel, parallel already had it) will now spawn an execution that acts as parent for the whole multi instance. This has two benefits: cleanup becomes way easier and it opens up the possibility to dynamically add new instances to a multi instance (not yet implemented)."
refactoring: move PageCache again...
#NAME?
#NAME?
SONAR-8957 Refactor DeactivateActionTest
"refactor code, moved the ecljobentry base classes into its own package within eclgui library and moved code that is reused into these base classes in outlook and rollup, will do for the rest later, also seperated the recordlayout into its own package within eclgui"
Refactor Metrics collection to be deterministic and complete AGPUSH-1512
TURMERIC-1523: Test refactorings and schema update
Refactored tutorial controller and added model
[REFACTOR] fixed sorta typo and methodname
Delete FiltersUI module and create DesktopFilters. Refactor branding and add Ranking and Filters in Overview group.
refactoring: extracted methods; added test (cherry-picked from e211118)
"Creating CreateTableStatement.  Refactored CreateTableChange to use it, created unit tests"
102020 [move member type] adds call to uncreated field [refactoring]
API review refactorings
Refactor
Refactor: Extract innerPerform() for re-use
refactor swing package
refactoring
refactoring to prepare for configuration type support - rjrjr
Refactored formatter code
Major Refactoring from 'Stage' to 'Perception'.
Refactored TestContainer tests.
Added <bean> to the XML language along with <proxyFactory> and <serviceExporter>. Also various refactorings to tidy things up.
"starting to refactor to be more like jdbc with a connection, connection manager, driver...with a view layer on top to provide view-specific access to the data."
Cloud provider refactor
Almanach refactoring: - the max number of displayed next event is now a parameter of calendar.properties - add external url UI - modifying the rendering of the occurrence view - adding silverpeas-panes.js - adding silverpeas-crud.js - fixing some stuffs around attachments
Refactor package names to correspond to module names
More refactoring API work
SONAR-1929 refactoring of the extension point Dashboard
Refactored: removed unnecessary provider injection from providers
Fixed bug 281028: [xpath2] Need to Refactor Promotion rule implementation
Some platform services refactoring
more refactoring
"Added SpatialPrefixGrid.getWorldCell(), with default zero-len token impl. Fixed Cell.getLength() in Geohash grid; made abstract in base for subclasses to implement. Did some refactoring in Geohash grid to use ""Cell"" terminology instead of ""node""."
Extracting IBlockheadClient for refactoring prep
Resource re-refactoring
Refactored SOAP message header fragment handling
CSS Style Dialog refactoring
"refactor fit, organize imports"
4 methods removed from data scroller page fragment API tests refactored
refactor domain tests -> now it exists database integration tests and normal unit test for the domain classes
Refactoring: Model resolving & Tests
Refactored layout for next iteration
abstracted the idea of a listener collection refactored listener lists to use the collection instead removed detachlistener in favor of ondetach in request cycle listener request cycle listener now gets the request cycle for context Issue: WICKET-3125
"Several Stx fixes and refactorings (hope to finish this soon, brrr...)"
Done refactoring the HTML code
"userportal,webadmin: frontend refactor phase 2"
Refactor iPage use MappedDirectBuffers.
XWIKI-4093: Refactor the code to use the new EventHandler system
"small refactorings (moved classes to util package, introduce Signavio config object)"
"Add generic Mapper, move Builder from test to main, refactor, change version to 0.0.2-SNAPSHOT"
major refactoring of documents due to the need of internationalization
refactor a game engine out of the gui
let the big refactoring begin
"Refactoring grande, for cluster tests; trying to get to 2x2 tests with AHC/JDK-HTTP, BDB-JE/LevelDB permutations"
Beginning to refactor Newton multi-dimensional rootfinding code
refactor ValidationUtils
Refactor TimeAxisLabelHandler to support relative
refactoring and cleanup check for correct version of XPP3 default behavior is now nicer * auto-ids for stdin * ID_NAME need not be set
ToolItem & ToolBar refactoring (fixes #717)
Cell renamed to LiveCell for further refactoring
refactor challenge question service
refactoring introducing the preferences api
"serialization fixes, and refactored tests to work properly."
"HtmlProcessor refactored to be able to change the known HtmlTags, HtmlAttributes und UrlRewriteMatcher."
Refactored Web Service code for reuse. Created replica of Phenomics web service with minor changes. Element hierarchy and element names in request XML will need to be changed.
"Refactoring/Adding buttons, refs #11"
Refactor: Removed the ServiceResponse argument from Berserk Filters
"KARAF-3504 Make instance:create less verbose in log, fix warnings, small refactoring"
Refactor: All Berserk service invocations are now done directly to ServiceManagerServiceFactory
small refactor to internal
merge refactor
"Big refactoring, trying to implement OCP, ISP,..."
"Switch over to using TopologyViewImpl as svg canvas, refactor 2012"
"Refactoring of the Monitoring implementation - now, a bean post processor is used to register monitor instances with the MBean server. - the name of EventListener is fixed in case annotated event listeners are used."
Updated pom.xml to add myself as a maintainer Added default node property configuration Refactored method names added htmlunit browser
refactor(itest): renaming packages
"Refactored DomXmlMessageValidator * Reduced Cyclomatic Complexity (3 Sonar warnings eliminated) * Added some Unit-Tests to backup refactoring * Discovered (and fixed) Bug: when an element contained validation matchers on attribute and(!) element value, the validation for attribute was never performed"
What should have been a small edition ended up as a major refactoring.. o Adding support for sorting the rooms. o Adding a by-day list of rooms to accomodate for 2008. o Changing calendar.jspx to use the new WebCalendar which should be significantly easier to understand.
refactored Solaris[Hlper->Util]
some refactoring
Daemon shutdown messages tested and refactored
"Refactor search visitor to not require knowledge of index node structures, leading to potential bugs, and in this case to a bug with traversing too many index branches due to index node envelope corruption. Also added more OSM dataset API features for exploring the way and way-point structures."
More refactoring around GraphBuilder
Failed at refactoring method name...
Refactored MI stuff to MVI stuff to not confuse it with MultiInv classes.
global test refactor
ISIS-1428: refactoring/renaming for synchronized statusFor(...) method.
[CLEANUP] Move some variables to super class and refactor
Refactored: made RevisionCounter capable on coordinating transactions
Refactor tests
GUI init refactored to group elements initialization
Refactor StaticServlet so we can add static-files headers and expiration handling
Refactored ShellUIPromptImpl a bit
Refactor library code deeper.
Refactored db and mappings
refactoring
Refactoring
refactor message consuming
Refactoring fixed income code (bond and swap primarily) to make it easier to use in OG-Financial
"Refactoring of DbSqlSession with some major changes: - The deleteOperations are no more. Now, the deleted objects are kept in a map, consistent with the inserted object. This removes the need for looping over all deleteOperations in quite a few places. - The ordering of executions before the insert/delete flush has been removed, the logic inserts/delete always in the correct order and there is no need for extra housekeeping anymore. - Flushing has become more consistent, for inserts/deletes/updates - No need for calling cache remove anymore"
Refactoring of changes list use by changelog : - use now ChangeSet and ChangeFile instead of ChangeLogEntry and ChangeLogFile. - move this class in org.apache.maven.scm for shared with other commands. - The modifications list contains now a list of ChangeSet without sorting or grouping. Sorting and grouping will be the work of a ChangeSorter.
"refactored cycle API, added RenderInfo to provide standard set of available views for plug-ins, changed the content-type definition by using a mixin interface to add extensibility to the set of standard content-types, refactored API according to these changes, adapted the UI/REST component accordingly"
"Huge refactoring { 	HolePunchInitiator.class 	HolePunchInitiatorImpl.class 	GenericHolePuncher.class } ++ linking HolePunchInitiator to PeerBean ++ small refactoring in Sender --> Util"
refactor
Refactored some of the base class names (and the coresponding examples).
Refactor the command line framework for simplifying
Refactors and cleanup
"More on HER-1901 - fix build by refactoring launch dir initialization into PathSharingContext; refactor config path interpolation mostly into ConfigPathConfigurer; various tweaks  * ActionDirectory.java, CrawlerLoggerModule.java, StatisticsTracker.java, SurtPrefixedDecideRule.java, WriterPoolProcessor.java, profile-crawler-beans.cxml     use camelcase ${launchId}  * CheckpointService.java, JobResource.java     rename getAvailableCheckpointDirectories() to findAvailableCheckpointDirectories() so that it's not treated as a bean property * WriterPoolProcessor.java, WriterPoolSettingsData.java, WriterPoolMember.java     rename getOutputDirs() to calcOutputDirs() so that it's not treated as a bean property * ConfigPath.java     let ConfigPathConfigurer to do interpolation of ${launchId} * ConfigFile.java     let ConfigPathConfigurer do the snapshotting of config file * CrawlJob.java, PathSharingContext.java     remove launchDir initialization out of CrawlJob into PathSharingContext * ConfigPathConfigurer.java     - remove special handling of WriterPoolProcessor store paths; instead, look in beans for ConfigPaths within Iterables     - have each ConfigPath hold reference to this ConfigPathConfigurer to use for interpolating ${launchId} and snapshotting config files"
more fixes and refactoring
refactored how the hydrated cache manager works so the cache events are actually captured and acted upon as expected
refactor testcase
Lots of changes on the plane ... main improvement is getting the real VSA working properly with convolutions. Other refactorings including promoting plotting utils to main src.
refactor code
Refactor expression visitor to allow generic return types
getCurrentUserUsername refactored
SCRUM-434: refactoring after review. Added ContentMap counterpart methods. Tried to apply DRY principle.
Refactoring GameControlleru a souvisejících t?íd Dopln?ní odesílání mailu p?i zm?n? po?tu míst p?i editaci hry
refactor AxisVector getAxis() to axis()
Refactored: created EntityInfo
Refactoring
"schema for transactional components, refactored stormtopology definition to support internal representation of topology (spouts with inputs), better topology validation"
Added javadoc comments and did some refactoring in AssignSortableBean.
Refactor Video related Adapters to remove duplication.
Refactor cached alert count mappers to new framework.  Refactor ExecuteDomainMapperExecution to be even more flexible.  (B-07683)
refactored gameLogic powerups and other minor issues
big refactor
Refactoring binding API. Adding support for generic types.
Refactoring per code review's comments.
more work on Story 1310 - CollectionSheetEntryAttendanceTest: cleanup and refactoring
more refactoring
#NAME?
Refactored events.
Refactor to put PSA rest resource in API tier. Web tier will cache PSAs for one hour.
[refactoring] Better method name
Refactor AnalysisType and AnalysisRuns to Plugin and PluginRuns
Refactoring: renamed objects
KARAF-1206 Refactored InstanceServiceImpl
    HBASE-10378 Refactor write-ahead-log implementation -- ADDEDNUM
Refactored
pagination: refactoring after API simplification
Refactoring. Introduced a plugin interface. 2 advantages: * both the plugin and the plugin API can implement it and thus don't have to copy paste the Javadoc (except here the mailsender plugin was not implemented following the rule that the API must delegate its calls to the plugin proper) * allows to clearly see what's the plugin API and even create links to it in the documentation.
refactor for latest wst
Refactor execute to RepositoryAction
Refactored parse state into State inner class.
"MATH-439 Refactored the ""solvers"" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. ""NewtonSolver"" fits in the design without resorting to a cast. Created class ""MullerSolver2"" to contain the code of the method named ""solve2"" in class ""MullerSolver"". Removed ""UnivariateRealSolverFactory"" and ""UnivariateRealSolverFactoryImpl"". Default solver in ""UnivariateRealSolverUtils"" is explicitely instantiated. ""AbstractContinuousDistribution"": Type of exception thrown changed in ""UnivariateRealSolverUtils"". Factored out duplicate code (in ""GaussNewtonOptimizerTest"" and ""LevenbergMarquardtOptimizerTest""): class ""Circle"" is now called ""CircleVectorial"". Also factored out the ""Circle"" class from ""NonLinearConjugateGradientOptimizerTest"": class is named ""CircleScalar"". Created ""SecantSolverTest"", moving there all the tests for the class ""SecantSolver"" that were located in class ""BrentSolverTest"". Created new interface and base class for polynomial functions solvers (""LaguerreSolver"") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423)."
"package refactorings, added random triple posts for wk scenario tests"
Minor refactorings and tweaks
refactor test cases
refactoring load and merge properties for specific and general environment
imp: added TomatoReview domain class imp: added end timer window ref: general refactoring
Added column alignment and widths to APIs Refactored vertical/horizontal page layout API to make it easier for subclasses to customize
Added SAX-based dsl4xml implementation. Needs a bit of refactoring
core: Refactor VdsStatic to use FenceProxySourceType
#NAME?
Refactoring: Extract Story for Linking Behavior.
Forgot to refactor this one too
Tests and refactoring for Matrix operations
"The concept of player has been added (IA and Human), with the concept of fof (friend of foe) There has been some refactoring in the entity data model. The attack action now has the ship follow the target."
Refactored codes.
Refactor the SumStatsVCC
"Index locations and contacts. Refactor event properties code now that categories,contacts and locations are being handled in the same way - again."
"Name refactoring, removed unused and empty classes, added 'require' as ruby keyword."
"Task's session extraction refactoring, pt. 1"
[40243] inline method: loses comments [refactoring]
"MAHOUT-1655 Refactors mr-legacy into mahout-hdfs and mahout-mr, closes apache/mahout#86"
Refactor for website naming
refactoring about jedis pool
DATAMONGO-1542 - Refactor CondOperator and IfNullOperator to children of AggregationExpressions.
KIJIMR-18. Refactor KeyValueStore APIs.
JBRULES-220 Refactor ObjectType to work with Templates -This also involved  refactor Evaluator to use Enums for ValueType and Operator
Refactored: moved configuration methods to SuiteOptions
"Refactoring service / controller hierarchy. Instead of using org.deegree.controller.XYZ, the controller (protocol-specific classes) are not put below org.deegree.XYZ together with the reset of the service classes."
"refactored a bit, made VerboseLevel specific to each and every channel+repository identifier (git plugin)"
"Refactored NPN code for the soon-to-arrive ALPN code. Moved NPN tests to new module spdy-npn-tests, that now is the only module requiring the -Xbootclasspath configuration for the Maven Surefire Plugin."
#189: modifications/refactoring to be a little more like other existing spring modules.  Upgraded Spring version to 4.1.7 and Spring Security 4.0.2
refactor MemoryBenchmark to simplify reuse for multiple tests
changes for model refactor
Minor refactoring and added a reference to a bug based upon the findings
big cleanup/refactor of module properties page
Refactoring the test.
Refactor LexNameTokenMap to handle factories
Refactoring Clock widget
Ability to load unread properties after deserialization * https://code.google.com/p/mybatis/issues/detail?id=300 * Refactored SerialStateHolder & ProxyFactory.
refactor serialization units
small refactorings in tests
"refactor package naming, fix compiler errors"
MageServerImpl refactoring. More event logging.
TAJO-70: Refactor GlobalEngine to handle DDL statements. (hyunsik)
Refactor: extract interface from SuperSlice and move it to the api package
core: Refactoring the CreateVDSCommand
Done alpha version of refactoring interval tree inbetween search
names refactoring
refactor Tooltip and Popover add Tooltip and Popover sample
#NAME?
ADDED crawl-delay as specified in robots.txt REFACTORED robots.txt parsing into own RobotsTxt class which now also contains the check if a page is allowed to be crawled REFACTORED IRLbot to consider delays specified in the robots.txt REFORMATTED tabs to blank spaces (4 per tab) and changed code style a bit REMOVED manual logger configuration and instead rely on auto-configuration through lookup of log4j2.xml / log4j2-test.xml within the classpath REFACTORED some first loops to Java 8
TIKA-241 Refactor to use common logic between PackageParser and RarParser for populating xhtml+metadata of embedded resources
refactored package structure
refactored code.
added configurable sleep period to WaitFor (adding a Sleeper interface). Refactored internal uses of the deprecated methods.
Updater: refactor the version merging from multiple update sites
refactor service descriptor localization.
webadmin: Blocking port field in edit host popup and refactor its name
More refactoring. All tests pass.
Refactorisation des dossiers
sop written evaluations management portal refactored to bolonha.
Refactor engine to reflect changes to plugin interface.
Refactored RoleManager to use DependencyInjectionSPI
Refactor parameter parsing into a separate method
refactored NewAppCommandRunner in a way which is more testable
refactor
"refactoring : Record.test, Record.amount"
"Refactoring : extract an abstract configuration and service to ease different packaging of different configurations for different environments (standalone, cloud, etc.)"
JBRULES-2746: Drools Grid Impl2             - refactor timerservice into schedulerservice and timerservice
Minor code/package refactoring for EntityProvider structure
More refactoring
Refactored Compound to EntityInfo Updated the mmtf parser to use Set and not Get entityInfo
test refactoring
WICKET-3335 break up and refactor monolithing dequeuing process into delegatable chunks. all working but borders
bug fix and refactor service exemption credits related methods
refactor MetadataAdapter
"PLAT-4705 - TODO items, notes, refactoring"
Refactoring
Refactored
Refactor EndpointReferenceContext --> BindingContext Cleanup of AXIS2 deployment logic. Cleanup of process activation / registration logic. Removed binding logic from ProcessDDInitializer Removed old style deployment descriptors.
Refactor ThemeAdapter type hierarchy
47010: Make refactorings more responsive to cancel [refactoring]
Refactored timeouts and added javadoc
(This commit should not interfere with the larger refactor we are going to do.)
Intermediate progress on the OEntityKey work.  New unit test and some refactoring.
Avoid unneccessary conversions and refactor code for reuse
Refactored redis tests to be unit tests
Refactor registration to not require a user service lookup normally.
email refactoring - delegates
[#LIB-77] Refactor AttributeCoercion(s)
refactoring login process The main aim of this update is to make changes to the login process for banned players easier and less brittle.
fixed INPUT_STRIP_PREFIX added extra queue log messages refactored XCC dependencies
Refactor ZoomToScale to make it work with SaveImageAsSVG without the Dialog box
"HIVE-11705 : refactor SARG stripe filtering for ORC into a separate method (Sergey Shelukhin, reviewed by Prasanth Jayachandran)"
Small refactor to use a better name for our utility class.
refactored MCP3008 ADC impl to extend from a base impl. added support for MCP3004 ADC impl
refactor a method name
"FACES-1894 Add general utilities for Liferay Faces Alloy Components (Changed ComponentUtil.concatAllCssClasses() to ComponentUtil.concatCssClasses(). Modified ComponentsUtil.concatCssClasses() and RendererUtil.encodeStyleable() to utilize the ellipses operator instead of overloading the methods. Utilized refactored concateCssClasses() method in component getStyleClass() methods. Added ""implements Styleable"" to components which were missing it. Added StyleableIherited abstract component in components-ext.xml to allow reuse of style and styleClass attributes without generating java.)"
[ALLUXIO-1856] Refactor code on applying umask
First sample test. Refactor needed:
"Complete refactoring of cycle repo API, not yet finished completly"
#NAME?
Refactor: Streamlined user management
Updated to Jersey 2.0-m12-1 which implements JAX-RS 2 m16 API. Refactored the code to compile with this version.
bug 12656: Refactor IP associate process
gdmsql: some refactoring & javadoc  * some more javadoc  * moved ParseException from org.gdms.sql.parser to org.gdms.sql.engine
Kie API refactor
Refactor IDE activity internals
Added in support for several new reports; Refactored Archive structure to include temp file reference.
Refactor Adder and Adder16 into single class
Refactor MetricRegistry to not be a global singleton
"Authorization header is now checked if it is valid in UserinfoRequest, some small refactorings in EmptyEndpointprocessor and RevocationEndpointProcessor, Integration test for token revocation, tests for Token/Userinfo/Revocation requests"
context and node datastructures refactored
Refactored the export feature to use ExtraHtml instead of ugly links
Split checkout and change log updates and prepare for refactoring for distributed plugin support
BUGFIX: now sets db and env reference to null on shutdown FEATURE: added delete() method REFACTOR: added byte-to-string conversion methods. INTERFACE: constructor no longer takes arguments and no longer calls initialization code. This is now done explicitly by callers.
"Refactoring of Counter. IT OK, UT KO"
added high light functionality fixed some bugs refactoring added info area with number of opponent's hand cards
Added docs and refactoring
"Still working on a major refactoring of the generic wrapper. Frankly, I've lost track of the details on the changes I have made, sorry. I'll commit more often from now on."
Merge of the refactor-tds-fds branch
"Release 0.7:     - Added iterative solvers and preconditioners (adapted from Matrix Toolkits for Java). 	- Added HyBR solver - a Hybrid Bidiagonalization Regularization. 	- Added nonlinear optimization package.   	- Added JCublas (currently used only for matrix-matrix multiplication). 		 	- Added CCDoubleMatrix2D and CCFloatMatrix2D. 	- Added CCMDoubleMatrix2D and CCMFloatMatrix2D. 	- Added DenseColDoubleMatrix2D and DenseColFloatMatrix2D. 	- Added OpenLongDoubleHashMap and OpenLongFloatHashMap. 	- Added cern.colt.matrix.io (matrix reader/writer, adapted from Matrix Toolkits for Java). 	- Added cern.colt.matrix.tint (matrices holding int elements). 	- Added conversion methods in SparseDoubleMatrix2D and SparseFloatMatrix2D. 	- Added unit tests for iterative solvers. 	- Rewritten unit tests for matrices.		    	 	- JLAPACK replaced by netlib-java.		 	- Internal storage changed in SparseDoubleMatrix1D, SparseDoubleMatrix2D, SparseDoubleMatrix3D, 	  RCMDoubleMatrix2D and their single precision equivalents.     - From now on, the trigonometric transforms are only supported by 	  DenseDoubleMatrix1D, DenseDoubleMatri2D, DenseDoubleMatrix3D, DenseColDoubleMatrix1D,  	  DenseColDoubleMatri2D, DenseColDoubleMatrix3D and their single precision equivalents.    	- JTransforms updated to version 2.2.  	- Some refactoring and many cosmetic changes."
"transferRule tests, and various refactoring/cleanup of barrier implementation"
"metamer: moved templates for testing pages of input validation and message components, created test base for message(s) component, rich:message(s) tests refactored"
SONAR-5121 Refactor the way remediation function is defined on rules in order to remove the static creation and to be able to know which rule is failing when a wrong function is defined.
Refactorings to make ANTLRParser a bit nicer.
refactor dcm4che-hl7
common classes refactoring
Refactoring directory package structure
refactoring
"Heavy refactoring, removed way too many indirect things. There is also now vendor implementation for MySQL, and a test-case for it."
Refactored trend graphs.
Use update for reftree and workspace polling.  Refactor to remove conditionals in AccurevSCM and move each to its own Delegate. Add Ignore parent changes back. Remove unnecessary HIST commands in changelog calculation. Filter changelog for reftree and workspace based on update log. This avoids promotes upstream being considered as changes. Clean directory before relocation to avoid stale files.
EHO-206 project assignment refactor
Some refactoring in OptimizerNode
refactoring
Refactored
Refactored the RootResource for better resource names
fragments: refactoring in pickers
refactor move
"Fix 216721 copy/paste issue Now once plot chart is pasted and the chart figure is created, will add an asyc process to look for the axis chart and set hostChart reference to it. This process only occurs one time each paste command. If the chart has no axis, it will do nothing. In addition, refactored ChartReportItemImpl code to make it as simple as possible, since it may affect performance."
Refactor DataLoader
#NAME?
ISPN-5342 Refactor Hot Rod server code
"Further refactor the poller in preparation to fixing 709Introduced Schedule that maintains the package's schedule for a serviceGradually moving PollableService scheduling/polling function to it"
"AtlasProperties refactoring stage 2:  - atlas properties storage is abstracted by interface - storage implementations now include db-backed, old-style properties file-backed and composition of the above - storages list is configured through beans context - EF ignore options split to separate methods"
"Minor refactoring, prevent a NPE should the default currency not be set correctly."
Refactor error messages
"Revert ""Revert ""Symbolic constraint refactoring"""""
some refactoring
RF-12900: org.richfaces.application.push refactored to org.richfaces.push
"Refactoring of ClosestPointPairAlgorithm, including utilizing Java 8 constructs."
Fix by Sorel Johann about refactoring of Indexing API to support 3rd party indexing like his upcoming Spatial Index. Thanks Sorel!
Refactor the interface between EventTapWriter and EventTapFlow
refactored code
[PLAT-3409] Refactor handling of database scripts
api_refactoring: for network api refactoring move interfaces so it works
Refactor RuleParameters and DeeParser hierarchy.
upgraded to latest 2.0 and refactoring
"refactor mysql & sqlserver parser, merge If/ElseIf/ElseStatement"
Refactor ping to work with dagger
refactor lease term to use the template pattern
Small refactoring/renaming for consistency
correction of bugs in the converters and small refactorings
refactoring pc code
Refactoring + harmonisation tests.
refactor JavaTreeConvertController
Big refactoring change - no functional difference (intended)
[MSC-180] Refactoring - no functional change. Moving invokeListener() method from ServiceControllerImpl to its ListenerTask nested class.
"Refactored RrdRepository, AbstractCollectionAttribute, and AbstractCollectionResource into API packages."
1. Implementation of searching an index 2. Refactored out logic to JOhm from Model making the latter lean and easy to comprehend 3. Added support for hierarchical delete
Small refactoring + fixed tests
massive refactoring of move generator params
Bug Fix: On Event reports Minor Change: Use Document accepted to give the possibility to remove documents from phd candidacy process Refactor: On Phd Individual Program Process Activities
refactor code for tree
"Cleanup, refactoring and bugfix."
ISIS-109: refactoring/simplification
refactor
Refactoring: improve the method names.
"Refactored Tree Maps: - new implementation at lower level: storage. The ""old"" continue to work for the dictionary and user purposes - changed packages"
JENA-923: Refactoring in preparation for jena-base
"Refactoring des classes utilitaires de test afin qu'elles ne contiennent plus ""Test"" dans leur nom"
Refactor
Refactored persistence layer
Refactor some abstractions to make HadoopDomainCompactor locality optimization code cleaner.
"refactor naming, fix comments"
"Implemented weapons capabilities & associated facilities dealing with damage, destruction, and repair. Implemented energy, engine heat, and repair processes previously neglected. Fixed data readout generation to display correct rotation angles, respect sensor range, and display previously missing data. Implemented player roster at game join time and in the I3 command. Shrank zone into which combatants appear to liven up the action. Added ""thanks for playing"" panel that replaces the text prompt when player's game ends. Refactored combatant creation. Removed Movable type.  It was overkill, I think. Added commander to Combatant & changed constructors to supply it. Removed position, velocity, & heading from Combatant constructors and added setters to replace them. Changed accessibility of several Combatant classes to protected instead of private and removed clumsy references to getters/setters. Fixed bug in GameServer that was causing ConcurrentModificationExceptions when combatants died during the update phase of the game cycle. Added repairDelay to ShieldArray and subclasses. Modified GameController.gameCommands() to invalidation HTTP session on player's death."
First refactoring of command line runner
Major refactor of reporting classes inline with changes to kenyacore. * Calculation based reports now managed as beans   + Can specify an identifier to be displayed   + Can be linked to a program * Reports now have app permissions which are checked
"Huge refactoring, to drastically reduce dependencies needed in oauth2 filter. - oauth2-common groups things needed in provider and filter - provider is a resthub-web depend REST service which generate tokens - filter is a pure servlet filter, without any token validation mecanism - filter-externalValidationFilter propose a token validation mecanism which call back the provider"
Refactoring HTTP tunnel into more tidy packages
Mixed Refactorings
abstracting vector agent refactor
"Introduced and refactored around an extract tx interval from datasource method in MasterUtil Used that to introduce a copy transactions from master feature to recover from missing or damaged logical logs Comments, comments, comments"
refactoring GPIO impl to support GPIO providers for GPIO expansion support
Refactor and move to Java 8 
Refactored methods from class GrobidRestUtils: - I/O methods moved under core.utilities.IOUtilities as they can be reused in future modules - getEngine(boolean isParallel) has been moved under class Engine
refactor
ICE-9004 minor refactorings
WMTS refactoring
Refactor common code to abstract Sensors class
#NAME?
Refactored the development web server code.
added default comparator. added sortBy method. some refactoring done on doSearch method
Refactor ElasticsearchClientFacade
"Extension mechanism refactoring part 1: factor out extension code to commons core and support detection of static extension methods, code generator for meta-class extensions and runtime-activation of meta-class extensions."
"Added the ability to lazy-load or force manual loading of GeoName ancestry, setting the defaults for all queries to lazy loading. This should improve performance, bringing it back to CLAVIN 1.x levels for simple lookups where ancestry is not desired. In order to achieve this, GeoName was refactored to an interface to allow a wrapper object that provides the lazy load functionality. The Gazetteer interface has been updated to provide methods for loading ancestry for one or more GeoNames and to specify an AncestryMode when loading a GeoName by ID."
"Adding FormGroupRadioChoice, refactoring, refs #17"
"CSPACE-3175 applied objectexit refactoring to blob and media service.  Also, refactored ObjectExitDocumentModelHandler, BlobDocumentModelHandler, and MediaDocumentModelHandler to use a new intermediary superclass, DocHandlerBase, which abstracts almost all the work of a DocumentModelHandler up and out of the service."
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
"mujir,praveen|removing unsused methods,refactoring"
profile generation refactoring
"Refactored the atom error handling layer a bit to be easier to understand and to be more robust.  In addition, server-side errors that occur during atom-based junit tests should now show up in the junit output, rather than be masked by a ""something failed on the server"" style exception."
Refactor of Task Support mechanism. - Changed configuration file format of operations definition. - Refactored and renamed task support services. Now they are name input and output services. - Implemented some services in HumanTaskServiceImp. - Added documentation generation to generate-sources goal
"v1.32: New parsing utilities, refactor and config allows enums"
Refactored deployments to be MVC #122
little refactorings
Renamed according to recent refactoring discussion: get/setXAt() -> get/setX()
TEIIDDES-1046 Enabling REST for Procedures that were RESTful in 7.4.2 Leaves the Legacy Tags. Changed the action to enable REST to only enable if there are no new REST extension properties and no old 7.4 REST extension properties. Also now deleting the resource annotation and the model object annotation of no tags remain after a tag is deleted. Refactored the REST actions to get rid of duplicate code.
Refactored JDBC jUnit tests to be more compact
Refactor - make ElementToken classes inner classes to avoid collision
Refactor constants.
Refactoring code generation related code
"Core: refactor type update logic, pt.1 (#935)."
testailua ja refactorointia
#JC-1378: * Refactor code according to Code Review
CXF-5121 Refactor for better readability
Revisiones varias en los services y refactorizaciones
Refactored to break dependancy between ServletUnitClient and ServletRunner
Some more minor refactoring
refactor heap sorting
BLC-384 - Refactor to Move Site and SandBox to the common module
refactored Launcher
"AS7-2903 AS 7.1 Clustering performs 10x slower than AS 5.x  - Refactor web session replication to use cache per webapp  - Disable storeKeysAsBinary, now that cache keys are strings  - Drop STATE_TRANSFER, FLUSH protocols from default stack  - Use clustered registry to handle address<->jvm-route mapping"
Refactored and combined client jar and authorization jar
Refactoring
#JC-225 Listener refactoring
SONAR-4843 Minor refactoring
ROO-2745: Post 1.2.0.M1 code refactor and clean up - deprecated static MemberFindingUtils methods in favour of instance methods
"refactored domain model, fixed hibernate issues"
"Refactored ClassGenerator, and renamed it"
dcm4che/dcm4chee-arc-light#651 : Refactor STOW-RS tool
refactored and fixed bugs
"added webscript to add RepositoryArtifact instances, refactored initialization of java backed cycle webscripts by adding abstract super class, added MultipartRequestObject"
Refactored the DefaultRexsterApplication.
menu refactor
progress refactor to use neo4j as rest service
ROO-2189: Post 1.1.2.RELEASE code refactor and clean up - use ProjectOperations to get ProjectMetadata
Refactorred the package structure + added an empty discard pile to the game
refactored serialisation
Huge ass refactor for making Strategies more modular
last commit before project refactoring
Refactoring RawConfiguration entity to store file contents as a string instead of as an array of bytes
Further refactoring of maven connector.
Refactored OSM Importer.
Added test for creating projects witch java 1.7 Refactoring tests.
HBASE-7208 Transition Offline Snapshots to ForeignExceptions and Refactor for merge
Test newly refactored LoggerOutputStream and LoggerFilterOutputStream.
refactor EvernoteApi getting rid of duplicate code
"Refactor DownloadMonitorImpl code, move some functionalities to TemplateServiceImpl and VolumeServiceImpl."
refactored webapp to used play 1
"refactored relationship aspect, pulled out DelegatingFieldAccessorFactory"
refactor(cockpit core): add abstract engine aware
JBIDE-17155 Visual Preview: Refactoring. Speeding up outline selection on windows
Minor change: refactored some methods from phd AlertService. Initial interface to request meeting scheduling.  
Refactored the abstract base class into a helper to make the tests more explicit.
Refactored backwards compatibility code
refactor mock database to use postgresql and inherit function from new TemporaryDatabase class.. Need to refactor other tests next
Refactor directory layout
refactoring of textchecker
Refactor
ISIS-323: lots more refactoring of RO
Initial work on core refactoring. Created a 'common' module and moved all the components that are common to clients and servers to that module. Also moved the unit tests as appropriate. Linked this module to parent pom.xml file. Added a log4j.properties file for the tests.
Just refactoring changes for choreography services (2)
#NAME?
Refactor AbstractHistoryAction and fix hasChanges when it ChangeSetLevel==NONE
"Created security manager for V2 API. Refactored various things from api common into core, to make the above possible."
issue #17 and some refactoring stuff
Refactored packages. Piriti now consists of two seperate modules: name.pehl.piriti.json.JSON and name.pehl.piriti.xml.XML
duplicate code refactoring
"Refactored for phenotype test. Moved helper test files from 'Test' directory to 'src' directory, as junit treats all source files in the 'test' tree as tests and was barking because the supporting test files had no tests. Moved them to new packages under 'org.mousephenotype.www.testing."
More refactoring
"Refactor, only mysql will store in db, SQLite will use secondary gson file."
Data model created and package name refactored
"JBRULES-1197 Extends actions support to include other dialects and callback -I'm updating PackageBuilder to be able to handle actions. It's still very messy, but all unit tests are currently passing. So I'm  committing now, before I start on more major refactorings."
[snipmatch] refactor MatchClient to RemoteMatchClient
SchönhageStrassen:  * refactor toByteArray() to toBigInteger()  * refactor toIntArray(byte[]) to toIntArray(BigInteger)  * remove reverse()
"Implementation of Google login, along with other session management refactoring."
Small fixes and refactorings
Adding tx.DataStructureFactory which builds proxy objects that use a TransactionalNodeStore to commit all writes after a data structure operation.
Misc changes due to refactoring.
Some javadoc cleanups and refactories
Refactors EncodingConfiguration to avoid it importing impl packages.
refactor(engine): refactor EnsureUtil parameter ordering
[PLAT-1296] Refactor time-series master; Add ManageableHTS
GORA-105 DataStoreFactory does not properly support multiple stores
"Event refactoring, reviewed as ENG-505 by Will"
minor refactor
"JBRULES-1197 Extends actions support to include other dialects and callback -I'm updating PackageBuilder to be able to handle actions. It's still very messy, but all unit tests are currently passing. So I'm  committing now, before I start on more major refactorings."
"Fixed unit tests broken by Spring 3 update. Added several trac fixes. Refactored Pipes, PlayEngine, and RTMPMinaTransport. Fixed several issues raised by trac ticket 601."
core: Refactor VmHandler
#NAME?
Graphics: husacct.graphics.presentation.GraphicsPresentationController created and included it in the initialization process. First step in architectural refactoring needed to avoid Swing synchronization problems and to improve the maintainability.
Refactoring (minor)
minor refactoring
refactoring is a good thing :D
frontend: refactoring: Generify Events and Listeners
"groupId and packages refactoring in order to be published in Maven Central. From ""fr.linsolas"" to ""com.github.linsolas""."
Refactor BranchOperationUI
Refactoring implementation classes
Package refactor
Clean up and refactor of view layer to make it possible to manage the skin more easilly.
Expression parser: Refactor tokenizer
JAXB and JAXB/JSON rework.  Added annotation support among other refactorings.
Structure was updated for refactoring
"refactoring, javadoc"
refactor branch
Atlas-external: Loads of changes for cleaning up indexbuilder and refactoring for use with new atlas schema.  Hopefully these changes should be more easily configurable for future proofing against further schema changes or DB alterations.  Removed unused code and added more config elements to the atlasApplicationContext in the webapp xml to aggregate all the config for each component in one place.
CRASH-144 : Refactor maven module hierarchy
"Closing price support for PNL, reviewed by Colin ENG-345 * Added infrastructure for closing price data (just closing price and previous close, not the full marketstat) * Refactored and synchronized PhotonPositionMarketData * Fixed a NPE that was happening in MarketDataView (EG-582) * Changed realizedPL to be nullable on PositionMetrics - this is because the closing price may not always be available and thus realizedPL may be unknown"
refactored the computation of the available aspects per bundle
moving and renaming methods in preparationfor *Change refactoring
More refactoring.
Refactored credits
SONAR-5912 refactor SendIssueNotificationPostJob
Refactor parser.
"Add reference to core plugins in GQuery so as user just use ""import static GQuery.*"". A bit refactoring in Event class: rename it, and remove deprecated method. This could break plugins"
Refactored code
refactor APIExecutor to handle errors
#JC-1381 - fixed unit tests of the refactored classes
init: Refactor init to be small parts created through Guice
Refactoring packages
o Refactored code
Minor refactoring.
"Refactoring: get to implement byte[]-to-byte[] tries, in addition to byte[]-to-VInt one."
"a bunch of refactoring due to package name change for *.cluster to *.cloud. This completes the refactoring for making clear the semantocs of ""cluster"", which now refers to resource clustering."
Total Refactoring in GeoPlatform-WFST-Module for WRONG Gin Configuration. Great Improvements to manage UI Layout. TODO : FIX the problem with SUD Component to manage SpitBarEvent
refactorings
#JC-1139 refactoring of tests.
Refactor loadFields to reduce bytecode size.
refactored to better handle OAuth
JBRULES-484 refactor the core reteoo code for sinle and composite propagations -improved the AlphaNode hashing so it doesn't have to iterate a map on retract/modify
#189 refactored query functionality from js to java
"refactoring, almost got it to work"
Refactor move some mocking code into separate package
Refactoring.
TURMERIC-1350: refactor utils into core and ui bundles.
Refactored Subscription to return PriceList object
ISIS-1667: refactors FormExecutorAbstract hierarchy with delegation
refactor: move Settings processor to factory
#NAME?
refactor sample code and tests into other archetypes
Refactor: Replace ServiceManagerServiceFactory invocations with direct ones.
NXP-9186: Fix test name and refactor to take advantage of AbstractTest generic methods
JBIDE-16375: Refactor Software page to allow multiple sources
Refactored to TTI v0.2
Refactoring
refactor and integrate test
"Refactored iterators, adopted sort merging logic."
"Cycler replaced by QuizRunner, some code refactoring still need to port the Random Cycler"
nfsv4.1: refactor session reply cache
Refactorings and update.s
Refactor
"REFACTOR: moved exclusion mechanism from resourceIndex to WaybackContext, which is clearer conceptually, and will allow a common resource index to be shared across multiple WaybackContexts which may have different exclusion policies."
"fix for 10339 Refactoring: Pull up should have ""select/deselect all"" options"
Refactoring configuration
Refactor of the PollingPojoComponent.
Refactoring
Refactor BooleanPrefAction to top-level class
refactor to keep a single version of unit tests
More refactoring to better support criteria queries for non-JPA back ends
Failing test for unneeded long MVV. Includes some refactoring to allow tests to check if a value is a long record.
IMatchLocator refactoring
"Refactored test data, now we have one package for each match type"
refactoring priority-related items into new package XPath rule handling new bug list
Refactored/simplified ExecuteSQLQueryAction * reduced LOC/Cyclomatic complexity * removed (undocumented) double retry handling * restructured code
"Some refactoring. For Execute requests that request output parameters by reference, a check is performed to test ehether the process description allows it."
"adding *.db to gitignore, still refactoring some classes"
multi windows refactoring part6. frames are working again.
SAK-4013 plus refactoring saveTotalScore
"preparing to rework CLI arg access new package params with Action* class for every action’s args, *Delegate classes for cross-action attributes, common & client args refactored to use accessors everywhere. This is pre-switch"
"refactorronde is geslaagd, alles staat nu overzichtelijk in de juiste klasse en de TreeConvertController is nu schoon en netjes"
Refactoring
Added a first refactoring for GPLayerBean(s) to support the LayerState and the icon generation In future is usefull to review all the LayerBean hierarchy to improve the State support
Fix #913 turn Move wizards into proper Refactorings
some refactoring + worked on invariants per file
refactoring FESL for Spring
multiple refactorings to simplify everything
Fixed bug 83352 - change notification is deadlock prone Also refactored some code out of ContentType into Util
Refactored a lot of stuff into getLocation and setPrefixes
Refactor api-impl module to segregate SPI and SPI implementations
Add FunctionType subclass and refactor inferring of parameters' types
"Major refactoring, extensive changes BrowseKey class removed"
Refactored: renamed EntityManagerImpl to EntityManager
Refactored code to use ZoneId and ZonedDateTimeBuilder instead of TimeZone and Calendar.Builder. Fixed some parsing inconsistencies between the radix and legacy parsers.
Refactoring the reconnect login into an abstract base class so we can reuse it for the RemoteMachineListener
Refactoring for #137 part 1 - moving mixin solving into separate class
Refactoring DeploymentCache: introducing DeploymentEntityManager and DeploymentManager. Made DeploymentCache an interface for pluggability
Some refactoring to test resource methods
Refactoring for 25045
#NAME?
GTNPORTAL-2154 Support for JBoss AS7  - upgraded supported version to JBoss AS 7.1.0.Final  - some refactoring and dmr model change
refactoring state transitions and adding method for deployment
Refactor classes and packages to remove cycles.
Refactored code.
Refactored and cleaned up CeCPMain. No functional changes.
refactor RenderKitUtils and RendererBase to the original packages of RF4 to be compatible with CDK 4.3
[PAXEXAM-382] refactored reactor strategies to be event-driven
Theme refactoring.  All *Definitions now fall under themes extension point.
ProblemEligibleInjectionTest added + new resource files added for test + refactoring
"refactor interface NameExtractor, improve DefaultNameExtractor #55"
package refactoring
refactoring galore
refactoring constants to ST
Refactoring of utilities and beginnings of some typesystem tests
refactorings
Refactor FormResource-related code to use the newly-refactored interfaces - TRUNK-3039
add test for getCategoryArticles refactor system for reading html pages for better testing comment out GetAllPages
minor refactoring: workflow message properties
Refactor EntityMetaDataRepositoryValidationDecorator to EntityTypeRepositoryValidationDecorator
refactor of data store to include remote interface implementation
deep refactoring of proba approach
"[Refactor/Refactor] Move MChat to new namespace ""ca.q0r"" from ""com.miraclem4n""/Refactor VariableManager."
"Further refactoring (moved toObject converters into an ""object"" package)"
"refactoring, add webpage"
simplify and refactor
239420: [quick assist] Offer Rename refactoring as quick assist
First refactoring to use the Thought class. Lots of improvements are still needed. Also finilized the refactoring for the usage of the ChainOfEvaluation and related classes.
Refactored packages for TypeContext and PropertyContext
Refactored and simplified JMeterArgumentsArray
Refactored Ratio Metadata once again so that ratios can be reused for multiple attributes
"equals, isEquivalent, hashCode of AbstractSet refactored!!"
"Started to refactor/cleanup this component. Stuff in org.neo4j.graphalgo.path will be kept, whereas org.neo4j.graphalgo.sortestpath will be removed rather soon."
Refactored: pass onFinished callback to WorkerCounter after the workers have been started
some additional refactoring (to remove code duplication)
Implement a new generic controller test that allow to test directly the controller without running an embeded servlet container Separate GenericController interface and GenericControllerImpl implementation class Test classes named refactoring
Viewport refactoring.
Refactored invocation.
This is a major refactoring: removed all static references to the PropertyHelper. The CrawljaxConfiguration is now the main config API. 
Refactored JvmJdk agent and split it up.
"some refactoring, more tests"
- Indexbuilder & Loader API refactoring: commands instead of methods - Array design loader's gene identifier property made configurable through admin UI - Update index for experiment command support in indexbuild - Update index for experiment button functionality in admin UI - Repair experiment button functionality in admin UI 
"More refactoring, due to CM"
Refactored: use the phase change pattern in DaemonConfiguration
[BZ 802544] more refactoring of inventory summary and drift compliance reports
"CXF-2116, CXF-2099 Refactoring of the WrapperHelper"
#NAME?
DATAGRAPH-872 - Fixed broken tests and refactored tests to not autowire OGM Sessions.
Refactor ShellFeed to use ProcessTaskFactory
DataManager and ModelXSLTWriter refactoring
GH-232: Work in progress on test ignore conditions refactoring.
Refactored variable names in win32 api.
Refactor linked lists
- GTNWSRP-58: Refactored InvocationHandler hierarchy to use generics.
"#22 Add ""Create Pull Request"" action (currently for bitbucket only) (PR by @mkleint) #24 Additional patterns for github/gitblit #23 Refactoring of patterns"
"Added selection changed event firing with high-level property tree selection type.  Refactored the word ""list"" out of widget name."
refactored test packages
Refactoring of the signs
"Revert ""Refactored attribute validation"""
 Refactor: extract assertBuildSuccess() method.
Refactored a lot of stuff. Moved generic stuff to r-s-swing.
Refactoring: embedding ComputingGrid pt. 2.
Refactor the LangaugeVersionHandlers to use an AbstractLanguageVersionHandler for common implementation.
more source refactor
refactor to give better name
package name refactoring: move all classes to service package so classes may have less visibility
"Added ListFormat again. Refactored a bit of coding. Added an API feature renamed another. (ParseTabbedList, ParseListCmd)"
refactored find method to use a prepared statement
refactor exception handling. new configuration class to tweak settings
Analyse: Refactored ReconstructArchitectureDTOList and ApproachesTableJPanel(splitted it up in multiple classes)
refactoring package name.
Updated to Blueprints 2.3.0-SNAPSHOT and refactored codebase correspondingly
"Inherit context flag from request during rewriting Location header of redirect capture (so that embed mode is passed on). New interface ReplayRewriteContext, new methods taking ReplayRewriteContext in HttpHeaderOperation and HttpHeaderProcessor.   (Introduced special http-header-context. this changes the semantics of flags argument of contextualizeUrl() method and transform()   methods. Further refactoring would be desirable.) Refactor HttpHeaderProcessor implementations to consolidate almost-identical code in one place: PreservingHttpHeaderProcessor."
Refactoring for merging all operations into one package. Add test for public urls
"#JC-171  Fixed some sonar violations, refactoring, added one test."
more tl1d refactoring
Refactored name and version resolvement. Integration to archive store.
refactoring checking and modifying phone number pattern
Bug 511849 (part1) Refactor Browser Listener tests (Split tests) 
refactoring DAOs
code revision and refactoring of component events building and handling
"[PLAT-1296] Refactor time-series master; New database, stage 2"
refactor package
CDI OpenOn test correction + huge refactoring of all CDI tests
320073 ensure Decorators get called in reverse order of addition; refactor TagLibConfiguration and Descriptor classes
"Revert ""Merge remote-tracking branch 'origin/feature-integration-tests-refactor' into develop"""
Test Suite refactoring Pulled in some tests from Jersey Bug fixes from Jersey unit testing
Refactored include URL reading slightly to enable some extra unit testing and added a simple unit test for it to verify that bug 735 had been fixed.
"refactor login to passport/login, register to passport/register.."
Refactored compression package
"diverse modifications, refactoring to use Result object as return value of search (node) command"
Refactoring.
[minor] refactored class name to start with upper case
"roll back ReportConfiguration refactorings since a) Maven configuration magic only works if setters follow default setter naming pattern (configuration was broken since the refactoring) b) Report* is deprecated now, so why change config parameters directly before removing them alltogether?"
Refactored CommandSystem Step 1
"started big swing fixture refactoring (intermediate states are functional, albeit a bit inconsistent in design)"
refactored demo to be more readable
Refactoring to support IHI location hierarchy
Refactor permissions
Refactoring GameClock
fix bugs and refactor AlertConfig
"refactor JcrRdfTools into an instantiable (and maybe, in the future, injectable) class"
Refactored PO
Refactored all XSLT-based report code to use new renderer classes and interfaces from features/reporting/availability. Removed older duplicate classes from inside the opennms-reporting project. Refactored renderers to reduce duplicated code. Upgrade Apache FOP to new 0.95 version.
Added capedwarf-blue memcache tests.  Note: Do we need to refactor capedwarf references?
Removed general refactoring action set and made Undo/Redo actions public instead
test refactorings and context changes
refactor test Servlets
Refactor Prairie reader to be more readable
ACCUMULO-1054 refactor FastFormat from server to core
Refactor UIBean and ViewBean in preparation for #12454
Refactored ForgeImpl code to AddonLoader
refactored ordinal enum template builder
HBASE-4558 Refactor TestOpenedRegionHandler and TestOpenRegionHandler. (Ram)
"added AbstractFreeMarkerConfig, minor refactoring,  http://code.google.com/p/activeweb/issues/detail?id=4"
refactorings & cleanup
"refactored the code to work instrument the code using Jboss AOP or AspectJ, initial implementation of the output strategy"
XML config refactor & better client cache eviction
Refactoring. Spring pur.
AS7-4142 extend generic type commands with custom actions (refactored generic type command impl to be based on and delegate to action handlers)
refactored
refactoring
Refactor of FunnelCache to pull-through more efficiently using guava cache's valueLoader.
"Refactor delete report category function, use categoryid as the parameter instead of categoryname. <lufen&sl>"
Refactored and commented selections framework.
Started Refactoring of DOIOrganiser. Code cleanup.
"[jvm, java5] refactoring: moved Java language specific extensions into module 'java5' (annotation, enum, ...) also: removed JModelUtils (obsolete)"
example reporting for junit tests - created a prototype that works. need to be refactored.
Adapted refactorings in Spring Data Commons.
"Javadoc-ed the DMatrix3, DMatric3C, DQuaternion, and QuaternionC classes. Also did some minor refactoring and fixed compilation errors."
security impl + refactoring on previous client side api
Config Refactor.
Refactoring of Command REST resource complete
refactor AbtestStatus
tiny refactor
JavaCL: massive macros-based refactoring (for events management)
ROO-2745: Post 1.2.0.M1 code refactor and clean up - static imports for jdk classes
"Added error handling, refactored pool manager and its tests for Itests and units."
Refactoring WindGate and YAESS.
core: refactor OvfVmReader#readHardwareSection
Further refactoring of reporting code to simplfy things * Common code between patient list and indicator reports pulled into ReportBuilder abstract class Also * Added HV09-55 indicator to MOH 731 report
Refactor partition services
Refactored state to submissionState. Setting to needs correction if checked during adding additional file.
Refactoring to extract KillbillService config outside of API module.
Continued refactoring for messaging infrastructure. Continued refactoring for messaging infrastructure. Continued refactoring for messaging infrastructure. Continued refactoring for messaging infrastructure. Continued refactoring for messaging infrastructure. Continued refactoring for messaging infrastructure. Continued refactoring for messaging infrastructure. Continued refactoring for messaging infrastructure.
Fixes/refactoring to work properly with Cytoscape 3.1
refactoring...
refactored to use RTreeIndex in graph-collections
Add UT + refactoring using java 8 possibilities :)
refactored callable js methods to a separate class
sql parser refactor 
Refactor Subtitle and StrSubtitle
"refactoring, too many changes"
serious refactoring
Refactor to support nested table in PPTX editable emitter bug 457653
"text file based changes support, fixed directory detection/generation in tar, refactoring"
refactoring of authorization SQL
"Refactored structure with new element ""Generators"""
refactor the freemarker deployment module to better support invocations on multiple templates.
"MAHOUT-633 new iterators over SequenceFiles, used in 90% of the code involving reading SequenceFiles; other refactoring of iterators and some related HDFS usages (PathFilters); some small style changes along the way too"
 ItEr27S11AltaEtiquetasTipoEtiquetaItEr26S13: [Refactoring] Rename Cancel to Close in form edit LabelType
refactor fj
"Added guava, gson + some initial refactoring + start of JSON servlet implementation"
refactor to work for both apis
Applied some findBugs and PMD hints. Also refactored some of the packages to match the existing package naming scheme.
Started adding multi-lingual wiki support (de): refactored into language-specific test cases.
"I, now, replaced HBaseDataModel with MatrixBackedDataModel, we will refactor this implementation so it will use HBase matrices, instead of SparseRowMatrices."
Refactor and fix UI when core services are not loaded
"Changed ActiveMQ to be ""single"" threaded.  Refactored some of the MessageListenerAdapter-related code."
#NAME?
refactored ActorRef implementation hierarchy to move common code to base classes
XSLT refactoring
"refactored to use command, labels are still busted tho, and total hack for getting SnipReader.indent to work."
Refactoring
NXP-14278: refactor to remove unneeded abstractions
refactored package name to 'oak'
Refactor FineVarEventRecorder
Refactored AMQP configuration and names.
Refactoring des packages
TestObjectFactory refactoring and documentation. renamed getMeetingHelper method Partial work on Collection Sheet Generation configuration item.
refactored ui into fragments to better support landscape layouts
more refactoring of private access utilities
"SLICE-114 - MethodLauncher refactored in order to be testable, test for MethodLauncher and its cache added"
Refactor the error handle code
minor refactors
Refactoring of KeyValueFactory in progress
[JBWS-3846] Refactor creation process of jaxws handlers from predefined configurations
Refactoring: provide a 'findMainType method that can be shared between CF and spring boot tooling.
Refactor Replicator to use KeyValueStore
minor test refactoring for better grouping
WyRT: Updated some files in whiley/lang to ensure that functions are properly declared as public. WyC: refactored and fixed the way visibility testing is performed for source files.
Controller refactor
refactoring
"Revert ""api refactoring"""
"refactored completer, made it slightly more readable"
refactor and improve work on auto-indent
Commits work in progress on refactorying the call-related user interface for the purposes of audio and video telephony conferencing over single or multiple protocols and Jitsi VideoBridge.
"Started merging https://github.com/Activiti/Activiti/pull/805, but realized that the update() of the task wasn't optimal: always doing an extra get for the historic/regular task. Refactored all of that out of the update() method."
"BridJ: refactoring of C++ destructor creation, added Pointer.withReleaser(Releaser), updated MacOS X binaries"
Refactor DSL (story #124)
Just a paranoia commit. - added more contents to the demo configuration file. - continued work on refactoring the CliMigrationPath - stuff.
API refactoring of LTK Core
Refactored Bindings map to have an array of Bindings per Field/Method/Constructor instead of an array of Keys.  A Binding now always has a single Key.  This makes it possible to have optional bindings for a constructor parameter and to store additional information per Key directly in the Binding.
SearchService refactoring.
Minor refactoring of InsecureSSLContextFactory.
refactor .ltd.uk classes to .org addition of some tests for server monitoring
Refactoring to add a method setFirstBlock(ContentObject) to InputStreams. refs #386
Added database handlers and refactored some stuff.
Refactoring auto-edit
minor refactor
"Rewrite for refactored separate issue, optrecover and exelog. Added logging."
Refactoring a little bit to make a method shorter.
CSPACE-5492: Cleaning up some of the tangled dependency issues related to refactoring the relations hierarchy code from authority items to a more general case usage.
"OK, so this is a big refactoring.  I did three main things:"
Refactoring of Lock classes: moved under the existent lock package + created generic OLock interface to abstract locking in all other classes
Refactoring. Fixing docs.
Removed according to recent refactoring discussion: IAtomContainer.setAtomCount()
small refactoring (extracting scope handling)
JBRULES-2209 Refactor Commands to mirror drools-api
Refactoring for improved MVC architecture
Refactoring.
"HIVE-9802 Refactor HBaseReadWrite to allow different implementations underneath, also includes code from HIVE-9783 Move serialization of objects in HBase to protocol buffers (Alan Gates)"
A lot of refactoring.
Refactored some inner classes to a separate package
refactor notify code
"Revert ""refactor struktur modul supaya lebih reusable"""
Refactored and overall cleaning of GMondReader code. Addition of tests for it.
Major refactor in progress - Use Step rather StepFactory - Parse standard pipeline library from an XML file rather than programatically
[WIP] - Updated/fixed cluster operations and migration. Lots of refactorings and cleanup.
Refactor: Multiple improvements on card management.
refactored intra-panel data handling
"bunch of refactoring, almost-working autocomplete box"
Some refactoring and comments.
Refactore EIK hooks
"Small refactoring, exclude UI from coverage reports"
Refactor code.
Minor refactorng
Refactored JDOModelProcessor.
* some more code clean up and small refactorings
Fix the MC testsuite. Refactor the new builder. Some sourcecode tidyup.
recordstore refactored
Simple refactoring for consistency
refactoring
Add support for __startswith parameters when querying for device information.  Some minor refactoring
refactor the alert manager
EST-417: refactoring and fixing failing tests
SONAR-9084 refactor tests of UserIndex#getAtMostThreeActiveUsersForScmAccount()
#NAME?
Bug 270989 Context refactoring
SystemLogService refactoring
Refactoring for checkstyle (3.3+ only)
Major refactoring of order entities and services.
"Refactoring of orders in events Event handlers do nothing by themselves, they just create behaviors (passive ones if necessary)"
Code refactoring
Entitlement rules refactor.
02-14 18:00 commit:  .maven refactored to have Delegetes as subclasses; refactor workdirectory and envp in other Delegates
"refactoring done, ready for testing"
[66835] Deleting a package with CUs opened and dirty results in stale package explorer [refactoring] Fix reviewed by Daniel Megert.
Checkpoint -- refactoring the GcodeModel rendering out of the GcodeRenderer.
added unit test for AbstractDomainObject an refactor the class
"Refactoring> QueryService -> QueryListService, will do only query list related things and not items"
CheckIn:Refactor DataRequestSession.
#NAME?
Refactored API logger to match the corelib architecture for database services
refactor package from com.alibaba.security.simpleimage to com.alibaba.simpleimage
refactoring: package renaming for test package in codegen
core: minor refactoring in RunVmValidator
Fix ajax plugin broken with Dispatch refactoring when an ajax method has parameters
#NAME?
refactored
refactored to use new DispositionService refactored after removal of VisitDomainWrapperFactory and VisitDomainWrapperRespository
Refactoring DuplicationAnnotation.
https://issues.jboss.org/browse/JBIDE-7003 refactoring of bundle map
created CreateJSFPortlet (and refactored CreatedJavaPortlet)
refactor de directorios
"refactor-rename some classes, add products API call"
simple JMX refactoring
Refactor Delaunay Triangulation
"refactorings, added test"
Refactoring to use strategy pattern.
JBRULES-1903 Pipeline support for DataLoaders and Feeders -refactored the term pipelineprovider to transformerprovider for transformers
A lot of refactoring. Updated LWJGL components and merged into single component
Refactor and enum datatype added
"Misc. Changes : Test Methods, new Macros, code refactoring."
Refactorings. Copy and ls working now with both GO urls and normal gsiftp urls for user class.
Fixed subtle refactoring bug in MeanShiftCanopyClusterer which was causing DisplayMeanShift example to produce garbage. Added a unit test thereof. All tests run and example produces nice clustering again.
Refactored
"big refactor over the ReflectionUtils, now all the cache methods are in the ClassCache class and with a pre cache of all the internal fields and fields in the constructor of that class"
"Runtime management API refactoring, FraSCAti server implementation skeleton"
Merging the additional tests from @baldimir . Refactoring code to introduce an actual Range interface and implementation.
"Refactor how permissions are matched by ProjectControl, RefControl"
DDF-7 Refactored the security api/commons/impl packages since they were intricately linked. Added user attributes map/service. Added the expansion feature to the ddf-framework. Added the expansion feature to the security-core. Adjusted the location of the SecurityLogger in each of the java files. Updated expansion commands to check for empty maps and add the expansions command.
"Replacing the Thrift code with JMX calls, this includes: refactoring of StorageNode; cahnges to ClusterInitService; Thrift port was replaced with JMX port"
Refactor IpAddress & NotIpAddress
#24 : Royalty report unit tests added. Refactoring sales report in progress
Refactoring of IIDStore API
JMS messaging refactoring 1. Removed positional arguments dependencies on JMS MessageProducer. 2. Changed TextMessage to MapMessage. 3. Cleaned up MessageProducer code. 4. Refactored RetryHandler. 5. Fixed a bug in FeedGroup.
refactor Task to a base class with Executor based 'SyncTask' as a child
Additional documentation and minor refactoring.
Refactor UserAssociationFormElement to remove Bindable (B-07547)
[refactor] rename method
Feature #2715 Refactoring filesharing as sharing since we are no longer sharing files only
Refactored exceptions
refactor BRouter to use new file data sources
minor refactor
refactoring of https://code.google.com/p/javasimon/issues/detail?id=129 (cherry picked from commit 087ab1a)
credits refactoring.
Refactor Suntech protocol decoder
Refactored ChefCookBook to ChefRecipe
"- refactored commands package - added some commands already (behold yer comments, I have a plan!)"
"[RepositoryBootstrap] Refactor: Extracted the code that deals with the DB lock to the DbUtil class, which now has a runWithinDBLock method."
refactored the code for bindings
"Fixed bugs from refactoring, except I now can't copy workflows that contain elements."
Refactored StoreFeatures to disentangle scan support from ordering of keys.
ROO-2745: Post 1.2.0.M1 code refactor and clean up - created TriggerBasedMetadataProvider interface to allow non-ITD-producing MD providers to be trigger-based
some refactoring and completing the switch to multiple jobs at one slot
Refactoring package structur and documentation
Massive Refactoring of Animation and Property Framework. Added PropertyAnimation class for total convenience.
Fix my misguided refactorign wrt #27
more API refactoring.
#NAME?
Added configurable victoryCondidions Large amounts of refactoring
Refactored grouping
#NAME?
"refactored SoapUI core to use a custom classloader for external libraries, instead of hacking the parent classloader"
unit test refactoring
unit tests passing after more refactoring
refactor the dailytaskproducer
[MRM-1093] Log configuration and repository changes made. Submitted by: Jevica Arianne B. Zurbano (applied with modifications and other refactoring)
"Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache"
Refactor: move all the Count queries to the api package
"Refactored for code-reuse in the writeInDirectory methods.  Also added a protected method that does the serialization of the json trees and outputs to the OutputStream for the File so that subclasses can control formatting, filtering, etc. of the DocumentSource."
merged changelog-refactoring branch
DRILL-1512: Refactor AvroFormatPlugin
enable tagging of photos with 2 strategies enable dropping into photos panel refactor EXIF and GPS column display
refactor Open api and add support of track cover art
refactored GeneratingJSON#generateJson() and checked for privileges
Huge refactoring to Traverse command: - New OTraverse class to be executed without parsing with a fluent interface - Changed from stack to iteration model using OCommandProcess classes: less memory and the ability to use context variable in SELECT - New OCommandPredicate interface to handle also Non SQL predicates - Cleaned OCommandExecutor.parse(): now doesn't take a request text anymore - Moved traverse in own package under command
refactored Eigen
Shashank & Kiran | Refactored FP complications schedule code
added char 63/64 selection and minor refactoring
refactoring to better organize source
refactoring
"Gideon : Implemented a smarter way to do the matching of alternate nonterminals for soft syntactic constraint decoding. As it turns out, naive matching based on looping over all child non-terminals in a children table from the Trie, is just too expensive for reasonable size grammars. In fact the best would be split the Trie in two parts: one for children that are non-terminals and one for children that are terminals. This would be the most general solution. This is an expensive solution only in that is requires a thorough refactoring of the rule table code."
PAckage structure refactoring
"[MOD] Java 8, refactorings"
ensure connector slots are freed. Further refactor store
Refactored trend graphs in order to allow extensions by plug-ins: - Now a base class and individual instances are used rather than an enum.
issue #39 : refactor Arc
Much refactoring.  More work on inferencing of binary expressions.  Refactoring of TypeInferencingVisitorWithRequestor.
"Refactored: changed SuiteConfiguration's includedTestsPattern to testClass, because we don't yet support running more than one test class"
Refactor: create an operation interface so all actions can be retried uniformely
refactor AppCacheResourcesUITest.java for safari/ipad/iphone @bug W-1647844@ @rev tbliss@ @rev gtorres@
XWIKI-2601: Refactor XWiki Entity Resolver in a separate core XML module
REFACTOR: moved ARC/WARC record to Resource code into resourcefile package.
Temporarily reverted me.neatmonster -> net.xereo refactor.
"Adding a sort attribute to options-collection and options-enumeration. Refactored OptionsEnumerationTag to extend OptionsCollectionTag, and created a new BeanComparator for sorting beans based on properties."
Browser engine detection refactoring.
test refactoring
Issue 101: refactor client examples
refactoring for sparse matrix components
Refactor name changes
Refactor: extract interface from SuperRow and move it to the api package
Refactoring: Moved from HistoryParser.parse() to Repository.getHistory()
some refactoring of cqs stress tester
"Added support swing-bits filters for jxtreetable and some changes, refactorings"
[PDI-9525] Support for MongoDB tag sets. Mongo (pun intended) checkin that adds support for read preferences with tag set(s) in MongoDbInput and custom write concerns (getLastError modes using tags) in MongoDbOutput. Both steps now have enhanced logging. Also snuck in a bonus new feature that allows all replica set members to be discovered automatically. Code has been refactored and cleaned up.
"Gestion des companies : edition, ajout et suppression via JSP 						+ Servlets / Service associés Refactoring du DAO Company terminé + logging"
Refactored BlockingRequester a bit Added a unit test to verify BlockingRequester functions properly when there are timeouts.
Refactored remove->detach. This is to clear up confusion with entity.remove() which removes the entity itself
Refactor PackWriter to hold onto the sorted object list
Refactoring and Formalizing
some refactoring
refactored some methods in Locations added fixed LocationGenerator
1st. Part for RCP-357 which refactors constraint message translation including:
EHO-206 project assignment refactor
Refactor WebSitesRequestRouter and update KmeliaSessionController
perform code-refactoring; Ignore sample tests
"CDX Server: Adding closest= timestamp query for sorting by closest timestamp, resolveRevisit=true for including original cdx file (offset, length, name) info Refactoring/cleanup in cdx iterator setup Creating zipnum params on the fly"
Issue 757: refactor elastic ip auto-allocation approach and backfill related tests
Refactoring + minor database work
Unit test refactoring
Refactor: extract method for re-use.
GADMconverter huge refactor
BZ 653695 - refactor the apache discovery to continue processing the rest of process scan results after an error during processing one of them.
Refactor RoleUser to Membership.
"Refactoring to move the new failing test (for #501) under failing/, to avoid failing build"
Refactor
refactoriing messaing layer and introducing ActorContainer interface to support temporary and service actors
[PLAT-2973] Refactor main grid construction to clean up creation of columns
Some refactoring of DDoc macros. Fixed bug with nested undefined macros.
- upgrade to JRuby 1.7.0.RC2 and Java 7 - add first Java service class (+refactor to enable this) - create configuration interface + javastatic implementation
Refactor: Use the IOUtils.close() to aviod duplication of code
"[MOD] XQuery: fixes, cleanups and refactorings"
refactor ad hoc serializers
CAMEL-1350 refactoring camel-quickfix component
"another round of refactoring Application and related classes - - renamed ApplicationLifecycle to ApplicationAdvisor, for configuring application related objects at well-defined points within the lifecycle of the app; basically a delegate - ApplicationAdvisor now owns the ApplicationInfo object; removed reference from Application class."
Metamodel code polished. Refactoring complete.
refactor
Refactor permission nodes. LOOK AT PLUGIN.YML FOR CHANGES.
"Added support for writing byte[] and BytesWritable, and refactored collector code and unit tests."
"Backing up (after refactoring, of course)"
CDI-18 Minor refactoring
Refactoring the code for replacing the occurences of comunication by communication.
refactor to change name
"(1) 'gpt' has a new option '-x' (clear tile cache after row write) (2) 'gpt' option '-c' now accepts also zero (= no tile cache at all) (3) WriteOp refactoring: deprecation of ""Static Utility Method"" and ""Parameter List Explosion"" code smells."
TROIA-235 Use Executor to sync Job add/remove TROIA-235 refactored old solution for better code reuse
#NAME?
[CXF-5311] More refactorings to make it simpler to use JWE helpers in JAX-RS providers
refactoring to address review comments
IDE-419 OPEN Added tomcat7 runtime and server classes and refactored runtime stubs
finished refactoring for simulatn work of gui and tui
More refactoring for Json Parser Wrapper
"Refactoring TagSpecSet to TagSet, updates to command-line tools including a SO loader and a Feature loader aware of SO."
"RDFa: better processor graph reporting refactoring enabled tests for RDFa 1.1 optionals tests now can define RDFa version CURIE: fixed term and prefix mapping from initial context OWL, RDFS, XSD vocabularis now public"
ISPN-5038 Remote package refactor
"Clean up opcode stack; refactor some code into seperate pages, use autoboxing"
"refactored annotation and annotation-DAO related classes to use generics combined Integer and Float annotations into Number, and eliminated Boolean (for now)"
refactor package structure and add abstract unit test
Massive refactor of destination choosing underway
Minor refactorig
"refactor : fix ThreadGroup and Hypervisor , SlideBuffer test pass"
refactored codes for some special elements.
refactored TemplateRegistry.java
"polishing, refactoring"
ACT-741 refactoring persistence: refactoring IdentitySession and Tasksession into appropriate entity based XxxxManagers
New test operating on cdi quick fix test added and QuickFixTest refactoring
ACT-755 refactored related content UI
refactoring
[2948] refactored doctor/mandant setting for inbox elements
Refactor CamusHourlySweeper into CamusSingleFileSweeper
refactor Order domain object to Basket
Begin refactoring of JMS container code
Refactor - moved HumanWizardToken to shared area
more refactoring and introduction of a manager to reuse file states rather than re-open every time
refactored ffmpeg interop code (removed code redundancies)
Refactored code and tests.  Removed unnecessary tests.
refactored gremlin-core to gremlin-java. added all gremlin-java test cases. added a gremlin-scala.bat file for Windows loading. Updated scripts to support a single point of access for versioning. Updated CHANGELOG respectively.
"refactor controllers, tests"
refactoring
Application/Service based refactoring and cleanup (Origins and Factories removed)
TAJO-928: Refactoring QueryAnalyzer and LogicalPlanner
key generation refactor 
Refactored Girocode to provide static method parse().
refactoring
refactor by merging ScanManager and IfSnmpCollector... move update code into *Table Objects
Code refactoring in SpaceService
Refactor
Refactored clss methods for better logging
Refactor FileAnalysisCache
refactor 1/3
Various refactor.
more refactorings
Refactored Context* abstract class to Context*View Interfaces
questionnair refactored to questionnaire
Improved API and refactoring.
"adjustments after refactoring of RuntimeManager, introduction of JAAS based authentication for AS7, added repo configuration"
refactored path metadata to PathMetadata class
HBASE-16445 Refactor and reimplement RpcClient
CheckIN: Refactor Progressive Viewing Implementation.
Refactorings
#NAME?
"Updated the CallsetConcordance classes to use new VCF Variation code... and uncovered a whole bunch of VCF bugs in the process.  I'm not convinced that I got them all, so I'll unit test like crazy when the refactoring is done."
[OPEN-HUDSON-6227] Allowing view path not to be the same as view tag Refactoring : include most cleartool commands under ClearTool abstraction. Removed most of specific implementations of ClearTool to centralize in CleartoolExec
Refactor prepare PlotNode to extend MetricNode
Refactor processing and map emitting
EXOJCR-1117: code refactoring - misspelling corrected
"refactoring, plus introduced Listable interface"
Refactor: Remove unneded methods
Ticket #2869 Refactor experiment page Experiment chart data moved out from the ExperimentResultAdapter - DoubleIndexIterator moved to atlas-utils
"Refactor of reports, alerts and calculations * Moved report templates into resources/report_templates/ * Removed PatientAlertListReportManager * Changed report tags to be String[] like calculations * Gave calculations a new singlePatientMessage which is used for alerts instead of shortMessage * Removed dummy Summary254, PatientSummary reports * Moved reports into subpackages by type: indicator or patientlist * Gave some reports more suitable names"
refactoring
Refactored
"Core: refactor update operation, pt.6 (#935)."
Bug 709403 - Part 1: refactor envelope/payload logic in Record.
#NAME?
refactor code and fix some bug
refactoring
SONARPLUGINS-1 : refactoring for SONAR-1132 integration
Continued to work on Nephele channel refactoring
package refactorings
"editCustomerStatus refactoring - fix up update of customer status for center and group (client still to be done), centerCustAction Refactoring - continue with removing persistence from Center business object and tidy up constructors. This required changing and ingnoring of tests which may as well be re-written."
Refactor createUser to new API framework.  Consolidate the old createUser (GWT UI used this API) and createUserAPI into one createUser method since it's only called through integration API now.  Return a UserAccount instead of a User in order to generate a response with all the information required.  Also clean up some of the unused private template code from ManagementServer that was mistakenly left in from a previous refactor.
Minor refactorings
Fixed issue 294: - Used new OLockManager class to use a record-level locking - Refactored all the class to get a ORID in place of literal values
refactor GAV to ReleaseId
merged branch B2005_09_13_SOP: beginning of SOP refactorization
refactoring dwrutil to dwr
"Implemented ACT-140 ""REST API for Show process definition diagram"" & REST API refactor to make streaming binary code common - Moved common binary streaming code from ContentGet to ActivitiStreamingWebScript  - New Class ActivitiRequest that now wrapps the getMandatory[String/PathParam/Int] code so it can be used in both Activiti base webscript classes - Now extend the activitiStreamingWebscript (in web-application-context.xml) & ActivitiStreamingWebScript (in XxxGet.java) for webscripts that return test and/or binary data such as images"
class refactoring
"Refactor of evaluation - inference results moved to application.inference, others in psl-utils repo"
Refactored ContentType -> ContentInfo and created a ContentType enumerated type to be more specific about known byte content.
Refactored the extensions into an ExtensionRegistry Implemented builder pattern to create PebbleEngine due to growing number of configurable options
"refactor packages in test folder, in order to add springmvc test cases later"
Refactored PlayAutoTestBuilder and added a couple of unit tests.
"Refs #2937, #2939: Set Preferred Layout UI is more intuitive now. Removes inconsistente combobox selection colors and other minor UI changes. Some refactoring as well."
Refactoring.
refactor(cmmn-assertions): use common base class for basic assertions and make needed assertions visible in specialised classes
Major refactoring of package names in accordance with #245 #242 #240
Refactor to use undefined number of buffer Add intermediate BufferContainer Remove ChunKMeshBatch PrimitiveBatch
[SHRINKWRAP-391] Refactor *BzImporter/Exporter to *Bz2
Refactor sample name
refactoring code
Issue 197: Huge refactoring on index management to be compatible with Blueprints management.
Refactor ProducerFactories
Refactoring of JPathTest to prepare creation of JPathBuilder and JPathBuilderTest classes.
"Additional refactorings, javadocs and cleanup"
refactor reports
REFACTOR: Renaming to support other future UpdatableResourceIndex implementations.
ByteUtil refactoring
refactor name to Array.wrap
v1.0.2 : Refactored some classes. v1.0.2 : Changed not to can do Cancel command in the Call phase of the Versus mode. There is the dirty person who does Cancel if he almost lose. :(
a little refactoring of the jettyserver
big enought refactoring that  1. adapt Path to have direct access to it's file system  2. adapted all PlaceRequest to better support Paths
"Refactoring to change how default visibility settings are handled, to prepare for #1347"
"STS-2309: refactored handling of java-based bean configs into factory-based implementation, including prefix for element name"
Refactor device permissions resource
Refactor
refactored RandomDecorator
refactoring
Refactoring ExpenseSheetCRUDController to extend BaseCRUDController
Partial refactorization of the person services Some code fixes regarding publications
Refactored the test cases for remote-graphdb to reuse the same test cases for all transport layer implementations.
refactoring for multi-project maven build
refactoring
Refactoring
Refactoring to tidy up resolving and combine object factory and manager - IV
Refactored with EventObserver and separate Repository for views.
"I18n fixes and refactoring, made demo available in english and german Added more Javadoc Upgraded Vaadin to 6.8.1"
Refactored: extracted GeneratedClass
refactoring log position manager module
"Refactored out all connection info from the series provider and added it to the FeedMonitorService, completed node assembly logic, leaving us very close to bar creation time."
Bug 468605 - [Contributions] Refactor HandledContributionItem and DirectContributionItem
Refactor client jupiter class and it's usage
Refactored script loading code.
Refactoring
refactoring RafaelRViana's pull request
refactor rename
Bug 408334: [extract interface] AFE on selecting next change in refactoring Preview
Minor refactoring e.g. variable name changes plus improved comments.  Added additional test case for right fragment check.  Update the Change Log
#NAME?
Refactor logging of camera params
"issue 1240 - BTER currency pairs through meta data, refactored JSON structure as well."
 ItEr30S14CUObtencionRequisitosEnProxectoTraballoItEr29S17: Refactoring to assign criterions required to orderElement.
refs #460 - `Cryptor` refactored to `CryptedIdentity`
Added permission control so normal users can view the selenium page and only selenium admins can add configurations and restart the hub when required Make the selenium hub restartable Refactorign and code cleanup
Refactored ListWidget to extend Scrollable
refactoring engine and utility classes
Refactored repeat covariates to eliminate duplicated code - now all inherit from basic RepeatCovariate abstract class. Comprehensive unit tests coming...
Refactored some test cases and fixed the BerkeleyJE removal issue due to missing shutDown call.
"major refactoring, moved most container code into an abstractbeancontainer, added unit test module for testing the bean containers, and implemented the openwebbeans bean container"
trees refactoring
Refactored new code to correct location.
adding sub tables to various tabs and refactors
refactored to be more OO
Refactored everything.
Bugzilla#298817 Fixed by adding dummy expression button to avoid internal NPE. Also refactored code.
Refactored drivers to use Microbrowser API
Refactored: removed Actors.createSecondaryActor
NPU processing tests refactoring
#NAME?
Refactored ontology core module packages
"Refactor VirtualRoutingResource, put the ConfigItems in separate classes and create a separate ConfigHelper"
Refactor Yml / Properties editors to allow project-specific  severities configuration
[MOD] XQuery: tokens and strings in HTTP client code revised [MOD] Refactoring: String arguments added to QNm constructors
New VolSurface InstrumentProvider for EquityFutureOptions and refactor of IR FUtureOptions to match
Refactored Spring support and tests
Heavy refactoring.
"final refactoring, now Vidada runs with Guice"
camel-5280 - Refactor of component - not yet finished
Refactor: move updateCache() for re-use
Refactored models.EventManager into EventHandler to remove conflict with views.gui.EventManager. Modified comments so docs should be ok. It breaks savefile.
generate zip small refactor
rsa additions and refactoring
JBIDE-19795: Changing external tools detecting logic. Refactoring
Continuing the refactoring experiment. Implement the Command framework. Refine the MVC pattern usage.
1) Localization class to return main locale which is the one configured in the app configuration. 2) User context to return current locale (will rename it later) and the preferred locale and mfilocale will be the main locale for this 1.1. 3) Refactor the forms and actions getLocale to get the locale from user context instead of using its own logic.
"more refactoring for query execution lifecycle, cancelling and enriching a query, use saiku3 UI branch too"
Refactoring jetty-centralized-logger to be more real-world.
Added generation of constrained version of let be st statement. Also did some code refactoring related to transformations of the OO AST
Refactoring view code
Small refactoring and preparation for oss.sonatype.org repo hosting
Refactor to extract the EmpiricalPValueEstimator class.
Weer een grote stap gezet in het refactoren van de oplossing in een meer modulaire opzet
"refactored how the workflows are organized. each themed workflow is now fronted by a service and may be accessed independently, or as part of the overarching workflow. For example, the checkout workflow utilizes the pricing workflow through the pricing service, but the pricing service may also be accessed on its own."
refactored view constructor a bit
AtlasProperties refactoring stage 3:  - admin UI for properties adjustment - correct properties storage order
 ItEr17S10CUCreacionProxectoPlanificacionItEr16S12: Refactoring Planner so it doesn't send exceptions when the configuration is still not ready.
Refactored GCC Bridge Compiler
"Added a check client-side so that server store ID matches client store ID, including refactorings to make that happen."
Add test for module and rule diagram Refactored Drawing controller test Add *.iml to gitignore
"Refactored PPLinker, moved Documentation association to separate class (in preparation for more things going into the PPLinker)."
Refactor client and client (socket) handler to clarify each class's responsibility
ARQGRA-193: configuration refactored to use drone
Refactoring in HtmlUtil to use less code and allow more customization.
refactor
Refactor modules.
More small refactorings
"Added built-in storm metrics, Added MultiReducedMetric. Refactored MultiCountMetric. Added Unit tests."
Refactoring in progress
ACT-60 refactored configuration and test
removed command and refactored to SimpleCommand
[PLAT-5176] Refactor Credit curve calibrator [PLAT-5180] Removed cached values from ISDACompliantCurve [PLAT-5194] LinearInterpolator1D gives incorrect first derivative at last knot
refactoring
improve and refactory
"javadocs, general cleanups and some refactoring; outputs are not set from last to first anymore."
fixed hashCode for SymbolicConstraint; refactored hashCode caching
"small refactorings (moved classes to util package, introduce Signavio config object)"
refactor getLanguagePreference for better readability fix invalid language in cookie issue
Refactored statistic to event. Added calculation of player's score after a match.
Refactored class name.
Refactor ThemeDef to StyleDef
Refactoring the main bundle
refactor CatchClause
Refactored: renamed BindingManager to BindingStorage
feature #1266 : Refactoring the notification code and plugging it into the component
Refactor to move extension into server module
refactored and restructuralized
minor refactor to make the WebClient easier to use as a stand alone POJO
Search Refactoring for bugs 50983 - OrPattern not visible 51250 - search engine throws runtime exception OperationCanceledException
ISIS-550: minor refactoring of InvocationResult
[DMR-9] Refactoring - no functional change. Merging next() and _next() methods. The next() and _next() split was introduced in previous step to better express fix idea.
"Refactoring buttons, refs #11"
refactoring + clean code
"added mysql plugin, refactored console interface"
[340003] Refactoring dialog hung at AbstractIndexManager.waitForConsistent
chore(engine): refactor purge cmd and report
use a system property to define which kind of DataStore to use; both at bootstrap and when running the fabric properly. We could maybe refactor this later on so that we have separate configurations of bootstrap versus runtime configurations which are passed in by hand in bootstrap or injected via DS in @Activate for runtime; but for now its a simple way to switch that works :)
minor refactoring
Harshit | Moved DFL files into resources. And small refactoring.
"refactoring, completed field assignment test"
Refactored OSGi tests
uniformed modal page and other little refactor
slight refactoring
Refactoring out the Particle class
ResourceMethod interceptor support.  Refactored security into an interceptor
Refactored names
#NAME?
"Refactored KernelExtension to make it easier to work with it as a stateless object. Did the same thing for IndexProvider, which is no longer a KernelExtension, but rather its own thing."
"Refactor core AST APIs, fix several issues but break AST filtering"
"UF-177: refactoring, adjusted log level in cleanup listener"
refactor agreement and fixed asset
Refactoring
Refactored some packages.
Further refactoring/code improving
refactoring
Refactored package structure
refactor for improve handling of multiple server sessions
Improved registration message. Added scheduled registration mail sending with proper tests. Fixed security/concurrency control. Added some junit magic via assertThat to some tests (not all). More test refactorings. Shortened session timeout.
refactor the classpath scanning mechanism to make it pluggable
Additional refactoring of Ops-Api Webapp. Added state intialization to Ops-Api Webapp so that it gets its state from another Ops-Api webapp or Archiver.
"Fixes #79,#73 & #46. Refactoring of slice queries"
initial refactor to remove table trie from branch
Refactored ProtocolHandler into separate ProtocolHandler  ProtocolMappingStrategy interfaces and updated JDOM implementations.
Fixes errors in synchronising vdbs during a rename refactoring
Refactor lighting
"refactor comparator, add tests"
XWIKI-12920: Hiding WebHome in wiki link syntax - Using the new resolvers on the rendering client side for: -- Backlinks and relative link fixing on a document rename --- Both oldcore and refactoring implementations -- XWiki link label generator -- WYSIWYG - Fixed tests
Initial checkin of major refactoring.
Refactor woreports in a new structure
CustomBlocks can now have different designs. Refactored rotation code to work with the new system. Added GenericBlockDesign.rotate(degrees).
toolkit controls refactoring
Refactored project structure a bit
IDE-1423 refactor Liferay Mobile SDK feature
"Refactoring, correction enveloppe + online users"
refactored the waitfor conditions to use better structure
"fragments + tests: calendar fragment refactored, calendar tests refactored"
minor refactoring
#NAME?
refactored class to be more expressive
Refactor towards more 'plugable' CloudApplicationArchiverStrategies
Giant refactoring to move type analysis classes into a subpackage.
Refactored to Blueprints 2.0.0. Fixed test suites
Refactoring; centralizing Romo interfacing
SONAR-3755 refactor saving of comments
Bug 321019 - [ModelTooling] Copy&Paste does not work in DetailArea * some refactoring to make focus control accessible
Refactoring. Added doc comments
refactor password related feature
"[BZ 1131495] Refactor SSHInstallUtility to catch error messages and throw exceptions if operations fail, instead of returning just Failed text"
- refactored all the undo managment into XJLibrary - changed again the way the menu are updated (not more lazily :-()
"Refactored notifications, and added UpdatedReservationNotification."
Refactoring of #240
Refactor Query DSL to avoid needing toBuilder() method
"CSPACE-3900 More support for invoking Batch processes. Refactored the invocation slightly to support better error reporting, and to allow a given Batch job to handle various invocation modes. Extended the demo batch job to handle single and list invocation, and to actually create the LoanOut and the relations to the passed CSID(s). Added a series of tests to verify proper functioning and error handling for bad invocation, empty lists, etc. Fixed an odd exception in the ClientUtils, in which a URI cannot be cast to a String. "
cleanups and refactoring
Refactoring
#NAME?
Some minor refactor on javascript service and make native rquirejs example
Refactor to package name
fixed problems left over from cycle API refactoring
"RadarGun 2.0 initial work * new configuration * removed local benchmark -> distributed benchmark can be executed in in-VM (master + 1 slave) * communication refactored to Local/RemoteSlaveConnection and RemoteMasterConnection * each group can use different plugin (product), config file and other properties * Master/SlaveState now host information about configuration and cluster TODO: Reporting is broken now (GenerateReportStage is not executed)"
refactored packaged to org.javastack and update to v0.0.12
1 fixing ws - search all nodes(ignore children) 2 remove external save button for ckeditor 3 refactoring
got the JBI test cases working for invoking a JBI component from Camel and invoking a camel endpoint from inside JBI; also a minor refactor to Component
"introducing the IsoPrologException as the parent of LogtalkExceptions. ISO exceptions are supposed to follow the format ""error(FormalDescription, Context)"". Other minor refactorings."
"Dispatcher corrections, refactoring and tests"
Refactored Value and removed direct dependency to json.
Some refactoring on DefaultComponentManager.
JBRULES-1903 Pipeline support for DataLoaders and Feeders -Added of jXLS support -Added Callable support -Added List adapter -Refactored Receiver.signal(...) to Receiver.receive(...)
Refactor PathSuffixFilterTest to remove duplication
some name refactoring
Some refactoring in instrument wizard. Localization. Error message when going to next and automatic data are not available yet.
Refactored InventoriesConfig.
Refactoring Security
"XCONTRIB-117: integrate XWiki as 2.0 portlet (JSR-286) * Refactor the code (group the classes in multiple packages to make the code easy to read/find) * Isolate the HTML code generated by XWiki (name-space HTML element identifiers to make them unique in the context of the portal page) * Isolate CSS code included in XWiki pages (name-space all CSS selectors to restrict their effect on the XWiki portlet output) * Isolate the JavaScript code used by XWiki pages (work in progress) * Added a few unit tests for the code that rewrites the XWiki response (HTML, CSS, JavaScript)."
"CAMEL-8397: Added support for Salesforce1 Anayltics reporting API, minor refactor, added missing Salesforce fields for latest API"
Temporarily reverted me.neatmonster -> net.xereo refactor.
refactor-#133: restructure the folders to facilitate tycho build plugin
"Refactoring and migration of new allele/variantcontext/genotype code into oneoffprojects.  NOT FOR USE.  PlinkRod commented out due to dependence on this new, rapidly changing interface."
Einige refactorings und weiterentwicklung.
refactoring term classes
minor refactoring
X509/VOMS Utility refactoring
Model refactoring
upgraded to the latest EA version and refactored out the common code from FAB into common-util so we can reuse it in other places like BAI
"* basic refactoring of code, no functional changes, passes regression test"
RF-12900: refactored rest of packages from org.richfaces.ui.util.renderkit to org.richfaces.util
minor fix + slight refactoring
refactored the event jmx classes into a new structure with better naming
Refactored ParameterizedPattern into Builder and Parser
paddle 1 bounce refactored
api_refactor: move network api for admin pkg from cloud-server to cloud-api
Refactored ingest processors extracting a method for each processing step
Refactoring the deployment code and the code that builds jndi trees.
CAY-2185 partial fix plus refactoring and cleanup of FindAction and related classes
refactoring
Refactored colocolized pixels image generation method
refactor my action performed methods
CDS: Refactor ISDA test grids to detect files and load one by one
refactor of Account * Rank is now an enum instead of a list of nummerical constants * the access bitfield was split into the following fields:   - access (enum Access) NONE|NORMAL|PRIVILEGED|ADMIN   - inGameTime (long) converted from minutes to seconds   - bot (bool)   - agreementAccepted (bool)   These new fields have also been JPA annotated
slight refactor to make Branch more useful
Refactored (with some amount of duplicated code) just to avoid auto-boxing
Names refactored from Supdicium to TDM
port to neo4j 1.1 and start new dynamic layer refactoring for OSM
Minor: refactoring
refactored code
"Issue #7 & #16: chart-settings portlet for aggregator,  refactoring of settingsControllers plus other refacotrings"
"a whole pile of changes, some of which work, and some of which don't ;)  Mostly this big commit is to include the latest changes to manakin, which currently aren't functional, along with some refactoring, commenting and general tidying up of the core set of identifier classes"
Who refactored my plugin?!
[MIN] Refactored IndexTree private function names
Refactoring and documentation
HHH-10450 Refactor the way configuration is read
Some refactoring/clean up towards a re-usable core indexer.
Java backend: added comments/questions while reading code; minor refactorings
Refactored While to For Iterator to fix bug.
Pull Up/Push Down now organizes imports and leaves javadoc formatting intact Fixes: 75432 Pull up refactoring leaves unused imports 75431 Pull up refactoring destroys javadoc formatting
RF-11906: Warning when JMS integration is off but JMS API is available + slightly refactored for better readability
Refactorings to compiler. Added soot sources to project and removed soot jar file.
"Merged revisions 11785,11788-11791 via svnmerge from  https://opennms.svn.sourceforge.net/svnroot/opennms/playground/rangerrick/collector-test-refactor"
SOAP-1416 Improved error messages + refactoring
"Neptun validation, refactoring refs #145"
More test refactoring to make test more readable - at least IMHO
Shane: refactored a few things - created a new Analytics interface and AnalyticsClient class. Added some more tests.
#NAME?
Refactor class name
REFACTOR: renamed UrlCanonicalizer => AggressiveUrlCanonicalizer
Changed exceptions from SNMP tree to consolidate down to one OID not found exception. Index based functions no longer check bounds or throw checked exceptions. General code cleanup and refactoring.
refactoring using interfaces for all Node Types
Refactor some duplicate code to openStream method.
"refactored foreach, replaced scope with context"
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
Refactorings and initial communication report table
refactoring: move classes to new ctrl- and view-packages
WYCS; yet more refactoring.
Refactored SharedObjectDescription and ReplicaSharedObjectDescription
"Refactor and extend core services API, some issues still need to be resolved"
Checkpoint: refactored CertificateStore to generic CertificateStore util.
refactor and remove unused parts
Refactored search engine to take an IMatchLocator; added friends to the index: removed derived from search page
refactor replies and add more verbs
"Refactored so that the DWR beans are set up in the root application context, and not in the Spring MVC application context"
package refactor
Refactored function names in MMTFActions Added new function to read from a URL
SONARPLUGINS-31 Scan PHP project updated PhpCpdMapping after AbstractCpdMapping refactoring
XWIKI-4728: Wysiwyg editor special character handling in links * Add services to parse and serialize entity references * Refactor and clean the DefaultWikiService class
Refactored toString in Sopremo types
Implementation of flagging and favoriting capability for both Reckonings and Comments.  Some refactoring snuck in as well.
Refactor StaticRouteCapability following example given by ChassisCapability:
Refactor and addition of Util tests
Refactor: Moving out methods for clarity.
"Another refactoring, moved requests into a req package and removed Details from names"
Refactoring to meet quality... steps towards credit issue 39
refactoring
Refactoring of a method.
Refactored endpoint Context configuration New SPARQLEndpoint interface combines SPARQLQueryEndpoint and SPARQLUpdateEndpoint Changed SPARQLEndpointBase param types into SPARQLEndpoint
NOJIRA: Refactored typo
[refactor]
NXP-6273 - refactored structure
Refactoring of classes and methods to reflect the name change poll.
refactoring client
refactored to support @Alias() instead of @Named()
"Refactored package names, standardized source and test paths, integrated with sonatype OSS, updated licenses and Readme"
#NAME?
Add some tests and a refactor of FileNameServiceImpl.
Refactored to separate lightweight Hadoop utilities from the big indexer jars.
OFC-279 Perform code review and refactor DataService
Coloc 2: Refactor Histogram2D algorithm to generate LineResult
Backing up in the middle of a fucking HUGE refactoring
Refactored into maven project.
refactoring (no cockpit and no execution in gui)
refactoring
"[refactoring] Use TargetEnvironment instead of Map<String, String>"
"XWIKI-9309: Also search in attachments when type is DOCUMENT * Index attachment author, date and size * Make sure we can sort attachment results by file name, author, date and size * Duplicate attachment data on document index rows (using multiValued fields, so the relation between various attachment meta data is lost -- we won't know that a file size corresponds to a file name) * Add media type, author, date and size facets for attachments. * Refactor (and improve) DocumentSolrMetadataExtractorTest"
webadmin: Refactor shared storage options on DataCenterGuideModel
1) Code refactor 2) Add javadocs 3) Handle 500 Internal Server Error 4) Local repository to have base dir relative to server root
"metamer: menu delay tester refactored, showing/hiding of menu will now propagate an event with coordinates"
test expiry of requeued messages and some refactory of the expiry test
Refactoring and introducing repositories
"introduciton of editor page component interfaces minor refactorring some incompatible, petclinic has bee nupdated to reflect"
performance: refactor the test
Created a 'kernel' component for the Neo4j kernel. This contains the refactored version of the 'neo' component.
"added some javadoc, some refactorings and cleaning, added support for filtering, refactorings in exporting API and implementations"
Minor refactoring and adding test case
Refactoring of the repository in order to use Maven for the compilation/setup.
Major refactoring in large scale fault tolerance. Interfacing streamable state. Link to star-topology
JDBC Stores Refactor
Changes to UserGroupPluginBusinness due to refactoring and KSI project.
Refactoring of the name 'state' to 'vertex' in the code.
"Refactored alarmd, alarm-api, plugins into separate modules and cleaned up code organization and dependencies"
ReceivePack: refactor push option parsing
Refactoring and renaming. Added an ignored testcase outlining an idea for client ids.
Refactor class names
refactor packages to gwtplatform
Refactoring: Made NbtList and NbtCompound into generic interfaces.
JBRULES-1008 refactor the event interfaces on working memory so both stateless and stateful sessions can support them
#NAME?
code refactoring
Refactor video listeners.
"Minor refactoring, minor fix."
refactor Browser
Merge with content refactoring branch.  Please see B2007-09-10_Contents_Refactorization for complete commit history.
refactor ref testcase
refactor pom.xml adjust package name
Huge refactoring to remove database field in many classes: now the current database is always retrieved from thread local.
gluster: Refactor GetGlusterServersForImportQuery
"refactor the QueuePool implementation a bit, to make the coverage tools measure a higher coverage :P"
"tests refactored, avoiding exceptions when missing external libraries + POM fixed (removed fullkakadu profile)"
Code quality: Refactoring according to SONAR recommendations
Ticket #39 - Project Cleanup: Refactor into Maven sub-modules - Part C     1) Moved org.opentripplanner.jags to org.opentripplanner.routing in opentripplanner-routing
Refactored Nic.java for readability.
"refactored refs : all code in AbstractRef, accepts a source field used with a short name to build the name"
REFACTOR: Created appropriate packages
Refactoring MongoDB implementation out of database package
Bug 292851. Protection against concurrent access to the shared AST between CEditor and refactorings.
completely refactored the way plist is parsed; DTD should be well-supported but more test coverage is needed; defined a base PListObject and extended different PList types from that; minimal PList test update for new plist permutations - need more;
Refactored SAP Tool Suite Import Wizard
started on refactoring roadmodels to allow compatibility between PDPRoadModel and GraphRoadModel
"minor refactoring of cycle API in order to display file type (content-type) information in the UI, made ContentType an enum and added a ContentType property to ArtifactType"
cleanup and refactoring - stage3
Refactored ConcurrentFinancialCalendarGenerator
 ROO-1670: Post 1.1.0.RELEASE code refactor and clean up - cleanup of dbre packages
Refactoring stream plugin feed fetchers to better support extension (B-05607)
"Refactoring FormGroups, building Form Example"
Refactored out more uses of modello and moved classes from maven-project to maven-project-builder. Doing this so that maven-mercury will not have direct dependency on modello or maven model.
"1137 - refactor class hierachy to collate common code for mapping rules for SAML, social provider"
"Refactor HandleSupplier to have less methods, control state transitions. Convert `@Use*` annotations to configuring annotations."
Add LRUMap implementation Refactor serialization behaviour in HashedMap hierarchy
refactoring a bit.
refactor
Refactoring of deploying and allowing modules to be deployed from classpath to make IDE usage simpler
"fix broken tests, refactor LeaseItemImpl to LeaseItemTest"
refactor SecurityUtils (part II)
"HPPC-113: more work and refactorings cleaning up the API of buffer capacity vs. ""size for the expected number of elements""."
Refactor the core zone change code to use a common code path.
Doctrine annotations refactoring support
refactor designer core code
Refactored the DataPolicyConverter for basic code cleanup and added a value to the Policy enum for PARTITION.  Added additional test cases in the corresponding test class.  Refactored the resolveDataPolicy method in the RegionFactoryBean making use of helper methods.
[CXF-5944] More refactorings
Refactor to provide a ChannelHandlerContext for ConnectionBase instead of a Channel
Refactored
"refactoring, prepare the use of another permission management -"
Refactor - categorize pages and components better.
1) Refactoring of cumbersome custom plugins load/unload/enable/disable code. Cleaned up lot of mess with the misuse of the *looks-like-singleton* DetectorfactoryCollection instance (which IS now a real singleton). Do NOT reset DetectorFactoryCollection singleton from SortedBugCollection constructors/other code except tests anymore. Using UserPreferences as Project.getConfiguration() (and NOT any random instance of DetectorFactoryCollection). Custom plugin url's (enabled/disabled) are now saved in/read from the UserPreferences (.fbprefs).
"Adding a send email method, refactoring"
Refactored some classes and tests.
Refactored and improved tesselation on the fixed function pipeline. But it's preped for the shader pipeline also.
Refactored
Refactoring and tests.
Authentication refactor done: OAuth + APIKEY + HTTP BASIC
HZN-800: Refactored SyslogTest so that it can test both Elasticsearch forwarders. Disabled Alarmd to optimize Eventd performance.
"1.  Make Util.getInstance() NOT throw an exception except ConfigurationException, and provide alternative, Strict methods 2.  Update usages of this method accordingly. 3.  Marshaller, AbstractMarshaller and StreamMarshaller refactoring 4.  Removed VHelper and SerializationMarshaller from hotrod-client 5.  Removed InputStreamAdapter and OutputStreamAdapter from hotrod-client 6.  Removed InternalCacheEntryMarshaller from remotecachestore"
Refactored rewrite-impl-servlet into rewrite-config-servlet and rewrite-impl-servlet
Refactoring and Graph API interface methods design.
security: refactor: rename RestxSessionFilter into RestxSessionCookieFilter
JBRULES-1520 RightTuple merge for asymmetrical Rete propagations -Added MockRightTupleSink -Refactored MockTupleSink to MockLeftTupleSink
Fixing rayo provisioning tests after latest refactoring on provisioning and environments
refactor
"Refactor service alerts suport code, style service alerts in vehicle popup."
Added GoblinToken and refactored cards using it
Slight refactoring to improve testing
Clean-up work for the refactor menu
Refactored getMIConfig() to getMVIConfig()
alarms: Refactor alarms cell's send command
"major refactoring, adding in column names"
PrevalenceTest refactored to FileIOTest to be more reusable (I am using it in another project ;).
Refactor ElementSelector and NodeModelBuilder into Selectable
Refactor to work on official AWS APIs
api_refactor: move zone apis to admin pkg
Global refactoring: 1. PhpEditorModel - should be DOMModelForPHP 2. PHPDomDocument - PhpDOMStyle
MIFOS-4322: refactor service facade for retrieving load reference data for loan creation.
Refactor InvocationStrategy and Invoker into net.sf.hajdbc.invocation package
minor refactor of the code for http://issues.apache.org/activemq/browse/CAMEL-226 to make it a bit more consistent. Also added a new test case
adding NativeAttribute#LOCK unit tests + refactoring + bugfix of UpdateNativeUser.
Refactor memcache integration test to enable reuse
Refactoring for batch DB
"Refactored, added unit test"
BeansXMLValidationTest + OpenOn test on assignable beans + huge refactoring of all tests
1. refactoring: PageObjects to PageObjectFactory 2. adding VetObjectComponent
o Refactored/renamed interfaces and split the test-framework part of reporting from the reporting (to disk part).
"[MOD] Options, CSV, JSON: refactorings"
unit test refactorign
refactor
fixing ws tests according to JBDS 6 + some refactoring
changing package names to contain 'refactoring'
"refactored code, cleaned up"
"MUC (Room) modifications :  - Support history options to control the amount of delayed stanzas when joining a MUC room  - onOccupantsChanged refactored to onOccupantAdded and onOccupantRemoved  - BREAKING CHANGE : onMessage listeners need to check on (message.getBody() != null), it is to allow further extensions of the MUC module"
refactored the following cases:
REFACTOR: Now some LocalResourceIndex implementations are UpdatableLocalResourceIndex. This class now operates on those. Refactored lots of directory creation code into DirMaker.
"Adaptations to accomodate Tribble API changes, comprising mostly of the following. * Refactoring implementations of readHeader(LineReader) -> readActualHeader(LineIterator), including nullary implementations where applicable. * Galvanizing fo generic types. * Test fixups, mostly to pass around LineIterators instead of LineReaders. * New rev of tribble, which incorporates a fix that addresses a problem with TribbleIndexedFeatureReader reading a header twice in some instances. * New rev of sam, to make AbstractIterator visible (was moved from picard -> sam in Tribble API refactor)."
Code refactor and tidy for UtilityFunctions
"Revert ""Bug 488109 Refactoring of Extract Constant Implementation"""
refactoring of ws bot tests
"refactoring, better integration testing"
Refactor the error reporting for the different query functions and do expensive annotation name query validation only when actually executing the query.
Refactoring to allow the renderer for PartTabFolder to be pluggable.
Refactor chart report item presentation
"* Refactored tests-parsing code, introduced SeleniumTestFileProcessor and SeleniumTestFilesFinder * Implemented StandaloneRunner - which allows running given Selenium tests against given site from the command line (requires Selenium server), which is very helpful for regular testing. More details will be available on the wiki soon. * A lot of cleanups and fixes"
refactor raw data
Refactored Actions.add. Added new Action classes.
Refactored
ARQ-2037 refactoring
[WFLY-3485] Refactor mod_cluster transformers and move transformations to its resources
refactoring...
"refactored the browser interface, abstract, and concrete classes. Every browser method goes through the EmbeddedBrowser interface now. Also moved the saveScreenshots method to the firefox implementation since it is not supported by other browsers yet."
Continue configuration refactoring / improving APIs
Refactored ClueWarcForwardIndexBuilder.
added test for SummayryStxOp - fixed some bugs - refactored
Refactoring of DiscoveryLink
"Big refactoring: * moved all widgets used by the editor in the ""widget"" package * moved all classes related with the rich text area to the ""widget.rta"" package (this includes ""history"" and ""cmd"") * moved editor classes in the ""editor"" package. * refactoring of the RichTextArea. * more javadoc * fix checkstyle errors At this point ""dom"", ""util"" and ""widget"" packages represent the base on which the ""editor"" package is build."
"refactoring - renamed QueryBuilder to QueryLoader, as QueryBuilder name may be used for other purposes (step 1 ... renaming... will add deprecation shortly)"
Elaine's refactoring of forex options code.
some improvements and refactoring
refactoring to cassandra go faster
refactoring tracker service
refactoring of ws bot tests
refactoring test and adding restfulie interface
"Refactored, Extended"
ALLUXIO-2112 Refactor property setting in HadoopUtils.java
Further minor refactoring
Refactoring: Removed unnessecary custom requestcycle.
Refactored: decoupled actors from actor threads
DRILL-735: Refactor Hive storage testcases into a separate test class
MIFOS-4190: refactor dto and implementation for group service facade
Refactored all of the listener classes to a 'listeners' package
Refactor parser.
"Refactored bayesian package into the new design. Passes all Unit tests except those related to xml, which is the last thing to be fixed."
"SAK-2122 - Entity Model extension and refactoring, phase I."
"Refactored AnnoClass, AnnoMember. Updated same to more faithfully honor JPA spec. Added @Transient support, a README, and a ton of new tests."
"MAGNOLIA-1614: context refactoring and subtasks - non jcr session shared anymore - Authenticator reduced its minimum (can be droped completely) - the jaas modules can pass back the user object (optional) so no double instantiating - context login() logout() (single context no instance replacement) - ContentRepository does not create any jcr sessions, hierarchy manager anymore"
more fixes and refactoring
"Refactored the modules to match our emerging OpenCredo style, and added a little Noodle Bar sample demo for fun"
"CAY-1068 Add support for start index/offset of queries (refactoring to ensure consistent naming of the new feature - ""fetch offset"")"
Refactor preferences model
refactor rename method
Refactored bindings into separate methods
Bug Fix: Fix bPerm's dependency Removal: Remove all traces of broken Death Formatting. Refactor: Refactor all of the Config files.
"Minor refactoring: move RootNameLookup deeper into configs, to reduce state to copy for ObjectReader"
refactoring tests and changing JSR303ValidatorFactory to be ApplicationScoped
In the middle of a refactoring of option pricing code.
more refactorings
"refactor bill of material poms into api, client and runtime, implement runtime tests"
CAY-753: Lifecycle Callback API Refactoring moving stuff to reflect from map
update to handle minor refactorings in ij2-common
refactor stdout/err redirecting
checks/refactoring
name refactoring
Refactor part 1
* refactored framework specific tests * removed version for TestNG * extended ReflectUtilTest test * refactored ObjectFactoryTest
Refactoring
o primarily refactoring in part for the preparation making room for mercury and processing events from maven-shared-model o add plexus component descriptor generation to the bootstrap so we can start removing the hand-written descriptors and start   using annotations everywhere
refactoring dir structure
"(Define) Bugfix double rule, added equals function to AppliedRule, refactored"
Another round of major refactoring.
"Revert ""- service refactorings"""
PR: MPMD-38 Refactor excludes to work with both PMD and CPD
Users is refactored to contain less state. test is added for Users. Groups gets all the members
core: refactor failure to run vm flow - part 5
TEIIDDES-2482 enabled ddl importer to properly set SQL for Teiid views and procedures  * Required refactoring virtual relational objects to relational plugin  * Required adding a dependency to transformation plugin to ddl importer plugin
core: Refactor networks handling in VBOB
Refactoring PlayLogger: create distinct log filer for each play
Initial commit of rewritten table support and associated refactorings
More refactoring of chain-reduce spike
Refactor GcodeParser to use pluggable command processors. Removed the expand arc feature.
Fixed an issue related to negative and zero column values. Refactored some code for BDBKeyIterator.java.
Refactored @Bridge and @Callback method compilation to utilize clang to handle the passing/returning of structs by value. (#754)
SearchService refactoring.
"Refactored main to new name mainReturnsStatus(), and created a new public static void main() to satisfy standard java requirements and make jenkins happy."
Elasticsearch refactoring.
refactor local vs. remote resources make download button in Maps&Themes dialog work
"tdd of group creation using using unit tests, refactor customer creation"
fix for multiple upload refactoring
refactor rename metadata realted code
Refactored package visible classes
"refactored dependency management in all poms, equals and hashcode methods."
Timeouts -> TimeoutsAndTrials; NodeCreator refactored
"Minor refactoring of Base{HornetQ,JMS}Handlers and many test improvements."
"Refactoring to split the model, compiler and runtime into different classes/interfaces"
Refactoring of AS2 inbound.
refactoring: fix spell 'Invriant' -> Invariant
#1710 some refactoring to make classes more clear of their purpose and to make them more reusable
CAY-2196 Support for new function expressions in expression parser  - updated and refactored grammar for parser  - add token id to AST* function call nodes  - escape in parse exception message  - tests
Made some naming refactorings in restx-server modules
Intermediate strong refactoring about Query management.
refactoring
refactoring of some types
Refactored namespace. Added pom.xml for Maven and Jenkins.
Refactored tests to use Spring 3.2 @ContextConfiguration(initializers=... and moved test support classes to src/test/java. Also upgraded to Spring 3.2.1
refactoring: services dispatched in sub dirs
"Selenium GUI test framework (refactorization, code clean, and some more sample test)"
test refactoring
Refactored groupId/package
Partial refactoring - does not yet compile.
Completed refactoring of RegulatedMotor
refactored graph-layout project to graphviz
"New tests, refactors for VFS changes (jbpm -> jbpm-console because of uberfire deps)"
Continuing refactoring for carving out OAuth client piece
partway through refactoring of dictionary data classes.
refactor build system to use maven - change code files to make build system work
Refactoring the web server classes.
A few refactorings in anticipation of more formats that needs some common functionality
MX-8 more refactoring of the admin pages. WIP
More refactoring - added tests for FileHelper
Refactor org.metawidget.test to org.metawidget to allow testing protected methods
some refactoring
Refactored BasePersister classes from collectd into the new features/collection/persistence-rrd project so that they can be reused by sampler collections outside of Collectd.
#NAME?
huge refactor
Refactoring TreeBuilder structure.
Refactored AssociativeMap into HyperassociativeMap
Refactoring of Exceptions
refactored packages so they make some kind of sense
refactorings
Refactor getDateMidnightMillis to use getMaxMonth
refactor linking
Refactored contract tests to remove code duplication
Code Refactoring plus preparations for custom events
"Added getPureText(), and refactored methods to use it.  This is done so that getDiff() would automatically get the latest version if requested."
[Code Refactor] Use single recursive methods
Refactored getMVIConfig() to getSettings()
Refactored a lot of the partitioner so it is more manageable. This should be the final refactor I think. From here on in it ought to be performance tweaks and bug fixes.
Refactored some of the package names. 
Patch from Li Gao for refactoring Exception handling in dynamic activityId calculation and the reports upload function.
[TACHYON-613] Login Mechanism: Add GetTachyonLoginUser method using LOGIN_MODULEs - refactor structure
Refactor a bit the chunk formatter
restapi: Link Creation Refactoring
"[OPENENGSB-876] review jpa annotations, remove not needed fields, some refactoring again."
Forge2 refactoring.
Refactor request parameters allowing to get unencoded value
FALCON-1607 Native Scheduler - Code refactoring: Refactor ID into more specific sub classes. Contributed by Ajay Yadava.
RF-12900: refactored org.richfaces.util.* packages to org.richfaces.util
Refactoring Open Ons testing functionality
Refactor rebase commands
Use shared AST in Extract Constant refactoring.
"[SHRINKDESC-120] Qualify each ""from()"" method to denote what param type we accept; add tests for the @deprecated form, refactor to use the new methods as advised."
* added support for setting max/min age for client creation in acceptance tests via the testing service. * refactored CustomPropertiesUpdateController
Refactor - make Controller control
REFACTORING: moved AccountUtils to .authentication package
DDF-2644 Added batch get endpoint + refactored some of endpoints
Refactored view model according to new terminology (View and ViewPoint)
Major refactoring of the Publisher packages
refactor the NCXDocument to make it easier to test
Refactoring still in progress.
Refactored the files
XWIKI-2862: ScriptExecutionContextInitializer is never called * also a quick refactor on api and internal packages
"Shapes : Some Refactoring, adding hierarchy encoding"
Refactored serenity folder organisation to improve reporting
created javamail module and begin refactoring javamailer class
Implementation of search for Variants with the admin - Refactor of class names - Extracting methods to a separate search class - Refactoring all the Variant endpoints to make use of the search services
Rework/Refactor XMLWorkflow migration so that it works properly with Flyway and can be enabled via a configuration flag. Also replace DatabaseManger.loadSql() with DatabaseUtils.executeSql() as ALL SQL should be run via Flyway parser now.
merge tool - event behaviour refactoring
refactoring testutis -> testutil
Geopackage: clean-up & refactor
Refactor offer related classes and add offer unit tests
adding sample client + refactoring a couple of classes related to that new addition
Refactoring to reduce method length
refactoring
Unit test for xml serialization + refactoring
Added refresh button and refactored a bit
TESB-9098 - Get NPE when call the rest service using SAM customer property which is running in Studio -> TESB-9163 - fix NPE in SAM client + refactoring building REST operation name
package refactoring / merge
Bug 422288 Refactor DockerServer into new package
refactor move AppScript services to new AppScriptService in appScript package
Refactor to reflect actual structure
Refactored titan-dist and ConsoleSetup
Feature #4370 : adding a new portlet to display the last consulted publications - fixing a SQL query that does not perform as it should - refactoring some code - applying the Silverpeas code formatting - fixing a compatibility problem about the portlet titles with already existing Silverpeas servers
SONAR-1929 minor refactoring + add some tests
pool: Refactor representation of pool size
Refactored app utilities
EST-472: Increased integration test coverage for database queries and refactoring of deprecated annotations
additional refactoring to try out a storage again for neo4j
refactored global to resource documents
"Refactor ""point.Point"" Strategy & FieldType to ""vector.TwoDoubles"". The field name & type name we use is ""vector2d""."
More refactoring.
big global naming refactor
[PLAT-3260] Refactor: modify organisation spelling to organization
"New feature: - RAIDES refactor, to keep yearly data"
 - refactoring code  - fixed bug in flock manager module  - fixed bug in history graphs module  - fixed bug in showing history table and exporting to excel  - changed design in several pages  - added using jquery  - removed unused files
Refactored topic UI classes.
Final set of refactoring which now facilitates:
drawing -> filtering names refactoring
Renamed ScriptableRefactoringFactory
refactor broker-service and appComamndData
refactoring securing annotations
"refactor, use JSONLexer replace JSONScanner"
"mostly refactoring, but added some drafts as well"
refactor so we can eagery resolve the PomDetails before we attempt a deploy
Refactor ExpectedExceptionsHolder
Refactored kml files
"PJSM-150 refactor datacollection, provide it as a config ReST API"
* Modifying server plugin config page to be read-only * Adding additional edit page for server plugin configs. * Refactoring several UI beans to share common functionality.
"refs #137 - more tests and mockers, REST refactored"
Simplify Fetch and Push first part: Refactor fetch and push operations
#NAME?
Refactored RRdb sampling code to be able to handle database reboots.
Refs #3123: More refactoring.
refactor custom client configurer to a separate project
HIVE-8718: Refactoring: move mapLocalWork field from MapWork to BaseWork (Reviewed by Szehon)
alarm and events view repaired... need to re-refactor filter code
refactor package
o Refactored code
More refactoring API work
Bug 363244 - Generate Getters and Setters expands macro with typedef and breaks formatting. The bug was fixed by minimizing areas of code affected by the refactoring changes. This minimization had a huge ripple effect.
added stats by type and refactored some classes
Refactored TCPIP (including NIO support) code for JGRP?240.  TCP_NIO no longer extends class TCP and ConnectionTableNIO no longer extends ConnectionTable.  They instead share a common abstract class with shared methods.
Refactoring print(Object obj) to output the id property first.
v2.5 refactoring: PathManager offloads path/caching/export logic
"[JBIDE-10427] applied the fix from JBIDE-9934, refactored the ImportProjectWizardModel and extracted import strategies"
refactor => convert to inline fixed bug where format only ran against saved version
#NAME?
* WO Browser view added to Bindings View (+ a bunch of related work -- still experimenta) * Refactored and cleaned up (some) WO template/WOD/WOO caching API * Added hand cursors onto breadcrumb * Added add binding/set value refactorings * Fixed concurrency problem with Xerces parser and API files * Added API to optionally NOT remove inherited duplicate bindings * Decreased the number of validatons that happen on save
OGM-1044 Refactor Neo4j TransactionCoordinator classes.
Refactor preferences internals
224916 EmptyStackException from RefactoringHistoryService
Mercurial Integration is now done with java native library hg4j. Refactoring to clean up the code and to allow easy adoption of other java native libraries in the future. Some unit tests added and classes moved to dedicated packages for better maintainability
"refactoring - split draw run text, underline, strikeout, border (gdi/gdi+)"
Refactored architecture for enabling and disabling actions in frame. Removed border form SidePane Scrollpanel.
Refactor package.
Fixed NPE and refactored saving to props file.
"CSPACE-236: Changed method names, SQL commands to reflect future refactoring from ID patterns to ID generators at top-level of ID Service."
Refactored ParameterConfigurationFilter into ParameterConfigurationHolder and ParameterConfigurationListener.
WICKET-2816: refactor paging support
code refactoring
Big refactor of qname
[nobug] cleanup and refactor unit tests
"More refactoring, everything has an interface and JavaDocs now."
refactoring. new version based on the previous review
Defined UserAttributeSchema plus some refactoring
Refactored out an IFragmentAtom interface
Refactor and improve core plugin entry point API
refactor pa updater for better logging and less deadlock
Java code refactoring. Check of deprecated methods and classes
Refactor WindowedFile/WindowCache so all windows are a uniform size
"Refactored packages, additional fields & panels, numerous bugfixes & improvements. Almost ready for prime time. Requires latest PMD 5.0 jar."
refactored properties objects to be consistent w/keystone
kpme-2473: refactoring newly deprecated workflow attribute source import organization on tests.
Getting more unit tests up.  Refactored deleteTicket -> deleteRecord and getTicket -> getRecord
Small refactorings with minor API changes. Increased test coverage
Refactoring: Modernized Module*RepositoryTest
[KARAF-2833] Refactor activators with a single base class
JBRULES-218: refactoring logical transformation to allow future development of forall
Refactor AST to separate interpreter and parser concerns
Refactored pairs and strips impl.
"HEMERA-119: Implemented first version of tags and tag connector, finished refactoring to remove ""currentPath"" and renamed ""originalNodeId"" to ""nodeId"", removed some unnecessary old classes, renamed DAO classes"
Refactored GlobalTransaction.
Refactoring market data feed to make it *a little* easier to add new feeds
Refactoring ActionRuntime => Actions
Refactored
"Initial checkin of RIM client from LifeMarks, after initial refactorings and style changes, etc. May still need work."
added XPath predicate support; also refactored the Predicate interface so a single expression class can implement predicate and expression
First concept for AtomFeed serialization. Minor refactoring for Serializer API.
MAHOUT-846: Refactored pdf() to sum the exponents and perform the exponentiation only once. All tests run
some javadoc and refactorings
Tests refactoring
folder structure refactoring
"Extracted some methods in the Fen, Simplifying refactorings in the GameBrowserImpl"
exception handler refactor
TAJO-1141: Refactor the packages hierarchy of tajo-client.
api_refactor: router apis for admin pkg
[RHQ-894] refactor the way we send connectAgent messages to server. this was to a) avoid sending duplicate connectAgents commands in quick succession and b) avoid the possibility of not sending the command successfully to the server prior to sending other messages.
Open dialogs refactoring
Refactor ServiceFinder to support loading of a list of classes from any file. This is the basis to support META-INF/services/jaxrs-components that contains a list of resource and provider classes.
"Analyse: Refactoring of control structure, service provision, and service names."
Changed parameter for geocoding and reverse geocoding actions Mapped also google reverse geocode response with JAXB Made some refactoring
refactor
refactored some names etc and added validation lib
Refactoring and more unit testing.
"Refactor ""aws"" module"
Refactoring: job status is now part of configuration bean
 r11686@thor:  alex | 2007-02-13  E. Europe Standard Time  + TESTNG-139 fix  + small fix in EmailableReporter  + small refactorings in Parameters
"aupdating documentation, refactoring"
Refactoring
* clean up imports * further refactor serializing * logging in FilteringOsmStream
Minor: refactoring DFA command stream
Refactor the project admin screen into tabs
It was added changed in the model -> association classes refactorized -> includes new associations in the model -> it has an inheritance from IResourceModel 
EST-281: more refactoring and tests
Added 2st task for week 6. Refactored 1 task.
significant refactoring and generalization of instance keys and CFA builders
Refactored the Link plugin.
#NAME?
Refactored out the remaining plugins in the activemq-core module into their own modules.
Refactored
Refactored initial validator into newer dispatcher
"added much Javadoc, a splash screen and did some small refactorings, mainly moving inner classes to the package level"
"Tests for real permutation PSI, and some refactoring."
Code cleanup and refactoring
TRUNK-5053 Refactor ProgramWorkflowServiceImpl.saveProgram
Renamed ClassRenameParticipant to RenameParticipant. It is not only there for renaming classes. bug 395174: Provide refactoring support for e4xmi files https://bugs.eclipse.org/bugs/show_bug.cgi?id=395174
tidy up the javadocs after the big refactor
Fixes for tournament and refactoring
issue #265: refactored abstract endpoint structure
" * PHP:    * Added exceptions to GameServer.handleResponseForRequest  * Java / Ruby:    * Added GameServer.handleResponseForRequest method (Fixes issue 5)    * Refactored creation and reassembly of SteamPackets into SteamPacketFactory    * Refactored tests into a new directory ""test"" and several test cases and adapted this into build files (build.xml / Rakefile)  * Java:    * Minor fixes in Steam Community related classes  * Ruby:    * Added TF2 class objects for Steam Community statistics    * Fixed several typos related to the packet name changes    * Got rid of the debug function, using Kernel.warn now"
"Fixing starosta write on duty and DutyList class refactoring, extracting EmptyUser, EmptyUserLocation and MonthHelper classes."
made some refactoring
"refactored all scenario related classes into a single package, renamed DynamicPDPTWScenario to PDPScenario"
"[#HEMERA-2864] backporting commit ""272b4d6c55b0 Refactored FoxJobRetryCmd and added some TODO comments."" into new repository"
Refactored project layout.
Refactor activity action authorization in preparation for use by email notifier.  (B-09663)
TYRUS-228: Client SPI refactoring
- Format code. - Use Java 5 generics. - Refactor work done in doPost method into individual per-action methods. - Eliminate the use of StringBuffer except in a few cases. - Largely eliminate reuse of a single variable for different objects.
refactor thresholder to include a ThresholdsDao for thresholds.xml - reviewed by mhuot
Refactored packages for Novelist and Nhovestone.
#NAME?
#NAME?
Bug 292229 - Refactor the content assist test suite to make adding new flags easier
Image view refactoring
"NXP-13587: refactor: store readonly state on internal SQLDocument only, not each property"
memory optimization and ontology internals refactoring
"Improve extension ability of FrameBuffers after refactor. Removed static methods, hehe As discussed: https://github.com/libgdx/libgdx/pull/4882"
"Refactoring Injectable.getValue() to take no parameters. This removes a dependency on HttpContext, this and dependent classes can move to the server model. Server is optimized to avoid the use of thread local for obtain information from the request for the @*Param annotations and entity values."
Deprecated and removed MetaPopulator. Did some refactoring.
refactoring
Refactor retrieve() to allow us not to connect to the Internet. The act of retrieving the response from the site seems like a nice place to start. It seems like a logical unit of functionality that we can encapsulate to create a seam.
"WyBS: Refactored WyBS module into three packages: WyBS (Build System), WyFS (File System), WyCC (Compiler Collection).  This is ahead of the planned splitting of the Whiley Compiler into a plugin framework.  It's also to help me get my head around the design of the build system and what is and isn't needed to think about that."
"refactored methods to use already loaded locationProfile, findConnectedProfile was being called excessively, now it is called the minimum amount of times required and results in faster loading of data"
"moved required classes from W4T to RWT, refactored package names"
refactor
Refactored
refactored OutputInterface
Fleshed out a few more model classes and some codec/message refactoring.
MIFOS-5224 minor fixes and refactorization
added new search query for bean name; refactored and documented the other queries; refs #8
PyFormatStd changes: comments/ minor refactorings
refactoring
Use new transaction abstraction from ToHUtils. Some command refactoring.
continue to refactor for enabling type plugability
Just refactoring changes for choreography services (2)
Refactor document type to attachment type - deprecate old attachment type
"added aerodrome processing, with lots of refactoring"
ROO-2745: Post 1.2.0.M1 code refactor and clean up - consistent use of existing MD patterns
"Refactor NN, main loop is now nice and clean."
Refactored: multiple database tables
DATAREDIS-626 - Refactor RedisConnection implementations to Redis feature-specific interfaces.
Refactored the communication part
Refactored code and improve code quality based on Sonar
"[MRM-1327] refactor the repository API to make each concern clearer. Storage, resolver and metadata repository are separate interfaces. Rename methods on the resolver and the storage to be clearer of their intent"
DataManager refactoring
Refactored Restaurnat.state -> Organization.state
Work on refactoring
"Refactored Aggregated statistics stuff into separate modules, issue #93"
General refactorings.
Refactor and fix IdeFindListener
refactor new internal docs method naming.
Refactoring.
- Summary:Refactor BubbleSeriesAttributeComposite and SeriesYSheetImpl class to be more flexible to hide some controls in their sub classes      - Description of Issue: #59034
Refactor: Changing Fact to Event
Refactoring of 'ObjectCopy' functionality
Refactoring As2DateUtil
"- Fixed issue 465   https://jersey.dev.java.net/issues/show_bug.cgi?id=465   Refactored ResourceConfig; now its possible to use delimiters ';', ',' and ' '   (space) to separate class names in various init parameters like filters and   filter factories declaration, classpath, class and package names specification.   Intended consequence is that FilterFactory now uses ResourceConfig to get list   of filters/filter factories so its possible to programatically add filters   to ones defined in web.xml."
Complete refactoring into raven and raven-log4j modules
Refactor for clarity
finished basic version of the verbose reporter - mostly refactoring and cleanup
"authentication, acount manager refactor, chart - days bug"
Major refactoring of Andreas work. Sorry for this really large patch but it would have been even worse by steps.
"* Refactor StatefulInstanceManager and StatefulContainer to provide necessary hooks to plug-in clustering logic for SFSB. The main refactoring are done to StatefulInstanceManager where activation and passivation methods have been extracted so that cluster aware sub-classes can invoke activation and passivation logic at the appropriate time. * Improve the protocol between EJB clients and EJB servers: JNDI and EJB  requests carry a non collision free integer resulting from the ServerMetaData locations attached to EJB clients. Server-side, if the request is served by a ClusteredRPCContainer container, then this integer is campared with the integer resulting from the locations attached to the ClusteredRPCContainer container. If these integers differ, then the CRPCC locations are attached to the JNDI or EJB responses. Locations propagated back to the EJB client override the EJB client locations definition. * Support new substitution group element openejb-clustering-wadi which has been added to geronimo-openejb-2.0.xsd schema."
Refactor NSX api implementation (NiciraNvpApi)
Refactored tests.
Refactoring of HandEvaluatorTest; adding new rating tests; fixing bugs in HandEvaluator
Fixed a bug in the stream unmarshaller and did some minor refactoring here and there.
Refactored even more UI code out of ClientCore
Refactor to clearly delineate generated and custom code in case we need to re-generate due to database changes
Some more refactoring and added a first implementation for getCommittedTransaction( txId ).
Refactor so the servlet is in a more appropriate place.
Refactoring RepoContentConsumer into Known vs Invalid to aide in config/scanning
refactor MultiPolygon refactor Logging
This change is the first cut at refactoring the tests to better use the various page objects.
[Unit Tests] TreeModelViewerDragDropHandler refactor and Unit Test overkill
Corrected refactoring. Signed-off-by: Chris Sanders <zidane@outlook.com>
Refactored DVD parsing
Refactor blog module
FACES-1894 Add general utilities for Liferay Faces Alloy Components (refactored getModule() to getModules() that returns a string array and auto-destroy existing JS components)
MBM-66 Public can update their cart Refactored resources to be entity-centric Introduced new Authority entries
Added support for custom service configuration. Refactored xml schema.
MEDIUM / Refactored toolbox in FGE
"TEZ-1593: Refactor PipelinedSorter to remove all MMAP based ByteBuffer references (gopalv, rbalamohan)"
Refactored out LexElementSource from abstract parser.
refactor bundle wizard with abstract superclass to support both an upgrade and create wizard and have them reuse as much as possible
glayer refactoring
first working version after refactoring element queries from java to jquery
refactor of __insert_update statements
Refactor the BreakCommand as an NPC command.
"JCLOUDS-151 - CloudStack refactored to remove async, *Client renamed to *Api."
refactoring
Making rules selectable from projects Various refactoring and cleaning
Issue #281 Initial refactoring to use Dagger for Dependency Injection.
Testing Sql Mapper 0.1; refactoring clauses into their own package
continuing refactoring
minor refactoring.
refactoring nettoyage code
Refactored workflow engine to not parameterize on entity
Refactor DateTimeParserBucket to inner class to aid package comprehension
Major refactoring.
Refactored
Refactoring
refactored the promotion package structure
"Bug fixes, Refactor away from needing Plugin reference (for testing)"
refactored MethodProvider to use atem Methods
Update JavaDoc and refactor code.
commit before refactoring
MAGNOLIA-3620: refactoring: detail view is now preview 
refactor dependency report
JBRULES-914 Refactor shadow facts into core
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
Clean up Refactoring tests
Refactored featurestores. Separating SQL dialects.
Renamed some pipe and updated method names in FluentPipeline. General pretty refactoring for massive Gremlin refactoring.
Refactorings and documentation
Adds a test for the changes checked in previously by Paul. I've also refactored some string literals into enumeration members and I've documented the new XMLA driver properties that it introduces.
MiniMaven: refactor finding files in Fiji's directories
"Added checks to disable ""Accept"" button and movement buttons when they are not available. Refactored TextValidator to extract CompositeValidatorChecker. Related to issue 253"
continue refactoring - rewriting unit tests within CustomerBOIntegrationTest as mockito unit tests in ClientBoTest
Refactor unit tests for transaction and event
Major refactoring of review simulation structure
small refactor which will make it more convenient to add a Refresh button in the future.
"STS-2916, STS-2923 Fixed NPE for v2 URL validation, new CF java client, refactored space change handling for Server and Credential wizard for easier unit testing."
EPD-221: More work on tactical route refactoring
refactored to decrease getAllSurpassedThresholds() calls
"code refactoring, trash deleting"
Refactored Installations retrieval to work with roles
Added some javadocs. Refactored the name of some methods in Graph.
refactor
"ApiDiscoveryService: Move refactor, interface should be in plugins and not in cloud-api"
Added revoke. Introduced AuthException. Refactored refreshToken out of ApiConfig
Move inputrc constsants into ConsoleReader where they are used. Added Urls helper to avoid bleeding this into Configuration. Refactored Configuration back to a simple static helper. Added ability to change the configuration location with jline.configuration property. Added ability to expose the loaded properties. Added ability to reset the configuration. Logging when reset and loading properties. Added Preconditions helper. Fixed formatting for Log w/varargs. Add some basic configuration tests.
#POULPE-169 further refactoring for ZkSectionView
XWIKI-4534: Create a SyncService component to be used by SyncPlugin Also: * Refactored and cleaned the sync plugin classes a bit * Made SyncEngine a component * Added a filter to initialize the XWiki context. This filter is generic and could be moved to xwiki-core.
Refactored some tests.
Some refactoring for generation of tuple patterns
nfcip refactorings
Vishnu | #82 | Refactoring HttpClient
DDF-7 Refactored the security api/commons/impl packages since they were intricately linked. Added user attributes map/service. Added the expansion feature to the ddf-framework. Added the expansion feature to the security-core. Adjusted the location of the SecurityLogger in each of the java files. Updated expansion commands to check for empty maps and add the expansions command.
"AMC is now observable -> RateLimiter and Quota refresh their configs, etcdRegistryApiConfig publishes correctly now, AMC is now context shutdown aware, beginning of etcd classes refactorings, Request.Builder class contentype(...) added with test"
Refactored Poller into interface and implementation
Refactor code to check any method calls (with 0-1 args).
HBASE-18170 Refactor ReplicationSourceWALReaderThread
Refactor console appender test to test both sys out and sys err but only keeping testing sys out as new sys err tests fail.
refactored IDataProvider
Refactored code and added new Bolt.
refactor the SMPC implementation
XKMS: refactored interfaces names
PDT API refactoring: put internal classes under 'org.eclipse.php.internal.*' package.
Refactoring some methods to better support extensibility.
"Version Check code is refactored with phone home code. After hazelcast 3.x version check functionality is deprecated but class names,properties and urls were still containing `version check` related stuff. This pr refactors `VersionCheck` to `PhoneHome`"
"refactored code in the noted jobs to move function for building ui components to ECJobentry and ECLJobentryDialog, compiled and tested each UI within pentaho"
Manage Bindable Bundle + refactor to manage Equinox Aspects.
Refactored client extension
substantial refactor
NOJIRA Fixed some problems with the adapter refactor and message bundles.
Refactored current variables and methods to include unstable in their names.
"Refactoring of print method for better JSF compatability, Implementation of state saving for JSF"
Fix for @Name in strip() implementation on the VM (added some refactors)
refactor link-http-processer serviceunit to make the code easier understandable.
slightly refactoring the secret token authenticators
Refactor deletion detection
multi-level image refactoring
big refactor for Operations. lots of new tests. a couple bugs addressed.
"Move test classes and data to appropriate paths, refactor code so Tag doesn't include the tag's name."
test: refactor integration tests
REFACTORING: fix layout problems in orientation changes after removing FileDetailActivity
WYBS: minor refactoring
refactoring
minor refactoring/cleanup
MATH-795:  refactored unit tests for double RealVector.cosine(RealVector).
"General refactoring and logging improvements, removal of webservice for now"
"vishnu, gopal | #136 | Refactored fieldValue retrieval from FormValueElement into a separate method."
Drift SLSB Refactoring - DriftManagerBean -> JPADriftServerBean   - DriftManagerLocal -> JPADriftServerLocal   - DriftManagerRemote -> deleted - DriftServerBean -> DriftManagerBean   - DriftServerLocal -> DriftManagerLocal   - DriftServerRemote -> DriftManagerRemote - DriftServerPluginComponent -> JPADriftServerPluginComponent
refactored rave-core o.a.r.p.repository test classes into their proper impl package
Bugzilla Bug 129420 Refactor birt web viewer's code structure.
"1) Refactoring Profiler: replaced one static instance with per project/analysis profiler object. This allows to get precise profiler numbers if running multiple analyses in same VM or in parallel. This also fixes the issue for bug collection if it is written to xml with ""wrong"" numbers from static instance and not for the current analysis run."
Refactoring temporal primitive model to fix bug #301 (http://tracker.deegree.org/deegree-services/ticket/301)
little name refactor
Refactors the formatting responsibilities. Introduces ILayoutManager.
"Revert ""Revert ""Refactored attribute validation"""""
more JavaDoc after AuthenticationModule refactor
Major refactoring
HIVE-5163 : refactor org.apache.hadoop.mapred.HCatMapRedUtil (Eugene Koifman via Thejas Nair)
Refactored method names in IDocument to make them more descriptive of what they are.
Refactoring to allow easy creation of InputComponents
SONAR-5007 refactor DAO framework
refactored RemoteWmsLayerBuilder
Yet more config refactoring
Marble code refactoring...
refactor because of alternative class with the same name.
"refactored out a bundle api implemented using jersey instead of struts, and added bundleBuildName to validation and pushed to s3"
"Refactored ParallelizableJob: - Removed method writeJobResults(ZipOutputStream): replaced with ParallelizableJob.finish(). - Added interface Host to allow a ParallelizableJob to request the creation of files in its working directory. - Added method initialize(Host). - Added methods to AbstractParallelizableJob to delegate to the provided Host.  This will allow ParallelizableJobs to create and work with files at any time, rather than waiting until writeJobResults is called (good for jobs that would otherwise need to allocate a lot of memory to store internal state). - All ParallelizableJob methods modified to throw Exception (the class handling the job should deal with exceptions, not the job itself). - Added wrapper class JobExecutionWrapper to wrap exceptions thrown by a job in a JobExecutionException. - Modified JobServer and ParallelizableJobRunner to handle JobExecutionExceptions (the former will log the exception and cancel the job cleanly and the latter will throw a RuntimeException). - Modified existing ParallelizableJobs to conform to new interface."
linked mode type proposals for Extract Parameter + nice refactor
#JC-1184: * Refactored code according to code review
Some refactoring in Serialization class
Fixed a bug in Extract Function refactoring.
"refactoring, works with new paradigm but complete"
refactored code to make app compatible with Android ICS+ only
REfactored package structure
refactored test classes
Add VRenderEngine; refactoring
api refactoring
Refactor blockoutstream and update testing.
Invoke / Notify refactoring responses for client calls are sent back through callbacks
Refactor genericAllocationsByCriterion
Refactor transaction deposit and withdraw
Refactoring code for better organization.
Big refactoring
only refactoring
getVariants() refactoring DataManager.usePreemptiveAuth()
[PAXURL-63] Refactoring & zip/jar scanning
refactor android logger
Refactor Mockito snippets (#1616)
code refactored.
* Fixed for changes in commons (AbstractJongoRepository). * Working on admin console refactoring.
"FEND-563: First Pass for redesign article page to avoid full page loads upon switching tabs, still need refactoring"
Refactoring
Refactorin to allow testing with more syntaxes in the future
Refactored
gc:CreateMode/gc:EditMode refactoring
refactored artifactId names
refactor config to xmlconfig and added config interface to improve testability
"JobArgumentBean -> JsonJobArgument (nope cause it's not used only for json, done some refactoring instead)"
TreeOperator refactoring.
#NAME?
"Partial refactoring of dispatch SPI and impl to better support views. More to do! The dispatch SPI is insufficient to support views of resources as dispatchers are isolated from each other and are not aware of the HTTP methods supported on a resource. Further more the removal of the Views annotation requires dynamic view detection at runtime when runtime generated 4xx responses occur. This should trigger a lookup of a view, and if present should perform synchronized update of the resource class state with that view information. (Unfortunately it is not possible to scan all files in the classpath and detect views at configuration time. One advantage of the dynamic approach is views can be added at runtime.)"
Refactor spring-protobuf
"Refactor service alerts model to better support both SIRI-SX and GTFS-realtime, as well as fix some concurrency issues with the back-end data structures."
POULPE-88 SectionPresenterTest was refactored
more refactoring fixed npe in configuration retrieval
refactoring and some fixes
Update for new Components API and entity refactor. Signed-off-by: Chris Sanders <zidane@outlook.com>
#987 - Additional refactorings and helper methods for AdvancedCMS support
Minor refactor in history handler; move Connect widgets and supporting classes to new package.
"Refactoring/fixing up UG HMM code: a) Make code use PairHMM class instead of having duplicated code. That way UG and HaplotypeCaller now use same core code. Changes to be able to do this: 1. Compute context-dependent GOP as a function of read, not of haplotype, b) Extracted code to initialize HMM arrays into separate method, c) Move PairHMM class and unit test to public, d) Reenable banded code in PairHMM, inverted sense of flag (true=enable feature) but leave off in HaplotypeCaller."
Modified logic for GEB login Some minor refactoring
refactored SCP constructors
Refactorings - prepare to remove FoundCommandResult
"kie-wb-tests (mostly): Updates and refactorings, some of which are related to the kie-smoke-tests"
Refactor the servlet filter logic to more generic web processors. This ensures logic can be reused outside of just Servlets (like Portlets or setup via interceptors on a Spring HandlerMapping).
refactoring and some javadocs
refactor
Refactor calculation of stop orientation code to better reflect what we can actually detect from shape info and to allow override from GTFS data.
Refactored SingleThreadedActors
Refactor package from cc.co.dprima to com.dk
"Refactor XaLogicalLog to do read, apply and write entry in separate code sections."
massive refactoring: created new errai-config and errai-codegen-gwt package to resolve dependency cycles introduced by new ClassScanner system.
tests for TopicType presenter refactored
Refactoring with Spring Profile
refactor MultiTypeParameter
#NAME?
refactored spring java config for web module to config package
[AESH-245] refactored and corrected formatting.
TRUNK-5182: Refactored code within saveConcept and created new private methods listed below saveConcept in order of their calls. Did not remove code from saveConcept yet to avoid any bugs that would come along with an incorrect refactor. (#2225)
Refactor jaas login sequence to only fetch role data if user is authenticated according to that module.
Added parallel serializer test and refactored EdgeSerializer
Refactor the way we register transformers.
GTNPC-87 : Refactor unit tests to use Arquillian and remove legacy test bed
continue refactoring of clientCustAction - refactored updatePersonalInfo to move business knowlege from action class to service facade
"Moving classes around, stubbing out new classes for jetty-9 refactor"
"webadmin,userportal: PlaceManager refactoring"
Small tuning and name refactoring.
"some big refactoring, some change in the PermissionManager, gonna add PermissionPEX"
refactored analytics
refactoring onrefactored DBAppender and DBAppenderBase to remove all mentions of classic concepts from core module
Refactoring.
Refactor to add XML test.
"applied network options to maven pom, refactored activities to inherit from abstracts, nodelist works."
Fix NPE in RatioTabu + refactor lastCompletedStepScope creation into PhaseScope creation
TestNG listeners refactored
[92519] [refactoring] inline method - result does not compile
Refactored the bootstrapper to use a proper Model and inheritance/dependency chains so repositories defined in models are used for metadata too. Previously they got lost because of all the cloning.
refactoring of BrowserCache for serializing caches
#NAME?
Small refactor to indexes: now OPropertyIndex is an interface and OPropertyIndexMVRBTreeAbstract
refactoring
Refactored class Score to ScoreClassificationMap
DDF-1772 Remove references to org.apache.servicemix.bundles.lucene in offline-gazetteer and refactored spatial geocoding packages
[PLAT-3296] Refactor: rename ExternalSchemes.redCode() to markItRedCode()
Refactoring.?
Refactored Request object to extend DefaultDbSessionFuture to reduce object creation and consolodate functinoality.
Some refactoring - now have a single method to handle all predicates.
Refactoring: WeightedViolationsDecorator should use Settings API instead of deprecated Commons Configuration.
Added environment resolver and refactored property resolver.
Issue #61: refactoring EQ
"Refactor libraries, rename project"
Refactored the CandidateViewSelector to be more generic. Unfortunately at the cost of instroducing loads of warnings because not all references the a new generic type are updated yet.
MASSIVE refactor to get sip-creator off beans and annotation processor
"Separates refactoring base from utilities by Emanuel Graf, bug 232260."
optimized & refactored
core: Refactor call back of CloneSingleCinderDisk
"SOAPUI-1177 : started huge refactoring, still didn'r get through with it"
refactored maven IDs
refactoring converters
major refactoring of maven and javaee apis
[ANA-127] [ANA-128] Refactored discount bond pricing models.
[Refactoring] Move image parsing to its own package + added missing javadoc
refactored scope enforcement utilities to a separate authentication class
Refactored to remove references to deprecated method
Refactored Affix -> created an interface and an abstract class Created two Affix implementations:  - LiteralAffix.java that works with literals  - RegexAffix.java that works with regular expressions (and with literals as well) Created unit tests for Affix implementations Added TestNG and EasyMock dependencies to pom.xml
JBEHAVE-977:  Refactored ResourceUploader to use the Resource object as input to be aware of parent resources.
refactored memory storage into separate module and added uim:store command
minor refactoring
SP - refactor / adding utests on PR1538
Refactor settings (QIP)
Refactoring and cleanup
refactored and coverage at 86.5
"[ALLUXIO-1759] Refactor code in alluxio.security.{authentication, authorization}"
[PLAT-3281] Refactor: rename AbstractRepositoryConfigurationBean to AbstractFunctionConfigurationBean
Refactored loaders and savers to workspace resources
#320 Refactoring
"refactor vlunscand scheduler to enable replacement with quartz - phase 1 - joed, brozow"
Refactored Solr classes into more sensible package name.
Applying the latest chances from the VPC Refactor branch onto the new one.
Distributed: refactored components location + fixed sharding
[Archi4] Major changes to support connection->connection and other core refactoring
Refactor + Fix + Unit test on Cache Entry Improvement
Refactoring to clarify the test code.
"Refactoring inputs, the input registry and consuming classes"
some refactorings to use lambdas
MIFOS-4322: refactor loanServiceFacades for redo loan functioanlity.
ROO-2745: Post 1.2.0.M1 code refactor and clean up - cleanups
[CXF-4059] Better support for 2-leg flows plus various refactorings
"Cleaned up ""filter list"" code and other misc refactorings."
Refactor
TEIID-2006 adding support for a set payload statement and optional encryption of requests and refactoring to simplify xaresourceimpl
a big refactoring and API extension that facilitates the difference between binary and textual serialized IValues. See email on imp-dev
Change addressing of items in repo and refactoring
 Upgrading to Hazelcast 3.3.2 that includes many bug fixes.  QNode connections to DNode retrials are delayed in successive failures.  All properties in Splout config starting by hazelcast. are passed through Hazelcast as is.  Logs refactoring. Too many logs were produced before.  MySQL engine some changes
security classes refactoring
added a lot of javadoc and refactored the monitoring classes a little bit
refactor mailbox API for generic 2-way messages
"Issue #36, starting to refactor current help command."
Refactor the class OrderElementWithAdvanceMeasurementsDTO to be OrderElementWithAdvanceMeasurementsOrEndDateDTO.
Major refactoring
old OsiamUserService replaced by OsiamConnector and Grou and User create tests refactored
core: refactored 2 overgrown copy-pasted methods
* Refactored backend status fragment to not use ListViews. * Removed horizontal line drawables and repalced with Views. * Renamed backend status list item layouts to be more consistent
Refactored user management system.  Fixed a bug with adding users.
Preparing GraphPanelChart refactoring
use a ConfiguredDataStoreFactory to decide which DataStore to create (both at bootstrap and at normal fabric creation time); for now its hard coded though ;)
Refactor: BundleUtil refactored - old bundle-related code removed from FenixDispatchAction. Some comparator names simplified
"refactor to use ""Drivers"" (new name for SshSetup/SshStartStopHelper) and simplified class hierarchy stack for JBoss7, with older class hierarchy marked as Old or legacy but still working for other entities (at least, most of them...). unit tests and web integration tests passing."
"client refactoring, and javadocing"
"- refactored inspection of degree coordinators  - while searching for 'current' coordinators, must take into account:"
Added DaoWebAlarmRepository; refactored the AlarmFilters
Bus OTTO + Refactoring
Applied patch from bug 337787: [Refactoring]: remove singletons and static fields in RWT https://bugs.eclipse.org/bugs/show_bug.cgi?id=337787
refactor
[Refactoring] Reorganized the REST subsystem modules in a more consistent way
"introduce CGBuilderType enum, related refactorings"
"refactor to provide a common, generic submit request method"
Refactored FunctionResolver to new package
"added new actions, refactored serialization, added tests"
More refactoring
Fixed: WOComponent refactoring now works again. 
"Create ""doc"" package for classes related to in-memory document model. Move old implementations of doc classes out of util and json packages into doc package. Drop unnecessary and/or experimental methods from these classes. Refactor Whence interface to use new document abstractions."
"refactored to structure allowing bear both Selenium 1 and WebDriver extensions (ARQGRA-137, ARQGRA-140, ARQGRA-142)"
more refactoring
Refactor and rename Generators module.
Added type-awareness on hadoop output - text or sequence file by now - added one more hadoop test that shows how multiple group bys can be executed in a single map/red. This highlighted a bug in Optimizer that showed it wasn't behaving in a completely deterministic way - solved. Refactored a little bit.
refactor extract OLogSegment from ODiskWriteAheadLog
completely refactored support for running JUnit tests
Minor refactoring and bug fixes.
"JAC-42: refactoring ConstantPool infrastructure, Code attribute and Opcode/Instructions (bug seems to be fixed; still work in progress, though)"
Basic Order(Insert/Update) Functionality Hook up order flow with FoodEntry and Index Refactored Interceptors Fix issue of tests to run simultaneously  
Config file read/write locking refactor
refactor
small refactor to avoid duplicate code
Refactor GT06 protocol decoder
Refactored some zoo keeper cluster code
cells: Various performance related refactoring
refactor writing speed
OPENEJB-1981 basic refactoring of applicationcomposer to move it over testing package + marking annotations of application as deprecated in junit package + adding a testng listener
Refactor #992
OPENEJB-1799 small refactoring to be able to use auto import of sql file for datasources too
Refactor URLScanner & FileSystemURLHandler
refactored into maven project
Refactord allocine API to be a pure JSON api
#NAME?
"[SYNCOPE-259] * Service Cleanup (removed deprecated annotations, removed obsolete comments) * SchemaService refactoring to use new SchemaType instead of SchemaTO classes in method signature"
bug 259575 - XPath XML Element assistance and general cleanup and refactoring.
Refactor CLI internals for REPL shell
Issue 101: finalize refactoring of test suite to run Jersey and CXF
Test refactorations
Refactoring SecurityService and SecurityAspect
Refactor InvalidSlf4jMessageFormatRule
activitylog refactoring
"#970 massive refactor of sip-creator to work with FileSet which handles all files related to an input XML file, some things still broken like autocomplete"
Bug 434917 - Rename refactoring misses macro reference.
"JAXRS : minor refactoring of JSON providers, fixing the issue of generated WADL being handled by custom writers"
Refactoring for SVN 1.7-compatible version
"stress, refactoring"
refactorings
* big ruby type inference and mixin model refactoring * created extension point for contributing user TI engines
"XWIKI-5741: Add the ability to apply predefined custom styles * Also refactored CSS rules from RichTextArea.css that were using the XWiki-specific "".main"" class."
refactoring the findHand method
refactored uibinder support into its own standalone module
"https://issues.jboss.org/browse/JBIDE-11053	: skinned browsersim should provide a way to rotate phone ""on"" the skin -code refactoring"
Refactored createContents and added DialogArea for backwards compatibility
#NAME?
Refactor IDE listeners and related APIs
"[DEL] XQuery: datetime/current module removed [ADD] XQuery: prof:current-ms(), prof-current-ns() added [MOD] Minor refactorings of date operations"
Class refactoring
Refactor chart UI: allow multiple customized chart types support in extension point
InverseJoinColumnRelationProperties name refactoring and prepared the PropertyDefinition's builder for it.
Refactoring to remove duplication in Xml Util classes.
"Refactored node and client extensions, added javadoc."
Refactored core module to isolate calls to the system environment variables
massive matching refactor2
engine: Refactor CommonNetworkValidation
"separate PDF from templates, refactored email sender"
"Small refactor: extract, pull up, rename some methods"
"Moved some test code from test to demo, refactored the tests"
[MSC-21] Refactor AbstractDependency and AbstractDependent.
Refactoring to simplify code for type / mixin matching
Refactor out bucket code
Refactored ...bootstrap.Main.
Validator error refactor
Refactoring to tidy up resolving and combine object factory and manager - III
"refactorings, splitting up tests, added ear packaging"
Refactor api.
"Refactored: renamed plugin integration tests, use project.version instead of the deprecated pom.version"
Refactor MemberImpl usage
Refactored packages for TypeContext and PropertyContext
Intermediate commit while refactoring the diskstorage package - does not yet build
Refactored text formation to Util class.
Even more refactoring
big ol refactoring - moved to sqliteprovider with database marshalling and restoring
Refactor build methods to maven.
refactoring.
Finished sec-pol refactoring.
Have something working from the refactoring.
Refactor visitors.
refactor Navigation extract writeMenuItemContent
Moved CDI Refactoring test project resources to jbt package.
"refactoring of GenericRProcess: split up to several functional files, start reducing calls to R_Config.getInstance()"
Refactor main switch into separate methods
#NAME?
refactoring to fit new probabilistic lemmatizer
minor refactoring
"BAQ calculation refactoring in the GATK.  Single -baq argument can be NONE, CALCULATE_AS_NECESSARY, and RECALCULATE.  Walkers can control bia the @BAQMode annotation how the BAQ calculation is applied.  Can either be as a tag, by overwriting the qualities scores, or by only returning the baq-capped qualities scores.  Additionally, walkers can be set up to have the BAQ applied to the incoming reads (ON_INPUT, the default), to output reads (ON_OUTPUT), or HANDLED_BY_WALKER, which means that calling into the BAQ system is the responsibility of the individual walker.  "
[DSU] gtfs refactor
update and refactor perspective descriptor schema and update core and sample perspectives to conform to updated schema; create and implement activator API used for applying activators to extensions
- Refactor: AbstractFormControl - isBound() to hasBindingExpression() to clarify method result - BugFix: Range - Ticket #36 - start/end values are used again. 
"db creation refactoring, loading remote list"
Refactor package to follow the module name
made some refactors.
Refactoring Link and Route data structures in the RoutingImpl.
Page objects usage refactored - AbstractWebDriverTest is no longer generic
* Extended SSLSocketFactory with a mechanism to bypass the standard cert trust check (primarily to simplify dealing with self-signed certs) * Refactored local test server  * Added more SSL tests 
refactor argument-editing in Testclient
"refactored to use tycho, giving it feature and updatesites plus comply with various eclipse conventions. Still uses local imp mirror"
"Allow filtering on learned constraints in SECheck#flow, minor refactorings"
"Drop ShellContext, has no purpose anymore now that Shell has IO and Variables exposed.  Still need a Thread context so refactored ShellContextHolder to ShellHolder"
Refactor code
clean up and refactoring of the extension activity module. base class for asynchronous extension activities added.
test refactoring
refactoring of instance role policies
refactoring..
http.io package refactoring
[NEW TYPE INFERENCE] Refactor: Move more built-in types into JSTypes
refactored latest facet to handle different types of value field
XWIKI-3205: Non inline MacroMarker is not rendered properly * refactored verbatim the same way it's done for macros with a isInline boolean instead of two different classes/events
SIF has been completely refactored.Below a list of all changes :
"refactor HD info getter, now using a more reliable and cross platform way to deal with it"
A bit of refactoring and renaming as I continue to trace thru the DFA subsystem
#1710 minor refactor of package name and fixed the substitution of the environment variables so we can properly installand initialise jolokia in the generated docker container image
"Refactor to rename all ""cliniical alerts"" functionality to ""patient flags"". Only thing not yet updated is .ke-alerttag class in KenyaUI"
"refactor the plugin container/manager API so we can load, unload individually"
#113 refactor and fixes missing value in post
Refactor EntityImporter interface.
Issue 120: Refactoring
"refactoring data-manager API into a utilties class with the new underlying Atlas RelationshipGraph / RelationshipGraphFactory API. Shift to passing RelationshipGraph instances around, and remove some obsolete APIs that were scar tissue from ealier attempts from a time when we didn't understand how to interact with the graph DB as well as we do now."
"Refactored: renamed StubByteBufferSequence to FixedByteBufferSequence, tested it"
refactor IDM xml configuration into config module and move IDM tests into idm/tests
"Further refactoring of XPath/Jaxen code to account for DocumentNavigators which may be LanguageVersion specific.  This is in preparation for adding XML as a Language, but using standard Java parsers and object model, instead of rolling our own custom JavaCC grammar for XML."
* extended ObjectFactory.createProxy to check beanCass if it has a default constructor if it is a concrete class * optimized tests * refactored provider package in order to make the provider interface public soon * renamed hasZeroParameterConstructor to hasDefaultConstructor because this is a more common term * fixed a bug in the introspector bug workaround which let to a PropertyDescriptor with an getter and an setter both bridged and of the bridged type e.g. object for unbound generics
"[calls] cleanups, minor refactorings"
"Finish updating indicators, refactorings"
Refactored code... split CommandPreprocessListener and PlayerListener to their own source files. :p
Small refactor and adding Finger Prints
"Major refactoring to the AMQP modules. (Safety enhancements, double buffering for appenders, plus other minor updates)."
"refactoring geral nos testes , limpeza"
"refactored network, container and shardlet"
"Refactored CustomArrowEffect to ArrowEffect, added TimedArrowEffect"
ISIS-760: refactor where Commands get persisted.
Finished services refactoring. Continuing with controller refactoring...
Refactor tests grouping similar together to reduce line number
Refactored RemoteSuiteLauncherTest
refactor
"Moved Filter management components to new 'mgt' package to cleanly distinguish between frequently-accessed end-user filter support classes and those for framework development.  Refactored IniWebConfiguration to use the new components, utilizing a cleaner 'composition over inheritance' implementation strategy.   Cleaned up various JavaDoc."
refactoring IndexationService#indexate (checkstyle flags method is too long)
Refactored actor tests
Refactor ZoneOffsetTransition to remove use of OffsetDateTime
BSM-186: Refactor the map and reduce function rest API to automatically detect new defined functions and add meta description to the functions
WyIL: doing some refactoring.
"RHQ-1050  Work in progress, add resource group metric tables (Monitor+ -> tables subtab).  Added common tables.xhtml and MetricsTableUIBean to support the various entity contexts.  Refactored resource metric tables to use the new setup.  Still need to clean up and get metric comparison in place."
StoryTest and UnitTest refactoring.
refactor package of IT test EnvironmentVariablesIT in surefire
Refactoring packages
Refactored
Refactored http connection to handle backoff on all apartment providers
ACT-104: first cut of refactoring query API
"Finished initial Memory/Properties Realm refactoring, renamed PropertiesFileRealm to PropertiesRealm to reflect that not just file-based operations are supported (i.e. any Properties object from any source is supported)"
SB-68: Extract the common web resources into a module - Refactored the *-testing-* modules. - Added a module just for the web resources.
Refactored code to implement pattern layout logging as an appender that extends the default LoggingEvent style appender. Also added tests demonstrating support of sub-documents and arrays as values.
[ISPN-173] (Build memcached server module) Refactored class name and removed old class.
"RF-10712 Refactoring Listeners classes, methods and Event names according to standard JSF convention. [WAS processUpload vs. processFileUpload - naming conventions] - reviewed by Gleb Galkin"
Moving FpGrowthJob to core and renamed as FPGrowthDriver and some other refactor
Refactored many tests to Spock
refactor putAll to avoid change of endian of source Attributes
Refactor management related classes into a new management package.
ACT-104: first cut of refactoring query API
refactoring the Cv temlate controller
refactoring towards similar pattern of artifact metadata
"refactor, nodepicker fixes, prototype plugin fixes"
Refactor reloading to be implementation-abstract
refactor + tree feature
"refactored the code for modularity, added folder batch processing. "
Major refactoring of the plugin
Refactoring nettool code
"Gideon :Refactoring Fuzzy Matching / Soft Syntactic Constraint Decoding code. Replaced construction with NonterminalMatcher as interface with NonterminalMatcherFactory.java as class providing implementations, with a simpler construction with NonterminalMatcher as abstract method with different implementations for the method"
"More refactoring, renaming, examples feature removed. Need to figure out how to build an examples feature with maven :("
Merge the DAO refactor branch
refactoring...
IO Redirects complete. Refactor of Shell/Parser. Input file accepted as script
Refactor name of SesstionStore than supports cache of data.
"get rid of spaces in view IDs, and use camelCase instead; add more view ID constants; misc minor refactoring"
core: CommandsBase: refactor task creation
refactoring orçamento é um levantamento
refactor
Large refactoring involving interface and domain-level changes
RFPL-1676: structure refactoring and tests for a4j:log
Refactored functional tests to JUnit 4 and JenkinsRule.
Major naming refactor
"Make Model<M> an interface and move common implementations into AbstractModel<M>. TODO * during refactoring, at many places, AbstractModel<M> is used now   where Model<M> should be. * InvertibleModel<M> is still there but should not be required any more,   to be removed. * not tested a single time"
[LOG4J2-1934] JMS Appender does not know how to recover from a broken connection. Refactor JMS Appender tests for Apache ActiveMQ and add new tests that demonstrate the issue. Failing tests are annotated with @Ignore.
"Instead of using a NativeClosureFactory directly as a ToNativeConverter, delegate to it."
Feature #2829. Add the get of users by their name (first and last name). This feature is contextual to the current selected group. A first implementation was built on the search among the indexed users (by using the Silverpeas Search and Index API) but it is replaced by a direct search in the database because later is more performent. The indexation of the users and the groups should be refactored by using for example the Hibernate Search (better way to index and to search with Lucene data stored in databases)
Added final components and final refactor
"refactor the crosstab model update mechanism, more logic can be overwriten by API caller."
"Bit more work on Interactive Sprites. Refactored Sprite managers into three classes - one to handle the list of available sprites, one to handle collisions and movement and one to handle rendering calls."
"Refactor activity listener core, propose some TODOs"
added extension point to enable external code completion providers some packages refactored.
serf specific refactoring in DAVRepository
refactored. postgre-sql driver added. begin to migrate to database storage.
refactor GraphDb to UMLG and add tmp variable to umlg.env.properties
refactoring
Added backward/forward navigation. Refactoring out action settings from the view. Cleanup in image handling.
Overenthusiastic refactoring
added methods and refactorings
"Refactoring pst.TypeInfo for memory performance.  see parser.changelog this is a small step toward a faster parser (see bugs 59468, 54040, 60902, et al)"
Refactors out test assertions
Refactored: extracted StringEncoding from SuiteListenerEncoding
Refactored and removed EncryptedKey and Wallet
JBIDE-20903: Refactoring. Specific names for plugin activators. Adding some Javadocs
Refactor owner handling
page-fragments: choice pickers refactoring
"NOJIRA Refactoring Report View. Removed the seperate view for viewing all essays and combined it with the regular view. Minus ~200 lines of code.  Still some work to do, since we're still gathering the requirements for different options for viewing."
refactor of Runtime to RuntimeEngine
"CSPACE-245,CSPACE-327: Internal refactoring, additional tests."
SessionHDIV refactor
refactor for centralize the cluster selection logic
Refactoring in preparation for open source release
Refactored WindowClickMessageHandler
EPE-124 Refactor ESP Helpers out of Eclipse Plugin
Just some small refactoring
Refactor of SubscriptionManager and Sensor interfaces
Added custom xml schema support for HttpServer Spring config Refactored Server interface Added autostart of HttpServer
Big refactoring of how Property works. Significant progress on reloading of partials.
"new jsonentity property showEmptyValueAsString, refactoring of JSONBinder to support different strategies to write empty value for a property"
refactor tests
refactor gtfs
62876: Extract constant should suggest name in more cases [refactoring]
ROO-2009: Refactor DBRE DatabaseIntrospector schema introspection into separate class
commands refactor
"Mostly Refactoring and renaming, discarded few redudant clasess"
refactor
Refactor HashedMap and LinkedMap into Abstract superclasses Adjust subclasses appropriately
refactored tests
refactoring    uriinfo - pathinfo   baseuri - serviceroot
Refactor the CorpusReader interface to simply return iterators rather than be iterators.  Also include support for returning specific Document types.
Refactor primitive classes into primitive package
domain refactoring
part 2 of the context to evalGroupId refactoring
"Refactored ""GAE Unit""."
"Added theses to page, Refactoring code"
refactored a bit
"Refactoring: Created factory classes for all of the analyzers so that all use of reflection could be removed from AnalyzerGuru. This gives better compile-time error checking of the code, and it also makes it easier to navigate the source with tools like ""Find Usages"" in NetBeans."
Lots of refactoring of class names and new packages
"Implemented new methods sendSMSAsync, queryDeliveryStatusAsync, getInboundMessagesAsync, getDeliveryReportsAsync, queryHLRAsync - Code refactoring"
refactoring
refactor term IO in a single class
Code refactoring.
"Refactor management of activated, deactivated, and default-activated profile ids, so the context tracks all of that stuff."
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
#NAME?
refactor to put conversion transfer logic into Unit enum
model refactoring; offer models
Refactor to avoid dependency issues
Refactoring to an interface in the hopes of solving of CXF problems.
"Lag detection in seperate thread, bugfix for blockbreak direction check and code refactoring to reduce complexity"
Some minor refactorings
code refactory
"fixes #3932 and a minor refactor to share more code across maven plugins to make it more consistent in the handling of namespaces, routes and controller modes"
Refactored UserService
"Code formatting applied, package structure reorganized and some major refactorings."
ACT-1952: Refactor process definition validation + allow to plugin in custom validation
Refactoring and documentation
Refactor Hadoop API Related.
refactor
restapi: refactored QoSMapper
Refactor configuration system (again) to allow for SQL-based configuration files.
PORTAL-3137 Refactor infinity scroll implementation
some refactoring of the UAA plugin
a bit refactored
refactor to be cleaner
refactored to move appropriate packages out of api project and into omod project and vice versa
#12: Prioritize mojo properties over service environment. #9: General CI service setup and refactored ServiceSetup interface.
Code refactoring.
Minor refactoring/reformatting.
"Refactor execution listeners executed on transaction lifecycle event to use TransactionContext and TransactionListener, which makes it work in Spring and JTA."
[SYNCOPE-172][SYNCOPE-173] Role synchronization from external resources in place - needs more test and probably some cleaning + refactoring
Refactoring step 1: oshi.jna.platform packages
MDS-58 refactor package org.datacite.mds.web
Did some refactoring for #106 (Observe iwsn configuration and (re)start/stop TestbedApplication instances on change)
refactor address serializer
refactor some code
Refactored back to MultiBitInExecutableJar and MultiBit
refactor search loop
refactoring: HybridKB clean
Refactored FileBasedStateRepository and ReloadablePropertiesFile to use a new PropertySource to allow for other property-based repositories other than files.
Copying changes from old SVn branch for multi-protocol refactor.
New cape system and refactored spout appearances.
Backup tool now checks if target of incremental is older version and backs up and does full backup if needed. Refactored some functionality into exitAbnormally in BackupTool
Refactored
JBEHAVE-332: Refactored NumberConverter to use NumberFormat for parsing.
"Refactor Type Resolution from pmd.typeresolution into pmd.lang.java.typeresolution, as TR is currently Java only."
refactor tests package
Refactored WADL methods. Make clear the dependency on JAXB. Support WADL representation for HTTP OPTIONS response.
Texture Refactor
Minor refactor
Controls demo refactored
refactor
"cleaning up additional unused things, refactoring"
"refactoring validate if path is empty (""C:"" is empty path)"
command-line refactoring
Harvindexer! Massive refactor to remove legacy code.
+ UTS Integration refactoring: UTS records returned by depot; buses that never sent data to CIS but should be according to UTS are now displayed.  + login default redirect to /admin fix
com.xeiam ==> org.knowm refactor (2)
metamer: a4jQueue and a4jAttachQueue tests refactored
Refactor events so pre and post more separated
Refactored featurestores. First steps to separate SQL dialects.
refactor
refactoring
Refactored NamedSearchFilter to NamedSearchFilterGroup
Suport to @UnderTest annotation (issues #10). Still needs a refactoring.
"Modified/simplified discovery view creation.  Added org.eclipse.ecf.ui.views.DiscoveryView subclass, and refactored initialization code for discovery startup UI.  Removed automatic startup of server and discovery."
refactoring :P
refactor: transitioning FileTask to generic BufferedTask
minor refactoring
Some refactoring and adding backup gc
refactoring of interop framework
Refactored CacheDownload
refactor some code
core: API - refactor move HTTP and HttpStatus to their own package [BREAKING]
Refactorization of method getMatchedRoles
Use C* as a blob storage for small emails. Major refactoring of blob storage. fixed #32
MIFOS-3193: refactor struts business logic into servide facade in prep for moving to spring mvc and freemarker
Refactoring into modules
A bit of refactoring before integrating the whole plugin in the beans.ui plugin. This will simplify the problems of cyclic dependencies. Another solution would be to pull up in core.ui the common classes.
Refactoring HttpUrlEncoder
Refactored Summary Entity. Refactored Contract Entity. Created Contract SubClasses (EmployeeWorkingContract & EmployeeMailingContract)
JBRULES-2209 Refactor Commands to mirror drools-api
"Generic Container refactoring! Decoupled from RDF types, now uses sioc:has_container/sioc:has_space"
handle case where scheduled Quartz job has an invalid job class by deleting the job; general refactor/cleanup of job scheduling code
* move AbstractOpeneEngSB mojo into another package * required parameter for Release Mojo * refactor Tests
"more refactoring on the generator - much neater, easier to read, and with less pointless passing around of variables"
refactored package structure for clarity
Refactored JolokiaServer Config so that it can it be used directly. This fixes also a small issue with the SpringJolokiaAgent (which didn't know about the bootAmx stuff) Related to #87
" ODE-805, jpa refactoring for bpel and store module. * ODE-711, Upgrade hibernate version into 3.3.2.GA. (note, it passed maven build, with 2 test cases @Ignore for now, which I am looking into it, also will try to fix the buildr build later)"
api_refactor: refactor disk api (only user)
huge refactor of LinkedMode support
"JBPM-4387, GUVNOR-2106: kie-remote module refactorings for guvnor and the droolsjbpm-integration repository"
refactoring of layer options (formerly rendering options)
Http Invoker refactoring
"Major refactoring of shards.  No longer uses interfaces but is now an actual object hierarchy with most of the important and common functionality pushed up to base classes.  Eliminated a lot of duplicated code, and the shards are much more understandable now.  Also now require a GenomeLocParser to work with their own GenomeLocs."
Refactor object writing responsiblities to ObjectDatabase
small refactoring to be able to manage http provisioning in a single class TOMEE-173: Application Provisioning via Maven Repositories
[Misc] Refactoring
Refactor SurveillendService to use SimpleWebTable only and to prepare for load strategies
"BISERVER-5683 - refactored GwtModelerWorkspaceHelper and ModelerWorkspaceHelper to not implement their auto-model methods, just inherit from BaseModelerWorkspaceHelper."
Refactoring: Move Util Classes into utils package
Tidied up and refactored yesterday's work.
refactoring
Major refactorings and test case
serialization code refactoring
refactored ffmpeg into custom module
JBRULES-3664 BeliefSystem Should keep each logically asserted object -Now keeps track of all logically inserted objects in the BeliefSet -Big refactor and cleanup of logical insertions -TMS per EntryPoint. -Better consistency
refactor and added admin resource
SB-621: JAAS cleanup refactoring
API refactoring for java2ruby simple parser New plugin tests (payment/notification): - Allow calls from java2ruby - Allow ruby to receive ExtBusEvent - Allow ruby tomake (java) killbill APIs calls both from API call abd event context
Refactoring the test
Improved enablement of refactoring actions
"Refactor CveDB - make class thread-safe and declare so (also DatabaseProperties) - prepared statements represented by enum: performance gain, eases experiments when tuning for performance - minor changes/cleanup/code style"
"Merged IBM Patch for Run On Server fix for module URL navigation. Fixed bug where two deployment wizards are opening when running Run On Server. Refactored publishing mechanism such that now all publishing of apps is done via the CFServerBehaviour publish method, rather than the server's modifyModule(..). Modified IBM patch accordingly. Created a separate publish app operation that extends the start operation such that app create and prompting for deployment information only occurs during publish, not start."
MN-558 - strip html to form question description ... MN-557 - no more trailing slashes in mneme docs folder descriptions ... MN-198 - gather the embedded media to copy and reference when importing ... no more copy text added to titles ... samigo import refactored slightly
Refactored the ZooClient into a shared AbstractZooKeeperManager and also implemented the ClusterManager with all the wanted methods for getting master and connected/disconnected slaves.
"Refactor the TCPSniffer proxy support for ""once and only once""."
webadmin: StorageListModel: refactoring storage prepare for edit.
Refactor split the account controller into to parts (actual controller and command processor for user related commands)
"Exception on variables, ""add comments"" style, refactorings."
Refactoring of topology class
Refactor translation classes into one package
HSEARCH-176 support defaut in the lucene properties. Refactor the proeprty support and fix various bugs (Sanne Grinovero)
Refactored: extracted NullRunVisitor and NullSuiteListener
"Created CompactAlignmentToTranscriptsCountMode to process a transcript alignment and perform a differential expression analysis. Other classes changed in order to accomodate this change. More specifically, I  1. Moved the code for processing a transcript alignment from CompactAlignmentToCountsMode 2. Refactored methods for normalization and moved them from CompactAlignmentToAnnotationCountsMode to the DifferentialExpressionAnalysis class"
Refactorings for bug 342302: Move AdapterFactory into application scope
"MICA-12 : Removed method setConclusion in Mica, refactoring, fixed some bugs.  Applied similar changes to marble."
Refactored
"BREAKING CHANGE: Refactored the knowledge of this being a query to a post 1.1 couch into the LuceneAwareCouchDbConnector.  It doesn't make sense, for the uri builder, to be part of the query itself.  The tests now require testadmin/testpass to be a valid admin"
Refactored template creation and configuration  extended parsing to enable arbitrary strings as attribute values  added backward attribute
refactoring...
refactored & simplified client API
#NAME?
Refactoring. Fixes
refactory
refactoring of builtarget and applicationbuilt applicationbuilt concurency issue left to EntityManager.merge(requires tests) applicationbuilt concurency issue led to some interface changes on ApplicationService and repository hashcode & equals impls
Some code refactoring
refactoring
Refactored all helper methods in math library to MathHelper (as I discussed with @RoyAwesome).
More symbol table refactoring; some duplicated code went away
Delivery part code refactoring: DeliveryCommonSbb
Refactored BF1942 & ETQW scraper cli to match newer scrapers.
Refactored: moved Entity interface to internal api package
refactor DecoratedInvoker
partial refactor of authentication api for openid
"LOG4J2-1343 refactored RollingRandomAccessFileManager to reuse the garbage-free Layout mechanism defined in the superclass, simplified logic when bytes to write exceed buffer size, take unwritten buffered bytes into account when deciding when to roll over"
minor refactorings
"add more useful debug output, refactor static classes into their own files"
refactor(engine-rest): change signature of GET variable-instance
refactored to use MapWithZeroDefault
Refactor TwitterClientFrame
refactor to io.higgs namespace bought domain name higgs.io - refactor to reflect and shift ownership from com.fillta
Refactored.
Cleaned up refactoring history control implementation
Refactor the way event recorder are created:
1) Refactor some gtfs transformation code 2) Rename DateFieldMappingFactory to ServiceDateFieldMappingFactory and introduce a proper DateFieldMappingFactory for general date field mapping
bug 153642 - Refactor out templates into a separate plugin(s)
"SOC-2041 | Implement Social REST APIs (v1-alpha2): fix bug, refactor"
refactored the interfaces for all the classes out into api bundle
Refactored chain reduce code
Refactored HttpCacheEntry / Resource API: HttpCacheEntry is no longer abstract; the same class can be used with any Resource implementations
Refactoring around group notion. Improve tabbable
refactor design
More simplification and refactoring of common code in common.collect. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43236585
Big general refactor on NodePoolManager
refactoring / cleanup
- Summary: refactor the DialLabelSheet class to allow the customization in its sub classes(#57716)
minor refactoring
Refactor the name of both the directories and the artifact ids of the SilverCrawler project and of its subprojects
Major refactoring of type conversion for DB parameters. Expect bugs!
"Quick fix tests, first commit. The tests are still disabled. Refactored the test class hierarchy, included some examples. The abstract test classes still need to be renamed."
"[CXF-4112] Various updates to make the initial code flow starting to work, a lot of refactoring to follow"
"Refactor name from ""rebuild index"" to ""reindex"""
Moved example and benchmark to test folders. Refactored a bit. Added CLQueue.flush() Added some missing javadoc
major refactoring
SecurityManager implementation hierarchy refactoring for cleaner separation of logic
[72331] [1.5][Generalize Type Refactoring] Prevent refactoring of formal generic type parameters
Refactored the package name for the endpoint discovery view model package.  The reason for this is to allow others to create/use/extend the endpoint discovery model for their own/new views.
Refactoring + Guice & JMX
Refactoring of Trends and WorkloadTaskDetailsTreeViewModel
Refactored byte buffered channel manager
(1) LayerDisplay is not used anymore (2) ProductSceneView refactorings
Misc cleanup/refactoring
Lots of refactoring of tests to make it easier to write them and avoid too much mocking.
Code refactoring.
Refactor+fix yaml entitySpec parsing
"Misc cleanups, refactoring for sponge, and writing sponge"
Refactor party/team as world/entity component
refactoring extract methods
Refactored the meta class generating feature.
refactored Scroll actions to use single rest endpoint
Minor refactoring.
The test class has to prepare the scheduler because tests involve group ops jobs.  Some other refactoring but the scheduler is the key here.
ACCUMULO-391 Performing refactor to the legacy mapred InputFormatBase
SHRINKRES-230 refactoring and changed a test case to test the issue
"ASNN-492 http://bugs.sakaiproject.org/jira/browse/ASNN-492 Refactor permission logic to better handle users without ""grade all"""
Minor refactoring.
model base type and package refactoring
raw/generic refactor for issue #270 - CryptoTrade
"A significant refactoring of the ROD system, done largely to simplify the process of streaming/piping VCFs into the GATK.  Notable changes: - Public interface to RMDTrackBuilder is greatly simplified; users can use it only to build    RMDTracks and lookup codecs. - RODDataSource and RMDTrack are no longer functionally at the same level; RODDataSources now   manage RMDTracks on behalf of the GATK, and the only direct consumers of the RMDTrack class   are the walkers that feel the need to access the ROD system directly.  (We need to stamp out   this access pattern. A few minor warts were introduced as part of this process, labeled with TODOs.  These'll be fixed as part of the VCF streaming project."
"Bugs, refactorings, tests."
code refactoring step 1
Refactoring the Bayesian empirical quality estimates to be in a single unit-testable function.
will need to refactor line into a filestudentfactory
"refactored chatresponse, added spring framework support"
Refactor Conformation module to AuthorityConformationModule and PredicateConformationModule + add evaluation Class to Spec learner
#NAME?
core: refactor ProcessDownVmCommand
file io refactoring
... more refactoring
"JBRULES-3076 - refactored the <drools:eventListener into separate tags <drools:agendaEventListener, <drools:workingMemoryEventListener and <drools:processEventListener."
https://jira.jboss.org/jira/browse/JBIDE-6276 - preview for JSF 2 refactoring was created. SWTBot tests were added.
Survey Plugin Improvement - managing of resource referencies and Code refactoring
r:panelMenu refactoring
refactoring and config cleanup cont'd
#13: Dry run support and some refactoring.
Refactored UserService and LogBookService. Documented service interfaces. Introduced DTO for User and LogBook. Added a basic service exception hierarchy.
Minor API improvements and refactoring.
Do not use raw types; move sun xml serializer access to single class to be refactored
Refactoring.
SGF-673 - Refactor API names used in the Annotation config and GemFire Mock Objects support.
- refactored EditorWindow and deleted EditorGUI (absorbed by EditorWindow) - now detect ANTLR 2.x grammars - display message if syntax diagram cannot be displayed
refactored PersistenceSupportFactory package name
Refactored bean names
Refactored home view to move message logic into testable code
Refactored
refactored packages
EST-338: Add effective date to invoice item; refactored invoice creation and moved that from lease term to invoice calculation service and repositories
ACT-741 refactoring persistence: refactoring RuuntimeSession into ExecutionManager and JobManager
Refactor package names.
[SSM-216] Refactored HTS lookup to be done at the curve node level rather than curve spec. This is due to the fact that the decision to lookup an HTS for a curve node is driven by the type of curve node being bootstrapped on the curve. See [PLAT-6332] for further details.
- SecondCycle individual candidacy: allow create candidacy even if person already has registration for candidacy degree (this used to insert previous candidacies) - Refactored getRegistration for Degree and DegreeCurricularPlan from Student to return List<Registration>
Fix task quries tests after the refactoring
Refactoring of com.idega.business.IWEventListener to com.idega.event.IWPageEventListener and GenericState and IWFrameBusiness classes from com.idega.business to com.idega.event
refactor
Several refactorings and code improvements.
Refactored: extracted Maven and JAR helpers from BuildTest
Refactor JDK externalizers into wildfly-clustering-marshalling-spi.
Job executor refactoring
Refactor
#57 refactor entities
refactoring vrsr->requestinfo
UIInputContainer refactoring.
SB-617: Heavy refactoring of the strongbox-storage-* modules (Phase 2) ---------------------------------------------------------------------- SB-741: Upgrade to OrientDB >= 2.2.18
move DiscoveryConfigFactory to dao package and refactor config diving out of discovery and into DiscoveryConfig
refactoring the methods names and class
Refactored job classes into jobs package.
some refactory on abstractdemo and demo classes
refactor reporter
Various refactorings and fixes
jetty-9 more HttpChannel refactoring
#821: refactored test classes into test project
bug fix and further refactoring of search of service requests
"refactor, making graphelement implement FriendlyResource"
refactored win method
Refactor the configuration stuff out of Persistit into a new Configuration class.
[BLC-634] Refactor merge cart
Refactor URLBuilder -> Dispatch and remove setParameter methods on it to consider it unmodifiable
Refactored connection pools and type providers to enable dynamic connection pool creation.
"JBRULES-795 Refactor IntegrationCases into a number of other categorised classes -refactored IntegrationCases into TruthMaintenanceTest, DslTest, DynamicRulesTest,   ExecutionFlowControlTest, FirstOrderLogicTest and MiscTest"
#NAME?
Refactored for PTGen
#POULPE-383 Refactoring of the mail validator and unit tests to be more readable.
"[NTI] Massive refactoring to remove static fields from newtypes classes, move them to JSTypes, and pass around the JSTypes instance as needed."
Refactor Client callback
"Javadoc, Fixing Title, Refactoring"
Finished renaming of parameters/variables affected by MoveInfo->Move renaming refactoring
Refactor ResolverProvider. This interface is moved to annis-libgui and the implementation is seperated from ResultPanel.
project refactoring
[PLAT-5023] Updated XML format to use multiline xml writer; refactored ZipFileRegressionIO to have read and write modes.
Refactored CQLStatementIterator implementations
Refactoring OptionDefinitions.
refactoring: separate BEannotation Loader and Annotator
refactor and rebrand
added custom graph to track ride types refactored code
"FIXED - bug 245089: Enhancement: ""Refactor"" -> ""Implement Method ..."" should work for multiple methods https://bugs.eclipse.org/bugs/show_bug.cgi?id=245089"
refactoring of DefaultProvisionSource
Refactored server connection code into separate class Added stub for open dialog
Refactoring so that the intelligent agent is able to explain its decisions.
refactor components and removed unused project files
Refactored repository to accommodate Maven directory structure.
api_refactor: move storagepool api to admin pkg
Refactored some read only methods into own class.
#NAME?
Refactor: WARNING - FenixEDU is all about domain richness! All domain logic should be where it belongs. Moved Employee's department management to the corresponding domain class
refactored out opening of URI or Files for test documents into a predefined catalogue
Refactored flightbooking sample
Refactored event calling so its front loading avoiding the lookup for each event call. This now uses an annoymous class implementing IExecutor that facilitates direct event method handler calling
"minor refactoring, rename new feature as `FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY`"
Refactored EquivalencePlanEntry subdomain to eliminate it's two subclasses.
Major refactor for supporting multiple layouts.
Refactor displays to be more general:
#NAME?
Doing some tests to make sure that rename and move refactorings are properly converted into SVN copy/delete and rename functions when using Eclipse with Subversive SVN client.
Refactored DELETE request.
More refactoring...
refactoring: SearchControllerHelper -> ControllerHelper
 * radius module refactoring is completed.
some improvements in order to be able to run. also did small refactoring (moving classes to proper packages)
Lots of changes in light of a refactor to the way ontology references and history are stored to decouple the whole ontology selection component from the rest of the code base.
"hibernate working, refactoring class names"
Refactor common code to abstract PowerSource class
core: minor refactoring in VmAnalyzer
Refactored filter classes to permit use in a Spring application  with a filter-to-bean proxy.  Lots of Javadoc cleanup.
Refactor: Extract interface from HColumn and move it to the api.beans package
Refactor integration test
refactor tests
Refactoring to mctop.su
Refactor Teltonika protocol decoder
minor refactoring to further strip down API of `TokenStreamFactory`
"Added ArraysAsListSerializer. Default default serializers always use lower priority than subsequent default serializers. Refactored how ObjectInstantiators are assigned to Registration, revived Kryo#newInstance."
Refactoring
refactor graphs
RESTHub Security : refactoring of the OAuth 2.0 authorization filter.
"ICE-8395, ICE-8406, ICE-8408, ICE-8405 fixed several issues by making major changes in the decoding, rendering, and client side event handling; re-added support for the blur ajax event; also did some more refactoring and clean-up"
Refactoring and renaming around RexPro.
"Refactor existing statement customizers, move inner classes to static classs."
First Refactoring to manage Toolbar Map Actions
"refactor, move code"
fix gh-3; add engine tests and refactor based on observations.
"Refactor some method and variable names, add explanatory comments"
refactoring of ImportVisitor and Requisitions
Adds minor refactoring.
Major refactoring to move all source folders into the top level module.  This removes the need for multiple JARs.
refactor a bit the controller classes
"refactor(tasks): add tests for java and ant build, refactor tasks"
CTabFolder refactor
"Completely refactored Parameters, not sure if I like this yet"
Refactored CommPortHelper into three parts. 1. CommPortUtils (for static helpers/constants) 2. SerialWriter (for the writer thread) 3. SerialCommunicator (for the serial communication layer used by the GUI.
#NAME?
Added license file and next round of changes/refactorings.
Refactor default parser name
Refactoring  - reviewed DeploymentModelBuilders  - removed unused imports  - bugfixes in JMS integration
Refactored api module into identities + relationships-api to allow people to use the identities without the need to deal with the relationship graphing stuff.
Analyse: Several Java analysis classes refactored and improved.
refactoring old code and fixing some regression bugs (UI had an issue listing domains). Also fixed the listing of domain specific zones at vm creation for a domain admin (listing everything upto root in that domain + listing all the children based on a path search)
Refactorings and marker service implementation
Moved xml generation from Change classes to ChangeLogSerializer.  Will refactor ChangeLogSerializer later
Balaji/Imran: Refactoring to StaffMessageSender
ClientExecutorService refactored to enable redo
Refactor.
refactor batch chunk size handling code
"#303 Refactoring of Convert java.sql.Date, java.sql.Timestamp and java.sql.Time are all subclasses of java.util.Date, no need to test each individually. Added java.util.Date -> Long conversion. Some tests didn't work running in a different timezone."
refactored in prep for SAX -> DOM move
"Refactored AtomContainer: Bonds, LonePairs and SingleElectrons are stored in separate arrays now. Connected Bonds, LonePairs and SingleElectrons of an Atom are accessed via method getConnectedXList(Atom), getConnectedXCount(Atom) etc. Todo: Iterators for SingleElectrons, LonePairs and ElectronContainers."
refactored with commons collections
SOAP-1397: Refactored the authentication inspector classes and added basic support for profiles
Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (refactored test cases)
testcase refactoring
refactor on create ideas form
Resolves Spec Issue 150: Refactor Listeners to use Factories
133609 Java Model Exception: A.java does not exist when Extract Supertype 135057 [refactoring] Extract superclass wizard does not display cus correctly
Refactoring VaR calculators
Refactored queries for Blueprints 2.4.0 compatibility
"Modify BasicCStoreSCP to allow to overwrite default behavior on failure Refactor dcmqrscp, storescp and getscu"
Refactoring DMNResult to support retrieving decision results by ID and segregating error messages.
* Small renaming refactor
issue #61 : refactoring NEQ
test refactors
390361 Refactor ProductAction related tests
Refactors test for reusability
more refactoring and cleanup
refactored ingestion plugin api to highlight singleton behavior and added convenient context based storage. removed obsolete/redundant workflow step
Minor refactoring
"ConditionsTestCase: refactored test to latest API, removing deprecated API"
Started refactoring the message headers in order to consolidate them into a single header
refactoring and support more push and reply type.
refactored KSRSSServlet :  - Splitted Generators responsibilty onto FeedListener and FeedContentProvider - Separated user feeds in ForumuserFeedProvider - feed resolution is now delegated to FeedResolver component (xml configured)
Refactoring: UUID is primary key for TaskInfoBean
Code refactoring
index builder refactoring: experiments instead of ncdfs
"Major code refactoring All web request classes were refactored, the changes also includes: - Only avatar requests will be cached using last-modified / if-modified-since strategy"
Refactoring in preparation for supporting spdy multiplexing.
"JBIDE-21046: ""Bower Install"" launch shortcut implementation. Refactoring"
Fix for #159 - Refactor - cleanup clode when closing query only transaction + change default option
Refactored vcat-redis packages and externalized strings; add simpler JedisPubSub subclass (to avoid implementing all methods inline)
"refactoring, cosmetics"
Refactor everything
Refactor importer
Refactor: HistoryCache should be an interface
Refactored DTOs into Representations.
"Graphics - major refactoring - synchronization problems solved: Presentation and Task separated; SwingWorkers introduced; DrawingView is returned as result of the SwingWorker tasks (zoom-in, zoom-out, refresh ...); DrawingController and DrawingSettings disentangled, ... "
"Refactoring, extracted GroupInfo and deprecated DependencyVisitor."
minor package refactoring to avoid cluttering of package structure
Refactoring/Cleanup
some refactoring in ScriptInstrumenter
"tweaked pom, refactored jwt claims"
Refactored method to save stack trace and meta data out of uncaughtException.
Refactor and documentation.
some minor refactoring
refactor ; creation and last modification date now at the friendly resource level ; suggestion origin is now a friendly resource. Every neo4j  node in graph is now a friendly resource.
[haskell-http-client] refactor & promote accept mimetype to request; simplify templates (#6866)
refactoring to shuffling some functionality into WikipediaDocnoMapping
cleanup and small refactoring
CRASH-124: Refactor the authentication to retrofit key based authentication in the framework
HTTPCLIENT-975: more refactoring/method-extraction
"TEIID-3725 and TEIID-3559 this includes refactoring of the remote-cache logic to ue translator-object as its base, and changing remote-cache to support materialization"
code refactoring and test cleanup
#NAME?
Refactoring of code.
Refactoring method names to improve code readability
refactor package
Refactoring
"Refactor so TestPyJavaInstance wraps a JavaPlugin.JavaTest, and not the other way around."
[ISPN-420] - Refactoring: merge rehash process when joining and leaving into a single codebase
Refactor
"ACT-347: introduced delegateExpression on serviceTask, taskListener and executionListener. Also refactores all Spring tests while I was at it."
refactoring - rename
"- refactored FloppyImageHelper classes and moved VfdCommandWrapper to utils package and renamed it to ""VfdWrapper"". - small fixes in describe methods/pathways/input formats"
Refactor.
"Refactoring FormGroups, esp. FormGroupCheckBox"
some code refactoring
refactor package
Starting refactor
"CAY-1479 EntitySorter refactoring: make it DI-based, internalize Ashowood lib"
#NAME?
"BZ 688915 refactor the tag editor so it doesn't disappear after adding a third tag. make components reuseable, don't throw away and recreate components"
refactored
refactorings and VCS conflict res.
refactor tests for further use
Generalized handling of custom fields plus some test refactoring.
"Refactor NodePathExtractor internals, fix some bugs"
"Refactor: Request lists are now ordered, and have links to the student's and the request's information. Bugfix: Request lists now only show the document types administrated by each academic administrative office. Photocopy document requests are now administrated by the DEGREE and the MASTER_DEGREE administrative offices."
Configuration processing refactored
#57 refactor entities
Refactored package name
"Refactored PlayerManager into an interface, moved implementation to ActiveMQDataManager & added new interfaces for similar purposes as the PlayerManager to deal with Rounds, Games, Scores & TeamScores. Update scrapers to take advantage of new interfaces (all of which are implemented by ActiveMQDataManager). This has reduced the amount of message spamming to ActiveMQ."
Refactoring recipe builders
Work in progress on MIFOS-2551 * added AccountRegenerateScheduleIntegrationTestCase to test schedule regeneration use cases using the AccountBO.handleChangeInMeetingSchedule. * did some refactoring to allow for better dependency injection to support mocking * changed AccountingRules from a static class to a regular class that can be injected and needs to be instantiated * added a mocked MeetingBOTest unit test for MeetingBO
more test refactoring
cleanups and refactoring
refactor package
fixed refactoring
refactor to a simpler model: delete BusVisit and BusStartPoint
"JBRULES-1993 BatchExeution and message format -Some refactoring to better names, like BatchExecutor is now just CommandExecutor"
More DND and refactoring
Refactoring
HTML-510: Refactor IncludeIf and ExcludeIf to be processed as regular tags Added a couple more unit tests
jetty-9 cleanups and fixes after refactor
"Project files refactoring, added ANTLR 4 and StringTemplate maven dependecies"
Refactored to support passing all options to the windup 1.x addon.
More refactoring to avoid confusion b/w path and key
cobertura plugin refactoring work in progress
renormalize tasks implementation refactored
major refactor
EPD-34: cleaned up and some refactoring.
Refactorings in WSN service implementation
SECOAUTH-160: Refactoring auth endpoint and integration tests (not using httpunit)
major refactor of authentication API to allow better integration with various authentication methods
"Refactoring of RedundantThrows and JavadocMethod checks to minimize number of ""Unable to get class info"" errors."
"Add in an executeSelect method on DatabaseImpl, and refactor the executeInsert code to make the error-handling side reusable.  The next step is to hook up the find methods in DBTypeInfo so they use that method."
Refactor to have a single fillSpecialFields method
"ClientMessage refactored to extend mutable flyweight test fixed, chechstyle fixes"
several refactoring of existing classes to support dom as part of the input to functions
"JPA package structure refactoring (moving JpaUnit into the root JPA package, as this is one of the core JPA spec concepts)"
"[changed] prepared code for usage of modules in dataservice: - extracted interfaces for Connection and ConnectionManager - implemenatations in dataservice, used by new dataservice modules - refactored metalyzer analysis code"
refactor and optimize HBase implementation
refactored for conforming to Maven standard directory layout
added protection and diagnostics for 74035: Constructor parameter reordering refactoring fails [refactoring] [cms]
Refactoring of collab example code
"[IGN-179] Refactored portfolio loaders so they can be used from the web interface as well as the command line * Added a stream for the file instead of opening a file from the filesystem * Removed references to the tool contexts from the core classes, only the tool wrappers use them"
O Further refactoring to contain mutable state
displays make private and public simply as one button and refactored Vertex resource suggestions
"refactoring of tests for path(String), path() and path(GenericTypeMatcher) methods to prepare reuse for other custom field fixtures (like ListPanelFixture)."
fix for EVALSYS-219 plus some refactoring
refactoring
Massive JAXB refactoring JAXB + Atom support
"XLC-223	Code review, documentation and refactoring if needed"
refactoring
Moving all helper class to CDIBase instead of CDITestBase + refactoring QuickFixTestBase
Refactor out finite primitive abstract class
Refactoring
Refactoring and documentation in Layout. Distinguish API from SPI.
Refactor the 2 AsyncTasks into their own classes to improve code reuse
Minor refactor to XMLServletRequestMapper.
Refactored to simplify the APIs.
"ert external run time module to separate external dependencies, new classes upload, refactoring and corrections"
refactored episode and video activities to now use live stream table for watch it now functionality
Perf: Refactoring of data manipulation logic
DDF-2037 Refactor MetacardValidityCheckerPlugin (#700)
JBRULES-752 refactoring love
"UF-27: Creating ActivityBeansCacheTest, some refactorings and structure for some other tests"
minor refactoring
MODIFIED: another round of refactor.
[#60] Refactored Train into TrainLine
#NAME?
OPEN - issue JAVAMONEY-9: Integrate with JBoss AS Payment CDI Quickstart Refactoring v0.2 https://java.net/jira/browse/JAVAMONEY-9
Refs #2777: Fixed cell height in Font Face dialog. Fixed selected foreground/background of discrete cell renderer. Refactored Icon and Font Cell Renderers.
refactoring
refactor; extract methods to reduce method size
Refactoring of test stages to get rid of the coordinated ommission problem
refactored class and removed unnecessary groovy.util.Proxy usage.
Refactor UncompressedBlock code
Initial invoice refactoring-- incomplete
refactored to use new error-prone API
"add sols, refactor package names"
Added integration test for syslog4j adapter and log collector. Did some refactoring on test fixtures
Cleaner: Refactor RequestTracker
Refactor Minion features and rework packaging.
Create PopulatedTemporaryDatabaseTestCase and start refactoring to use a DataSource so we can use Sprng's JdbcTemplate class
Refactor tests
Minor refactoring of hb ui bot test EditPersistenceXMLTest
"QuickSort, Assignment-2 and some refactoring"
[PLAT-3886] Move and refactor DbTool
"* refactored filter related methods in WebXmlUtil (added one to check if a filter is registered, and checks which dispatchers are registered) * completed the conditions in CoreMVH * added filter related tests for WebXmlUtil"
Refactored Reed-Solomon so it can be used with different GF(256) primitive polynomials
[#4930] [#6631] DefaultBinding refactoring
"ARQGRA-192: removed of returning webdriver proxy which implements HasInputDevices interface, implemented also initializing of List<WebElement> fields located in Page Fragments, Factory and PageFragments classes refactored"
refactoring methods to reduce complexity
"Login and Hashtags suggester: code cleaning, refactoring, new tags search method, new URL path (no more /tags/search)"
Refactor the new skipping functionality for easier maintenance.
arefactoring
Minor TypeModelImpl refactoring (#1021).
"Refactored coordinator to allow employees to be coordinators, not just teachers."
Refactoring to support remote service
SONAR-3306 Refactoring to use DatabaseSemaphore instead of SemaphoreDao
1) More frequency-based scheduling support 2) Refactoring BlockLocationService to work from VehicleLocationRecords directly as opposed to BlockLocationRecords (database records)
replace getCanvas() method in View class with getDescendantViewRenderer() and refactor callers; add javadoc to View class
[refactored] Piccolo2D node renderer; renamed package
"Refactoring of project structure (modules and packages name, ...)"
minor test refactoring
package refactor
"Refactored a lot of the code, and started on status-updates"
Shapes : preparing hierarchy normalization refactoring
Refactored lastRegion to be a match.
more changes for refactor
DTO-ize the container stuff for JMX & a little bit of refactoring to share code
Refactor out needless duplication of code and make it work better at the same time. Fixes #639 and a latent bug that hadn't popped up yet. Last commit fixed #638 for the record.
extracted usercriteria to concerte list of users and projects into reportcriteriaservice. Reviewed & refactored junit tests
Refactoring ArrayListOfX family of objects.
Refactored packages
"Miscellaneous refactoring and optimization.  Also added the 'StockTweets' application, which will be moved to its own project at some point."
"Refactoring based on code review with Peter. Rename the base class for matching and producing an error, and split up these two responsibilities into their own method."
"Refactored POMs into parent and submodules, moved network code up from deep dir structure, removed build artifacts from source control."
Renamed MapServiceContextAwareFactory to MapServiceFactory
Refactor to use HighWatermark
Refactor blob and player manager to allow for non-player blobs
DDF-1831 Refactored RegistryObjectMeacardType out of api bundle into registry common jar
Http refactoring
Removing some of old cruft as a preparation for the cross layer refactor
[compiler] refactoring continued: isolating/defining compiler API (work in progresss) {{4hrs}}
EST-564: Additional refactoring index
https://jira.jboss.org/browse/JBIDE-6439 : Refactor and partially reimpement VpeDnD class - InnerDragBuffer is replaced by 'vpe/xpath' flavor - 'text/unicode' and 'text/html' flavors now contain source of the selected node - references to VpeDnD are removed from VpeVisualDomBuilder
refactored view code into viewmodel like pattern
"Adding index loading tool. Also refactored the parameters a bit, so that they are java correct.  A bit more documentation."
Refactored TransportOutputStream to represent TransportIntputStream more.
Further refactoring for DeserializerFactories
Refactored.
Refactoring spike02 for initial cheetah project structure.
"PLINK-130 cleanup and simplify sample schema, refactor to use new annotations"
Refactor SOP Portal -> it's possible manage Bolonha courses and schedules.
Fix javadoc and minor refactorings
"Reports from missing ranges. A lot of package and code refactoring, cutting things to pieces."
Refactoring logo generator.  Haven't broken it yet.
"refactoring to add PaperRecord object, WIP before adding merge functionality"
Refactor ID choosing logic into AccessDistribution
JMockContext now fails if more than one instance in test class. Automocking now works properly with Rule Some refactoring of common code.
refactor - move
Graphics bugs in baalpladsinfo fixed - Refactoring
Small refactoring: better link the ContainerResponse and its key
refactored some programs related template builders
"XWIKI-12775: Be able to use a hierarchy of Nested Pages as template when creating a new page - Fixing more test flakiness, trying a better method - Refactoring of page objects to remove some code duplication"
Refactor FileInStream
Refactored GCC-Bridge primitive handling
Refactor method name to something more sensical
#NAME?
refactoring for initial plugable interface for different data models
First step of the API/Plugin refactor. Signed-off-by: Chris Sanders <zidane@outlook.com>
Refactored BTCChina
"#494 ContactController refactored to annotated spring 3, including @Value config"
refactor
[FIXED JENKINS-33425] Refactored the cleanUp() method to log progress and push for completion
DAVServlet infrastructure refactoring
Refactoring to allow binary content types
OAuth2ResourceInterceptor refactoring: generalized -> now uses AuthorizationService modules that authorize for a specific authorization service. Preparation for MembraneAuthorizationService. Tested with OAuth2 example
HBASE-17654 RSGroup refactoring.
Refactored and move things around
Refactored a bunch and began working in signup and signin
refactored shortestPathDistance into shortestPathEuclidianDistance
Refactored slave impl to allow for future non readable slave.
Refactor ArgumentListBuilder#toWindowsCommand
failure logging listeners refactored so that they can be used with both Selenium 1 and Selenium 2 API
some refactoring
Refactor some admin commands into config subcommand; add /skadmin config overwrite
 * refactor switch request code to support the new interface  * refactor script
"Fix Authentication Components (remove simpleTest-auth, disable LDAP auth before update to Ldaptive, refactor HandlersDiscover...), addig a new use: casuser"
refactor indexer to remove large section of duplicated code
[123168] add initial search / refactoring support (XML Schema refactoring)
misc. refactorings
"feature #4148 :  Refactor the encryption of passwords: now each encryption methods for passwords are represented by an implementation of the PasswordEncryption interface. A factory of password encryption is provided to wrap the concrete encryption in use in Silverpeas. Now, only one cryptographic method is used at once on passwords; there are no more several ways to encrypt a password: this simplify greatly the code. To take into account of an algorithm transition period, the previous encryption method is retrieved from the password digest in order to authenticate the user until its password is changed with the new cryptographic algorithm."
Refactored GetConfigurationAction for better readability.
"Finished documentation, some code refactorings and rewrites, some bugs fixed, new JUnit tests"
refactored code
"Completed match.call() implementation, refactoring DotExp to PromisePairList in the process. (It turns out that match.call is one of the few ways that normal code can obtain a reference to a DOTSEXP, so it needed to be a proper subclass of PairList)"
Matchers refactoring
warning removal and refactoring
EST-319: add new item type for tax invoices; some refactoring on lease term
Refactored Reed-Solomon so it can be used with different GF(256) primitive polynomials
Refactor layouts to remove MenuDrawer dependency
Fix some issue with the refactor
Refactor. Extract some code to a private method because the same logic is gonna be called from other methods in the future.
rhqctl install/upgrade work - move default server/storage agent dir out from under server so it can survive updates and   not invalidate associated RhqAgent resources. - refactor Install and Upgrade to share abstract base class - variety of other use case work
TypeConversion logic refactorings
"refactored AppenderControl::callAppender into smaller methods to enable inlining: after running a test with -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining I found ""...AppenderControl::callAppender (405 bytes) hot method too big"". The new code is all inlined after ~7000 invocations. "
Refactored binned data writer (3)
Refactored ProducerConfigurationTestCase to add more tests.
Refactor PerfLaunchConfigDelegate
refactor and static method exec without creating bean
trunk: SVNAdminClient.doFilter implementation (finished) - refactored SVNAdminClient's code to use a single dump parser class for both loading and dump filtering
Refactor the DLNA.ORG_OP and DLNA.ORG_PN flag instance variables into methods as they require a renderer configuration to be generated.
Fixes #897 - Refactor the Site non-persistent extension manager This has now been moved to an extension manager on the service as trying to utilize BroadleafRequestContext does not always work. In some cases Site resolution happens prior to running the BroadleafRequestContext. Moving this to the service (where the non-persistent logic happens anyway) guarantees proper execution of adding more properties onto the non-session-managed instance.
refactored code
"added index page, some refactoring"
Refactoring...
Refactoring
core: minor refactorings in StopVmCommandBase
Refactored Session Class
"refactor, remove unused methods, add method for getting pipelines"
"Refactor UI controller code, modularize adding of individual views.  This is preparation for adding / removing specification pieces from the UI and not just building from an existing document."
Refactored JettyMain to make it more readable
CAY-926 Refactoring class generator classes (CayenneGenerator -> CayenneGeneratorTask)
Refactor the IWorkingCopyManager interface in the public area.
api_refactor: refactor user apis
XWIKI-7598: Fix handling of Loggers when automatically mocking Component dependencies * Small refactoring
Refactoring loans GUI.
Finish work on refactoring the Amqp message property intercepter and updated tests to mock out the needed bits.  
Service registry refactoring work in progress: added tests and a simplified and decorated interface; moved a few classes.
Refactoring: create boot.core package and move relevant code into it
Changes to support additiom of xmpp provider test plugin.  Refactoring to allow for easier creation of test plugins for new providers for various APIs
"some refactor to method calls like guava, unit tests"
Refactoring.
"NOJIRA refactoring based on walkthrough discussion, renamed securitycontextutils->authncontext, added utility method to retrieve tenant name test: all service tests"
Removed support for commands that do not accept the output file as 2nd param. Improved code style and refactored.
"huge refactorings : * Expr, Path and Operation subtypes as top level types and into separate packages * Hql -> HQL * Sql -> SQL * each module has now com.mysema.query.<modulename>... for all packages updated version to 0.3.5-SNAPSHOT"
https://issues.apache.org/activemq/browse/AMQ-2617 - refactor ProtocolConverter so we can reuse it
"further Grade refactoring (see Enrolment and EnrolmentEvaluation getGradeValue,setGradeValue,getGrade,setGrade)"
migrate quickinfo application -Replace Spring Factory with ServiceProvider -Start refactoring integration test (need to make two commits in order to keep git history)
refactored models to remove normalization issues (added a .resolve(..) stage to model loading so entity/attribute names can turn into proper entity/attribute references)
"slight refactoring of @WebXX handling - no need of threadlocal normally + more generic handling of web-inf/classes (advanced webapp config, not default) TOMEE-572: Store @WebXXX scanning result to reuse them in Tomcat (improve performances as Tomcat does not need to do it itself)"
Refactor of mavenresolver tests
Refactor modifications in more OO.
addressing bugs due to refactor myth services api v1.0
Refactor tests a bit
Continue addressing #182 by refactoring phone bill web application project to not expose Responses outside of the REST client.
Refactor code
modify the cat logview and refactor the code
Refactor common code to abstract OperatingSystem class
"refactoring, javadoc, formatting"
NXP-3436: refactor invalidation mechanism (no clustering yet)
refactor(cycle): renaming packages
Full refactor : delete all modules maven
Refactoring for ERRAI-852: keyup bindings
Add some heredoc specs. Fix marker bug where stringbuilder was appending ints instead of chars. Other misc minor refactoring
Refactor Moonshine startup logic
small refactoring
Refactor for actual website naming
"cleanup, refactoring"
Moving IRefactoringInstanceCreator & Co.
big refactoring of completions
"Removing MessageId, refactoring TimestampProvider."
"refactor WriteSequenceToHdf5:  * writeViewToHdf5PartitionFile() writes a single view to a (possibly    existing) hdf5 partition file. This exists in two variants; one that    gets a writer queue and an array of CellCreatorThreads, and a simpler    one that constructs and destructs these. Internally we use the first    variant.  * This is in preparation for ""push-style"" image writing from    spimreconstruction."
Initial basic ruby debugger implementation. Preferecne ids refactoring. Adding DeployerHelper class.
"#921 - Refactor internals - Change internal use of ""findRowCount"" to ""findCount"""
"Refactor send handling a bit, do all message prep in client thread during the onSend method.  Pass producer configuation to message onSend so the facade can decide what to include in sent message.  "
Minor refactoring for interceptor scanning logic
Refactored a test that fails sporadically with HtmlUnit to use Firefox
Refactoring (yet again)
refactoring
XWIKI-6167: Refactor extension manager in a bit more modules
Start refactoring for Messages class
little refactor
* Refactoring previous work - its TDD you know ;)
Refactor our time interval handling.
Refactored CoordinateSystemAxis: now uses Unit instead of Units.
refactored EditorTransformationFactory
some refactoring to make the interceptor testable + added tests
"* AttributeIndex implemented, refactor"
refactor for reuse in future
"Refactored parsing of server messages, and removed dependencies on Jetty's JSON class."
SAK-21494 - Refactoring findOpenUrlVersion01 to accept a map instead of just ParameterParser
core: refactoring VdsSelector API
#595 - Refactor - persistence context root type handling
ISPN-5195 ISPN-5205 Refactoring
"Started refactoring Media Channels by decoupling RTP, RTCP, ICE and DTLS components from the RTP Connection"
"Bug 379504 - Data flow enhancements - more DataAssociation enhancements, reconciled create, delete, reconnect of DataAssociation connections when a Data Object is selected in I/O Parameter details property tab Bug 415158 - Property Tab displays wrong label for Data Object itemSubjectRef - bug fix in ExtendedPropertiesAdapter, refactor some related methods Added DataInput/OutputAssociation nodes to Outline viewer Created Data Association property tab"
Refactor OozieJob class hierarchy.
refactor DownloadManager API and responsibilities
cleanup and refactorings
Core: refactor type update code (#48).
ACT-4117 / ACT-4117 : refactor deleteDeployment() into several methods
"Code refactor, support for creating link operation"
Refactored and renamed for clarity
"Adding ThresholdingVisitor Tests. I made some refactoring on ThresholdingVisitor implementation to avoid static initializations to make junit tests more easy. This changes affects other classes like ThreshdConfigFactory, Collectd and CollectableService"
SugarCRM pre-release refactoring
refactored package structure
#595 - Refactor - persistence context root type handling - AssocOne split simple and inherit
Refactor the package
Minor event system refactoring
Refactored
Update MPXJ library. Changes to Project Import functionality. Code refactoring. i18n.
user management refactoring
refactor
"Refactor package structure, working submit new and edit."
"Added a populateFromURL method to the NetworkData class and refactored the code to make it work! Also updated the test code, but the test code does need more work."
[#ARCH-17] Refactoring: Move injection of EJBs and JMS Queues from Servlet to specific Classes
Refactoring component names of debug component in preparation for move into ERDirectToWeb
#NAME?
more refactoring of params -- have each generator return a builder for its own params to ensure type-safety
refactoring
[deckeditor] Refactored card selectors according to MVC. As a result the list and gridcard view have shared filter and it is possible to search cards in gridcard view.
refactoring etc
"chimera: refactor PGET, part 2: eliminate caching of file locality node"
Refactoring
"ISIS-1603: minor refactoring of subclasses of ScalarPanelTextFieldAbstract, specifically the createTetFieldForRegular."
refactor rename
"Added ability to pass ILanguage options to LR parser, refactored ParseHelper, partial fix for bug 253690"
"Addressing bugs PDE-146, PDE-147, PDE-148. fix the 'press enter to skip' problem; there are two numbers listed for organism; require that the program ask again for different samples. Currently refactoring to deal with integer indexes properly"
Refactor ProtocolUtil readPropertyValueAs methods
highlight triangle on hover + some refactoring
Refactored method and member name of final test actions
First step of refactoring *Group -> *Facet
larger refactoring in the protocol
Refactor the console construction using PicoContainer.
Contraindication refactoring:  - Created reusable model (IContraindicatable)  - Removed contraindication method in ActiveInstrumentRunService  - Refactored panels to use new model  - Removed unused test case.
refactoring batch update api
[BISERVER-12433] (refactoring)
* Refactoring a good portion of the new alerting UI code. * Adding in LookupComponent of for Seam injection via the LookupUtil.
"Refactor HistoryGuru - move more into the Repositories, and introduce RepositoryFactory"
Readding the refactor now that the tests are fixed. This refactor includes: 1) Moving the relationship between the MpCluster manager and the RoutingStrategy down into the RoutingStrategy rather than having the Router be an intermediary. 2) More robust handling of issues with communicating with the MpCluster manager. 3) Test log tuning
Removing degree as unique. Refactoring method read by unique.
"More refactoring, javadocing."
Probe refactoring - separate data retrieval logic from resources
Refactor the shape initialiser.
"clean code, refactor code, fix possible PNE"
interim mime refactoring
REFACTOR: Moved more files into packages
Small private messaging refactoring
Refactored a bit. Now outputs the page changes as well.
Refactoring and design
some more refactoring and error handling for properties compiler
Refactored duplicate code into separate method.
Refactor to make easy further changes
minor refactoring
DDF-285 Refactored cache implementation for retrieve product. Made changes in CatalogFrameworkImpl for new caching.
removed more code. did a import refactor. a few other tweaks.
more tests for hotfolder manager + refactorings
Refactored IntellivrServerImpl.java and added some tests to RancardGatewayMessageHandlerImplTest.java
First curt of Link Rename to Refactoring [db]
Light refactor of Solver.searchLoop() and simplify ParallelResolution (but still buggy)
"Some refactoring, checkstyle clean, javadoc comments"
refactored a bunch of stuff (renames & new packages)
"Created LoseHalfLifeTargetEffect, DiscardedByOpponentTrigger and made some refactors"
37219: Rename type should update derived variable name [refactoring] patch from Philip Mayer
Refactor persist() and update() API
"Code review changes - move code to test, minor refactor"
refactored storage engine api
Refactored tests in preparation for bug 346089: Consider to bypass AdapterManager in Widget#getAdapter for Widget LCA
refactoring: main menu
refactoring/cleanup
"Some comments in media are still missing, but an important refactoring has been done meantime. ASTBuilderSwitch does not have to call postprocess anymore. Comments are finished after in an independent final tree traversal."
add support for TZID parameter in eim icalendar date/datetime values and refactor the code that converts eim text values to/from icalendar date/datetimes.
refactored test resources too
Refactored viewer packages and UML updated..
A whole bunch of refactorings + Bubble chart portlet supporting periodic chart
package refactor
Issue 815: refactored the 3 major features of keystone into separate clients.  removed cyclic dependency needed to support keystone controlling keystones in other regions
Test refactoring/reorg to group related JDK type deser tests together more closely
Refactor package names + update for 1.3.1
pmd: Minor refactoring - reduce code duplication
minor refactoring + updated README
refactor(rest-test): allow test subclassing for different runtimes
some refactorings and code cleanup
Minor mods/fixes and refactoring
Add TextData manipulation to customize Labels colors and size. Implement Labels Transformers in Ranking module. Debug and tiny refactoring.
"Implementing configurability of events, including ordering. o Refactoring out the configuration loading into its own domain service. o Refactoring out the EMS conversion functions into a separate class."
"RESTWS-138 : Fixed all after-review comments. Got rid of getResource method from Hl7MessageController, refactored getHl7InQueue method of IncomingHl7Message class and used ResourceDoesNotSupportOperationException within not imlemented methods."
refactoring: moved AbstractOp
Refactoring and clean up code for new negative contains (sub)sequence assertions Formatting gone wild
* refactoring
"JSP refactoring (backlog.jsp, project.jsp) A visual indication on the backlog of which features are ""must haves"" Rename the ""Stop"" feature to be ""Blocked"" Headings for size and importance columns on backlog Notes with quotation marks are not displayed correctly A column without WIP limits should mouse over with no WIP limit not WIP limit: -1"
Refactored reference to UserId in PageUser (RAVE-729)
Refactoring
Refactored Syslogd code to get rid of SyslogHandler and to start making it possible to dependency-inject configurable parameters into the classes.
Refactor JSON loaders so an InputFormat can be used & update test. A future change should remove the now deprecated LzoJsonLoader (as it contains nothing LZO related except a hard-coded InputFormat).
XLCLOUD-826 fixed access token entitlements list issue; refactoring of vcms-gui paths and path-params
refactoring and cleaning up
examples refactored
"Refactoring the Controller and the ClientCommand classes so that Controller is functioning as an actual controller now by invoking the command classes instead of the commands invoking the controller object. The setController method has been removed from the ClientCommand interface as the commands no longer have a dependency on Controller. ScriptCommand still uses Controller however, to bind it into the script context. But ScriptCommand does not care about the methods exposed in Controller."
refactored SpringProjectBuilder further to support validators [refs #171]
minor refactoring
refactor by creating an AbstractYamlDataSet
Some refactoring and more PO
"P?epsán printDistanceMatrix -> print Distance Funciton + n?jaké zm?ny uvnit?, do volání p?idán parametr File. 	refactor pro tvo?ení ArrayList: vyházeny typy pro šablony a použit diamond interface <>"
refactoring
Minor refactoring.
JBRULES-708 MVEL Integration -Refactoring the api to allow pluggeable implementations for return value and predicate
"Big refactor, divide tsmf into tb and mf"
refactor package
Refactored tags so code is more consistent with groups
DRILL-4280: REFACTOR
Refactors RTCP termination.
[HTML Report] Refactor and use the device zoom factor for click areas
"Refactoring, fixed a merge mistake"
"supports demonym lookups, refactoring to only parse with NER once"
Refactor SimpleMembershipService isValid function and unit test it
Refactor tests
Fixing potential exceptions in the refactoring algorithms
refactored .context module's .beans.factory and .context.access tests in preparation for moving .beans.factory.xml tests from .testsuite -> .context
"Refactoring and tweaks of the async executor after some serious load testing on AWS. Introduction of a Spring-JMS message-based async executor (easily portable to other flavors of messaging), also tested on AWS with some very nice results :-). A blog will follow soon."
Core-299 Bus subpackage refactor
"refactored large methods into helper methods, plus some style improvements"
Knowledgemotion: refactor file processing logic to use lazy iterator to parse input CSV
Refactoring RoboRemoteclient into a common library and RoboRemote specific library
Minor refactoring
1.refactor query methods in LoanPersistence 2.add a method to get disbursement term and related test code <wenjing & zheng>
SONAR-4386 Refactor ProjectBuilder extension
refactor logic for getting S4 object superclasses
Refactored the WebSocket interface to allow localized event Observers
Minor ui changes and refactor
SQL: refactoring of functions to accept something different by document as current value
refactor the unit tests for problem analyzer
Class name refactoring.
CompositeLocator refactored to ReferenceComposite
refactored MongoDBBaseEntity to BaseDocument to be generic and follow MongoDB convention
refactor some code from AbstractRPMMojo into helper classes
refactored large method into smaller methods with a single responsibility
Refactor the name of both the directories and the artifact ids of the ScheduleEvent project and of its subprojects
unit test refactoring
test refactoring
Refactored getCyRow from CyTableEntry and moved it to CyNetwork
"WINDUP-459, WINDUP-398: Merging and refactoring"
Refactoring to remove cycles.
Refactored AbstractExpression to support index
refactored qlearning into separate package
JNAerator:  updates to C++ parsing & BridJ code generation. BridJ: started threadlocal data refactoring
refactoring and an new version of the access control metamodel
refactor the cookie to handle different users
Added validation to intellij refactoring wizards
Refactor adorned target CRUD for enterprise by introducing new alternateId param - previous data and formatting is still there for backwards compatibility
Added parameters types to allow for content assist to show something useful in the completion proposals. Also refactored around names so that not every node needs a name and node types so that things that aren't bindings can be resolved by the Linkages. All this to properly support ITypes which aren't necessarily bindings.
refactoring docs bugfixes made cool big one-jar jar
refactor
Refactoring / cleanup Changed SimpleInclusionStrategy order to check for static/transient before checking if the field is primitive/wrapper/enum/String Some work on adding support for customizable table indicies
Refactor move command buttons to the device frame
team service layer refactoring
Refactorings to resolve bug #342677 (removed generic instance approach from application context)
"refactored teh View model, added the support for declarative routing which is optional, remodeled the controller yaml definition and much-much more"
[PLAT-1296] Refactor time-series master; Remove generics
Refactor 'joglshader' package to simpler 'shader'
#NAME?
Improved replica sync. Refactored backup tests.
Refactor VCatRenderer in preparation to allow using a queue; not beautiful but it works
JBIDE-2808:  Improve/refactor org.jboss.tools.common.kb plugin.
Refactoring maven modules
Main refactoring and added I2CBusImplTest
Refactoring of ClassBindingEventDispatcher
Major refactoring. Moved the individual implementations of graphs mostly into the base Abstract graph class as read only and seperated out implementations as restricing writing for immutable version or implementing methods to manipulate topology. Several classes and interfaces were renamed. Refactored graphicalmodel package classes to use generics.
Some refactoring of child and descendant selectors
Continued refactoring. Some integration tests still needs to be fixed
frontend: refactoring: Generify list models
Project refactoring
ISPN-5553 Lambda serialization refactoring
OntClassMatcher and Skolemizer refactoring <form> initialized with params in CreateMode/EditMode
Small refactor for setting fields' state
Refs #3286. Big refactoring of filter slider code.
Allow to input custom expression on value series when chart is sharing binding with table. And refactor code of ReportDataServiceProvider for sharing binding.
Refactoring packages
minor refactor
refactor stream api
"SAK-12705. Applied the patch which had been previously published for 2.5.x as an attachment to the Jira issue. Also added several related unit tests, which necessitated refactoring mock/stub classes from jldap-integration-test into a new jldap-mock module that can be shared between the jldap and jldap-integration-test modules."
Refactored package names
Refactoring
Refactored OpenMRSSHROfframpTransformer
Refactored VerificationService to be more general and don't require the server to send email with the token directly.
"MAGNOLIA-3853, MAGNOLIA-3015: refactored Mock-omplementations (first step - lots of tests still failing) - as in real API, content-stuff should only wrap jcr-stuff (e.g. mocks) -> MockContent now extending DefaultContent -> MockNodeData extending DefaultNodeData"
Refactor code for better cohesion
"Presentation model changes, plus SMS webapp refactoring"
1) added wt10g docno mapping and repack support. 2) refactored code a bit to be more flexible by creating a trecweb input format
More progress on Bio-Formats Importer refactoring.
bug 293704: refactored for cleaner self-documented code
[LOG4J2-2009] Rolling appender managers broken on pattern/policy reconfiguration. Refactor common code.
* Refactored HttpService to be more state-less. HttpService now takes HttpServerConnection and HttpContext as parameters to the #handleRequest method * No more ugly logging methods in HttpService * Fatal I/O and protocol exceptions are now propagated to the caller of the #handleRequest method
Refactored project structure from one project to several projects
COMMONS-124 : Allow enumerations in POJO to be serialized using MetaStoreFactory COMMONS-125 : Allow a factory to take care of serialization of referenced element types in MetaStoreFactory COMMONS-126 : Allow lists of Strings to be serialized automatically through MetaStoreFactory
refactored out constructor logic to protected method to be accessible to custom type-safe subclasses
"Some refactoring, debug hovers update"
refactoring further
Refactor validation method to split in two methods
"BugFixes, Minor Refactorings"
Refactoring
harsh refactoring of the dialog package structure
merged with netcdf directory stucture refactoring from atlas-ensembl branch
TEIIDDES 408 - More refactoring for JCA changes.
"Refactored the tests (sorry to do this on a broken build, but...)"
"Refactor org.wildfly:wildfly-clustering-infinispan -> org.wildfly:wildfly-clustering-infinispan-extension, org.wildfly:wildfly-clustering-jgroups -> org.wildfly:wildfly-clustering-jgroups-extension"
editCustomerStatus refactoring - check in changes - fix failing integration tests.
Second stage of full parser/handler infrastructure refactoring.
Refactored CDN headers and test classes
"lots of refactoring, removed JpaIdentityStore for now (needs major rewrite)"
Refactoring of event bus into a clearer and cleaner form. Logic has been simplified and teased out. Some inner classes have been factored out into independent classes.
Minor refactoring in the ItemProxy.
SONAR-4326 Refactor rule related stuff out of QProfileRule - step 1
Refactor test suites
[PLAT-1072] Added a cube that takes a 3D interpolator. Required quite a lot of refactoring of the ND interpolators.
further test refactoring -- created SearchQueryTestRunner
"Refactored all entity classes: added an interface for each entity, such that alternative data stores can swap out the entity objects with more fitting ones (eg with annotations like Neo4j, JPA, etc or other mechanisms. Internally, only the entity interface is used)"
Refactored database to use java library classes (Map.Entry) instead of custom element. Benefits: use of AbstractMap.ImmutableEntry etc.
"Refactor VanillaActionController to VanillaEntityController, stub out start of AI. Signed-off-by: Chris Sanders <zidane@outlook.com>"
Refactor: Streamlined AutoCompleteServlet and SimpleAutoCompleteServlet.
Refactored HttpBenchmark initialization code
Feature #907 : light code refactoring
refs #231 - polished and refactored a bit
[KARAF-2168] Cleanup and refactoring after the change on the sync property
"refactoring: - separação de métodos utilitários de DirectMatchStrategy em   TextMatcher; - reestruturação de alguns métodos (""comentários"")."
"Lab 06_home, Stage I & Stage II - refactoring."
REFACTOR: moving index update code to separate package.
Refactoring
Refactored memvache structure.
Trim long nicknames for use in tab list Colour Nicknames Refactor /nick Command Fix nickother validity checks.
Refactoring of the SoapBuilder interface
Refactoring
#204 fixed serverside issues with private endpoints refactored autocompletion servlet code for better usability
"Refactor package caching, account for some edge cases"
Refactored StatusBar
Code refactoring
"Refactoring, to separate Big/Little-Endian stuff into classes instead of switches"
Refactored some classes.
Refactor the clone method.
SONAR-5056 Refactor the way characteristics and rules are imported from XML
refactored the routing tests to remove code duplication
Fixes #61. Refactor implementation of insert
"ACT-119: Add web service - Create message, structure classes. - Improve parsing to handle itemDefinitions and structures. - Add a first version of the test for the web service example. - Refactor WebServiceActivity class."
refactor event message and reused message id
Refactored JobProcessor so that it can be loaded from the config instead of hard coded. Created a new JobProcessor interface and moved the old code to ReferenceJobProcessor. Made ReferenceJobProcessor implement JobProcessor. Added config requirements for JobProcessor. Updated default config for JobProcessor.
refactoring: cleanup user config and host views
CSPACE-870 Integrated Spring Security 3.0.2.CI-SNAPSHOT and Spring 3.0.0.RELEASE. The JAAS-based CS identity provider (CSIP) is configured successfully as a JAAS authn provider in Spring Security. Added Spring security specific AuthorityGranter and UserDetailsService (test) into authn service. Refactored DatabaseRealm and CSpaceJBossDBLoginModule (needs package change in login-config.xml of JBoss). ant deploy is required to copy the Spring specific jars to cspace/lib (of cspace domain). See services/common/lib/README.txt Spring security is enabled by default. Anonymous access is also enabled by default (allows all tests to run without HTTP basic auth). Security tests could be run with client side security enabled (no need to bounce the server)
"Refactoring of Sql Data Set Evaluation to use a new SQL evaluation code within the SQL Query Builder.  Aims to solve consolidate this functionality and solve a number of outstanding tickets, including:"
"Mutable parameters modified for methods returning safe objects and constructors too, small refactoring"
"BookKeeper Client: Allow choosing regions in an ensemble based on dynamic Features - Part II - Refactor replaceBookie to separate the global state (all regions) from regions that are used to actually find a bookie for replacement - Modified logic first looks to see if the rack for the bookie node to be replaced is in a region that is available, if it is, attempt is made to find a bookie in the same rack, if not we default to selecting a bookie at random from the specified regions - No change in behavior is intended"
IMPORTANT: Refactored PAMELA to create now a single ModelEntityLibrary which contains one ModelEntity for each class.
added support for CSV/TSV files without header row; refactored CSV/TSV reading code to remove code duplication; added test case for CSV/TSVs without header row; added support for TSV files using replace method
refactoring E2Bean
ItEr48S04ValidacionEProbasFuncionaisItEr47S04: Refactoring EntitiesTree.
"Refactored, moved Tag classes out"
refactored error handling in ebXML-based IHE transactions
Refactored all reporting framework classes into reporting packages with same structure as reporting module and added proper unit test for HIV Care Visits indicators
SOC-1571 IdentityStorage and Identity Manager refactoring
Refactored datatypes to add in state mechanism.
a little refactoring on BpelC.java to retrieve compiled OProcess
MAHOUT-11 - refactors lots of the clustering code to get rid of its static fields. Thanks to Drew Farris for fixing most of the code.
srm: refactor getNumOfFileRequest to collapse duplicated code
" - much refactoring, fix to backward path searching"
Code refactoring JPA-store.
refactored - created PrivateKeysHandler.  Added test data.
Feature #8017 Implement the getting of occurrences of events occurring in a given period for a given calendar. Implement the deletion of one or more occurrences of some events. Refactor the way events and occurrences and get from a given calendar and how an event and an event occurrence interact with it for perform some simple tasks (like the deletion of itself)
Minor refactoring to make it easier to get at the Bpmn2Preferences
refactor abtest unit tests
Refactored contains key matcher to check a value within an array of values
MIFOS-3193: tidy up refactor of office struts action
"hibernate4 : Refactor WhitePages:     - migrate the hibernate O/R mapping of entities to a JPA O/R mapping,     - add some tests on the DAO and on the WhitePagesService"
[NEW TYPE INFERENCE] Refactor of GlobalTypeInfo that shouldn't change behavior.
Refactoring of the resource interface
"Refactored user model for settings. Updated tests, repo, and controller accordingly."
refactored json file structure
"refactor for NYC allowing transfers.txt to define station paths, and allowing entry costs for stations (per-feed, for now)"
Further token refactoring.
Step in refactoring of DB building
Refactored HibernateRulesValidator to extract the embedded RulesValidator Added CompositeRichValidator to allow combinding of validators (as replacement of the old HibernateRulesValidator which handled RulesValidator as well) Added validate() in setValidator(...) to avoid wrong results Adapted tests to accomodate previous change (validate count)
"Refactoring, better name of class"
refactor(jsp): renaming for more consistency
refactored class
Refactored create methods to allow seperate creation of address and patient.
"Last pieces of the first round of refactoring: again compiles, may work"
refactor ServerStop/ServerStart/ClientEnable into EngineStart/EngineStop - moved to packages whcih reflect their naming scheme properly.
publications refactorized
Completed refactoring of PMD configuration state into the Configuration class.  Both CommandLineOptions and the AntTask refactored to initialize a Configuration instance as needed.  This results in much improved defaulting of common settings and behavior between the command line and Ant task.
Refactoring: renamed KeepAliveRunnable to WebSocketKeepAliveRunnable
Refactored handling of NAMESPACE files
"Refactoring, renamed package to 'org.osframework.contract.date.fincal.output.io'"
Refactor ImportSelector support
Refactoring of fd and cfd related objects.
Refactoring exception name. Closes GH-10
Refactoring on api.
"lots of javadocs and refactoring for the storage layer of identifiers.  This includes a complete treatment of the exception handling processes, so that now the Identifier code is consistent and does not throw spurious or quick and dirty exceptions.  This has resulted in changes to exception handling throughout the codebase, but due to the brokenness of DSpace exception handing, on many occasions these are in the form of RuntimeExceptions."
Refactoring.
Minor refactoring in tests.
"add JarDelta optimizer, some tests and refactor all of the above"
"Remove static DataManager, implement Consumer, massive refactors"
refactor
"messagewall refactoring + mini editor class, ads test refactoring"
"refactored for maven friendly test names, added much improved test coverage for important scenarios."
some refactoring
Refactored CatalogItem to Product and SellableItem to Sku
Works after refactorings.
refactored test entities
Bug 429699 - Stack Overflow error when creating any <customTask> with a label Bug 429774 - Some compound objects are not being updated immediately after construction Bug 429784 - XMLHandler can not resolve some object references by QName Plus more refactoring
DDF-1058 Add partial secure unit test.  - Fix exception in get*Client.  - Refactor get*Service to reduce duplication and be overrideable for testing.
Major refactorings to allow the use of SeverityLevels in FileSetChecks as well as in Checks and to simplify logging of messages in FileSetChecks.
- Added markdown formatting while editing using new MarkdownStyler (loaded with ServiceLoader!). - Refactored the SettingsFunction breaking out the gui into SettingsWindow and also moving out ConfigEditPanel to its own class. The gui is also updated to use a JTabbedPane with a tab for each group. This looks much better and is more manageable.
refactoring to org.redberry.physics.*
ChassisCapability refactoring
Feature: RequestListByDegree now allows to filter by the document type Bugfix: RequestListByDegree now correctly shows all the requests made during a particular execution year - avoided null pointer exceptions Refactor:  - RegistrationAcademicServiceRequest checkParameters now checks that the request date and execution year of the request are not before the registration start date  - DomainReferences removed from a couple of beans
Refactored encoding.
refactoring: moved static field variables to MultiBlocking class; added disc title similarity
"Reformatted, simplified, and refactored 'ECF generic' classes and subclasses"
refactor visitor
"Small refactor, major hacking to come"
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - added support for new ClassOrInterfaceTypeDetailsFilter interface to TypeLocationService
refs #156 - mockers refactored
Refactor PointOfFailure object creation
refactoring support for tag names
Refactored web stuff a bit.
Refactor: create an interface for SubColumnQuery and an Avro mock implementation for AvroSuperColumnQuery
refactor modello to move test code out of modello-core
fix up interlining support (I think); refactor GTFSPatternHopLoader a bit
"Fix SCR#99986, 100014 UI Refactor includes: 1.       Add ITaskPreviewable interface to provide preview support. This interface is used to meet your requirement of pluggable preview canvas. 2.       Provide add/remove tree nodes support. Once axes/series added/removed, the tree will be updated as well. 3.       Provide auto hide invisible console in subtask container. Now when SelectType and SelectData page is active, the original preview canvas is invisible and hide automatically, so internal preview canvas can be shown. 4.       Replace class name ChartWizard with WizardBase in code as much as possible. In fact, some static methods, such as ChartWizard.displayException, still can use ChartWizard class. Even if you don?t use it, the static class can be invoked. 5.       Move some interfaces and classes from ui.extension to ui plugin. Ideally, UI extension plugin is not supposed to use or extend by other plugins. 6.       Use generic Collection in code."
Added support for loading components from jars and refactored component loading. Broke configs again too.
I2C-0009 - mhuckaby : refactored existing factories to extend new abstract factory
#534 - REFACTOR: Internals for lazy loading specifically improving errors/logging in cases of lazy load errors due to deletes - Initial refactor for LoadManyRequest
Refactor InitialContext code into shared findContext() method
some refactoring of when requests are sent in order to avoid redundant code
Refactored some methods/attributes regarding the UserActionLogController and created a new class to maintain the MVC pattern.
Refactored to eliminate cyclic package dependencies.
"ROO-847: Refactor addons' dependencies.xml files to be more generic so to allow maven plugins, repositories, plugin repositories and properties"
Refactor registerAppModules into service
Minor refactorings and cleanups
Small refactoring for ease of unit testing.
com.xeiam ==> org.knowm namespace refactor (sorry for the inconvenience. Might be helpful: find . -name bar -type d -execdir mv {} baz \;)
"Refactoring of some method, added enums for Operators and Modifiers"
Refactoring a bit.
Yet more refactoring
Ongoing refactoring (Users / Roles / Groups).
some refactoring and docs
Settings refactoring (WIP)
refactor open attendance -> check in
refactored utility code
Package refactorings
Fixed problem with output commands. They hadn't been refactored. 
preparation for re-activation/refactoring of ALKIS workspace
refactor the model package to be called metamodel as it is what it is
Refactor 'sendMessageChannel' to 'msg'
"refactored handover packages for records, encoder and decoders"
Refactor the stream pipe to use a detyped flow
Refactored UsageValidator
Starting to add tests for refactored code and removing warnings.
Refactoring - rename to DxSAPSpace2 and add dirty list
refactoring.
Refactored
QAART-124 BasePageObjectRefactoring
updated createClient ui to use joda time LocalDate; refactored property editor to use LocalDate
refactoring to test the main parsEncoding method; added matcher for exact matching; fixed implementation for empty SupportedRequest and global supported encodings configuration
"added the concept of browser dependency, added xvfb as a new dependency, and refactored JUnitSession to start and stop all the dependencies. "
Name refactoring
BeansXMLValidationTest + OpenOn test on assignable beans + huge refactoring of all tests
REFACTOR: Moving function definitions to function package
Small refactoring Assembled final stack during fusion
tillegg og refactor
Remove SessionManager; refactor names of session classes; add start modules for new session arch
"[Cleanup] Small Cleanup of API, Reader classes. [Refactor] Rename TimerUtil to Timer."
Updates to the Biojava structure writer based on refactoring to MMTF-java
Continue refactoring
"Adding a parameter to catalogs, Pipeline and Recurrence information, and object refactoring (#1893)"
Made some techreg classes package-private (e.g. FormatRegistryImpl; required some package structure refactoring); moved package-private helper methods from the Format class to a package-private helper class.
Refactor org.activemq -> org.apache.activemq
Minor refactoring to mapsapi
#NAME?
Refactored all the management of server side HTTP commands
Commands refactoring
master side refactor partial commit
Added convenience methods to Transmitter + refactoring.
restapi: Refactor VM and Template mappers
Refactor actions with timeouts
Refactoring for ease of customization.
clean up and refactoring
Refactored: use get/set accessor naming style in SuiteConfiguration
Fixed serialization issues. Refactored to work with Collab Example.
PLAT-4705 - More bug fixes and refactoring
Finish refactoring (again)
"refactor, new method"
89526: [refactoring] Introduce Parameter chooses illegal default position for vararg method
refactoring model
WIP: Big refactoring of rendering now compiles...
refactor
Refactor the initialize method a bit
"XWIKI-3766: Faster navigation for image and link insertion * refactored link and image dialogs to use the new ListBox, allowing enter and double click to advance to next step. Also created superclass for all wizard steps using selection from a ListBox of elements Refactored the error messages and field markers to use the same class names across all wysiwyg wizards. Fixed a minor issue with error markers for the tree explorer."
[OPENENGSB-2281] fully refactored and added more tests
Refactored AddEvent into EventManager and added event editing.
"enabled acceptance tests refactored translator, had to make a trade off with losing thread safety to make class more readable"
JBRULES-761 Automate the Eclipse build -big refactor from org.drools.ide to org.drools.eclipse
"Major refactoring of spatial library. Should be roughly ready for public consumption at a high level, but functionality isn't working yet."
ParticipantService refactoring + Stage completion display.
Preferences refactoring. Fixes #594.
refactor
Modified the classloading to include all the deps in the maven classloader. This prevents hickups when we need the same classes across the classloader boundaries. Restructured the test annotations to enable more fine grained control of when we execute the setup methods. Slightly refactored the EJB2 tests in preparation for EJB3.
refactoring to associate the CipCiopManager to the user
refactoring
"Refactor top/bottom into a separate monitor class. After set amount of tournaments completed, end the game. Make Commands easier to print (toString is their key binding)"
refactor package
refactor ballroom package names
Refactored code to remove violations
Refactoring prediction integration
verdis/#8 refactoring
Refactoring of cryptograhy support.  Converted Cipher name and implementations to 'CipherService' and relative implementations to reflect their stateful nature.  Did more JavadDoc than I ever care to remember...
"Major refactoring of APIs, bug fixes, new features"
"daytimeline refactored to fragment of blocks, added fragment with list of events"
"Issue #261 - targeting field added to post, minor refactoring of FeedTargeting object, unittest added"
#NAME?
refactor MyPetSkillSystem to MyPetSkills
names refactoring
Numerous bug fixes and refactoring.
[KARAF-963] Refactoring of the web service
"Refactor ElementToGeneric to just be ElementTo (when the generic type is added, it reads much better)."
minor refactoring to take distance to queried point into account
LinkedListSort refactored + common project added
Refactor - moved BatToken to shared area
"CXF-2754,CXF-2755: some refactoring, adding unit tests"
refactor overload page
WyCS: refactoring the parser to support casts.
"Moved Subset to rewrite-api, which required a slight refactoring. Also added Response.gzipCompression() config API"
Refactored tests.
Small refactoring of common code
refactoring and documentation
api_refactor: move listhyperisor to datacenter
Refactoring
refactor all the method to avoid slow recursive algo
next steps towards handling multiple content representations of documents as required for the Continua HRN support; some refactorings and code cleanup
Refactor and fix PST processing
"JBRULES-1903 Pipeline support for DataLoaders and Feeders  -Refactored all transformation examples to use the pipelines, as dataloaders no longer exist"
Refactored some zoo keeper cluster code
Patch from Dave - refactored EntryResults to decode index information within the Entry Result itself; updated Index View to make use of new EntryResult
Refactor to expose ManifestParser.
Refactored REST APIs to allow a summary wrapper or a detail wrapper.
Refactor adapter usage
Minor refactoring - Moving persisters to common and fixing more on statistics.
Refactoring: extract plugin creation/destruction code out of the servlet into a plugin manager class.
Refactor blocking message processing in OutputBufferProcessor
"https://jira.jboss.org/browse/RF-8703, refactor template, fix fastStep"
refactor service
"Fixed: JENKINS-15088 - When the missed count is bigger than the covered, the redbar becomes too long +some refactorings"
CAY-1911 BatchQuery refactoring - make Iterable
small refactoring
Refactore modules.
Refactorings
REFACTOR: Moved to proper package
refactoring: extracted methods to helper class
[SMALLFIX] Refactor netty UnderFileSystemFile reader and writer.
refactor
major refactoring
refactor eim schema applicators and generators a bit to allow them to create stamps if necessary when stamp records are applied to items.
Refactor Ant build
Test refactor.
[HUDSON-5147] Refactored build history computation to make it testable.
Custom error pages with RDF response body ExceptionMapper refactoring HTTP & HTTP Status Codes RDF vocabularies built-in ModelXSLTWriter fix for no matched resource (in case of exception)
Minor refactoring.
Refactoring and introduction of extra modules and plugins.
Refactoring for viewports.
Refactor exception resources: deduce exception class out of generic type parameter Validate that every message has even number of quotes (MessageFormat requires '' if you mean just single quote)
Replaced all occurrences of Hashtable with Map/HashMap and ConcurrentHashMap + did more refactorings on the Repository parts.
Phase one of the scene refactoring (which will set the stage for all manner of happiness and joy).
#457 | Refactored CSV file to have base path and relative path
Fun: refactor some method names
SONAR-3755 refactor issue search
#1153 - Refactor move ExtraTypeFactory out of io.ebean.plugin into io.ebeaninternal
"Implemented import/export logical architecture, refactored resources, removed unused classes"
"Ticket #7: Implement a logging interceptor for web service requests and responses  * Heavily refactored and simplified spring-based JPA configuration in preparation for having to deal with different persistence units used by different modules.  * TODO: Create a JPA persistence context for schema ""LOG""  * TODO: Make the ear-level application context a parent of our new web application context"
refactor(rest): refactor common query functionality
refactoring CommandLogInterceptor. - remove the dependence to Runner. - remove the dependence to receiver class.
Refactored export link generation
refactoring
fixes and refactoring
First Shot at dynamic Upsert Still missing table alters when a dynamic column is upserted Missing case sensitivity Refactoring of Dynamic columns between select and upsert test for column ambiguouity test for wrong column families Added tests to DynamicColumnTest to test these issues DynamicUpsertTest for the upsert part
refactor
"Refactoring handling of Java7 compatibility functionality, to further encapsulate it"
Access control refactoring (#11217)
Heavily refactored BerkeleyDB datastore.
package refactoring
Kumaran & Kiran | #356 | Added handler for Child immunizations form. Refactored Child report service and schedule service to work with FormSubmission.
minor refactorings
refactored traffic lights update and application to vehicles
RF-9563 collapsiblePanel: refactor server event and listener
refactor
Fixed teachers looked up in strategy. Since refactorization it should no longer be checked the teacher but rather the preferssorships in person.
Refactored registries and aggregation methods
refactoring + clean code
RF-11182: refactored notify and notifyMessages to follow RF JS patterns + support to CSV
Improve planar graph function to support large datasources. Change in k_means to take into account intervals Add some tests Refactoring a function st_addz
"Adding new algorithms, refactoring"
Server-side processing injection use refactoring.
Further refactoring. The new reportgeneration code introduced in the H1 part as well
Refactored KeyConfig and KeyConfigDialog
Updated invokable to include enclosing type and started refactoring SyncProxy
Refactored big methods into smaller ones and fixed some errors that seemingly fell through the chairs
refactoring persistence layer
TEIIDDES 255 - More 7.0 integration and refactoring TEIIDDES-255 Upgraded to latest Teiid 7.0. Required fixes/code refactoring due to removal of last teiid-common-internal jar.
"refactor PropertiesBuilder and related types into ApiMetadata and ProviderMetadata, and update all usage"
Refactoring package structure - step 4.
"refactor so that config tests are skipped if Augeas is not available, so tests will pass on systems without Augeas (e.g. Windows boxes)"
refactored BeansExplorer from beans.navigator plugin into generic SpringExplorer [fixes #532]; deleted obsolete beans.navigator plugin; refactored BeansModelLabelProvider into generic SpringUILabelProvider; now uses varargs for <plugin>.getFormattedMessage(); refactored image flags into separate classes SpringUIImageFlags and BeansModelImageFlags; renamed and refactored Spring IDE view category; removed obsolete required bundles from MANIFEST.MF
DDF-241 Moved Abstract Federation classes to implementations project. Corrected Federation Strategy classes for new refactored implementations. Deleted i4ce.png because it was moved to impl project.
refactor for preject renaming
REFACTORING Renamed PropertiesSource.addProperty to setProperty
refactoring package names
"Routing messages are now handled by the relay peers, refactored RelayManager"
CAMEL-1153: major refactor to camel-ftp
#NAME?
Refactoring of EIK UI
[AS7-974] arquillian embedded deployable container refactors and code formatting
Refactored everything security related into security packages in all hierarchies.
NXP-12286 refactoring : extract common patterns in abstract objects
"Bug 425955: NPE in DwarfReader - Fix parsing .debug_line section in version format, part of Dwarf 4. - Refactor in a separate method reading initial length field to consistently handle 64-bit dwarf format"
Refactor Query Test
#NAME?
Character matcher fixed and refactored. This should take care of bug 1433523
ZipNum system refactoring: ZipNumIndex: main interface for loading zipnum content from a zipnum index ZipNumCluster: an extended zipnum interface which supports a location and lastblocks file
refactored client connections
#NAME?
Start of refactoring effort.  Make construction of alignment object simpler.
ftp-client: Refactor control channel implementation
Refactored stats classes to call out their OSXness
big refactory - strech does not work yet
Global refactoring
API Refactoring and Bugfixing
Resource constructor refactoring
"archetypes-ftest: refactored/fixed kitchensink and simpleapp ftests, added missing arquillian profiles"
Refactorings for workflow support
Bug fixes: ACT-786 and ACT-781 + refactoring of GUI for allowing tree based left pane
"Addresses the failed configC test (TestRESTAPI.testModifyDatastreamByReference) as reported in FCREPO-614. Addresses authentication required on every resource as reported in FCREPO-615. The solution takes an approach similar to FilterRestApiAuthn rather than stepping up to the other issues surrounding REST API authN as noted in the tracker, which apply to both FeSL and the legacy authN. Refactored FedoraWebXML and fleshed its corresponding unit test. Eliminated the excludeURIs init-param from AuthFilterJAAS as this was an even worse hack for dealing w/ configuring authN."
refactor
Remove hack for timestamps; more test refactoring.
Refactoring - no functional change. Renaming ServiceUn/availableTask -> DependencyUn/availableTask.
#NAME?
[CAST-1773] Minor refactoring while review.
bankrupt commit: reorganize/refactor
"Implemented refactored RDBMSDataStore.java, fixed issues in rdbms package"
refactored 24
367547 refactored and moved update logic to ProjectConfigurationManager
Refactored a bit to be able to throw better exceptions (serialized at times)
Refactored codes for meta data parser and handler.
refactor
Refactor Functions to files of their own.
Refactoring + Websocket5 Implementation
Refactor SystemEntityMetaData to SystemEntityType
o Removed an unecessary await call that was disallowed in Netty. o Fixed a reading bug in BlockLogReader. o Refactored tests to allow starting master and slaves at different times.
"SCRUM-987: check also that accessControlProvider is set - refactored utils to be able to check for existing and non-existing xPathExpressions - enhanced javadoc, fixed messages"
refactoring: removed framework from root package name in codegen
"Calls provider, Refactoring"
Begin refactoring the unit tests for the plugin
refactoring
CDB improvements:   - Added AbstractParameterCommandDescriptorBlock and AbstractTransferCommandDescriptorBlock  - Updated CDB's to extend the correct abstract CDB  - Fixed member names to reflect specifications  - Fixed getters/setters for all CDBs  - Other minor refactoring/cleanups
ti: small refactoring for lazy resolving of RTypeDeclaration member types
Refactor Synesthesy interface and cache classes
"refactor, added interface DataItem"
Refactor data access.
Refactor of all read/write methods.  The read methods now auto-detect the file type while the write methods have an optional file type parameter.
refactored ProcessedOptionBuilder to the standard æsh way
reducing complexity by refactoring
refactor sql parser
Fixed build errors from refactoring.
refactoring and adding support for timeouts which prevents waiting forever cause sometimes a Process.waitFor() does never return because of whatever reasons.
"#200 refactoring model, common interface for SimpleAssignment, TypeConversion and MethodReference, introducing decorators"
Refactor and simple the transit data bundle building process with a number of improvements:
Refactored. Get FileSystem from dst path to permit writing to local fs if desired.
Refactor tooltip getter/setter/field to tooltipHtml where appropriate
"cleanup, refactoring, get rid of an extra hash"
OpenShift: New tests and refactoring
More refactoring/docs cleanup for the content source changes.
#302 refactoring of MappingCreationProcessor: using Builders to address smaller concerns
Refactored service integration tests to use inheritance. (v1 TK-09243)
"Massive refactoring to improve performance and avoid opening a browser before every test, even pending ones."
Refactored to support multitenancy
DDF-463 Refactored all the handlers to their own directory.
Refactored token management into OauthClient.
ASNN-198 http://bugs.sakaiproject.org/jira/browse/ASNN-198 Refactor use of generic-dao to ensure it is not deployed to shared Step 2 - fix generic-dao piece
#NAME?
experimental refactor of selector
JBRULES-1408: Refactoring of ruleflow to act as a pluggable process engine
deep refactoring
Refactor classes and add comments
Refactored connection routing and protocol execution code in the classic exec chain
refactoring
DDF-1467: Update UrlResourceReader to securely handle file protocol   - Refactored logic in URLResourceReader and OgcUrlResourceReader   - Refactored logic in AbstractIntegrationTest and TestFederation to use the new UrlResourceReaderConfigurator   - Condensed logic in unit tests
Entity Package layout refactor
"Refactored, fixed bugs, and made SharedSDOEditor work!"
Small refactor so AssertException could check also exception message
MInor refactor
"Refactoring Object Id handling, after realizing first attempt is too limiting"
do refresh from local before deleting do dummy search before performing refactoring
Refactor: Renaming to RemoteFile to better match the java api
Refactoring of transformation assistants: Code from the LetBeSt assistant has been generalized and moved to the parent class (TransformationAsssistantCG)
refactored BeanTraversal
EST-810: refactors to use new DocumentTemplate and PaperclipForFixedAsset
"Starting to refactor the controller. Created an interface, renamed some functions, removed the preparser responsibility."
Various package refactorings to support uniform architectural style. Cleaned up the HttpUtils. Added better handling for Exchange creation with default ExchangeSpecifications. The MtGoxDemo now actually works instead of being a placeholder (this now supersedes the public data demo). Introduced the BaseExchangeService which handles storage of authentication credentials and exchange URIs etc. Tidied up MtGoxPublicHttpMarketDataService to use the BaseExchangeService linkage.
Started refactoring for enabling health checks. Moved them into the ServiceFactory interface.
"Complete refactoring of cycle repo API, not yet finished completly"
test(engine-integration): refactor deployment aware job execution test
"Adding DomainRoot causes split in core, plus additional refactorings."
First take at fixing GH-87 - refactored interprocess communication to use a local file (tailing).
Refactor the tests to make them passing on both platforms. testCriticalProcess() is stubbed
Refactored towards pluggable Serializer
- Refactored arrays around. Moved UnifiedStructuredArray to be StructuredArray. - Kept old StructuredArray as SingleDimensionalStructuredArray for now (alongside MultiDimensionalStructuredArray). - Will likely end up getting rid of both as StructuredArray now cleanly covers both cases.
Refactored OperationMessage translation/execution to the kie-services-client module
refactored a bit - address util was added
"refactoring, adding min sdk version 14 -"
"refactored highlighters (bolders), moved generic functions into abstract class ContentHighlighter"
Refactor panel methods; move layer tag.
"Added stubs for all ""TileEntity"" blocks in Vanilla. Fixed up some other classes for changes in the API as well as a slight refactor."
webadmin: Refactored code concerning Neutron agent
"slight refactor, fix openid-op example, fix open-id-rp login form"
Refactor @Deployment method
small refactor in DAO model
Issue #60: http://code.google.com/p/orient/issues/detail?id=60 Small refactoring to ONode and OArc + 2 unit tests.
"XWIKI-4015: The browser's Back button doesn't restore unsaved changes to the edited content * Added a loading panel to be used with the rich text area (using visibility:hidden and class=loading prevented it from being focused programmatically) * Refactored the plain text (source) editor to use its own text area (this way it doesn't depend on the hook element, which is not necessarily a text area) * Added a cache class to be used for preserving the client state (it uses an input hidden generated on the server) * Destroy the editor on window unload to preserve the index of the HTML form elements, allowing the browser to cache them"
pinmanager: Refactor pin manager CLI
Refactored the *ValueSetters to use a common base class and removed dependency on ValueModelTextField in SwingFormModel.
Make a refactor for Olap BufferedRandomAccessFile.
Refactor Handler responsibility
Refactor split the account controller into to parts (actual controller and command processor for user related commands)
added contracts refactored Grammar subclasses
refactor to rename all references of ComponentDescriptionProp (CDP) to the spec defined name of ComponentConfiguration
refactor
get the freebusy test passing until we figure out how to refactor
"[+]Recommendations, Refactoring"
refactoring nos testes
Refactor transient object store to store instances each specific type of object is an external object - TransientObjectStoreInstances.  This is much more efficient when storing large numbers of instances.
MIFOS-3866: refactor code to keep interest details and calculation seperate from principal based code.
pom.xml updated for Gatein compatibility. Minor refactoring.
Refactoring SynchronousDispatcher to allow for more reusability in the Spring MVC framework
Fixed IllegalStateException in Extract Function refactoring.
Refactory shellify methods to Commands class
"Refactory on drools-repository, RepositorySessionUtil is used by both gwt hosted mode and tests. "
Fix project owner permissions and refactor project admin service
Refactoring: renamed class responsible for loading persistence configuration.
refactoring of prov-json with QualifiedName
"GDMS : Some refactoring, remove the duplication and utilize  shared function in MetadataUtilities ."
Moved legacy state/run packages into unrefactored
Refactoring importer moved some logic
Refactored Function to Function1.
"some refactor, ExperimentManager  interface added"
Refactored and added code for example.
Refactor the name of both the directories and the artifact ids of the SuggestionBox project and of its subprojects
417561 Refactor annotation related code to remove some deadwood
"[ENG-85] Refactor position master, including type-safe identifiers"
refactored structure (removed giraph core code). overhead of maintaining giraph core in as maven subproject is too big.
Refactor Rhino evaluation and compiler logic for embedded JavaScript
refactorin tests - testing address service
XWIKI-5532: Prefix office import artifact names with the name of the imported office file XWIKI-5533: Refactor presentation builder to avoid using the HTML and velocity macros
Refactored: introducted am OOP design with Guice as DI Library
exploded integration test into maven submodules for client and server. refactored oauth. added basic auth.
Refactor method name
refactor with thx folder
Refactored DefaultMapperFactory to provided extensibility. Added Extensibility test Added capability to disable auto-mapping functionality Removed reference to convertersMap which was always empty after Converters refactoring performed in a previous version.
Refactored method to fix /tex reload command.
Refactored to use fewer static methods.
another wave of refactoring links to RDFa Core processing sequence added both for RDFa 1.0 and 1.1
Some Refactoring to manage MapLayerStore. Some Improvements when a layer has deleted from the Store and Map
refactoring Querydsl to new Type model
Refactored SipHeaders
fix a small bug in test case validation and minor refactoring
refactoring the token replacement in the config and inventory export files to be more efficient. everything should ready for the actual tests now
Test Refactoring:   - Minimize start of ES through use of testsuite to avoid - Separation tests implementation and declaration in suites - Minimizing start of Jersey
Refactor IndexSet and IndexSetRegistry interface naming (#3342)
pool: Refactor and fix state handling for volatile pools
"renamed redirection package to operator renamed several classes from Redirection to ControlOperator - its a more accurate name. refactored ConsoleOutput and ConsoleOperation added more control operators: &,&&,; - no logic atm though"
"[Bug #798] Refactor 'Remove Criterion' window, change it for a MessageBox window"
Platform refactor
refactor package
created bundle eu.udig.catalog.kml and refactored features and plugins updated classpath to standard JavaSE-1.6 instead of J2SE-1.5
Refactored string transcoder testing to work more generically.
Refactoring of policy validators
One more small refactoring
Lots more refactoring...
"Major refactoring to introduce Exchange, ExchangeFactory (with ExchangeOptions) and ExchangeService. The MtGoxDemo shows how get an ExchangeService to do something useful."
#NAME?
"Made case for seq1seqtype do the same as that for seqseq type. In addition, some code refactoring has been made"
refactor(cmmn-assertions): refactor existing cmmn code base
refactor of TripPattern code to make LocalStopFinder work with frequency-based trips
refactored imports in querydsl-hibernate template
"refactor, remove reset, use parseRest"
refactor
Refactored and refined command-processing and code-audited ChatConfiguration
Refactor and reuse some code of data laboratory.
Refactored handling of MediaFileLibraries
"Refactored part of spi (probe support) to allow ""detached"" probe-building (not from workspace)"
"Refactor, totally remove trend in the package"
refactoring
Minor refactor
CAMEL-9888: Refactor endpoints
Refactored class names.
PageResource implementation refactoring (now extends LinkedDataResource) XSLT fixes hiding PageResource metadata
Refactored FabricService and ContainerProvider to provide a single method for creating agents using CreateContainerArguments. Renamed CreateContainerArguments to CreateContainerOptions.
Refactor 1.
[IGN-144] Some refactoring of class names...
DRILL-271 refactor DistributedCache code. Uses hazel cast 3.1 and custom serialization.
"big refactoring to split the project so that sax and pull can be used separately, no dependency on Android jar, multi-module maven support, and placeholder for json parsing"
refactored doesImplement and doesExtend
Refactoring of services
refactored launcher API and implemented PEX extension point for composer launcher
Reporter refactoring in progress.
refactored method to get updated or create new phd participants
Refactoring new parser for C++.
"more robust freq detection, ui optimization, refactoring"
o refactoring of MavenVersionRange
Refactored Request object to extend DefaultDbSessionFuture to reduce object creation and consolodate functinoality.
ACCUMULO-2615 Refactor server configurations
AMEC-1877 refactored the createArticleInfo method
Refactored
Completion of Named Annotation Refactoring test
a bit of refactoring
metamer: attributes refactoring
refactored separator
#NAME?
Refactored window pane to it's own widget
refactoring to close all db instances
"Refactored GenotypeLikelihoods to use an underlying 4-base model. It needs to be modified a bit and then hooked up to a pooled model, but that is now possible. At this point, there is no difference to the Unified Genotyper."
"Generic mechanism for doing Attributes and Attribute Types on many classes. (Review code, and Refactor.) - TRUNK-2588 Invoke validators when doing service saves - TRUNK-2393 author: djazayeri + raff"
Refactored
Refactor the language SPI
"MONDRIAN - refactoring and performance enhancments for NativizeSetFunDef.  Introducing two new properties, NativizeMaxResults and  NativizeMinThreshold.  These were hard coded in previous revisions"
improve - refactor class name for redis api
#NAME?
"major refactor for api, core and schema repo"
SHA1 was slightly refactored. Sha1Digest and Sha1Digest.Builder were added.
"Refactoring of previous Ws, changing logic and removing all dependencies from VmeDaoSearchImpl.class which is useless."
Refactor model classes
Refactoring of inflation products (needed for the implementation of the ocnvexity adjustment) and implementation of a containers for datas needed in inflation convextity adjustment.
refactored branch statements
Refactoring and addition of tests.
Merging user-profile-refactor branch changes to head
Intermediate commit on indexing and complete refactor
refactored word guesser with interface addition 
Many refactorings
Refactoring of xml converter + adding definitions custom attributes
* extend functionality of filtering OSM stream to filter by tag key-value * refactor CLI interface * prototype serialization of loaded entities
"Last bit of refactoring for bonds and bond futures. The only thing remaining to do is to create a BondForward from the available information and calculate gross basis, net basis and IRR."
Refactor QualifiedName
Refactor Java PageTraverser into strategies
more refactoring
"Use JUnit4 in client builder, refactoring"
"JERSEY-1707: Exception handling refactored 	- Jersey ProcessingException removed 	- Mappable exception used for handling user errors 	- Exception mapping refactored JERSEY-1803: 	- added SPI ExtendedExceptionMapper#isMappable(Throwable)"
refactor util class package
Further refactor of datastore config.
Refactor class configs into a seperate package.
Moved output code in from atlas-feeds. Refactored outputting.
[MIN] DB Module: refactorings
"Refactor function, which validate memberships."
Refactoring to the LDAP Identity Store.
refactor packages
Issue 82: Refactor of code to use consistent names
a massive refactoring of the TestSuite.
praveen|Addding saleorder feed job and refactoring
LoG: refactored to use physical spot coordinates.
Further refactoring for readability
refactoring
"More refactoring; inlining some methods, preparing to do a wrapper class for DefaultMutableTreeNode"
refactoring nr.2
[GSCOLLECT-937] Refactor primitive hash bag test to extend from abstract primitive collection test case.
Refactor because it makes @md_5 mad
refactored so a popper owns a pipe as long as it is actively popping
Several usability fixes; added 'save as' functionality for projects. Refactored 'save project' to store to the same file.
dou und refactorings
"Refactor the ""current account id lookup"" to a common RpcUtil"
"Fixes #34: We now log if a specified test ran no actual tests. Also added various new component tests, for this and single test execution, refactoring the step definitions along the way, and made console log output more concise."
Small refactoring: setAdress -> set URI
"Added getSubjectBySessionId to SubjectManagerRemote and refactored the bean and local to rename the existing method implementing the logic.  Also, deprecated getSubjectByName.  Maybe this is premature but do we really want to keep assuming a single Subject per user?"
Refactoring forbiden constructor code and tests
log segment implementation cleanup and flush lock refactor
Refactor KeyspaceImpl to make it much nicer internally
rename temp refactoring
Refactoring register commands for template and iso
"Refactoring: got rid of the execution wrapper class that was basically useless, context consumer can now get a WebContext directly injected"
[refactoring] Extract method for creating reset type radio buttons
refactoring of EJBQL translator 
Refactoring and cleanup. Some methods extracted.
JBIDE-13847 : refactor source lookup tests
"backup pri refactoringu - odstraneny unchecked z DAO, odstranena fasada"
RichFaces test was improved and refactored
Refactored the derived artifact logic - it has been pushed into the persistence manager now.  Callers (like the atom layer) no longer need to do the derived artifact logic.  This allows Derivers to participate in the same JCR session as the source artifact.  It also more easily allows Derivers to modify the source artifact meta-data from content (e.g. setting the WSDL targetNamespace attribute).
[vp9] Refactoring bitstream reader
JNAerator: mother of all function signature refactoring commits (stop treating FunctionSignatures as pointers)
SONAR-6490 Refactor PermissionsWsCommons
cope with sending email issue with reset password feature and refactoring code
refactor inializing and get rid of most temporaries
DDF-2893 Refactor response filter to support cache-control (#1798) (#1828)
Refactoring
"refactoring the orms, daos and the test classes"
major refactor of nearly all plugins. inheritance broken out and replaced with composition. NAryOperation is no longer a plugin but just a helper class.
Refactor AbstractGridCoverage2DReader to remove all direct calls to the variables that assume one layer.
CSPACE-429: Minor code cleanup in ID Service following refactoring.
refactor discovery to use the new Pinger; remove a bunch of pointless/dead code and threads... yay!
-> Refactorized test project -> Refactorized poms in bundles an their parents
[PAXURL-63] Refactoring & zip/jar scanning
"review IdentityStore API, refactor Membership API, JavaDoc"
"[CXF-4112,CXF-4151] A lof of refactoring to do with supporting different grants, preauthorized tokens, etc"
Refactoring of CAS to enable reuse
"Remove unused classes, Refactor, and Improve documentation - RESTWS-22"
"New Feature: added the regent QUC menu, created a new render, refactored existing code to acomodate the new features, added a new subtype of InquiryAnswer for the regent"
Refactor GroupMembersFactory
Refactor test strings to fields and the response creation to a helper method.
"Emails Refactoring :  - Changed Message to support different recipients (to, cc or bcc).  - View email must show only the sender information of that message  - Message interface simplified"
Major refactoring of Criteria model: - CatalogEntries simply keep track of IDs of Criterias - Spring is use to instantiate Criterias based on registered IDs. - Introduced a Spring stereotype annotation for MetaDataCriteria implementations.
"Loosened restriction on Application URL checks. Now URLs that do not match a domain are still acceptable. Refactored application descriptor initialisation from the wizard pages into the delegate, and fixed bug with Java web descriptor validation that was not detecting whether app URL is set or not."
"REFACTOR: - code changes to accommodate .NET into WALA. A .NET class maps onto multiple source files, and thus these changes."
Refactoring pieces of the metamodel classes and JdtUtils API + Fixing incomplete jaxrs-api jar
"refactored GraphRoadModel.doFollowPath(..), it is simpler and easier to extend"
"Fixed error related to --help, refactored and added doc."
Issue #1404. LRU cache was replaced by 2Q cache. Cache API was refactored to provide more robust approach for cache management.  Thanks to @logart !
Further refactoring of LinkDiscoveryManager.
#NAME?
refactored constants for Modulefile building.
Added a StatsTestCase and refactor all StatsTest to use it
refactor overall approach to generating resourcesync documents.  Code is now much more readable and consistent
"refactoring, remove any reference to wst/sse editor stuff from the core plugin. delegate to the xml plugin's services for whatever is needed."
refactored json internals to use Reflections2
[MIFOS-4055]Refactoring loan adjustments
refactor api error exception
Refactored kvdbJSON api
worked on mssql dialect refactored Template usage in SerializerBase added inheritance tests
refactoring of relations
Refactor: me.neatmonster --> net.xereo
Refactoring: Moved Scheduling to reducer to avoid ddos of a single website
Refactor package name
Refactored tests to be more generic.
refactor Actions and add Menubar
Some renaming and refactoring to improve readability
"REFACTOR: changed base class from WaybackServlet to org.archive.wayback.webapp.ServletRequestContext, and added getter/setter for Spring configuration"
New items have been moved in the configuration A morph level up listener has been added Minor refactoring A font renderer has been added to the RenderUtils
"Adjusting column size, another rename refactor"
test refactoring
Update issue #181 Status: Needs-Documenting Refactored the EventSerializer class. It is now deprecated and replaced by the more generic Serializer<T> interface. Is completely compatible with the already existing public API's. Developers that built their own EventSerializer implementations may have to make minor changes.
refactored the FabricServiceImpl and JmxTemplate into the exported service package and moved the rest of the service package into the private 'internal' package. Also split fabric-commands into fabric-core so it can be used stand alone outside of the commands (which tend to come with a hard wired fabric)
more refactoring of the pojo & bean components to remove a fair bit of code and simplify things
Minor refactoring in MethodGroupsHelper
refactoring to enable context-sensitive queries
Refactor TAIP decoder
Java backend: more documentation and some refactorings
Refactored the is-in type relationship predicate
'refactor+fix+executor' (a lot of stuff)
Refactor rules appling in the VirtualNetworkApplianceManagerImpl
JBIDE-18043 VPE: Fixing # for 'refresh-on-safe' option. Refactoring
Refactored to properly handle complex boolean (and/or) expression. Also updated to not require is-defined element which new CalDAV spec will remove.
RefactoringWorkingCopyOwner - fixed typo in name and moved to where it's used
Internal refactorings so that the Spring code can use more centralized code.
17001: Refactoring: modified classes.
ItEr43S09ImplantacionAplicacionItEr42S13: Refactoring. Splitting buildResourcesText into several methods.
Refactor and fix languages bug
Feature #351 : adding possibility to force a subscription to a user or a group of users - wiring new subscription management - adding a new tab on subscription management tool localized in personal space - modifying subscription model structure - moving version of busCore and adding subscription SQL modifications - refactoring some code
Minor package refactoring
Refactored pixmap packing.
[OPENENGSB-3602] refactored the ManipulationUtils a little bit
refactoring change the method getGutoMaiaProfileFromFile to loadXml
proxy reference refactoring
huge refactoring of rest bot tests
Further refactor of regimen code to support TB regimens
"decouple JPAIdentityStore from AbstractIdentityStore, refactor credential handling SPI"
Refactored PortPairs as optional.
refactored html element hierarchy and make some abstraction
"Major refactoring so that we can do a search using just a matcher, without needing to produce a suggested fix or error text."
More Event Refactoring
refactored package names to start externalization of remote pai
"SCA composite importer library that work with the ragistry api, refactoring and moving nuxeo free classes"
Refactored some class names related to event_details.json
refactored input metrics handling
Refactor EntityMetaDataResponseV2 to EntityTypeResponseV2
Refactored wizards to comply to the same rules
"refactoring: renaming class ""ResourceResourceAgentView"" to ""ResourceAgentView"""
refactor mapping service
Refactored validation (backward compability broken :( )
Refactor obr
some restructuring and refactoring of csv dataio in order to allow for use in VISAT
added index queries to rest api; unit tests for index queries; small refactoring of helper to build testable domain models
refactoring sameURL
NXP-3596: Refactored site module to allow easy extension in other modules
Minor test refactoring
"refactor codes for module, report design and library."
HEMERA-3199 Refactored HTTP proxy configuration for SignavioClient - Added proxy parameters in gui - Added IT for proxy for CI (profile: proxy)
Refactored some of the EclipsePreferences hierarchy.
Major refactoring.
"Extracted class for navigation, refactorings"
Refactored. Now more logical API.
 - shiro login  - refactoring of vaadin theme
Refactored plugin loader to use more methods for higher flexibility.
#NAME?
Refactoring
Started work on refactoring TransactionPuller for being unit testing.
Refactored configuration and RedisDAO creation
refactoring of DefaultProvisionSource
"refactoring nettool code, add NIO client wrap code that is a simple template of client programming"
"Refactor ""previously used values"" content assist"
missing labels issue passes test; refactorings for concept results
XWIKI-14348: Allow registration of custom events in wiki pages * Moved DefaultUntypedRecordableEventDescriptor to the default module * Renamed UntypedRecordableEventDescriptorWikiComponentBuilder to UntypedRecordableEventDescriptorComponentBuilder * Refactor UntypedRecordableEventDescriptorComponentBuilder * Fix unit tests
Refactoring done.
"Debugging actions update, debugging packages refactoring, added ruby search open action"
Settings refactoring (WIP)
"Refactor code with comments, logging and exception handling"
chg: refactoring
"small refactoring, added tests"
[AER] Refactored some similar abilities and effects
"JBRULES-2305 : Update the verifier to act more like the drools-api JBRULES-2306 : Allow the user to add custom resources that verifies the rules -Big refactoring, also did a small change to the way that the verfier components are related to each others. -Changed RulePossibilty and PatternPossibility to SubRule and SubPattern that better describe them"
Fixed LayoutManager and LegendPainter synchronization issues. Refactored how GlimpseCanvas disposal works. GLEventListener dispose() callbacks should no longer cause attached GlimpseLayouts or GlimpsePainters to be disposed. Also removed a number of old and unused classes.
InputNumberSlider refactoring: more type safety added
type refactor
FALCON-592 Refactor FalconCLI to make it more manageable. Contributed by Balu Vellanki.
Refactored code to deal with new core/db project. Moved some legacy DAO objects from opennms-services into opennms-model (capsd Db*Entry.java files).
"Initial commit for DriftMetadataParser, refactoring plugin parser tests"
Refactoring code gen
- refactored 'ValidatorReporter.calcStartEndRange' into 'TextUtils.trimWhitespace' - minor updates to IBuildParticipant javadoc
Refactor / cleanup code generator framework
CSPACE-725 - Refactored instance creation methods into a shared utility class. 
"Refactor PassiveStatusKeeper to make it easier to enhance configuration:- Create PassiveStatusKey and PassiveSTatusValue objects to track information- Move event processing into config where processing information lives- Refactor processing code to isolate selection of key and status values- Write sample test to be enhanced as function is added"
SB-128: Refactor the org.carlspring.strongbox.jaas.* into org.carlspring.strongbox.security.jaas.*
"updated kraken-ca to use kraken-confdb and refactored all code. however, module test is not completed yet."
SessionManager refactoring to support events even in a web environment
"fixed #35 #44 addressed #45, major refactorings, added documentation and tests"
HDFS-8397. Refactor the error handling code in DataStreamer. Contributed by Tsz Wo Nicholas Sze.
Major simulcast implementation refactoring.
refactoring
refactor(engine): reuse scriptengineresolver at global and PA level
Refactored package names.
Refactoring bootstrap-core package structure
[jayes] refactor flyweight and arraywrapper classes
more refactoring and testing of web-frontend
Code refactoring of DTO objects (from ShortXXX to XXXDTO) Implemented responce method getChildrenElements() in FolderService that handle folders and layers together TODO LayerDTO must be finished
A lot of refactoring and now the group collapse state is persisted through cookies
POULPE-469 Testcoverage and refactoring for Database backup functionality - small fixes for Exceptions & GzipContentProviderTest
Refactored and added new unit tests
Refactor a util class so it doesn't get run by the test suite. 
ACT-1021 Refactoring: Moved error propagation code from ErrorEndEventActivityBehavior to separate class ErrorPropagation
Refactored servlet so that it no longer uses unreliable instance variables.
Merge with ONYX-663 modifications about configurable variables refactoring.
Refactor: extract fromJsonObject() method
"Refactored with ""Design for Extension"""
#902: Refactored fab tests to io.fabric8 package naming
SL proxy refactoring
"Taint safe objects config: Refactor for consistency, minimal / no effect on performance"
Refactoring and renaming to match javax.vecmath
MIFOS-4542: Rename ClientPersistence -> LegacyClientDao : ease of identify refactored classes
refactor SlideShape class
refactor AbstractCollection listeners tests
Refactor packages for event / gui
"HV-436 Refactoring GoupSequenceProvider check, adding comments."
XQUP tweaks cont.; Constr() class refactored to allow fragment constructions by update operations.
refactorings
Some refactoring of tests to better support the introduction of ZooKeeper
Introduced concept of channel and cursor into the api; lots of refactoring going on. Still massive bugs to fix.
Walker test system refactoring.  All MD5DB related functions are now in MD5DB.java. System has the concept of a local and a global MD5 db.  The local one is like it operated previously.  The global one lives in /humgen/gsa-hpprojects/GATK/data/integrationtests.  If the system can find this directory then MD5s will also be read / written to this location.  This means that gsabamboo will print differences as appropriate.  And all users will in effect have access to a complete history of MD5 file results. A few minor code reshuffles changed VariantRecalibration and VCFHeader test files.
SOC-737 : refactored unit tests
Refactoring of straightSkeleton in progress
initial program guide processor implemented.  refactored common android service methods to superclass. refactored dvr service classes to reflect these changes.
ACCUMULO-3238 Table.ID Namespace.ID Refactor
"rationalize SPI, switch to a returning singleton on manager deserialization (and remove implements Serializable on helper classes), add AnnotatedMember and alter InjectionPointImpl to take AnnotatedMember, wire in EjbResolver to SimpleBean field injection, refactor bootstrap slightly to inject externally specified helper classes into Manager"
"Refactor ajax / non-ajax method, reorganize html files"
Began initial 'composition over inheritance' support for configuration.  None of the additions are used in existing code yet - they are there as placeholders only at the moment to be used later when refactoring existing components (e.g. IniWebConfiguration)
DDF-1786 Refactored CswSource refresh to use lambdas and consumers
fixe bug with primitive type and refactoring
relationship refactor stage 1
Merge #177 AtmosphereConfig refactoring
Refactored non-reviewed patches property to implement a GerritListener.
Refactoring
"ISIS-1752: factors out MenuBarsService, refactors Wicket UI to use MenuBarsService."
WELDX-19: refactor
MongoClient refactoring
more ruin refactoring
Improved step logging and some refactoring: easier to tell when and why a step fails by looking at the console output.
"added single sign on session service, refactored the package"
Renamed Guice refactor
refactoring to increase extensibility
some refactor
Refactored the ast creator ExtensionGenerator2
refactoring
#1195 refactored the jolokia polling so it can be used both with docker and child containers
Refactoring. Fix leak of process barrier state.
refactoring
security classes refactoring
Refactor Relationships Project
jira-100: working but need to refactor for better semantics
Kumaran | Refactored method names in Register Controller
#NAME?
New DSpace Integration and Research Results refactored and also bug fixes on teacher service distribution
"JNAerator: started refactoring of DeclarationsConverter, TypeConversion and GlobalsConverter into BridJ- and JNA-specific subclasses"
"MAGNOLIA-1522, MAGNOLIA-1520 - Implemented step1 and step2 as defined in Jira task, still needs some more refactoring. - extracted anonymous context which is always set by the ContextFilter and changed later on if login succeed"
Minor refactorings.
XWIKI-3997: Refactor Configuration module API to allow extending it with config data coming from wiki pages
"REFACTORED DrumBuilder to its own class which uses now package-private methods to ship values to the instantiated DRUM instance, which furthermore now contains a package-private constructor. REMOVED plenty of error-log-throw-exception anti-patterns and FIXED an issue where classes with generic types produces incompatible code."
"Refactoring and fixing #137 - collecting of mixins to be imported cleaned up, removed now useless awaitingArguments flag."
SOAP-1339: Units tests for implicit grant flow and refactored the unit tests for OltuOAuth2ClientFacade
Packages refactoring
Refactory now supports generic types FORGE-396
"bug 7509: adding search by id for security groups, also refactoring a few method names to use the new scheme status 7509: resolved fixed"
Refactored the base unit tests a little and added some more capturing methods. Fixed a few other minor issues.
refactored PDPScenario into Scenario
Refactored: InMemoryDatabase
refactoring
"-	Added new interfaces : IReportItemImageProvider, IReportItemFigureProvider, IreportItemLabelProvider -	Simplified interfaces for Property Editor view -	Property Editor view now always show basic item properties for extended elements -	Some refactoring and code fixing of current Property editor view extension framework -	Updated unit test and chart plugin.xml to use the new UI extension schema"
Refactoring RankingUIModel
Subwords refactoring; Changed highlighting of matches
BridJ: don't load classes when defining version-specific JNI bindings and rather use ASM (+ refactored BytecodeAnalyzer)
refactoring working
Major refactoring; properties are now dependent from Context instance.
Refactoring based on code review (more work to be done here). Internationalized messages and introduced Log4j logging.
ResourceMethod interceptor support.  Refactored security into an interceptor
refactor(debugger): reorganize package
#NAME?
Refactored identifier validation and CommandLineConfiguration class
Refactoring app-schema with web service backend support to allow functions as linkedField in feature chaining. 
"[REQS-609] refactored codes, added docs"
[JENKINS-21343] Refactoring to isolate group specific logic
Refactorizing VCF/Jannovar output code.
* refactor some existing plugins * initial implementation of some other plugins
Bug 190612: implement createResource() for IDE Filer.  Refactor underlying code in order to achieve this.
refactored queue package. renamed some classes. fix of bug #544
#9 logger support implemented using decorator. Changes include some refactoring as well.
Refactoring to handle tasks hierarchies
DialogEditor refactored.  - Added binding of the editor to openened dialog.  - Added binding of edited properties to the dialog field. - Improved interaction. 
Code clean-up and refactoring in SVG buttons
Refactoring of the fabioz changes
refactored test application contexts
refactored TerraformContext to abstract class
Refactored SPDY modules and added ALPN tests.
Code refactor and fix a potential bug.
Refactor status service using varargs
-refactoring: XmlDocumentRefundsInitialisation() --> xmlDocumentRefundsInitialisation() -Modification dans methode serialyzeReclamation: la methode createRefundNode( int i ) --> createRefundNode()
updates to handle FB refactoring
Factored and refactored debug interface such that it is maximally interpreter-independent
SONAR-4923 Quality profile refactoring to follow convention
"SAK-1309 Refactored JSF backing beans for overview and grade options to use domain objects directly, rather than transferring their data to UI-specific objects. This required making all domain objects serializable. This is not a bug fix, and should not go into 2.0.1."
Refactoring - move ZipArchive to package pl.edu.icm.coansys.importers.utils
NOJIRA refactoring of common with regards to movement of document handling code. new pacakge document is created. also crud is pushed down to storage client from repository client. test: at service level: mvn test successful (after ant clean deploy)
"Tested flow on uploading ReservationRequests from file and processing by mock in Taxi-Serivce +Taxi-service rest requests divided on ACCEPT,REJECT,REFUSE and GET_CLIENT_DETAILS +added ReservationRequest validation exceptions +@Version to some entities +updated a few JSPs and refactoring"
Added support for refactoring history
"A lot of refactoring: safety checks, remove LinkedTransferQueue, move code around, unit test coverage..."
Refactor UI preferences
Refactor for Beta Release
"More refactoring, making message-sink XA'd."
Start refactoring dirty check for collections & map
[FIXED HUDSON-5332] refactored P4CLIENT environment variable to pass in modified client name when building on remote nodes
refactor more to use controllers (#87)
"Refactors package names and structure to hs-hannover.de domain (including license headers, pom.xml, etc)"
Refactored some things so that the ConnectionSettings and ControllerProcessorSettings can be displayed in the same dialog.
Refactoring.
Refactoring tests
"page-fragments: added fragment for inplace select, refactored inplace input"
Refactored Variables usage in TypeContext and PropertyContext
Refactored exception mapper in order to allow reuse in other exception mappers
"starting to refactor to be more like jdbc with a connection, connection manager, driver...with a view layer on top to provide view-specific access to the data."
"JBIDE-19795: Adding UI for ""Bower Init"" launch. Refactoring"
"Introduced new RestErrorCallback as a specialization of Errai's standard ErrorCallback, +minor refactorings"
"DialogueHelper: 	- Code cleanup and refactor. 	- Implemented the following timeouts: 		* WSDL Retrieval timeout (when the class is created) 		* Connection timeout for each WS invocation 		* Receive timeout for each WS invocation"
refactor HTTP headers
More TextUICommandLine-related refactoring. (Making CategoryFilteringBugReporter a top-level class.)
More refactoring... the commands are refactored now :)
Refactor PatientEditListener to use MpiFacade instead of MpiPatientUpdater.
Added offset and length parameters for index entries. Refactoring of AbstractIndexer. Moved old parser specific stuff to the appropriate subclass.
CAY-1194 problems with relationships when using nested contexts and ROP fix & tests & ToManyList refactoring
REFACTORED disk file management from the DiskBucketWriter to the DiskFileHandle class
JBEHAVE-308:  Refactored PropertyBasedConfiguration to extend MostUsefulConfiguration. Changed properties to reflect new default configuration.
refactoring for ConvertStrictToContexts
Moving all helper class to CDIBase instead of CDITestBase + refactoring QuickFixTestBase
refactored names of two methods in ContentViewer and added missing getMethods
"refactoring, blinds pay action handling, tests..."
Core: refactor value storage (#339).
"Refactoring: Created shared code modules (""jangaroo-tools-api"" aggregator) containing the compiler APIs and some utilities, reused by Jangaroo IDEA Plugin. This allows one IDEA plugin version to load different compiler versions via a custom class loader, as long as the shared modules are not changed incompatibly. So far, the shared modules are in the same git repo and Maven aggregator and thus released every time, but one should still take care not to change them in an incompatible fashion."
"Bit more work on DataInput source, test refactoring"
refactor broker-service
Refactor to follow other modules
Separate login page to fix the new user registration flow. Refactored JSPs to move hbase calls to UserManager
initial refactoring into modules
updated ImagesIndexer to inherit from AbstractIndexer and to batch get the observations from the observation server and batch commit to the impc_images core. Needs testing!!!!! Previous version worked.... could refactor so not using prepared statement but sql as a map - but as only takes 4-6minutes to run currently anyway...
refactoring and moving the launcher utilities to wala.util
Refactor Resumable mechanism in preparation to implements a way to transparently implement the mechanism using existing AsyncHandler.
multi-adapter refactoring
"Revert ""HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang."""
Refactor BeanConfigurator tests.
DefaultRecordStore refactorings
#NAME?
still working on performance improvements: refactored Paths in order to avoid use of IOService
Refactor rename reflect.Property to PropertyDescriptor to avoid confusion with new exp.Property
refactor ElkContainer
ACT-696: refactored compareTo on LazyLoadingQuery and moved it to the items themselves.
Created unit tests to verify KeyedObjectPools conform to new contracts. Refactored KeyedObjectPool implementations to comply with new contracts. Improved JavaDocs for KeyedObjectPools.
TrackMate_: big refactoring to make tracking tunable
Refactoring
Test refactoring.
refactor common operation scheduling code into a util method
Refactored how the test operators are parsed and made the filter operator to be handled like most other operators
full refactoring of the Prolog side API
refactor method names; prefix with _ if only called from xml parser
uses now RefactorClassRegistry#forName(String) instead of Class#forName(String)
test code refactoring
Major refactoring of CascadingDomainBuilder that allows to build multiple domains with one cascading flow.
Harshit | Small refactoring on DFL integration.
Refactored tag/widget/component to be org.zkoss.fontawesome.Icon
refactor out ResourceDTO so resource-cli does not depend on it
"Refactored GraphTest, and GraphPageCategorical to latest test spec."
[Consistency Predicates] Refactor: Updated the code of the BPlusTree
Refactor poi
Refactored initialization of GroupAccessControlManager and added methods to retrieve group managers by prefix and distinguishing hash.
"refactor: download, server, packages structure"
refactoring?
refactor the save method so that it is available to all and null safe. also added a readResolve to handle when null properties are deserialized
Almanach refactoring: - handling PDC - adding ContributionManager which takes in charge the getting of contribution data from a centralized service. - adding ContributionLocator and using it from contribution permalink service
Heavy refactoring towards velocity based code geenration. Please note: GWT tests will currently fail!
"initial program guide view, refactored some classes into more appropriate packages, initial program, channel, and recording delegates created"
Refactored MapResponse unit tests
"BinarySearch, Permutation refactor"
Refactor RemoveUnusedVars to allow for logic to remove properties.
A number of major and minor refactoring efforts to make api and presentation code reusable across projects.
further image resize refactoring and implementation
Refactored: extracted class body generator
Refactoring LeaseCalculation; enhancing CreateRetroInvoices to accept leases; renaming InvoiceItemsForLease methods
DDF-2644 refactor endpoints and fix the put bug for metacard edit endpoint
First step of refactoring into multiple modules and inclusion of both CDI and Spring annotation impls
Renamed according to recent refactoring discussion: IRing.getOrderSum() -> getBondOrderSum()
"ACT-755 refactored related content UI, added file-upload"
refactoring & cleanup
some refactorings - bug 344989: Redesign UICallback subsystem https://bugs.eclipse.org/bugs/show_bug.cgi?id=344989
[test] Various refactoring to make easier to use for integration tests
"Refactor the association proxy support (mostly ServiceSelectionStrategy) to implement AssociationServiceListener interface as opposed to AssociationListener. The difference here is the AssociationListener is controlled through the AssociationManagement. The ServiceSelectionStrategy implementations were not being told of service transitions. Having them implement AssociationServiceListener allowed them to directly register with the Association class, and be correctly kept up-to-date."
185338 [refactoring] [dcr] Extract Class
"continued refactoring of namespace management: prov-n, prov-dot, now prov-json"
#NAME?
"#750 Refactoring, moving selection parameters to common SelectorParameters, repair"
Refactor L_PlayerInteractEvent to L_PlayerInteract
"validating email uniqueness, little refactor: validations splited from the base servlet into a new static helper, mail -> email"
Refactor emitter to count line numbers
Refactor mapping writers
start of refactor of the project overview panel
"Major refactor, javadoc, optimization, all teh things."
REFS #55: Thumbnail refactor.
minor refactoring
Refactor SVD decomposition results
"CHUKWA-97.  Refactored FileTailers, added LWFTAdaptor."
"Added metadata on the file, most of this is a refactor"
Refactor FieldScopeImpl into a logic class and a holder which pretty-prints invocations for the user. This provides meaningful toString() for UsingCorrespondence.
Refactor common code to abstract HAL class
a little automation refactoring
Refactor SpatialPrefixGrid. It's an abstract base class.  It primarily uses a Cell class instead of Strings.
Protocol refactor - part 1!
refactoring
"Refactored all create(displayId, version, ...) methods to use common error checking and uri creation calls."
"DNA-467 refactored the search engine components, moving the general-purpose classes (i.e., those that don't depend on Lucene) into 'dna-graph'."
"Replaces the REMBNotifier and NACKNotifier with a generic RTCP notifier, which also extracts report blocks from RR and SR packets (and is a work in progress). Refactors the transform engine chain."
refactored names for package and test package
TAJO-931: Refactoring GlobalEngine
Refactored alot around finders and repositories
refactor: Extracts code in a separate method.
Maven cleanup and refactored siri support into module
Refactor the aggregator test plugin to its own directory
Refactored proquest language codes service.
Improved layout of refactoring UI
"Refactor Group to store value also as int[], float[], double[] and String[]"
Refactored Documentation interface a bit.
refactoring: for components working with DocumentInfo objects created XMLDocumentComponent superclass
Refactor code to separate collecting links from campaigns
Renaming and test refactoring
"Refactored, moved tags to api project"
Refactoring * AuditEvent Code in das Framework verschoben * Log4j Audit appender umbenannt
small refactoring of user detail stuff
Refactored some File attributes and added findDirChildrenByPath.
code refactoring done
Refactor Endpoints.
Complete refactoring of the project to use a Spring controller interceptor instead of a Jahia filter
"Energy handling as been added (Stars are providing energy, some behaviors are consuming enery) There has been some refactoring (@Needs and former @Need annotations)"
Refactored codes and add updateMumbleDesign() methods.
Refactored analysis bridge into two stage AST adapter -> InjectionPoint technique
Refactor code for Interactivity UI and Pie series composite
refactored some common core stuff into haskell core plugin
straight flush is higher than four of a kind straight flush compare to straight flush Some refactoring to the final code
Refactored Locator
refactored monitor core to seperate engine
Refactored class names
refactoring: extracting classes and cleaning up ReflectionUtils
Implemented FrameworkMBean. Implemented tests for FrameworkMBean. Did some refactoring in test classes.
Fix Bugzilla #268034 - Refactor chart code to use non-static copy method.
Refactoring
Refactor ConfigReader
Refactor test to handle TLS connect in HttpTLSTest and handle proxy for HTTP/2
refactor some stuff out to toplevel classes
refactoring to put envj bug free code under ste.xtest.envjs
CORELIB-SOLR Extended MongoDB functionality and Refactored Corelib-SOLR structure - TODO Unit Tests and complete Proxy EDM Fields 
Refactored HTML Parser/ContentHandler Removed Xerces dependency from ContentHandler
"wip. refactorings, bug fixes, immutables template being migrated"
CheckIn: Refactor CubeQueryExecutorHelper
Refactored tests to use the JUnit parameterized runner
ARQ-322 Refactored the prototype.
MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)
Refactor SVD code and tests
Made createGraphViz take a GraphStyle as a parameter. Minor refactoring.
#320 Refactoring
minor refactorings
"Style, Token and Flavor refactor"
little refactor
Minor refactoring to content-inspection package to better support multi-field inspections.
Refactor relations
Refactor BeanPropertyAssocMany findByParentIds use of raw expression
"Refactored autoindex REST API to be at /index/auto rather than /autoindex, to align with pre-existing auto index API."
Undo GWT refactorization.
"Refactored the DatabaseIDFactory and HttpDatabaseIDFactories to have a common superclass. added a test to verify the databaseIDFactory defaults to InMemoryDB in case the db is unreachable the test is setup to use HSQLDB, which isnt' up to par with MySQL yet and doesn't support resultSet.insertRow() so we can't test the real DB setup yet."
End of refactoring of Inferencing engine.  much better support for inferencing of complex expressions with multi parts.  Added many more tests for this.
refactor
refactoring: move VM GUI to its own package
JBQA-7354 Refactor the testcase to more accurately test EJBCLIENT-34 (scoped EJB client contexts) feature
refactor
"[PLAT-2271] Javadoc, mild refactoring"
refactoring:  use Organism object instead of String. Work on BioMartService
super refactor
REFACTOR: moved renderException from QueryRenderer and ReplayDispatcher to ExceptionRenderer. REFACTOR: changed interface of ReplayDispatcher to return a ReplayRenderer.
"Allow whirled.spot.data.Location to be extended so that games with 3d coordinate systems (or that track additional location information besides orientation) can just drop in their new Location class. Refactored Portal to contain a Location object rather than duplicate the fields, so that Portals can work unchanged with a 3d coordinate system."
Refactor the name of both the directories and the artifact ids of the Quickinfo subprojects
Refactoring; make a better home for the MalformedReadFilteringIterator.
refactor of MapWrapper
#NAME?
gcc-bridge: continued refactoring
refactoring cont.
Refactor rule fields to display inline normal fields
Fixed and refactored tests.
Refactoring siebelListSelectMvg returning List to siebelSelectMvg returning collection. Jira IDM-545
added CHANGES.txt + refactoring of SiteMap objects (thanks to Hannes Schwarz)
refactored and commented - rjrjr
#NAME?
Completed refactoring of message handling away from As2Servlet.
refactored to better method name
XWIKI-4728: Wysiwyg editor special character handling in links * Make the editor independent of the XWiki string entity reference syntax. * Refactor the link and image plugins to parse and serialize the entity references using server side calls. * Changed the way document full names are displayed in the Recent Changes and Search link wizard steps: use breadcrumb style instead of the technical document string reference.
DDF-2243 Changed ZipCompression to prevent duplicating history metacards and did some refactoring to --include-content (#945)
Refactor modules
More refactoring: moving JavaType to databind; other smaller clean up
refactoring
FEDERATE-375 post refactoring cleanup.  Cleaning unit tests.
refactor
"Code refactoring - removed duplicated code sections, extracted task to separate class, fixed issue with resources not being cleaned up in case of error."
* revert back to the original ode-trunk. (without adding jpa refactoring work)
Small refactoring changes in RemoteWebDriverFactory; info log about default selenium server args is not printed - there are no defaults
Refactor (including cleanup of Tomcat shutdown). Add test for MECLIPSE-183
Refactored according to correct terminology
First attempt on Bitmap refactoring and unit testing
scatter view: - some refactoring ... - axes still f***** up!
ENH: Service layer refactoring and testing
"code refactoring, stage 3"
refs #26 - refactored and cleaned
Refactoring of packages.
"Fixed lexer errors reporting order, refactored code."
A bit of refactoring and updates
JBIDE-1497. Refactoring
small refactor and comments
refactored validation to proper validation extension points and removed builder
refactoring
Refactor the code of renderTask (T28747)
Feature #351 : adding possibility to force a subscription to a user or a group of users - adding possibility to exclude users from notification (with NotificationMetaData class) - refactoring some code
Ended refactoring for a stronger typed Quqlifier system on Services
javadoc. refactoring and renaming of ScopeMap.scan() method.  add -ea to launcher.
[MOD] Core: Index refactorings (#1155)
"import thresholder tests, refactory SnmpThresholder -- reviewing with mhuot"
Refactor commit flag carrying in RevCommit to be reused
JSR-356 - Refactoring Annotated method parameter detection and use
Additional statement refactoring and test improvements
Little refactoring at MediaDAO.
core: refactor failure behviour for remove Cinder snapshot
Refactored to use a threadpool for building
"Refactoring. LibraryLoader -> utils, Spotlight -> Extractors"
refactor distribution parsing
Address review comment and minor refactor.
"Currently the codebase is broken... waiting for Andy's fix of store procedure reflection stuff..  - started the refactoring of TPCC to be structured as store procedures and to support SQLStmt based magic... (only done for NewOrder, unable to test due to problem above)"
refactor code
refactoring: CollectionsManager removed
Refactored subscriptions in feed base
refactoring
Refactor to remove duplicate code.
Major overhaul of MCODE to better align with Christian's refactoring of the upstream code.  Also added ability to record algorithm-specific scores and report those scores in the results panel.
added bcc and send copy to sender features refactored main action
refactor package
MLHR-1895 #resolve #comment refactor AbstractAppDataSnapshotServer to support override or provide QueryExecutor
refactored how dates are handled in the database and across all affected classes in preparation for program guide activity. added notification helper adding status bar notifications.
refactor status into response
refactor RounderTest.java and reformat some codes.
code cleanup & refactorings
refactored executor to allow create temporary enrolments
96172 [refactoring] Moving method with static import in body gives illegal result.
refactored repositorys
core: refactor failure to run vm flow - part 4
refactor SQLUtils
"Refactored persistent groups to bennu 3 arquitecture. Using new groups, deleted old ones"
CheckIn: Add new aggregation filter test case and make some refactors
test code refactorings
refactor dependency handling
"More annotation updates.  Still a work in progress.  Once I get this to work right, I'll refactor the whole thing to make it cleaner in preparation for an annotation API in 3.1."
DataManager refactoring - higher-level code moved to SPARQLEndpoint/GraphStore as well as Origin implementations Removed unnecessary DataManager dependencies
refactored to impl/ftest/spi/extension structure (tests working)
Big Refactoring.
Code refactoring + cleaner seperation between speedhack and moving check + only register listeners for activated checks
Refactored external interface
Mercurial Integration is now done with java native library hg4j. Refactoring to clean up the code and to allow easy adoption of other java native libraries in the future. Some unit tests added and classes moved to dedicated packages for better maintainability
Dependency model has been refactored.
Options parsing refactoring. AbstractCLI provides useful common methods to the three CLIs.
"- new: convert literal quote refactoring tools (to single, to double or c-style quote) - new: click on an input token (debugger) selects the corresponding token in the grammar - rules list can be sorted (group are not sorted) - improved debugger token outline when a token spans on multiple lines - improved underlying menu update system"
"Refactor ""index transaction log"" into ""reindex action registry"""
[refactoring] Opened up eclipse-repository integration test
pool: Refactor ChecksumModuleV1
Continuing refactoring Fix some PMD violations Fix Bug 1144793 Fix Bug 1190624 (at least try)
refactoring of URI parser + additional tests
many refactorings attempting to make the driver a bit more efficient
refactored LocationProfileDaoHelper into singleton
Refactor ValaContentProvider such that it operates on SourceFiles.
- Added temporary ITextUpdating2 for move to 2-option renaming. ITextUpdating2 will replace ITextUpdating after all refactorings are updated.
#NAME?
test refactoring
Refactored filter classes.
Bug 422288 Refactor DockerServer into new package
refactor progress indicator
Refactor TNT ownership code for plugin visibility.
Refactor QR result intrerface to decompose namespace
AuthcEventManager refactoring
[historyView] Refactoring first part
NOJIRA Major refactor and simplification of cspi-services complete; removal of __auto functionality which was interfering with simplifying implementation; addition of request cache into cspi- to allow efficient querying of services; correction of existing unit-tests from 0.2 to work with 0.3 changes.
unit test refactoring
refactoring ApplyChargeAction
Provider refactoring Removed Saxon-CE and typeahead stuff
Resource refactoring (simplified hierarchy)
Large refactoring: some classes taken outside of visualizers package and moved to graphs package
refactor of second fix attempt for issue #3659
Model refactoring / Restful API
refactoring
"Refactor, no functional changes. Both streaming and long-polling now working"
"FT bug fixes, minor refactorings"
refactor caching
Refactoring code
refactored programs related to template builder
refactored method name as previous name was misleading
Refactored ContributorAgreements to All-Projects project.config.
"1. Check null case of grouping setting for previous report file(before BIRT2.3M3), 2. Refactoring grouping dialog code and initialize default grouping object for Y optional grouping setting."
Refactored project package structure
Extracted common super type refactoring functionality
Finished refactoring FieldContext to PropertyContext
Refactored the JMX support to add the ability to describe the attributes and operations of the Neo4j MBeans. This makes the Neo4j MBeans almost self documenting in JConsole.
refactored the findNextMove method
minor refactor to make the builder support ExpressionFactory; also added support for IdempotentConsumer along with a test case
Refactor packages.
Refactored to TTI v0.2
Refactor Console communication.
refactor: all cluters code
refactor GTFS
"Refactor core preferences, verify Java on startup"
refactor by extracting methods
A lot of work refactoring the static Keys
SugarCRM pre-release refactoring
Respect filter settings also in synchronous loading Minor refactoring
Refactor: create a reusable ApiV2SystemTest.insertColumns
final refactoring pass
EntityProtocol refactor
refactoring; ClueWarcForwardIndex implements DocumentForwardIndex
Refactoring to tidy up resolving and combine object factory and manager - VI
webadmin: refactor—overgrown constructor
[refactoring] Rename wikimacro component
Refactored: name interfaces based on their role / EntityManager
RF-11543: refactor ResourceMappingConfiguration to service
refactoring: Move some classe in a new util package.
* Refactored position engine to use a single row type for summary and regular rows (was having problems with generic glazed lists) * Added Grouping functionality  * Added incoming position API * Added trader id to ReportHolder
"Issue 301: refactored http payload data from blob -> core, added content length, type, md5; fixed length bug in ec2 and added more tests to ensure this doesn't happen again"
Refactoring packages names
core: Refactor network data update in VBOB
#141 fixed refactoring of server-side autocompletion code to easily port to class autocompletion fixed typo in 'compatAbilities' references
"Added refactoring support for package, folder and file change. Added reload of model editor after refactoring. bug 395174: e4xmi should participate in package renaming  https://bugs.eclipse.org/bugs/show_bug.cgi?id=395174"
cleanup/refactor group tree view code; add autotypegroup nodes to cluster group tree (still need to add subcategory nodes); delete unused ResourceGroupTreeDatasource class; add toString() impl to FileSystemInfo class
refactoring
Refactoring content assistants
"Cleanup, refactored and tested the content ingestor code"
* Refactor classes * Udpate readme test commands * Test usin Restlet Client.
Applied patch for bug 337787: [Refactoring]: remove singletons and static fields in RWT https://bugs.eclipse.org/bugs/show_bug.cgi?id=337787
Renamed according to recent refactoring discussion: IBond.getAtomAt() -> getAtom()
Added Advanced server between NeoServer and Enterprise server. Refactored the default set of server modules.
refactored packages
"Gideon : Refactored the RuleMatching behavior in DotChart.java, in reaction to feedback by Matt Post. The nonterminal matching should only apply to the nonterminal level. This simplifies what is required from RuleMatcher : it should only be concerned with NonterminalMatcher."
DDF-1760 Refactored into api and impl packages. Updated content to use dynamic metacards
Finish move of most API to the remote and declare as WS endpoints. Minor API refactoring.
Further refactoring to separate normal and auto lobby modes
refactored package structure
refactored
Refactor the ListEditorComposite to provide better modularity for buttons.
Refactor.
Major refactoring part 1
Lots of refactoring and improvements
"Refactored OrbBarrier to Barrier interface, implemented OrbBarrier with O(N^2) efficiency, wrote unit test (OrbBarrierTest)"
#NAME?
Adding the undo manager for the Rename Refactor
#NAME?
Refactoring Module / Handler pour permettre la generation de plusieurs listes/exports/etc en une seule passe de CDF.
Better chat integration with other plugins. In fact the whole chat system has been reprogrammed. Fix ascii compass typo. Fix claim at the border of enemy territory bug. New faction chat. Some refactoring
"Major refactoring. Now supports multiple configs each with a set of projects, a result condition, and multiple parameter configurations"
refactoring names and cleaning packages
"Some fixes, and exception viewers. Could use some further refactoring, and putting the same logic the the dob_inspector too."
refactoring of cdi(seam3 as well) tests to use new version of OpenOnHelper + some other enhancement
Refactored namespaces support off to Spring configuration and base provider.
Refactor by adding method selectContentService() in accordance with the DRY principal
Refactoring and prepare javadoc comments
Tiny refactoring - moved hash code computation to its own method
Closed #124 (Make MockDevice behavior configurable) Refactored mock device to move code from MockConnection to MockDevice where it belongs
"Refactored to integrate corbaloc with ETF. Patch by Phil Mesnier <mesnier_p@ociweb.com> (createObjectIOR): Replaced previous versions with a new method that takes an ETF Profile argument. (decode(CorbaLoc)): Removed. (parse_corbaloc, parse_corbaname, parse_jndi, parse_resource, parse_stringified_ior): New methods. (parse): Delegate the actual work to them."
little refactoring..
Refactored: Splits different classes to different files.
Refactoring QueryDSL JDBC example and tests
Refactoring in ProjectAPI. Create interface and a new ProjectImpl module which implements these interfaces.
refactoring.. preparing to add FixedLengthReader
Refactor of IRFuture and IRFOption instrument provider for bloomberg. Issues around names when pricing historically
Refactor:
"Refactor Comment Dialog, Update bubble on dialog close event, Add reminder on top of the dialog comment"
little refactoring.
Refactoring using TDD.
Fixed partition migration service. Lots of refactoring. Cleanups.
Start of major refactor of code.
Refactor a bit the renderer framework
Refactoring of TaintFrameModelingVisitor
Rename package and refactoring
Fixed date dependent issue of zero valued account transactions being added when payments were made on installments due dates. Added greater than and less than helpers to the Money class and refactored some LoanBO code.
start refactor restlet resources root overeloaded post and passing json div back only
"JS-287 Added getRawTextLength and refactored Backend. Created interface Backend for AbstractBackend. Improved OpenFileState implementations to have testament vectored file retrieval. Made AbstractBook require a non null Backend. Created NullBackend. Removed getVersification from AbstractBackend. It wasn't used and is not true of all Backends. Changed IOUtil.close(state) to OpenFileStateManager.release(state), a bug fix. Removed Activation and Lock from SwordDictionary (GenBook remains)."
more fixes and refactoring
More refactoring / naming.
Restore OrionJettyCustomizer class and bundle This was deleted by Simon's server refactoring. It fragment of org.eclipse.equinox.http.jetty so needs to be in a  separate bundle
"Added support for user dictionary entries with full features, including weights, etc. Various minor refactorings. Updated CHANGES.md"
"refactored Ticker, Order, MarketDataService to NOT use CurrencyPair"
added some documentation (pdf) refactored out media player
Refactored from byte constants to enum for types of variant
clean up and refactor
Really big refactor (not tested yet) - Code clean up - Making the test runner engines used as a service - Making blockers to be used as a service - Creating internal packages
Refactor service-discovery aggregation
Refactored DB Lookup operators and Cache Manager
- Summary: Refactoring the computing study layout code of chart engine.(#28822)
small refactoring
"started integrating catalog into DevOpsItemPanel, some REfactoring"
Refactors the HTTP annotations a bit.
Refactored SingularValueDecomposition to match up with the rest of the package.
refactoring for new kolich-httpclient4-closure
refactor
refactor redux updater
concept definitions + some refactoring + a README
"Major refactor to group code into new projects, introduce package org.clamshellcli, remove dead projects..."
"352251 Refactored root file support for ""clean code"""
refactoring PMD.java to reduce that confusing jumble of interconnected methods
"[ENG-193, ENG-194, ENG-195, ENG-196, ENG-197] Refactoring to improve the ViewProcessor/View/ViewClient API, pushing down the client management layer into View. Removing inconsistencies, updating the RESTful implementations, and adding Engine-level tests for everything."
Forgot to refactor class names from WONettyAdaptor to ERWOAdaptor
"big refactoring for StatementBuilder interfaces, some work on if blocks"
Simplified and refactored to a pur PGQ implementation
Small refactor.
Refactored all the Ip Route snmp classes
Added throughput graphs and panel to monitoring tool. Plus Lot's of refactoring and true Unit Tests
#57 refactor entities
Refactoring: tests now use fully the screen architecture.
Begun working on multi-value headers refactoring
Refactoring first stage + issue fixing
package refactoring
HBASE-13107 Refactor MOB Snapshot logic to reduce code duplication (Jingcheng Du)
Initial commit of realm refactoring.
Nearly done refactoring stuffs.
"Changed: - reimplement the UI using angular.js. The graph drawing part is still using jquery, will be refactored in the future. - no unit tests yet"
Refactoring
Refactoring
ISIS-1324: refactoring usage of ScopedSessionAttribute: removing duplication between EntityCollectionModel and ModelAbstract.
complete refactor of frequency.txt support
Refactor the indexer block to be in the same package as the other block properties.
HTML-155: Refactor ShareableHtmlForm and id-to-uuid replacer to use AttributueDescriptors
"Refactoring of EntityNode, no longer has a hierarchy."
refactoring precedent commit
[Story 2] refactored class checksum
refactoring
JaxB Adapter refactoring
runtime + module refactoring
refactor gwtp-sample-carsore to gwtp-carstore
More refactoring
Checkpoint checkin during refactoring.  Moved shared object/shared object container interfaces and classes to org.eclipse.ecf.core.sharedobject package
"Cleanup from earlier refactoring, no functional changes "
refactored out s3nio module and centralized http handling code
Style and refactoring.
"Massive checkin... [changed] Skin format from XML to JSON so we get automated and read/write serialization. [added] No arg constructors to NinePatch and all skin styles. [updated] BitmapFont, added access to image file. [updated] BitmapFont ""uses integer"", mostly because I like changing things. [updated] scene2d, better defined semantics of touchUp, touchDown, and touchDragged. touchUp returning true means the actor will receive focus. [updated] Group, added transform boolean so we can have axis aligned groups that don't cause a batch flush. [deleted] Old actor classes. [updated] Rewrote FlickScrollPane. [added] Label methods. [updated] ScissorStack, prevent from scissoring zero size. [updated] JsonWriter, separated setting the name from methods that start an object and array. Support for multiple JSON-like output formats. [updated] Json, completely refactored, more and better thought out methods. [updated] JsonReader, reads non-JSON, JSON-like formats. [updated] Some tests that have been broken over time. [added] GestureDetector."
Refactoring + flattening
"Refactored configuration system to support a new WindupConfigurationLoader abstraction. This allows extensions to provide their own WindupConfigurationLoader. Currently there are two of these, JavaWindupConfigurationProviderLoader and GroovyWindupConfigurationProviderLoader."
Refactored popup menus to use GUI component factory.
Reflecting refactorings
"refactoring of units and properties, first pass"
Test refactoring
NOJIRA Refactored DefaultServiceExecutionResult.  Now there is a GeneralServiceExecutionResult and a ReconciliationServiceExecutionResult. This was necessary because DefaultServiceExecutionResult calculated success for the reconciliation case only.
Fixed incorrect import of ObjectUtils and refactored Hibernate test stuff into separate base class.
DATAREST-93 - Quite a lot of refactoring.
Lots of refactoring
UML-198: Refactor some common services in DependencyServices
Refactor ObservableList implementations to use abstract base class
"Name refactoring, removed unused and empty classes, added 'require' as ruby keyword."
Refactor PatientActionListener to run in Daemon thread.
Code cleanup/refactoring.
refactor abs API pour moins dépendre de Jsyn
Refactoring of type info related functionality
merged with latest core-refactor branch
"add layout unit tests, refactor"
refactored common code
Refactoring: mangers
test coverage and fixing how property ontology IRIs are resolved when loading an existing workbook. This involved simplifying and refactoring how property term details are embedded in the validation. Now the validation simply defines the hidden sheet with the property and ontology details contained within.
Refactoring from WebUtils: getDocumentParentsList to WebUtilsService getActiveMenuPos to TreeNodeService getMenuItemPos to TreeNodeService getPrevMenuItem to TreeNodeService getNextMenuItem to TreeNodeService
"refactor the typedef code, make sure that typdef'ing a loop is caught correctly."
Modify OneToOnePathProcessor (refactored to EntityPathProcessor) to properly process <form:select> tags not created by Spring lookups.
refactoring
WIP refactor of ItemSessionState/Controller
"refactor: moving DefaultTaskRouter into tasks.management package, renaming tests to match source"
Refactored and debugged virtual link implementation code in WSNServiceImpl
Fix classes refactored into c.i.j.core.cache instead of imple.cache
refactor code about element exporter for new feature.
refactory
Refactored
ARQ-967: documentation + refactoring of request execution related code (WIP)
* refactoring all classes that used 'DbImplDecider.getDaoFactory(DaoType)' method * added 'VersionDao' to get version of database
Add getter gor jobId + refactoring
Adapted to LTK infrastructure refactoring
Refactored Encoding/Decoding in order to use them outside of the netty handlers
refactoring
Refactored apklib and apksources code.
ISIS-135: refactoring the lookup of AuthenticationSessionLookupStrategy to be consistent between IsisSessionFilter and html viewer's LogonServlet; changed IsisSessionFilter so that it is a no-op if the ResourceCachingFilter says so (nb: order of filters matters in web.xml)
Refactored argument and conf handling in CF Hadoop jobs.
#NAME?
Refactored hera out of the package name.
#NAME?
refactored response type name
java 'Optinal' refactoring
imglib2-scripting: more refactoring for integral histograms. Check the ExampleIntegralHistograms for a complete example on getting a feature stack from an image.
ISIS-503: more minor refactoring...
refactor project
 - generic graph refactoring
refactor
Mostly finished CLI refactoring
refactor package add java and handler implementation
refactor
Refactoring of validation report generation
Small refactor + tests
refactor(engine): expose getVariableInstance methods in VariableScope
major refactoring
refactor heartbeat alert
Refactoring in the Persistence Wizards
refactor(bpmn-model-api): rename invoice quickstart to fluent example
created a sorter sub package for topology package to make room for up and comming refactoring
"refactory project, change blog to shop"
TPCC formal code refactoring completed... now it is time to debug...
Refactored deploy strategy to be a Task.
refactor
refactor query rule method
OFC-279 - Perform code review and refactor DataService
Refactor core preferences model and UI
Refactoring the check parameters to test
refactor code
Rest refactoring as per bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=294774
refactor openid int
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
"NOJIRA major internal refactoring of the EntityReference object and the way it is handled to support defineable URLs and to allow finer grained control over the URL space, deprecated IdEntityReference"
lots of refactoring.
TEZ-1053. Refactor: Pass TaskLocationHint directly to the Scheduling logic (bikas)
more code cleanup and refactoring
"Decided to take the pain and refactor the parlor.game and parlor.turn packages properly into client, data and server subpackages. This eliminates a bunch of hackery I had to do to properly handle dead code removal when building the Game Gardens client and games and it simplifies things and sets a good example to follow the standard procedure as much as possible."
"Initial work on DojoDataStore. This is broken, but SVN is going to start to get narky about refactoring so I need to check-in."
Refactored the ExecutionContext for nodes.
Major refactoring on Cache. Use inheritance rather than wrappers.
request payload serialization refactor:  - moved payload toJson logic from client to AbstractAction and generalized payload usage across action implementations
BAEL-633 Small refactoring
Refactoring
created skeleton integration for Rename refactoring
refactored handlers to services for spring integration
"groovy 1.8 refactoring - reducing patch size, moving parser"
#NAME?
"CAY-1230 Refactoring & unification of ""ROP"" and ""classic"" class groups query actions"
Update issue 217 getSchemaName refactoring and bug-fix; ResourceModalPage refactoring; User status on resource provided at user edit time.
refactoring
Started refactoring towards new gherkin based cucumber
#72827 refactor code
"Refactored code, Add ant task code"
Test refactoring; adding ColumnTypes ARRAY and BOOLEAN
started refactoring jackrabbit
Refactored DOMHelper class to reduce complexity
getVariants() refactoring
krati-0.3.7 api refactoring
Refactored Import from bootstrapper and ImportExportServlet - using the common code. - Save is done just after each import when bootstrapping but this is a parameter and can be reverted to the previous behavior. - Some work on logging - Filters are now classes on their own - Check are rechecked against current trunk xml files
refactoring for devide implementaions.
fixed and refactored member access code generation declare void and * in gloibal scope some initial code to compute the type of expressions
Refactored so e code so that PySourceLocator can add entries for external files
Refactored Academic Calendar Domain. Changed Academic Calendar Management Interface.
Refactoring LP indexing algorithm.
"* some refactoring, move callback stuff into callback package"
minor rendering refactoring
Refactored and improved code which updates status bar
"adds updated jedis (will go on github after this commit), starting the redoing of the chat, as part of the great refactor, though I'll leave package reorganisation to another day"
refactoring - game related panels moved under GamePanel 
"Refactored EntityLinkingAnnotator so KB linking is split into two stages; candidate generation, then ranking."
#2728 Refactoring the anatomogram
renames and refactorings stop adding all documents to cache on startup
"[MOD] BaseX 7.1 XQuery refactoring (namespaces, URI handling etc)"
ACT-741 refactoring persistence
Jetty9 - Refactored HttpChannel: moved connection logic back to HttpConnection.
"[PLAT-3169] Refactor ViewEvaulationFunction to allow an arbitrary execution sequence to be used, pulling out the historical case as HistoricalViewEvaluationFunction which operates on HistoricalViewEvaluationTarget"
Refactoring of URL node to Node node almost finished; Date sort comparator does not yet work.
a little refactoring and a new entrypoint
DDF-2251 Refactor Registry Report Builder to be able to generate 'summaries' of parts of the overall report (#1053)
"JAC-28: unit testing: some more unit tests (needs review, cleanup and refactoring)"
Refactor to org.glyptodon.guacamole.
Added REINDEX listener and refactored code
OPENEJB-1768 Refactor. Move class to more appropriate package
Refactored Collection<Database> Balancer.getDatabases() -> List<Database> Balancer.list()
Refactored package structure
A whole lotta refactor.
OPENEJB-1333: Refactor org.apache.openejb.jee.Lifecycle interface
"Refactor Workspace UI, delete DesktopProjectController."
Refactoring and shaping the lib
Core: refactor meta type handling (#941).
Refactored MockEventUtil somewhat so that it provides EventBuilder versions of many of the functions. This makes a lot of the code simpler in calling classes because they can use the EventBuilders to add parms and set values inside the events simply.
Minor code refactor in CurlyReader
Yet MORE synchronization updates to fix a couple SSE holes and improve performance.  Some aesthetic refactoring.
1) Initial commit of refactorings on top of housejester's to simplify the zipping and simplify the creation of other methods of loading data
refactoring: extracted the hashCode caching mechanism to Term and let subclasses to override computeHash() instead
Refactored getInstance method and updated the javadoc
various refactoring
Refactored capabilities such that JSON api is strict REST
"Refactored FrontController, use JDOFilter, HotReloadingFilter and FrontController instead of JDOFrontController."
refactoring: move some classes into appropriate packages
Created Property ID input validator. Refactored ConfigurationUtils for code used to find beans.
"Universal Daos should be functional, though untested. A bit of refactoring too, plus updated SQL files"
"Refactor and fix UACA proxy, add event logger"
added index queries to rest api; unit tests for index queries; small refactoring of helper to build testable domain models
Minor refactoring.
[ANA-154] Relative outperformance option definition and pricing. Refactoring to allow definition of two-asset options.
"wip. naming style customisation infrastructure attribute names in Immutables.generator almost migrated collapsed and removed ancient code-generated parts refactorings and refinements, as usual"
some refactorings
"Massive refactoring and huge improvements to SecurityVerifier and admin/SecurityConfig.jsp. Janne, it should even for you now. :)"
Add in queue list items.  Delete feature in conext menu over in queue list.  Migrate from C2DM to GCM. New preference ProjectID for GCM. Refactor in notifications and preferences.
"Refactor of interface from Derivative to Differentiator in com.opengamma.math.differentiation Intended to resolve ambiguity of term Derivative, which is also a financial asset."
"Revert ""refactoring"""
bug fixed and refactor
refactoring and default values
- GTNPORTAL-1673: Refactor Validator architecture to remove duplicated code and make it easier to create new ones and/or change behavior for all validators.
"refactored JAXB classes to package org.accada.epcis.model, moved web service stuff from epcis-commons to epcis-repository (WS server) and epcis-queryclient (WS client) and moved wsdl files to epcis-repository"
dcm4che/dcm4chee-arc-light#837 : Refactor dcm4che-tool-dcmdir: import records from CSV file into DICOMDIR
SONAR-3755 refactor IssueFinder
Add serialVersionUID to persist and check for it when loading. Refactor PropertyType byte flags
"KS-2165 : moved UIBaseForm to eXoApplication.common,  refactored popup handling"
Refactored it a bit and made it more readable
Fix the remaining failing test. I've set 8 of them to ignore because they need a major refactor to make them pass. Since all test are now passing (or ignored) the test has been reactivated in the pom.
fix bugs introduced by preferences refactoring
Continuing refactoring of websocket-server by commenting out no longer available classes (no more red)
Refactor packages
Refactoring drift domain and criteria classes to make them pluggable
refactor
Add Main program for command line invocation + Refactoring
Continued refactoring
administrator package refactored and renamed to userManagement. Formatting issues.
Refactored ant task and maven mojo to expose cliArgs() method.
"Refactoring service / controller hierarchy. Instead of using org.deegree.controller.XYZ, the controller (protocol-specific classes) are not put below org.deegree.XYZ together with the reset of the service classes."
Make a refactor for ISO8601 date parsing.
Adding MovieRentals and WidgetShow portlets and minor refactorings
Refactor AttributeMetaData to Attribute
Refactoring of account and account persistence. M2 code. Test cases added/updated.
Refactor of how Sleepers are associated with Alarms so there is no chance of having an alarm go off without a sleeper to notify
refactoring
Source refactored
Adapted user management model and service. Refactoring of database related security code.
[HER-1668] support '-' SURT directives in seed files analogous to '+' (if a REJECTing SurtPrefixedDecideRule is present) * SurtPrefixSet.java     refactor to allow add-directives under outside control * SurtPrefixedDecideRule.java     extend nonseedLine() mechanism to trigger off '+' or '-' depending on decision being ACCEPT or REJECT 
"Refactoring: Added comments to every class, as well as a copyright notice. Also, some classes were moved to packages where they make sense"
Refactor complex logic out of formatters into getters.
refactored method name and bug fix when searching for rule by type and executionYear
"Added test for DistributedOperationExecutor. Refactored DistributedOperation#execute to throw a runtime exception, DistributedOperationException. Minor refactoring to reomve duplication in BlockingWriteTest."
#NAME?
refactored packages
Refactor PropertyStyle
Bug #4664 : impossible to download a zip archive of files attached to publications registered under a node that is shared - fixing technical error on temporary work folder creation - fixing node access rights around aliases - refactoring some code
Refactoring of the default i/o event dispatch implementations. Reduced code duplication
Refactored XML EditorKitCode
Refactored workflow to message-driven-workflow
refactoring ...
ISIS-1406: refactoring IsisConfigurationBuilder and IsisConfiguration (WIP)
refactor LUP code
More refactoring
Moving/refactoring the radio and checkbox list components into JavaWOExtensions
more refactoring
refactorings in admincontroller and batchcontroller
Refactor the stream result
Minor refactoring
Player API refactor
refactored MapperHandler removed in order to use MultipleInputs
"#JC-1381 - refactoring - generic classes for processing uploaded images, different classes for processing various image types"
* added onBeforeCommand to the CommandListener interface so that the history mechanism can save the state of the rich text area before the command gets executed. * more javadoc to the plugin.internal package * small refactoring
refactor move
Refactoring InvocationBuilder Added warning when using private invocations
[MRM-1704] Refactor to remove maven specific part from various repository/metadata apis
"BroadleafCommerce/QA#293 Needed the ability to query for products to be reindexed, outside of the reindex process.  Refactored some methods to allow for this."
"Refactored all web tests into renamed package 'org.mousephenotype.www' and modified pom 'test' profile to not run these web tests (they take a long time to complete). Deleted phenotypeStatusTest, which tested nothing directly related to the application."
Refactor Journal.
refactor
refactor from android branch
more work on Move Out refactoring #140
Refactor to remove package dependency cycle.
Refactors consitency pause in blob tests and more fixes
ISPN-1424 Shorter names for some of the CH interface methods and some minor refactoring
refactoring names of some method and fixing crappy one
"Problems resolutions, refactorings, bugfix"
HBASE-8080 refactor default compactor to make its parts easier to reuse
"[jayes] refactoring, add QuotientGraph and MinDegree heuristic"
refactor dependency graph model
Refactor test cases
Completed the refactor to rename configuration typo
Added DaoWebAlarmRepository; refactored the AlarmFilters
refactored Sort json serialization process in Search - now using gson instead of string building
refactoring: move last classes out of events.processing
#NAME?
"Updated list of rest api entries, started refactoring the code a bit."
Refactoring  - Place knows about its category
test fixed after db refactoration
"GENERAL - configuration resolver refactoring, removed init(configuration) method from parameter extractor interface"
bug 262046 - refactored test suite to better handle threading of launched configurations.
Style changes to User Accounts Page. Style changes to Personal Timesheet Page. Changes to LibrePlan new version notification. Set timeout for email connection. Code refactoring.
Refactor QueryResolver
more API refactoring and documentation
"refactored HL7v2 machinery, in particular NAK generation; closes #55"
Refactor propagator construction to its own class.
Refactored ARdrone NanvData and Video read decode. Separated ARDrone 1.0 decoders. Added LightUDPReader. Added support of external NavData and video decoders
refactored delete method to have a disconnect method that must be implemented by other requests
removed some warnings from org.molgenis.framework to remove all will require some thoughful refactoring (or even removing generics where they are counter productive).
Refactoring started
A bit of class refactoring and possibly a fix for visuals check
"Added Concrete operators for Rabbit MQ and Zero MQ Updated testcases for both with some refactoring for tests, extracting out common methods"
beginning refactor of the graph building code
Refactored all bytecode manipulation to MapperBuilderContext. ..
refactor
Refactor the image processing to be able to create debug mode.
"* Change: refactored the code for the encontra-core, namely for the QueryProcessor API."
Refactoring part 2
service client refactoring and unused classes removed
Major refactoring - modular command architecture - switch to use jvm-attach-api to wrap attach stuff - JCommander for arg parsing
Minor Refactoring--some methods extracted from the beanstore
Refactor JMS examples
refactored packages
refactoring: add DownloadEngine
refactor vaadin up to new package names
refactor for preject renaming
refactor: Move entire allocation handler to appstate by having it buld up a list of yarn operations (releases) and container assignments to use in launching
"Proposing refactoring of TransactionContext (for persistence solutions that don't use it): - Make TxContext optional (no TxContextFactory needed anymore) - Enhance CommandContextCloseListener with two new methods: after flush and on failure - Where a TxListener is used, switched to using the CommandContextListener"
Refactored TestJmsPush and TestPoll from Selenium 1 to Web Driver
#NAME?
Refactory
refactor model data
Minor refactorings.
Refactor filters to remove toArray and use jackson instead
Refactored error-prone compiler phase so that it can be easily reused
Feature #8017 Refactor the export and the import of calendar events to and from an iCalendar representation of them by implementing the Exporter and the Importer interfaces of the Import/Export API.
refactor move 2 interfaces into api package: ProblemIO and PlannerBenchmark
api_refactor: refactor for autoscale apis
refactored systems (because they are no shardlets/controllers!)
Refactoring and tests.
"added design for oauth2 flows, replaced scopelist with claimlist as preparation for claim requests, idToken is added to request when in openid scope, openid requests with responeType = token are rejected, further oauth2 refactorings"
"neuronova sit: refactoring prace se vst. daty (kostra), implementace sigmoidalni fce, pridana metoda pro pocitani chyby (na testovacich datech)"
refactor provisioning 'differ' into the model classes
Refactored Input argument which should preferably have a LANG ID; Formatted code;  TagFilters now make use of language ID and attempt to filter out trivial stop words and invalid matches;  Experimental
"NXP-5053: refactored Mapper interface to only use DTOs (Row, Serializable[], Invalidations)"
"Refactored Codec so that it has methods for compression and decompression, rather than the compressor and the matching decompressor being treated as separate ""Codecs"" with a single ""apply"" method."
"Lots of refactoring, provides javascript side of things a way to initialize the full js test file at once and then run each test separately. Also improves the separation of concerns and makes the core less dependent of Jasmine"
refactor BasicTest for BitPacking
refactoring
More scene and spot scene refactoring. Got parsers working for those in the new new style (or was that the new new new style).
Refactoring Inmutable* types
XLCLOUD-1066 - Added sdk for XSA events resource; xsa dependencies refactoring
"RAVE-433: refactored ""WidgetCategory"" model to ""Category"" in anticipation of a future ""WidgetCategory"" join table to be needed by Rave-434.  This matches our current naming conventions for many to many tables (Widget - WidgetTag - Tag for example)"
"[MRM-453] - Added tests for RepositoryConsumer and CleanupReleasedSnapshotsRepositoryPurge - Added test data for the new tests - Refactored AbstractRepositoryPurgeTest, DaysOldRepositoryPurgeTest and RetentionCountRepositoryPurgeTest"
refactor xEssentials package to tv.mineinthebox.essentials for better visibility.
Refactoring
More refactoring in the extraction engine
"Distinguished between clazz inheritance, interface inheritance, and interface implementation. Good refactoring in TypeDependencyExtractor class. Added first unit test for type dependencies. Writing other tests should be easy now"
Refactored DatabaseConnector -> ConnectionFactory
#NAME?
refactoring towards nicer name analysis. also add more tests
refactored some code in execution year class
big refactoring on svn structure. trying to be more consistent. Cleaning container module. Moving tomee to the same level than arquillian. creating an osgi module (for integration + maybe karaf commands + maybe karafEE...). Moving spring and hibernate integration modules in utils since it is not directly related to OpenEJB or TomEE.
Refactored model and added support for Destination and Server Data stores
refactored dense vectors
"refactor package structure of test files, add TestSvdQrAlgorithm"
backfilled tests and refactored most of org.jclouds.location.suppliers package
Refactored exceptions. All HBaseAdapter methods should only throw HBaseAdapterExceptions
Update for MV2.2 destination factory refactor
Refactor domain artifact into data-api and data-impl.
stable version with hibernate and refactoring
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
Further refactor
Fault scenarios refactoring
Refactor jar loader
Split Javascript into separate files + minor code refactoring
Refactoring performed in order to manage also CSW servers
Refactor of GwtTestSuite 
Scorecards: Refactoring and cleanup of external API. Changes to class access levels; removal of comments; other changes
Adding Eclipse Touchpoint + Action Tests: Part1 - Mainly property action related tests and a few slight refactoring / cleanups
OSGI-174: minor refactoring of locator API
XWIKI-5002:  Implement Explicit Reference Resolver * add the EntityReference based one XWIKI-5003: Add optional parameter support for Reference Resolvers and Serializers * fix some missing refactor of getDefaultValue methods
refactor a bit again
refactor indices package
Feature #7291 - NodeInstanciator refactoring: - implementing ComponentInstanceDeletion into DefaultNodeService and adding integration tests to validate it - re-activating all node unit tests that was into test-waiting folder (except MockedNodeDAOTest which uses not wished JDBCMockObjectFactory & co. from mockrunner...) - re-activating all coordinates unit tests that was into test-waiting folder - re-activating some subscription unit tests that was into test-waiting folder - removing from installation scripts the table named 'favorit' and adding the drop of this table into migration scripts
Refactoring of ServerHandler and fix some logs
Moved the Import checks to a sub-package. That is all the refactoring I have time for over the next few days.
refactored a bit
"Misc refactoring to eventually support #313, filtering of container types."
refactored new support for rewriting ASTs
"Refactor of the ICDIRegisterObject, ICDIArgumentObject and ICDIVariableObject to the cdi/model package"
#14 refactor controller tests to use spring mvc test framework
Refactored out functionality into helper classes.
Rename ContentKeys as part of refactor.
refactored: 'sopera' -> 'talend'
Refactoring to exclude calls to Search and add 1x1 tracking for 300x250 nearby unit.
Refactored: renamed classes
"LoggingMain, refactor out method of Examination, better starting solution generation for Examination"
Refactoring to the person domain
use filter to dsplay translations. refactored presenter to use no heavy objects. cleanedup views
Closed #26 (Federator: Implement WSN.getSupportedChannelHandlers()) and closed #50 (Federator: Implement WSN.setChannelPipeline()) and did a lot of refactoring several classes for better testability
Refactor change verification into a class so we can track additional metadata (such as the current change number) in preparation for improving new node tagging.
- new FigureLayerEditor - refactored and enamed AbstractValueDescriptorLayerEditor -> AbstractBindingLayerEditor
Refactor ServerConnection from HttpServerConnection
refactor
Refactored supported annotations into an enum
Issue 101: refactor client examples
refactor tests to make them simple and remove deplicate code everywhere
Refactoru chapter 21 to 14
Refactoring in DbType and fixing bug in IndexSubQueryChunkStrategy.
refactoring the json packages into a more sensible package structure
refactored to use DocumentManager etc
NEW - bug 314999: [Discovery][DNS-SD] Implement IDiscoveryAdvertiser https://bugs.eclipse.org/bugs/show_bug.cgi?id=314999 Refactorings
"Refactor, use bogus stuffing also when no DB"
"Refactor, add tests"
Completed refactoring and testing of I2CBusImpl and I2CDeviceImpl
Refactor the filesystem API in order to allow to provide its own exclusions
engine: Refactor resolution of vnic profile for a vnic
refactor package
refactor code from fabric8-forge so its easier to reuse code between forge and maven for creating/importing projects
SEAMFACES-33 Refactored the ViewConfigStore
CAY-1911 BatchQuery refactoring - make Iterable
ISIS-537: refactored EntityHeaderPanel to use additional links instead of CssMenuBuilder.
"refactor, making graphelement implement FriendlyResource"
Minor refactoring.
added advanced settings to change bounds of min/max sliders. refactored a bit.
Minor: refactoring
#2061 minor refactor getting ready for other providers
refactored code
Refactored: extracted SuiteEventDemuxer from TextUI
Refactoring and validation error created
"Refactored ConfigHandler.getRequiredTypeId to getReqdMaterialId, cleaned up formatting"
Apply API refactoring changes. Make changes to Regions API to work with new code
Lots of refactoring/renaming of fd and cdf classes; implemented TopNScoredObjects.
Misc. refactoring
scribe: refactor sender code
Refactoring
BALE-707 Refactoring changes (#1418)
Add more E-mail Notifications. i18n. Code refactoring. Changes to mappings.
"Refactored JAXB for better compatibility with fcrepo3, added more XML tests for fcrepo-legacy-api"
A few last test refactoring.
Big refactoring (moving methods from BaseAction to subclasses)
refactor bunch of stuff to support profiles better - not problem (kind) knows about parent category and its profile
ACT-33: Refactor ProcessEngineConfiguration to separate out factory reponsibility
new functionality add to send mails from coordinator portal refactored code in send mails from teacher portal
AbstractRefactorTest moved to org.jboss.tools.common.base.test in order to avoid dependency from org.jboss.tools.test to org.jboss.tools.common
refactor tests related to metadata changes in updated plugins so that they are separated by logical subsystem; 
Implemented LessCSS support (Issue #6) Refactored compilation concepts to abstract classes
"Refactored ma IndexerMap methods, moving them to the MaOntologyService class."
bug fixed & refactor
refactoring Querydsl to new Type model
more sparse matrix refactoring
Major refactoring of App Manager to handle app management without Felix FileInstall. Provides additional error handling (in CyUserLog - stack traces in framework-cytoscape.log) for apps that fail to load/start. Refs #2521
GTNPORTAL-360: Refactor Java code in Skin/Javascript service 's deployer
marshalling refactor to get rid of xhr mode flags
Refactored test code to be easier to read
Slight refactor and new tests to improve coverage
Refactor commands & clean imports
"ISIS-1608: refactors, extracts methods is all"
[NGRINDER-689] Refactor home content logic.
"Refactoring, and now using the accuracy reported by the GPS to computer the procession"
Global refactoring
Crucial bug in substitutions with fields temporary fixed. SubstitutionsIterator need total refactoring.
refactor to use addSchema
Refactoring the updateLocalCatalogMojo to the DataSources components
HablarPages refactoring part 2: clear object interfaces
Refactoring findItem so that getItem will be easy.
Some refactoring after feedback
"Refactoring DeezerClient, removing duplicate code. Add a method to get an album related albums."
Refactor
Refactoring (PMD)
"Renamed BasicScopeCreationVisitor to ScopeAndDeclarationFinder, refactored away one of the symbol table passes"
JBRULES-371 Refactor any class that implements Externalizable to have empty default constructors
examples refactoring
Refactored tasks and generators.
refactor dcm4che-net
"Fixed #575, pre-rotation now includes fiducial compensation. Refactored the fid compensation code into it's own function and applied it in both places it's used."
Refactor code to reflect the new name of the dependency parser tool (NDeps)
Minor cleanup / refactoring
task refactor
Refactor on how RR treats soft clips
project refactoring : introduce reactor to get include tomcat packaging
HandlerConfig / HandlerContext refactoring.
Refactor to split between HttpClientConnection/HttpClientStream interfaces
CodeHacker: refactor the code printing the JavaAgent hint
ClientProvider and DataManager refactoring SPARQLEndpointProxy.ask() fix for JSON/XML
"Implemented classification of warnings as ""Bug"" or ""Not Bug"". The code needs some refactoring, and the classifications aren't persistent between sessions, but it basically seems to work."
"First (well, more like third) pass at major refactoring, this time push-loading is implemented."
Refactored WindowsAccount to remove dependency on Catalina in servlet filter.
Refactoring the clear tool interaction so it is more easily tested Added log entry merger Added log files used in testing
Refactoring into MVC
Added functionality for scope parameters. Refactored relevant classes.
refactored packaged name to 'oak'
Fixes: a newly created filter should be automatically selected. Some minor refactoring.
"Refactors package names and structure to hs-hannover.de domain (including license headers, pom.xml, etc)"
Further Ratio Metadata Refactor
Refactor and change ordering of auto-discovery logic for class output.
refactor
"DefaultGalleryGroupRenderer : setters and getters for title background and foreground (API change) Gallery : fixed selection bug, refactoring Plugin : updated version number to include date"
Refactoring for addressing bug 237169
Add a build status API endpoint and a little refactoring in this area
Euromillion generator + refactoring arborescence
"(Define) Multiple rule deletion added, refactored a bit"
Rename laggard test that missed refactoring
"some refactor, net.jobrapido.experiments.manager package created"
refactored dynamic registration endpoint's checks for client consistency
"Started to refactor/cleanup this component. Stuff in org.neo4j.graphalgo.path will be kept, whereas org.neo4j.graphalgo.sortestpath will be removed rather soon."
"RFPL-1540: refactoring, mainly because handling StaleElementReferenceException"
refactoring a lot of things + repository support
Refactored ProtocolSessionManager.
"Shane: Refactored a few things, added more unit tests."
"refactoring to allow sorting i5d files (reference substance first), then linked substances"
Refactor quick assist proposals to reduce boilerplate for each proposal
refactored package names; improved JdtUtils to use Optional classes and code cleanup
refactor(concurrency): RecurringProcessible -> RecurringRunnable .
refactoring
In the process of refactoring TLS stuff and cleaning up constructor/initialization flow
NXP-4651 Adding pagination + refactoring
"REFACTOR: SearchResult => (Url|Capture)SearchResult moved exception .jsps into /exception/ directory under webapp REFACTOR: internal method to determine which .jsp to use for exceptions, allowing simpler overriding of the ExceptionRenderer class."
refactored method name
Refactored Channel and Queue to be interfaces
Signficant refactoring of vertex resource testing.
refactoring tree data
refactoring in preparation of multithreading input validation
All unsafe methods removed from tensors package. Tensors# methods performance improved and all bugs fixed. Expand shoul be totally refactored.
"Major refactoring, gains in performance, adding support for new dictionaries"
General refactoring
"Refactoring FLVClip into FLVTool, adding 'fix_pts' option to fix PTSs based on audio track"
"Fixes for TemplatePanelManager, which I broke in the UF-97 refactorings"
OGM-122 exclude or refactor tests not supported by cassandra backend
[MIFOS-4216]Adding unit tests for make payment in loan and additional refactoring
define detail filter for StatInfo. refactor the router related code so that each module can use its own router strategy
"Refactor the clustering implementation a bit, to make it more logical"
"refactored again, using autoLockCount instead of flag"
TEIID-2062 initial refactoring of FakeServer for general use
Usecase factory added. Refactoring performed
Refactored asynchronous event listeners adapter to asynchronous cluster
BS-7667: provide new version definition of connector to have default value of Mime type set to octet/stream in order that it works by default. refactor AlfrescoRestClient to limit code duplication (and be able to sport the issue)
MAHOUT-362 last refactorings for now
#NAME?
Refactored
"refactoring code, modify trajectory interface, add yandex probki,"
rearranging of a lot of the outage stuff in the UI to match alarms and events in preparation for a dao refactor; only the outage display page is left to fix
Reorganized test suites Added testcases for refactoring history serialization
HBASE-7603 refactor storefile management in HStore in order to support things like LevelDB-style compactions (Sergey)
"Refactored API Consumer to support non-ScheduledPollConsumer using ApiConsumerHelper, moved getThreadProfileName() from Producer to Endpoint, to allow Consumers to access component executor service"
Refactored DependencyGraphModel to move resolution of paricular function implementation into a dedicated FunctionResolver (interface with a DefaultFunctionResolver default implementation).  The DependencyGraphModel was then modified to allow injection of this object and the ViewProcessingContext modified to add this as a member.  The name AnalyticFunctionRespository in method/field/local names was more generally refactored to FunctionRepository.
"REFACTOR: complete regroove of the ResultURIConverter. Was an interface, now is an abstract class, which refactors almost all the difficult/tricky code into the base class. Also includes a complete rework of the Timeline ResultURIConverter system, which was based on a kind of neat but complicated Adapter pattern. Now users set a ""mode"" which changes the behavior of the converter."
Refactoring
UI refactoring for step editor
Refactor attribute names and getters.
mongo util refactor
#NAME?
Refactoring to be able to reuse the notion of filterable event outside of document events.
"Module refactoring, removal of DAOAuthenticationModule and supporting classes, migrated MemoryAuthenticationDAO to be a MemoryAuthenticationModule."
408709 refactor test-webapp's chat application. Now there's only a single request for user login and initial chat message.
Refactor AuthChecker and AuthToken for reusing cookie auth code in EmbeddedCDXServerIndex. - add authenticate(HttpServletRequest) method to AuthChecker - move permission check methods from AuthChecker to AuthToken - move cookie auth related code from BaseCDXServer to PrivTokenAuthChecker - return null from PrivTokenAuthChecker.createAccessFilter if isAllUrlAccessAllowed is true. Enable cookie auth in timemap query
refactor package
1) fixed #45 Delete Collections: error in success message: CommonMessages.java for localized messages 2) slight refactoring
CAMEL-1004 - minor refactor of test method
Refactored failing updates_on_same_key_when_in_memory_format_is_object test.
Refactoring JMX integration  - Adding AdapterFactory implementation in order to adapt to a KarafPlatformModel from an ILaunchConfiguration  - Removing JMXWorkbenchServiceFactory because it is not used by anything  - Register Karaf MBean Connection with the JMXServiceManager
"DS-361, DS-369 refactor syndication feed generation, support all RSS and Atom formats in both feed and OpenSearch, also follow harvest.includerestricted.rss in both UIs."
Refactored some of the I/O code to be more consistent with slightly less redundancy.
"refactor, pulling all Heroku specific enums into Heroku and Http specific enums into Http"
new package (rename) + removed some packages from refactoring (consolidation mostly)
fixed typo in type name ModifyParametersRefactoring
refactor
"refactored messages provider, make it more generic gonna move welcome message and prompt in here too"
Peer review PR-59: refactor CompositeEventPropagatingTest to use verifyPhaseLifecycle()
#NAME?
RichFacesAutocomplete page fragment - clear method refactored
Refactoring tickets
"Refactor Screen to be a separate class hierarchy, and make add composite Controls"
Refactored Filters
"provide information about traffic lights and speed limits to viewer. work-around: xml elements added also in RAMP element. In a future refactoring with only *one* road section element, this redundancy can be dropped. "
"first cut of 102287: [refactoring] [dcr] Implement ""Introduce Parameter Object"""
"Refactorings of class names and methods of API that will be provided with 1.5 (Part I). Related to https://bugs.eclipse.org/bugs/show_bug.cgi?id=347883, OSGi-RWT integration"
"Refactored the BioPAX plugin: now it converts BioPAX L2 to the Level3 and also unfers organism, dataSource, and displayName properties automatically. A lot of junk/legacy code were removed and samll bugs fixed. Though, there is still a weird behavior (visual style...)"
minor refactorings in many places
EXTRACT_CONTRIB_GIVEN.. refactoring
[NTI] Refactor so that changing the default nullability is easier ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=98689960
Minor refactoring
Style bits. Refactoring of VectorWritable subclasses per mailing list discussion. Standardize on Lucene 3.0 behavior.
refactoring to allow differentiating between as-array/as-number serializations (via JsonFormat.shape)
"metamer: refactored enabling of resource mapping, removed redundant war altering"
Added map support and map tile support. TODO: Work on map. Define map tile. Refactor code in main class
Refactored.
[ANA-76] Refactoring of vector root-finding to make life easier if more implementations are added.
DDF-2644 Refactored Email Notification configuration and scheduler (#26)
refactored. Made classes more reusable and avoided code duplication
refactoring term compilation classes
Some early work on importer refactoring
Further implementation and refactor
refactoring
"Refactored the wait architecture in the PageObjects to use the Selenium expected conditions, and fixed a null pointer exception when Selenium returns null on findElements() (I know, should never happen, but it does)."
Refactor CLI configuration validation for cluster creation.
[refactored] location of some files
"Almanach refactoring: making attachment management compatible with new PersonalComponentInstance API. Now, PersonalComponentInstance.getSpaceId() returns the identifier of the space created for personal space to attach shared components displayed into personal space. It permits PersonalComponentInstance to be taken in charge by transverse features as space quota checks for example."
Refactored method name
refactoring
Fixing tests post refactory
refactored XMLValidator into WSDLValidator and XMLSchemaValidator
minor refactorings and additional comments
TAJO-385: Refactoring TaskScheduler to assign multiple fragments. (jihoon)
TED#52457 Refactor code for chart figure in layout editor
Refactored SuiteEventSerializer: serialize exception cause the same way as suppressed exceptions
a lot of refactoration and some bug fixes
package rename refactoring
Refactor js test runner error handling
Refactored POST requests.
Refactored DatabaseMetaDataCache and Dialect vastly simplifying interfaces
"Refactor to improve separation of concerns, so that strategies do the data access and the Node's rely on them. This enabled us to do better version management of nodes and relationships"
Table showletcatalog refactored to widgetcatalog
log refactoring
More refactoring: pulling logic up into SolarEventCalculator and assembling a main compute method.
webadmin: Refactored edit host network code
comment parsing refactoring / standardized around whitespace handling code
some refactorings
Refactoring: DAO classes; added sowtwareid to bioentities queries
Refactor PersistenceContext
Finalized refactoring of converged infrastructure elements
Minfor refactoring and code reformatting.
Refactor tests for Managed Cassandra.
RFE: Further refactorings for SVNAdminArea.mergeText patch provided by marc.strapetz@syntevo.com
kitchensink-ftest: test for REST api refactored
#NAME?
https://issues.apache.org/activemq/browse/AMQ-2970 - refactor to avoid duplicate getConnectionContext() method
[SUREFIRE] refactoring with NotifiableTestStream
Issue 156: refactored compute api classes and added reboot support
RuleMLDocumentParser: Refactored more code
Upgrade To Spring 5 and Total Refactoring of Core Model/DAO Modules
[PLAT-3494] Refactor: rename ViewStatusReporterOption to ViewStatusOption
HZN-1001: Refactor the HttpCollector and the JMXCollector out of opennms-services.
This code replaces the non-transaction-aware (XA) c3p0 pooling library with Atomikos data sources in preparation for using JTA to manage transactions via XA data sources. The core/db project was refactored slightly so that parsing of the opennms-datasources.xml file is done by DataSourceConfigurationFactory and the static convenience methods for accessing the datasource were cleaned up inside DataSourceFactory.
HSEARCH-1211 Preparations refactoring
more refactoring on the Context
#NAME?
"#POULPE-100 * Now the page with Permissions gets the list of available permissions from the BranchPermissions.getAll(). The list of Available Groups is filled from there as well. * AclManagerImpl was changed to return both the group & permission * BranchService was refactored and now it actually works and returns the permissions & groups for specified branch. It also can save restricted & allowed groups, though can't remove since there is a bug in the AclManager. * JtalksPermission became an interface that extends the Permission. It implemented by BranchPermissions. Such API looks both more elegant and convenient. It also was moved to the model module and next will be moved to the common modules. * BranchAccessList DTO was created to return branch permission info from DAO"
+ Resolved MOD-207 issue. + Refactored attribute processing in Ajax components (added ComponentUtils support class). + Other minor fixes. + Updated tests.
Refactoring org.bestgrid -> nz.org.nesi
"issue #841 Refactor to load metadata from a config file on classpath, other misc. refactorings"
Refactor metadata function
refactor
Refactored practice tree logic into own class.
Refactored package name to be consistent with project name (since we are breaking the maven coordinates and package with the .org change anyway.)
Light refactoring of the AcceleoWorkspaceUtil
Minor code refactoring and reformatting.
refactored archive and delete helpers
"Heavily refactored persistence layer. The chosen approach reflects the requirement for 	- implementation independence 	- transaction control/boundaries 	- retrieving shallow/deep object properties Note:  Implementation of the underlying layer (and of the unit tests) is deferred in order to get the API into SVN."
refactoring
refactoring ISite
SONAR: Refactoring according to Sonar recommendations
"Refactored obsService#saveObs(org.openmrs.Obs,String)"
Refactored unbounded event into task. Created GUI for adding tasks and modified event manager accordingly.
Refactored the Cleaner to traverse rather than recurse child nodes
"Fix problems with some words, refactor and fix Forth code"
[refactoring] - prefixed all compiler AST related classes with 'Compiler' to resolve ambiguity issue.
using CHM::computeIfAbsent. Refactored code to make use of CHM and avoid global locks
refactoring
Summary: Refactoring code for extra work.(T58140)
Kie API refactor
reduced size and refactored of countContentSize method.
refactoring class and package names
Refactored assignment operators
Fixed bug in generic description reader. Refactor one test case.
"Task's session extraction refactoring, pt. 4: plugins run ok."
"refactoring of the domain stack, SYNCOPE-158"
LOW / Refactored FIBDialog API
"continue clean up, refactor some code"
Refactor: CallActionManager replaced by a hierarchy of abstract subclasses for better extensibility.
Refactored implementation of async support for MockMVC
Refactoring & Cleaning.
"Moved api and wod binding models and validation into its own plugin (sorry everyone .. this is a huge annoying refactoring, but it's for the greater good, i promise).  I'm going to cross my fingers that this doesn't explode the eclipse SVN plugins."
Hard refactoring done. Architecture now is vpe-like.
refactor
"Refactoring, testing and fixing variant filter"
Refactor parseString to return K.
#628 removed alias method and refactored test
- Summary: Refactor the SeriesSheetImpl to be more customizable in its sub classes (#58696) - Descript: create a function to include the series option label creations and make the column number changable in the sub class
Restructured and Refactored
"CORE 	Fixed Bug 40007 : Parser reports success when it fails 	Fixed Bug 44305 : Scanner/preprocessor fails on conditionals using hexidecimal  	Fixed Bug 41935 : parser provides wrong name on namespace aliases  	Fixed Bug 39525 : Parser fails on expressions that take address of overloaded operators  	Fixed Bug 45287 : Scanner does not accept character sequence literals  	Fixed Bug 36550 : Error recovery with unterminated string is weak  	Fixed Bug 41063 : Remove unused K&R C support from ANSI Parser  	Fixed Bug 39528 : Function try-blocks are not supported by the parser (ANSI C++)  	Fixed Bug 39538 : Parser fails on explicit instantiation of templated operators  	Fixed Bug 39536 : Parser fails on templated constructors/conversion operators  	Refactored Scanner to make it easier to debug.  "
Refactored a bit to get the download caching functionality in with the DownloadUtlity class
HEAD - Refactored code for apt
refactored AcademicServiceRequest: moved execution year relation to AcademicServiceRequest
Minor refactoring in ProjectAPI. Documentation.
Refactored native Aesh commands to subclass
"refactoring: move #1128 test into non-failing section, after minor mods to make type handling correct in test itself"
Change Git history parsing to use executor (start of refactoring for easyer testing)
refactored the name of MatchingTaskContentEntity
Refactor management of display viewers
"Refactored rest API and remote service API, so as to allow non-rest usage of IRemoteCallable and IRemoteCallableRequestType"
refactoring
some refactoring
refactored image resizing
Added more tests for labels in WBS and refactorized some parts.
additional refactoring
Start to refactor use Apache James Protocols for LMTP
CheckIn:Refactor data code
Refactor promotion to offer and promotion.workflow to pricing.workflow
TEIIDDES 267 - UDF changes. Refactored access to FunctionLibrary
"two more passing tests for AbstractTldTestCase, refactored most classes"
Massive refactor of the game loop to make more sense + new GameOverInterface with animation
https://jira.jboss.org/browse/JBIDE-6838 - fixed with some code refactoring
refactoring -  huge set of code refactoring to make it more efficient. Plugins may need to be rebuilt as some classes has been moved in other packages
Issue 101: finalize refactoring of test suite to run Jersey and CXF
refactored namespace resolving and added tests
CheckIn: add test cases for aggregation filter and make some refactors
"Major refactoring of Depth of Coverage to allow for more extensible partitions of data (now can do read group, sample, and library; in any combination; adding more is fairly easy). Changed the by-gene code to use clones of stats objects, rather than munging the interval DoCs. (Fix for Avinash. Who, hilariously, thinks my name is Carl.) Added sorting methods to ensure static ordering of header and body fields."
"TYRUS-153: Removing static map in TyrusRemoteEndpoint, related refactoring"
Some further client refactoring
"refactor the jline integration to fix problems and enhance it. this commit will allow the user to select the implementation to use; you can now use the command line option --console (-e) to say if you want the console input to be read by ""java"" (pure Java implementation), ""sigar"" (this was the original native console way we had before) or ""jline"" (which is the new native console way). This allows a user to select a non-native way to read input in case they are running on a platform that doesn't support the native library (jline's native lib or sigar's native lib) or in case the native library has a bug and is causing the agent to crash. If you use ""sigar"", and you disable the native system API (native --disable), this will cause the console to fallback to the ""java"" console impl. If user is using ""jline"", there is no fallback to - if jline is giving problems, you must exit the agent, and specify a --console argument to override the console to use. The default is ""jline""."
Further simplifying refactorings to ResolveState
Small-Steps-Refactoring finished
Transformations for Submission Set and Folder. Various refactorings to reduce code redundancies.
Refactor common code.
Slight refactorings.
(ABM-269) further cleaning and refactoring of Emfac2011 codes; initial commit of two Emfac2011 properties
refactor quirks and allow bidirectional converters
Refactor method names. Merge remote-tracking branch 'upstream/master' into TACHYON-958.
ROO-435: Introspect an existing database to support simple automatic JPA entities - refactored model package to have no infrastructure-like code
"refactoring: removed API package (bean validator doesn't need tbe exposed as API, the standard javax.validation.Validator can be used)"""
"MAHOUT-479: This commit refactors Cluster to inherit from Model<VectorWritable> instead of AbstractCluster which now inherits just Cluster. The existing Dirichlet models also now inherit from Cluster, simplifying the use of generics and cleaning up a lot of the code."
Refactored code.
refactored
[PLAT3692] Added listener interface to GetTerminalValuesCallback; Initial refactor of GraphBuilderResource
Resources refactoring: - Added ContentProducerResource + handling - Dynamic resources updated to use encode() instead of getInputStream() - Removed wrapper interfaces & added factory methods for creation of wrappers for dynamic resources - Removed PushResource marker file (not necessary) - Added JSONResource
"Refactoring - Remove unnecessary semicolons - Update deprecated API usage - Remove unused imports - Simplify throw failures for Iterables, Maps and Strings"
Refactored Tasks api a bit
Refactors codec package.
Refactored error system
Refactor ITmfContext and fix dependencies
refactor and changes
initial refactoring of mydvds to WTP
#713025 : refactored Morphia specific code from general Mongodb code
EPD-149: small refactoring
changed the general graph model to support iterables. lots of refactoring to get iterables out of Neo4j. Did code clean ups here and there and ran an import optimizer to remove bad imports.
some refactoring and more pretty printing
HIVE-17623 : Fix Select query Fix Double column serde and some refactoring (Slim Bouguerra via Ashutosh Chauhan)
ROO-2296: Refactor MVC controller add-on
Minor refactorings from patch: https://sourceforge.net/tracker2/?func=detail&aid=2208353&group_id=85796&atid=577329
commit refactoring name in order to keep git history
[Refactor] Merged some similar abilities together
refactor widget packages
cube refactorisation - removing bloomber related code (as per Elaine suggestion)
refactored PrivateAccessUtil to support plugins -- errai-codegen-gwt now adds itself as a plugin
* The first take at implementing a classic I/O compatibility layer on top of the event-driven HTTP transprot * Lots of API changes * Some minor code refactoring
refactored EnsembleView
"OAuth2 refactorings and id_token preparations, OAuth2 AuthEndpoint unit tests"
refactoring to separate arachadmin connection as separate module
Refactored the name of the shipping price exceptions to be fulfillment price exceptions
#NAME?
"Clustering command line cleanup: - refactored all clustering Driver main methods to move command line options to   DefaultOptionCreator to improve command uniformity, defaults and to clean up   messy drivers. Impacted Canopy, Dirichlet, FuzzyKMeans, KMeans and MeanShift   drivers. - added command option comments to conf/*.props consistent with above. - added new files for canopy.props and lda.props - removed Dirichlet's prototypeSize argument in favor of reading the first data point   to determine cardinality"
refactoring for definitions
crawler refactoring
Distributed: minor refactoring on method names
Fix for refactoring
api_refactor: usage apis to admin.usage pkg
core:refactor: Move cinder logic to CINDERStorageHelper
Refactored to fix adding IDs to IChemObjects which already have IDs defined (closes #1455341).
various refactorings of tab code; start of utility method for dumping the widget tree to stdout
refactor to StreamMuxer
Model van UI Componenten gerefactored.
More refactoring!
" Partial fix for MIFOS-3051, refactoring get method of LoanAccountAction"
"refactor test environment, and add logger support"
refactor plm through interface factories
Refactor the way to declare ES indices.
Authorize Refactoring
Adding pedigree code back to jannovar (start refactor)
"update guava to version 17.0, refactor methods that accept InputSupplier --> Readable"
JBIDE-16094 CordovaSim: Refactoring. Adding custom scrollbars to inAppBrowser/ChildBrowser only on Windows OS
refactoring cache
 - Se añade implementación de claves Zobrist     - Se soluciona bug por el que la búsqueda enviaba el comando de  resultado antes de enviar el comando del movimiento realizado    - Se introduce comprobación de tablas por triple repetición de   posición en el algoritmo de búsqueda    - Se soluciona bug en el signo del valor de la puntuación devuelta  en las búsquedas    - Se introduce pequeño valor aleatorio en la función de evaluación    - Se cambia la inicialización de BitboardPosition de una función  a un bloque estático    - Se refactoriza el código de generación de movimientos    - Se soluciona bug en la generación de movimientos en posiciones  de jaque    - Se añade funcionalidad y comando en la clase Main para devolver  el resultado de evaluación estática de una posición fen    - Se añaden más métodos de test de generación de movimientos.
Initial development of treasury portal. Refactored payments actions. Small bug fixes on events. Refactored penalty exemption justification (changed association to exemption). Added new gratuity exemption justification types (by dispatch).
Some more refactoring.
report_refactor merge
Refactor: Renaming to JadbDevice.
Refactor QueryRunner to accept QueryPlus: Query + QueryMetrics (part of #3798) (#4184)
JBIDE-1497. Methods in SeamELCompletionEngine refactored.
packaged refactoring
"Fixed multiple bugs in Preferences and Preferences.jsp. Asserted names were not being set when ""save prefs"" button was pushed. PreferencesLocalePicker was not correctly matching incoming browser Locales to those available on the server. Time zones were not correctly being set. Preferences also had a static-method fetish, which was unnatural. It has been refactored completely and thoroughly."
[refactor] removed redundant method in CardSearchService
Refactored pathfinding package to be a subpackage of graph/search package.
Refactor DiscoInfoGet
Refactored stanza validation
"Refactoring so that ConsensusAlleleCounter can use regular pileups and can operate correctly. This involved adding utility functions to ReadBackedPileup to count # of insertions/deletions right after current position. Added unit test for IndelGenotypeLikelihoods, esp. ConsensusAlleleCounter logic"
"added the ObservableMessage and ObservableBody helper classes which are Processors and make it easy to embed some RX processing code to handle messages / bodies inside an existing camel route. e.g. its handy if you want to do filtering, marshalling or transforming before hitting the RX code. Also refactored some useful functions and classes into the support package, renamed the test cases to be more descriptive"
api_refactor: refactor iso apis
Refactoring of inbound features.
"major refactoring: isolate UiS-specific code in ""Listeners"""
New TopologyManager.  Previous TopologyImpl would simply do link discovery.  Cosmetic refactoring (renaming etc.) would be done separately.
#NAME?
https://jira.jboss.org/jira/browse/JBIDE-6276 - preview for JSF 2 refactoring was created. SWTBot tests were added.
"making fewer tests, refactoring to newer docs"
Validation report interface refactoring
Small refactoring - Rename method from jarArchive to warArchive
"Tests added, minor code refactor, prevented a null error."
"Refactorings to resolve bug #342677 (removed LifeCycle scopes, overhauling of lifecycle factory initialization)"
Refactoring
Major refactoring to support request life-cycle.
SSL support refactoring
Jersey server-side request routing refactoring.
"Moved the data acquisition service to a seperate JAR; refactored how tools/devices and exporters are registered. Instead of keeping an administration of those, the menu is built dynamically upon each invocation. This allows us to defer the use of a service for as long as possible."
Refactoring of Trends
Refactored for easier reuse
"Few small refactor, site updates"
Refactoring of DeepShallow algorithm.
- refactored document requests code to better reflect inheritance - finished diploma request object implementation (only payment event creation missing) - removed 'notes' field from document request create bean (this field was not being persisted)
Minor Refactoring
[REFACTOR] Substantial changes related to the the integration of utility classes from other applications.
"Refactor the PollerTest to prepare for the introduct of the Outage TestsRefactor the Outage Tests to make them fit the Poller Test modelBegin to introduct the Outage Testing framework into the poller tests"
refactored registry-frascati according to renaming
results refactor
Refactored Thymeleaf implementation
continue refactoring of clientCustAction - refactored updatePersonalInfo method to move business knowledge from action class to service facade. created service for updating personal info for clients
"Big enum redo. Why build maps to push data into based on enums when we can just use the enum itself. Refactored StringTypes to MessageStrings. Massive camelCode update to everything. everyThing! Added getter/setter methods for log, scheduler, thisPlugin, Help, Permissions, and iConomy. Proper we are."
Refactored SEXP.evaluate to return wrapped EvalResult that contains visibility flag.
refactoring tests to match dotnet
"refactor receiver, decorator module"
Refactored processing of block metadata so some behavior can be overwritten
refactored to move logic to nodes rather than startegies as I'd introduced an unecessary abstraction layer.
refactored report generation to consolidate xml vs text rendering
PT-1548: Refactoring code - separate FamilyScriptService and PedigreeScriptService - refactor responses - refactor to better reflect new design when having a pedigree implies necessarily having a family
[ENG-85] Refactor position/security master
Minor change: - refactor code
"[ADD] XQuery, Inspection Module: xqDoc generation etc.:       http://docs.basex.org/wiki/Inspection_Module [MOD] XQuery: several refactorings to simplify creation of XML fragments [MOD] XQuery: caching of repeatedly used QNames"
"Check in Bug 208373 Fixed by setting dynamic chart bounds as axis label height, and setting Legend, Chart title, axis title invisible in axis image as well. This functionality is not open due to dependency limit. Refactored presentation impl classes."
"QAART-45 - Slideshow/SlideshowBuilderComponentObject.java, slideshow test cases refactoring"
refactoring: block devices
refactor to retrieve the variableDescriptor only once
NOJIRA: More internal refactoring
refactor and cleanup documentation
Refactor SpringApplication Environment config hooks
JBEHAVE-543: refactoring to have only one class to execute before/after steps and removing test for null method.
"Refactor auth method naming, add comments"
Continued refactoring of DOIOrganiser.
"[Misc] Refactoring: Move Type parser inside a ""type"" package"
"Refactored database differences into one single class, so that in future it would be simpler to work with different datbases"
Refactored CompactAlignmentToAnnotationCountsMode to use IterateAlignments (provides large speed ups when working with sorted/indexed alignments and selecting a subset of reference sequences for DE).
Minor refactoring in AS2 features.
"Correction of a bug occuring when the cache configuration is updated. Cache configuration can't be changed anymore for ""default configuration"". Private cache is now properly configured with Ehcache. Minor refactoring."
"Refactor providers, add provider parents, rename some core classes"
First item of refactoring additional items into inferred queue bean - https://issuetracker.camsys.com/browse/OBANYC-341.
Refactor package
JBRULES-1008 refactor the event interfaces on working memory so both stateless and stateful sessions can support them
Refactor packages & adjust formatting
Refactoring: Extract methods in P2TargetPlatformResolver
Processing: huge refactoring to have a better and powerful syntax
Refactor BundleVersionsHash to make it easier for external code to invoke the hash functionality.
minor refactoring
Refactored code
"Refactored the HistoryReaders so that the history could be cached for other systems than Mercurial. Now, the results from all svn and hg history commands that take more than 300 ms are cached."
Fixed ExtractFunctionRefactoringTest.testOutputParameterWithMethodCall test.
* Merged big-refactoring back to this dev branch.
GSA-507: Thread monitoring refactored so it can work without a thread factory
"Refactor, no functional changes"
Refactorin #137 + removed duplicated missing mixin error reports.
refactoring codes for JSON output and support Key.
add SharedDriver per_class and refactor
cleaning up and refactoring Balance in CREDIT-99
CAMEL-4244 refactored ExecutorServiceStrategy
"Big refactor, had to separate create from populating an object for cyclic references to work."
sonar suggestions and a bit of refactoring
api refactoring for Vert.x 2.0
"Progress on Mingle 2525 -- scheduling loan fees around a moratorium * Added comments clarifying existing code that schedules loan fees, to prepare for refactoring * Converted an integration test from JUnit-3 to JUnit-4 * Converted an integration test from using FeeView to FeeDto * Updated FeeBuilder so that it builds loan fees in addition to customer fees. * Fixed failing unit tests for loan schedule generation"
Refactor into an application and subcommands
Refactored the HibernateDoctorRepository and HibernatePatientRepository
Finished refactoring database interfaces.
 ItEr46S17CUListadoRecursosTraballadoresItEr08S08: Refactoring MultipleFiltersFinder class name and adding a new class to contain the common filtered methods.
Flow refactor of session classnames into module and etc files
Refactor LineRegion construction
NOJIRA Refactor SorPerson -> Person relationship; just store the PersonID in SorPerson
"feat(cmmn-assertions): add tests for stage and refactor activity(caseExecutionId) --> stage(caseExecutionId), task(caseExecutionId)"
remote gallery interface refactoring : no need to add galleryUrl on each call as it is already provided in the constructor
Refactoring of code related to transformations of the OO AST
refactor to rename namespace (unique namespace as target) refactor to prepare implementation for JAXB scanning move test application contexts to src/test/resources
Refactored
SVN1.7 (wc-ng): refactorings have made by Marc Strapetz
refactoring
* small refactoring of Neo4JAdaptor * bug fix in FlattenedIterator for occassional NullPointerException + test added
Extend the statistics to be sent to LibrePlan server. Code refactoring.
"Implemented ACT-140 ""REST API for Show process definition diagram"" & REST API refactor to make streaming binary code common - Moved common binary streaming code from ContentGet to ActivitiStreamingWebScript  - New Class ActivitiRequest that now wrapps the getMandatory[String/PathParam/Int] code so it can be used in both Activiti base webscript classes - Now extend the activitiStreamingWebscript (in web-application-context.xml) & ActivitiStreamingWebScript (in XxxGet.java) for webscripts that return test and/or binary data such as images"
refactoring
vm: refactor parsing (2)
Completed a bunch of refactoring.
Code refactoring.
tidy up proxy stuff for refactoring
Refactor of package names to be unique
EST-503: refactoring budgets
Refactor test cases
"refactor move collection utils that were not in the collection package and created a ""wrapped"" collection package"
"Refactored Database stuff Now we have a common base for all databases (servers, addons, textures). Also, the filter GUI elements (SortButton, FilterButton, SearchField) are made generic so they can be re-used."
refactor
refactoring: made logging static.
refactoring + fixes
add recovery when ldap connection is lost and refactor modifyattrib methods
Refactor packages
"refactoring: changed expandAll method name to setExpanded, made it protected instead of private, improved javadoc.  "
"JSON mapper refactoring, bugfixes, and some basic unit tests."
EST-564: Refactored ChargeGroups
Refactored CarbonLaunchConfig.java
"[SYNCOPE-303] Refactoring exception management, also by avoiding composite exceptions whenever possible"
refactor #format into small methods with single responsibility
"added javadoc comments, some refactoring."
refactored for maven
[refactoring] Call setters on ResolutionData directly
Refactored ImportGeometryAction towards reusability
Refactored configuration code; HttpClient instance is now immutable and static
Core: refactor label calculation (#1032).
Refactored axioms that can be represented as SubClassOf axioms so that they extend the OWLSubClassOfAxiomShortCut interface.
Refactored JUnit support
JFG-958 & JFG-983: add jobs status changing + refactoring (#687)
Refactored control element processing
Refactoring of IIDStore API
Continued refactoring base package functions structure in preparation for more complete support of generics
Cleanup/Refactoring.
refactor: move deal attribute encoder to its own class
refactor pixel extraction ui.      Add pattern sub dialog after directory selection refactor PixExOp (cherry-picked from 85ed542)
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - refactored newly added ClassOrInterfaceTypeDetailsFilter to generic Filter; can be applied by CollectionUtils
refactor obr
"Introduction of a ""flash scope"" and refactoring of the session/scope handling to factor code"
Refactoring of RequirementsRunner (#1275))
Adding merge sort. Refactoring to Strategy
RF# refactor report facade
Allowed admins to edit factoids without unlocking first. Refactored the code used to update the factoid into the updateExistingFactoid private method.
HIVE-13661: [Refactor] Move common FS operations out of shim layer (Ashutosh Chauhan via Sergey Shelukhin)
Refactoring and adding unit tests for some methods
"Major refactoring of the SpringHelper injection functionality, and the addition of tests for it."
"Refactored a lot of the code, and started on status-updates"
refactor move stuff to new package
minor refactor in stream
"Updated JavaDoc, refactored Samples class"
"Refactoring, organization, and code cleanup"
starting feature #5515 : - refactoring app to provide a reusable service - creating 'News' object dedicated to this app and using Period - removing useless code and abandoned functions (copy/paste) - moving dedicated portlet from Core to Components
Refactor ModelListener to SampleModel.Listener.
Refactored Services - AbstractCrudService added
Refactored affiliations to separate out the organization into a separate element.
"[SHRINKDESC-58] Refactoring, documentation, and cleanup of the Descriptors SPI"
resource manager refactoring
[refactor]: refactor ssl session
Refactoring of SelectTest
Refactoring the code to make it easier to reason about
Refactoring.
refactor processor factories
#NAME?
Update list event added a scenario to roleAt it tests refactory changed ft dataset
Invoker refactoring.
Refactoring columns and offsets
Refactored the growl service a bit in prep for progress-style growls.
Refactored VerificationService to be more general and don't require the server to send email with the token directly.
Refactored NodeGroup child loading:
GTNPORTAL-196: Refactor the code in UIAddGroupNavigation
"refactored, DocumentRequestCreateBean extends new upper class RegistrationSelectExecutionYearBean"
major refactoring to prepare statements at start up and stop using batch statements
small refactoring
"Working versioned input stream test. Relatively complete. Still some concern that navigation of versions could be impacted by arrival of header. Similarly, some reads having to time out to realize eof. Need to consider this in redesigning the header/last block marking refactor; want to minimize timeouts."
Frank reports orientation. Also too much refactoring for one commit.
Refactoring. Fixed session scope plots rendering. Added task boundaries rendering for session scope plots (monitoring).
added validation code. extract method refactoring applied
Added PostorderNodeListGenerator; refactored common parts into AbstractDepthFirstDependencyTreeTraverser
"refactoring, so it can be used without subclassing"
refactor for issue #4753
REFACTORING Changed package for math-related spikes
refactoring increment and decrement
More refactoring.
* Refactored profile client. * Added MongoScriptRunner and script to initialize profile database.
refactor the guide feedback code.
"refactor DAO, added applicationContext, application properties, and spring beans"
refactoring and some stuff
"substantial refactoring: changed the header of SolarisUtil#sendPassword (matches the structure of SolarisConnection#executeCommand(cmd, rej, acc)). Preserved the old sendPassword(passwd, conn) too because some outlier use-cases (1-2) doesn't require to wait for anything after the password is sent."
Refactored scene2d stage debug rendering.
Refactor storage code to delegate storage to the attributes themselves
refactor the cat month report
refactoring and fleshing out intravm connection abstraction
"Activiti Cycle -  Architectural Refactoring: restructured MimeTypes, RepositoryArtifactTypes, ContentRepresenations and others using annotations. "
"Internal refactorings for ""Deep Insert"""
"CAY-1230 Refactoring & unification of ""ROP"" and ""classic"" class groups Changing tests to show that we can work with same set of classes for client&server"
refactoring: extracted methods; added test
Equivalence Refactor
TED#15393 Set default aggregation functions for Stock chart during chart type conversion. Default query expressions are unable to restore. Refactor ChartUIUtil by removing duplicate methods.
"implements other types, fixes #9 , test package refactor, adds in initial stats package"
refactors executable class
"refactor restx shell, making it cleaner and more extendable"
Refactoring around rexster mime types with more unit tests.
Refactore JmxRequest to be more type safe and in order to prevent a monolythic approach.
ACT-60 pvm refactoring of atomic operations for scopes and events
175733: [refactoring] change execution should not happen in the UI thread
Refactor response parsing to a unified interface
"REFACTOR: moving Memento stuff into it's own package -- it's really a new Replay format, so like archivalurl and proxy mode, should have it's own package."
NOJIRA: Refactored much of the event handler that updates a cataloging record's Computed Current Location field.
Major refactoring of sip messaging
"Refactored Artifact.ID, now we have 'connectorId', 'originalNodeId', 'currentPath' and 'globalUniqueId' Added ID for repositoryConnectorConfigurations Fixed bug in Signavio Connector to let it fail in log level FINE Added missing httpclient jars to web-app in demo setup (caused by new restlet version)"
refactoring
Refactored Comments and Optimizer for Generic Versions of the Contracts
Refactor
Refactored SSL I/O session class; removed dependency on HttpParams; moved SSL I/O session and related interfaces to public API
refactored the packages to a little simpler structure and allowed the fab handler to work in vanilla java too
refactored formatter stuff to proper package
client proxy refactor
SONAR-4087 refactor GraphUtil#uniqueAdjacent()
refactoring
Removing TestLoggingAdapter. Refactor JavaController/Action/ActionDefTest into right suite. Separate Logging test into separate test file.
"additional tests for jobexecutor, refactored simple example"
minor refactoring
Refactor await() conditions into standalone objects
Major refactoring of SQL feature stores. Outfactored differences into SQLDialect.
Refactor AdvancedExternalizerAdapter to new wildfly-clustering-marshalling-infinispan module.
Refactoring Regex2PotTask for reusability.
Minor: refactoring
refactoring of widget bindings.
refactor data view support
"OCW-311 : Refactorizar el método del servicio de publicación que muestra el detalle del curso y añadir condiciones para que únicamente pueda acceder a la previsualización si el usuario autenticado es administrador, propietario del curso o está autorizado a modificar el curso."
refactor some interfaces
Refactoring of compile units names to better reflect project structure
Simplify Filters architecture and refactoring. Creates FiltersUI module. Debug.
"Refactored Phenotype download class to use sets to compare ALL page and download rows instead of trying to compare a single download page row against the first one (or two, if sex = both) rows in the download file, which was problematic at best as the first page row often didn't match the first download row."
"README and refactoring, improved examples"
"implemented funky callable, + some needed refactoring. The callable will never throw any checked exception, since init block cannot throw checked exception. Closes #12"
Refactored to use a common table row interface with an implementation for the initial state and an implementation for the incremental one
refactor
Refactor test case code for cache variable lookup via reflection
"#JC-1137 Correcting validation of poll JavaDocs, tiny refactoring"
Refactor the name of both the directories and the artifact ids of the ResourcesManager project and of its subprojects
A lot of general code cleanup and refactoring. Made Part properties in tables dropdowns. Made Package properties in tables dropdowns. Added a new Identifiable interface which most model items will eventually implement. This makes it easier to use them in lists. Changed upload-snapshot to check for unlicensed files before upload. Part now throws a RuntimeException if you try to set it's ID to null. I think setting is going to go away completely after a GUI review. Added the basic framework for adding new packages. This is somewhat dependant on the above ID decision and is not yet complete. Now that I think of it… I am probably getting closer to a database / primary key idea here. Got rid of the auto complete dropdowns for now. They look like hell and barely work. Added concrete list models for a few of the config lists. Upgraded to swingx 6.1.4. mvn eclipse:eclipse will now download and install javadocs and sources for dependencies. Changed build number to 5 characters only.
small test refactor
Refactoring to rename owlapi packages.  First rename: org.semanticweb.owl -> org.semanticweb.owlapi
#NAME?
LaunchBar - added test plugin and refactoring
refactored to support  higgs cluster and and address threading issues that conflict with Netty's model
Refactor site catalog pk location
"EST-794: SSRS renderer, refactored Link and new mixins."
Finished: Bug 126839 [DataBinding] IObservable refactoring
Incremental refactoring of Continuation to have it replaced eventually by Message
Refactored to introduce DataSource and IRIRewriter
refactoring
minor refactoring
refactoring
"Standalone Atlas: refactoring to make sure everything uses new package name convention.  Only outstanding use of uk.ac.ebi.microarray.atlas now is in the model, can't change this yet as this would cause conflicts with the version of the model that is there already."
Refactored mock helper to a separate generic class
mifos-1934 - Remove fees - rounding when removing fees is not yet updated to use new rounding rules.  The code change is just a method refactoring for clarity'
Refactor from old Tuples to new EntityApi
Refactoring of the options package.
"Refactoring, and an initial version of a clean Epoch abstraction, including size deltas."
Merged BpmnDeployer refactoring. Made classnames and class members consistent with typical Activiti conventions. Renamed ExpandedDeployment to ParsedDeployment and extracted Builder and BuilderFactory into its own classes.
Major refactorization. Removed packages and changed the name of the classes.
"bug 213775 - XSL specific Syntax Highlighting, Unit Tests and Refactoring"
Refactored: avoid *Impl / ObjectSerializerImpl
finished refactoring packages
Refactored for better readability
"Refactored to allow the user to specify the range of cycles they wish to call.  Simply specify a single range (i.e. '0-75') or two ranges ('0-75,76-151').  This allows single and paired-end read processing to coexist happily.  Also implements annotation of an aligned bam file (which should hopefully fit in under two gigs now, but I'm waiting on a bug fix or a clarification from the Picard team."
Refactor and add the concept of <Framework>Runtime handling. This allow sending the Atmosphere closing protocol at the end
"Refactored tests so all run with permutations of configs, and fixed bug with serialising ObjectId instances"
refactor tests and fix OAuth tests
Refactoring and moving of some resolver API classes.
SONARPHP-263 Refactor the rule.
core: minor refactoring in stop vm related commands
"K Plugin: Module-local reference targets: targets for references should be searched in the current module only, not the project. Also some refactoring."
YARN-599. Refactoring submitApplication in ClientRMService and RMAppManager to separate out various validation checks depending on whether they rely on RM configuration or not. Contributed by Zhijie Shen. svn merge --ignore-ancestry -c 1477478 ../../trunk/
general repository refactoring
TAJO-598: Refactoring Tajo RPC. (jinho)
"Refactor impl package, cont3"
refactorings
Started on release scripts Added license Reenabled ignoring methods (not entire mock objects) Refactoring
"SONAR-4908 refactor RulesDefinition API (debt functions, XML)"
#NAME?
JSONLDWriter refactored from JAX-RS Writer into Jena RIOT Writer Fixed JSONLDWriter registration in Application.init()
Refactoring of REST URI dialog handling SOAP-398
beginning of client registration refactor to track IETF dynreg spec
More refactoring
Refactoring roboplexx and HTTP server to run in the same service
Refactor 3 - simplify names a little
Processing infrastructure refactoring.
pom.xml refactoring and task executor decroctor refactoring
"Added __emitterid URL parameter. If specified, it has priority over the __format URL parameter. Refactored report engine service methods using input options. Refactored action handlers using input options."
Complete Locale refactor. Move some Config values to the Locale. Getting ready for move to MChat namespace.
"more test cases, code refactoring and cleanup"
mvn refactor
Refactored execute() to two smaller methods. Now heeds ACLs on pages.
merge tool - refactoring in progress
Refactored creation of requests.
#NAME?
"Refactored ivory.integration package into {adhoc,clir}."
Refactor marshalling code to use staxnav.
Feature #7291 - ThumbnailInstanciator refactoring: - implementing ComponentInstanceDeletion into ThumbnailController and adding integration tests to validate it - re-activating all Thumbnail unit tests that were into test-waiting folder
SOAP-1327 * Reformatted code. * Minor refactoring.
refactor role editor to extend new AbstractRecordEditor base class
Refactor: Apply layout to *all* interval classif.
Refactored SemanticSearch package names and data mapper java test package names
"http://jira.sakaiproject.org/jira/browse/EVALSYS-360 Put in a fix for the submission problem, reverted to creating the response all at once, added in some code to record the length of the evaluation Refactored structure to reduce circular dependencies Moved most security checks to a single class Updated tests to use less mock objects and more functional code, most tests are integration tests now"
WINDUP-109: Major refactor of Model classes and general cleanup
Rest/Wsdl/Http-RequestPanel related refactorings
Slight refactoring and basic JavaDoc included.
refactored Graph package now also contains an abstract graph. Improved javadocs.
"Refactor listener hook, add list selection support"
"refactored,works"
Fixed complex template mapping for BQL. Fixed integration tests on Windows platform Refactored the Sensei servlet
"code refactoring: testAll() moved to parent, rules are now added in setUp() using addRule()."
TrackMate_: WIP2: major refactoring
TAJO-610: Refactor Column class.
refactoring with spring support
Finish KeyDirectory -> PrincipalKeyDirectory split/refactoring
[109128] Minor refactoring
"refactoring to add PaperRecord object, WIP more tweaks"
refactor: more flexible embedded equinox runtime config
Refactor AbstractTreeIterator semantics to start on first entry
[LOG4J2-583] TCP and UDP socket servers should be able to handle XML log events. Refactor current code for XML and JSON. Create stubs for XML and JSON implementations.
Refactor - move repeated code into markJavaFileModelAsUnprocessed()
"Add LiveWebProxyCache base class to share same connection manager, refactored as base class to the redis robots cache support for proxy loading for live web"
Clear unused code ; refactor to org.seaborne.tdb2
#JC-1261 Refactored tests for bb code
Refactoring
"- Redstone torches, doors, trapdoors can be directly controlled by an output block. - new /rctransmit (alias /rct) command for transmitting data over wireless channels. - output devices are updated to the output pin state when attached. - When reading the channels file the saved state of a protected channel is transmitted to all its receivers. - Input pins properly ignore redstone sources in the block below them. - /rcpin also works when interacting with an output device block. - Wireless circuits deregister themselves on circuit shutdown. - Added and updated javadocs comments and some refactoring. Moved all channel related code into ChannelManager."
Refactored isWaitingAt assertion(s) for process instances in order to reuse more code.
JobFactory refactoring
small refactor
Fix SortaServiceImpl test Refactor: move job execution entity and entity meta data to own package
refactoring and adding Spring integration
JBRULES-761 Automate the Eclipse build -refactor the test paths
refactor
TEIIDDES-450 Refactoring Connectors to the concept of Translators
Start refactor of Activiti app projects
Added test for creating projects witch java 1.7 Refactoring tests.
DRILL-735: Refactor HiveRecordReader
refactored packages
"Initial checkin of RIM client from LifeMarks, after initial refactorings and style changes, etc. May still need work."
Refactoring: make sure queuecompletor and print queues command use same code.
Refactoring of XML related deferred binding code finished
Refactored createContents
refactor codes about includedDataMart to remove it.
Code cleanup and refactoring
Refactored
#2 Refactoring.
Cleaning up and simple refactory (again)
"[WFLY-405] refactored classes, CumulativePatchingScenariosTestCase - new test testApplyOneOffToWrongTargetVersion"
added lang tag and type tag for literals in table output formats refactored some code used by output formats
Code refactor
Fixed #46 Refactored application packages
Refactoring of code to make classes less coupled (in order to facilitate using the same components for more than one GUI).
"* implement filters in like ""chain of responsibility"" pattern in Dispatcher and RequestCallback. lots of refactoring, move some better versions of classes from our project to the restygwt"
Refactored propogate (misspelling) to propagate.
Refactor BalancingAsyncHttpClient into BalancingHttpClient
[LOG4J2-341] Enable XInclude for XML configurations. Start work on getting XML configs using XInclude to be validated. Refactor the creation of the document builder in a method; refactor enablement of XInclude in a method. Tests must process the XML document to allow XInclude to kick in before validation is performed.
Changed the hierarchy structure and renamed the package to at.rovo.crawler. Updated log-messages to recommended invocation style of log4j2 and updated JUnit tests accordingly. Had to refactor UrlReader to the Common project as an other framework does require it too
More refactorings in PixelPosEstimator
NoteServiceTest refactored
fee refactoring in preparation for early repayments work
Minor refactoring
Refactored DistributedDatabaseClusterManager -> DistributableDatabaseClusterManager
Minor refactorings
refactored application-level components to use immutable builders
Refactored code
Fixed a bug that didn't print the content spec was starting to parse. Refactored a bit of the create command to make it easier for future changes.
[CXF-5135] Related refactoring to get various provider registration options supported
fix #1520576 - Join operation code refactoring and fix
"Refactorings: Creation of PDFs is now no longer coupled to views, but to the class type of ReportDto."
Renamed and refactored Streaming DB code. Modified existing datastore code for compatibility
some refactoring. added socket connection timeout support for jmx reader. added some javadocs
"Reorganize services, refactor generators"
HttpConnection refactoring work in progress
Issue 73: Revised and renamed key value store to BlobStore with common Map implementations; refactored implementations and test drivers to utilize new blobstore
bean converter refactoring
AJAX responses refactored.
"Added DB entities, tables and DAO methods for People links and comments,  Added test case for all DAO methods Refactored Entity names to have a common naming schema added first hacky version of Signavio DIFF POC"
Refactor: rename ExternalRepository to Repository
Symbol model refactoring
Refactor the name of both the directories and the artifact ids of the JdbcConnector project and of its subprojects
CAMEL-4417 Move AsnycProcessorTypeConverter.convert method to util as we also need it in support classes at a later refactoring. Introduce DelegateProcessor interface
[rcp.utils] minor naming refactorings
refactoring - exhibitory and inhibitory neurons as part of core
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - move relevant methods from XmlUtils to DomUtils and tidyup
"[BI-334] After Runtime.exec call, all opened streams are not closed + refactor"
Kafka test resource refactoring
Refactor MethodMatcher (#999)
Console proxy refactoring incremental check-in - pluggable framework for VNC and RDP engine
refactor of Runtime to RuntimeEngine
Minor refactoring
"Fixed rbind() as well, refactored cbind/rbind to share more common code"
Refactor EncryptionSupport to use tracker
refactoring
Refactoring and docing
Refactoring: Separated type handler maps into two types: one for system-specified handlers and one for user-specified. system-specified handlers are the ones that Gson comes with (DefaultTypeAdapters).
refactor to simplify
Further refactoring
Refactored validation in XDS-like transactions
api: Refactor command and response classes to org.apache.cloudstack.api.*
Refactor to avoid passing BrokerTestCases around...
more refactoring for ACLs
"Refactored the shape classes, some work on ground/walls."
Refactore backend handling and keep now a timetamp for the last MBean change.
Refactoring out complexity
refactored MyVerticle
"Complete refactoring of cycle repo API, not yet finished completly"
small refactorings and cleanups
PLAN 4540: Workspace refactoring: moved to plug-ins
refactoring and feeding lasted time formatting
Refactor: Update jersey filter to search for remote hosts
Refactoring to support Dropwizard approach as part of a larger simplification operation
refactor Ant bundle task to support new Ant bundle recipe format
Refactored code used to load values into editor input fields. This code now uses interfaces to determine which input fields should be loaded for each user object.
Refactored: create the response writer in the same thread where it's used
"name refactoring, fix compiler errors"
Refactoring between samples and putting it all together
Refactoring
refactoring WS ref related class names
446564 Refactored RequestLog Mechanism
#106 worked on codegen refactoring
Refactored ScoreTracker to store Player object.
"refactoring, fixed 'print application' command"
Continuing the refactoring experiment
refactoring
Completely refactored how blocks and macros work
"Assigning the agent to the affinity group; some refactoring (renaming AgentNodeDatasource -> AgentDatasource, AgentNodeDatasourceField -> AgentDatasourceField)"
refactor: remove nav class completely and simplify structure. refactor backbone code.
Analyse - Architecture Reconstruction: First prototype implemented and two testcases added with additional resources. Define: Service created to add modules + internal refactorings. 
"imglib2-scripting: refactored integral histograms. Now arbitrary, non-linear histograms are possible."
"- Reviewed by T1 - Updated pom.xml to remove the version number for junit, resulting in all unit tests run by junit 4 runner instead of junit 3 - Renamed all classes with the prefix 'Test' to have the prefix 'Mock' instead. - Refactored all the usages of the old class names to new ones. - all the unit tests pass"
"amir, ashok | #123 | refactoring tests to use builders"
mega refactoring
Refactored againg linkd test class
1. Add test for StartTLSState.\n 2. refactor the State test layer
Refactor to better support penny rounding. Remove setTotalTax on orderItem - this already existed on FulfilmentGroupItem which is where it more logically belongs.
Refactoring oozie workflow modules
"Refactored YAML entity creation to use a two-phase approach (create, init)"
Use RefactoringSaveHelper for all files that need to be saved
Refactored remote start and stop to make the functionality clearer. Updated remote-start-and-stop documentation Updated release notes
refactor extensions into core and contrib
refactored filehandler
refactor and add new method
bobo-contrib:  Refactorings -  Created common interface for all GeoRecord implementations;  Created GeoRecordSerialization interface so the lower level tree objects can cleanly work off of any GeoRecord implementation as long as a serializer is provided;  Refactored GeoSegmentWriter to use serialization class
Refactoring and minor updates
refactor user entity
Refactoring
cleanup: refactor cluster views
refactored out common id parsing logic in ultradns
Refactor SSH commands with SshCommand base class
Refactored Citrus test loading for XML test cases and introduced Citrus main class being able to load Spring bean application context
Feature #5616 - improving WYSIWYG image size management: - refactoring the WysiwygContentTransformer to get more flexibility - taking into account the missed cases - taking into account an impact on the mail content transformation - fixing problems of transforming image URL with wrong sizes - improving the performances - adding a new useful and amazing tool: StringDataExtractor - adding a new processor for SilverpeasFile in order to handle Attachment Url Link - moving the Attachment URL processing from the save to the load operation
MAHOUT-746 Refactoring of the parallel Naive Bayes implementation in org.apache.mahout.classifier.naivebayes
Huge refactoring of JavaSE Framework Include new required and provided port
"Added a test, minor refactoring"
Emails Refactoring   - GEP (interface changed)   - Tutorship
refactor: renamed update (ACCOUNT oclass) operations to fit the naming schema.
refactor(engine): rewrite variable stores
Massive Refactor pulling world out to a higher level.
All tests do pass; did some refactorings.
"JBRULES-1993 BatchExeution and message format -Some refactoring to better names, like BatchExecutor is now just CommandExecutor"
unit tests and refactorings
refactor allDiff
Refactored OpenShift SWTBot tests.
EST-546: Refactor fixture scripts to appropriate country
Imran/Balaji: Refactorings1
Massive refactor of destination choosing underway
Refactoring: moving methods to Util class
refactor comments a bit before adding block parser
refactored all the loop breaks out
"Ticket #19: EXPERIMENT: Implement a CDI Portable Extension for Apache Camel  * Made !CdiInjector rely solely on the CDI !BeanManager for instantiating classes, refraining from using reflection as a fallback mechanism.  * Refactored package structure.  * Implemented a mechanism for looking up custom instances of Camel's !PackageScanClassResolver."
"implement ProcessBean*, refactor lifecycle events to be cleaner, various other fixes"
Package refactoring
J-324: Jersey runtime executors refactoring.
REFACTOR: these are now base classes with common method for (Url|Capture)SearchResult(s) classes.
Refactor of expect/response classes.
Refactoring...
Minor refactoring
Refactor how the MANIFEST.MF is consumed
Refactor. Added Predecessor and Successor functionality
Refactored NIO to better handle half closes.  Applied the following policy:
ONYX-865 : Minor styling issue + refactoring of code.
WIP:  Refactor
"MIGR-228, MIGR-205, WINDUP-479: Java AST processing refactored"
Last batch of refactorings to remove dependencies of test-nonotify and test-datadebug on test-data
refactory a bit the type system to be more precise
Implementation 6 core dependency types and refactoring old types.
DEV: refactor package name.
"Revert ""Little refactoring"""
"JBRULES-484 refactor the core reteoo code for sinle and composite propagations -code now compiles and manners runs, just incorrectly -also includes the alpha node hashing rewrite."
Refactored the Done object into a RequestMonitor (bug 177081).
Refactored testing a bit
"History database implemented, refactoring of android database helpers."
"Code refactoring, removing duplicated code."
ReFactor code Forum
save & load avec visitor + refactoring parce que y'avait de la pres dans le moteur et c'mal
Minor refactorings Get rid of warnings
A lot of refactoring to bootstrap and core code that was necessary for #97 (Automatic node detection and reconnect through wsn-device-utils' observer module)
"Refactoring of views to allow cascaded submenus. Views now have a concept of ""native menu"" and stack of ""active menu"" The view's current active menu may be different from its native menu. Implementation not complete yet."
Refacoring the refactoring structure
"Refactor into a basic command line class to hold common options, right now only ""help"" but ""version"" makes sense too and I'll add that later."
CheckIn: Fix bugzilla bug 319351 Refactor data set editor pages' codes[28193].
refactor
[MOD] XQuery: refactorings (functions classes renamed) [ADD] XQuery: some code eliminations and rewritings added
"Refactored WM_CLEAR, WM_CUT, WM_PASTE, and WM_UNDO to all call a new verify method."
"JBIDE-14300 Implementing Capture.getFormatData() method via FormatDataServlet, refactoring, ripple submodule updating (cordova 2.5+ support)"
Refactored ScreenshotTaker
Refactored a little bit of the location trigger.
Refactor package
Blocking on future returned by DRF corrected.  - now it blocks correctly for all nodes to finish their DRF round  - jobs partially refactored. Waiting for new Jobs API
intermediate commit: refactor to sql based data
o Removed an unecessary await call that was disallowed in Netty. o Fixed a reading bug in BlockLogReader. o Refactored tests to allow starting master and slaves at different times.
package refactoring
Refactored so that datasources could be provided externally to the MigrationLauncher.
"Pull the generic sound playing api from SoundManager up into AbstractSoundManager and implement the actual sound playing with Java sound in SoundManager and with OpenAL in OpenALSoundManager.  I left the SoundManager name alone so nothing using it will need to change, but if nothing besides yohoho is using it, I can refactor it to a more sane naming scheme."
Refactored GetFeature class to meet WFS 2.0.0 requirements. Added GetPropertyValue stub.
Refactoring: access engine
fixed distinct usage in listDistinctResults updated version to 1.3.3 refactored standard tests to test all projectable projections
Refactored to reduce impact on PreferencesDialog
RESThub core : refactoring tests packages
refactor
Refactor T55 protocol decoder
#POULPE-404 Refactored noEffectAfterDropItem(...) method in ForumStructureTreeModel class. Added tests for it.
Refactored actions
Fixed bug where application in stop mode remains stopped even when started later. Refactored non-persisted deployment configuration into separate abstraction. Added missing console output when pushing application.
MediaTypes refactored into readable and writable
JBRULES-1668 Smooks Data Loader -minor refactor
Refactored.
Refactored to support parameters better
Refactor chart model code as follows: 1. Remove ChartWithAxes and ChartWithoutAxes reference in super class Chart according to OO methodology 2. Remove warnings caused by generic collection and missing javadoc
Refactors the code which analyze the word in the content of the pages and the sites
refactoring
Refactoring ACL.java and IACLService.java
Refactory ClassLoaderThreadFactory to wildfly-clustering-service.
Refactored
SVNDiffClient is refactored to use SVNURL instead of String
refactored
refactoring session access behind SessionFactory
add run menu and refactor UI
Minor Refactorization in QueueJobFile
Refactor and fix
XML File Processing Moved into separate package; Dummy classes for annotation and dsl support; Refactoring of XML Loading;
trunk:   - refactored SVNDiffClient: moved the merge implementation out of      a public API class SVNDiffClient to an internal class SVNMergeDriver
Some refactoring of code to tidy things up.
second part of large refactor. Remove availability reports from opennms-reporting. Also remove DatabaseReportCriteriaCommand that caused issues when added to triggers and use DatabaseReportCriteria  with external validator instead (thanks Alejandro)
refs #161 - sources refactored for URN usage
"Distributed: refactored OHazelcastPlugin class, added lock holder on distributed record locked exception"
private marshal0() method. A bit of refactoring
Refactored generic comparators into a static utility.
refactor: rename AbstractBloombergDataProvider to AbstractBloombergStaticDataProvider
Bug 709348 - Review comment: refactor trace logging.
refactoring: typeOfCases -> computationBase
Refactored TCF#initComponents()
refactor project to include projects
"Refactored/renamed things related to distance calculation. It turns out ArcDistCalc was actually Law of Cosines, so I renamed accordingly."
"JERSEY-1329: UriBuilder#resolveTemplate refactoring + switched to new JAX-RS m11 	- created new 6 methods resolveTemplate(s) in JerseyUriBuilder and JerseyWebTarget 	- tests added 	- current tests switched from pathParam to resolveTemplate (pathParam will be removed from JAX-RS) 	- current tests switched from WebTarget#queryParams to multiple call of queryParam (queryParams will be removed from JAX-RS) 	- I had to make profile 'attach-src' activated by default in /pom.xml (there was problem with building bundles/jax-rs-ri-bundle). 	- Switched to new JAX-RS m11 API (UriBuilder, WebTarget, ResourceContext)  Patch 2: JAX-RS m11  Patch 3: small fix based on Marek's comment"
Refactor filterContentByContentArch up to X509Util
refactoring
Documentation and refactoring.
IMPORTANT / Refactored TOCModel / Work in progress
Refactoring gestion minutes transport dans employe
"1) Create ConversionError, ConversionResult, DecimalInput tag classes 2) Implement parseDoubleForMoney, parseDoubleForInterest 3) Move maxInterest, minInterest to application config file (hard-coded before) 4) Add testcases for AccoutingRules, baseactionform, LocalizationConverter 5) Replace MifosDecimalInput with DecimalInput for CreateLoanProduct and EditLoanProduct 6) Refactor LoanPrdActionForm"
moved test client logfile to maven properties & refactored properties reader
refactor(engine): dedicated job configuration classes
perform code-refactoring
Refactored CommandLineXmlProcessorCalabash to allow multiple input ports.
refactoring to use composite keys and unit tests
Test changes to adapt to the ExceptionAdapterImpl refactor. @bug W-1820840@ @rev goliver@
JSFUNIT-139 refactor TestUtils.java to Utilities.java to allow successfull build (TestUtils broke the test phase)
Refactor decomopositions into mikera.matrixx.decompose namespace
CAMEL-1112: Refactored file consumer. Removed @deprected. Added idempotent option. Work in progress as sorting and filtering is needed.
Refactoring
refactor api
Incremental cache warm refactor check-in. Added QueueKeyBasedTasksExectuion action and GetPersonsByIds mapper with unit tests.
javahl: SVNClientImpl and SVNClient: methods implementation updated + code refactored.
"[Bug #798] Refactor 'Remove Criterion' window, change it for a MessageBox window"
"#POULPE-299 pagination added, yet needs some refactoring"
Refactored some common aspects.
Refactor and improve UnderlyingResource internals
Refactor packaging.
Metamer: refactored AbstractWDTest for testing events  and TestA4JCommmandButton.
refactored to use optimized HashMapInt
Big refactor to move away from DTO naming and refine it to a model instead. This allows for a richer domain model.
More refactoring; improving naming of ResolvedType implementation classes; should be stable now.
refactor to latest blueprints
Refactored lengthy method in DefaultArtifactResolver to help comprehension
Refactoring some of the gcode parsing functions. Pulling them out of the visualizer into something that can be shared by a G02/G03 to G01 expander in the controller class. This also improves the gcode parser to handle commands without spaces between each argument which closes issue #73
Reverted refactoring comments
"Code review, code formatter, refactoring of the tabs"
XWIKI-5454: ImagePlugin size reduction improvements * Applied patch from Ludovic with a few changes * Refactored the image plugin and applied code style ** Replace most of the deprecated calls ** Detect the supported mime types at runtime ** Separate the code that processes the images (the code that uses awt and imageio)
refactor
 refactoring packages de tests
Refactoring and added that a student can add a custom assigmnent.
"Pool Repository: Small refactoring of Consistent Store, to increase readabillity and reusabillity. Just moved coding around and refactored into new methods."
refactored microchip potentiometer impl into components
Refactor GoogleAuthenticatorChallenge to allow for setting code along with challenge.
1.0.9-SNAPSHOT; some refactoring on string conversions.
"Tons of changes, small refactor, most Tools are now Weapons! Added animation data, implemented entity damage! Fixed a few NPEs!"
list xml refactoring
StackCalculationVisitor refactoring + test improvement
TEIIDDES-1622: Refactors the ModelerUndoManager
Refactor clean files and clean folder rules.
Refactored current files and added a few new ones.
Intermediate commit. Refactoring classes.
Refactoring and some web
refactored virtualbox scripts to use new scriptbuilder functions
refactored to make core state interfaces hdfs-agnostic
Refactor ConsoleReporter output
[204226] refactor rename does not work as expected after save as.  Didn't update the URI.
Groundwork for #9715. Refactoring of the query engine (#9746)
partial refactoring to have sync check iteration termination
Code refactor to put all algorithm-related stuff together
"smartsprites: SMARTSPRITES-11, SMARTSPRITES-19: full support for PNG8 and transparent GIFs added. Simple color quantization included. Refactoring of testing classes and parameter handling. Code clean-ups and documentation still to come."
Refactoring (for use in capabilities)
* ruby ast refactoring * LOTS of ruby parsing improvements * ast view
"Refactored Quirks into seperate modules. Changed QuirksDetector to use ServiceLoader. Also added some copyright notices in some of the files, more to come."
"Control: Scrollbar added to taskbar, behaviour after different events standardized, and code refactored."
Webadmin: Patch to disable checkboxes after submit in the poolusage page. Mainly this is done by a refactoring of the PoolList-Class. The Model is now directly bound to the membervariable of the page and after the submit a reload of the Pools is done. In addition I discovered an API functionality to provide the marking of each line with the html attribute even/odd and refactored the EvenOddListview Accordingly. I now set a default-selectOption (enabled) in the dropdown-menu.
refactor signUpAndCreateTopicInBranch test
"refactoring da navegacao , nao havia gostado do resultado"
"Refactoring the updateResourceLimits code, moving all logic to agent manager, updating the enum with a new manager type for reflection"
Sampling profiler refactoring
Refactor onebusaway-sms-webapp to move SMS actions into the /sms package namespace relative to the root webapp.
[refactor] split Wallet data out of AccountInfo - AccountInfo now has multiple Wallets indexed by string id - Balance fields flushed out - Deprecated methods removed - All tests pass
massive refactoring to make epublib more logical and easier to use
refactored record linkage
"refactoring and code cleanup, added rest jars"
[KARAF-3205] Refactor create-dump to be more low level
[SUREFIRE] refactoring
Refactoring Black and local volatility surface default functions
refactor distribution assembly.
#419 Refactor to use maven-failsafe-plugin to run IT
XE-651: RSS feed for search results doesn't work XTVALIDATOR-6: Add RSS validator * added RSS validator plus some refactoring
XWIKI-2431: Introduce new Execution Context concept and refactor the Container component accordingly
refactor balancer metric emission code
test refactorings
Refactor TCK tests for svn in maven-scm-provider-svntest
Merged and refactored changes for #17
Small refactorings
Refactoring of symmetric and key generation from password.
Refactoring around group notion. Improve tabbable
refactoring checksum verification to support self-healing and reporting on better
Refactor package name to conform to standard
"JBRULES-881 JBRULES-880 	- support for 'accumulate' Conditional Element 	- refactored AccumulateDercr and CollectDescr to inherit PatternProcessorCeDescr baseclass"
"Refactored BasicDecider to be able to run across all files in the db.  Ensured that only one of study-name, sample-name, sequencer-run-name or all is used in the command line."
Some non-trivial refactoring of DocumentProcessingUtils. Propagated changes to indexing code.
Refactored the FindUnsatisfiedObligation detector so that
"The core elements of HBASE-2037: refactoring flushing, and adding configurability in which HRegion subclass is instantiated"
"ok, first refactoring, reorganizing packages"
anothet refactoring step
[313337] Improper refactoring and highlight of occurrences of templates and queries
new source mode tests major refactoring
refactor the SectionWalker
Refactor and simplify the Visualization module. Update to the new Graph API.
"CLEREZZA-415: refactored parser code and fixed parser bug regarding bnodes as objects which do not appear as subjects, added tests"
wordscommandthread refactoring
"Moved unused code to limbo. Upgraded support-tools: checkstyle, pmd and findbugs to most recent. Addressed over 100 issues reported by findbugs and checkstyle. Resulted in major refactoring of GBFFilter. Net result is that code size is significantly smaller."
refactoring
Refactor Level to Group for sanity and allow custom groups in commands.
Refactoring
cleanup + refactoring
Refactoring and Admin Functionality added
Refactor the ClassModel to use use and expose the ProcessingEnvironment to allow subclasses access to the utilities. Also some minor clean up.
Test coverage: improve some refactorings
XLCLOUD-207 added user account name to user details in vcms-gui; refactoring users-repositories
"loan refactoring: refactor business entities into service facade, fix failing acceptance test"
"o New feature: Ability to run web apps from nested classpath (foo.jar!/my-webapp/WEB-INF/web.xml). o Refactored the code to separate configuration from the ""active"" parts."
Refactored and added new Exceptions
#NAME?
"Add initial panel for TOV Family, prepare for a refactoring of the panels."
Refactoring of functional tests to remove horrid static dependencies. Introduced a server builder to deal with it instead.
Did some refactoring work to simplify how we deploy onto underlying Web servers. 
JSTransformer refactoring
"NXROADMAP-135: processing documents with pageprovider, detect excel row limit, use multiple sheet to span exceeding columns, added test cases, refactors"
Refactored tests so that the same code can be run in single-JVM and multi-JVM environment
refactoring
refactored tests
DefaultRecordStore refactorings
All unit tests are passing after full refactoring
Completely refactored.
clientCustAction refactoring - fix problems with CustomerDetailDto introduced in refactoring and rewrite integration test around area.
Refactor RequestBuilder into Request.Builder This makes it more obvious in your IDE of choice that a builder exists
OPEN - issue JAVAMONEY-37: Refactoring towards Draft Releases  https://java.net/jira/browse/JAVAMONEY-37
"+ Display logic to show only #stops away below a certain threshold + Admin fixes + All time-sensitive display logic using location update time + ""No service in next 30m"" copy fix + Refactoring of nyc-presentation "
Refactored menu structures and home pages for kie-wb and kie-drools-wb. (cherry-picked from 0762669)
"CSPACE-1482 scaffolding for authorization tests, creates and deletes accounts, roles, permissions, account-role and permission-role relationships. yet to put tests that test permissions created refactoring of collectionobject, accountrole and permissionrole tests, extracted out factories added releaseConnection on the test in this checkin test: security/client "
#NAME?
" - added new methods to ServletDAVHandler: uncheckout, autoCheckIn(),     autoCheckOut() - all in progress  - some refactorings: moved activity creation code to DAVServletUtil,     checkout method to ServletDAVHandler"
MAGNOLIA-2251 Refactoring.
Refactoring NSClient
timestamps and some refactoring
refactor
[SYNCOPE-231] package refactoring
added TimeService. small refactoring
small refactoring
refactor into core sts
Refactor out InternalSimulation interface: add method addCommand()
Implemented custom equals() and hashCode() function; still refactoring
Refactoring agent
Some refactoring
refactor TableTracker to use SnmpTableResult.. begin tests for SnmpTableResult
raw/generic refactor for issue #270 - CaVirtex
Refactor
More refactoring and new modules.
SAK-7308 -- Refactored section info app so we can include the section decorators into other section-displaying tools.
Add vectorial files export. Create a GraphFile clone ui: VectorialFileExporterUI. Refactoring and update controller.
"highlighting of current parameter in context info, and refactorings"
Some updates/changes/refactoring to PutTopCardOfYourLibararyIntoGraveEffects.
Refactoring: inline method in EntryPointManager
"More refactoring, working on plugin channels."
Refactor Executor to spool the data in byte arrays
refactor Permutable
#NAME?
395281 [refactor] move platform utils to core.shared
Refactoring.
Refactor
Implement soft-block feature.   refactor handleReplay() with new ReplayCaptureSelector.   add two tests for soft-block to AccessPointTest.   other cleanups in AccessPointTest.   CaptureSearchResults: add a method for checking robots flags with char 
ItEr27S07CUVistaRecursosTempoPorProxectoItEr26S08: Refactoring. Extracting methods to improve readability
refactoring: AllEdgesIterator.getMaxId is now named getCount
Feature #907 : refactoring actions
KPME-2408: Refactored EarnCodeServiceTest KPME-2406: Moving tests to modules KPME-2411: Fixed build errors
refactoring to increase extensibility
refactored ActivityCallback to be lambda friendly
Refactoring
Major refactoring and formatting
Bug 418235 - [compiler][null] Unreported nullness error when using generic - preparatory refactoring
"amir, vishnu | #000 | refactoring close case method to be generic update case"
Imroved Inline Call refactoring
Initial Refactor. Lots of issues still.
Refactoring to instantiate Connection and FileSystem in ctor.
Refactor out for some unit testing ability.  Implement user search.  Restrict users to active users
#NAME?
minor refactoring
Refactoring for easier extension
Package refactoring
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
n-root replication testcases did not work with 500 entries: refactored put into putAll to handle bigger datasets
refactor
Huge refactorings for injection and initialisation.
Major refactor of logging system
refactor
Refactor: extract interface from Rows and OrderedRows and move them to the api package
Refactored the code
Starting test refactoring
"Refactoring, Modifications to have the Galaxy Demo and the Http Proxy to work in the same FraSCAti engine"
Refactored specialization into seperate classes
segment interface refactor for proposal 2965 (#2990)
Started refactoring mouse/view positioning code.
Expand refactored.
issue 104. refactored gesture handling on items with consistent names throughout. corrected error with LongPress (it was calling onTap).
o Refactored code
"Added rentit svg logo, did some refactoring, added Google gag lib, started parsing data from Karlskronahem"
Refactored cli commands and added tests for Catalog
all tests have been refactored and they are working with new code.
"A little refactoring to make it easier to override the event name lookup code and alter the order of checks (button names, path, eventName param)."
add docs small refactorings
Refactor year classes into BaseGJChronology
add lots of methods for creating named nodes. copy and paste calendar esource creation code from CosmoHandler so that all mixins and properties are set correctly (this code will be refactored soon).
Refactor application package name
Refactored one of the files from the last commit into the wrong directory.
clean up/refactor all the utility operations
refactor to fix warnings
ref 23524 Added additional tests and refactored
Refactoring to the partition test cases.
Refactoring BinaryDataProvider to make it easier to deal with ranges
- Push session refactoring - Added missing Request.suspend for push https://issues.jboss.org/browse/RF-10457
Added an XSLT processor and refactored the XPath and XSLT code into an xml package
refactoring
refactor
refactoring
EncFSVolume constructor refactoring
refactored the reliable transport into the reliable package and added a test case demonstrating the transport handling duplicate packets and dealing with reordering OK
Refactored some logic from main test class for easier reuse in other test classes.
metamer: edt: test for @clientRows refactored
refactoring folder structure for functions
Starting 1.1.0 development:  - Refactor to have internal and public package  - Write MenuItemTracker to be able to extend    the functionality  - Writing documentation into the README file and    removing the site
"Refactor the ""Cov-Import-Msvsca"" command into its own class command."
refactoring for MultiTransformation
just refactoring ... introduce 2 new packages in wala.util.
"Refactor name, and move listener to info package, add javadoc comments"
added in logic to be able to execute both doMigrations and doRollbacks also refactored to make things simplier.
"Added ArraysAsListSerializer. Default default serializers always use lower priority than subsequent default serializers. Refactored how ObjectInstantiators are assigned to Registration, revived Kryo#newInstance."
refactoring so that SymbolTable clients are less aware of the SymbolTable's internal data type.  Now it looks more like a stack
[OPEN-HUDSON-6705] UCM : Implement SCM new polling logic to support rebases better A bit of refactoring + refining some edge cases (no load rule)
more refactoring (compiles now)
Refactoring: déplacement des méthodes pour initialiser les services depuis ActivityContext vers ApplicationContext. 
prepare unicode test and minor refactorings
Major refactoring to better organize things.
Refactor AST type filters
"Split Invocation stats and Pool stats into different test cases.  Stubbed out more test methods.  Refactored the ""testAdvanced"" test into the overdraft test."
Further refactoring of configuration and more cleaning.
"[MIN] Storage: refactorings, documentation (cont)"
refactored for better reusability.
refactoring
"refactor(cmmn-assertions): move bpmn related assertions into package, create new ProcessEngineTests entry point class and deprecate old ones"
[PLAT-1766] refactor: moved mock uribuilder and uriInfo to root package to be used across OG-Web testcases
DDF-2413 Refactored CSW to use new taxonomy and cleaned up code (#1216)
[DROOLS-1649] ServiceRegistry refactor (#252)
"Clean up, reorganizing and refactoring."
refactoring + add linear transitions
Refactoring action that selects/deselects scopes.
Refactored payload validator code to be less Atom specific
Some more refactoring ...
"Refactoring, to allow the tree node to be selected according to the IRI of the entity or concept selected in the spreadsheet."
Issue 191: refactored ohai automatic update approach
Jettison provider test refactoring (#938)
"Lots of refactoring, changes"
"Core: refactor type update logic, pt.7 (#935)."
"* Refactored apache client out of com.heroku.api.command. Apache client is used primarily in BasicAuthConnectionProvider and BasicAuthConnection as a transport mechanism. Connections are the primary abstraction that contain a transport. If need be, the transport can be decoupledif we need the flexibility. For now, we only have one implementation of a connection and don't need the decoupling. * Reorganized code into more appropriate packages.   * Using com.heroku.api.http http related information (e.g. headers). This is not intended for transport -- use connection, or some other package, for transports.   * Using com.heroku.api.exception for any custom exceptions.   * Using com.heroku.api.util for utilities * Made CommandConfig immutable * Added a static method in HttpUtil for encoding name=value parameters in HTTP requests. It's currently used in Command implementations. * Added HttpHeader, which should be used by Command implementations for providing header information."
* refactored ObjectFactory to be more object oriented and cache common java objects * added tests for BeanTester * added more documentation to several classes * added parameter checks
refactored test
Yet another big refactor.  Hopefully this is the last.
"small refactorings, many refactoring QuerySolution to just Solution"
refactored site config updating so it now actually works
#10 refactor to change attribute name
"Refactored the quasi-useful IndelType annotation into the more useful VariantType. The indels are still annotated as before, but now all other variant types are annotated too. I'm doing this because of requests on the forum but am not making it standard.  If we find it to be useful we can turn it on by default later."
"working implementation of sqlite facade, lots of refactoring"
Start to refactor SOLR2155 code to bring in line with framework: make GridNode not depend on Lucene ByteRef
Refactored argument handling to support names
refactoring & cleanup
Complete refactoring using the new JGit wrapper classes
#173 - Slight refactoring of associating admin form actions to an EntityForm; initial prep for implementing an extension manager pattern
more code structure refactoring
ctf: Refactor CTFTrace's constructor
BaseTest class added. AppTest refactor.
refactor to use Factory pattern for classifiers based on PMML
Refactoring for 0.2 release
MAJOR REFACTORING! Lots of breaking API Changes.
Refactored UIJob
core: API - refactor move SignatureKey to security package [BREAKING]
refactored unit test to have a base class which can be used to test other models
"MAJOR refactorin of the models. SiteModel is now an interface, implemented by DefaultSiteModel (the old SiteModel) and FilteredSiteModel (designed for things like the Spider where we don't show the entire view), or FuzzerModel (which doesn't show the queries)"
missied a few 'capsd' import statments... also some simplying refactoring of the Table classes... paired with Ben Reed on this
Add a new alpha beta selectivity indexer and refactor the previous classes
"Query properties refactored: QueryOprions replaed with simple fields limit, offser, cursor. Query integration tests."
Feature #5893 : migrate org.silverpeas.process package (lib-core) - refactoring SimulationActionProcess.java interceptors ... - adding some stuff into WarBuilder4LibCore - adding integration test around SimulationActionProcess interceptors - adding tool in TestSilverpeasTrace in order to verify some data from integration tests
Refactored message element iterator classes
"[DS-2034] refactored notnull method to notempty, at the suggestion of mhwood"
Refactored MovedPermanentlyDto to be more generic
"Refactored FileScanner rule to be less verbose, and to use a Rule Element"
commons refactoring changes reappplied
MAHOUT-746 Refactoring of the parallel Naive Bayes implementation in org.apache.mahout.classifier.naivebayes
"refactoring, optimistic retry made optional"
refactor
[ENG-85] Refactor position master
Refactored server and disributed layer to support multiple OServer instances on top of the same JVM. This is needed for tests against distributed servers
Renaming EstatioInstance to EstatioPartition; refactoring as a subclass of ApplicationTenancy (adds 'country' as only additional property).
Refactor the runtime library injection code to be more modular.
Refactor serializers according to kryo api change (Serializer abstract class).
Refactored code
Token refactor
Implemented full text search on given field. Minor refactoring.
Fix for [Bug 54323] Refactor: Menu item from outline view
Added Javadocs. Refactored isConnected to isStronglyConected and moved isWeaklyConnected into base Graph package.
Refactored the RVM interpreter 'executeProgram'; added 'executeFunction' that invokes function instances.
Refactor FOREACH_STATEMENT
Refactorign
refactored yesterdays optimization on field access
Refactoring
[Refactor] Move Bukkit events to their own package.
Some refactorings
ONYX-514 : Refactored code and restructured wicket components used by EditSamplePanel.
[CXF-4786] - Support KerberosToken SupportingToken policies without a security binding  - Also refactored all of the standalone interceptors to put common functionality in an abstract class
XHRPollingTransport refactored
Refactored some things from revision ef709a62dae4 (media link entries).  - OServiceProvider -> OExtensible  - ODataProducer is now OExtensible<ODataProducer>  - OMediaLinkProvider -> OMediaLinkExtension  - Moved mle logic out of PropertyRequestResource in new ValueRequestResource  - Fixed new test in CustomTest to use rtFacade (we should not use Jersey client api in these sorts of tests)  - Updated comment in EntityQueryInfo to describe purpose  - Removed a bunch of trailing whitespace
"Add more noises, general refactoring"
refactor
Refactoring changes include:
Refactoring the code
refactor a bit a unit test
[Bug 304584] - [Tooling] Implement Workbench-Model-Tooling * refactored to directly use DI in 3.x
api_refactor: move userkeys api to admin pkg
"add SystemTasks, and move that and SshTasks moved to core and dir structure cleaned up, refactoring SshMachineLocation use of ExecRunners to be accessible directly by SystemTasks (still messy, but now split apart so more easily fixed)"
"[MRM-410] Dependency Tree is not shown in artifact details screen. * Refactored project resolution into ProjectModelResolverFactory component. * All resolution access points now use this factory. * Created ResolverFactoryInit as plexus component load-on-start, to hookup database to resolver stack. * Created archiva:dependency-tree taglib"
[BSP-2718] Refactor of common code
ONYX-284 : Added numeric pad tests and did some code refactoring.
refactored names of call chain completion module: mostly removed prefix CallChain*. Added top-level class documentation. Minor code improvements.
Refactor and fix violations (again)
Creating mapping for pathoutage table as a secondary node table Begin refactoring importer to populate the pathoutage table based on parent data
refactor method name
refactored the protorype
PDT API refactoring: put internal classes under 'org.eclipse.php.internal.*' package.
Adds 2 new process state properties to zookeeper and uses those for cleanup of checklist and occurrence indexing. Various code cleanups and refactoring to use a shared ZookeeperUtils class
"fixes, refactoring"
Refactoring mostly for readability (and small performance improvement)
Imran/Balaji: Refactored method sendStaffCareMessages in RegistrarBeanImpl.java
Adding some support for jsr310 - (spring-)jdbc interaction. Dependency updates. Some refactorings.
Refactored StackConfiguration so that its core functionality can be used by other stacks such as workflow stacks.
"Added in an event handler for the transaction table, ensured that users can INSERT IGNORE INTO, and update this table. Created required unit test. Did some code refactoring to allow for correct testing. Added in a findByName for Account, Category, Currency and Payee."
JBRULES-129 Make no-loop work - This is a big refactor of KnowledgeHelper and Consequence
Javadoc + package refactoring
Refactored more of the provision-api classes to isolate MINA-specific code.
Refactored: avoid *Impl / EntityRepositoryImpl
"TRUNK-3115: Rename AdministrationService.validateInManualFlushMode, and refactor it and ValidateUtil https://tickets.openmrs.org/browse/TRUNK-3115"
refactored ManagementEdge identification scheme
Refactoring ChanneledObject
added class with object constructor converter; refactoring
HZN-560: Refactor all Syslogd classes to use CompletableFuture instead of WaterfallCallable. Update of Receiver class by adding injectable list of SyslogConnectionHandler in order to decouple the Receivers from the ConnectionHandlers.
HSEARCH-2494 Refactor existing tests
refactor: moved nexus indexer to a separate plexus container
svnkit-dav: Code refactoring + bigfixes: linkPath handling fixed in DAVUpdateHandler (there was error after switch operation then removing some files in switched directory and updating it); DAVLogHandler fixed (proper revision properties handling)
ItEr09S09AdministracionGrupos: Refactored bussiness layer so it follows ICriterionType restrictions when saving.
"Enhancement: To increase security, MailUtil gains the ability to use container-managed JNDI JavaMail session factories, in addition to the standalone factory configured via jspwiki.properties. JNDI is now the preferred method of obtaining mail sessions, and will always be attempted first before falling back to the stand-alone method. See the JavaDocs for MailUtil. All of MailUtil's internal code, test properties and JavaDocs were also totally refactored. A sample JNDI block for JavaMail was added to web.xml; it is commented out by default."
refactoring...
C# Plugins - Small refactoring and defect fixes
Refactored validator.
refactor(engine): improve code of expression in signal/message name
Added new calculations for won and home and away and refactored the won attribute to be derived from the 2 new ones
added a Throttler implementation and test case for CAMEL-65. Also did some refactoring of the processors to increase the reuse and tidied up some test cases. Also some initial coding for CAMEL-66. Finally tided up the code a little
"Added FilteredMessage, interface optimization, refactorings"
"https://issues.jboss.org/browse/JBIDE-7003 bundle map has been refactored, work under validator still in progress"
"Feature 3349307 - Refactor, upgrade Maven plugins to suit version 3"
SONAR-3755 refactor signature of perspective Issuable
"[HER-1677] threads stuck in CachedBdbMap.get/_getMem alternate simplified implementation of our object-cache need * ObjectIdentityCache.java     new interface, far less than (Concurrent)Map, for big seems-like-in-memory object-cache * Supplier.java     trivial interface for deferred-provision of new instance * CachedBdbMap.java     implement ObjectIdentityCache, mainly via getOrUse() * ObjectIdentityMemCache.java     trivial ConcurrentHashMap-based all-in-memory ObjectIdentityCache implementation * ObjectIdentityBdbCache.java     BDB-backed ObjectIdentityCache implementation, carved from CachedBdbMap * BdbModule.java     refactor utility methods to offer CachedBdbMap or ObjectIdentityBdbCache instances, via source toggle * EnhancedEnvironment.java     convenience test-environment method * (others)     update to use ObjectIdentityCache/ObjectIdentityMemCache in place of ConcurrentMap/ConcurrentHashMap"
Finish refactor for suppor for XmlJavaTypeAdapter.  Tests are currently broken; got to beef them up.
Refactored BatchGraph to move caching logic from the individual caches into BatchGraph. Fixes #281. Adds support for incremental loading by checking for vertex existence in wrapped graph. Extended test cases to test this new functionalityl.
Minor code cleanup after refactoring.
BrowserSim: refactoring skins
refactored the REST API to be based on repos rather than projects to avoid confusion with openshift projects
SONAR-8890 Refactor restriction of ps parameter for WS api/project_tags/search
"Rename ItemScoreFilteringCombiner, refactor ScoreThreshold"
"Refactor DAOs to use String ids, instead of object ids"
MassiveCore - Heavy Refactoring and Command improvements
refactoring for AlbumAndSubAlbums started preliminary tests ok
"Refactoring the symbol table a bit; added some interfaces, moved the ASTClassBodyDeclaration into BasicScopeFactory"
FORGE-2 + MovePluginTest + Refactoring
[Amir @ ThoughtWorks] Issue # 1550 - First Cut - Refactoring of AmountType and InstallType
Massive refactor. Sorta seems to make sense.
Refactor WorkbenchPage.saveAll(*) method
Refactored the placeholder API a bit.
added option for forced recompilation + refactored ComponentLibraryHolder to provider ComponentLibrary directly
Refactored some of the test code into more sensible packages and file names.
"Transparency support. opaque models are sorted now from front to back and transparent from back to front. Documentation, cleaning and refactoring and its done."
1. Packages refactored 2. Added placeholders for Select algorithms
Try to refactor BeanDeserializers to share more (i.e. demote to -Base)
Refactoring FEEL implementation
refactored GMLFormat class
Refactored and added a local test driver
Heavily refactored HttpOp to use the new authentication framework (JENA-480) Note that existing API methods are retained for backwards compatibility
"refactored JavaParser into an API and Impl split, to facilitate cleaner plugin development (nobody should have to download all of the eclipse OSGI bundles...)"
"Change: With a bit refactoring, resolved TODO to introduce compiler switches for inherited member guessing, classes-in-scope guessing, and type cast guessing. These are needed if you want to keep AS3 source code that does not import all used classes (uses classes from the same package without import or uses * imports) and accesses inherited members without ""this"" keyword. Added the new compiler options for command line and Maven plug-in."
ROO-899 Post 1.1M1 code refactor and clean up
made rename refactoring cancellable; reverted wrong approach of starting preview wizard from RefactoringExecutionHelper (moved to RenameSupport)
167714 [quick assist] add commands for refactoring quick fixes to support keybindings
[C#] Refactored Squid module to have a better base package name
#NAME?
Domain EJB Jar tests - Change deployment to be an EAR instead of a JAR because it can   package the 3rd party dependent jars in its /lib dir. - Use the shrinkwrap maven resolver stuff to help package the 3rd party jars - minor - refactor the package for TransactionCallback to put it in the   correct place for stuff used by multiple test classes. - Fix ResourceTest to properly clean up its test resources. - Fix ServerPluginTest to properly look up the DS - Simplify OSGiVersionComparatorTest to not use junit - Workaround Arquillian-as7 protocol bug - Add ejb-jar.xml to the domain jar deployment so it's a valid ear module
Package refactoring related to configuration (with a little report cleanup): * Move org.mifos.application.ui.*.java to org.mifos.reports.ui * Move org.mifos.application.configuration to org.mifos.config * Move org.mifos.framework.components.configuration to org.mifos.config
refactor tests. Use constants for xPaths
major renaming & refactoring (standard conform naming!)
More refactoring of automated contract tests...
o refactored writeCover*() to use object as parameter instead of list of string
Refactor org.sonar.runner.Main
"JS-184 Converted the list of constants in BibleNames to an enum BibleBook. Refactored much in BibleInfo, deprecating methods relating to the getting of Bible book names."
Imran: Refactoring
default processor refactoring
Refactor: move uiResourceConfig.xml to web-engine/WEB-INF
rubygems: Various refactoring improvements.
Refactoring
Huge refactoring on remote connections: - used template method pattern to organize better binary protocol listener - split distributed protocol in 2: the old binary and the new non-more-as-subclass cluster
Merged feature-url-handler-refactor into master. This feature adds a convinience way to map customized URL protocols against Java classes. It is mostly used in Provisionds URL requisitions.
refactors
More refactoring of chain-reduce spike
google web search refactoring
Refactored IOCV
#NAME?
refactored added tests
"EFO support refactoring (halfway done though), additional REST API for Nils"
[LBCLASSIC-188] Setter name refactoring
implement shuffle operation & refactor packages
Refactored initialization methods
refactoring log recorder handling.
Huge ass package refactor
Refactor Activator
refactor handling of constants in Shrike to abstract away from Java bytecode introduce factories to create SSAInstruction objects
refactor host name to BundleConfiguration as it is a basic requirement ( not just for  web bundles ) to know the hostname for accessing a bundle
Refactor common functionality out of WalkerManager and into JVMUtils and PathUtils.  Add support for loading walkers from a jar.
"-More refactoringDavid"
"refactor: spliting main method into private methods, some diagnostics messages"
Adding support for spring - full path for spring-builder and for spring-client covered Cleanup of API - SoapContext refactored SoapContext added to empty message and fault generation API Adding spring example
Refactor ImageFactory
Refactor
refactoring
Refactor List => Array #551
[BZ 855674] - Refactored the phantom-read detection out of CriteriaQueryRunner
Refactored for new list grid system
Can now stitch directories with unknown configuration Small refactoring
"refactoring towards a single consistent dsl for xml parsing, and likewise for json parsing"
"Revert ""[TEST] Refactored package name - moved all tests from “org.pentaho.test.platform” to “org.pentaho.platform”"""
"Handler manager refactoring, Message wrappers refactoring"
Refactored async integration testing framework and integration tests
misc refactoring
SOI some white cards done. Also refactored ClueArtifactToken
raw/generic refactor for issue #270 - Open Exchange Rates
FACES-1324 Remove the factory wrapping code from bridge factory implementation classes FACES-1348 Refactor management of BridgeRequestScope
"added ChatterDAO and Chatter Observers, refactoring"
Proper refactoring of TOVData.
Bug fix in union refactoring and self join elimination
" various locatable selenium fixes, cleanup refactoring, refresh fix for InventorySummary portlet."
[ENG-150] Refactoring
refactorings
refs #353 - refactored a bit
more paramter refactoring
Refactor to hide things we know should be internal.
refactored for Hadoop 0.17.0
refactor code generator to minimize java side code generation
Parser refactoring begins
refactored for upcoming download module
"355367 Refactorings around ""considerLocal"""
refactor
"Synchronize master branch with ImageJ v1.43o. The IjX refactoring is now in a separate ""ijx"" branch."
REFACTOR: moved WaybackConstants.REQUEST* to WaybackRequest class.
Feature #8017: refactor the way the occurrences of events are get from a CalendarTimeWindow; we've improved the relationships and the responsability of CalendarTimeWindow and CalendarEventOccurrence and we removed the intermediate class that finally carries no added-value
"Some class name refactoring, using Parser, Encoder class name suffix."
Refactor bean visitor and data sinks to handle collections of beans
sql paser refactor SQLColumnDefinition
refactor server admin network layer for generalize channel selection.
System refactoring: changed group id from com.dreamoval.motech to org.motechproject.mobile. Note: Partial commit due to network issues: May break build.
Refactored
Refactoring and fixing of remote execution problems.
refactored code into a cool book processing pipeline
+ Fixed MOD-195 bug. + Refactored AjaxEvents hierarchy (with no changes to its usage or interfaces).
"Minor refactoring, to move resolver out (no need to be inner class); remove unneeded annotations"
Refactoring of whole deferred binding process
TRUNK-5117 Refactor PersonServiceImpl.getPersonAttributeTypes
Refactor the wrapper classes so they inherit from a common class.
#NAME?
refactor import reporting
refactored into descriptive package
MInor refactor
"refactoring, added seperate logging for failed lookups."
Unit test refactoring
"Better docs on ListGridAction, refactor some ListGridAction methods, add an action for generating Skus"
"Refactoring for MRELEASE-511: release:prepare ""Error parsing version, cannot determine next version: Unable to parse the version string"" when running in batch mode. "
refactoring mains
refactored equiv result combining
Refactor mvc-velocity examples
Refactored analysers to pass down config.
hazelcast functionality in own classes + refactorings + unfinished server lockfile writing
refactored virtualbox classes
Refactor test for time mocking
Refactored
minimal refactor of propertycollectors to fix space issue
HTTPCLIENT-746: Refactored URLUtils into URLEncodedUtils and URIUtils Contributed by Stojce Dimski <sdmiski at yahoo.it> Reviewed by Oleg Kalnichevski
refactored command interceptors
refactor managers to cover client
minor refactoring
EvalContext refactoring
refactor the domain manager
"[OPENENGSB-2075] refactored, added missing test, and fixed some coding convention errors"
TEIIDDES-1622: Abstract super classes from move refactoring
"Comments, tests refactoring"
"More refactoring, improve mutability testing in matrix hierarchy"
Refactor AST identifier tokenizers and several more APIs
"Add tests for the MovePropertiesToConstructor refactoring, and fix the bugs in the refactoring to make the tests assert the right behavior. This refactoring is now in good enough shape to be used by people to make code @struct compatible."
[83041] Error inlining with overlapping edits [refactoring]
"Refactored AddUniqueConstraintStatement, cleaning up tests"
refactor method name for consistency to reflect what is actually taking place in the method
Refactoring to add variable resolving
refactor and features.
RANSAC similarities refactoring
refactoring
"code refactoring: core, runtime and ui packages moved to net/sourceforge/pmd/eclipse subpackages"
refactored editUserProfile
tiny refactor
"m3 transition, refactoring to correct groupid, artifactid and package"
"Refactored the IndexerMaster to better handle ZK disconnection/connection events. The behaviour is now such that, when we get a ZK disconnection, we shut down as master, but any currently running task is not interrupted. Such a running task might possibly wait in a ZkUtil.retryOperation-loop for the connection to come back up. This is useful as it reduces the chance of work being done none-atomically. Also, if we took a lock on ZK to modify an index, the lock might otherwise not be released, leaving the index locked forever in case the connection does come back (even though the release happens in a finally block, ZK will not send out a request if the thread is already in interrupted state, according to my empirical tests). IndexerWorker & StateWatchingZooKeeper: gives names to threads."
"[SUREFIRE] refactoring Class<?>, timer with Executors.newScheduledThreadPool, public method modifiers to private."
"Fix PAXWICKET-400 Refactored HttpTracker to a syncronized model based on the extracted ServletDescriptor, unified exceptionhandling and extracted normalizeMountpoint function from GenericContext and HttpTracker."
Issue 301: refactored http payload and rewrote crufty tests
"Task's session extraction refactoring, pt. 2"
MAJOR refactoring part 3 (finished)
"Refactored everything. Consolidated Machine/Producer/Builder/Consumer/Translator classes into just Enumerator/Iteratee. Consolidated Builder.Plan/Consumer.Plan into Plan2/Plan3 as generic ""plans"" for connecting an enumerator and iteratees. Consolidated Planner into IterateeFactory. Propagated changes."
refactored to create a model sub-package
"New method in ConverterManager to expose a custom convert method for RawData because that's a common special case, and this allows us to hide the implementation of RawData better. Also package refactor to move RawData into convert from main. It was in the same package/module as RealRawData"
cells: Refactor logback turbo filter thresholds
refactor: transitioning FileTask to generic BufferedTask
"Made ServicePublisher listen on all interfaces (removing hostname parameter), some refactorings"
"introduced ParseException, refactored Parser"
minor refactor so we can move the git profiles directory in git to another directory other than the root directory easily
JBRULES-2679: Mdularize Drools Flow  - refactoring flow to not use legacy api as much as possible
OSGI-11: refactor to support multi-threaded scanning
Refactor utils into a different package
#NAME?
EST-575: Refactor application tenancy: lease items now have a tenancy which is a combination between a property and the landlord of the lease.
first pass refactor inline.js
Refactor part Deux.  What is the point of subclasses based on OS type and then continuing with OS-conditional code?
Refactoring media channel setup for inbound calls. Reducing code complexity.
"refactored, demo now depends on contrib."
"jax refactoring olap level, start servlet"
synchronizing with the latest SurefirePlugin code (before I refactor to a common base class)
refactored times package into two classes: TimeSeries and IntensityFunctions
"[MARKET-227] - Refactored POM to be multi-module. Marketplace is now composed of 3 main projects modules: pentaho-marketplace-core (shared code base), pentaho-marketplace-pdi and pentaho-marketplace-ba."
Refactored LoadingContext slightly
"improved detachable panels, refactored some files"
Refactored CalculateMean
[refactor] moved effect to common
FORGE-2419: Refactoring the JSF Commands Adding a first test class
Refactoring to decouple lock management from editors
big refactoring for abstraction to support ant and maven
DataManager.getClientAuthFilter() refactoring
Last project structure/layout refactoring before initial release.
Refactor pathfinding into separate class
refactoring the names of things :)
Big CollectorCron refactoring
"Completion refactoring"" not anymore one partition per stepadd quick-outline behaviorreorganize utility classes"
refactor of the module to provide cleaner api
REFACTORING Renamed test method
Refactoring of partner related classes and addition of WS-HT related test suite elements
"DDF-1750 Adds ExportCommandTest, new integration tests, changes behavior of SystemConfigurationMigration  - Refactors ExportCommand slightly (variables for messages), adds unit testing for this class.  - Changes behavior of SystemConfigurationMigration slightly.  Relative paths outside DDF Home are now rejected (warnings returned).  Removed the verifyPathIsNotAbsolute method, but added checkIfPathIsMigratable.  This checks is the path is absolute, whether it's inside DDF Home, and whether it can be turned into a real path.  - Added integration tests to TestPlatform: testFailureWithoutSystemPropertiesFile, testFailureWithoutUsersPropertiesFile, testFailureWithoutWSSecurityDirectory, testFailureWithoutPDPDirectory,  testExportOnTopOfNestedFile.  We already test for warnings in testFailureForAbsolutePathOutsideDdfHome, testFailureForAbsolutePathInsideDdfHome, and testRelativePathOutsideDdfHome."
More refactoring for cookie storage on android
"ZipChemCompProvider cleanup: * Moved to use Java 7 ZipFileSystem for appending files and refactored * ZipAppendUtil code to be within ZipChemCompProvider. * Cleaned up exception handling within ZipChemCompProvider * Created optional mode for ZipChemCompProvider that doesn't delete  .cif.gz - this prevents redownloading .cif.gz with unit testing. * ZipChemCompProvider is thread-safe, with reads/appends in synchronized  methods."
minor refactoring
This changeset refactors the MemcachedConnection class.
Refactoring client
First pass refactor on user
Issue #1: Refactor file processor
Refactor code once againy
DDF-20 Refactored Validator to MetacardValidator
Added Generic support for pull up and push down & renamed MyTestSetup to RefactoringTestSetup. Patch generated by Tobias Widmer
Refactor for easier testing
refactored logging
"major refactor on DAOs, View Dashboard Ananlytics, and the BaseClientHandler, Sorting on the set..."
Intermediate refactoring.
"CAP-26 Migrating to annotation-based Spring controllers, refactoring JSP views, and adding CSS from gthompson."
refactoring to improve readability
Refactor AsmLoader to non-inner class
"Refactored KernelExtension to make it easier to work with it as a stateless object. Did the same thing for IndexProvider, which is no longer a KernelExtension, but rather its own thing."
XWIKI-4857: Split the wysiwyg module in order to make the editor reusable outside XWiki * Small package refactoring before the split.
"Add unit test for Perforce, and refactor a little to make it easier to test"
Refactoring to better support configurability
use InputStream for Catalog interface lots of refactoring in RouteConverter class disable setExecutable in BabelFormat since it's Java 6 specific
"API break - extracted inner interface to a top level class - less confusing and also enables API changes and refactor. When depending on an inner class, this inner class is stuck in the outer class and may polute it if changed."
Removing unused doValidate and little bit of refactor
"Refactored class registration for cleanliness and to allow actions to be taken as unregistered classes are encountered (issue 7). This breaks the API a little, but is nicer."
"[MIN] Storage: refactorings, documentation"
internal refactorings
cells: Refactor LoginManager
refactoring: move Scribe handlers to endpoint.resources package
refactor Plain to Tcp
"(ABM-269)  1)	Reorganized Emfac folder structure to blend in with ABM main folder structure. 2)	Merged EMFAC properties (base and model properties) as part of main sandag_abm.properties. 3)	Made package compatible with new DB schema 4)	Emfac is included as part of ABM build, simplified user interaction. 5)	Include truck modes as mutable type so truck VMT is updated in Emfac2011 using modeled data. 6)	Refactored/optimized/added codes.  Removed reading from CSV files, instead reading directly from DB.  Speed up some codes, e.g., trips table is only to compute intrazonal VMT, it doesn’t need to loop through all OD pairs, only need to loop through a small data set by applying query orgin=destination. 7)	Run time reduced to <7 min (without generating Aquavis tables, 3.5 min) 8)	Emfac can handle future years later than 2035 by assuming: if year>2035, then use year 2035 inventory file."
[SHRINKDESC-83] assertXPath ignores missing attributes. Fixed bug and refactored AssertXpath to XmlAssert. Introduced seperated method for schema location assertion since it requires namespace-aware xpath query.
Javadoc improvements and refactoring
"refactor, remove GeomModel like duties of RectangleTask"
refactor to make it easier to reuse forge addon code between camel and openshift addons
Refactor component model to have different classes for different component types
Refactored onEnable into separate methods Added convertion utility from DataLog config file
wiseml-merger: big refactoring (too many changes to list...)
refactoring: extract rsc set updating
new Make Receiver refactoring
Refactor MapReducer interface
fixes and refactoring
Minor refactoring.
[ENG-153] Refactored BerkeleyDB management to AbstractBerkeleyDBComponent.
Refactored JAXB providers.
"- GTNWSRP-146: Use a servlet to serve wsrp v1 resource:   + Improved invocation dispatching of resources.   + Refactored handling of direct resource serving: now uses a proper handler, subclassing ResourceHandler.   + Added WSRPPortletURL.URLContext as a parameter to build WSRPPortletURL so that contextual informtation can be passed to the URL.   + Added ResourceServingUtil to deal with encoding and decoding of direct resource requests.   + Had WSRPPortletInvocationContext.renderURL use URLContext to transmit data to URLs.   + WSRPResourceURL now computes a resourceURL if it is provided with the information to do so. - Moved namespace generation and portlet instance key extraction methods to WSRPTypeFactory so that they can be reused across modules with the same logic."
"Refactoring replay engine, adding SCA refences for template engine and assertion engine. Re-work on assertion engine."
TED#23261 Refactor code for style processor and apply number format in cube metadata as default formats
Refactor BuildTask (Top3 Awful Classes)
Refactoring of functionality used to print merge errors and information about unsupported nodes
Refactor of Future and FutureOption Expiry Calculation to make more consistent. Now uses instrument provider methods
Fix DS-2582: Remove all milliseconds from dates. Refactor code slightly.
"Feature user-group-select: - starting the user and group fast select - adding removeAccent prototype method on JavaScript String - updating centralized user selection wrapper to handle the case where user and group can be selected - updating existing ListOfUserAndGroup plugin - adding useful methods into our HttpRequest - adding super Mousetrap plugin - adding super Selectize plugin - improving the user experience about checkbox selection (user notification list for now) - fixing DBUtilIntegrationTest test which was annotated with @Ignore --- - refactoring extra user info display - refactoring send user/administrator notification - refactoring form field display in writing mode of user, multiple users and group"
Refactored citrus-samples with separate modules for test and server
HBASE-1756  Refactor HLog (changing package first)
#NAME?
Some small refactorings
[CXF-6464] - Minor refactor of applied patch. This closes #77
Refactored
Refactored RosterAddedMessage/RosterDeletedMessage into one RosterMessage.  Added code to finalizeRegistration to send a message to all other participants when a user joins a chat. Added code to finalizeDetach to send a message to all other participants when a user is removed from a conversation. Added code to the NameCheckController to sanitize name input. Added code to the SockJsHandler to remove a user when session closes. Removed PresenceMessage.
JBRULES-16 move PropagationContextImpl to common -minor refactor
minor refactoring
Bug #8630: fixing the disconnection / connection which is not effective if the user . Refactoring some stuffs around the user session and the messages.
Refactor/Cleanup on `HazelcastOSGiServiceImpl`
Fix for #610 [websocket] WebSocket class must be re-written to support AtmosphereInterceptorWriter. Also refactored WebSocket support to avoid duplicated code all over the place
"refactor modules and runtime in order to support timer-driven ones. Compiles but some broken tests, very much WIP"
More refactoring of UpdateRRDs
"Separated heavy tests into unit tests and integration tests No real changes in the tests, only refactoring."
Refactoring ConsistentKeyLocker tests
refactoring
"AMRS Mobile Forms Module - refactored Household to MobileFormHousehold, added EconomicConceptMap and HouseholdModuleConverter, added tests and test dataset, and fixed several leaks"
Missing files from editable layers refactoring
JBEHAVE-1172 Minor refactor. Reset scenario and example keys between executions. Added support for @BeforeStory and @BeforeScenario.
Refactoring towards 'RunTargetType' abstraction
Refactored heavy NLP code into separate module.
Core: refactor label storage (#339).
refactored tag query expression building
Define problem solved: Nr of exceptions was not updated after remove exception. Some Refactorings: Conventions_checker classes to domain; NoRulesSelectedJPanel.
refactor to move the JAXB2 POJOs into camel-core so that they can be merged with the DSL camel.builder package; as they are pretty much the same kinds of objects. For CAMEL-71
Refactored the Queue persistence stuff from vefa-srest into oxalis-persistence.
Asset plugin refactor
[DROOLS-729] refactor android ClassLoader to avoid package split
Forced to commit during refactor
refactoring    uriinfo - pathinfo   baseuri - serviceroot
WPF Table/Tree refactoring
Refactored CTags Indexer to allow individual tags to add themslves to an Indexer Output (consolidated CTagsIndexAll and CTagsAddCompilationUnit) CTagFileReader logic change to read in all tags in ctags file Patch from Dave with fix for TempVA merge problem (Indexer View was opening BlocksInput without close) + other UI improvements Renamed generated CTags file Refactored indexer tests to not depend on EntryResult toString()
[refactor] rename
! refactoring
Refactorization of the annotation module.
"refactored GraphRoadModel.doFollowPath(..), it is simpler and easier to extend"
Refactored Attributes to be an array pair vs LinkedHashSet
Some refactoring
MLHR-1804 MLHR-1805 MLHR-1806 #resolve #comment Refactoring of file splitter and fix for kryo exception
Refactored the SQL based repository and DataSource stuff
QBN: refactor out a divideIntoQuantiles method
Initial refactoring to enable alternative index backends for layers
Refactored out the parsing of descriptors into a DynamicDeployer. It has bug in that it will always overwrite the EjbJar and OpenejbJar originally in EjbModule.  Need to fix that.
Refactored out a few more methods
refactored names because of reserved sql keywords. tried to fix auth
XWIKI-11623: Add ability to see full stack trace of errors when a mail fails to be sent * The error summary should be the root message and not the outermost one * Minor refactorings
Refactored function storage to ExtensionTracker only.
refactor summary module's decorator part
Refactor chessman to piece type
DiferentialPilot refactoring complete
"removed obsolete plugins, added new content-plugin + demo, refactor of brix-hierarchical-node-plugin"
Refactored code in AccountBO and LoanBO. Added test cases.
KNL-776 Remove unused methods which aren't called. Renamed method so it overrides method in superclass. This looks like a mistake from the original refactoring in SAK-8706.
JBEHAVE-584: Refactored unit test to use mocks.
refactoring the Logtalk loading mechanism
Refactor UnderStoreBlockInStream to use composition
Refactor bulk loader to make testing easier.
MBM-78 Refactored resource tests to avoid explicit paths where possible Added initialize() to the DAOs to avoid Hibernate issues
Refactor examples
Refactored out ViewFetcher.getCurrentTextViews(parentView).
Refactor SimpleController tests.
Initial checkpoint of refactor of dictionary support.
Partial refactoring
refactoring
Refactored the test cases to support the concept of a 'test scenario'. This will allow to define new scenarios with different input files more easily.
Removed unnecessary code that is no longer need because of refactoring
refactoring
More refactoring
Picking/grid refactor
ArgumentsParser refactoring
Refactor to move stdcmd's -is option into central method
core: initial ReconstructMasterDomain refactoring
Some refactoring of entity classes to be named Glow* in preparation for implementing stuff.
"First pass at package refactoring.  All AST code refactored into the pmd.lang hierarchy.  Sourcetype and Parser code also refactored.  The Rule implementations are not yet done.  Still a fair bit to do with some of the other Rule support packages, but this is the basic idea."
Refactored
api_refactor: refactor configuration api for normal user
Added some live tests and did some refactoring
Refactored ListHandler to reduce complexity.
Refactor into appropriate package.
Refactoring of tests. Some improvement on rules compliance.
Refactored models for tests. All unit tests passing now.
"Some internal refactoring. Now ""safely"" ignores duplicate records (NOT duplicate reads but rather malformed bam files!) resulting from the bug/feature in CleanedReadInjector."
"issue #6, results and participants are now stored. refactored aggregateresults to a separate class"
Configuration renaming and TLD improvement The TLD has been refactored with the new attributes and all descriptions have been improved for a better content assist. Closes dandelion/issues#8 Some attributes have been renamed for a better consistency :  - sort => sortable  - paginate => pageable  - filter => filterable  - ajax.processing => feature.processing Removed unused attributes and corresponding processors (plugins are now enabled thanks to the ext / dt:ext table attribute) Minor perf improvement  in the TableTag by replacing boxed types by primitives. Added a missing Thymeleaf processor for the fixedHeader plugin
"MDEditor - refactored, updated validation and export"
refactoring
Refactoring and bar chart development.
"Refactor to remove *Model and *Constructor and xmlAnnotatedItem, part 1"
"Refactored the quasi-useful IndelType annotation into the more useful VariantType. The indels are still annotated as before, but now all other variant types are annotated too. I'm doing this because of requests on the forum but am not making it standard.  If we find it to be useful we can turn it on by default later."
ISIS-232: minor refactoring...
Refactor ConsoleSubject from interface to abstract class and move corresponding function definitions into it
refactoring of the generators
Refactor the name of both the directories and the artifact ids of the Classifieds subprojects
Code refactoring for the JPA-store.
Most of the way though the large refactoring of the ant tasks. Added two new ant types: DatabaseType and ChangeLogParametersType These can be defined outside of the ant tasks and reused. Migrated over the BaseLiquibaseTask to use the new types and ported over the old attributes to maintain backward compatibility. Added two new abstract classes that extend from BaseLiquibaseTask that will encapsulate the common functionality from change log tasks and diff tasks. I performed the same migration of old attributes to the new types. Still have to finish refactoring the diff tasks and generate change log tasks. A lot of additional documentation and deprecation marking was completed and logging was added to notify users of deprecated attributes to migrate over to the new model.
Major refactoring for extracting ParamBuilder interface and splitting into 2 implementation: fro CSV and MVC
"Refactoring: added Xaloon -based data models for authentication, refactored UI to use V7, refactored Task Config component to use Vaadin 7.1 server push"
[PLAT-2271] Refactored events and listeners
"- When a refresh has issues, now record expected registration information instead of leaving up to GUI tools. - Changed RegistrationProperty's persistentId to String and renamed accessors to *PersistentKey for coherence. - Minor refactoring and clean-ups."
Refactored
Fixed subtle refactoring bug in MeanShiftCanopyClusterer which was causing DisplayMeanShift example to produce garbage. Added a unit test thereof. All tests run and example produces nice clustering again.
Refactor the ProtobufDataFormat for the double check locking issue
"Removed Maven, Refactored out MessageBroker so that it is no longer a singleton."
"REFACTOR: added interface RequestContext, which WaybackContext implements, as does the new ServletRequestContext, that has a trivial interface allowing old subclasses of WaybackServlet to now inherit from ServletRequestContext."
refactor mulitpage class structure enable in mediaWikibot get by whatlinkshere
refactored image from yaml creation
Refactored titan-core to use custom Buffer interfaces for better abstraction and thread safety instead of ByteBuffer.
Fix JPA persist issues in WellDeprecator - by refactoring operations in a transactional block - resolve #99
refactor
Start of minor refactoring to NodeGroup hierarchy
[ISPN-173] (Build memcached server module) Refactor classes into more adequate packages.
Major refactoring of the new admin3 RuleBuilders - Created two new processors to support the creation of the fields and the data along with a RuleBuilderFieldFactory/ repackaged the rule builder classes
"Refactor, fix rendering to retrieve a byte array from native code and then convert to string, fix content-length computation for MarkdownFilter"
WIP action property refactored showletType to widgetType
[WAGON-101] refactor SSH tests in prep to get some streaming working
refactored the commands to make them a little easier to discover and smart complete. The fabric:cluster command is now fabric:ensemble-create|list|add|remove etc. See http://groups.google.com/group/fusefabric/browse_thread/thread/8fe9736148d00705. Also added a fabric:agent-create-cloud and fabric:agent-create-ssh commands for better smart completion
Three utility classes refactored in one
Made a number of refactorings on teh HardCodedDiscountCurveAnalyticFunction.
refactor exception handling. new configuration class to tweak settings
refactoring on test to make it more readable
Minor refactoring in web server class
"Get rid of a TODO -- refactor QueryUtil to use ProcessRunner. QueryUtil appeared to be used across more than just nse.haskell.core, so it got moved to the utils package, along with all of its support."
refactoring WS ref processor to separate package
"refactored resources static to webapp, some cleanup"
Refactored Preferences and Properties. Fixes #1052
small refactorings
JSON refactor - tidy up
refactoring
refactor ConfigFilter
"Some refactoring, starting to work on checking @NonNull params"
CAY-1914 Refactor EJBQL-related translators to a standalone 'org.apache.cayenne.access.translator.ejbql' package
refactored Dispatcher for new HttpURI
refactor RuleType
JBRULES-2642 Getting tests working for new updated parser.\n-Initial refactor of XML parser to work with ExprConstraintDescr
[Snipmatch] Bug 435506: Refactor indexing & Test query weighting
"Make the three Project lists consistant, in that they are all multiselect, and you can add multiple paths from the dialog. Do some refactoring to make it simpler"
 REFACTOR move value conversion methods to utility class  FIX query value to PostgreSQL value conversion
full refactoring
Refactoring: moving methods that parse topology from SDNLink to BaseSDNTopologyService
More sub-package refactoring
77950 Move Instance Method: should adapt Javadocs [refactoring] [move method] 77765 Move instance method looses Javadoc comment [refactoring] [move] plus support for enums and annotations
refactor
HBASE-7809 Refactor Split/Merge to use HRegionFileSystem
OpenShift logging tests added + refactoring + test fixes
refactor for runCandidatesChain; also run outCandidates
UnitaryTrace refactored and simplified.
refactor
Refactored external resource location logic out of ResourceFactoryImpl -> moved to new services
Refactored teacher authorizations and categories to work independently of GIAF contract information. All teachers must have a teacher authorization for each semester/department. Teacher departments are now always fetched from authorizations.
Refactoring
refactor to address and person just like the bitemporal example of Ervacon
PLAT-4955 - Refactor convention master population code
"Refactored ResourceConfig, fixed JERSEY-1072."
Completed implementation of students curriculum calculator. Refactored Declarations code to show necessary information.
more test refactor
Refactor entitlement consumption calls into /consumers/ namespace.
ACT-119: Add web service task - Refactor data input and output associations to satisfy simple definitions - Allow disabling of schema validation
Refactoring
Refactored PostingsReaderWrapper; tweaked QueryGenerator API.
Refactored DAO
Refactorisation des dossiers
general refactoring. moved write(..) methods into classes (no longer static).  renamed Element to PathItem in all places. added Identifier to prepare to remove Action and Contributor.
[#3] Improved testing + done some refactoring - Changed my id in the parent POM - Simplify travis-ci command-line for Coveralls
"Refactored material handling to use Color rather than Spectrum as the basis for rendering.  Spectral rendering will be implemented by subclassing Color and ColorModel. Added Painter interface so that Color-based parameters for models may be parameterized by the intersection being shaded (for example, for texture mapping)."
ItEr27S07CUVistaRecursosTempoPorProxectoItEr26S08: Refactoring algorithm and fixing bug.
More cleanup and refactoring - get ready to split out core
"Refactoring, and updates to demo"
#NAME?
Improved rendering of refactoring descriptors
refactoring webgraph. driver for trec collections
refactoring overall workflow
refactored for new serial eventing from JNI EPOLL; removed old serial polling monitor thread impl
Hibernate tests cleanup and minor refactoring
Refactored: renamed event listener frontends and backends
"EST-1710: refactors orderItemLink contributions on IcomingInvoiceItem, replaces collection with contributed properties (two), refactors createLink contributed aciton to only allow one, and simplifies updateLink and removeLink."
Process Diagram API: Refactoring to also support waypoints of edges
Small refactorings
* refactored AffineReadable to AffineGet and AffineWritable to   AffineSet * implemented AffineSet in AffineTransform3D * additions to RealViews
BeanXML Validation test completed + refactoring + new BeanValidation Helper class
[MOD] XQuery: refactoring of query resources (preparing #878)
tests refactoring
Refactored OSType from JSword to Common
image creation tasks refactored
Refactor of Andrew's branch to add service monitoring.
refactoring in order to improve the PrologEngineProxy class
Bug 430487: [1.8][refactoring] Rename Method refactoring breaks lambda
refactoring
Refactor in preparation for adding samples
[build] Refactored to make each test independent from the others.
"working on playlist, jplayer and refactored media to mediaitem"
Added Spring Security support for SAML integration. Refactored IdSiteAuthenticationToken: both IdSiteAuthenticationToken and SamlAuthenticationToken inherit from ThirdPartyAuthenticationToken. StormpathAuthenticationProvider handles ThirdPartyAuthenticationToken polymorphically.
Refactored out method for unpacking classes.
Refactored the way marginal distributions of features and entries and handled and carried. Also inadvertantly ran a full format on the codebase so almost everything has changed.
"Introduced node types for User, Role and Group - Adopted bootstrap files - admininterface Tree handlers for the above - TODO : refactor Login module to makes use of Nodetypes - TODO : read sub groups"
"refactored some folders, folders shouldn't be camelcase but lowercase."
Refactored SauceOnDemandListener to print out the session id at the end of the test. It was trying to print it before the session was generated.
big refactored version
"extracting regionIDs, too; minor refactorings"
did some refactoring to prepare for lucene 4.0
#371 Refactor with setParameters()
Refactoring: cleanup of packages.
"Removed V1 support from deployment wizard and CloudFoundryServerBehaviour, refactored CloudFoundryServerBehaviour to isolated client calls and error handling to only one location for easier maintenance and debugging, removed unnecessary timeouts, fixed bug with app name display in CF editor, fixed error thrown when deleting app with a bound service, improved error handling to detect which errors result in a retry of client call, and which errors should terminate operation. Fixed bug in CF editor and CF console where errors were not correctly displayed."
ISIS-1132: refactoring (no functional changes) ... rationalized and simplified the DataConverterForJoda hierarchy of classes.
Refactored
http://jira.jboss.com/jira/browse/JBIDE-1919 Added package name refactoring.
refactor login & getMessage
193529 Move JDTRefactoringContribution.createRefactoring(RefactoringDescriptor) to org.eclipse.jdt.core.refactoring.descriptors.JavaRefactoringContribution
Refactored.
"BDBJE updates, refactoring * commons/pom.xml, .classpath     update to BDB-JE 4.0.71 * BdbModule.java     (getStoredQueue) added     (getStoredMap) made more general     (openDatabase) all databases now 'managed' * TempStoredSortedMap.java -> DisposableStoredSortedMap.java     renamed * StatisticsTracker.java, **Report.java     use new name * StoredQueue.java, StoredQueueTest.java     move to org.archive.bdb package * BdbMultipleWorkQueues.java, PrefixFinderTest.java     update for BDB-JE 4 changes * BdbFrontier.java     use getStoredQueue      drop unneeded custom serialization support * WorkQueueFrontier.java     drop unneeded custom serialization support"
Refactoring.
refactor k to generate posters from compiled definitions
SOC-1301: Refactor and improve RelationshipManager and RelationshipStorage
Package refactoring (going public with some translation classes).
refactor thirdparty config interface and productline manager
Refactored the exception handling and adding a bunch of comments
Refactoring
PRD-4242: Refactoring as subreport and crosstab share common functionality
[MRM-118] refactor the searchers into components any make them thread safe
JBRULES-1738 Support XAResource transactions and generic save points JBRULES-1739 in-memory XAResource -some refactoring to add a PersistenceManager and rename the package from transaction to persistence
Refactored HttpInput to use poison pills
 security refactoring
Refactored ObjectFactory to reflect that it is the StepMother instance that is passed to the factory after creation.
"Refactored the HistoryReaders so that the history could be cached for other systems than Mercurial. Now, the results from all svn and hg history commands that take more than 300 ms are cached."
Reverted API result classes to previous format. Refactoring of rate limit headers to seperate interfaces reversed Ingestion result class now simply extends from BaseDataSiftResult
Refactored implementation
Add documentation & further refactorings to Conversion
photoalbum-ftest: updated tests * applied changes from 43x branch * applied changes after page-fragments refactoring * some methods and fields renamed according to changes in photoalbum application * tests stabilized
started refactoring stop conditions out of DynamicPDPTWProblem
MIFOS-4190: fix failing acceptance tests. refactor dto belonging to center get details.
refactored the type hierarchy for Rascal-specific types. reimplemented type reachability using a visitor instead of if-then-else.
Minor refactor
SB-621: JAAS cleanup refactoring
REFACTOR: clean up access point revisit path a bit FEATURE: EmbeddedCDX: Support for an optional extra cdx source that is checked even on remote load
Refactored where clauses in Criterias
some package refactoring
"[MIN] Comments, minor refactorings"
Refactor and prepare for node cloning.
refactor configuration
"o Made forkConfiguration immutable, refactored away more mutable state"
Refactor
XWIKI-9420: Generate a unique instance id XWIKI-9401: Measure active XWiki installations * Refactor to introduce the xwiki-platform-instance module
refactored method name
ImportAPI refactoring work in progress.
[142321] XSD Editor:  Need cross-file refactoring in the property sheets when applicable
refactor for solr
Some renaming and refactoring on JTA
"org.eclipse.cdt.core 	Refactored parser to allow for cleaner content assist implementation.   	Removed IASTCompletionNode.CompletionKind.STATEMENT_START as it is redundant.   	Fixed bug 50640 - Wrong completion kind when expecting an exception  	Fixed bug 50471 - Wrong completion kind after the ""using"" keyword 	Fixed bug 50621 - Wrong completion kind in a class declaration "
... refactoring ...
Refactor to use the Fenix Framework 2 API
refactor the task
NXP-13072: fix automation trace when mode is not activated - refactor tracer structure
refactor into 2 useful methods
"Convert Fuzzy KMeans to CLI2, hook in random initialization option, refactor random stuff slightly to improve consumability"
"Refactoring of resolver test classes, in preparation for primitive resolving tests."
refactored client driver
Refactored Running code to ExecutionTargetRunner
Refactor BufferRecycler for sub-classing
Refactored to CloudFoundry and Spring for the Mongo integration. Do need to clean up though
Refactoring obr view
Refactored SomBrain and ExponentialDecaySomBrain into their own *.brain subpackage.
"Refactoring, adding controller suffix and moving domain object to own package"
"more refactoring. Make schedulerService transactional, rename report api, use enum for report format"
"More refactoring, replaced netty http parser with modified one, not using HttpRequest objects for input anymore. Lots of benchmarking. Latency: 88us, Throughput: 204K single threaded, 279K multithreaded."
"Refactored the cookie handling. From now the recived cookies only found in the request, the sent cookies in the response."
Rest refactoring work in progress - not compiling yet
Refactor old code to keep it fresh
Refactored Config class. Added com.hazelcast.config package and moved the encapsulated classes from Config object to top level.
Refactor generator
EST-417: Refactored LeaseAndRolesAndLeaseUnitsAndTagsFixture
Refactoring to make is easier to split and dedupe headers.
core: refactor: Thou shalt not copy paste.
"Clustering command line cleanup: - refactored all clustering Driver main methods to move command line options to   DefaultOptionCreator to improve command uniformity, defaults and to clean up   messy drivers. Impacted Canopy, Dirichlet, FuzzyKMeans, KMeans and MeanShift   drivers. - added command option comments to conf/*.props consistent with above. - added new files for canopy.props and lda.props - removed Dirichlet's prototypeSize argument in favor of reading the first data point   to determine cardinality"
"some refactoring, also renaming styles and adding to sldInfo"
Refactored the code of the analysed controller. Moved global logic to the basecontroller.
JBRULES-1271 testing framework refactoring
Refactored WorldProfileManager.
Finished refactoring
Refactored binned data writer
Refactoring Exomizer HTML and filter classes to work with Jannovar annotations
Minor refactor of test code
Refactored Structure
"metamer: JS API tests refactoring * renamed some methods and classes * extracted some JS API tests to custom class * added missing JS API methods to dataScroller sample, created missing tests"
artifact + package refactoring
1) fixed bug #42: Notification by Item download: problem with some urls 2) methods refactoring
refactor
DDF-391  refactored to separate product download retry from caching logic
wizard complete a huge of minor bugs clear playlist genre owner security service merged and refactorized plugin for randomlists genre randomlist ... a huge of things
EM refactored for better consistency when handling relative and absolute import paths
Start refactoring of announcers
"Refactored tweet trigger, and added a twitter trigger for getting the latest tweet for a user"
Refactoring: Trocando nome da classe
Refactor parser // add meta // investigate 'comment' bypass when resolving step...
Refactored everything for Moore Machine/Mealy Machine concepts
"Refactoring of DeeCore test resources, moved deeCompilerInstalls to DeeCore"
Huge refactoring of the client/server part for contacting remote clojure environments. Made Alt+Gr+H work again !
Refactor Mustache views support in Spring MVC
refactoring beta stage (no more compile errors)
Make PngException a RuntimeException and other refactorings
refactoring hashCode method
some refactoring
refactor
refactoring
Refactor dialog handling and make likers dialog lay out properly.  (D-06499)
refactor
Small refactoring. Concrete requests are moved back to coffee-maker project.
Fixed store-web data update. Small refactoring of base module classes
refactoring prolog engine classes and drivers to facilitate the initialisation from the Prolog side
Refactored basic mojo execution
Minor refactoring of the cleaner allows me to add a trivial walker that left aligns the indels present in reads.
some refactor in httpclientdownloader
code refactored in order to improve the abstraction
refactored names for stateaccessors
"Refactor public interface, add self links, use sizeName instead of flavorId, remove role, make posts return location header information"
DefaultShowlet child name in Page model refactored (and test package renamed)
Refactor core-collect to not depend on core-util
Refactored test classes for counting package slightly. Changed PermutationCounter to accept a setSize and a permutationSize seperatly to add more flexiblity.
refactoring VRaptor instantiator and implementing the last broken test \o/
Refactor QueryExpander to support 3.0 methods and removed verbise from interface and ws client.
refactoring package names
refactoring invoker layer with TU included
OSGI-52: refactor design around Iterable for easier dynamic integration
#POULPE-120 refactored ItemPresenter so now it takes Component instance instead of its id
Refactored the Sizes checks
refactoring
Refactor
test refactoring
"Refactor activity data, add basic system data type"
Refactored name of room location getters in maze room populator to make it more clear
[PLAT-5176] Refactor Credit curve calibrator
341654 Refactoring: Don't repeat defaults of TP configuration
TrackMate_: major refactoring
JBRULES-1738 Support XAResource transactions and generic save points JBRULES-1739 in-memory XAResource -some refactoring to add a PersistenceManager and rename the package from transaction to persistence
Initial probe into refactor IRFutureOptionSABR Functions
Teiid 773 - cleanup and refactoring so that the assumption is there will be 2 datasources required in order to run the test.    
Refactored: moved SortedMapUtil
#NAME?
[ADD] XQuery: easier integration of XQuery and Java modules:       http://docs.basex.org/wiki/Packaging#Packaging [MOD] minor refactorings
minor refactor
Intermediate step in refactoring of FieldAccessorFactories.
"Major refactoring, removed instrument from trader base"
"prework: refactor clones, add further template composite bindings (currently unused)"
refactoring
some refactoring
Refactoring.
#80 refactor the Sku CPH to instead use a persistence provider for all Sku fields that invoke a getter for display values
refactored Trades to use BigMoney
Switch back to hibernate - Introduce Akka - Misc. refactorings
"Refactored neural package (and subpackages) to use proper interfaces instead of classes directly. Made bias weights an external StaticNeuron with synapse, StaticNeuron represents a neuron with no inputs and a constant value as its output."
major refactoring - work in progress
refactor the preview action support
Fixed uploading of shapefiles with 0/1 in MHW. Also refactored AttributeGetter to commons to get reuse of the number/boolean/date parsing logic in ShapefileShorlineDAO
"Move to Optiq 0.6 Also includes: -improve exception catching -move schema path parsing to Antlr -close zookeeper connection on if client created -enhance BaseTestQuery and have other query tests utilize it -Various test fixes for better memory release.  still needs client allocator to be closed. -refactor DrillSqlWorker and create multiple SqlHandlers -Add PojoRecordReader and DirectPlan capabilities -Update Antlr to use same quoting rules as SQL: single quote for quoted strings, back ticks for identifiers -Move back to old Sorts until bugs are fixed -Refector SelectionVector management within Prels -Add support for NO_EXCHANGES option -Extract SchemaFactories to use Optiq's new Schema handling capabilities -Add basic handling of cancel in UserServer -Remove output requirement from Project -Add start of usercredentials to User communication"
Temporary RF refactoring commit.
"refactored the collection of items, so it can be better use in embedded applications"
Refactored most search tests to validate downloads using set difference. Didn't do image/impc_image tests as they seem to be fine without using sets.
refactored TicTacToe class
Refactor the SettingsFactory to move all the migration code in one method.
Further refactoring of CollectConfigFactory.  Move some code out that belong in Capsd
Refactor
updated to latest ServiceMix version; refactored package to com.fusesource; added WS Client
New Eclipse-friendly framework for refactoring tests. Converted ExtractFunctionReafactoringTest to the new framework.
"Add Repeated MockRecordReader generators Refactor usesHolderForGet to Types class (updating evaluation visitor) Rename FunctionScopes for Aggregates to more descriptive names. Fix RepeatedValueVector off by 1 bug Add extra debugging in function holder matching Fix method grabbing visitor and modified unparse visitor for outer block drill func bug.  (Ensure writer flush and close, add extra printing surrounding output of unparse visitor.) Update allocation helper to support repeated vectors"
Refactoring
EGit operation / action refactoring
VRS Refactoring:  Moved 'true' VRS class vrl to vrs.vrl. 
"Complete type resolution refactoring: all tests that passed with 2.6 pass now, as well as couple that did not."
session refactoring
Test framework refactoring. Make it even easier to use AbstractMockingComponentTestCase + other refactorings
Refactor : generic assertIsCloseTo and assertIsCloseToPercentage methods
Refactoring from WebUtils to WebUtilsService: getUserNameForDocName getPageTypeApi getAllowedLanguages parseDate
refactor
api_refactor: move cfg admin apis
Refactored Lock to use Datastore#getOrNull().
Minor: refactoring
[TACHYON-696] Add AuthenticationProvider to authenticate the connected user -- Remove too many enum type and refactor the code
refactor launch constants to debug core
Refactored notifications for comment's attachment: now using main logic from core
#NAME?
master refactoring on RoutesParser and Router
refactoring
refactor again
"JBRULES-1625 Create Scheduler API with JDK implementation -Basic refactoring for for TimerService, instead of Scheduler"
Major refactor to switch dependency injection frameworks.
a little refactoring
"Fix for #513 AtmosphereRequest.getSession(create) may return null, even if a session exists. Also fixed the factory to align with other AtmosphereFactory"
massive refactoring
refactored
Take into account the refactoring of the new Silverpeas Persistence API
refactored handling of not mutatable enums
"Got image scaling working, and did some refactoring along the way"
Minor refactor of extension mechanism to improve reusability
Refactor - remove duplicate SkeletonToken classes
Client & core refactoring.
Refactor RestoreChange code into gerrit-server
Refactor CoxPHModel class to encapsulate conceptual operations in protected methods.
RequestInterceptorImpl refactored to RequestGuardImpl
now BeansConfig checks the corresponding file's modification timestamp before reloading the file; refactored start of BeansConfigValidator [fixes #490]
"Refactored mojos, added JavadocApiMethodGenerator, ApiComponentGenerator"
refactoring of test cases
Refactor: Extract extractChangesetNumber() method.
Refactoring + fixed bug(int score -> double score)
Refactor: JtsPoint.getJtsPoint() to getGeom()
Fitted Adapter to match JDK8 Function pattern. Refactored method names in XXXAdapters classes.
Refactor and reorganize glimpse examples
api: Refactor move acl to org.apache.cloudstack
Added time remaining formatter for PeridodicStateCommands. Refactored Timeout config and expiry calculations in preparation for Frequency service.
"<refactoring> introduced module java5 (will provide all Java5 extensions as a compiler plugin); renamed module 'jmodel' to 'jvm' (will provide core JVM features only); sources not yet refactored also: cleaned up POMs: commented repositories, tests are compiled but not executed... {{2hrs}}"
NMS-8801: Refactored and reused AnyServerX509TrustManager into core/lib.
Refactor master and worker container requests into separate methods
major refactoring
"Caching changes and refactoring, includes Fix for Wobu - TestCacheCollectionIds test case"
"ACT-755 refactored related content UI, added file-upload"
"API refactor: renamed subscribe to subscribePrivate and subscribePresence because there were too many subscribe methods in the class. Plus it made it difficult to add an overload that only takes a channel name if you want to subscribe to a private or presence channel, because there is already a subscribe method that only takes a channel name and it's for public channels."
refactored code so that view is created by a separate method from the one which creates the thematic map graph.
continued refactoring of microchip potentiometer impl
refactor next
"[RHQ-2298] the cli can now be configured to go over SSL. has hooks to even use truststores for server authentication and keystores to authenticate to the server. can auto-gen a keystore if one doesn't exist. the configuration of the security is annoying (need a bunch of system properties) but there is a set of default examples in rhq-cli-env scripts for now. also refactored the RemoteClient API to be more consistent, easier to use."
refactored recorders to sinks (thanks to @fiat_money)
Refactoring.
refactoring
Refactored ActionUtil.
Refactored CodeGenerators to work with the new architecture. Added skeletal implementation of 'withTransaction' to allow some basic testing.
parseResponse refactor phase 2
JSEC-53 - initial refactoring of Permission hierarchy
refactoring: renamed EdgeEntry to SPTEntry
refactoring
MAHOUT-161: refactor norms to allow for norm and normalize
1) Refactor location of server-side ClientBundle  2) Refactor location of LoginWidget and login support
Refactor: move me.desht.util to me.desht.scrollingmenusign.util
"Checkpoint of my Swing UI refactoring. Usable for output-only programs, but only barely."
"Bug 480917 - Use PHP or Php in all types/methods [PHPUnit, Refactoring]"
More yarn refactoring
ROO-3711: Refactoring Spring Roo repository commands
downloader refactor
"cli2: refactoring to make cli2 ready for svnadmin and other launchers, each with specific set of options and subcommands."
Refactored MethodLogger to MethodLogController
Big refactoring
MOAR refactoring!
Refactoring and reducing duplicate code
Refactor storage code to delegate storage to the attributes themselves
refactor service manager and email connector
Refactoring of how classes are organized. Changed so that each JAR is compiled into its own .so.
ISIS-776: allow fixture scripts take a param; refactoring todo app's fixtures
massive update/refactor
Refactoring.
Refactored code with improved test coverage.
KS-2168 : rRSS processing refactoring :  - removed usage of SessionProvider in favor of SessionManager jcr tasks - splitted respoisibility between Answers and Forum dedicated processors - made smaller methods
Jogging refactoring work in progress:
"More refactoring, renaming, removal of unnecessary setters"
[mybatis-spring] minor updates to SqlSessionFactoryBeanTest; refactored sample code and test cases to consolidate and clean up for new users
First pass at refactoring the protocol.
Cleanup and formatting. Tests Passing. Removed deprecations. Finished refactoring.
Refactored all names to remove learning objective reference and replace with learning act
Refactor CLI and WS implement for VHM. Minor change for fixing bug 'cluster delete error but no node exists.'.
"#279: Refactored BitstampAccountService, and associated Demo class"
Add fromGuest method and refactor to not repeat it twice
Refactor the name of both the directories and the artifact ids of the FormsOnline project and of its subprojects
Refactor the validation in confirmDeleteReportsCategory and deleteReportCategory actions <sl&lufen>
DATAKV-36 + refactored SortQuery by adding get params as well
Refactored AbstractSink
Refactored phd module (extracted Partipant concept)
"Define: Three bugs solved, which occured when rules were edited. Exceptions to rules can be defined now for back call and skip call too. Furthermore: some refactorings."
Extended and refactored tests and finished a first implementation of the DirDiffAnalyzer.
TEIIDDES-1214 refactored class names to reflect latest terminology.
Minor refactoring of source code.
"- added ""coordinates"" binding - changes name of ""recordGroupTest"" to ""recordGroup"" - refactored initializing h/v/Z arrays"
Refactoring binding API. Adding support for generic types.
Refactored SMSD to make it lesser dependent on the set type methods 
refactor
"refactor to support the xml elements, attributes, and value of a type definition."
added status action and some refactorings
"'Command' refactor. Modified test classes. 	new file:   src/main/java/ru/cinimex/server/EndGameException.java 	modified:   src/main/java/ru/cinimex/server/ServerController.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionCommandFactory.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionOnBigBang.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionOnLose.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionOnMiss.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionOnStrike.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionOnStroke.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionOnStrokeFactory.java 	new file:   src/main/java/ru/cinimex/server/commands/ReactionOnWinStroke.java 	new file:   src/main/java/ru/cinimex/server/commands/ServerReactionCommand.java"
Big code refactoring and Notifications web-driver added
"Attempting to minimize the code duplication in http and osgi transports, more refactoring will have to be done later on"
Bugzilla#307470 Refactor code by adding canExpand method in IChartType to check if each chart type can expand size according to category number.
refactoring
#47 refactor
some refactoring.
"PEBBLE-44 Switched to ROME for main feeds, will refactor to make code nicer when responses feeds are done as well"
Refactored to separate In memory data generation from Filebased Data generation. Lot's of clean up required
BUG 4507: Symbol refactoring
"ExecutorProviders are refactored using BootstrapConfiguration pattern. - ServerExecutorProvidersConfigurator and ClientExecutorProvidersConfigurator - default executors are no longer retrieved from InjectionManager to provide them for internal use, however still registered and can be injected - executors defined by application are retrieved directly from component bag, not through InjectionManager"
refactoring
Last Minute Refactoring
Refactored
refactorings and improvements for new plugin management
XWIKI-11486: Batch API to send large volumes of mail * Refactorings while reviewing (not finished)
Added participant support to CopyRefactoring
"Various fixes: new vcap-java-client, removed application plan from core and UI, removed v1 server URL checks and caching in Server wizard. Refactored and cleaned up how credentials and spaces are validated in the Server wizard. Removed debug checks. Removed MCF and local cloud URLs from Server wizard."
Minor refactor / rename
core: refactor UpdateVmCommand
refactored (abstracted) image system
CSPACE-6168: Refactoring hard-coded cspace and nuxeo database names to be configurable.
multiple refactorings; Using getData instead of getTile to retrieve image data
Refactorings and added new exceptions.
Refactor CachePool to permit other types of caching
refactor: introduce ResultHandlerBase to factor out common error processing logic
refactor custom draw
Refactor BeanCodeGen for use in tools
Refactor RLexer
[update:] code refactoring
Refactoring
refactor context selectors: extract delegation into ComposedContextSelector
refactoring
"Refactored SSL code, added and expanded tests that had dissapeared in some git black magic."
"REFACTOR: total refactoring of the ReplayRenderer interface, heirarchy, and interaction with ReplayServlet. Moved all the heavy lifting up into the base class, with subclasses just overriding particular callbacks to specialize behavior. Hopefully makes more sense.."
"Refactored mp4 reader, replaced homegrown implementation with isoparser from the mp4parser project."
[302772] Refactor DSF Disassembly view to support CDI
refactored getIdValue to return Object
Refactored running of RunnableStory instances to be passed the StoryEmbedder configured from the  Ant/Maven entry point. Refactored the trader pom.xml to use profiles to control different run configurations.
Creation classe JsonFabrique Refactoring classe jour en classe JourOuvable et JourWeekend
more refactoring an cleanup
#NAME?
Refactoring CloudFoundryClient integration tests for V1 and V2
Refactoring + fix of space in subjects
 - DAVXMLUtil.sendMultiStatus() is refactored to use sendSingleResponse()  - DAVPropsResult should contain a collection of xmlns namespaces  - DAVPropfindHandler progressed ()
Removed requirement for a factory and refactored object names and methods
MAHOUT-176: Refactor out VectorIterable in favor of Iterable<Vector>
Refactored Wrapper classes
Refactor the AST tree to allow for abstract clafers nested under abstract clafers.
refactoring API to better match Java conventions
"refactored, think of Diplomas in a generic way (DegreeType independent)"
"Refactored and documented the PhaseEventBridge, SystemEventBridge. Added unit tests."
[462355] refactor BPMN2Editor for use outside of an IDE
Refactor EnginePermBuild to more suitable structure.
refactoring
began refactoring Querydsl to new Type model
refactor(github-ant): WIP - Refactor tasks and tests
Refactoring to provide more clear and extendable mapping HTML -> WIKI
Refactoring to simplify implementations.
refactor for search web
Triangulators changed to return triangle indicies. PolygonSpriteBatch refactored.
Refactored 'ODataExceptionMapperImpl'.
Refactored WXForce to Force. Maybe it'll fix the stupid MSSE security popup.
"ZooClient knows about the backup service port, so that ClusterManager can see it. Also some refactoring regarding parsing of the backup server port"
Updated package structure in core part and made IDE part adopt to core refactoring in the previous commits
refactor CacheService implementations
"refactor maven-artifact: first pass, reduce the usage of setPath()"
refactor code
"refactored DocumentManager CRUD functions to match basic JPA CRUD functions (persist, merge, remove, delete)"
Refactor app-schema & gt-complex to avoid wfs-ng->app-schema dependency
PDM-28 Refactored a bit of code for reuse. Improved annotation documentation with examples and attribute definition.
"[SAFETY COMMIT, REFACTOR, BREAKING]"
integration tests refactoring with maven profile management part 2
refactor add it testing
Refactor for IFileLocator and DesignFileException.FILE_NOT_FOUND
Minor refactor so that we can configure the MasterConnector using XML or dependency injection easier. Also added a test case showing how to use a new <masterConnector> element to configure the userName & password of the slave. For background on this issue see: http://www.nabble.com/Master-Slave-with-authentication-tf2094845.html
Refactored UIBuilder and made UIContext shareable between wizard pages
"More refactoring: moved different views into different packages so the browser package didn't become very large, moved HtmlUtil to the browser.util package and moved the way to show text into the views to the corresponding Declaration elements."
Activiti Cycle: Architectural refactorings in cycle.
"CSPACE-520: Provide full details when requesting a single ID generator instance by CSID, with related refactoring to eliminate duplicate code."
"Moving kuromoji.org to kuromoji.com, major refactoring"
Merging logic-api-refactoring branch to trunk [4177]:[5869]
fixed #403 task refactoring using urlconnection for extensions added retype email verification
"Refactor Netty channel pool, port #624 on master, close #201, close #623"
Refactor: move importer classes from molgenis-data to molgenis-data-import
GPF (mainly JAI-stuff) refactorings
https://bugs.eclipse.org/bugs/show_bug.cgi?id=386062 - renamed some base classes and refactored common stuff from List and Detail composites
Refactor - categorize pages and components better.
Refactoring
refactored and added pyramid examples
Refactorings and improvements.
Refactoring Result and Xml Result Writter
Refactor cmdline parsing into gerrit-server
HV-126 Code refactoring and some more tests.
refactor rename
"Added RegexPropertyResolver which allows specifying pattern for read/write method matching. Refactored core property resolution logic into PropertyResolver abstract, and extended IntrospectorPropertyResolver from it for better extensibility"
refactored VidadaServer / Rest dependencies
Refactoring of getters and setters. Addition of new docstrings.
Refactor Recorder
refactor test
/me is a thing now! Minor chat refactoring and cleaning.
Refactor StatusBar
Commands that require a chest can be used via name or id /dc which now returns the correct chestid. Permissions work again. Refactored onPlayerInteract code
Refactor type unit tests and add false positive test case
Added RosterAddedController Refactored Controller API to include getRosterAddedMessage and getRosterRemovedMessage methods. Refactored UserName to check for null prior to checking for isEmpty. Refactored ConcreteConversation for structure.
"refactor, size of key (catalognumber)"
refactored inversions
JBRULES-218: refactoring Reteoo Builder
Updated and refactored test harnesses
"Refactoring.Introduce MemcachedTextCodecFactory for text protocol encode/decode,Then remove necessary methods from MemcachedHandler.java.Deprecated MemcachedProtocolHandler,Remove VirtualSession.java."
Almanach refactoring : starting by renaming all almanach packages.
refactoring: extract mount point service
Refactored
lots of general refactorings triggered for the development of a GUI package
[Amir / Pramod @ ThoughtWorks] Issue # 1550 - committing refactoring and changes in LoanOfferingBO and related functionalities This commit - cleans up the field that were discarded after different rules for loan amount and installment were introduced in 'upgrade 160' - Introduces loan counter for groups for implementing the above rules for groups keeping track to loan cycle for groups - Lot of refactoring is for issue 1557 which is going to be addressed next
Big refactoring of CDI Bot tests + seam3 generic openon test added
Refactoring to eliminate redundancy in output class hierarchy
KARAF-963 Dev modules refactored
changes to support tracking mana sources + some refactoring
compilation fix (failed before due to packages refactoring)
Refactored repository queries to handle search of canceled LineStop
Minor Refactoring
Some minor refactoring.
Graphics task.controller refactored: One mechanism for all types of diagram; mechanism improved; redundant code removed; zoom with context works now for intended architecture diagrams as well.
refactored GivenUUIDGenerator.withAddedUUID() to concat() see discussion https://github.com/restx/restx/pull/38#commitcomment-3977624
"Cleaned up code, minor refactoring."
Refactoring: moved post action menu into RedditPreparedPost
Refactor out FrontMatter parsing and test it
"topic: code enhanced type: other module: other description: mdeditor - refactored, added comments"
refactoring add delete transformation
Refactored
Refactor VolatileGlobalCellCache: * introduced VolatileCache and VolatileCacheEntry interfaces.   Used by VolatileGlobalCellCache (which should be renamed).   Implemented in SoftRefVolatileCacheImp. * currentFrameEntries removed without replacement   (was used to keep strong refs to entries in current frame to avoid    premature garbage-collection of weak refs. Was potentially dangerous    if client didn't advance the frame counter. For Guava based cache it    will not be necessary.)
Large refactoring and reorganization concerning Add-ons
Code refactor
Refactoring WebDriver factories.
Refactor resources API
webadmin: Refactored Network QoS frontend code
"[PLAT-1061] Refactor bond security search, add FinancialSecuritySource"
[jvstm-ojb] Refactor: Now supporting complex ValueTypes
refactor to switch out api url on from domian
refactoring.
refactored proposalcollectors
Refactoring for Issue-7 (addition of 'createParser' and 'createGenerator' on 'JsonFactory')
Small refactoring for parallel coords
Refactored Hyperpoint to rename it to Vector. Added a few additional operations to the Vector class.
stress tester: refactored OOperationExecutor
Enhance the element ID feature and refactor id type from int to long.
refactor for readability
Issue 101: refactor client examples
NXP-12375: follow Work and WorkManager refactoring
"Implemented composite.Manager unit tests. Refactored some unit test code in the base pool package for reuse by other tests. Fixed some bugs where if the PoolableObjectFactory threw an Exception, the pool would think an object has been returned more than once. Other minor improvements found while pondering code for unit test creation."
#NAME?
"Big refactoring of Cycle API, compiling and test running but distro not yet checked (impossible in the train without internet). Not yet stable!"
ObjectServiceTracker was refactored.
Refactoring value on default calculations completed
pool: Refactor how the http mover closes files on upload
PHP Plugin - Code refactoring to remose useless code
Refactorings for 5.0.0
"[BACKLOG-8869] Open URL Hadoop Cluster list gets it's information inconsistently       - Minor change on activate method in HadoopVfsFileChooserDialog.java, to call initiate() method (forcing the refresh of the NamedCluster Combo)       - Added unit tests for activate method       - Refactored NamedClusterWidgetImpl.java and HadoopVfsFileChooserDialog.java classes to only call the getters instead of the having the attributes being called directly (useful for unit testing mocking )"
Minor refactorings to layout; added isCurrent property to WithInterval
refactor for pluggable input handlers
World-inheritance implemented. Some major refactoring work done.
"Refactored report item class to avoid class loading issue, now all API classes are in api package"
REFACTOR add module and ADD list module
SAVARA-306 refactored Java generation into separate bundle to share between SCA and switchyard components
CrossModuleCodeMotion: refactor to statement-based operation. This sets the stage for a performance fix that will make the pass smart enough to move all declarations to the best possible module in a single run.
http request service refactoring
[issue:1646] Refactoring für Verringerung von Code-Redundanz
"Deezer client refactoring, any number of parameters can now be passed to api calls. Add related artists map type and data construction"
ACT-1021 Refactoring: Moved BpmnError into public API and ErrorPropagation into helper package
Minor refactoring of getTasksOwnedFromDateToDate query tests
pmd: Refactor java's symboltable implementation to use the new generic base classes
Refactoring mbean interface names for consistency. Renaming option interfaces for consistency.
Transformation framework and refactoring of date facts and IDENTITies
jfrontend - some code refactoring and minor usability settings
Refactored converter to account for name changes NOT TESTED
refactored querydsl-apt packages
documentation refactoring
JBRULES-761 Automate the Eclipse build -refactored DroolsIDEPlugin to DroolsEclipsePlugin
#24 : working on Royalty report refactoring and tests
Refactor EntryPoint into methods.
JBIDE-25386: Consolidate tests from 'org.hibernate.eclipse.console.test' into new test plugin 'org.jboss.tools.hibernate.orm.test' - Move 'org.hibernate.eclipse.console.test.RefactoringTest' to 'org.jboss.tools.hibernate.orm.test.RefactoringTest'
added some refactoring and tests...
refactored BeansAopProjectBuilder from aop.ui to aop.core. Now the aop.ui plugin contains only ui related components; [fixes #429]
HSEARCH-215 * First part of refactoring. Renamed org.hibernate.search.Search.createFullTextSession into getFullTextSession. Same might be required for org.hibernate.search.jpa.Search
This change refactors many of the SearchPageTests.
Huge refactoring of all CDI QuickFix-like test + moving resources for QuickFix tests into one folder
refactor RF as a class
Introduce a refactored means of executing tasks in parallel for several simple common cases
refactored reporting actions
Refactor: get artifacts that corresponds to the tests
Adding cache support GetDebugApp and refactored to a single Expiry Cache
auto-collapse Find and Refactor context menu items into submenus depending upon the screen size
"Refactoring of the Ceylon Builder Should fix #91 and #101 and other similar situations (moved, etc ...)"
minor refactor
refactoring of property tests to have DRY principe
Pretty big refactor to rely more on the ruby executable detected during the capabilities detection. Aim is to remove a lot of duplicated path building.
ISIS-14: ResolveState refactorings
refactor handling of selection in correction proposals
Fixed and refactored an issue in the build command. Added incomplete build command tests. Added command name test for all commands.
"[1058534] Alert template for Trait Change from older RHQ results in NullPointerException The ""Changes"" operator requires slightly different logic as alertConditionValue allows null Add null handling, also refactor some similarly verbose/confusing code in a few CacheElement classes. And add i-test for this issue."
refactoring
"Minor refactoring of NodeType and class which reference it StackObject, SequenceChecker, Linker etc. The aspiration in  NodeType was to convert it to an enumeration: this refactoring moves AbstractDataFlowNode.stringFromType to make the class a bit more enum like and to make it publicly available for use in debugging other languages."
Refactor StatementRewriter - split into rewriter and parser interfaces which are independently configurable.
Refactor to use common method to get document id
[MIFOS-4589] Refactoring additional holiday test to remove DB unit dependency
Refactored database classes - moved into their own project.
MAHOUT-729 Refactoring: Use Maps.newHashMap() and Lists.newArrayList() from Guava globally
refactored to represent both storage and manifest references as URIs implemented exhaustive tests uses varargs more extensively to clean up path API implemented relative URI patterns and staging tests (bagit etc..) tests pass
"VQSR now operates on LOD scores in the INFO field directly, and doesn't adjust the QUAL field.  New format for tranches file uses LOD score.  Old file format no longer supported.  log10sumlog10() function, a very useful utility in MathUtils.  No more ExtendedPileupElement!  Robust math calculations in GMM so that no infinities are generated!  HaplotypeScore refactored to enable use of filtered context.  Not yet enabled... InferredContext getDouble and getInteger arguments now parse values from Strings if necessary"
PropertyHandler refactoring (pending)
refactor out deps resolver
#POULPE-407 Refactoring
Refactor local cluster configuration
Refactored entity generation as a series of generators with shared interface.
Vavr refactor 02 07 (#2193)
TargetRuntime refactoring and model object creation unification. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=383962
Incorporate group deployment into bundle deploy wizard. Make initial use of Selection widgets.  Refactored Pulled AbstractSelector out of ResourceSelector and subclassed ResourceGroupSelector as well.
validator refactoring
"Major refactoring of association testing framework. New modules are now beyond trivial to implement. One hurdle remains which is how to deal with statistics that ought to be sample-normalized (e.g. depth, insert-size [when multiple libraries are used], and possibly others)."
Refactor some TOC-related code
"refactored the column metadata repositories. the jdbc column metadata can now query a specific column on demand, and has an optional filter on catalog + schema. also, the caching repository now only queries the metadata on demand rather than loading all metadata on startup."
Refactored put streams such that they can avoid chunked mode until it is a last resort.
"a) First fully functional (sort of) version of walker that parses Beagle imputation output files and produce a vcf with imputed genotypes. More doc/info to follow shortly. Issues still to be solved: a) Walker changes all genotypes based on Beagle data, but annotations on the original VCF are unchanged. They should in theory be recomputed based on new genotypes. b) Current implementation is ugly, dirty unwieldy and will necessitate a refactoring soon so I can keep my pride. Most aesthetically affronting issue right now is that we read the full Beagle files at initialization and keep them in memory, but a more delicate implementation would just read from files on a marker by marker basis. Issue that currently prevents this is that BufferedReader() instances don't seem to play nice when called from the map() function."
"Refactor AvajeDaoTest, add MemoryDaoTest. Fix minor bugs uncovered in MemoryPermissionDao."
Added lots of documentation Refactoring of xslt structure of the docbook
Refactored
"Refactoring, renaming, updating pom files"
"Refactor Actions, merge actions between SQLConsole and BeanShell. BeanShell works."
"MemcacheService 100% method coverage, and some refactoring of async helper methods to CacheTestBase."
Preliminary work to scheduler refactoring
"Starting to refactor the controller. Created an interface, renamed some functions, removed the preparser responsibility."
Refactored asset handler classes
Next round of refactorings and improvements.
refactoring extract methods
Bug 334770: refactor SearchPattern test case
Refactored chatroommanagerview to handle all chat rooms
"refactored all the Gremlin function library graph functions. Much cleaner and more organized. Will refactor other functions with my new pattern next. Added test cases for most of the Gremlin function library graph functions. Found some bugs, fixed them. Work great. Solidified on an Index model --- note the new function idx-all(). Next up is reindex."
A bit of refactoring to use raw SQL for building up lists of articles for the browse page.  BAU-222
Refactored the HMAC code to make updating the canonical representation easier
Refactoring
Algorithms refactor (#2136)
#NAME?
refactory add properties file add conf file for junit
core: Refactor detach of local Storage Domain
refactoring + bootstrap SyntaxErrorTest
Issue #4 - Refactor SituationQueryBean to clarify query semantics.
 ItEr11S07HistoriaLaboralTraballadorItEr10S07: Refactorization of edition and creation of worker history entries
Major Refactor
Update and refactor
Minor refactoring
refactoring package to remove com.ebay
o finished @Environment refactoring
Refactor ValaSource to use the new SourceFile.getNodes method.
Started refactoring model classes
Refactor the webapp startup classes
ROO-516: JSF 2.0 Addon - refactored with new packages
Refactoring - Clean up code duplication in encryption & decryption Cipher generation. refs #237
refactor JavaScript handling and add SetCursorPosition.
Refactoring
Refactor activity preferences keys
refactoring
Refactored the tree view to enable changes to be made.  Also moved the tree and table views to their own packages.
Refactor the configuration a bit so the property keys are co-located with the configuration code
38181 Empty dialog after use supertype where possible [refactoring]
"Refactored: renamed SuiteConfiguration.classPath to classpath, deprecated old methods"
Refactor appendingParams code slightly.
"Major refactoring of the UnitOfWork pattern, including an addition of the ConflictResolver, which is able to resolve concurrent modifications on an aggregate."
Refactoring: Renamed classes and methods.
SOAPUI-549  refactoring
"[BUSINESS] Refactoring scanning process : simplifie events, monitoring with registers, ..."
refactored BloombergMaster to BloombergSource
PAXEXAM-211 refactored TestAddress to also carry Arguments. (dropped ParameterizedTestAddress for that)
"JIRA-1090 	- fixed leaking of the Request Scope in ResponseProcessor during async processing 	- Request scope refactored from ""enter/exit"" pattern into ""runInScope(task)"" pattern"
WFLY-6974 refactor weld transformers to non-deprecated api
"add beta version,  refactoring"
Refactoring of HTTP request processing code intended to reduce amount of intermediate garbage
refactored QBETest.java
Number of refactorings
SAK-13470: refactored the Podcasts folder checking code as well as tightening up the WARNing message logged.
refactor scaling stuff
Summary: Refactoring chart code for extra works.(T54831)
"Refactored the builder to not pull override files from the file system at build time, and instead have them passed from the build method."
refactoring
"Bits of code cleanup, refactoring, and documentation"
issue #39 : refactor Arc
Refactoring the D2W debug components into ERDirectToWeb from ERDivaLook
"refactoring, reducing classes"
[Spring Boot] AMQ config refactoring.
[KARAF-4198] Small refactorings
Modified WOJRebel to use NSNotificationCenter instead of direct method calls for plugin integration. Refactored plugin for inclusion as an official JRebel plugin. Updated to JRebel 3
refactor UI Observer.
refactor and optimise getRows and getColumns code paths
CECP-54: 4.2.4.2 Update Company Info Code refactoring
Refactored
refactor generator packages
WINDUP-269: Some tests run too many rulleproviders + small test refactoring
Kie API refactor
- Refactored Client API implementations for HttpURLConnection and the in-memory   to leverage inherited classes for writing and reading HTTP requests and    responses. This makes it easier for other HTTP protocol implementations to    plugin and use the client API. - Fixed issue 167   https://jersey.dev.java.net/issues/show_bug.cgi?id=167   A UniformInterfaceException will be thrown if the client requests an   entity and the response status is 204.
massive internal package refactor
Refactored Test Env for Linkd and EnLinkd
start refactoring SnmpThresholder
refactor wizard
Refactoring of epd-ship and -shore settings panels to use a common base
FACES-1903 Develop alloy:inputSourceCode component (refactored due to generator changes)
some little refactoring
Starting to refactor risk/reward measures to make them easier to use in OG-Financial
Summary: Refactoring chart code for extra works.(T54456)
Refactoring for TransactionalGroupServiceTest
Refactored ObjectUtils. Fixes #567
Refactored the Issue class as a top-level class
refactor
reporting: Merging package-refactoring branch into reporting trunk.
refactored to contain changes within AI package in preparation for tournament assessment
"refactor Adaptive NameExtractor, simplify Adaptive annotation #55"
Minor refactoring in ValaLabelDecorator.
SAK-1927: refactoring component build
more refactorings in web-frontend
"Add comment on Deploy OBR bundle class, refactor enum name"
"Refactoring, preparation for pull request"
Refactoring
Refactor and implement resource preferences and persistence data
"Updated and refactored unit tests. Everything is now fixed. Also changed the project codebase slightly during this process, but no major changes."
SC#QCADOOMES-375 add expand/collapse tree option; SC#QCADOOMES-423 fix numbering & refactor
"Big refactor. Started to change to Mardao 2. Project not building, just sharing the code."
moved testMapLoaderLoadUpdatingIndex to MapLoaderTest class and refactored
#1150 - Refactor convert RawSql and RawSqlBuilder into interfaces and push the parsers into io.ebeaninternal
Refactored tests
Refactor tests to run under Maven
Refactor.
more refactoring (still backward compatible with hector)
Refactoring
# POULPE-157 * Refactoring of tests * Changing the method names in teh BranchAccessChanges * JavaDocsk for PermissionManager
ROO-2928: Post 1.2.0.RC1 code refactor and clean up - refactored WebScaffoldMetadata in preparation for ROO-2514; also simplified how all enum's values are obtained
refactoring
Refactor: [Phd] Removed subclasses' overriden methods identical to the superclasses' methods. Common parts from viewAlertMessages.jsp and viewProcessAlertMessages.jsp extracted to phd/common/ folder.
MongoConnection refactor
FACES-1954 Develop alloy:inputTime component FACES-1897 Develop alloy:inputDate component (Refactor inputDate to be more consistent with inputTime.)
Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
Refactored
Refactor the document browser. Use Jackson for parsing json configuration files and data binding.
started refactor of api added new exceptions added securitymanager stuff for retrieving the images added search stub fixed image resizer so if an image doesnt need to be resized its not. was making tiny images with black backgrounds and only just started doing that which is odd. added more properties fixed profile image css to centre image images that are uploaded are now assigned a uuid so you can upload the same named image again. will add ability to manage images shortly.
"Some Improvements, Refactoring and Implemented , Client side , query Restriction  Command. TODO : ) Write tests for MatchOperators (StartWith, EndsWith, Like)"
Refactor methods to setSpectatorMode
refactoring model out of xml (compilation still broken)
internal refactoring to follow the recent TimeDimension => DateDimension renaming
Refactored code to represent KMeans within the clustering package.
Refactor ConsoleFoundation.
refactor
Finishing refactoring of server module.
Refactorted Simple packages.
"Almost implement IdeDocumentListener, refactor IdeProjectListener"
"Refactored visitArrayLoad() and visitArrayStore() to make reuse easier in derived ConstraintVisitors. (Used by X10 ConstraintVisitor implementation, which has its own form of array-related IR instructions.)"
[MOD] minor refactorings
more refactor
Fix dashboard charting bug and refactor.
Some refactorization.
initial refactor to restructure the binding of solr results to teh ResultModel
"support of user defined resource-bundle, refactoring"
Issue 352: refactored request signing
Refactoring of file collection that was done in 2 places : JBackup.BackupTask and Archiver classes.
"org.eclipse.cdt.core 	Fixed Bug 43051 : Search: cannot specify relative search paths 	Fixed Bug 45140 : refactor IScanner to allow use of Readers of IResource"
Refactored compiler_installs location.
huge refactoring to facilitate  testing. reduced usage of File based XML tree to controllers layer
Half way through refactoring code to use new crossref service
Jetty XML configuration support: refactoring
refactored the sample project so that the created archetype doesn't have conflicts. Also adding the generated archetype since the pom needs to be hand edited to be deployed.
Preparing replacement of dumbster by MailsterSMTP / Big refactoring
api: Refactor and move s3 to api.command.admin.storage
First commit of the new Interceptor system for Stripes.  Includes a major refactoring of the DispatcherServlet to cleanly break it into one method per lifecycle phase.  Also includes a new SpringInterceptor which will be the preferred mechanism for integrating with Spring from now on.
#NAME?
Removing BRM and moving the refactoring actions from org.python.pydev to com.python.pydev.refactoring.
Refactoring of the type transformation parser to improve the handling of the parameter count of each keyword. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=73221247
refactoring and other improvements.
Messages classes refactored.
Refactoring
refactoring json from json parsing. correcting the structure and how it's parsed and written
added support for ctors as copy methods; moved CopyMethod to its own file; further cleanup & refactoring
reintegrate io refactoring
* made AbstrackSocketAppender not lose events when socket connections gets lost (now uses LinkedBlockingDeque) * extracted aspects of deque creation and output stream creation to factories in order to improve testability * ecapsulated automatic flushing of output stream into a separate class in order to make this functionality testable * slightly refactored internal structure of AbstrackSocketAppender to improve maintainability
Setters and getters for colors Fixed behavior of mousevents Refactoring
Refactoring package structure - step 3.
[Refactored] some classes
Refactor directory structure
Fixed bug 407985: [1.8][extract method] Extract Method refactoring from Lambda Expressions
refactored with message service
Metrics refactoring.
Refactoring of LoggerFactory and ILoggerBinding. The actual binding operation  is now handled by a different class implementing LoggerFactoryBinder.
refactoring
Fixed NPE. (TED#52622) Added constant expression type in ExpressionCodec and result set evaluator. Refactor and revise code for typo.
refactor method names; prefix with _ if only called from xml parser
Modified to allow usage of an external blocking queue. Refactored codebase to split into packages.
Client ResourceBase split into local/global Finishing SPARQLEndpointBase refactoring
refactored factories
Code refactoring
refactored OAuthPrincipal
Minor refactorings
"Refactored Artifact.ID, now we have 'connectorId', 'originalNodeId', 'currentPath' and 'globalUniqueId' Added ID for repositoryConnectorConfigurations Fixed bug in Signavio Connector to let it fail in log level FINE Added missing httpclient jars to web-app in demo setup (caused by new restlet version)"
"added test for missing managed bean in @actinoListener, some refactoring"
"Refactored ModelConnection.add and ModelConnection.remove to take a variable number of 'context' arguments.  Added named graph aware primitives graph:assertIn and graph:denyIn, analogous to graph:assert and graph:ddeny.  Renamed stream:union to stream:both."
"Refactored alignment to allow anchored compounds for all global alignments Replaced setSteps(int[] anchor) algorithm due to design flaw (information lost in anchor conversion: not possible to get steps from anchors {(1,1), (3,3)} as alignment could 1-23 or 12-3) Added aligner.addAnchor() for addition of single anchors Refactored some alignment internal method signatures to improve code readability Improved test coverage Bug fix: #78"
launcher: Refactor how we return the status code to the shell
JBRULES-1375 Create initial ePDL language parser implementation -fixed bad refactor
Refactor some OLAP code about the name management.
Refactor: moved BloombergHistoricalTimeSeriesLoader to com.opengamma.bbg.loader.hts package
JBIDE-10449 - slight API refactor to allow as7 to restart on .class or .jsp changes
refactor phantomjs utilities
srm: Refactor Scheduler
refactoring
"Refactored and polished CSVDataExtractionImpl. Extracted the CSV formatting methods to a separate static class CSVUtil. Now always using CRLF as newline character, because the RFC mentions it as default. Null values are exported as empty strings. Exceptions are not forwarded to the caller, encapsulated as cause in a BirtException. Added check that OutputStream is not null. Added unit tests in a separate plugin fragment for the CSV data extraction and CSVUtil."
"Added a rename property feature, lots of refactoring and cleanup."
Minor refactoring of TodoList demo
[OPENENGSB-2881] improved exceptionhandling; refactored the processing of xlink calls
refactoring removing redundant code for library handling lazy loading of playlists when retrieving them - dont pull down the whole world before shipping the folder asked for
Made client and server side connection state classes public; Some refactoring of the content buffer classes
Added TestingUtils + minor refactoring of CryptoUtils/Engine
metamer: invoking of blur in tests refactored
"MONDRIAN: Fix formatter bug 1492365, ""Small negative numbers are printed as '-0'"".     Also change formatting of null value from ""(null)"" to """".     Flush cache of precompiled format strings if count exceeds 1,000.     Refactor Format's unit test as a separate junit test.     Format now make more use of JDK's locale-dependent formatting. (But we're not quite ready to eliminate the use of resource files for locale-dependent formatting.)     Add FoodMartTestCase.fold(String), and use it to improve how we handle line separators in test output.     Add back constructor for QueryAxis which JPivot was relying upon."
refactoring codes...
Refactoring
"Refactor performance test ==== Potential optimization: 1. Disallow type changes 2. Use ""or"" condition in query 3. Use ""or"" condition in key selection"
"[ENG-85] Refactor position master, including type-safe identifiers"
[OPENENGSB-812] Refactored json messaging structure from ports-jms to core-common
major refactor
SOC-1571 IdentityStorage and Identity Manager refactoring
Refactored the MediaPlayer and MediaPlayerFactory to accommodate different types of media player but sharing common functionality. Unfortunately these changes break the existing API and client code will have to change.
RF-13505: fix render=@all for refactored EPVC
refactor resource UI management part with Workbench Context
refactoring of the variable handling code to remove unnecessary code and duplications
#NAME?
[PLAT-1461] Refactoring view definition change listener out in preparation for other listeners
refactoring: move PartialMatchpageCache
"Partial fix for MIFOS-3051, refactoring get method of LoanAccountAction"
Refactored posting of event
"Revert ""Refactor role-user relationship to an explicit object."""
"Assigning easyb extensions to groovy by default, this enables java and groovy refactorings in easyb behaviors"
DAO refactoring and FIGIS reference data implementation
JBRULES-773 BRMS assembler - refactoring and improved tests
[PLAT-1296] Refactor time-series master; Add get request
"First pass at refactoring GAVs, packages etc"
Refactor code
Small refactor.
MAGNOLIA-2506 refactor samples
"http://jira.sakaiproject.org/jira/browse/EVALSYS-335 Hopefully this is the last major commit related to the refactoring, this should completely close out the issue (there will probably be slight errors still)"
Quite a bit more refactoring
[Model Metadata] Add convenience method and refactor unit tests
New test cases and simple refactoring to accomodate those
Refactoring of the article block. New tags for articleListViewer and removing some old code.
* implemented parsers for TIFF and BMP files * refactored JPG parser * fixed some byte order problems * cleaned up
Refactoring.
before refactoring
Refactoring and Add test cases.
RAVE-612: add ability to hide/display the widget title and widget border - refactored renderTitle field to hideChrome in RegionWidget and PageTemplateWidget - hideChrome now also hides the border around the widget in addition to hiding the titlebar - updated Person Profile Page template to demo this feature using the groups and experiences widgets
refactor test case
Refactoring around Subscriptionfactory
Minor canidate controller refactoring
Refactored: finished introducing TestFile
"Refactored ClassInfoAnalysisEngine so it can be used to parse from an arbitrary stream.  Used this feature to fix SingleFileCodeBase and SingleFileCodeBaseEntry so that they base the resource name on the name of the class contained in the file, rather than the name of the file."
ODE-987. Refactor Channel classes to not rely on code generation (step 1)
Further refactoring of new multi-layer in dataset model
Refactored initial display code into different game states Refactored XcomEditorImpl from BasicGame to StateBasedGame Removed a little import cruft and cleaned up main() in PimpMyXcom Added some more tasks to the TODO list
refactoring integration tests
Reuse code to make refactor easier.
Refactoring of pagerank
major refactoring of the former cassandra-common module
Refactored code to move refactoring to org.eclipse.ltk.core.refactoring
[SHRINKWRAP-118] Apply patch by Community Contributor German Escobar to remove DirectoryContainer and refactor
Refactored vector classes
Refactored how the Bug Fields were retrieved.
refactor Ports. separate incoming and outgoing
a lot of nasty refactorings and model changes in preparation for support for xml adapters.
Package name refactoring
Cambio de ubicacion de archivos de configuracion. Refactoring de nombres.
[misc] Small refactoring to wiki components module * Use XWikiContext provider instead of accessing it through the Execution * No need to use a serializer for DocumentReference to print logs. * Convert some tests to Mockito.
Refactoring of package name.
starting to refactor CrawlElement
"Visualization package refactoring, replace Object3d by Model."
refactor provisioning 'differ' into the model classes
Security systests refactor - part II
"Work to support new feature C1, ""Set Tool Command in Project"". Created a new preference page that has a single string field editor (for now) to edit the tool command. There is an externalized string for the label. Now that there are preference pages for tools and for options, and both are managed by the property page, the common logic for both preference pages have been refactored into a superclass.  	 In the property page, there is now logic for remembering what tool has been selected as well as what option. The property page now creates preference pages for tools and options.	"
Refactored sink/src code to use encoders and decoders rather than directly accessing the enumeration system.
"Refactor the source updater code to make the main updater loop more managable, safely remove the updater and start metrics even on source udpater failure "
"Refactored ""follow user"" feature"
refactor some new monitor tab JSF code out of inventory sub-package and into measurement sub-package
Clean up after plugable architecture refactor.
"Refactoring, renaming sub projects"
MAHOUT-504. Fixed CLI arguments and did other refactoring of synthetic control example. Tested CLI invocation with explicit arguments which was the source of the problems cited in this issue. All tests run
Auditing Onyx code to support multiple datasources in Magma: * Refactored some code around MagmaInstanceProvider.
Minor refactoring of fetchInternal into two methods to reduce new duplication in storeInternal
"refactor JsonValidationControllerIntegrationTest, add @JsonCreator constructor on ModelConstraint.java"
[JBIDE-6376] tests refactored 
Refactored BenchmarkModule to be an abstract class that includes some of the duplicated code
"Refine Group/GroupField, Refactor FixMessageEncoder, minor code cleanup"
Refactor type checking in constraints and semantic analysis for a better error reporting.
Refactored code for processing Wikipedia; suppressed deprecation warnings.
"[MOD] GUI, Editor: modularization, refactorings"
SEAMINTL-1 - Refactored code based on Pete's suggestions.  Added copyright headers
Refactor package and class names for issue connector.
"JBRULES-881 JBRULES-880 	- support for 'accumulate' Conditional Element 	- refactored AccumulateDercr and CollectDescr to inherit PatternProcessorCeDescr baseclass"
test refactoring
"[#1472] Add a Settings.executeDebugging property, and move server-side Console logic to core - Shortened some names to simplify subsequent refactorings"
refactoring LockService to extract interface
Finished code refactoring of property contexts. Template refactoring pending... 
refactoring to org.apache.activemq package names.
Refactoring of protobuf and added tests
"Refactored the `Command` interface to `Request`. Calling the interface, `Request`, makes more sense because the implementations are describing how a request is made. Supporting classes, such as CommandConfig, were renamed as well."
refactoring to support more general subtypes
https://jira.jboss.org/jira/browse/JBIDE-6203 Selection rectangle disappears when mouse cursor leaves the selected element. - Outline code has been refactored.
Added logging. Some Refactoring
Begin addressing issue #182 by refactoring how the AppointmenBookRestClient handles adding a key/value pair.
refactored processing engine
Refactoring: Moved nonFrameworkArgs to DefaultEquinoxEmbedder
Minor refactoring of TestData to reduce coupling.
https://issues.jboss.org/browse/JBIDE-8779 Disabled I18n Validator until we refactor it. So far it causes too many problems.
MassiveCore - Heavy Refactoring and Command improvements
#NAME?
more tests and refactorings for abbyy process
refactor restful handling of resources
Refactoring: Moved from HistoryParser.parse() to Repository.getHistory()
"General tidy up of testsuite - move all test infra code to arquillian, refactor TestContainer in arquillian to be useful outside of Arquillian, move unit tests back to core-test, for later move to final home"
refactoring TransactionalTopicService class.
Refactoring the user facing API.
Refactoring to improve grouping of deserializers
mostly refactoring
refactor and more tests
Small refactoring
delivering jetty inside the jar fixing stop command refactor cmdline to handle jvm property definition for commands parameters using spring singleton adding review support refactoring controller for business logic adding ui knob dependency for review status adding jBehave and UI testing of the war adding smoke tests
Resource refactoring
Product refactored
"Fixed pricelists to do overriding, refactored rules a little and added sticky pricelist rule"
"Refactor Symbol Table from pmd.symboltable into pmd.lang.java.symboltable, as Symbol Table is currently Java only.  Removed bogus JSP Symbol Table."
"[SERVDEV-49] - Refactored ""helloworld"" package to ""marketplace""."
Refactor Parser
MT collection refactoring - cms entities
Initial refactoring (first pass) for template sqlDao.
"Improves/Fixes problems with, SL comment formatting. Refactors impl."
minor refactor in test cases which now demostrate a bug in PB
MAHOUT-933: - refactored ClusteringPolicies into hierarchy under new AbstractClusteringPolicy - added close() to ClusteringPolicy to allow policy-specific actions needed to compute convergence - removed ClusteringPolicy from ClusterIterator constructor as ClusterClassifier already has one - added convergence computations for kmeans and fuzzyk - added final clustersOut renaming to add -final suffix - updated Display examples and unit tests to reflect above - all tests run
HEMERA-3402: Refactored cycle integration test and used paramterized to configure connector and connector configuration.
more tl1d refactoring
refactored model classes
Refactored
Updated datatables-jsp-spring3 sample Removed all unused files Simplified the structure Refactored and cleaned all spring config files
Cleanup/refactor. Removed flatworld option from config (specify it as a default world in Spout's configuration).
"Started some refactoring around Builders. Have been doing some testing on largish  benchmarks and there are a couple places where element-by-element incremental allocation  just kills the whole thing. In most of these cases, we know the total allocation needed any of time, and we will have to be better about specifying it up front. So now there is a  new Vector.newBuilderWithInitialCapacity(n) that should be preferred to newBuilder()"
Refactored FlowId code. Much simpler now
ARQGRA-163: spi module refactored
Started refactoring on attachments
"[SHRINKDESC-79] Refactoring upon the SPI to separate out Node/non-Node Descriptors, documentation, renaming"
Refactored the package names
Refactored domain classes to better fit the Mongo model.
Yet another major refactoring.
Minor refactoring
"Big refactoring, added ObQuery. Some class renaming to Ob prefix. Upgraded to appengine sdk 1.3.0."
Refactore EIK hooks
refactoring deletes and respective tests
Major refactoring to accomodate Multiple Outputs and more
TEIIDDES-884 Deleted unused classes. Refactored more to org.teiid.designer packages
[PLAT-1296] Refactor time-series master; Add data field to source
refactoring: replaced selfwritten object configuration code with picocontainer. bugfixing.
Test refactoring: * Convert some tests to Junit 4.x/JMock 2.x * Moved some test deps to core parent pom.xml to make it easier for submodules
refactored base package to com
major package refactoring
Major formatting and output/input handling refactoring.
refactored the Gpio interface to be more OO friendly
test refactoring
DeleteNetwork and some refactor in CreateNetwork method.
refactoring for eclipse
Refactor LinkedPage without CRC32.
Refactor to make late binding to allow registration outside of the Dispatcher Servlet context
Refactor PerSampleReadStates into a separate class
Issue 101: refactor client examples
Add a Day class and refactoring the whole thing to work with an adapter
Cleanup some code in index creation. * Add some unit tests * Add io.druid.segment.IndexMerger.reprocess for quick re-indexing of data * Add dim-value validation to validation checker (instead of ONLY index #) * General code refactoring to make things a little easier to read
Major refactoring of Marshalling - Unnecessary interface methods removed from Marshaller (getEncodingType and canHandle) - Nullable type marshallers now extend AbstractNullableMarshaller to unify null handling - Removal of unused classes - Stop initializating the marshallers in a static initializer -- turns out this is BAD
"[issue:2233] - added: comments, javadoc - changed: refactoring"
"1.) Refactored tests. 2.) Tests do not compare files char by char. They compare canonized form, so I do not have to match less.js new lines and whitespaces."
Big refactoring of CDI Bot tests + seam3 generic openon test added
Refactorings for PythonGrammar.
"Refactoring of DdocMacros, fixed bug with macro syntax errors."
refactor tutorials
Fixes for minor bugs.  Plus refactoring of classnames for SSL* classes.
#NAME?
various refactorings
Refactoring for improved MVC architecture
unstable version after heavy refactoring
SONARPLUGINS-1233 Refactoring to reuse IOUtils
Refactor Bookmarkable to match SPR-8431 patch
"1) Updated build process (now relies on Maven/Ivy for resolving and downloading dependencies), 2) Eclipse project now makes use of Apache IveDE plugin for managed dependencies, 3) Added FMeasureScorer, 4) Misc. code refactoring."
Added documentation/javadocs for presence API.  Presence API refactoring/clarification.  Fixed bug #160216 by applying patch from Remy Suen to IRCRootContainer and IRCContainer
ordinal domain and ordinal set plus checkers refactoring
Invoice tests refactoring to use InvoiceTestSuiteWithEmbeddedDB and InvoiceTestSuiteNoDB
refactoring of package names to be in conform with best practices
Some refactoring of dataflow analysis classes to make it easier to define non-instruction-modeling dataflow analyses.
#476 - ENH: Enable ServiceConfig to use alternate ClassLoader - was ServiceConfig add setClassloader api --- part 3: Refactor with ClassLoadConfig
OFC-279 - Perform code review and refactor DataService
"SONARPLUGINS-31 Scan PHP project refactoring Php Depend to calculate only measures on files scope and to not calculate ""complex"" measure as comments ratio, complexity per class, and complexity per method added jobs to calculate measures on dir and project scope added jobs to calulate comments ratio, complexity per class, and complexity per method measures"
refactoring UserLogin scenarios
Refactored tests for bst and dst
jetty-9 - First take at open/close refactoring.
Refactoring (listener -> filter)
TEIID-4421 minor refactoring to allow Embedded to create executionfactory instances as needed
"finish DiagonalRadial (added Cluster Dendogram demo), and refactor Layout API"
rearranging of a lot of the outage stuff in the UI to match alarms and events in preparation for a dao refactor; only the outage display page is left to fix
Refactoring.
refactoring
Refactoring for further extensions.
[SSHD-205] Refactor tcpip forwarding support to be symmetric between client and server Also improve tests a bit.
"Refactoring: move TypeKey to a separate class in util; leave a deprecated shell in its place, to removed later on"
refactoring: rename package 
[EVENT] Refactor event model : separate confirmed event (send to DAO and views) and request event (send to dialog controller)
minor refactorings
"refactor permutable, introduce expandable"
Refactoring kuromoji to support sub modules. Adding the following modules.
refactor method
"refactor PathTranslator's hex escaping code into separate HexEscaper class. remove PathTranslator's hex* public apis, replacing them with toRepositoryPath and toClientPath."
Refactoring to user double longs instead of biginteger
Chance-Core: Rule Building (Refactoring)
"* (feature) Test connection on save, but only if username and password are provided. * (feature) Use ONE_TO_MANY between MailSettings and JavaMailProperties to show the link. * (refactor) Don’t create specific mail module. Create settings module and util module instead."
Refactored project naming. Ozone goes out. Tropo/Rayo goes in.
HDFS-8215. Refactor NamenodeFsck#check method.  Contributed by Takanobu Asanuma
refactor persisting code into the provision service
Refactored: extracted a generic MessageEncoding interface from SuiteListenerEncoding
Code refactoring.
Tidied up and fixed latest refactoring work
Refactoring user lists to have two productions instead of three.
Some refactoring on UrlFactory.
Variant refactoring
refactoring
"topic: code enhanced module: deegree-tools, GRViewer description: refactoring and Code-simplifications"
"change normalization policy: normalized text now is not a view, but a model, so documents and queries store already normalized string as fields. normalization function updated to strip tags. names refactoring."
refactoring Factory-class names
"Refactor of query plan hash - add HashQueryPlan, HashQuery etc"
refactor
JBRULES-3563 refactor to worstScoreDifferencePercentage
"Review standard model evaluation at field level, refactorize and add tests"
 Refactoring
Refactor connector into core bundle
#2457 minor refactor to make it easier to reuse the Kubernetes client across services and a first spike at a health checker
Refactored the ZooClient into a shared AbstractZooKeeperManager and also implemented the ClusterManager with all the wanted methods for getting master and connected/disconnected slaves.
" #135 refactored some code, and made tabular output of CONSTRUCT / DESCRIBE queries possible (e.g. when using csv/tsv as accept header)"
"Various refactoring to achieve hapmap and dbsnp awareness, the ability to set pop-gen and secondary base priors from the command-line, and general code cleanup."
Refactoring code about report document
refactored remove and clean library
Refactored SchemaTool to enable ArcObject Cleaner
Refactoring : uniformize method names to fail when no exception thrown.
refactored checkout as a GitCommand
refactor
big refactor to split cassandra-unit and cassandra-unit-examples
Refactored width/height values into superclass and enabled construction of RGBMonochromeBitmapSource from a Bitmap
Fixed #1 -> M2_HOME and Maven repo definitions. Refactored some tests
Refactor GitHistoryPage
refactor java version
Refactor plugin management for better maintainability
Refactored all decompositor's tests
Refactored from IAppServer to ILiferayRuntime
"implemented TimerEventDefinition, added tests and fixed/refactored where necessary"
"minor, some mess solved through package refactoring"
Refactored the CommandLineRunner a bit.
refactor
Fixed acquiring local/xa transactionContext     some refactorings     added a container-mocing test
Updated data model.  Added additional fields and refactored constructors.
Refactored.
Refactor - moved WallOfResurgenceToken to shared area
"Refactored RHEAORU_R01TerminologyValidator; abstracted the Mule flow terminology validation, added error specific exceptions. Created unit tests for RHEAORU_R01TerminologyValidator and added appropriate test documents."
"Refactored TestShapes by geo/non-geo, allowing simpler extension and exclusion of some tests by subclasses."
[Thymeleaf] A step forward to the thread-safety Most of the Thymeleaf processors have been refactored in order to properly handle concurrent accesses. Added comments Closes #239
refactor messaging tests for resource transformers
#57 refactor entities
refactoring PPatternAssistantTC.java
DTO class name refactor to avoid collisions with XChange DTOs
#NAME?
Initial refactoring of backing objects for admin forms
Further refactoring of PerfCore.
refactored with included maven pom.xml
refactored packages and artifact id to match github.com
Smal refactoring
Some refactoring and added method used in CastleGates plugin
"Review of the recent function/service operation commit.  Small tweaks:  - reformatted to conform to project conventions where necessary  - addressed compiler warnings  - changed OCollection from a class -> interface, made immutable, added builder  - per suggestion, renamed old toTypeString method -> getFullyQualifiedTypeName, removed deprecated methods  - Refactored the EdmType hierarchy a bit, the base type is now called EdmType, the old EdmType is called EdmSimpleType, EdmComplexType now inherits from new EdmStructuralType, to share code with EdmEntityType   - no modifications to the new O* hierarchy yet, although we should probably do something similar"
"Basic rotatable objects, portal object and placement code for output portal generation, refactoring"
TMC-IOENC: Refactored Decoder to use ByteBuffer instead of byte[] for better readability/simpler code.
"Refactoring,added info to api pom"
total refactoring
Refactored to simplify and decouple
"Hit class gerefactored naar HitProject. Event bug opgelost, inlezen werkt weer."
Refactored com.github.amercier.selenium package
[refactor] renamed Criteria to Modifier
Refactor kie-ide module to contain BPMS and BRMS components
ROO-120: Support multi module Maven projects - refactored MavenPathResolvingStrategy
Refactored traitors and faulties out of the main algorithm.
#57 refactor entities
refactoring
some minor refactorings
Summary: Refactoring code for extra work.(t59619)
Renaming/refactoring cont.
Second commit for linkd test refactoring
Refactor bootstrapping
Refactored LayerEditor
NOJIRA: NetIdManagementService refactoring
Bug 488109 Refactoring of Extract Constant Implementation
 NMS-8041: Refactor Enhanced Linkd Topology
Metamer: refactored attributes setting
 various fixes to tab/tree navigation/bookmarking; various refactoring of tab components; some refactoring of Resource and group detail views
refactor publish msg request
CDS: Refactored ISDA method to give better separation between time operations and analytics
A walk-through of the components to see to that they are correctly refactored according to the renaming convention.
refactoring: mount points events
Refactored BBCode stuff : - BBCode CRUD operations are now hold by BBCodeService - Rendering is now generalized into MarkupRenderingService - BBCode rendering is performed by BBCodeRenderer  and plugged to MarkupRenderingService - introduced an BBCodeProvider as a mean to have custom BBCodes (used by Forum)
Massive refactoring of entity memcaching. Entity memcaching should now be nearly transactionally safe. Caching service is now available outside of Objectify. Significant changes to the way hooks for clearing pending futures work. Memcache stats are now tracked.
diagonal matrix refactoring
Backup scanner merge/refactoring work
Refactoring of generic codegen functionality into a generic CodeGenBase class
Added new unit test for TestRunConfigurationReader    - refactoring of SuiteConfiguration and TestRunConfigurationReader
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
"Refactoring of OAuth2 filter before the ""Web Server profile"" implementation."
Refactored scope handling. Allows overriding annotations with in(). Improved error reporting.
JBIDE-9702 Refactor project examples plugin so that it can be used inside JBoss Central
Refactor helper for computing class distribution. Add stratified sampling helpers. Add Poisson-distributed RNG.
[PLAT-1296] Refactor time-series master; Remove database methods from master
added Balloontip dependency refactored Starter added fetching of remote Data to CorbaConnector added pushing of changed data to remote servers fixed reload of DatasetListModel externalized gui-strings fixed call of PnObjectDataset#getDataset() to return new object added ObjectDataset#getCopy() added small log fixed DataStore#del()
Refactoring of command-line option handling.
+ refactoring : PlotsReporter's use one control tree to fetch data.
Refactored ChatMessage out of swing package
Refactoring PublishSet
Refactoring
Feature #3110 : refactoring
"refactor jbehave tests to use FluentProcessEngineTests, CamundaSupport becoms obsolete"
refactor package
Refactored implementations to MongoModelTemplate
Curve generator for ingflation and refactoring of curve generator.
Refactored: renamed classes
Refactored code for checkpoint decision logic
Refactored
refactored protocol handler tests
Refactor: new interface to view the PhdProcesses by categories in the Coordinator section
#NAME?
refactoring partcover plugin to coverage plugin
Builder JSP alpha support. Builder refactoring.
Refactor some of the recent API chnanges to JarIndexer
Some refactoring and a lot more javadocs.
Refactor the shared code into separate methods
DefaultSession\DefaultSessionManager Refactor
Managed null emitter Id. A bit of rename and refactoring. Added some Id helper classes
Refactor AlluxioRemoteLogFilter.
- refactored a few methods - fixed a bug where entering a random > inserted </> in the document
"refactored functions, removed mDisplayMatrix"
Refactoring; FailingDeserializer was in the wrong place for some reason
XLCLOUD-857 refactoring and small corrections
Refactored repository to accommodate Maven directory structure.
SWITCHYARD-1111 - Adding more SWTBot tests and refactoring a bit
add javadoc and refactor Sql to SqlSelect in orientdb package
refactor restx spec: extract running feature from declaration
Across the board refactoring to phase out the old PlaceholderContent class
samplest: refactor: rename PathParametersResource to ParametersResource
SONAR-6912 Refactor WS api/users/deactivate
Refactored XPath usage: Turned static helper class XPathUtils to interface XPath with two implementations:  - GwtXPathImpl (currently used)  - SarissaXPathImpl (not yet implemented)
"#POULPE-237 Tests, JavaDocs, Refactoring"
function renaming and refactoring
refactoring java config + checkstyle corrections
Refactor code and tests to eliminate the need for PowerMock
refactoring of ImportVisitor and Requisitions
ARQ-1261: refactored tests to common ftest-base
wip broker client refactoring
JOLT : Shiftr Refactor and replace Placr with Traversr
refactor authentication code and Api class
"[SHRINKWRAP-238] Refactor Container add* methods to denote we are adding *to* an archive, and what we are adding *from* is based on input type"
"continue refactoring of clientCustAction, groupCustAction and centerAction removing reference to CustomerBusinessService and removing unused methods of CustAction base class."
Beginning to persist ProcessInformation. Refactored SuggestOracles and completers to share code.
Refactor: Teacher credits
WebsiteConnectivityService refactored to ConnectivityService.
refactoring work
BLC-568 - renamed the FulfillmentActivity to better reflect what the activity does. Also refactored the FulfillmentService to have a list of third-party FulfillmentProcessors that can respond to fulfillment calculations and estimations as appropriate
core: added missing logging + refactoring
Mise en place du premier test se servant des exceptions + Refactor Bonjour !!
refactored match details into 4 classes
Refactored complexity out of HttpFields
General refactoring.
Yet more refactoring
Component and repeat functionality refactoring.
o Refactored management injection to allow for proper extension loading
refactoring for QuoteManager
[SYNCOPE-259] Introduces Notification Service. Refactoring proxy services into proxy sub-package.
RAXAJSS-111 refactoring JUnit tests so each test checks only one part of a function
Big refactoring of CDI Bot tests + seam3 generic openon test added
SaveEncounterORU_R01ValidatorAndEnricher: Refactoring
2910273; bugfix; NPE when trying to determine property type with no getter; refactoring; functional tests now have default instantiator;
"Bug 814331 - Part 7: refactor InfoRecord etc. into InfoFetcher, turning InfoCollections and InfoCounts into dumb JSON-eaters."
#NAME?
refactored XFormsFunctionLibrary addressing #33: - extracted superclass XPathFunctionLibrary that now hosts all common methods - added new subclass BetterFormFunctionLibrary
" ItEr23S08CUEdicionCalendarioLaboral: Refactoring calendar model. Now a new class CalendarData appears, where the calendar versions will be stored."
refactoring
MODE-1720 Refactored ExecutionContext and its contained objects
Complete code refactoring on the side of the server.
Couple refactorings
JBIDE-12529 Use refactoring API to delete converted dependencies
"[CXF-6165,CXF-5607] Cleaning up the demo a bit, minor OIDC RP code refactoring"
Minor refactorings
[SPR-6184] Refactored internals of ContextLoaderUtils; @Ignore'd broken test.
feat(engine/mt): refactor some code
"Made some refactorings (which should, if anything, make things a little faster):"
"Neha, Mujir | #1508 | creating bed charges for bed assignment. 1. Adding bed charges for bed assignment encounter. 2. Refactored existing code. 3. Failing event when productId for 'admission charge' and 'bed charges' not found."
"Refactored customer persistence, customer BusinessService, customerBO test cases. M2 code. Test cases updated."
"Refactored TopOfBook and last price level to book, added lastCuvolLevel to cuvol"
Refactored binding path element model
refactor meta data build process
Refactored part 2: Result objects for Iterations and Selections
merge refactored as a Command for extensibility as discussed on https://github.com/jenkinsci/git-client-plugin/pull/20
refactored recording code - moved all to just HttpHtmlResponseView and BrowserComponent
Refactor session cookie config not to rely on optional dependencies
refactored LastPartialCommand so that it is-a PartialCommand so can contain data and should marshal just the same as the PartialCommand; this solves the double-datagram issue when closing a partial command stream also refactored the reliable transport some more so that it is close to working; should have test cases working soon...
Refactoring
Test pass again after custom id refactor
first changes for 89422 [refactoring] [dcr] method refactorings should support participants
Refactoring for Growable vectors and Indexes
Refactor cluster service related tests
[BZ 749126] - Loosening validation requirements on import. This commit is quite big due to the refactoring but does only a couple of simple things:
Move SqlLocator to sqlobject. Add AnnotationSqlLocator. Add SqlObject.sqlLocator property. Refactor handlers to simplify future transition to SqlLocator.
[MOD] Numerous IntelliJ refactorings
"add simple u18n support, add tests, some try to refactor, format source"
Refactor comparison and normalization classes into different packages.
WIDGPT-80:  Refactor support for SpEL in the AppLauncher to support pluggable context elements
namespace refactoring
refactoring pc code
Added logging. Refactored Photo and File service. Added checksum on photo file. Added repository.
big refactoring and cleanup also added predicate operations and fixed setting predicate values
JBRULES-1903 Pipeline support for DataLoaders and Feeders -Added of jXLS support -Added Callable support -Added List adapter -Refactored Receiver.signal(...) to Receiver.receive(...)
ITSM-111 Refactor tests.
refactoring :la metode estDateValide est maintenant isDateValid(celle sans parametre)
Add test. Do some refactorings of matchers.
Fix refactoring typo
refactoring ahoy
Refactor org.sonar.server.plugins.ApplicationDeployer
"HIVE-10201: Hive LLAP needs refactoring of the configuration class (Vikram Dixit K, reviewed by Siddharth Seth)"
refactor the save method so that it is available to all and null safe. also added a readResolve to handle when null properties are deserialized
minimal refactoring e subquery suppport imprevements.
refactored to allow usage in both portals
refactored RpcServer to make the flow clearer
fixed: refactored + reflected comments in PR
FORGE-2265: Refactoring the CDI Commands
security classes refactoring
Started refactoring samplers.
Ennesimo refactoring
"core definition cleanup, bit refactor jmx resource transformer"
Bit more refactoring to prepare for #1381
Refactored DeviceConfigDto to produce nicer JSON
Entities refactored
#29 refactored SSL support to be aligned with other transports
refactoring
"- Added support for rotation in our blackbox test framework, and refactored the ways tests are created and run. - Turned on 0 and 180 degree rotation for all 1D formats. - Turned on 0, 90, 180, and 270 degree rotation for QR. - Changed the 1D code to re-enable upside down scanning, with a dramatic improvement in barcodes found and fewer false positives."
"Refactoring, code cleanup."
Feature #6169 : - refactoring some stuff - adding a new technical parameter to enable the limitation of maximum receiver for user manual notification - adding a new rule in order to inject easily mocked object into instances or static classes - adding CurrentUserNotificationContext in order to manage the new limitation feature
Refactor share component
"Fix AxiomStructure bug, refactor, move Atom and AtomicDecomposer."
"Tests for inflation cap/floor, and a light refactoring of inflation products(the way weights are managed for interpolated products)."
Refactoring for issue 30
Refactor UI code for customization.
finalize refactoring
417382 - Upgrade to asm 4.1 and refactor annotation parsing
Refactor some confusing names in xapi.fu.Lazy
refactor code
Minor refactoring
Added rounding for time. Refactoring
add variable evaluation in instruction execution and do refactoring
refactored response entity
Refactoring of maven-scm-provider-svn to maven-scm-provider-svn-commons and maven-scm-provider-svn-svnexe
"Refactoring tests, cleanup"
XWIKI-9348: Introduce input instance component for WikiStream * a bit of refactoring
ItEr37S10CUAsignacionRecursosEspecificosAPlanificacionItEr36S12: Refactoring tests so fixture creation is easier
refactored Record classes in API; added ability for redundant resolvers - rjrjr
code refactoring
Fixes OGNL-91. God that bug sucked ass.... Finally did numeric coercion refactoring whether I liked it or not.
more refactoring
Kiran | #6 | Refactored the code to pull the retry job scheduling into a separate class.
Refactored the packaging structure in the support module.
"#901, Trunk.  RelationshipType was left in a bad state after the api refactoring.  The DAO included query criteria for 'retired' which wasn't added to either the table or the object.  I've pulled out the criteria and adjusted the service methods to exclude the boolean argument includeRetired where applicable.  I also threw in a couple lines of unit test.  Finally, i think maybe getRelationshipTypes(String relationshipTypeName, Boolean preferred) never worked... I got invalid query syntax errors after taking out the 'retired' criteria, and fixed these."
refactored move and onTick methods into more methods with single functionality
Refactoring of JML generator test code
- Fix #32 - Refactor compilers to better share code between instances - Rename template tests to templates subpackage to avoid clashing with unit tests in parent directory - Fix #33 - Substitution variables not passed to default teaservlet.xml files in META-INF/ - Add test cases for BeanPropertyAccessor
More refactoring API work
Refactoring
JBRULES-816 Refactor Column to be Pattern
"refactor frontEnd in preparation for adding pausing, reloading and deleting"
[JBIDE-21828] Refactored Openshift 3 UI model to allow for precise merging of updates. (#1217)
"Adding a ""curve"" that will be used to provide forward prices for options using futures prices - basically exactly the same as the volatility surface but missing the strike axis. As this replicates a lot of work for the yield curves, it should probably be refactored."
PreviewUI: refactored handling of workspace events in the PreviewUIController.
javadoc and refactoring
"refactored cycle API, made CycleService the central API, added connectorId to all methods in cycle service, got rid of root connector, seperated persistence into several services with interfaces and impl package, refactored GUI according to changes, removed some obsolete files and classes"
#NAME?
Refactor SourceInfo??
Refactoring.
refactoring of XMLDataBase class
201415: Refactoring asks to save on non-resource related editors
Refactor to use Guvnor revision numbers and date/time stamps
refactored
refactoring done
"Cleaned up error messages, refactored code to create ReportPart class, Added set/getUserAgent function ro HTMLRenderOption, Other cleanups"
refactor: migrate to Junit4 (#682)
[PLAT-1515] Refactored to clean up design
#NAME?
"Refactor dumping of blocks, items, biomes, enchs, entities, smelting recipes into methods"
Lots of code clean-up; refactoring in preparation for splitting out MDEI and MultiDayCalendarController
HDFS-3190. Simple refactors in existing NN code to assist QuorumJournalManager extension. Contributed by Todd Lipcon.
"Refactoring, introduction objets (module, filter, etc.)."
refactoring. separated resource specific handling methods
Refactor a bit to improve the design
Refactoring. New DTO classes.
Refactor
refactored FrequencyDistribution; added large versions (counts as longs) for large observations
refactored persistent entities
Security systest refactor part I - Use common CallbackHandler implementations
Package refactoring.
Refactor Blank Textbox
"Refactoring dispatching API commands from the scheduled async job.  Instead of calling an executor, the dispatcher invokes the method on the manager directly.  After the command is executed the response is serialized to the async job table so it can be queried later.  Also serialize a response for async create commands that includes the id of the object being created."
#NAME?
Refactor Plot to use the command line parameter partition:<data|space>
"refactoring - parser module, core, dao through service"
"another round of refactoring Application and related classes - - renamed ApplicationLifecycle to ApplicationAdvisor, for configuring application related objects at well-defined points within the lifecycle of the app; basically a delegate - ApplicationAdvisor now owns the ApplicationInfo object; removed reference from Application class."
minor refactor to avoid redundant guards
Refactor: make recorder a configuration options to fix tests.
"Start/end dates for charts not working on code, refactoring"
Spring Transactions: Savings Persistence to Dao Refactoring
refactor sql parser. improved db2 sql support. bug fixed for issue #2033
refactoring the code to work with Decimal instead of BigDecimal
"refactoring: adding prefix ""get"" to getters in RoadSection interface"
Some refactoring and improvement of docs
broker service refactor
refactoring package names for maven central release
"syncpub/sub example, plus a bit of refactoring in the SubSocketBuilder."
"[BalajiN, ImranS] #9 moving ghana specific classes to seperate package. Refactoring StaffMessageService"
"Refactored kafka, flume, zeromq, mqtt as separate external projects, with their own self-contained scala API, java API, scala unit tests and java unit tests. Updated examples to use the external projects."
Refactored SPDY modules to extract into a different module the tests that required NPN to run.
ACT-741 refactoring persistence
Refactoring to change access to properties
Tabs sample refactor and enhancements
"Added sample listing page, refactored sample API"
"Revert ""Huge Refactoring to remove warnings in Types, using a LinkedType for this"""
[Archi4] Refactor text control figures and add Grouping UI
Refactorings of running tests multiple times
refactored method and variable names of DataObjectSPI
Refactor load test into separate runner
JBRULES-1271 testing framework refactoring
"Refactored GeodesicSphereDistCalc subclasses into inner classes.  And added a ""vincentySphere"" factory choice to pick vincenty.  And started to @Ignore Haversine geo shape circle test until we get the randomly occuring bug fixed."
Refactored code for better inheritance. UPDATE YOUR LOCAL VERSION!
Refactoring Implementation.
ApplyIndexMapping refactored
Refactore EIK JMX
Updated to 1.7.2. Added Permissions support and refactored a bunch of things.
"some refactoring of endpointfilter, endpointservlet, endpointserver"
1) A whole boondoggle of changes to Guicify the instantiation of things for the Historical nodes 2) Add GuiceInjectableValues that supports @JacksonInject resolution via Guice 3) Refactor RequestLogger stuff and setup polymorphic deserialization method of creating objects
refactor tests to make them simple and remove deplicate code everywhere
Added unregister method to Poller and refactored PollerImpl
Refactoring password handler configuration
refactor to make some of the helper methods more generic
Refactor tests for load elements
interface and component refactoring
Big refactoring with ThomasS and MarcoZ!
Remove use of WellForm as it clashes with GWT's FormPanel. Refactor BusyPopup to use GWT's PopupPanel.
Refactor listener to resource registration internals
refactor of tooltips
More refactoring of names to server + client
"almost all working, additional refactoring for package consistency"
"- Add a bunch of new transformers:   - ""trim"" and ""subsection"" for slicing and dicing trips   - ""calendar_extension"" for extending a service calendar   - ""stop_time_factory"" for quickly creating stop_times.txt entries - Refactor the location of entity matchers - Add support for ""any(...)"" clauses when doing property matches."
MAHOUT-161: refactor norms to allow for norm and normalize
PLAT-4705 - Bug fixes and minor refactoring
Refactored all the LeftCurly checks into one
JBIDE-19795: Adding a separate preference for Node. Changing Bower launch logic. Adding Node & Bower detectors. Refactoring
huge refactoring of rest bot tests
Name refactored to more explicit one
#JC-171 Sonar violations. Minor refactoring.
Updated to version 1.7 -api changes (package refactoring).  -Use of the fixed combinatoricsLib for duplicates -fixed Glycerol.mol
#JC-124 refactored
cracking a whole bunch of eggs to start to make a plugin container omelet. this branch doesn't come close to successfully building right now. refactored out the server-side xml schemas to a server only mvn module. xml-schemas now contains server side schemas leaving client-api to contain only those schemas needed on both server and agent (as it should be)
Refactor package names
UML-311: Handle graphically a conjugated portand Service refactoring
[MSITE-80] refactored site renderer API and pushed duplicate checking and determination of files into the site renderer
refactoring conditionalconverter API
pom refactor
refactor AbstractExternalRepositoryAnnotator to RefEntityAnnotator interface
"big refactoring to move sql strings from 'bean' classes to Connection class - maybe be clearer to people, definitely less confusing to FindBugs"
"* more refactoring, removed references to old stand bias calculations (fishers based)"
Some refactorings in OSGi tests
a bit of refactoring
A little more refactoring - extract method and some namespace flattening.
SB-617: Heavy refactoring of the strongbox-storage-* modules (Phase 2) ---------------------------------------------------------------------- SB-776: Make it possible to define layout-specific search providers
"refactoring of search engine, part 5"
rsa refactoring
refactor mboot - model reading separated - define mboot dependencies in its own POM
Refactor so DomianGroup is no longer returned from update group action. Also refactored to make generic PersistResourceExecution wrapper.
merge from pom refactor branch
boot: Refactored configuration file parsing
[MOD] XQuery Update: minor refactorings
Refactor the table header in diff view.
* refactored output approach for call stats * included optional parameter to enable quality score output (--enable_qscore_output) for each ref/alt base
Deleted a lot of older code that no longer seems useful and is just becoming confusing.  Refactored VaR code to use the SecurityKey interface in Engine.  Also renamed yc sub-package to ircurve.
JBPM-4621 - Implement async continuation for process - refactor to avoid process definition changes
code refactoring
"Issue 797: removed patches to gson and refactored raw json strategy thanks, @jessewilson"
refactor MultithreadedInitializationTest
Kie API refactor
"backoff-controller: update unit-tests, refactor code"
Refactoring structure to see if  we can have a way for the user to select the trigger chars to apply a completion (and still have the current behavior with '.').
code refactorings which makes the code that uses Runtime mockable for tests.
"XLCLOUD-1004: set of greps to refactor vcms packages to ""service"""
Refactored some of the sopviewcreation code
refactored http server and servlet
Finished query optimization and execution refactoring. NOT YET TESTED.
Refactoring
Refactor WorkspaceCleanupThreadTest
Refactor Content to move some fields up from child posts
"#617 - Refactor - tidy up DataSource internals, reduce method visibility - markWithError()"
refactor core library into runtime and generate libraries
1) removed duplicate LocalListDataSoureFactory 2) removed dependencies on cms by moving code into common/openadmin 3) cleanup rules initializer code
Refactor the code.
Complete with refactoring
some refactoring and preparing for initial beta release
DDF-2362 Cleans and refactors the CRUD operation delegate methods for CatalogFrameworkImpl to highlight flow. (#1116)
"[MRM-1330] refactor access around the concept of a ""repository session"". See Javadoc for some notes. This should be a single entry point for application users of either the metadata repository, resolution, or storage access. The session needs to be explicitly closed (and modifications saved) to facilitate some storage mechanisms."
otec: refactoring plus a (currently ignored) test which I think simulates a potential problem
refactor design
Saved order used for REST parameters + major refactoring SOAP-594
Some refactoring
Bug fixes and refactoring.
Refactoring
"Refactor Product id to uuid, and productId to id."
minor refactoring of the folder names so all the forge related code can be in a sub project
refactor exception handling. new configuration class to tweak settings
REFACTOR: Moved web-app to its own module
Refactored Server for domain change (as well as applied Headers and small formatting mishaps).
refactor NValue
DATACMNS-20 - Adapted refactoring of Repository.findById(…) to findOne(…).
add JavaDoc and a bit refactoring.
JBEHAVE-407:  Refactored step collector logic to pass in the state of the scenario to correctly take into account the scenario outcome.
fixed issue with comments not posting and did some refactoring
Refactored the use of over-simplified process type identificators. Renamed DocumentTypeIdentifier class to prevent ambiguity.
#NAME?
"org.eclipse.cdt.core 	Refactored Parser.java to allow inline small functions and tightened the signatures for statement().   	Refactored Scanner.java to allow for data to be encapsulated to allow for IScannerExtension to act upon it.  	Partially fixed Bug 47628 - signed char is parsed as char (affects the outline view) "
Some more refactoring. Mainly in SmsDcs
Refactor IterableArray into Tools
"- consistency checks/refactorings - DB can now be created from DOM instances (DOCWrapper), Streams, ... - Filter added for creating DB collections"
Fix iris paginatio. Refactor duration parsing and others.
Refactor
Refactoring SchemaMapping and TargetResource
Refactored code and added test.
Minor refactoring done. https://issues.jboss.org/browse/JBIDE-13105
Refs #3704: Code refactoring.
Refactoring the SQSEmailSender to execute tasks.
Refactor much of the common IO-related logic into a set of base classes
refactor percentiles
serialization service refactor
Refactor cut: (1) deal with mono objective only
refactor project
Resolve the base URI. Refactor and reformat.
http util update (refactor)
database dump refactoring
refactor
adjusted java doc to refactorings
UTE-17 Refactored Java preferences code to allow for reuse when implementing UTE preferences logic.
"Analyse: FamixInvocation and related code refactored; relevant information stored in four attributes, of which two are renamed. Usage of these attributes is consistent now, all through the analysis process. DependencyDTO and Dependency report extended with attribute usedEntity. "
refactoring and update cassandra driver
Refactoring to remove need to have hibernate in shared
"Adding TaskDispatcher to abstract how the Browser component functions, this includes a refactor of the Builder system."
Continued to work on channel refactoring
Added: part of Author operations; Refactoring: controllers package
"data-binding: exposed property change handlers in DataBinder, +minor refactorings and javadoc improvements"
"Refactoring addXXX(), mergeXXX(), updateXXX()"
Item Refactor. Removed ItemManager Added more helper methods.
DDF-2491 Refactored Migrate and Replicate Commands to ingest initial query (#1284)
"Refactor of launch configurations. Specifically: Each type (start, stop, twiddle) now have their own launch configuration type, now decoupled. UI code was simplified immensely TwiddleDialog and TwiddleLauncher refactored to use new launch type ""Stop"" method of ServerBehavior classes modified to use new launches"
HBASE-10378 Refactor write-ahead-log implementation
"refactored DirectoryUtils.directoryContentsAreEqual() to diffDirectories, providing diff informations between 2 directories (if directories are equal, returned list will be empty) : this form of design will provide better feedback in case the 2 directories differ"
refactoring for CAS validation
more package refactoring
Refactored API logger to match the corelib architecture for database services
"more refactoring and addition of custom substitutions (to handle things like USSR), NYT test tweaks"
interfaces refactoring
Add per-exhibit disk based databases and refactor
QPIDJMS-305 Refactor the SASL Authentication process to remove race
"FACES-1953 Develop alloy:accordion component (refactored TabEvent to TabCollapseEvent and TabExpandEvent) FACES-1901 Develop aui:tab and aui:tabView components (refactored TabEvent to TabSelectEvent) FACES-1714 Develop Liferay Faces Showcase (modified use-cases for new 'tabCollapse', 'tabExpand', and 'tabSelect' event names)"
[refactor] Remove classes copied from org.eclipse.osgi
FixSession refactoring
Made some minor refactorings
refactor util class name
"Working on issue #77 Early access implementation of the Saga. Major features seem to work, but proper testing and some more refactoring is required."
rest test refactoring and increase code coverage
refactoring
More consistent layout spacing for artist search. Some minor refactoring.
minor refactoring and comment improvements
"Removed old (and unused) reporting system, now that Kiran's VE reporting system is working.  Refactors dictionary creation error messages into UserExceptions"
Refactor down method lengths
Package name refactoring - part 2.
"TEIID-3559 refactoring to seperate object from infinispan-cache transaltors, and also updated to support JDG 6.5)"
Small refactoring
Refactor Gui components and matching model classes added new version of cpp-server
Refactor PeriodFields from Integer to Long
refactoring ongoing
"some refactoring, slightly better naming"
"Refactored package structure. Still not great, but much better."
Test refactoring (3) for separate test execution
Committing refactoring changes to the refactoring plugin.  Refactoring plugin now does not import UI plugin.
Refactor unbind calls into the /consumers/ namespace.
data-binding: minor refactoring
refactor CVisitor.getContainingScope to be less recursive
Refactored IntervalUtils used to parse and scatter intervals for Queue. Scattering non-contig interval lists by number of loci in the intervals instead of just number of intervals. Queue caches the list of locs and how to split them up instead of reloading them from disk repeatedly. TODO: general purpose function to divide data evenly. Skip over comments when parsing picard analysis files.
"implemented the authentication entrance and refactored into a new package, added sso context jaxb object"
Big refactoring to isolate extension changes
Refactored ShareController etc.
More refactorings
"Major refactoring of the SchemaManager (previously known as EntityManager) subsystem. The SchemaManager no longer creates entity mappers. It now only provides schema metadata querying, schema creation, and schema migration."
JBIDE-13938 refactoring
JHotDrawImageCanvas: refactor event listeners
the massive refactoring of Gremlin to open up for groovygremlin as the main distribution.
Clean-up code and do some refactoring.
Fixes messages count and some refactorings
refactor + disable Sort by key column function (for a while)
Refactor the name of both the directories and the artifact ids of the ProcessManager project and of its subprojects
Refactor: getEscapedHead -> getHeadEscaped
PRD-4181 - Some more refactorings
"JBRULES-795 Refactor IntegrationCases into a number of other categorised classes -refactored IntegrationCases into TruthMaintenanceTest, DslTest, DynamicRulesTest,   ExecutionFlowControlTest, FirstOrderLogicTest and MiscTest"
"also related to WICKET-3812 ""xmlns:wicket=""http://wicket.apache.org"" rendered for each panel"" ""Copy attributes from wicket:panel to source tag"" refactored the code to change default more easily. Default behavior to be discussed / agreed Issue: WICKET-2874"
Extract method refactorings
"Added support to validate credentials and orgs and spaces when clicking ""Next"" in servers wizard. Refactored credential and spaces validation out of the credentials UI Part into a separate ServerWizardValidator that is shared by all the Cloud Foundry Server wizard components (not including the additional WST pages). Fixed formatting for manifest saving."
Refactor IcyBiome to SnowyBiome
change the structure of java classes; refactored the names of those classes
[ENG-85] Refactor position master
More work on volatility cube refactoring
"org.broadinstitute.variant refactor, part 2"
"qa-maven-plugin: eap is now locally downloaded to more specific directory (including CR,CP,DR...), version format refactoring"
refactor package
Refactor ShadeRelocationSimulator into JarMappingInputTransformer
refactoring: extracted classes
two-phase-commits: refactoring is on the way
Refactored FlatRepresentationBuilder to be a little more comprehensible.
refactor Segment.bisectionAndRetureSucc() to a void Segment.bisect()
"[MOD] BaseX 7.1 XQuery refactoring (namespaces, URI handling etc)"
"Moved out not-current-store-version check, so that upgrade can be done, into StoreFactory. Because previously NeoStore we instantiated first so the check was there. Now it gets other stores injected, which of course have been instantiated earlier and already run into the version mismatch"
refactoring
KARAF-601 Old feature files are now read correctly. Refactored list command
MODE-2661 Changes the logic of some of the Lucene queries to improve search performance The changes include both the logic of ConstantScoreWeightQuery which no longer goes through all the documents directly and also making sure to use Lucene native TermQueries when applicable. They also refactor some of the query code to use Java 8 idioms.  This commit also upgrades the Lucene version to the latest 6.4.1
Refactor contact
createEntity method has been refactored
refactor perf test to try to do better comparisons
improved refactoring support for javaconfig in beans configuration
Refactoring to display Resources and Revisions
[compiler_impl] refactoring: moving stuff around
super refactoring
refactored AccountAttributes + added unit tests for SearchPerformer.
moving to refactoring.code
Extracted interfaces refactor
JNAerator: fixed all tests (refactored BridJ type resolution vs. early name picking vs. influence of parent elements)
Refactor to common folder structure
"HIVE-9555 : assorted ORC refactorings for LLAP on trunk (Sergey Shelukhin, reviewed by Prasanth Jayachandran, Gopal V)"
UF-177: +refactoring to improve Javadocs and type names
"Added Rectangle.reset(x,y) and ctx.makeRect(reuse,x,y).  Refactored out rect normalization into ctx.normRect(), and added ctx.normPoint() for consistency."
Refactoring
Refactor/rename a few classes
#NAME?
#912 - Refactor - move platform specfic code into subpackages
"code cleanup, small refactoring, adding comments, removing deprecated references"
Refactored out JtsWKTShapeParser so that WKTShapeParser doesn't require JTS.
Refactored SpringSecurityIdSiteResultListener to use PreAuthenticatedAuthenticationToken rather than UsernamePasswordAuthenticationToken.
analytics - refactor/rewrite of the data access logic (#566)
Refactoring test code.
"IDE-1554 source refactoring many overlaps about adding templates in AddLayoutTemplatesFactory and AddLayoutTplOperation, extract them and remove the redundant ones."
"HealthChange, Experience, PortalUse and PlayerDeath hooks implemented, most of the Inventory refactoring complete and began to implement InventoryOpen hook"
"EST-2, EST-111 refactoring turnover rent and monig tenancy dates to LeaseUnit. Fixing some issues in the API on the fly."
Refactor improve internals of device frames
Refactor test class to share code
Refactoring. Moved the OntologyVersionRecorder listener.
refactored to make project structure simpler. Switched fom Eclipselink to jdbc. Added tests
[REFACTOR] Refactor ruletypecategories naming to propertyruletypes and relationruletypes.
testSaveTimestampWhenDoWithdraw_refactor
Refactor RK4 to use a special class that signifies termination. Add linear algebra class. Unit tests. Initial Elastic equations.
Releasing several fixes [..] +Fixing 122665: [CommonNavigator] Move commonWizard ext pt to org.eclipse.ui.navigator +Fixing 122683: [CommonNavigator] The registry readers for consolidated ext pts should be refactored
Added emitted id attribute in the Viewer and the Report tags. Refactored the URL construction code. Refactored the ReportEngineService.runAndRender() method to use InputOptions.
raw/generic refactor for issue #270 - Bitcurex
#NAME?
"Refactoring for ReverseGeocoding Widget and Actions Herarchy TODO : Implemented call to WPS Service Stack for Reverse Geocoding 	Try to use Google Gin for Dependency Injection Client Side"
Refactor method getSpreadIndirectAdvanceAssignmentWithSameType to be used in more places
refactored tests
bug 11036: resource count update is refactored status 11036: resolved fixed
Added support to merge pending refactoring with history
Refactored paging in base operator to not end processing once processing reaches the end of the current set of rows as new data can be added after that. Other updates and fixes.
JDOM refactor 2.0
Ticket #2869 Refactor experiment page Experiment chart data moved out from the ExperimentResultAdapter - DoubleIndexIterator: test methods are renamed
Technical refactoring by main elements and their properties
refactor test by elasticsearch-test
Refactor packages
"refactor: review restxshell and command responsibilities: use more the shell, less consolereader directly. This will allow to properly implement the currentLocation feature, and also add other features like file watching."
Functional test init - refactoring
MIFOS-4385: refactor fee update service facades
Refactored test class naming and utilities
[refactor] limit cache size and make it an LRU cache
"- Summary:Code refactoring for radar chart (#54841) - Description: 1. Encapsulating scale related logic into a new class ""RadarScaleHelper"". 2. Moving the radar chart type string from radar renderer to RadarChart and expose the package."
Minor refactoring
refactored
Refactored remaining 'repositories' into *Masters and *Sources.  Moved stuff into more appropriate packages.
Method name and return type refactored
"Backup - Refactoring ActionBeanu, SampleQuestion ..."
refactoring duplicate logic into shared helper methods
Refactored GML application schema parsers
MEDIUM / Refactored inspectors
docu and refactoring
Issue 695: Refactored getDailyCpuPerformanceStatistics into getPerformanceStatistics as it works for daily/hourly+memory/cpu
Little refactoring for send email.
#2051 refactored the ssh requirements stuff a bit more so that we can support docker more easily too
Refactor shape intersections into separate methods.
"Added support to the SpringContextBootstrappingInitializer class for component scanning given a set of base packages to scan.  Refactored LazyWiringDeclarableSupport to implement the DisposableBean interface in order for any extending bean component to unregister itself from the SpringContextBootstrappingInitializer to stop receiving ApplicationContext event notifications when destroyed.  Fully tested the application component scanning and configuration using Annotations and JavaConfig-based configuration, uplifting some of the application components (UserDao, UserService, etc) from the integration test and adding a UserApplicationConfiguration @Configuration component in order to test this functionlity properly."
Refactor poms
Refactoring of the repository in order to use Maven for the compilation/setup.
refactored template processing
Some refactoring
Added accounting support for DFA registration fee. Refactored DFA events package.
refactor GeneralMessage
first steps to refactoring content proposals and quickfixes
Rewrote JavaDoc. Refactored exceptions.
WPP-55 Fleshing out preinterceptor API and refactoring
TIKA-132: Refactor Excel extractor to parse per sheet and add hyperlink support     - Merged the two sid case statements to one
o Added log file header cache to faster find what log to scan for a transaction o Refactored buffer usage to include local and shared buffers o Modified synchronization for getCommittedTransaction to not block writers or other readers as much o Removed non used backupSlave and old backup applyLog
"Refactor Java tests and resources, and added Travis CI support"
Big refactoring to improve performance at N levels: - Serialization now minimizes the creation of temporary small objects like Strings. All serialization method receives a StringBuilder and append data directly to it - OLazyRecordSet now keeps the items always sorted for faster retrieval of items
Optimized NumberedPager circular logic and refactored some methods.
Refactor TmfTrace and dependencies - remove indexTrace()
"heavy refactor, may have a slight bug with the RingBuffer.getFnvHash() method. Not entirely sure it's producing unique hashes everytime."
refactor
Refactor site module
REFACTOR FZN PARSER
"dependency cleanup, refactor"
failures and refactoring
"add LabelValueProvider, refactor test to use $A.labelValueProvider to get $Label expressions LabelValueProvider functions should be public. fix function params, remove @private adjust condition"
Part 1 of the fix - 342978: Refactor Tree widget to make it really virtual https://bugs.eclipse.org/bugs/show_bug.cgi?id=342978
Working through Statement refactoring.  Writing tests for Generators
"refactor local message,fix 2hour load message bug"
[MST-2] Refactor position master to separate portfolio master
Refactored to reuse classpath check for normal test goal as well.
"TEIIDDES-1165 MED Editor Overview page should utilize same ""Model Class"" and ""Model Type"" combo boxes as the New Metadata Model wizard. Also changed ModelExtensionRegistryView to instead of using metamodel URI terminology use ""Model Class"" which is the metamodel name. Refactored some code out of the OverviewEditorPage so that it can be shared by that editor page and the registry view."
"extracted CacheEntry class, refactorings, added tests"
Non-functional update: Refactor Storage Policy names
Changes to CompactAlignmentToCountsMode to handle differential expression analysis for transcipt alignents. CompactAlignmentToCountsMode.jsap -- added flags for group comparisons CompactAlignmentToAnnotationCountsMode.java -- refactored methods for resuse
HSEARCH-704 Refactoring code
Refactor: me.neatmonster --> net.xereo
Refactoring of the AsynchronousCluster
XLCLOUD-205 refactoring; tests for virtual-clusters
#NAME?
"Minor cleanup, refactoring"
raw/generic refactor for issue #270 - Vircurex
PdmSchema refactoring
Refactor AbstractMsgTest to be generic.
"- Fix for bug#2216 -- KSC Report list is reordered every time a new report is added. - A unique ID is assigned to each KSC report, is persisted across edits, and is used instead of the report's index in the KSC configuration file everywhere, particularly in URLs.  The ID is initialized to be the report's index (starting at 0) in the KSC configuration file and is persisted the first time changes are saved to the file during normal editing. - Instead of having a set of fields in the KSC_PerformanceReportFactory that track what report and graph are being editing, move this to the new KscReportEditor object along with related methods and store this object in the user's session. - Use Asserts in afterPropertiesSet and other methods to simplify things. - Format code in a few places. - Refactor some controller handleRequestInternal() methods."
Refactoring
Refactoring up the wazoo
Refactored the html form view dialog functionality to much simpler dialog type from kenyaui
[Unit Tests] CheckForNewVersionAction refactor and Unit Tests
PRD-4181 - Some more refactorings
1) Refactor the announcement of segments to all exist inside the DataSegmentAnnouncer 2) Adjust the ExecutorNodes to expose the correct nodeType given the refactorings
batch domain object model refactoring
Probe: integration test refactoring+fixes
Directionality: Heavy refactoring
Updated: Take me down to the refactoring city
"Little refactoring of Automaton, trying to remove code duplication using abstract class"
Metamer: refactored all WD tests
refactoring wrt #312
Big refactoring of the jline key binding support to be closer to readline() Unicode is also now fully supported
1. Structure refactoring. 2. Fixed bugs with sub modules and sub-sub-... modules 3. Fixed navigation issues
[PLAT-1296] Refactor time-series master; Refactor ratings
"Refactoring in AbstractService.class of vmeContainRelevantText(Vme, String); decreased complexity."
Refactoring.
"don't prepend RHQ Server resource name with ""AS ""; include JNP port in RHQ Server resource name; refactor formatServerName() to use a StringBuilder and be more readable"
refactored GPIO events to separate analog and digital event types and callback methods
#NAME?
refactory datagen
More refactoring: Deleting odd code; making generic interface stronger
Small refactoring in KV Server.
"1. Refactoring of GenoypeWriters so that parallelization now works again with VCF4.0.  We now have just a single reference to the old VCF classes, and that one will be purged soon. 2. Moved Jared's VCFTool code into archive so that everything would compile. 3. Added the vcf reference base (needed for indels) as an attribute to the VariantContext from the reader. 4. TribbleRMDTrackBuilderUnitTest was complaining that a validation file didn'r exist, so I commented it out."
refactor to make stateless the client session management on the server
More refactoring
big refactory for storage part
refactor to basic interface
 97397: [Refactor] Change Method Signature - Varargs not allowed
"Feature #5157 : diaporama - handling photo + streaming from the slider - modifying WEB REST Services in order to provide data of all media - refactoring the media sorting mechanism on a functional side in order to centralize these treatments and to provide them for different consumers (SC, REST, etc.) - fixing on the advanced search page the problem that PDC block is displayed even if the related component parameter is deactivated"
"* add support for moving resourcetypes to new locations in the type hierarchy, as well as moving any existing resources of those types (https://bugzilla.redhat.com/show_bug.cgi?id=577055) * in jboss-as-5 plugin, add new JBoss Messaging singleton type and move existing Topic and Queue types under that type (https://jira.jboss.org/browse/EMBJOPR-303) * turn off PERSIST and MERGE cascading on ResourceType.childResources to give metadata update code a greater level of control * refactor metadata updateTypes() code ** iterate types breadth-first, rather than depth-first ** explicitly update child resources of new resources, since PERSIST cascading is now disabled ** stop using exceptions for code flow * add unique constraint to name+plugin index on RHQ_RESOURCE_TYPE table in dbsetup and dbupgrade scripts * remove bogus Hibernate hints on named query in ResourceType entity (cherry picked from commit 2e1a8be116717c33c91114cb0dd9ac9f254acf10)"
"Classes HodnotyVlny a Buffer refactored. Now, they contain data from FZ, CZ, and PZ electrodes."
refactoring to integrate anchored and standard alignment
minor ClasspathKieProject refactor
Refactor RxJava (#2749)
user management and some refactoring
Refactored the AuthenticationInterceptor in prep for integrating permission controller.  Fixed a warning in AddFormAction.java.
Formatting update for Vanilla as well as refactoring. Entity structure will need a serious lookover. Also added out a commented OP command...can you finish it up @Windwaker? Signed-off-by: Chris Sanders <NinjaZidane@hotmail.com>
SCRUM-952: refactoring - renamed LegacyJavascript as JavascriptUtils
Refactor to have internal package and creating TestManager API
Refactor Skill package to skill
Refactor so it can be used for other missing parameters as well
FormValidation interceptor added. headerOnly attribute added to log interceptor. soapValidator changed to validator. schema attribute added to validator interceptor. UtilityClasses refactored.
[camel-bean-validator] Refactoring.
DROOLS-198 Separate Rete and Phreak -Refactored PropagationContext to factory for rete and phreak implementation -Moved Rete actions into the Rete node classes.
"Refactored the proposal/content assist code for GAV values to the core plugin, so that they can be accessed from other parts of the project, not just the xml editor."
XLC-224 Logging added in services. Cosmetic refactoring.
Refactor World to GlowWorld
refactored packages namings
TimedMemberStateFactory refactored
"archive-commons: Refactoring of ZipNumCluster for easier usage. Refactored block loaders to a single, ZipNumBlockLoader that has all the settings for file and http io"
Refactored GoUsaGovUtils a bit 
#198 refactored JPA tests
Third Commit for Bug 3751: Refactor SVG Context Menu
Core rdf.ri package refactoring
Refactoring.
refactor where controller methods should be
511120: refactor tests in org.eclipse.mylyn.wikitext.parser.builder
"Refactored WmsCapabilities130ThemeWriter, added test"
"DROOLS-488 ""Pluggable and Encapsulated Knowledge Types"" -Refactoring Value to Mode"
Refactor AbstractJavaSourceCommand and fix a few more IMPL leaks in JavaEE
[323900] [xpath2] slight refactoring to NodeType
"Some refactoring. Created the Verbs class to deal with everything verb related. There I have the verb tree, as well as keeping track of the verb groups and which group each verb belongs to (only may belong to one at once). This can allow handling events by specific verb but also by verb group (in which case any verb within the group will trigger the event). On the other hand, Expressions now keep their line number for better debugging and error messages to the end user."
DataManager refactored using Jersey Client API (ClientResponse as return type instead of Model)
refactored method name from isToEnrol to isEnrolling
Refactor harness; JUnitResultWriter.
more test cases refactoring case-changed GEOFF to Geoff
Refactor Cadd test
refactored cache mgr again to move validate and set defaults after all properties have been parsed.  set version of object-mapper to 1.0-01
Updated datatables-thymeleaf-ajax sample Refactored the backend with recent entities Added data reloading examples Added filtering on click examples
refactor to shorten classes and add some comments
" Refactored client listeners so that responses can be decoded with correct decoders. Removed unused two classes ResponseStream, ResponseHandler. ClientEventInvocation extracted from ClientInvocation and ClientEventFuture extracted from ClientInvocationFuture so that each class focused on specific responsibility."
Email refactoring
"refactored classes, deleted SaveGame_Wrapper"
Documentation and refactoring of GroupManagerGUI
Fixing all tests + refactoring pom.xml
MIFOS-4322: refactor service facades used from LoanAccountAction.
Refactoring of the StatisticsAPI. Add a synchronous statistics execution to StatisticsController. Remove UI states from StatisticsAPI and create StatisticsUIModel and StatisticsUIController in DesktopStatistics. Adapt serialization and related code.
Refactor: get tools out of test class in preparation for more tests.
Transcoding encoded strings & some refactoring
"Back out the changes to refactor WM_CLEAR, WM_CUT, WM_PASTE, and WM_UNDO to call verify method. The refactoring made the code harder to debug."
"Documentation, FixApplication interface refactoring."
refactor CalendarDao to make adding timezone support easier. remove createEvent methods and replace with createCalendarResource. add an UnsupportedFeatureException that is thrown when a calendar resource does not contain supported calendar components. add a test for this case.
refactor storage names
refactor
missied a few 'capsd' import statments... also some simplying refactoring of the Table classes... paired with Ben Reed on this
Refactor: change bondId type from ExternalBundle to ExternalId
Refactoring some code and fixing some integration tests failures.
Build refactoring so that rendering tests are not executed when maven is told to skip tests (-Dmaven.test.skip=true). Otherwise the build fails since rendering tests expect the test jar from the rendering api module which is not built if maven skips tests.
refactoring
Factor out the local notifier.   Rename the grid gui server program.  Refactor shutdown stuff.
#JC-1210 Refactoring.
Refactoring on Rovi restartable ingest
Refactoring
[SUREFIRE] refactoring + fixed typo
DDF-210 - KmlEndpoint refactored - removed subscription logic
"Refactored stuff, cleanup. Current throughput: 96089req/S. Current latency: 398.78uS/req"
"refactored the ""fast"" impl to toggle setter injection, renamed to gunmetal, cleaned up the bench mark tests"
HBASE-15527 Refactor Compactor related classes
refactored storage files ... preselect SQL for storage without needing sakai.properties entry
refactored gui.effect.* to gui.generator.* added color scrolling modes tweaked color scrolling circle added AudioStrobe and configuration finished Analyser and configuration
#JC-100. Refactoring after review.
SCHEMA-31. Refactor locks for testability purposes.
"UserPrefs cookie handling refactored, based on JSON."
refactored EquivGenerator
More creator-handling refactoring...
"refactor generator, remove xpath"
Tests refactoring to use more SWTBotExt features
refactoring
Refactor and add new functionality to 'StoreAssistant'
"domain refactor, mongo get messages by date desc"
Refactor ITmfDataEvent to ITmfDataItem
Refactored HadoopConfigurationRegistry into HadoopConfigurationBootstrap. Improved test coverage. Fixed Ivy resolving issues for shim artifacts in main plugin project (changing=true).
Refactoring and tinkering
started to refactor the CvTemplateFieldController
Refactored into a working state
Refactor stub classes.
dao refactoring for Account (separate AccountDao and AccountSqlDao conceptually); move fields and tags to util
Support streaming request entities rather than buffering (the Apache HTTP client can decide if buffer of course). Refactor TerminatingClientHander to support implementations that write request entities by pulling or pushing.
"JBIDE-5149: Make OpenOn work for styleClass=""|"" JBIDE-5119: Refactor PageContextFactory to improve performance of context creation."
net refactor
refactor of systemtest base in preparation for #8
MENFORCER-10: refactored api to allow better access to the container. Also added contextualize to get the real plugin container to load plugin dependencies.
Refactored ParticipantId
"PrismTech JAC#789: Refactoring of interoperability test suite (correction of packaging, simplification of ant script and integration with regression test suite)"
"Removed unused stuff, refactoring of the rest"
refactor neurons model
refactored boundary to AOI
refactor
FromEntityPropertyValueSelector: refactor to ValueSelector.iterator(entity)
"Refactored the send of the SETTINGS frame from the client. It's now sent after a call to onPreface(), which has been moved to the common interface Session.Listener (from ServerSession.Listener), so that client applications can customize the SETTINGS to send to the server."
"refactoring, creating new method"
Refactor to remove duplicate code for PokerHands classes
code cleanup / fixes / formatting / refactoring better object oriented design and use fixes for thread management migration to new JNA version regeneration of JNA bindings for EDSDK v2.13.2 with some modifications to fix Eds object types and appropriate function modifications better handling and support of camera property reading/writing better detection of live view state and photo taking abilities fixes for ant build script
[AS7-6334] Added expression rejection testing. Some refactoring to clean up the extension.
Refactor the name of both the directories and the artifact ids of the MyDB subprojects
very broken verison - half way through refactoring
1) Refactored SIRI structure to more closely resemble existing SearchResults design. 2) Completed intial LinesRequest functionality
#JC-1675 * Done refactoring
Refactoring tests to pull common test code into base test class
CheckIn: Fix bugzilla bug 291975 Refactor the codes relative to the data set editor[18404]
Various cleanups & refactorings. I would suggest using the name of ParametricRuleViolation instead.
Refactored PIXQueryResponseTransformer and PIXQueryResponseTransformerTest
Further populate JenkinsBuildBean with small refactor of class name on JenkinsBuildNumberApi
"[MOD] GUI fine tuning, minor refactorings"
Refactored DNS bits of InetAddressUtils into separate DnsUtils class so that we don't need a dnsjava dependency in a core class.
ISPN-6938 Refactor remoteGet in distribution interceptors
added CreationTimestamp to HttpHealthCheck and TargetPool + refactor Warning
Refactored: renamed some dummies to fakes and stubs (http://googletesting.blogspot.com/2008/06/tott-friends-you-can-depend-on.html)
JBIDE-1497. Refactoring for usage of ELOperandToken
fixed and refactored some queue related tests
ITSM-111 Refactor tests.
"Add new ""d2wKeys"" page, similar to Components page. Refactored, a bit."
refactored api to separate module
Small refactor
Code refactoring and minor Table Browser UI adjustments.
DDF-2460: Refactor reusable test code from itest modules   - Moved AbstractIntegrationTest and test resources to test-itests-common   - Created itest-dependencies-app   - Refactored reused code to come classes and moved string literals to files
refactor of rebuild on create for avoid index drop and create
Web server refactor and tests cleanup.
refactored ParcelableDescriptor to support other serialization techniques
major refactor
Refactor /system/indices/*/strategies to return more information
Service registry refactoring work in progress: added tests and a simplified and decorated interface; moved a few classes.
Continued implementing the spacial search and did some re-refactoring.
refactoring
"Refactor the artifact-scanning logic from the realm manager and the plugin-artifact resolution logic in the plugin manager into two separate classes, one a component and one a static class, to allow the new PluginPrefixLoader to reuse some of both and create a lighter-weight approach to grabbing the PluginDescriptor for build-planning purposes...also avoids some needless error messages during build planning."
Refactor WorkQueue to support task inspection
#1100 - Refactor OrmQueryPlanKey to use string expression for where
refactoring
#2061 refactor to move more of the code near the configuration object to keep the contianers simpler
"Move activity preferences to separate package, refactor some internals"
refactoring method names for clarity
Moved some functions around to fix compile errors caused by package refactoring.
Big servlet refactor
refactored carflags to edgeflags; introduced updatable edgeiterator
Builder JSP alpha support. Builder refactoring.
Adjusted open actions to new beans.core API. Refactoring classname of ShowInView to ShowInViewAction; refs #63
"Drift Refactoring - Settle on 'JPA' as the prefix for RHQ's default drift plugin. This avoids using the rhq project name in the naming scheme. And reflects that this is a JPA (well actually Hibernate) drift backend implementation. - Prefix more classes with 'Drift' for easier classification. - Settle on prefix-based naming for drift Criteria hierarchy - Add copyright and class-level jdoc to several classes - Ensure CoreGUI uses only GenericXXXCriteria classes and Interfaces. It was assuming the JPA drift impl in places. (note, 'Generic' was previously 'Basic' but is changed to better reflect that the class does not rely on any backend implementation choice.) - Change various signatures as needed to support drift plugin architecture. - remove a lot of warnings by qualifying type decls. - Reenable DriftManagerBeanTests"
completed refactoring termination decisions into the sync
"SSL: set host on a socket in order to support SNI; selection of enabled SSL protocols refactored, to make sure outdated protocols are not included unless requested by user."
[CXF-4172] Some refactoring plus working around the lack of streaming support in Jettison
Refactor QueryGenerator code
NXP-5053: small refactoring to cleanup layering and extract a Mapper interface
Refactor packages - Files compativilty
refactored HelpCommand class
Emblems refactor to show emblems in Card/Token Viewer
More av11n changes. Refactoring test cases.
Refactor security management layer Add enhancements for restartable resources
Refactored new code.
set up support for a very simple explanation service plus I refactored the inference plugin
refactoring lemma package
refactored
"[CLEANUP] - Refactored code to improve maintainability and facilitate unit testing - Added parsing methods from String in MarketplaceXmlSerializer - Moved DocumentBuilderFactory dependency from PluginService and RemoteMetadataPluginProvider to MarketplaceXmlSerializer - Set IPluginResourceLoader as PluginService instance dependency instead of global static variable access - Encapsulated getting Pentaho session and PluginManager in an instance method of PluginService to facilitate mocking - Removed PluginService dependency on PluginFactory, PluginVersionFactory and CategoryFactory. - Added PluginService dependency on MarketplaceXmlSerializer and IRemotePluginProvider. These are set via decency injection configured in the plugin.spring.xml.template."
Started refactoring on admin console.
"Moved DirectExecutorService into core engine area for use by real (non-test) code. Refactored EngineTestUtils to use this, as well as updating other references."
improving the new tab for query result feature: remove some bugs and refactoring it
Refactor to the creation of css file
Merged changes from revisions 8160 to 8220 on cc-refactoring branch.  No further development should take place on that branch.
"Core: refactor type update logic, pt.3 (#935)."
Refactor entity and property security checks to allow custom implementations to be injected.
fixing ws tests according to JBDS 6 + some refactoring
"Refactoring of velocity code and templates finished so far. What's still missing: id, idref and json writer."
"abstract pool entry, refactored from TSCCM"
Added jersey endpoint and refactored spring-data-rest to spring-data-jpa
Refactored serial configuration parameters to own class
"refactoring, move MarkerHoverControl out of the PomtextHover, it has grown too much"
Refactoring of NycSearchServiceImpl + front-end
little refactoring
Started to refactor the routing rate test
Refactor of JMS Input to make it fault-tolerant and idempotent
Refactored changes to RemoteImageLoader and RemoteImageLoaderHandler classes to use the same way of handling image downloads for both ImageViews and TextViews.
CheckIn: Fix bugzilla bug 302085 Refactor data set editor pages' codes[19697].
"Continuing with mixins: added collector argument, some tests and refactored ActiveScope class a bit. It should be easier to read now."
Commented out RefactoringRegressionTests#testFunction_31.
Started refactoring Collectors. Previous timestamp caching = faster!
DS-2701 Service API refactor: SWORDv2 module compiles
"Refactoring, add methods for timer tasks, add log support"
"test 4: refactor code, make generic dao, refactor test function name"
refactoring / remoing unused code
Refactor EchoServer (#2934)
"2012-09-23 :: 0.0.2-SNAPSHOT *  Refactored Gpio interface to permit methods using Pin argument to function without requiring a GpioPin to first be provisioned *  Added OSGi manifest  *  Optimized GPIO interrupt thread handling to only be created if GpioPin listeners or triggers have been registered. *  Now disabling/stopping GPIO interrupt native thread monitoring if all GpioPin listeners or triggers are unregistered. *  Added additional convenience methods in GpioPin interface for evaluating state, direction, resistance, mode, etc.  *  There were two Gpio classes; renamed one to GpioController to avoid confusion. *  Added OSGi service project to export Pi4J GPIO as an OSGi service. "
refactoring
Refactored mvp package.
"Refactor BUILD_LOG_REGEX change from Ash, add some tests."
"Refactored CeMain and CeCPMain to improve isolation of the circular permutation code. To check for CPs, use CeCPMain rather than setting a parameter to CeMain."
Refactored the org.activeio package to org.apache.activeio
Refactor to use Logger instead of methods.
Broadcast : no more ManagedService#onMessage but @Post. TODO : clean code and refactor JS
"Refactored HiveConfig so that it no longer has a hive, only the configuration info.  This entailed rewriting the HiveSyncer, which ended up being ok since a lot of the things it was checking have become invariants."
Refactoring BioUnitDataProviderFactory to take class arguments
Refactoring code to get status of neighbor nodes
Unsynchronize wait for start and end. Refactor wait for start.
Refactor and Add CDI to inject DataService bean
refactored week 1 sources
minor refactorings in the recorder.
"Refactoring of project source between java source code, and clojure source code."
"Refactor for context-root, war name, module name"
"[ANALYZER-2197] Refactors the access checkes into the catalog helper, where it belongs. Also tightened up the tests with negative checks to make sure that the right access permissions are sent to the hasAccess method."
[Archi4] Refactor IObjectUIProvider and alternate figures
refactor Service into a genric interface
Refactoring. This also fixes the remaining checkstyle issue.
refactor sql parser
o Refactored all the duplicated shared state out of the reporters
"small refactorings (moved classes to util package, introduce Signavio config object)"
Feature #6071 : refactoring the UI management around confirmation of subscription notification. (adding new web services around subscription) (adding a new easy display of confirmation popup which the content comes from an AJAX call) (adding a new Silverpeas JQuery Plugin in order to handle some subscription services) (adding a new way to load javascript plugin dynamically) (renaming a factory into provider) (modifying JMS services to handle the feature)
refactor constants
refactoring
#NAME?
RF# refactor report facade
Added log4j appender for only INFO messages. Refactored code (sonar 100%).
CheckIn: Add aggregation filter test case and make some refactors
"some refactoring regarding query execution. extract statement for canceling, store cell set in query object, started work on cancelling"
refactored refinement policies for better code sharing
refactor rebind tests to share common code and remove warnings (and in one case fix test logic mistake obscured by too many warnings)
#596 refactored more code to be fabric agnostic and fixed up some gremlins. also #597 is mostly working now at http://localhost:9000/ as a blob of json
Refactored depot and added quotes
Refactored protocol.
Refactored all already existing hooks ...
"Refactored TransactionPuller to return a Result object and modified the CLI to use ""settings.properties""."
refactoring
Issue #242: Massive renaming refactoring that removes 'Gateway' prefix from a lot off classes in the gateway package as it is redundant
MAHOUT-504. Fixed CLI arguments and did other refactoring of synthetic control example. Tested CLI invocation with explicit arguments which was the source of the problems cited in this issue. All tests run
refactorings
"* Added Positions view to Photon that currently displays flat data with a filter box that filters on symbol, account, and trader * Created new commons.ui plugin to hold common, reusable UI code (moved TableSupport in from strategy code) * Upgraded Photon to Glazed Lists 1.8.0 * Fix PN-191 and PN-236 by use latest glazed lists code and native sort indicators * Trading history retrieval is now required * Fix EG-333 so trading history retrieval is performed in the background * Refactored server connection logic to remove need for ClientFeedService * Change reconnect server action to use new command API"
refactor serialization units
refactored Bibles into Books
"on feature #5084, refactoring file-based fields to use AbstractFileFieldDisplayer.java"
"ISIS-948, ISIS-947: refactoring event bus, removing special case handling of event bus in Isis core runtime; adding in ability to inject into request-scoped services and for request-scoped services to be event bus subscribers."
FIXED - bug 223266: [DataBinding] Refactor internal package names https://bugs.eclipse.org/bugs/show_bug.cgi?id=223266
Refactoring and simplifications
"Refactored ASTView & DataflowView with new superclass, improved NewPropertyDialog error handling"
[jmodel] refactoring: JModelUtils
Fixes #171 Refactor Options internally to use Optional everywhere
#NAME?
Expand refactoring on road
a bunch of refactoring work:  - renamed reconcileValidator ext pt  - split out IXXXPartitions partition string definitions  - made more non-API classes internal  - deleted some deprecated classes (ReconcileStepAdapter...ReconcileStrategyForContentModel...)
"http://issues.apache.org/bugzilla/show_bug.cgi?id=22692 : - added new splitPreserveAllTokens methods to mirror the split functionality, preserving empty tokens indicated by adjacent tokens; - refactored logic of existing split method into splitWorker for sharing by new splitPreserveAllTokens methods"
refactoring code
Refactor code Extract method out.
Refactor ChatTag and ChatModifier to use Active.
"New fields in Staff Roll popups, Refactored classes"
Refactored the JMX support to add the ability to describe the attributes and operations of the Neo4j MBeans. This makes the Neo4j MBeans almost self documenting in JConsole.
Minor cleanup and refactoring (#363)
Refactored ListCommand to get the RepositoryAdmin service using blueprint
added index queries to rest api; unit tests for index queries; small refactoring of helper to build testable domain models
View refactored. Removes confusing heirarchy. Renames classes to be more logical. Code cleanup. 
Refactored examples into the examples project
Refactor parts of XmlDumper to make it easier to work with.
refactored to introduce other search builders
refactoring: code style fixes
"2004-11-02 Alain Magloire 	Refactor ICDIConfiguratio --> ICDISessionConfiguration and ICDITargetConfiguration 	* cdi/org/eclipse/cdt/debug/core/cdi/Session.java 	* cdi/org/eclipse/cdt/debug/core/cdi/SessionConfiguration.java 	* cdi/org/eclipse/cdt/debug/core/cdi/model/Target.java 	* cdi/org/eclipse/cdt/debug/core/cdi/model/TargetConfiguration.java"
refactored virtualbox classes
refactorings
CAY-2063 Refactoring of QueryResult API: QueryResult object now represents collection of QueryResultItem objects which in their turn represent single item of query execution result.
refactored to use consistent setup*Properties methods like expect tt tests
Bug 318510 - Lightweight rename refactoring.
[JAVAGUI] refactoring client - server
Now clears count. Also refactored a bit.
refactor orderpositionregistry name
More ws-security related refactoring
SONARJAVA-565 Refactor Java plugin to remove ecosystem
refactor
QProfiles refactoring : move all logic to underlying services
Refactored
Refactoring and tests for layout attributes.
Refactored the InputStreamReader to determine the encoding only on the first read.
branch:      javabot some more refactoring.  hopefully a little cleaner.  certainly more correct at least.
Analyse improved: 1) Detection of inherited attributes at the fromClass-side included; 2) processWaitingStructuralDependencies() refactored. Referential integrity checks are included now too. 
[MOD] DBA: Various Refactorings
"determine percentage of time spent, refactor"
refactored 'updateRiver' a bit to make it more robust
Refactor issues creation
"maven tests name fix, refactoring"
"added PuppyDao, PuppyJDBCTemplate, PuppyMapper to refactore code. The old code has duplicate lines for connecting to database."
*xqUP refactoring
Refactoring to support Decorators
refactored jboss-tck-runner packages
major builder infrastructure refactoring
#NAME?
refactor subpageprossor etc. #94
"XWIKI-6903: Office preview fails for PDF attachments * Improve the checks done by the office viewer to detect if a media type is supported (i.e. if it can be converted to HTML). The consequence is that PDF attachments won't have the eye icon any more. * Improve the check for presentation format in office importer, office viewer and WYSIWYG editor server. * Refactor a bit the office importer because I need access to the document formats registry to be able to detect correctly if a conversion is possible. Note that DocumentFormatRegistry interface is from JODConverter but it is generic. Wrapping DocumentFormatRegistry, DocumentFormat and DocumentFamily with our own interfaces is not worth at this point IMO. * Remove more mentions of ""OpenOffice"" from the office modules."
refactored HtmlServlet: removed unneeded code and improved performance
refactoring.
Refactor the way to grab and expose metrics and statistic information.
refactor selectable for html fragment #113
Refactoring of 'IRInfo' and 'ConstructorTrans'
editing&refactoring
"Refactor, extracting these classes."
"I've begun a fairly major refactoring of the poller.Created Schedule that represents the Poll Schedule of a serviceCreating Schedule by dividing the schitzophrenic PollableService classinto two parts the actual Service and its schedule.Also began a base class for Pollable Node, interface and service. Gradually status, statusChanged, and deleted state will move to thereas well as a more convenient mechanism for loopingLastly my IPV4NetworkInterface a non abstract class and modified thosethat extended it"
restored refactoring getJsElement which is used by more than formhandler (for example ErrorReport)
"Deploys. Features: 	-Hibernate Spatial 	-Model entities refactor 	-Login refactor 	-gitignore refresh"
done some refactorings of ui.editor's namespace extension point
"Refactor RiverMongoDBTestAbstract to make the mongo executable a test parameter, so all subclass tests can be run against multiple mongodb back-ends"
"Refactored ops API to use request/result style instead of recipe/generic-collection, then moved these into a proper model module, to facilitate easy inclusion in client-api style applications. Refactored calculation ops into a graph analyzer and a graph calculator."
Refactored
refactor code
refactor
Refactor package names of API introduced in 4.2
Refactor matrix methods that take factories
"WaitAction with test cases, can stop refactoring"
Issue 102 - refactoring fit test suite
Minor name refactoring
alarm and events view repaired... need to re-refactor filter code
Refactor package names
Refactor dao unit tests to use DbTester.create(System2)
[Issue#157]: refactor table constraints
Changed from spaces to tabs to match other projects Changed license from to LGPLv3 Cleaned up files to match formatting conventions a bit Renamed rest of Glowstone references to Spout Updated dependency versions in pom.xml and refactored
"Refactoring of the Search interface to be broken into two parts Active & Named Search Filters. Named search filters have... names and are persisted in the database, while active search filters are temporary and can be encoded into a cookie or an HTTP parameter. Tests and Implementation."
"XWIKI-8748: When an extension is installed on several wikis ""Upgrade on farm"" should upgrade the extension only on theses wikis Also: * Moved the 'Apply' button to the extension actions and renamed it to 'Continue'. * Refactor extension action buttons to use the same name ('extensionAction') with a different value ('install', 'uninstall', etc.) * Display a link to the wiki home page whenever a wiki namespace is displayed. * When displaying the install plan, the status of the extensions to install was computed relative to the current wiki (instead of the target wiki). * Fix the order of the Velocity macros (was a bit random which made code reading hard)"
Refactored package organization in demo.client.shared
General refactoring
"userportal,webadmin: Frontend refactor"
Refactor EntryPoint class to improve readability.
"Refactoring persistence code, writing implementations of Bid & User."
preparing refactoring
Refactoring: hide holder configuration to constructor.
Refactored send of the queue when sending it as part of a /meta/connect response.
Update issue #160 Refactoring and added some tests
"refactor ImpressService to use solrj;  migrate ImpressDTO to conform to bean;  make procedure text so if procedure key cant be found, use the procedure name (no link)rather than graph fail"
refactor getEntityId tot checkForEntityId
refactored out JS handling to support HTTP expectations
CAMEL-5486 ConnectionResource Refactoring and OSGi Export Fix
Refactoring OAuthServiceHandler to OAuthService OPEN - issue SEAMSOCIAL-9: Refactor Api and ClassName to Avoid Handler suffix  https://issues.jboss.org/browse/SEAMSOCIAL-9
fixes for 37219: Rename type should update derived variable name [refactoring] patch from Philip Mayer
renamed RefatoringElementModel to RefactoringWodElement
Moved lots of test resources out of opennms-dao and opennms-services into opennms-config. Fixed some Spring context problems with renamed classes. Refactored some unit tests to load resources more cleanly.
DDF-1506: Refactored CrlChecker
Refactored plugin loading.
iss45 Refactor play-pac4j to add stateless authentication
Refactoring.
Refactor
refs #328 - refactored
"Refactored the way primitive functions are called: Primitive Functions are no longer ""Functor"" objects but simple static methods. Multiple overloads can be provided and the interpreter will selects the best overload and runtime and performs necessary conversions. This will make it possible to extract the type conversion code from the substance of the primitive functions."
"CAP-125:  Refactor how recurrance days are matched up from input (courses-portlet-api) to output (iCal4j), and troubleshoot handling of timezones & selecting first day a course meets"
refactoring
"Refactored KernelExtension to make it easier to work with it as a stateless object. Did the same thing for IndexProvider, which is no longer a KernelExtension, but rather its own thing."
Refactor unnecessary static functions.
Refactored TDD structure to deal better with self and make room for field introductions.
Minor refactoring + comments narrowing
core: Refactor NUMA node validation
More refactoring
A bit of refactoring
refactor: Renames BasicStreamStats to TrackStats and more.
"Started database modeling of commerciale entities, with ORM mapping. Refactoring of managed beans, removed references to ORM model objects."
* Controller refactor
Enhance the parser about the id allocation and refactor the code in inheritance system.
final fix for CAMEL-619 - refactored from 'tracing' property to 'trace' and added a spring XML test case
refactor outline and data view support
Refactoring of PairHMM to support reduced reads
webadmin: GUI refactor NumaNode guid to NumaNode id
"405 status working, more refactoring on parsing request"
"BOOKKEEPER-463: Refactor garbage collection code for ease to plugin different GC algorithm. (Fangmin, ivank, fpj via sijie)"
New UI and other improvements for Extract Function refactoring .
refactored processors for data returned from mythtv master backend to update local content providers
pool: refactor ChecksumMover interface
created CreateJSFPortlet (and refactored CreatedJavaPortlet)
MindMap rendering refactored
Refactor
Removed Kryo.reset() and added automatic context reset when a complete object graph is serialized/deserialized. Kept ReferenceFieldSerializer from allocating a new References instance for each object graph. Refactored Kryo listener. Rewrote BeanSerializer and added a unit test.
refactoring: renamed getModelClassDescriptor() method to getXmlDescriptor()
Refactoring tests and code for a Gradle build
Refactored: moved filters to tasks package
"Code maintenance for refactoring, by Emanuel Graf, bug 226645."
"TimW + RachelN : enable disable working, refactored agent list"
refactored experiment tests such that it reduces its dependencies
Small refactorings and javadocs.
Refactoring of paths
ADD WFS-T Widget module (refactoring from Layer module)
Refactoring TreeBuilder structure.
minor refactor to make it easier to add extra startup features
Bugzilla Bug 129420 Refactor birt web viewer's code structure.
Refactor Calendrical
refactored pa updating
Refactoring of MenuBar. Also fixed the early cleaning of the model in case the used cancels the load/merge etc. Closes issue #64.
refactor: terminal panel
Refactored expressions and functions
"ISIS-109: refactoring RestfulResponse, RestfulRequest and RepresentationTypes in order to simplify the client-side API"
Refactored: extracted SuiteResultsSummary from TextUI
Refactor defined attribute rewriting; move statement rewriter stuff into its own package in core.
refactoring
Did first a bunch of refactoring to reuse stuff from other projects. Also introduced some code to check out how distributed task cancellation might work. More of the test to be done. Not very organized :(
refactoring
"Added Collect action in the worker thread, refactored ODBService (got rid of copy-paste code)."
Android: Refactored big time.
"CODE: several changes around guessing and connectors for better external usage     - added includeTime getter/setter to DateDimensionConnector     - added HYPERLINK ldmType     - better error handling in CsvConnector     - CSV guessing can work with different escape chars     - Jackson dependency removed     - support for different separators     - distribution management added     - guessing more robust     - getCsvHeader closes the stream     - error condition check in DataTypeGuess     - can guess without CSV headers     - added several polymorphic methods to SLI, FileUtil     - guessing code refactored for data-loading     - JSON annotations added to SourceColumn"
replaced array param from the root validation annotation onto a new annotation for placing direct on fields; refactored the code
core: refactoring in UpdateVmVersionCommand
refactoring nettoyage recupererfilmsVus
Temporary change in order to refactor
Refactor: BundleUtil getEnumName() generalized to allow specifying which module's resource bundle to use. Uses the Enumeration_Resources file by default.
refactor AVector copyTo to use getElements
Refactoring to add a common interface to EasyWSDl and Woden form generators
Some refactoring
"More refactoring of the calculations * Calculations now define tags * Clinical alerts uses only calculations with the ""alert"" tag * Renamed some calculations to remove redundancy like ""Patients.."" * Calculation provider now correctly passes configuration to calculation instances * Optimised InTBProgramCalculation * Unit tests for KenyaEmrCalculationProvider"
Removed lbtest everwhere.  Name refactoring.
Code refactoring.
HBASE-17088 Refactor RWQueueRpcExecutor/BalancedQueueRpcExecutor/RpcExecutor
refactoring of fixpoint API
refactored shell-api POM and removed extraneous deps. also added CTRL-C print '^C' symbol on press
refactoring targetDAO
refactored tests a bit
Refactor Days/Months/Years
big refactoring towards separating the persistent actor store and the messaging layer. Also getting rid of the possibility of having multiple actor systems in a cluster. All actors and messages found on the classpath will be added to a single actor system. Code compiles now but tests don't run at the moment
"REQS-331 further bond test refactor, BondFn test, Tradewrapper super is assignable from sub"
Refactor SQL grammar to accept any expression as CREATE EDGE from/to values
Code quality: Refactoring according to SONAR recommendations
WIP refactoring of Candidate API to support solns
refactored the G3Connection back to regalandroid project + deal with g3 authentification only if a username is present; regalandroid lists g3 albums
refactoring for Neo4j-Spatial integration
cleaning and refactoring cglib out of paxwicketservlet..
url group synchronization support added some refactoring in ssp part to simplify adding new services if needed
refactor to move state into DOM
Added more documentation. Moved Row / IndexRow into hbaseclient package. Refactored Row and HBaseReader to move logic out of HBaseAdapter.
REFACTOR: moved mailto: checking into ReplayParseContext
Refactoring for better object orientation. Completing JavaDoc thus far.
"Refactor XMI, XML, XSD and other extensions to StringConstants"
"Refactoring : instead of manipulating DataSetBuilder, we manipulate List<AbstractBuildStatChartDimension>.  Renderer creation has been deported in AbstractBuildStatChartDimension."
#NAME?
Refactoring login code
Refactoring `HashApiModel`
Refactored the ast creator ExtensionGenerator2
"added support for database export to files, refactoring"
refactor code for printing configuration and show fb commands
major renaming & refactoring (standard conform naming!)
Refactoring. Rename of bad package name
ROO-3056: Post 1.2.1.RELEASE code refactor and clean up - refactoring before fixing ROO-3071
Refactoring for #31: - Replacing the Criteria class with an interface - Moved almost all implementation details for the criteria functionality into the impl module.
"Renaming some unit tests, minor refactorings."
Refactored: moved classes into packages
Refactoring the architecture of aggregation calculation
refactored model with QualifiedName
Refactoring CompoundFinder -> EntityFinder. Added a small fix
Refactor the test to make the sample works again by not sharing Jersey resources
ROO-2579: Post 1.1.5.RELEASE code refactor and clean up - added imports rather than refer to fully qualified type names
refactoring
Refactored: moved filters to tasks package
"JBRULES-484 refactor the core reteoo code for sinle and composite propagations -code now compiles and manners runs, just incorrectly -also includes the alpha node hashing rewrite."
Some refactoring again
Cosmetic refactoring.
Refactoring having merged pulled-request for #46
refactored the instantiation of the BSF Engine such that it can be reused by any client code that has access to the SiteContext.
ROO-2745: Post 1.2.0.M1 code refactor and clean up - simplified PollingMonitorFileService#scanNotified
Embedding gsalib source and queueJobReport R scripts in the dist and package jars. Moved gsalib and queueJobReport.R to embeddable namespaced locations. Updated packager dependencies/dir to add an @includes which filters the embedded fileset. RScriptExecutor can now JIT compiles the gsalib. RScriptExecutor uses ProcessController and sends the Rscript output to java's stdout when run under -l DEBUG. Refactored ProcessController and IOUtils from Queue to Sting Utils. Added more unit tests to ProcessController along with a utility class to hard stop OutputStreams at a specified byte count. Replaced uses of some IOUtils with Apache Commons IO. ShellJobRunner refactored to use direct ProcessController and now kills jobs on shutdown. Better QGraph responsiveness on shutdown by using Object.wait() instead of Thread.sleep().
Refactored the activity engine. Added support for float activity values
Refactored JDOModelProcessor.
MONDRIAN: Support for user-defined functions (UDFs). Refactor the function sub-system to make this possible.
continue refactoring of clientCustAction - refactoring of createClient - as first step create set of methods for extracting action form data that is passed to client constructor
"Added support for generating endpoint config using component-util plugin, added integration tests, refactored unit tests, cleaned-up generated code"
[Refactor] Removed some duplicate classes
refactor to use Predicate in place of Filter
SONAR-4748 Refactoring of new TempFolder component
Added a test class for Validated mode. Start to refactor the Esper engine init in the discovery proxy.
First working version of Jangaroo IDEA plugins for IDEA 9. Had to refactor Maven import and packaging for Web apps. TODO: Jangaroo Maven import should update IDEA artefacts with Jangaroo compiler output elements automatically.
refactor breadcrumb code into new breadcrumb helper class
Refactor: entity constructor  replace specific entity meta data with entity meta data
System refactoring: changed group id from com.dreamoval.motech to org.motechproject.mobile. Note: Partial commit due to network issues: May break build.
"A little refactoring.  AeroGear gets a private constructor so it can't be instantiated, and save() will call put/post depending on whether or not the passed object has an ID. (NOTE: right now using very hacky (hardcoded introspection) technique for getting said ID!)"
More on refactoring of stuff from heritrix
refactor Eclipse support and fix a couple of bugs
refactor outline and data view support
Refactor Configuration implementation to be more consistent.
"cleanup, some minor refactoring"
refactor
Refactoring DynamicCheckoutAction
Refactoring
"more refactoring, test adds"
MiniMaven: refactor Coordinate expansion
Create builder for command description; refactor command classes
refactoring for maven phease1.
About to refactor creating of property contexts. Attention: Tests will fail!
Check point console process status work before refactoring to merge AgentStatus functionality into ProcessStatusSet.
"WebServices: Refactored, fixed problems and added assertions to RESTfulTestBase"
Refactor SurveillendService to use SimpleWebTable only and to prepare for load strategies
[ADD] Serialization refactored: new default method 'basex'.
Refactored task factory to delegate creation to a lambda supplier.
The great refactoring part one
CheckIn: Fix bugzilla bug 295207 Refactor data set editor pages' codes[19515]
minor refactoring
Tiny refactoring that will make it easier for Es6ToEs3Converter and Es6ConvertSuper to share code ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=79689295
refactored Bbc schedule updaters to recalculate date range for each execution
refactor package
refactor to new MagicAuthStringService
Added Signavio connector again after refactoring of API (not yet finished completly)
"Add ctrl+click for method declarations - I think I'll leave 'refactoring' until I have added osgi services/references, so I'll know better which components i can reuse :)"
Refactoring : Moving persistence for exchange records in Messaging API
Remove declared UnsupportedEncodingException that is never thrown. Minor refactoring.
refactoring to not be dependent on groovy (its jar alone if 6M big) but on JSR 223 (scripting)
WIP: Started refactored CandidateRenderingService
SEAMREPORTS-10: package refactory on openoffice module
HypermediaFilter refactoring XSLT fixes
Refactor SimpleRuleSetNameMapper to understand the Language prefix.  For example 'basic' is now 'java-basic'.
'Refactoring of HtmlTag + Tests' second part
Add BasicEditor Implementation TODO : Refactoring using @GIn
cleanup and refactoring - stage4
Refactor RegistrationAgreement to repalce it with RegistrationProtocol. Removed all possible references and uses of RegistrationAgreement. Added Alien RegistrationAgreement type.
Fix quality flaw Refactor newClass visit (#830)
"Refactor: changed the way the alumni registration process is made, it is now much simpler and easy, the alumni portal has been changed so that a status of the alumni data is shown and the form fields are no longer mandatory. In the GEP portal was added the possibility to send emails to the alumni chosen. These were some of the major changes."
Bug 814331 - Part 1: refactor InfoCollections into InfoRecord.
Refactoring visitor
SCRUM-460: first draft of autogeneration implementation.  Refactoring (renaming of some existing classes for the sake of consistency) 
small refactorings on the NamingUtil class
"DDF-551 Much refactoring, bst for username password tokens."
"Refactored read only stuff into separate ORCID profile manager, with separate connection pool."
Refactored parsing architecture to enable a compiled parser generator
ROO-2986: Post 1.2.0.RELEASE code refactor and clean up - applied ER cleanup profile
refactoring; eclipse plugin repackaging prior to building with maven;
bigger refactoring which should improve speed and mem usage. fixes #96
refactor to make some internal class available in the non impl package
"XRENDERING-41: Major refactoring of chart macro. * Added time table xy dataset * Added xy plot type * Added date axis and regular time periods * Made it possible to parse tables generated by scripts for data source of type ""xdom"" * Support partial range patterns (some limits may be excluded)"
CAY-926 Refactoring class generator classes (unit test cleanup)
Refactor ProcessInstanceUtil & StartProcessInstanceCmd for extensibility
refactoring
refactoring prior to XPath range query optimization
Refactoring to support moving an enity from one node to another during BaseDataAccessObject.save/saveAll when the partition key changes
refactor buttons api add Resizable and ContextMenu
"Complete rewrite of most of this module -- old one had a bug in parseBefore() and parseAfter() - same/similar interface, now includes several constructors, is based on Calendar instead of ArchiveUtils, is majorly refactored, and does not throw ParseExceptions. The lack of ParseException requires significant slight changes to the rest of the codebase, to remove (woefully inadequate) handling of this exception. Possibly this new version will have performance issues..."
Refactor
Started to refactor code for more natural flow data and a semantic flow.
Refactored MQTT test suite to use parameterized tests and ensure that the various tests are run on the currently supported transport connectors.  
Refactoring of ChatRoomManagerView and dependent classes.  Also added support for multiple channels to connect to upon initial connect
source code refactorings
"-Refactoring: make GenotypeCalculationModel constructors empty so that they don't have to be updated every time we add a new parameter; instead put that logic in the super class's initialize method (making everything protected so that only the factory can access them) -Adding initial version of Multi-sample calculation model.  This still needs much work: it needs to be cleaned up and finished.  Right now, it (purposely) throws a RuntimeException after completing the EM loop."
Refactored filtering mechanism.
major refactoring
"AtlasProperties refactoring stage 2:  - atlas properties storage is abstracted by interface - storage implementations now include db-backed, old-style properties file-backed and composition of the above - storages list is configured through beans context - EF ignore options split to separate methods"
Refactoring DropDownChoiceButton
"Refactor ResultURIConverter and ContextResultURIConverterFactory for easier customization and configuration.   Let major ResultURIConverters implement factory as well,   to 1) eliminate hard-coded ArchivalUrlContextResultURIConverterFactory reference, 2) wrapping with IdentityResultURIConverterFactory unnecessary. Now converterFactory property found in two ReplayRenderer classes should be unnecessary."
refactoring to allow multiple long names
refactor tests for controllers & services
CAMEL-1327 little refactoring of camel-jetty unit tests
Refactored some of the class names in classify package. Added naive bayes classification to classify package.
PLINK-268 refactor all of the permission entity mapping configuration
Implemented API refactoring descriptors Cleanup of flags
PrimitiveProductSubstitution refactore. Bug fixed.
Refactored the core test class into a separate module to further untie things.
"Further work on events. Removed EntityDamageEvent infavor of refactoring it into EntityHealthChangeEvent, lots of formatting fixes, and an InvalidControllerException."
API refactoring
some refactoring
Minor refactor
Refactor Multi Tier Project
Refactored methods to render single UIComponent
refactoring
Origin refactored using WebResource SPARQLEndpointProxyBase separated from SPARQLClient GraphStoreProxyBase separated from GraphStoreClient
"Added more details to pom; Added new test cases, handling of nested tables; refactoring state machine into their own classes for better code org."
"[refactoring] Moved abstract implementation into an internal package, extracted API into an interface"
NXP-12375: refactor Work and WorkManager to allow Redis queuing (wip)
Added validationExpression to attributemetadata Needed to refactor data validation package into it's own module because of dependencies
Refactored to fix dependency conflict issues and to work with Grails 2.0.0.
Refactoring the code to use the new API
More refactoring.
"Refactors person's genders to be a single value gender.  Refactors the notion of ""preferred"" value to apply only to Name, not to Conclusions in general."
refactored to create typed contextspec objects
Javadoc and code refactorings
TEZ-582. Refactor and abstract out VertexManager to enable users to plugin their own logic (bikas)
Refactored AddReviewer and RemoveReviewer logic into gerrit-server
Refactor multiplex and simple channel managers to avoid copy pasted code.
AddScriptInterpreterDialog is called via interface method + refactoring
"Refactoring : Sepraing assertion, correlation and templates object classes in a new project. Creation of a generic persistence project to save and load files used in EasySOA. Removing the persistence classes remaining in the messaging project."
Code refactoring of JobProgression
"Bug 369333 - Implement method requires files to be saved, and other assorted refactoring fixes."
[GSCOLLECT-1187] Refactor memory tests for immutable collections into separate 0 to 10 and 0 to 100 tests
started refactoring tesseract module
In the right way for finishing the engine refactoring.
token stream filtering refactoring
Acceptance test refactoring.
Some code refactoring in the default I/O reactor impls
MOAR refactoring: separated basic LinkedDataResource code from JAX-RS code
Refactored to Maven directory structure
Refactoring CMT
fix mail sender error and refactor code
Refactored readProject into the Project class and implemented the -project option for the new GUI.  This addresses sourceforge issue [ 1921399 ] -project option not supported.
refactoring - abstracting some methods from their callers
Refactoring of JML generation related utility functionality to promote reuse
Refactoring
"Refactor the it-test-core module to be dedicated to integration tests. In fact, it is aiming to gather both the integration tests and the long-running tests. Now the integration tests run with the maven profile ci; this profile is used by hudson and it is unset by default"
refactor test and testapp to class specific test app classes
refactor java packaging to prepare maven release
Service Refactoring
#NAME?
Refactor GitRepositoryManager to be an interface
Moved all org.opennms.netmgt.config classes into the same package. Fixed some compile errors that result from this refactoring.
Small refactoring and code formating change to make the class easier to read and understand.
"#157 refactoring, adding ParameterAssignment Freemarker template and using it."
refactor setParents to be made of two methods
"Revert ""Model refactoring"""
Class name refactored
Refactored synchronization
refactor heartbeat module
"RESOLVED - issue SPR-6779: imported @Configuration classes do not get enhanced and fail to satisfy scoping requirements refactoring, polishing."
Added LastDisconnect in the whois informations. Some function refactoring and optimization.
refactored the packages
"refactor, Junit4 integration test, test support classes. Prepare to convert to DAO DB access"
"[#1177] Add SQL Console module to jOOQ - Code refactored to allow evolutions (breakpoints, remote execution, filters, etc.)"
#JC-1361 Refactoring of tests and fixing javadocs
refactored package names
Refactor code for allocating previously unscheduled elements
minor refactoring of pinging
Optimize and refactor showEditOrder()
"Refactor notion of hub stops, especially in transfer pattern computation."
refactored the Exchange/Message API to remove Headers (it was just a pain for end users) and moved that API into Exchange and Message
"Refactoring, javadoc"
Fix bug in PropDivXYZ + refactor TwoBucketPropagationEngine
Issue 102 - refactoring fit test suite
bug 199149 - Manifest highlighting needed in other PDE refactoring areas
"#943 - Refactor internals - Performance tweak / tidy for WhoCreated, WhoModified on OneToMany connections. #942"
PAXURL-29 some larger offline refactorings. Not finalized.
refactored private helper methods that make assertions about node types in JsonEditor
"Moved ""host"" from the Client.call() signature into the Request object. Refactored async listeners"
upgrade of jcr-support: - libraries for JCA support for JackRabbit - better example with local and jca transactions - refactored OpenSessionInView filter/interceptor so they don't have to be subclassed anymore (only a SessionHolderProvider implementation is needed now) - query support
Even deeper in the haze of refactoring.
unit test improvements and refactoring
ISIS-1194: minor refactors to findInstances ...
Refactor Handler for abtest & Bug fix
major refactoring
Refactored multiple attrs to handle NULL vs empty
refactor
Refactores instance type as a preparation for the new instance description interface
refactorings
Refactoring of the ThrowableProxy class.
refactor the model service
[OPENENGSB-3407] refactor code to make the change more apparent
refactor
Renamed according to recent refactoring discussion: SetOfX -> XSet
ROO-2986: Post 1.2.0.RELEASE code refactor and clean up - renamed a command availability method to not expose implementation
"Refactor to use more sophisticated event system. Allows for custom events, no need to use a central event handler (Listeners are added to an event itself), and very fast"
#NAME?
Refactoring GUI
"HIVE-186. Refactor code to use a single graph, nodeprocessor, dispatcher and rule abstraction. (Ashish Thusoo via zshao)"
Refactored and cleaned up the scheduler javascript code.
refactored dialect tests into own packages
More refactoring of the org.eclipse.ecf.example.collab plugin
TrackMate_: WIP: major refactoring
refactoring the LoginServlet to a RequestHandler in order to have the Vaadin Session available
Removed several unused fields after the refactoring
Refactored
"org.eclipse.cdt.core 	Added some trace statements to CompleteParseASTFactory.   	Cleaned up usage of Enum.getValue() wrt encapsulation of enumerator value.   	Refactored CompleteParseASTFactory for correctness and abstraction.  	Added preliminary IProblem support to CompleteParseASTFactory.   	Added (commented out unfortunately) assertions into CompleteParseASTFactory.  	Updated IASTUsingDeclaration to return an Iterator for declarations mapped rather than just a single declaration.  "
[MOD] Long-overdue refactoring to clarify package structure   (let's hope that won't break your branches)
Refactored
SONAR-2975 refactor the activerecord configuration
"added initializeAndRevert factory method to updating listener, overall code refactorings, added release notes"
bit of refactoring
refactored roundtrip axioms tests to parametrized ones
"refactored the various watcher related modules to use a common ""watcher-"" prefix so its a bit more obvious they are related"
Minor refactoring
"CSPACE-600, preparation for CSPACE-849, and fixed CSPACE-2291. This refactors the bulk of the vocabulary doc handlers into a superclass. Will port these changes to Person, Org, and Location, to simplify the maintenance of these services. Also aligns vocabulary to the other Authority services, to provide a more consistent API. "
refactored test classes
huge log file replay optimizations and refactoring
HIVE-4838 : Refactor MapJoin HashMap code to improve testability and readability (Brock Noland via Ashutosh Chauhan)
Incremental cache warm refactor check-in. Added org entity cache warming.
minor refactor of the Tracer and made it available to the mvn camel:run plugin and the Spring Main via -Dcamel.trace=true or -t respectively
DDF-579: refactoring of Solr Server into platform
refactored some of the package layout for tests for inclusion in the testin utils package
DefaultSVNAuthenticationManager refactoring: added a method to pre-process realm before reading auth file.
Make a little refactor.
"Fixed mp3 playing, refactored to avoid duplicating code."
"A major refactoring of Hive configuration code and testing, using code generation to allow hive configuration stictly by specifying an interface and some metadata via annotations or the like."
"v0.2 refactoring, extracting calculation method still need to get rid of totalScore setter"
refactor batch class names/packages
refactorointia
MIFOS-4385: refactoring of PersonAction
"New JPAMember class to deal with with member resolution/invocation, refactored JPAProducer to use."
ASSIGNED - bug 243578: [xslt][editor] Content Assistance for mode attribute https://bugs.eclipse.org/bugs/show_bug.cgi?id=243578.  Refactored to Factory for assistance
Refactored HasEncounterTag() and HasPatientTag() in FormEntrySession.java
[Qiushi] refactored code according to Yi's suggestion
[MIN] XQuery: minor refactorings
small site service refactor - renaming
"Refactoring the abstract database manager because connecting once and staying connected for the entire life of the manager is not going to work. Part 1 of 2-part commit for fixing LOG4J2-407, LOG4J2-438, LOG4J2-442, LOG4J2-457, and LOG4J2-489."
Refactoring due to the renaming from scope to bundle
"Permission, NamedPermission, TargetedPermission refactoring, JavaDoc updates"
feature #907 sprint4 :   Refactor Suggestion.get javascript method so that it accepts now just an identifier instead of just an array. Code the back button in HTML page to go back to the last page
Renamed InvocatioMatcherTest to ArgumentsMatcherTest Extracted tests for MethodNameMatcher into their own class Refactored MethodNameMatcher tests to use mock Constraint
Refactored ExecutionDelayTest
Refactoring of JTS stuff into extras modules
a bit more of refactoring
Package refactor and Basic Block move
refactoring
chore(engine): adjust DMN engine integration to DMN engine refactoring
"Refactored TVScan to handle scanning of tv show and season directories and contents. EpisodeMatcher is now EpisodeFileMatcher which handles matching an episode from a file/list of files. TVMacher handles the logic for matching season/episodes/ranges to file lists for use with EpisodeMatcher EpisodeMode is now an abstract class. Last season/episode matches are now implemented with EpisodeMatcher so it can take advantage of multi-episode handling. Trakt now supports marking multi-episodes as seen. (If using checkins, the first episode in the file is checked in, and the rest marked seen). Improved NavigableEpisode navigation matching. Reduced the amount of string values being passed around for episode/season numbers. Enforced sorting of season and episode matches as filesystem order cannot be relied upon."
DDF-3184 Refactored OpenSearch Source to be extensible and cleaned up code (#2182)
Refactor bidimap to interface based subpackage
[JSR-356] Refactoring annotated callables to handle any-order rule
XWIKI-4412: Documents in blacklisted spaces shouldn't be displayed in the wikilink dialog search results * Added functional tests Added support for tests using a regular user instead of an admin as all the edit tests do for the moment. Refactored some of the login functions. Fixed formatting.
Refactored to remove duplicates - separated JSON from XML converters
Updated pom to 0.3.0-SNAPSHOT. Refactored version handling to allow arbitrary properties. Verify version compabitibility in Backend
initial refactoring of decode path of dataserver netty
Refactoring
Some refactorings and improvements.
Refactoring and code cleaning
Refactored handleAction() to allow the method lookup magic to be used with non-Swing toolkits.
"[CXF-5311] Initial attempt to introduce some 'safety' into the encryption/decryption process, with more refactoring due for abstract classes"
"switch to CXF (plus several refactorings, see changes.xml for details)"
bunch of refactoring
Renaming / refactoring
refactored config initializations by delegation to ScmSyncStrategies.createInitializationSynchronizedFileset
"Major refactoring of the Ranking modules, and creation of SPIs for ranking builders and transformers. Creation of a RankingPlugin module with new ranking and transformers implementations. Simplification of the RankingAPI module and fit to conventions. Update of the DesktopRanking module with cleaner code and introduction of a RankingUIController and RankingUIModel to manage states. Deletion of the RankingResult mechanism and introduction of RankingEvent and RankingListener interfaces to manages ranking events. Documentation of the API and SPI, ready to be declared stable."
Probably refactor out the DMATransformEngine / Main split next
refactor
Refactored statuses to allow new kind of statuses
REPORT-701 - DataConverter that blanks out data if you don't have an appropriate privilege (refactoring to be a Converter rather than a Formatter)
HBASE-17262 Refactor RpcServer so as to make it extendable and/or pluggable
PointList: refactor the I/O not to require path names
collection.generic.WebDocument -> collection.WebDocument; other minor refactoring.
"huge refactoring of timeseries API and creation of adapter classes, converters and output classes"
refactor vmstatelistener
Refactored class names
Some internal refactoring.
Refactoring and improve close upload stream code
refactor to use FS for export as well
Refactoring : add/delete(River) are now start/stop(River)
Framework refactor
Changed search for bicycle repair man search and added a refactor view to show which files are modified.
"Refactor completion and document hooks, implement selection handlers"
Added javadoc comments and did some refactoring in EmployeeAssignmentBean.
#POULPE-169 refactoring using new visitors; started getting rid of events
lots of refactoring throughout the codebase
Some refactorings to clean up Skype class
Localized Crontab and refactoring
Refactoring.
test(engine): refactor composite history event handler test
[BZ 1069648] First level name refactoring due to logic changes.
Feature #907 : refactoring Rating services - adding new unit test bases
Refactor building of list of reachable branches
#NAME?
EmbryoTracker: refactored the extrama finder classes
"Added queries and filters support, made major refactorings, created the part of documentation"
big refactoring; haxelib metadependencies resolving in maven way; remove predefined plugin dependencies
"#775 - Massive refactoring in order to support i18n enhancements. Refactored Address and deprecated dependency on BLC_COUNTRY and BLC_STATE. The Country entity should now be used only for lookups/filtering. The State entity has been deprecated in favor of a CountrySubdivision, which better models international Country principal subdivisions. Billing/Shipping Addresses can now be international based on the ISOCountry and a stateProvinceRegion subdivision and supports ISO 3166-1 and ISO 3166-2 standardization."
PixEx Refactoring Extract Factories and Strategies
JBRULES-1625: refactoring scheduler API to unify it with CEP clock API
"Refactored JobsConfiguration.java, replaced all YAML parsing with Bukkit's parsing, reduced dependencies"
Lots more refactoring for OF1.5. Also walked through the code and made some improvements.
HIVE-8249: Refactoring SparkPlan and SparkPlanGenerator [Spark Branch] (Chao via Xuefu)
"- Replaced tabs with spaces in UDP - Added -uuid option to UPerf - JDBC now extends Discovery directly rather than FILE_PING. This makes it easier to refactor FILE_PING and all subclasses which access cloud stores - Added OneTimeAddressGenerator - Added IpAddress(String host_port) ctor - FILE_PING: first shot at JGRP-1841 - Removed DumpPingData as contents are now user readable - Correct impl of readAll() and writeAll() in FILE_PING, SWIFT_PING, RACKSPACE_PING and S3_PING - FILE_PING: information is written to file if logical address was not in coord's cache or physical address doesn't match (e.g. joiner has a physical address that's different than the one in the cache) - Added LargeJoinTest - TP: internal thread pool can now be set - Changed version to 3.5.0.Beta8"
Refactor and fill out RxJava adapter tests.
Refactored getCorrespondingResource() to support IAdaptable targets.
selective enablement of refactoring actions depending on text selection
Minor refactor
feature #907 sprint2 :   Implement the adding of a suggestion into a suggestion box. Refactor some stuffs in order to clarify both the business operation and the tests.
refactored: introduced mapping and cinderella services
Refactoring save issue solution
"More refactoring of ParameterNameContextSelector, which is now called PropertyNameContextSelector."
Refactored packages from spec to spec.javaee6
refactor visibility setting for work to make things clear
Refactor ExactCallLogger into a separate class
chore(engine): refactor compensation-specific hacks to common class
Refactoring on various places
TRUNK-5117 Refactor PersonServiceImpl.getPersonAttributeType
Refactor methods into XMLTools and remove API changes
refactored method to reduce complexity
The start of yet another refactoring
first data coverage (int) refactoring
JSFUNIT-139 Refactoring to generate single testsuites and testcases per config item
Refactored the dependency management into the RichFacesVersion enum
"Refactor the SimpleSkeletonMapVisitor, pulling out the List aspect to form SkeletonListVisitor; the ListVisitor now extends this skeleton."
Refactor
1. SqlPredicateTest refactored to use AbstractWorker 2. max age is now a test property
Refactored: removed ConvertEntityToBytes and moved its functionality to GcAwareEntityRepository
A few refactorings in anticipation of more formats that needs some common functionality
Refactoring UI packages
"refactored clustering API, going towards more general one"
Harshit | Small refactoring around form related services.
Application context refactor: Added logic that generates deploy.path. This is cool because it doesn't require us to change properties files when the application context is changed.
major refactoring for new Gremlin foundation.
DocumentContext refactoring
"XWIKI-2568: Continue implementing the new Rendering Architecture   * refactor MacroParameter/MacroParameterClass:     * forgot some ""class"" to ""descriptor"" rename     * change AbstractMacroParameterManager to DefaultMacroParameterManager and use it as tools in place of base class to be able to use it directly in the Macro implementation if needed   * add MacroTransformationContext containing the dom and the current macro block processed"
MOAR refactoring
"Fix some bad formatting, refactor a class name to completely remove the word ""Pojo"" and be more descriptive, add some docs about adding additional sections to an existing module"
ISIS-210: refactoring contributed actions
"Fix JSON serialization, add data plugin, refactor"
Refactor package names
Refactored PermissionHandler.java to commands.PermissionHandler.java.
Refactored all tests that use JTS over to spatial-data
refactor
Refactored all operations to use OperationsParams and GenericOptionsParser. Let operations access command line arguments directly for flexibility
#NAME?
SONARPLUGINS-1391 Refactor the way PHP plugin handles resources
Refactor package to new namespace
minor ParentRunner refactoring
Performed some cleanup and refactoring. I just want to tidy things up before we work more seriously in this package.
KS-2168 : RSS processing refactoring :  - moved most RSS and JCR logic to RSS class - splittled responsibility of feed generation methods - cleaned hierarchy
Refactoring
Refactor: Wii Mote listener and configuration panel moved to emergency-service-sensor
Refactor VanillaComponents for API Access
Refactored SuiteRunnerTest
Refactor Endpoints support.
"DBMaker: refactor, extract nonstatic methods into separate class"
"refactor, fixes, performance upgrades deleted feedback factor"
Refactored GroupManager.
Refactoring.
REFACTORING: FileDetailActivity never more - simplifies transitions and removes bugs in orientation changes
[Core] Refactored the extension mechanism with the Service Provider Interface All extensions now work with the SPI mechanism. They can all be extended by providing the right implementation + META-INF/services file.
Major Refactorings. CentralPublisher created. TransactionLogger becomes an interface with two implementations: PersistentLogger and TransientLogger.
"refactoring a bit tck module,"
Update issue 13 Refactored the JMX monitoring of Axon components.
refactored the validator API again; added first validation rules for beans validator [refs #171]
MODE-2221 Moved the SelfClosingInputStream to the common package and changed it so that it only wraps (and closes) and InputStream. Refactored the binary value classes to make sure any stream returned from a binary value is wrapped into a self closing stream.
Started refactoring ProcessingContext et al
TEIIDDES-1262: Refactored createRequest() and createResponse() from OperationsDetailsPage to ImportWsdlSchemaHandler.
Refactoring for transformation assistants
Refactor
Major refactoring of collections; worked on trec and trecweb; added integration test.
"rename baseurl to baseURI, and refactoring."
Refactor: renamed ofIdProduct in FullProduct.
"Test Case / AS Publisher Refactor!  Inspired by AS7, 10 classes become 2! (still need to delete obsolete classes)"
refactoring package name from org.activemq to org.apache.activemq
Filter-Chain refactor
Start refactoring player movement since floor shifting is getting complicated.
Indices refactoring. Very clear code is our aim.
"GTNMGT-45: Clean up annotations, use @Managed for defining path/address of a resource/operation.            Refactor Mapped/MappedBy usage."
refactoring
Refactored TacIO link parsing and writing for slightly less code redundancy
[CXF-2759] Minor refactorings
"Various: 	* IDE adaptations (see new interface and empty method in PMD, comments requested) 	* Further refactoring of benchmark and processor classes"
minor test code refactoring
Refactoring json factories
"Refactor org.fusesource.jansi.AnsiRenderer.render(String) into a new method org.fusesource.jansi.AnsiRenderer.render(String, Appendable). I want to use this from Log4j."
more documentation and log refactoring
SONAR-5007 continue to refactor rule services
refactored helper to shelper
renamed RefactoringASTAnalyzer to RenameRefactoringASTAnalyzer
Added EntityHub and ContentHub client. Refactored ContentEnhancement client
#JC-370 Uniqueness check refactorings
Refactor preferences in UACA shared proxy
Refactoring
- I had forgotten to refactor the setters as well. :(
Refactoring project layout.
"Bug 416769 - sequence flow extension not permitted - the class hierarchy for Shape and Connection creation was not consistent and did not allow for extension of BPMN2 connection elements (e.g. SequenceFlow). The class hierarachy has been refactored, but may still need another look."
vn refactoring
Javadoc + Refactoring of server-side wrappers methods to use in Functions
refactor recordstore-api.
Refactoring rolled back
Resolve PMD warning - combine if statement. Also refactored to a method to make conditional clearer.
refactor computation package to make clean split between CE and task
More refactoring.
Refactor the uName class
Extracted from `logback-amqp-appender` the module `logback-amqp-common`. Splitted `logback-webapp` module into `logback-webapp-lib` and `logback-amqp-consumer-webapp`. (Plus minor refactorings.)
TURMERIC-1607: refactor the updateAssetAttributes to a Strategy pattern
ACT-755 refactored related content UI
Platform refactor
refactoring: timetable -> timetrack
DROOLS-198 Separate Rete and Phreak -Refactored PropagationContext to factory for rete and phreak implementation
Refactor the Solr search service - Upgrade to Solr 4.0.0 - Paginate the index building - Split out SolrSearchServiceImpl into various files
refactored oaiPrefix to oaiMetadataPrefix
Refactored array handling
Huge refactoring to the network client layer to: - support asynchronous requests - support service messages from server (cluster cfg change + pessimistic tx) - protocol version is sent to the client once connected
Refactor a POH5 Metawidget
Refactor parts of actions to NCPCompat.
Refactoring for improved MVC architecture
vat and amount calculator refactored
Refactored metadata extraction.
"Refactoring of Account into AuthenticationInfo and AuthorizationInfo, and deprecation of AuthorizingAccount for JSEC-105."
refactoring
Refactored maven project provider
unit test refactoring
refactor the package for jcr
Refactor instructions to store individual pieces of data instead of just using an offset into a buffer
another refactoring. many changes.
Refactor file deserializer to improve the assert comprehension.
Refactoring package structure - step 2.
Refactor ResolveMerger
Absurd amounts of refactoring + prepared batch support
Ticket #30: Transform CamelPE into a standalone project  * Refactored module structure to clearly separate mandatory core components from optional addons.  * Split camelpe-jboss into camelpe-jboss and camelpe-hornetq.
Complete refactoring. Now it has many features inspired from google gson. Many tests are pending !
OFC-279 - Perform code review and refactor DataService
test refactorings
Refactored methids and logs for Linkd scheduling
"Refactored ListenerRegistrationProcess class: made includeValue final, splitted process() in processWithKey() and processWithoutKey() and replaced key with null in processWithoutKey() to make it more precise."
refactored CapabilitiesConfiguration to allow programmatic initialization
"ZooClient knows about the backup service port, so that ClusterManager can see it. Also some refactoring regarding parsing of the backup server port"
Rename CycleConfigurationService to CycleService and SimpleXStreamRepositoryConnectorConfigurationManager to CycleServiceXStreamImpl. Depends on the naming refactoring changed SessionUtil and RepositoryConnectorConfigurationManagerImplTest. 
64517: Change Signature Refactoring: Error lable contains '' [refactoring]
Balaji: Refactored ChildBuilderTest
PT-3081: Rebase and refactor.
"Refactored player permissions enum, to make the name suit better"
#DB|Murali|fixed database support and refactored query executor
Reverting changes committed in r12970. * Handling of grace periods in AccountBO.getFeeDates no longer works correctly which results in various problems integrating ongoing financial calculation refactoring work.
DiagnoseTargets refactor
Fixed Cohort builder saveCohort bug Refactored ReportObject service
Refactor awaitility (#2226)
Refactor: remove molgenis-data-semanticsearch and molgenis-data-rest dependency from molgenis-data-import
Re-name directory to match refactored bundle ID.
refactor
Refactored subscription agent to deliver replica instance.
specialShowlet -> speciaWidget jsp path refactored
"refactored model, maximized property is only valid for modules"
Refactored formatter
refactoring
"Validate refactored: Rule-id included in Violation, Violation.Message removed, xls report improved, ..."
"major refactoring: exposed processing via ResourceHandler interface, prefixing vs free new name"
refactor: move Predicate to com.ibm.wala.util
event handling refactor
Refactored PluginLoader
Refactor CollectionColumnMapper into CollectorColumnMapper
refactor
Moved getHashInstance() to FsEntryUtils and refactored the functions in FsEntryUtils to support bulk usage (allows for reuse of byte array and MessageDigest).
HTML-50: HTML Form Entry module needs to support Problem Added / Problem Removed functionality some more refactoring
"fix bug#0014964: In the context menu, each time you move down and back to refactor ""Rename... ""and ""move.."" are multiplied"
refactor insertGenerator to allow for emitting only the values
"Refactoring to remove NodeList, EdgeList and add SubGraph. Edges now have node names, not references to nodes themselves. Updated all samples."
Refactored thesis domain to be independent of external persons and contracts
Refactorings og tester
"added support for RTMPT - see red5.xml for configuration options, runs in separate jetty http server instance continued refactorings of RTMP handler / decoder updated jetty.jar to 6.0.0 beta 10 because beta 7 was not working with multiple server instances"
Preparing for refactored word2vec implementation
Refactor the ListEditorComposite some more. Rename methods to make more sense. Hookup the ManageDependenciesDialog.
[MOD] Some refactoring in the ban command that was unreadable. Corrected a bug with parsing the time. Fixes #304
Refactored Image Download Sources. Added AverageSize for download sources. If cards can't be downloaded from a source you can select another and continue.
rename refactoring
JBRULES-220 Refactor ObjectType to work with Templates -This also involved  refactor Evaluator to use Enums for ValueType and Operator
TIKA-1422 - Fixing build & minor refactory of naming test class
fix a problem introduced by IDE via refactoring
refactoring spring mvc to jsf
Refactoring RestAdapter HTTP request construction.
Improved Remove Unused Declarations refactoring.
Refactored AndroidPulseGenerator into separate objects with single responsibilities. Added TimedPulseGenerator
SONARPLUGINS-127 Create a Sonar Jira Plugin some refactoring to improve code readability
refactored LocationHelpersImpl to use common HMAC-SHA1 signing
refactoring and selenium tests removed
"PLINK-202 introduce PartitionManager interface, move default implementation to impl package, rename StoreFactory to StoreSelector"
massive module refactor
Refactored load() so that model building errors can be better reported within the QTIReadResult Object.
ItEr32S12CUAsignacionGrupoRecursosAPlanificacionItEr31S15: Refactoring AdvancedAllocationController so it accepts allocations for several tasks
Refactoring DeferredGraph to support DeferredNativeCall nodes
refactored packages and renamed jar to be in sync with package refactor
lots of refactoring work...everything is so much cleaner than before
Refactored from /com/google/glassware to /com/mceoin/remindme
Refactoring
DS-3234 : Enable new Flyway 4 option to disable 'clean' by default. Refactor commandline tools so 'test' also reports DB issues.
XWIKI-2844: Rendered XHTML is not validating for images + refactoring
JLANGX-11 refactor aimed to have a consistent naming convention
"TEIIDDES - 408 More refactoring, cleanup, latest 7.0 Teiid integration."
operations refactor and mxbean impl
NSPSUPPORT-108 refactor to prepare for further test data generation
"Refactoring, not using .NET conventions"
"TRUNK-3115: Rename AdministrationService.validateInManualFlushMode, and refactor it and ValidateUtil https://tickets.openmrs.org/browse/TRUNK-3115"
Updated datatables-jsp-ajax sample Added new examples Refactored the whole backend Updated examples with the new available syntax
"Initial cleanup: formatting, rm unnecessary .this, refactoring"
Major package refactoring
Examples packages refactored.
IP Filter refactor
Code quality: Refactoring according to SONAR recommendations
[MRM-1573] refactor to have more generic REST model result.
Refactoring Items
refactor
https://bugs.eclipse.org/bugs/show_bug.cgi?id=355673 - first cut. This is going to involve some more refactoring: abstract CreateFeature and AddFeature class in org.eclipse.bpmn2.modeler.core need to move into org.eclipse.bpmn.modeler.ui plugin to take advantage of common BPMN2 element creation methods in ExtendedPropertiesAdapter.
Major refactor of configuration to be cleaner.  Also updated indexing service to be configurable.
"RESTEASY-694, RESTEASY-879: 1) Refactored validation packages; 2) updated validation docbook."
Added new TextArea Along with some refactoring in TextField
Refactor: Improving test fixture names.
Refactored indexing part of StandardVCFWriter into superclass
Refactored ReportFileReader and LineType to prepare for more complex parsing of report files compared to the previous exercise
Search result are now passed directly; refactorings
Refactoring in order to make the SQL implementation and associated DataSource replaceable.
refactoring for data services with several operations
Refactor javadoc
final step in SVN repository refactoring
XWIKI-4772: Improve typing speed * Changed the DeferredUpdater to use a timer instead of deferred commands. As a consequence the number of updates while the user is typing has decrease. * Introduced a cache mechanism to be used while the editor is updating its state (e.g. the tool bar). * Cached some of the Executable#isEnabled and Executable#isExecuted implementations that are used by multiple classes. As consequence the number of evaluations done on editor state update has decrease. * Changed RichTextArea#getDocument() implementation to avoid useless checks since this is one of the most called methods. * Refactored Executable interface to not depend on the rich text area. As a consequence concrete executables can have access to the rich text area from the start and thus can better cache its state.
refactor dcm2txt
"Major refactor: create OWConfigurationManager, move config methods into it; relates to #26"
#NAME?
Refactor to allow file-based instrumentation command line entry point
refactors and tests
refactored the   org.apache.activemq.util.buffer.* packages to org.fusesource.hawtbuf.* and   org.apache.activemq.protobuf.* packages to org.fusesource.hawtbuf.proto.*
Refactor and rename methods in AbstractUacaProxy
Improved javadocs and simplifications/refactorings for org.eclipse.ecf.presence.ui plugin
"Refactor of the ObjectUtil.format method to extract out specific formatting of each data type, and enforcing a bit more consistency."
Script Editor: a little refactoring for upcoming changes
Added color by category and interactivity support in Radar example chart Also refactor code and fix radar display name
MIFOS-3868: refactor adjust last transaction and creation of savigns activity and transactions without use of persistence classes.
NXP-5612 save refactoring in progress (still no tests done)
renaming and minor refactoring
PageFragments/Metamer: refactor PanelMenu* pageFragments
Refactor: Removed duplicate code from BootupClasses - use generics.
"https://jira.jboss.org/jira/browse/JBIDE-5042 Enhance DnD support in VPE VPE Refactoring in progress. - EditorDomEventListener has been splitted to several listeners (Mozilla*Listener). - MozillaEventAdapter has been introduced (most of the code has been borrowed from former MozillaDomEventListener). - Some refactoring actions have been done (methods and calls moving, removing unnecessary methods and calls)."
"Known working state. Refactored the TestAddress part. Now they are universally pointing to a physical test but do support ""images"" of themselves in one or many containers."
Implemented CurrencyPairs json test adapters test adapters ticker test refactored depth Known Bug: partial depth does not seem to have any effect !!
REFACTORING Renamed Match.isSecondRound to Match.isReverseOf
refactoring
Trimming out old classes/libraries no longer used after refactor
Refactored.
Refactoring services implementation
Make the final switch on console proxy refactoring work. new VNC engine will be in use after this commit
master refactoring of index extension (almost there)
[JENKINS-15156] Refactored fix.
Further integration of the new configuration system + package refactoring
Major refactoring: Separating token parsing from evaluation. Works except for empty foreach constructs.
[#CAM-79] Small refactoring of the link structure in dtos.
refactor main activity generator
"Finished implementing vision. Now refactoring client, pushed code that won't compile because I need to backup."
refactoring adjust for strike
"Refactoring: extracted Reader and Writer classes, added some logging"
minor refactoring
#NAME?
"Refactoring. For some reason, I've committed to branch 2.1, which should have gone to the trunk."
bug 255629 - [StatusHandling]WorkbenchStatusDialog needs refactoring
"Issue #260 - ProfilePictureSource type added, page picture changed, user picture refactoring, unittests added"
"Added data measured in Horazdovice, Blatna and Masarykovo Gymnasium. Some refactoring."
api_refactor: refactor autoscale apis
updated: thesis-files refactored: ProgressListenerRunnable
Finished testing updateHook (renamed it to writeHook) and made some refactoring
- fix bug in GCC refactoring - add iterator to IntVar - fix non-determinism in Sum#build
refactor location information to have a Source class
refactored ifblock builder tests
Big Refactoring to support other services than OAuth Comments in classes 
"fixing bug in Java web client: reading time as long, and minor refactoring"
doing some refactor
"INTERMEDIATE REFACTOR: split this class out into more classes, but hopefully this will soon be followed by a removal of most of this code, as the underlying *SearchResult*, WaybackRequest and Resource objects get better accessors."
1) Code ranges and folds moved to binary files 2) Refactored Unicode encoding and encoding lists 3) First bunch of transcoding work
Refactored a bit for better reuse in code
Refactoring: Changed structure of robotstxt package Added Useragent in Http Client
"refactorted oracle db test into base db test class easily runnable across different databases, and added a sql server test, fixes #SUITE-355"
Velocity refactoring: First GWT test passes again!
Some minor refactoring
- Summary: Refactoring code to move all loadExpression methods into chart item API class.(#27698)
"MAHOUT-479: This commit refactors Cluster to inherit from Model<VectorWritable> instead of AbstractCluster which now inherits just Cluster. The existing Dirichlet models also now inherit from Cluster, simplifying the use of generics and cleaning up a lot of the code."
Refactor to code to interfaces
refactor
Refactor listeners to use a future.
Resolves Bug 332743 - Refactor Gemini-JPA Initialization for updates to EclipseLink.
* Further refactorings * Communication report
Refactored placeholder replacement. Implemented some unit tests.
"work in progress, add missing tests, refactor"
#NAME?
further refactoring of IDL tests. it now possible to run javac from the testcase to check if the generated java files are valid
Restore SetRepository classes (accidentally deleted in refactor). Add a new limit/offet option to CommunityService.findAll()
refactor code and fix some bug
Small refactoring of HTTP/2 upgrade code.
refactored search-result extraction code and added easy accessor for highlights in search hits - resolves #63
#109 refactoring the packages of a few classes from europeana.util to europeana.controller.util
flattened/refactored the maven facade service
Refactored how Host service is provided to a ParallelizableJob.
Refactored: made RestService protected and moved all functionality to LeanEntity.
Did some refactoring in AssignSortableBean.
PreviewUI: Refactored code in PreviewSettingsTopComponent.
refactoring default os logic into a public method to make it available to the Maven plugin
Removed AudioItem and refactored Say verb to have only a single Ssml item
"Refactoring, fix nested edit and add image check/uncheck"
more tests and refactoring for the data-binding module
Refactor outside of cdt.internal
Refactored call detectors
refactored admin and reviewer logic
"Minor refactoring, fixed javadocs, added package-info javadocs."
SCRUM-810: refactoring. iPad preview with both landscape and portrait orientations
"refactor snapshot, move existing snapshot code into its own snapshotstrategy"
Refactor
refactor package name
bug 347943 - [server] Refactor Git URIs to handle refs with '/' in their names https://bugs.eclipse.org/bugs/show_bug.cgi?id=347943
Refactoring.
[JENKINS036871] Refactoring the API for protocols to make it symmetric within remoting
Partial work on refactoring the courses portlet data model
refactored async job processing in cloudstack
refactoring to create attributes definition with converters
refactoring make streaming extension work again
Refactor FailureModel to use interfaces
consumer details service refactoring
"support for eternal games, and some refactoring"
refactoring
Refactored.
Significant refactoring of the Haplotype Caller to handle problems with GGA.  The main fix is that we now maintain a mapping from 'original' allele to 'Smith-Waterman-based' allele so that we no longer need to do a (buggy) matching throughout the calling process.
"Refactored the ""embeddable"" security API that's now part of UberFire VFS"
Fixed Javscript file not detected in BIRT report design (T 43031)      Added serialization of Included Scripts in libraries. Refactored the code so it can share codes with the serialization of Included Resources.
REFACTOR: moved Exceptions to own sub package
refactored tests
Refactored.  Set size to 2^30+1 for byte[] test. Set netbeans size to -J-Xms4096m -J-Xmx5120m.
"o Split surefire booter in 2. Refactoring only, no functional change."
refactoring
Refactoring.
STS-3646: Refactoring. Use extensions for common functions.
Refactored db test cases to integration tests. Fixed resource loading in RouteBuilder tests.
vcms-sdk refactoring - CDI-based implementation
Refactoring drift db set up/tear down code into common base class
refactoring to improve extensibility
Improved tests + some minor refactoring.
"Added classes for listResource handling (SFA v3) added conversion of xml-rpc structures to sfa-pojos  renamed SFAInteractor_v2 to v3 since its implementing GeniApi v3 did some refactoring on package names modified listresources_request.xml to match an v3 request (""list of credenital structs"")"
ROO-2745: Post 1.2.0.M1 code refactor and clean up - deprecated static MemberFindingUtils methods in favour of instance methods
Major refactor of the config code regarding construction of services
biojava3-protmod: code refactoring: add StructureAtomLinkage; package structure change
refactoring: extracted MavenSnapshotMetadata from (Local+Remote)SnapshotMetadata
MessageHandler support implemented. WebSocketEndpointImpl refactored and renamed to EndpointWrapper. Client API is being used correctly.
refactoring
refactor test class
RUBY-2: Refactoring of contra-indications.
Refactor menus.
refactoring to separate conduits
updated core after refactoring in geom
small refactoring
Merge with refactor branch
"SB-638: Refactor the strongbox-storage-* modules' structure and introduce new modules, as necessary"
"Adding support to batch mail sending, refactoring TemplateMail and pushing next version to 1.2.0"
Jobs refactoring (part ?)
Initial background package refactoring
First commit after refactoring.
Refactored helper methods.
Refactor the plug-in architecture to better support future evolutions
Refactoring ComplexBlock to TileEntity
"First checkin of new content-inspection package, designed to refactor SpamFilter functions into a series of stacked Inspector classes that can analyze and score content in multiple ways, including for spam detection. See the package.html and Javadocs for detailed descriptions on the API design. These features will be used by ANY and ALL ActionBeans to allow for spam filtering via the @SpamProtect annotation and SpamProtect JSP tag. Three notable limitations of this checkin: 1) no CAPTCHA integration yet; 2) Comment.jsp is temporarily broken; 3) User registration not hooked into content inspection just yet. All will be addressed soon."
"Various world generation tweaks, fixes and refactoring"
TemplatesProvider refactoring
"Added ConditionMatcher implementation. Refactored code, changed TermMatcher constructor to build from EngineContext instead of global variables map."
refactor JSCH provider so that all common code resides in ssh-common
Added calls recommenders to extdoc view. Minor refactorings moving methods to utility classes.
#1197 - Refactor how @Transactional methods internally managed
"CSPACE-5728: Refactoring to make it easier to override and extend, via subclasses, the updating of values in CollectionObject records, from values retrieved from the most recent Movement record."
Tx part code refactoring: MoSmpp & splittinng tests into own projects
refactoring
Refactor read and execute out of run
refactoring schema
Refactor and work in progress on DHNS Filtering implementation.
More refactoring to reduce architecture tangles
Informer Core refactoring
HV-274 Refactoring - Moved the tests into a test sub-package
refactor the geolocation asset into separate latitude/longitude in the DB
Refactor index.
refactor(jboss): renaming packages & classes
"removed unused commands, some refactoring"
Refactored/fixed subsetting of function calls
"Refactoring the LibvirtComputingResource   - Adding LibvirtCreateVolumeFromSnapshotCommandWrapper, LibvirtFenceCommandWrapper and LibvirtSecurityGroupRulesCommandWrapper   - 6 unit tests added   - KVM hypervisor plugin with 17.2% coverage"
some refactoring
Refactored ColumnViewer
Refactoring infra for collecting dependent instances -> DependentContext.
"refactor Tree into its own class, then traverse it recursively"
Forge 2.0 Wizards refactored to use CommandController
refactorIOStreams
#NAME?
refactor Role's constructor.
"[MOD] JavaDoc texts revised, refactorings"
Refactoring table composite into separate class
Refactoring TreeBuilder structure.
continued refactoring of gyroscope impls
refactored test driver.
Minor refactor of author helper methods for PrivateMessage.
Progress on Bio-Formats Importer refactoring.
"Analyse: Java-analyse process improved. Classes refactored. Less associations are produced now.  Furthermore, the famix creation classes improved and extended: methods are selected now on the basis of their signature (parameter and argument tyeps are compared); method calls in the first substring of association to are now detected too, also when they are part of a super class."
"Finished ID and IDREF handling. Ids and references in XML are working again. Velocity refactoring almost finished. Still some broken tests, but nothing dramatic."
Refactored lavender filter initialization
Refactoring cash-flow functions
Standalone Atlas: Second round of commits for refactoring.  Somehow I managed to miss most of the changes out and delete some tests - d'oh!
DROOLS-1607 Internal refactor removing KnowledgeBase in preparation for DROOLS-1583 (#1293)
"[updated] scene.ui, refactoring and javadoc. Some minor API updates for sanity and consistency. Made all fields private and exposed them where appropriate. [updated] Scaling, renamed fit to fill and fill to fit. This will cause interesting and fun to track down bugs for all, I'm really sorry but I had the names backwards! [renamed] Cullable, moved to out of scene2d.ui since it is useful in group. [renamed] ComboBox to SelectBox, this bothered me forever. Better to rename it now than to add an actual combo box in the future. [updated] ScrollPane, refactored to more closely match FlickScrollPane. [updated] SplitPane, refactored layout. TextField, Widget, WidgetGroup, and Window have mostly escaped refactoring because I'm fucking tired of doing it at the moment!"
"refactored Hits into the org.neo4j.index.impl.lucene package namespace, to ensure it is included and avoid conflicts with lucene itself (which had dropped Hits)"
refactoring metadatarecord;
Refactor RandomWeightedSelection to RandomSelector to allow the use of a single interface
More refactoring of chain-reduce spike
"refactored dialoghelper, added license header"
"I am doing a massive refactoring, to make the structure a bit more understandable. Need to commit to continue this."
ISIS-1243: minor refactoring in EntityPage to reuse utility method in ObjectAdapter.Util.
Refactor ScannerSuppliers to keep track of both all known checks and enabled checks.  This lets us separate knowledge of all known checks from the initial list of built-in checks in BuiltInCheckerSuppliers.
"Refactor a bit, add F solution"
EST-296: refactoring of the calculation process to be more explicit.
refactor: move restx.config from core to factory
HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon
EST-638: Refactor index module as an example for the coding convention; Move IndexService to separate package
Bunch of refactoring and document improvements.
ROO-2745: Post 1.2.0.M1 code refactor and clean up - simplfied DoD classes
Bug #1980 : continuing the refactoring of the DAO
Add documentation about E-mail sending functionality. Update JUnit version. Code refactoring. Imports optimizations. Changes to UI of E-mail Templates page. New values for i18n. Validations of E-mail functionality.
Refactoring
Refactored (I)SessionStoreListener and (I)SessionStoreEvent
"ISIS-209, ISIS-188: improving back-button handling in html viewer - don't clear out actionMap on every request (plus refactoring/reformatting tidy up); changing some tests using JMock to use the JUnit 2.6 rule mockery; removing some unused methods"
Refactor - moved VampireKnightToken to shared area
Refactored EphemeralFileSystemAbstraction.
Some refactoring to make it possible to override LDSP e.g. to do switching between multiple live data servers
Javadoc + Refactoring of server-side wrappers methods to use in Functions
Refactored RexPro with MsgPack.
#5: Added comprehensive configuration report to log. Added improvements and additional data to JMX bean. Name refactorings.
"Fixed announcer, item transfer and some refactoring"
Refactor WS api
Slight refactor and cleanup
mock refactor
Refactoring (package names)
JBPM-5157 - Refactoring of LDAPUserGroupCallbackImpl and LDAPUserInfoImpl (#483)
refactoring date series builder
Refactored AuthorizationInfo to match AuthenticationInfo more closely.  Enhanced Ldap realm support.
Unit test refactoring
Refactor class MyWatchesTable out of MyWatchedProjectsScreen
[refactored] logic of graph node colorization
refactor distribution to support purchaser #inv-38 Fixed
"Implement ClassPath class, refactor analysis code to use new ClassPath functionality, start adding verification for individual opcodes"
Refactored image classes to separate responsibilities and reduce complexity.
Maven project refactoring
element type refactoring ... this is sluggish in the bindings view because it's doing error checking after every keystroke and it looks like the cache is getting blown too
"HEMERA-119: Implemented first version of tags and tag connector, finished refactoring to remove ""currentPath"" and renamed ""originalNodeId"" to ""nodeId"", removed some unnecessary old classes, renamed DAO classes"
refactored Avatar persistence to use JCRSessionManager easily. Introduced the notion of JCRTask as the basic unit of work for JCR operations

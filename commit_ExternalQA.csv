Commit message
finalized functionality and tests
"* In alignment-to-text, tsv or tsv-single-base output there was a column for score but no header. added header. * For the QueueObjectPool, made a more generic interface and added a Null version that always creates new objects. This can be used for performance comparisons. * Added another layer of object abstraction GobySamRecord which contains one or more GobySamSegment. Things that exist for the entire read are stored in this object and the parser returns a GobySamRecord instead of a List<GobySamSegment>. This is easier to understand and models the data better. * Discovered a minor error with GobySamSegment sequence variation generation * Added tests from seq-var to verify seqvar during clipping, indels, etc. Make sure gsnap->sam->GobySamParser gets the same output as gsnap->compact-alignment->display-sequence-variations which enabled me to find one more issue with gsnap->compact-alignment seqvar generation related to soft clipping."
Introduced Miner level child injector for miner based singletons and other sub-application super-device functionality
Improve performance of MessageSource condition
"Added ""delete candidate sessions"" functionality"
"changing CreatedResources to be a Map indexed by key to make lookup easier based on creatable definition includes: - updates to all the tests and samples affected by this - tested and passing - some cleanups of the affected samples for better efficiency, simplicity and coding patterns - simplification of the CreatedResourcesImpl"
improve logging to capture some simple rules and thresholds to indicate performance issues
Fix the ted bug 18097 : Performance enhancement:  DTE should use ArchiveEntryInputStream.read() when reading only one byte data from report document
Fix #792 : JUnit 4.12 compatibility
"change performance testcase, add proxool/tomcat-jdbc"
Implement cascading functionality for triggers
releng: Make use of Tycho POM-less functionality
"Revert back to the package name ""org.kohsuke.stapler"" to avoid backward compatibility issues"
Bug 268916: Support genReport -help to show help document in command line Bug 268915: [Accessibility]Provide engine supported optionName/configName list in genReport help
performance enhance
Improved Keyboard stability and performance (#1239)
rename parameters for readability
"Removed performance monitor as it is unneeded and didn't work, Made a Game interface for the API, Added a chat perm"
"Moving functionality to client. Some parts are in stub form, some are not done yet. Xml parsing is in flux"
added Join operations to Criteria; modifications to increase JPA performance; upgraded to latest eclipselink - rjrjr
the processOccurence method is splitted into two for better modularity.
"Extracted the administrative methods from the services and into a separate ""ServiceAdministrator"" component.  The use of composition rather than inheritance allows each service to reuse the service management functionality without having to extend a base class.  "
moving compatibility tests to another project so they can be shared
Started cleaning up modules - introduced a 'lang' module for shared functionality.  This might even make its way back into core - just flushing out things at the moment.
CLEREZZA-511: improving performance without changing the public api as the issue suggests
Fixed a performance bottleneck in adding ids to RelIdArray
"[CXF-3675] Add a classloader based map of DocumentBuilder instances in DOMUtils to improve performances when building documents. This also restores the former behaviour, with the DocumentBuilder being cached in DOMUtils."
"Refactored messy UI setup into named methods, renamed variables, general cleanup for readability."
SCHEMA-37. Adds stability annotations to all classes.
Bug 298671 Implement enough compatibility to bring up a simple view
Performance improvements:  - Memoized MathUtil's cumulative binomial probability function.  - Reduced the default size of the read name map in reduced reads and handle its resets more efficiently.
improved performance of builder by removing child injector
"refactored cycle API, added RenderInfo to provide standard set of available views for plug-ins, changed the content-type definition by using a mixin interface to add extensibility to the set of standard content-types, refactored API according to these changes, adapted the UI/REST component accordingly"
"Make bitcoinSerialize() return a copy by default, provide an unsafeBitcoinSerialize() method for high performance applications that are willing to deal with the extra API complexity."
"Fixed problem with Axis reusability and priorities, included UML diagrams."
"RHQ-1315 - subsystem view for alert definitions,  implemented all functionality listed in corresponding description of JIRA; "
Java 7 source compatibility updates
Allow user add throughput to performance charts
ISIS-109: fixes for json viewer (compatibility with spec)
"Get password history data gui and backend service/dao functionality added, get password access audit log gui and backend service/dao functionality added, added ability to change max history on password edit screen, password search panel grid action is double click cell again, upgraded to Ext GWT 2.1.0 (dialog box field focus now works!), tested integration, fixed bug in edit permissions access level combo box gui caused by Ext GWT upgrade."
Removes untyped App.get() method to avoid performance problems in large databases due to unsupported relationship indexing in Neo4j.
removed ambiguous relations finder since its functionality overlaps with the SKOS S27 integrity condition already checked by SkosReferenceIntegrityChecker
Bug 298671 Implement enough compatibility to bring up a simple view
Start with testing activiti 5 unit tests with activiti 6 engine for backwards compatibility
ISIS-993: improving the usability of the schema; minor stuff for wicket components
"Factored out ""center"" functionality from showFrameCentered functions"
Adding let inlining test cases to show difference in behavior between var and let. Part of ES6 compatibility for Inline Type Aliases (full functionality + tests not yet complete).
Minor Change: Transfer second cycle applications to other period functionality
[DS-247] [DS-243] [DSB-37] extend functionality of ContextUtil so request object can be used as parameter.
Performance optimizations for Genotype field decoding for GT field
"HIVE-15076: Improve scalability of LDAP authentication provider group filter (Illya Yalovyy, reviewed by Aihua Xu, Naveen Gangam)"
Added functionality to capture execution information about the methods under test. This is useful for generating new reports.
use person POJO for reflection performance showcase
"[MONDRIAN-2390] - Poor performance when accessing RolapSchemaPool from many threads - replace ""synchronized"" sections with ReentrantReadWriteLock-embraced - increase the amount of cycles in the concurrency test to make it more exhaustive - add one more test case"
refactoring for better readability
1) Added server.http.parallelthreads= entry to marybase.config to set the number of parallel http request handler threads. 2) Commented marytts.server.http.handleClientRequest code. 3) Changed random request id generation into consecutive id generation for http server. 4) Fixed beQuiet functionality in MaryHttpClient.
Improve JAX-RS stability and move to WildFly 9
Refs #100331 Add test for ContentName print (toString) performance.  Fix name of parse performance test.  Fix parse performace so no overflow if it gets faster.
"Fixed missing IdManager, improved delete performance."
Added logic to determine the proper twiML file for different use cases. Added abstract Request class for common Request functionality.
Completed test for verifying correct functionality of distributed cache.
Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (inline of MeasurementUtil functionality to MeasurementOperator)
Restored functionality of DrugGroup. There are no related JUnit tests yet.
- Summary: [Enhancement] problems with usability of chart designer
Added a compatibility mode for the PHP framework Symfony.
#NAME?
"implement the previous functionality, where a separate refreshChildren method gets called only for the browsed folder, and not for the parent nodes."
Fully implements core ModelService functionality
DNA-178: Completed basic functionality to  retrieve nodes and properties
Performance improvement :  client rest api change
"Revert ""Mercurial Integration is now done with java native library hg4j. Refactoring to clean up the code and to allow easy adoption of other java native libraries in the future. Some unit tests added and classes moved to dedicated packages for better maintainability"""
[WFLY-8561] fixing test for @RunAs functionality which was ported from eap5 testsuite (JBPAPP-7897)
"Split the loader functionality in 3 classes - now need to sort the tests out to match (not TDD, but quicker this way)"
"more rep functionality, fixes for mandelbrot"
Add goog.reflect.objectProperty as a first class primitive with the same functionality as JSCompiler_renameProperty.
Remove write functionality from Source.
Trying to fix incompatibility of handlings png on Windows and Mac (second try)
1) Compatibility with Java 1.7_17 2) Better build.xml - now dist includes necessary resources and javadoc and CLI.
YARN-2980. Move health check script related functionality to hadoop-common (Varun Saxena via aw)
applied patch from Marc Portier to improve extensibility of DefaultApplicaitonWindow/LifecycleAdvisor
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer (Add support for detection of JSF 1.x request headers)
The performance enhancements may conflict with some setting methods. Uses the ActivityStackListener to clear the cache flag.
"#10, #17, #18 Improved test coverage, fixed test cases and bugs revealed by tests, increased performance and improved visitors"
Dramastically increase performance Maybe fix low tps :O
move compatibility checker exception for making it compatible with exomiser!
DRILL-4328: Fix backward compatibility regression caused by DRILL-4198
WICKET-4028 Improve PageInstanceMapper#getCompatibilityScore() to return higher value if the request starts with 'wicket/page'
MAHOUT-706 use reusable TokenStream in Lucene for performance
"Reassembled the ""startlistfile"" code - the pieces were in there for the most part. However, using a small startlistfile within an iterative process (other than at the very end of one) is liable to lead to inefficiency downstream with -incrementaldocvectors, as currently we depend upon there being perfect alignment between the generate docvectors.bin and the documents in the Lucene index - i.e. we will end up with many zero vectors on disk. "
CAMEL-4417 Move AsnycProcessorTypeConverter.convert method to processor while keeping the old one for compatibility
refactor to prepare performance improvements
Rename directory to better reflect functionality.
"add pojo metadata caching, optimized sql2o performance test, underscore to camel case performance tests"
did not like the fact that the method was getting big; refactored my logic to a private method to increase readability
 Bug 233643 -  API builder performance bad for incremental build
"Bug 353240 [Compatibility] IWorkbenchWindow's openPage(String, IAdaptable) is not implemented correctly"
MassiveCore - Performance improvement for command argument readers.
Added some performance testing
"Refactoring of DSS and Definition, for performance"
Minor performance improvements.
cleanup; added functionality to select on collection associated fields - rjrjr
trying to make twidere work with identi.ca #235 improved L compatibility
Separated C++ and C Physical Implementations to provide Andrew more flexibility. Added ICPPASTTemplateId and implementation.
BUg 495095 - Disable a test that tests functionality that isn't implemented yet
seperated functionality to make the update procedure easier to understand
Improve Collect Earth performances
Issue #851: Initial implementation of batch-push functionality
"Add in a simple builder for SQL strings, and use it to implement some additional functionality in EntityCollectionImpl"
Fixes #205 Performance issue when an entity has a lot of attachments
Renamed performance test. Introduced AbstractModule to support more concise configuration code.
performance improved version of VirtualBandOp
repackaged integration tests into non-specific web package for simplicity and removed AbstractTest since it is not used
[MRM-1283] moved browseGroup() functionality over to metadata repository
Renamed GraphSail property default.namespace --> default-namespace for compatibility with OrientDB. OrientGraphSailTest now passes. Other lightweight changes.
improved the performance of Bytecode and ConstPool.  Added clone() to Bytecode.
#NAME?
move directories for maven compatibility; also formatting
"EST-794: removed RendererAbstract, inlining functionality to RendererForFreemarker subclass."
HADOOP-2471 Add reading/writing MapFile to PerformanceEvaluation suite
"slight cleanup, reformatting for better readability"
Refactoring of JML test execution functionality
changes for readability
Improved the performance for clearing reference attributes when the attribute they reference is deleted.
introduced the Graph class to improve the OO-ness of the model classes. This should also improve testability a bit.
Split responsabilities between CompatibilitySuite and TestContext
"HBASE-528 table 'does not exist' when it does -Changed HStore and Memcache methods for computing closest row at or before -Added more test cases for verifying this functionality -Simplified the getClosestRowBefore interface so that it does not take timestamps -Noted that getClosestRowBefore is assumed to work correctly ONLY on tables where updates are always with ascending timestamps (method is still not a part of HTable interface, so not available to clients)"
Removing PrimitiveValueType and merging its functionality with the ValueType. The multivalue and hierarchy flags are removed and ListValueType and PathValueType are created instead. To the ListValueType and PathValueType it is possible to give as extra 'typeParams' the ValueType that should be put in the List or Path.
HBASE-1364 [performance] Distributed splitting of regionserver commit logs
Improved communicate protocol performance by keeping socket and database connection alive
"Added hook for progress reports on, and hooks for user configurability of file reading"
Refactor event store benchmark and benchmark tracking performance as well
"topic: code enhanced type: functionality module: other description: MDEditor - switched to dictionaries, updated export"
Concept charts visualization 1. The box plot outliers functionality is added 2. Removing not used code 3. Adding the heat map concept code.
fix typo in PerformanceNode class name
Tools developed for multiresolution signal processing using the available filter classes/functions. Filter classes expanded with minor additional functionality.
Performance: Claim Lookup
Changes to the performance tests using JMeter. Added load test for the JPA store.
JBIDE-9588 Poor performance of XHTML template validation
SLE-127 Bad performance while handling Markers
Fix really a lot of bugs; rewrite for performance
Refactoring - pushed property mgmt functionality into new superclass now shared by the report renderers
separate benchmarks from correctness tests which are now part of a junit test suite integrated into the build system
[MRM-1025] remove database cleanup consumers and centralise functionality in RepositoryListener Note: this commit requires that a following work item be completed to add a service for scanning metadata and cleaning up if a file is erased. Workflow will be documented first.
Issue 176: size can now test compatibility with images; refactored vcloud config logic; updated to support latest bluelock
"1.0 release * New data sources:   - Grayscale heightmaps as source for elevations   - Arbitrary images as source for ground textures   - Custom OSM XML Files as source for ground textures * Full Support for the European Cities DLC.   The building style of existing maps can be changed in the Metadata-Editor * Performance of OpenStreetMap-Downloads improved, the hard download limits   were removed * Windows-Executable (.exe-file) * Program Update Notifications * Cache Janitor: removes deprecated and broken files from the cache * Drastically improved error handling * Useful new options in the settings menu (log file, updates, cache janitor, ...) * Many small improvements and lots of bugfixes, see CHANGELOG.md"
RESOLVED - issue RF-10987: Improve GraphValidator performance  https://issues.jboss.org/browse/RF-10987
Bug 476074 - [region] performance issue with large number of service listeners and service events
Refactoring to separate Bugzilla/Github/Jira functionality
ACT-746: added functionality to involve people and give them custom roles
Fix tracker bug 94614 : BIRT: performance issue with function dataRequestSessionImpl.getColumnValueSet.
Added fetching recipient id functionality/tests based on commit author from a build for private messages.
moved citizens compatibility classes into QuesterNpcs
Bug #1261: Extract method createTab with common functionality for each tab
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: support of referenced groups
BATCHADM-72: Improve chunking traceability - add sequence info to chunks - Improve logging in ChunkMessageChannelItemWriter - Add mysql/h2/derby properties to integration project - Add drop scripts necessary for persistent databases
added EntityManagerImpl.persist(Collection<Object> objColl) - the main advantage over persist(Object obj) is that   a single batch mutation will be used for performance
"CSPACE-3175 Refactored *Resource classes to use functionality in two main base classes: ResourceBase, and SecurityResourceBase. Also, changed how some responses are now response code 400, BAD_REQUEST, where previously they were incorrectly sent as server error, 500.  See extensive notes here: http://issues.collectionspace.org/browse/CSPACE-3175 "
Refactor to improve readability of comparisons
Included 0.7 API. Note that there is a lot to implement. This just includes the API and changes for non-code-breaking functionality for the impl/unit tests/examples.
added new performance data
Account status functionality implemented in M2 style. TestEditStatusAction is added.
SAK-1756 -- Merged sections-dev-branch into trunk.  Section Info and SectionAwareness now rely on (and decorate) the framework's generic grouping functionality.
"fixes, refactor parser - TODO performance check"
[MOD] ArrayList replaced with ObjList [FIX] GUI: drag'n'drop functionality fixed [MOD] local session support for JAX-RX added
"Added some JCR-related functionality, including a code that monitors the rule sets in a repository and keeps them in sync with the RuleSet instances in a RuleService.  Also created the concept of an ExecutionContext to encapsulate some commonly-needed functionality (including tools and the session factory)."
"Refactor demos for readability, better comments and configuration"
HBASE-694 HStore.rowAtOrBeforeFromMapFile() fails to locate the row if # of mapfiles >= 2 -Added new test to TestGet2 to highlight multi-storefile getClosestBefore issue -Removed erroneous return that caused 2nd and subsequent mapfiles to be skipped -Split HStore#rowKeyAtOrBeforeFromMapfile into two sub-methods for readability
Added the functionality required for BZ#1011904 - Support multiple config files.
moves default response functionality to AbstractMockOperation - removes listener call no one listens to
Functionality extended to include HUSACCT in build process. Furthermore refactoring improvement of the batch process + removal of password protection (since it did not work).
Fixed Term delete api incompatibility with runway gis universal requirements.
improve performance of type qualifier analysis shrink debugging output for type qualifier analysis
"Removed destructive ""all"" view from all ResourceProviders, added ""doNotSort"" flag when only UUID query is executed in SearchCommand, added session timeout to Jetty configuration, some other performance optimizations and code cleanup."
"Foundation + Further work on parsing action-based extension points. + Introduction of CommandAction, which emulates the IAction interface using command-based managers + Moved the uncategorized category down to CommandManager from CommandService + Renamed all the IHandlerState related objects to be IState.  The ""handler"" qualifier, while indicating the primary use case, is an unnecessary qualification. + Made the state identifier a more integral part of how state works.  The id is used to identify which piece of state applies in a particular scenario.  This is used to distinguish ""name"" and ""description"" label state. + Refactored some common functionality related to property change listeners from Action to a new class AbstractAction. + Extracted some label parsing utilities (related to mnemonics and accelerators) from Action to LegacyActionTools. + Extracted some common constants into CommonCommandPersistence. + Created SelectionEnablerExpression to wrap the legacy SelectionEnabler framework. + Started work on a proxy for pulldown delegates."
Restore compatibility with 1.8
<STORY 248-SOLR plugin> Update and delete functionality for Mongo and SOLR Entities
Added additional flexibility to fetching SCOP domains from an AtomCache.
BZ-1060747 - IBM WAS 8.5 compatibility: splitting kie-services-client into kie-services-client and kie-services-jaxb (cherry picked from commit ba362d120c000ce13aadbb9e632359f3db48c753)
Added statistics endpoint. Refactoring of functionality into own packages
Bug 233643 API builder performance bad for incremental build
AbstractBlobTransformer uses template pattern to encapsulate from implementations blob 'delete' functionality.
"WICKET-3730 extremely slow performance in development mode WICKET-3731 PackageResourceReference.lookupStream(IResourceStreamLocator, Locale, String, String) creates wrong PackageResourceReference.StreamInfo"
"Fix performance regresssion introduced by using InetSocketAddress getHostName() Patch provided by Scott Harrington, improved upon by Kris Jurka"
"o Refactored API to move from tree to graph, thereby allowing to fix CPU/memory performance"
Compatibility with SQ 6.1
"implemented registry and unregistry of apns api, also started implementing the send to device functionality (#14)"
Traceability has no API
"Much less mockup in the updatetracker, and better performance for the summa integration"
Added new map functionality. Performed deep tests and fixes
"SONARPLUGINS-3168, SONARPLUGINS-3423 Compatibility with multi-language plugins and no more compute file hashes as it is already done by the core."
created new functionality to phd candidacy process to allow associate any active candidacy from student 
Bug 86013 Performance failures should be written to separate log
further refactorings to performance test components
Lucene Directory performance regression test (trunk)
Rewrite the ImmutableSortedMultiset implementation for improved efficiency and reduced memory consumption. From Louis: http://codereview.appspot.com/6203097/ ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=30340746
Add SessionComponent for better compatibility with old releases. XmppConnection has better documentetation. Better release name: 0.6.0 Release Candidate 1
"v0.87 fixed bugs, added compatibility with Mean Admins, added command alias /mobarena, bigger auto-generated arena"
ACT-628 fixing backwards compatibility of deprecated expressions type
use AWT toolkit to read images instead of ImageIO for better performance
Some new tests added and functionality for detection of errors related to events and observers.
Keep the original signature intact for backward compatibility
https://jira.jboss.org/jira/browse/JBIDE-3628 - Plugins should be .jar's not directories for efficiency sake to make Plug-ins were converted to jars: jsf jsf.ui jst.web jst.web.ui jst.web.tiles jst.web.tiles.ui jst.jsp common.projecttemplates
Refactored and improved performance of validator generator
use File creation date for better accuracy
Added @ContextParameterObserver event functionality with examples
Refactor of XMPPChatClient for generality and simplicity
CARE #85: Performance test engine
"* code cleanups + Tcl keyword, parser extensibility"
implemented functionality for send_on_all_interfaces and send_interfaces
Adding and Fixing functionality
Use the FringeTile multi-image functionality to allow different base tilesets to simultaneously fringe upon another base.
GWT remote poller app refactor for performance and testing
- kie-remote rest API documentation/readability (REST/JAX-RS annotation clean up)
User can touch the clusterized diffs on result picture and they are fading. Need to be improve the layout and add saving functionality.
Performance optimization of annotation processing/handling
Brought in old JUnit4ClassRunner for compatibility. Renamed new JUnit4ClassRunner to BlockJUnit4ClassRunner.
Added Queries.returns(). Renamed all() to any(). Excluded SourceConsumer from source tracing. Added performance check for indexing. Set version # to 1.0rc1.
Method name change to avoid confusion with visibility: hidden / Don't create empty inline boxes after all (inline layout will ignore them anyway) / Robustness improvements to generated content (treat display: table/table row groups/table-row as regular block boxes)
Rename MulticastMain and PerformanceMain to PerfTest and PerfTestMulti.
MEDIUM: Fixed old code generator because it is still needed for a while. Backward compatibility shall be maintained
Adding functionality to upgrade/downgrade version of webdriver
Add ThreadLocal cache to proxies to improve performance
Deprecating old api key classes and moving functionality over to new api key resources.
224364: re-enable fix after performance improvements from Markus
Major performance update
"Add a new window in time for event occurrences: the year, so that this new functionality provided by the Almanach EJB can be directly used for rendering event occurrences in the current year instead of using the overloaded getListRecurrentEvent() method. It stays the AlmanachPdfGenerator to update with this new feature. In todo: add a message waiting during the load of occurrences in a given period (weekly, monthly or yearly)"
- Summary: [Chart usability spec#2.5]UI refinement of Axis title/label
XLCLOUD-216 user creation functionality for selected account [vcms-gui]
completed missing functionality from idmconsole example
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Add inherit for the HTML syntax * Provide safety to make the test not applicable if no parser or renderer exists for the syntax
seperated functionality to make the update procedure easier to understand
ISIS-1411: removing DomainObjectContainerResolve helper class (inlining its functionality); removing inner interfaces only implemented by PersistenceSession.
Performance tuning
MiniMaven: refactor a bit for readability
CLOUDSTACK-10053: Performance improvement: caching of NuageVsp ID
"Merge compatibility APIs from `-hadoop{1,2}` branches."
CHANGED: Reduced the number of File objects held in memory by FileFactory. CHANGED: Added an additional check when saving a file to payload directory of a bag to make sure it is actually saved there. NEW: Added a StopWatch class for measuring time elapsed between its start and stop method calls. Provides basic performance metrics for tasks that use it. NEW: ThreadPoolService now accepts cleanup tasks that are executed during @PreDestroy method. Updated TagFilesService to schedule a write all tag files to disk during cleanup. UPDATED: All storage event tasks to use StopWatch class.
"Improved parsing, usability and oo design"
"JavaCL: - complete rewrite of CLBuffer genericity to unify with the BridJ port : CLBuffer<DoubleBuffer> is now CLBuffer<Double>, and CLBuffer.read/write/map are no longer strongly typed (it is implicitely typed with Buffer subclasses for compatibility with existing code). The BridJ port will be favoured, and its read/write/map methods use typed Pointer<T>. - complete rewrite of UJMP Matrix implementation, using coding style borrowed from ScalaCL"
[DROOLS-1026] improve equals/hashCode performances for all rete nodes
http://bugs.sakaiproject.org/jira/browse/SAK-11481 Removing new findResources method since it would be a huge performance problem.
Cleanup test for JUnit 4 compatibility.
Preload backgrounds during population overview gen. Extract common preload functionality into sps-gamelib. Move preloader UI elements into sps-gamelib. Cleanup unpackaged game source code files.
extracted functionality removed unnecessary working directory code replaced with environment user.dir property added javadocs
Move SynchronizationAdapter to support and add compatibility stub
"Issue #4873 , methods to gather WAL and full checkpoint performance  were added."
improved digits parse performance
Enhanced tool palette composition functionality. Added Morph Activity/Gateway features.
Improved configuration options; improved efficiency to algorithms; minor bug fixes
"New performance tests for rename package, move compilation unit and move static members"
"Been working offline for too long. However, all the work submitted by this long change list is documented in the jobs attached. As far as I can tell right now, only two jobs remain unfinished: * JOO-5: At least managed to complement ""this."" for private members and for public members declared in the same file. * JOO-30: Implemented ""as"" and function syntax type cast in the runtime for interfaces only (and with bad performance, as the cast() call is completely obsolete). Also worked on support for get and set functions: these are only supported syntactically, and so far converted to normal functions named get$<member> and set$<member>. Not yet decided on a real solution."
Supported bound data columns and added backward compatibility.
Turnning invoke method performance
"Reduced synchronization in GenericObjectPool, GenericKeyedObjectPool.  Factory method activations within synchronized blocks were causing performance problems in DBCP and other applications where factory methods could block. "
[PLAT-5246] Adding support for legal entity information in calculators and curve construction. Backwards compatibility is ensured by using the short name meta data filter where necessary
Create node functionality complete
Added Paranamer.lookupParameterNamesForMethod(Method) functionality
Fixed a permissions-related issue in the upload files functionality where a user was being authorised for a null domain object.
"MAHOUT-767 Improve RowSimilarityJob performance, threshold integration"
"[BACKLOG-4709] - Small changes in platform to improve performance - UserSettingService    - replace keySet() + get() combination with entrySet()    - remove useless object instantiation    - remove useless explicit map.remove() - AbstractSpringPentahoObjectFactory    - add logger.isDebugEnabled()    - remove useless non-null validation - OrderedApplicationEventMulticaster    - replace ArrayList with array for faster sorting    - extract stateless Comparator to a final field to avoid useless instantiation    - replace new Integer.compareTo() with Integer.compare()    - add tests - RoleAuthorizationPolicy    - create ArrayLists of exact size - JcrRepositoryFileAclUtils    - iterate through List, not Set - DefaultPermissionConversionHelper    - replace indexOf("":"") with indexOf(':') as it is more effective - AuditConnection    - change the order: first try to obtain a connection and only then sleep"
"reverting d99cec54, still maintain Jdk6 compatibility"
Query has lost fluid language and improved usability.
added separate states for separate downloaders to give us more flexibility
"code reorganization, moved files around to better seperate functionality"
Issue #1698. Map of temporary and new rids is returned and IndentiyChangedEvent implementation was reverted because of possible performance issues.
[DOXIA-184] make parser emit tableRows() correctly. Refactor some private methods for code readability.
"Update for Sprite class. There is much less difference from Sprite2 now. Performance is just a tiny bit better than Sprite2 on desktop and G1, and the same on Droid."
Static utility class renamed for JUnit compatibility.
Changed implementation of adding/removing/getting relationships on a node in cache layer. Previous implementation worked with sets but that had a performance problem  when doing small modifications to a node (create adding or removing a few  relationships). This could be noticed when node had many relationships (copy on  write on largers sets was just to slow). 
Prismtech JAC#429: performance enhancements
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Inline JDBCMetaDataConfiguration#getMetadata() in JDBCMetaDataConfiguration#readFromJDBC()
"[BEAM-1184] - Reprojection dialog does not remember values (""Output Parameters"") [BEAM-1183] - Improve reprojection UI usability"
Cache constructors - especially caching the newConstructorForSerialization from ReflectionFactory brings huge performance improvement
Build RTrees in the background for efficiency
DRILL-4053: Reduce metadata cache file size. Save a merged schema instead of repeating for every row group. Save maxValue in a row group iff minVal equals maxVal and null otherwise. Maintain backward compatibility with older version. This closes #254
Backwards compatibility + ability to define exceptions outside of the common package.
Added jenabean functionality
bundle manager no longer needed because the ProtegeLauncher is taking over his functionality.
Updated pambu functionality to provide some administration functions.
More backward compatibility fix
"Created an example dANN brain - 10x10 input nodes, 20x20 compute node, 10x10x output node. This is just to test the java3d performance and doesn't represent a realistic nci-brain still. A simpler brain than the nci example would be more appropriate for real-time visualization of the connections between the neurons..."
Adding support for WebApp mobile functionality.
"Enhanced ""walk"" override functionality in TreeWalker"
Further improve performance of MinimizeConditions.
"Performance optimizations for overload resolution, bug 268383."
version 1.2.6: tuning GenericTypeahead performance
"minor changes to co-occurrence base spot selector (documentation, performance, etc.)"
#NAME?
BZ-982643 - Executing basic processes takes much longer comparing to jbpm5 - improved human task performance
Moved functionality to save preview images to ReplaySaver as well.
move more functionality to overridable LnPrint instead of non-overridable Ln
"adjusting design to holo, stability for account setup"
Add a new tool to split a line with a line Fix multilinestring edition tool Change the name of the classes SplitByLine and SplitByPoint to improve the readability.
cleaner UI and functionality
"- Big refactor of the QuickJournal:   - Move it to it's own package org.apache.activemq.store.quick   - Brought in all the latest JournalPersistenceAdaptor enhancements   - It now uses the AsyncDataManager as the Journal implemenation which has better read performance   - Instead of forcing all PersistenceAdaptors to support external references, we now move all the message reference methods to a new set of interface class (MesageReferenceAdaptor)   - Enhanced a few Kaha container classes so that they take advantage of Generics   - Added a Kaha based MesageReferenceAdaptor impementation   - Strategy for deleting old journal log files is now in place so that disk space can be reclaimed."
JBEPP-683: Performance improvements in PicketLink IDM integration
Scalability plots are not using WorkloadTaskData any more
"MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of ""parseOptimizationData"" method to ""protected"" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step)."
improved performance
Issue 82: Aim for consistent configuration and keep backwards compatibility
OpenShift tests stability fixes and maintanance (#1497)
"HIVE-10821 Beeline-CLI: Implement CLI source command using Beeline functionality(Ferdinand Xu, Reviewed By Zhang Xuefu and Chinna Rao Lalam)"
"Latest row filtering model, with find functionality"
"Move Site.Id and Page.Id inner classes to their own classes. Remove Ids utility class, and provide most functionality in SiteId object itself. Remove Queries class, and make builder only option to create Site and Page queries."
implemented commit functionality
topic: bug fix type: minor module: commons description: Fixed followup error for stability.
Remove unused scanners from MetaDataScanner to improve performance
"[MOD] Performance: GUI, Editor, Search. Closes #1483"
Split unit test class into two files to better separate testing of different functionality. Also made three tests a little bit more comprehensive.
Bug 354538 - [Contributions] [Compatibility] Window menus and toolbars leaked after having been closed
TURMERIC-1414: fixed bug in performance data table and consumer view
[BZ-1276311] improve PatternBuilder performances
full support for JPA 2.0 PersistenceUnitInfo SPI (for compatibility with Hibernate 3.5 beta 3; SPR-6408)
updated the rule generator and performance test so I can run tests with 2k rules and 1 to 3 conditions per rule.
Bug 443572 - [Performance] Option to report UI delay as error
Massive refactoring of classic IO HTTP data receiver and transmitter classes resulting in 4 fold performance improvement on byte and line read operations
Move layer functionality to GeneralLayerCommon in epd-common
XWIKI-4469: Move officeimporter plugin functionality to wysiwyg top-level menu.
implemented search functionality
better test stability
"[GSCOLLECT-1560] Add memory performance tests for Scala immutable list, set, map and Ctrie"
Updated camel-test-blueprint to 2.15.6 without updating the rest of Camel. This will give us the bugfixes from Camel 2.15 without any compatibility breakages.
"Continued work on moratorium and schedule generation. * Added unit tests and refactored existing tests for improved readability * Fixed a bug in schedule-generation for recurrence greater than 1 (e.g., bi-weekly schedules)"
Improved the fast-forward efficiency by keeping the file open.
OFC-1368 - Improve species import tool performance
Performance: attribute caching
Fixed bug with document viewing functionality [#7 state:fixed responsible:none] [#109 state:fixed responsible:none] [#163 state:fixed responsible:none]
HBASE-536 Remove MiniDFS startup from MiniHBaseCluster -Changed MiniHBaseCluster to not start up a MiniDFS -Changed HBaseClusterTestCase to do the work of starting up a MiniDFS. -Added pre and post setup method to HBaseClusterTestCase so you can control what happen before MiniHBaseCluster is booted up -Converted AbstractMergeTestCase to be a HBaseClusterTestCase -Converted any test that used a raw MIniDFS or MiniHBaseCluster to use HBaseClusterTestCase instead -Split TestTimestamp into two tests - one for clientside (now in o.a.h.h.client) and one for serverside (o.a.h.h.regionserver) -Merged in Stack's changes to make bin/hbase have hadoop jars first on the classpath -Updated PerformanceEvaluation (in --miniCluster mode) to start up a DFS first -Fixed a bug in BaseScanner that would have allowed NPEs to be generated
"add Weighting.calcMillis to allow more flexibility, fixes #393"
Refactoring mostly for readability (and small performance improvement)
Improved efficiency for the chunk unload queue due to observers
Refactor SAGU for easier testability
"Further refactor the new RightService, putting compatibility matters in the XWikiCachingRightService front-end"
More runtime performance improvements
performance measurements
"Fixed an exception caused by FileExplorer on Client app startup. Added DcStorage JUnit. Fixed Jersey Server and client versions. Added download as zip to dropbox access page JSP and bag files JSP page. Updated JUpload functionality to use DcStorage. Created basic XML web service that adds accepts URLs, downloads files and adds to bag. Added tabs to bag files JSP page."
"* Cleanup of MemberWorker and some related classes. * Pulled TestContextImpl, WorkerCommandRequestProcessor and WorkerSocketProcessor out of MemberWorker. * Hid thread of PerformanceMonitor within class. Renamed PerformanceMonitor to WorkerPerformanceMonitor. WorkerPerformanceMonitor is now lazily started at first run command and stopped after run phase. So performance.txt files don't contain empty data from warmup and verify phases anymore. Prevented creation of files for tests without performance monitoring."
"Comitting alpha-3 release of IcedJava.  General stability is much improved, speed is better, and the threading model has been rethought."
Implemented deodex functionality
"Merged in performance testing framework, pulled and refactored out of regression test framework"
"code review comments, minor functionality simplifications and refactorings"
ISPN-6127 Minor Stream Performance tweaks
Transferred more functionality to MiniParser
Bug 303778 [Compatibility] NPE while using the Java outline
Made WorkerPerformanceMonitor restartable for serial test execution.
TEIID-346 adding in a compatibility layer with 5.5 connectors.
"Added logic to tests to select right kind of key depending on rpm version (see https://bugzilla.redhat.com/show_bug.cgi?id=436812). Temporarily removed creating signed changes file (logic provided by DebianSigner) from DebPackager. debsign, the executable used to achieve this functionality *requires* user interaction."
Bitstamp: New functionality: get Bitcoin deposit address
#135:  Comments InheritanceCompatibilityChecker
parsing performance tunning
Raster functionality now loading goeTiff and publishing as layer on geoserver
Remove use of URI from ModuleLoader/LoaderNames for GWT compatibility.
fixing bug #2054 Changing scope of some transactional methods in KmeliaBmEJB due to an incompatibility with JPA during emission of notifications
"Moves parameter scanning functionality to the stagegroups endpoint, removes stages/{stage}/parameters"
<BR>Patch for Dave Daoust <BR>Modified Scanner Performance by  <BR>1. Moved ScannerContext sentinal to ContextStack  <BR>2. Delay Stringizing macro parameter until needed  <BR>3. Removed the sentinal from the scanner constructor
"a bit more realistic test using actual metadata objects and testing getting the key from the key table, and we can actually directly influence performance by monkeying in xml files for sql..ibatis is pretty slick"
JBIDE-20594 Performance: XmlContextImpl.getNameSpaces(int) creates a lot of HashMap objects
revert CAL10NError Cal10nError file rename for bw compatibility
Performance
Add uncomment functionality to the SQL console
"Cleaning up exception wrapping to allow better reporting of errors to end users. Also implementing the beginnings of a new error reporter, and bumping the version of plexus-container-default up to 1.0-alpha-33-SNAPSHOT to improve the accessibility to ClassRealm info for ComponentLookupException."
DocumentationDef : refactor HTML parsing : add validation checks : improve API usability : surface errors in examples.app in DEV mode
Refactoring of functionality used to code generate Java specific methods
Added Union Find algorithms: 1) Weighted Quick Union Added performance test for 1) Quick Find vs Quick Union vs Weighted Quick Union
[MIFOS-3761] Added fields for CashFlow Details and related functionality.
performance boost
Moved lifecyle package to environment.se. Removed unnecessary functionality from deplyment (imported from Seam) to simplify.
"Compatibility for BKC network comps, turned if-block into lookup table"
SAK-11797: Performance improvement for parsing unrecognised entities
Even more performance issues fixed. I do not guarantee there are no bugs in this build ;). Status of what else needs to be done will be assessed later on. What has changed:
"Refactor to make use of Java NIO.2, also we now buffer I/O to improve performance"
https://bugs.eclipse.org/bugs/show_bug.cgi?id=370871 - added LabelFeature functionality to all BPMN elements that have labels
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#readFromJDBC()
fixed entry listener backward binary-compatibility issue
Bug 469763 - DSF-GDB top-level service classes for better extensibility
Large amount of syntax/performance improvements
"Removed updater, fixed ProtocolLib compatibility issue, fixed ProximityHider giving bad block meta"
Checkin:Project 1175: BRS performance is unacceptably slow when creating a report design using datamart datasource[24890]
Moved timestampDedup Functionality to LineBufferingIterator from SummaryBlockIterator LocationUpdater can be disabled using checkInterval of 0
Basic functionality for ProxyRule implemented
"PAXSB-14 basic functionality (bundles, resources, resource processor)"
Performance boost by integrating the factorial expression inside the unary one.
add another example... MemoryPool... this uses the typeName functionality to make the attribute names more unique.
[PLAT-5023] Retrofitted zip functionality implemented in DatabaseDumpWriter into RegressionIO framework. Updated golden copy dump framework to use this
"implementing new functionality ChangePassword, add denied page design and error 404 page design"
Further refactoring of Relay functionality
Improved ticketmonster stability & removed usage of deprecated methods
"Changed to be a proper class instead of just static methods, for greater extensibility."
"Teiid 773 -  changed the following: -  the testcase will not use system property to pass in overrides/additions to the loaded config.properties file.   Now will use an addProperty() method provided on the abstract testcase that will apply the properties per test. -  remove the  datasource_mapping.xml.    There is no need to distinquish between xa and nonxa connector types.    The connector type will be specified in the connection.properties file. -  if using the -DuserDataSources property to control datasource, it will imply order based on whats specified.    The config.properties file will now map the model to order (i.e., pm1:1), where this order determines which datasource it will correspond to based on the userDataSources property.    This mapping is done so that the nightly testing process can control which datasources are being used and can ensure retestability."
disable csv test to fix instability
moving fast on graniteit-maven-plugin functionality
Put all GLDebugger functionality inside GLProfiler
feat(externalTask): add functionality to set taks prio on process
Moved LDAPrintTopics to utils added functionality to read DictionaryVectorizer dictionary.file-* 
Check in changes for offers/promotions functionality
Bug 446571 - Many settings not configurable via config.ini (including osgi.compatibility.bootdelegation)
Cleaned up Block API for greater flexibility
typeinfo extensibility
"More performance tweaks, and a change to handle transitions between service dates--using OBA methods for layover and frequency-based block indices."
"Ticket #1146 - Initial refactoring of ReportService.  Mainly addition of method comments and the deprecation of separate create / update methods in favor of a single new save method.  Removal of unused ""getCurrentEvaluationContext"" functionality.  Addition of ""Run Report"" privilege."
* Moved FrontendsFragment functionality to MainMenuFramgment including frontend auto discovery.
add dcm4chee-arc-assembly (build binary distribution package) fix JDBC3 incompatibility: use separate connection for SQL queries during interation of ResultSet
"fixed #349, performance issue after merging #116"
quick fix for hllp in-memory efficiency. heap was being allocated for normal mode even while in sparse mode
BOOKKEEPER-1078: Local BookKeeper enhancements for testability
"added color change functionality, manually setting min and max of a single graph, all graphs are initialized white, eventually this will be random. A ton of code that really shouldnt be there is in the GraphMenu.java and will be eventually moved."
[MODELLO-157] o moved xml.namespace and xml.schemaLocation attributes from class element to model o added compatibility code to not fail when reading a model with attributes in class instead of model
Fixed backward compatibility for XPath assertions: SOAP-2096
Performance instrumentation
"Improved performance of iteration, specially for the GraphDB side."
REF Move EntityCorrectness.java to WS Util module
"compare with actual ""new"" performance"
"Firt, untested cut of stage-and-publish functionality"
renamed a method to make more clear its functionality
"Reviewed by tlerios, Colin & Will per ENG-508 1. Added 2 new constructors to ExpectedFailure. one default and another one that accepts I18NBoundMessage. Updated all usages of the single arg constructor with a null value, to prevent compilation errors. 2. Added a mechanism to abstract out instrument specific functionality into pluggable classes. All the instrument functions in this checkin are abstracted out except for XML serialization, which requires the specific Instrument classes to be included in an annotation. 3. Added new option position APIs & option symbol <=> option root lookup APIs to the client. 4. Added pluggable mechanism to extract & insert instrument from / into FIX messages 5. Updated PositionKeyComparator to use new pluggable mechanism for position comparison 6. Updated orderloader to support options 7. Removed OptionSymbolSplitterMessageModifier & its unit test as it doesn't make sense for options any more. 8. Updated ORS to save the fields for options for position computation. Added implementations for the new client services. 9. Updated FIXConverter and RequestHandler to add a particular FIX field to the message only if it is supported for the specific message. 10. Added OptionRootUnderlyingMap abstraction to the ORS for carrying out option symbol to option root symbol mapping. 11. Fixed an issue in the suggestions view that was preventing the photon strategy perspective from opening up."
Bug 341887 - Tests for new functionality in Equinox console
Assure the Java5 compatibility of Core component: - removed ODatabaseRecordUtils class since was unused - removed JAXB dependency from OEntryConfiguration class
Add batch mutator for performance
improve extensibility of milestone groups and fix some milestone extension issues
Update Karaf provisioner to be more consistent with the rest of the project     - Use KarafLaunchUtils for important functionality instead of embedding it     - Rename methods to be more consistent with the rest of the project
Allow registering multiple hits with a PerformanceCounter
- Add queue feature to support encoding as UnbackedRecord rather than JSON encoded byte arrays. - Add additional tool to TestUtils to get a set of unbacked records from example logical plan - Fix for DRILL-61: Correcting the offset of the carryover values - Add test for DRILL-61 bug - Fix for DRILL-66: Add support for nullCollation: <first | last> - Add tests for DRILL-66 functionality
Support choices & groups in JAXB module. Commit performance suite (still needs some cleanup).
[NGRINDER-600] Upgrade bootstrap.  - Fix IE10 compatibility issues. - Modify ftl file names.
SAK-14727: Calendar Summary is not aware of new merge functionality in My Workspace Schedule tool
Improved extensibility by using ServiceLoader
"Code clean, performance improvements"
FEATURE: login functionality re-builded.
[ 1651882 ] BugResolutions improved - Patch 03 This is the last of 3 main patches for BugResolutions. With this patch we improved the functionality of the existing Resolutions and added one new Resolution:
XE-562 :  Add web content accessibility validation to the functional tests
 r3641@ham:  adridg | 2007-10-05 09:20:02 +0200  Spacing in expression  r3642@ham:  adridg | 2007-10-05 09:41:20 +0200  Reindent entire file according to coding style http://java.sun.com/docs/codeconv/html/CodeConventions.doc3.html#262 ; add some javadoc; factor out some bits into private methods to improve readability.    TODO: handle multi-line messages in text/plain formatting.  TODO: handle XML escaping in text/xml formatting.  
introduce additional extensibility layer
"rename the cache check method to provide a better name, fix a remove check in one of the chache implementations. add a recreation check for better performance in this case. Remove log INFO output"
A couple of optimizations regarding read performance:
Implement backwards compatibility
"Improve modularity, remove dependence on rio-start"
core: remove compatibility version from IrsBaseVDSCommandParameters
testing namespace functionality
Restore compile time compatibility with pcells
Added GForce functionality
More functionality in the js+ws stuff.
"BSM-24: Use most critical reduction key severity from IpServices instead of both, otherwise the Threshold functionality will return incorrect values"
"Revert ""Small updates."" as it breaks the cursor functionality severly."
#NAME?
Removed single schema assumptions from clean functionality
Cache effective capabilities to improve lookup performance
Improved bit-wise operations and tests' readability.
Bug 298671 Implement enough compatibility to bring up a simple view
Add compatibility test suite for (un)marshallers. refs #23
Redirect all calls to getTypeId and getData to library-defined methods for future compatibility
Pause/resume functionality
On my way to NIO. Checking in to save the work. OMG. That's a lot of work. I need to touch every single class. And if I can gain performance is unclear.
relationships performance
did a lot of refactoring to make increase performance and useability
Split out parsing of header and payload. This is useful for high-performance programs that don't always need to parse the payload. Patch from shadders (CLA agreement pending).
Major decision tree performance improvements and pre quantising decsion tree.
EST-532:added group (string) functionality
Small update to the TestHelper New Project Model-related functionality
XE-1366: Setup regression performance testing
Added remove TARDIS functionality
rpm: Readability improvements to tests.
Fixed a bug introduced by a change in how the validators were looked up. Not sure why I made the original change to begin with but the functionality has been been reverted to its previous behavior.
EPD-43: Updated past-track functionality and added it to epd-ship
- Added SmartUpdate capability (currently default for replace method of DataSync Integration job) - added delete as publish method - added ability to optionally set a different app token for destination domain of Port Job (functionality to allow porting to a destination domain where app token is different from source app token). NOTE: only works when running port jobs in command line mode (headlessly) - added some test cases
fix robot 2.9 output compatibility
Add apply offers functionality for Fulfillment Group
"Bug 510982 - Add ""Explain incompatibility"" Quick Fix for ""Add default method"" problem"
HBASE-1669 need dynamic extensibility of HBaseRPC code maps and interface lists
Pretty Java translator before midListFunctionality
"Moved AsyncCallback performance benchmark to ""performance"" package."
Fixed inefficiency and congestion in input channels.
"move merge patient functionality into data management directory, other improvements"
Changed to use a relay listening interface for more flexibility
Candidacy Documents Upload Functionality
"WYRL: ok, looks like canonicalisation is now working and that #272 is fixed.  Unfortunately, performance is becoming a very serious issue."
Refactoring Open Ons testing functionality
Small readability changes
"Implemented CreeperPower, FoodLevelChanged and improved both PlayerPortal (now EntityPortal for more flexibility) and PigZap. Also adjusted javadocs more to style. Will work further on events tomorrow :P."
Clean up main frame and move common functionality to MainFrameCommon
move vertex functionality into GraphContainer temporarily
Changed behaviour in LuceneIndex#query() to not throw exception if modifications has been made since it goes against common sense. Instead it strives to return correct answers if not specifically told not to do that (via QueryContext#tradeCorrectnessForSpeed()).
Various API usability changes
#35 Horrible performance in case of thousands of deleted files
SONAR-4321 Fix performance issue on Issues search SQL
Improve performance of get-recent-evaluations call
Bug 299385 -  [UI] clean up errors in compatibility workbench Changes to support the extended compat layer
MClient functionality moved to waazdoh.client.WClient.
"Introduced BeerBuilder to improve readability of the tests and repository stub used for demonstrating concept of ""walking skeleton"" together with Arquillian. Introduced Bean Validation."
XWIKI-7240: Add support for special versions qualifiers and version ranges TODO: * a way to merge version constraints * a way to check different versions constrains compatibility
RF-11453: Implemented autocompleting functionality in the select component
"CAMEL-1355 added some nice literate HTML based test cases (which can be used to power an embedded browser too, like Selenium!) to test the functionality of the web application (as opposed to the REST API)  using WebDriver"
Improve data import performances (work in progress)
"Added getFilename() to IToken, ITokenDuple & IASTOffsetableNamedElement. This improves the accuracy of selection search w/the new scanner (and without)."
Implement ORS performance improvements
INTERNAL: performance had been optimized.
applied: merge upload progress monitoring functionality into wicket-core Issue: WICKET-3524
#95: Implement more pedigree compatibility checks 
https://jira.jboss.org/browse/JBIDE-7264 Increase EL validation performance for big projects.
[HER-1546] Springify(5): Update checkpointing to work smoothly with spring-configured crawls processor-related bean checkpoint support: * Processor.java     implement Checkpointable and BeanNameAware; methods to support JSON state-saving * DispositionChain.java     implement Checkpointable and during-checkpoint disposition-lockout for state stability
#POULPE-469 Testcoverage and refactoring for Database backup functionality - review test for domain and persistence packages
Implemented detection result visualization. It it's had several performance problems yet. It doesn't use different colors for different result overlays.
refactored runner for readability
more refactoring work -- now with nonfunctioning functionality!
login functionality 
#601 Integrate plugin manager - Encapsulate captcha functionality into a class instead of two public fields on the AuthMe main class(!)    - Let CaptchaManager worry about whether it is enabled or not -> no need to check on the outside - Implement full reloading support to enable/disable captchas + parameters - Add unit tests
add setup type functionality - rjrjr
Added functionality to get database created and all saving to the database
Performance improvements.
"properly display perception, added functionality fornested links"
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#getClassLoaderAccess()
PLANNER-122: Reuse createScalabilityPlot() to create bestScorePerTimeSpend
Null correctness + tests
add some instrumentation to collectd to make it easier to detect performance issues
SGF-414 - Resolve incompatibility between the DistributedSystem created by the PoolFactoryBean and the DistributedSystem resolved by the ClientCacheFactoryBean when SSL is configured.
"https://jira.jboss.org/browse/JBIDE-7740, code refactoring moving css functionality into org.jboss.tools.css plugin"
Performance improvements - 342978: Refactor Tree widget to make it really virtual https://bugs.eclipse.org/bugs/show_bug.cgi?id=342978
"xforms module: completed adding support for form localisation, fixed some skip logic bugs, made file save as work, and addressed more usability issues of the form designer."
SOC-645 : Coming back to a single listener interface (for the sake of simplicity). Added memberships events to the lifecycle
"Code style, performance, refactoring"
Added functionality to mark optional course groups.
Bug 398733 - [Compatibility] Disable API tests until they're implemented
Bug91672 performance of setItemSize - rearranged code so that priority is always updated before setItemSize is called and setItemSize can stop measuring once it reaches tabAreaWidth
Factorize service classes to improve performance while resolving odesign imports
Removed ServerConfiguration to remove some indirections and increase readability of ServerConnector classes.
"https://jira.jboss.org/jira/browse/JBIDE-4756 - Enhance ""Print"" functionality for Mapping Diagram - the value  selected in Zoom combobox has a direct influence to Print scale"
Fixed issue #2473 about performance optimization
JBRULES-1915: Improve process persistence usability  - added partial command-based implementation of StatefulKnowledgeSession
Actually weild the client and test the basic conduit server functionality.
Better journal tests and also add a little performance benchmark to get an idea of what you can expect from the journal
A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:
"LOTS of reformats, due to change in IDE configuration. Also, batching cycle detection on addRelationships in neo4j driver, and avoiding sorting on traversals wherever I can...both of which should improve performance immensely."
HBASE-16052 Improve HBaseFsck Scalability (Ben Lau)
"- stability improvements - removal of segment map guards (now using a visible HEAD pointer, and an internal allocation pointer -- with the latter leading the former) - major performance improvements."
Major improvements in usability. Added support for queries. Lots of refactoring.
moved PerformanceReportPosition
"TRUNK-1662: Modify functionality of getConceptByMapping method: added new getConceptsByMapping method that returns one or more concepts, depending on the number of mappings; getConceptByMapping now throws an exception if a mapping points to more than one concept"
improving stop functionality.
Improve DistributionViewer performance
Bug 368253 - remove org.eclipse.core.runtime.compatibility.auth dependency from org.eclipse.core.runtime
"PT-2807: added functionality for creating multiple patients from their JSON representation, and added test cases"
performance enhancements
Resolved IllegalStateException in PerformanceLogFile
Add ability to write buffers directly to the output streams for best performance
"MAGNOLIA-2319 Re-adding the original boolean method for compatibility's sake, renamed new method"
"NEXUS-4149: fix regarding ""descriptor"" document and added low-level test to validate transport file correctness and content."
Added copy functionality
"1) Add check in ServerManagerTest to make sure that the Segment has been ""checked out"" before the factory ever sees it. 2) Some code readability changes to ReferenceCountingSegment"
Fix loadMetadata performance
CORE-2371 Improve Oracle snapshot performance
refactoring of the persistence API continued: - invoke startup of the persistence API through spring - split some classes along functionality - use dependency injection for the different persistence API functionalities - prepare for next refactoring step
JENA-567 Add option to TDB for specifying where the temporary write blocks for the BlockMgrJournal come from.  Also added a memory mapped ByteBuffer allocator to work with the new BlockMgrJournal functionality.
UI performance
Bug 127375 Add update site performance enhancement utility
Freshened up the shipped examples.   - Inlined the ToolSupport base class to make it more obvious to JMS beginers how JMS is used (less code reuse but these examples are simple enough)   - Added CommandLineSupport class that uses introspection to handle interpreting command line options   - Added ruby and java versions of a topic listener and publisher tools that can be used to benchmark broker performance.
Android Compatibility
Tidied up some code around:  - type safety for class names with regard to dotted vs. slashed  - passing both analysis session and the checker runner into the analysis database  - the performance of requesting private method invocation information
adding performance subdir
"[HER-1609] wide crawl performance is limited by lock contention in ServerCache.getServerFor(String)  * (all, especially CachedBdbMap.java)      pbaclace-contributed patch, ported to H3, plus... * StatisticsTracker.java     replace LongWrapper with AtomicLong     use non-recursive putIfAbsent-based idiom for get-or-create * DefaultServerCache.java     clean up host/server get-or-create around non-recursive concurrent idiom * BdbModule.java     add expectedConcurrency property & je.lock.nLockTables tuning * TopNSet.java     add synchronization, as calling StatisticsTracker method has lost it"
"Fixed most of synchronization problems with topics/queues, improved performance and increase concurrency (no more thread pool!), supported hot-cfg of servers in configuration file, always use node name rather than id"
rename mini MR test classes for better readability
"performance improvements, support for multiple data files."
revised support for annotated factory methods (merged @FactoryMethod functionality into JavaConfig facility)
added staticField functionality to GelfLayout
Summary: [accessibility]Enhance accessibility support in Chart Builder
"1. If requested DELETE /test1 and this handler does not contain any DELETE, now it is searched if any route for /test1 was defined before calling invalidMethodHandler. Before it was always called; non uniform because after adding the route DELETE /test2, the code will search for a match for /test1 (defined by other http methods). 2. If I don't want to expose 405 (to be stealthy) or just for improving performance, I can now skip the matching done by allMethodsMatcher by setting invalidMethodHandler to null (before it was possible but will cause an exception and no call to fallbackHandler)."
minor readability tweaks for flegall's patch
Hostility Functionality
performance
Bug 495660 - Improve PDT tests performance and stability
improve performance
"compatibility, wassat?"
"refactored test cases, added test cases for new functionality, fixed bugs"
Refactored: use custom class loader for whole JUnitCompatibilityDriverFinder instead of just JUnitCompatibilityDriver
Refactored for better extensibility
added functionality that feature file can be read from stream
Fix to the tool-chain modification functionality
impl for Help Contact functionality
rename MeteringSession to Sample rename PerformanceMeter#getSessionData() to getSample()
XLCLOUD-594 Modify vcms-gui to use public/private accessibility of the templates
performance tuning * serialization
Main compatibility update with 1.6.4-R0.1
"pulling the extensibility up to the root object per issue #62; defining a base 'genealogical resource' for extensibility, attribution, and local id"
Retiring more Core functionality. Moving init stuff to bindings.
JBIDE-3635 Fix compatibility issues with Portletbridge distribution
Performance tweaking.
implemented functionality for send_on_all_interfaces and send_interfaces
Add backward compatibility
"Alignment with changes in the Storage engine & implementation of the ""mark as deleted record"" functionality"
Enhanced stereochemistry representation through a common abstract super type (AbstractStereo). Thinking about the representation slightly differently we can push most of the functionality provided by the specific stereo representations down to the IStereoElement API. This is advantageous as rarer more advanced stereochemistry/configurations are captured.
[NGRINDER-28] Develop performance test module: test listing and editing function - Change TestService to PerfTestService - Make PerfTestService accessible by admin
Improving test reliability (esp on Windows)
Fixed Bugzilla 122666 - Performance enhancement for RandomAccessFile
added parsePropertyBlock() to SVNAdminClient's load functionality
HADOOP-10691. Improve the readability of 'hadoop fs -help'. Contributed by Lei Xu.
ISSUE #466: Move backward compatibility tests into a separate module
optimized for encode performance
extract functionality
  * NewImage - simplify 1.4 COMPATIBILITY mode support. Minor refactor.   * ImgLibProcessor - support setting pixels with range > Integer.MAX_VALUE   * other classes - rename Gatherer interface to InfoCollector
"added jwt string stability to several places, fixed jwe parser"
Refactoring of functionality used to generate records to Java
JBIDE-3842 - @Column.length - setup non default string length functionality
"I abstracted out some common functionality from the ImageHelper and ShapeHelper, but the shader implementation needs to be rebuilt from the ground up."
"rename hadoop-compatibility, more generics"
Added some functionality to the STS to get it working with streaming WS-Security
Applied some performance optimizations in CandidateElementExtractor
Added some performance testing
Clean up for chart functionality.
Pulled out some common functionality from the GL2 text helper implementation.
"NXP-2225, NXP-2226: fix syndication feeds. Fix syndication when the user has no read access to the documents root. Fix link to feed from the <link> tag of the feed itself. Completely refactored the SyndicationActionsBean for much greater simplicity. Deprecated old APIs. Avoid unneeded injections."
committing latest work on query functionality
added functionality for recursive/repeated TypeCodes
Fix SCR bug 99724: performance degradation detected when rendering report by BIRT Viewer.
* Multiple changes * Now adds torrent URI correctly to the database * Added new option --uri * Renamed some older functions * Readded functionality that stops the download. * Readded functionality that removes the downloaded files. * Added output when waiting * Renamed ITFunctions to HelperFunctions * Moved more functions from other classes to HelperFunctions
Extract opreport execution functionality in OpxmlRunner.
Rework of the actual archive creation in order to avoid multiple iterations over or random access to the resource collection. (Performance gain for extracting tar archives.) PR: PLXCOMP-88
Restored formatting interfaces to provide same functionality as v0.95.
"OpenShift new test, stability improvements and javadoc"
Update timer functionality
"MONDRIAN: Add session infrastructure: classes Statement, Execution and Locus in     the mondrian.server package. Move functionality from Query to Statement and     Execution, leaving Query with its core functionality as a parse tree."
Misc minor performance fixes
[GEOT-5420] Performance regression creating image mosaic reader against databases with thousands of tables
improved nickname/color performance (hopefully!)
"DAV update performance optimization: - less number of http request is used in DAVRepository for ""update"",""status"" and ""diff"" operations - DAV repository root and uuid are fetched on demand now - minor optimizations in wcaccess and svndir code - ""undefined"" revision is valid for update (takes less time then -rHEAD update)"
More performance enhancements.
Change scope caching to improve performance
Ticket #452. deegree geometry validation is wrong. http://tracker.deegree.org/deegree-services/ticket/452: Refactored geometry validator subsystem to use event classes to improve testability and usability.
performance
[PLAT-1147] Lots of new RESTful resources and remote interface implementations relating to the newly-exposed engine functionality / API
"Combine module and plugin to ext, for simplicity."
"refactoring, performance improvements by using array vs. lists"
enhance the backward compatibility for BIRT 2.1.0
trying to enhance performance
refactored batch bolts and collectors into coordination package and added the functionality to drpc
Refactored ArgumentDefinition to absorb functionality from ArgumentDefinition and ArgumentTypeDescriptor.
More minimap performance
edited for improving runtime performance.
"More annotation work.  Added bounded annotations and moved some shared functionality  into Annotation.java.  This should eventually become AbstractAnnotation.java and a  new interface Annotation.java should be created.  Still having problems with getting the font scaling right when setFont is called, though..."
Refactoring functionality
Clean the performance example
"Update guest / registered user checkout to be on the checkout page Move guest / registered user checkout to utilize a global order info 	form for extensibility Fix redirect url on errors Fix redirect url on register"
did some slight code cleanup for the old cishell compatibility plugin
K-idea-plugin. Extending Ctrl+Q functionality. Visualising function implementation as part of its documentation. Preliminary version of the feature.
added renewUnlimitedParkingRequest functionality
Estiblished basic upload functionality for analysis infrastructure
"replaced listFiles and listDirs in Filesystem with list.  In looking at all the three implementations, this makes more sense.  At the same time, this allows support for all kinds of list operations without worrying about performance"
Added ttl functionality
Extended the type assistant with extra utility functionality
MAGNOLIA-3375 small refactoring for readability
"Performance improvements to WikidataDumpLoader: 1. Parallelize loading. 2. Only load labels, descriptions, etc for loaded languages."
"Refactoring for Activiti 5 compatibility + Spring, CXF and Camel unit testing"
Changed the way that ClientSets are handled - better for extensibility. BasicClientSet is now a separate public class from BasicHubService.java.
"Use newer functionality in Robotium Solo, and test for AnkiDroid directory instead of newsrob."
WICKET-5823 DefaultAuthenticationStrategy should be modified to reduce copy/paste while extending it's functionality
this package is out of date and should be moved to  /trunk/client/old-cishell-compatibility
FACES-1181 Develop WSRP compatibility
Small performance improvements
webadmin: Added functionality to Providers tab
Switch while to do while loops to investigate performance differences
added further didyoumean functionality
Improved performance by changing ArrayList to LinkedList
moving 2.0 modularity branch to trunk
SONAR-3825 improve performance of SQL request
Adding functionality
extended Servlet API mocks for Servlet 3.0 forward compatibility as far as possible; made MockHttpServletResponse compatible with Servlet 3.0 getHeader(s) method returning Strings (SPR-8529); added getHeaderValue(s) method to MockHttpServletResponse for raw value access
"Source code changes for C8 ""Clone configurations"". Also removed the SummaryFieldEditor since that functionality has now been implemented by the MultilineFieldEditor"
gui functionality for hiding / showing wms
Changed compatibility tests. Testing JBDS5<->JBDS6 compatibility instead of JBDS4<->JBDS5.
Relative URL refactor to improve maintainability and fix the PrependContextPathHandler.
#NAME?
Cleanup of MapLongPerformanceTest.
"Really simplified starters, removed StarterSet, just an inferface for compatibility, a lot of useless method removed"
work on caching and performance
"MODE-779 Implemented more of the Binary functionality, added in several of the commented-out TCK unit tests, and fixed several issues with our Binary implementation."
UNDERTOW-112 Fix chunking performance issues by using writeFinal to write the chunk terminator
Renamed Failure/PerformanceStat-Containers to Collectors
Fixed several bugs in HttpAsyncRequestExecutor; added test cases for the most fundamental functionality
"moving functionality to graphviz package, fixed windows file separator"
Fixes #1656 - Improve configurability of ConnectionPools.
Fixing bug #1401 : getting better performances with kmelia
performance improvements
continuing performance improvements-- now uses a binary lookup
More gwt compatibility.
Bug 379504 - Data flow enhancements. This adds missing functionality for creating Data Associations.
"functionality is ready, docu is left"
branch with experiences synchronization functionality
"trunk: now such SVNRepository methods as getLocations(), getLocationSegments(), getFileRevisions() do their functionality via fetching logs in case a server does not support them"
VCard only saves when changed. More i18n. Better user messages. Some tiny usability details
CLOV-1956: upgrading to Clover Core 4.1.2; added new checkbox for putting values in double quotes (for compatibility with Ant versions prior to 1.9.7)
HBASE-10592 Refactor PerformanceEvaluation tool
PF-432: Order book: add date fields for period of performance for order positions.
"More updates...  Changing the api to allow for table/column family/ and column names to be byte[] as well as strings.  This should allow for an easier integration with existing hbase projects.  It will also allow for a faster application, although the performance difference will be minimal."
Fix for bug 73487 - [Images] Update the workbench classes to use JFace's ImageCache Added functionality to support workbench.
Changed implementation of adding/removing/getting relationships on a node in cache layer. Previous implementation worked with sets but that had a performance problem  when doing small modifications to a node (create adding or removing a few  relationships). This could be noticed when node had many relationships (copy on  write on largers sets was just to slow). 
Extended AbstractNodesTests with more handy basic functionality.
ROO-2370: Performance enhancements relating to MemberDetailsScanner and TypeLocationServiceImpl - fixes an issue where not all types are added on load
Moved some of the functionality that was just in view up into PageComponent
Memory and performance optimizations
"added functionality, reformatted and added proper examples"
Add some tests for correctness that weren't covered in spec
#NAME?
"Support other blocks of memory as well as Eden. Abstract functionality out when creating blocks to avoid repetition of code. This code needs some more cleanup, but for now this is good progress"
Moved GridBagLayoutBuilder to the layout package. Extraced GridBagLayoutFormBuilder for the functionality specific to doing forms.
refactored for testability
Developed the functionality where description of any parameters in the dialog box pops out whenever a icon is clicked. Featured developed by Chintan. Code reviewed & refactored by Micah.
XE-1366: Setup regression performance testing
"Added LITE functionality for all TSP testdata, not just headers."
mostly patch from thomasf with some additions to editor preferences (selection color) and labels in preference page. no longer depends of runtime.compatibility
TAJO-1766: Improve the performance of cross join.
#POULPE-244 Move user banning functionality to MVVM model
Refactoring test to use more evident data and improving readability of rollRepeatedly
"ROO-3353: Make GAE and GWT version properties ROO-3352: setAccetableValues(Collection collection) method is still added to EditViews when field is marked read-only in proxies. ROO-3211: Modify the inheritance chain of activities and views in order to increase flexibility. ROO-3208: setEntityPickerValues method not being added to View interface in EditActivityWrapper ROO-3204: Use existing renderers in mobile list views rather than defining new ones ROO-3179: Better organize the scaffolded views in a GWT application ROO-3178: If a user adds a field to an unmanaged edit view, do not add it to the managed edit view"
JBEHAVE-398:  Allow ExamplesTable row values to be converted as parameters.  Functionality accessible via ExamplesTable#getRowAsParameters(int) decorates existing ExamplesTable#getRow(int) and could be moved to a sub-class (e.g. ParametersTable) if required.
Full functionality for cuboid enter/exit smart event
added missing unit tests and improved testability
"Merge event and object with core, for simplicity."
"Added edit-delete functionality, also, added an interceptor to update created and updated properties"
"on feature #3449, optimizing performance by simplifying session objects (some process were called several times) removing some useless code (mainly in JSP files)"
SONAR-7782 Move computation of reliability and security rating measures into a dedicated visitor
FEATURE: pictures functionality had been implemented.
deadline creation and deletion functionality added
"Improvements: performance optimizations in node and relationship creation, additional / fixed tests, performance optimization for deployment imports."
Add functionality to recalculate slots when receiving MOVED response from node. Add test to check for ASK responses (implementation missing)
[Bug 467463] [BiDi] Implement contextual base text direction for StyledText: (1) Addressed Niraj' comments (2) Control: updated javadoc to accommodate AUTO direction (3) Added isAutoDirection to all platforms (4) win32 TextLayout now returns resolved direction for back-compatibility reasons. (5) Class SWT: javadoc for AUTO_TEXT_DIRECTION mentions public API it can be consumed.
main scheduler functionality in Provisiond update
a number of efficiency measures that have a significant impact on GC under load
Rewrite PerformanceTestCueball
"SCRUM-71 implemented server side part for moving paragraphs, also consolidated move functionality to JCRUtil"
WINDUP-93: Improve readability of Iteration.over().var()
Extracting functionality from OutputRouter and move it to OutputRegistry
Introduced SerializableCompatibility
using simpler ReplaceValueOpImage if possible to gain performance improvements (cherry picked from commit 7d71af9)
I. Improve debugger performance:  1. Use new message for CWD retrieval (faster)  2. Cache CWD between Start Process File notifications  3. Use lite Get Call Stack message for faster processing (without variables) II. Improve old debugger warning message (add links)
updates because of compatibility with Graphene (ARQGRA-273)
"According to high performance of ehcache, cache the interrupted response too. When change the zones file, the cache should be cleared."
SOC-2374 | Find Spaces : native english usability review
get rid of double in difficulty. WARING: this commit breaks database compatibility.. You will have to rebootstrap.
"When sending LLDPs and BDDPs from all the switches, send LLDPs first and then BDDPs. This would enable direct links to be detected first and reduced instability."
CR-5 Readability improvements to Duration
JBRULES-1915: Improve process persistence usability  - improved command-based implementation of StatefulKnowledgeSession
Lots of re-factoring to improve both raw and best mode read performance
FUSETOOLS-2329 - Imrpove robustness to NPE
#53 Compare list of local files with destination files (core functionality)
FFMPEG: use a virtual stack for memory efficiency
"Changed file handling method on uploads, archive and bag completion. Added a FileFactory class that caches file objects for reuse and locking. Now storing the timestamp of payload files in a tagfile to know if a payload file has been processed after being uploaded. Multi-threaded the bag completion process so it is must faster. Created AbstractKeyValueFile class providing base methods for storing key value pairs in tag files. Using this method instead of classes in the BagIt library for performance improvements."
Moved resources reference functionality to the separate bundle.
"Fixed UI bug for ECF Buddy List view.  Added new functionality:  1) new images for active/inactive user in org.eclipse.ecf.ui.  2) Changed behavior of rosterview to better handle groups, and to display number available and total in group. 3) Added new API for handling subscribe/unsubscribe requests (ISubscribeListener); 4) Added code in collab example client to demonstrate use of ISubscribeListener API; 5) Added support in provider org.eclipse.ecf.provider.xmpp.  6) Replaced version of Smack jars with one based upon 1.5.1 of Smack libraries...after removing copyrighted images and replacing StringUtils.encodeHex"
Improve workbench pre-3.0 binary compatibility (bug 48786)
misc app engine cloud changes (1.5 compatibility etc)
performance enhancement for hyphenated text
performance improvement in SerializationInfo cached index translations
Allow more flexibility in the application of the checks after applying the constraints
[repoView] Improve performance of tags (label provider)
Performance: Cache STJSClass instances to avoid looking up the .stjs files too often.
GWT compatibility; name change
Bug 245417 - Typo in org.eclipse.pde.api.tools.builder.tests.compatibility.ClassCompatibilityHierarchyTests.WORKSPACE_CLASSES_PACKAGE_A path
"Performance improvement Performance improvement by changing the random algorithm (less equal treatment for each block, players shouldn't be able to tell the difference) for an massive performance boost (up to 200 times)."
WIP for syncing hive functionality with latest snapshot
add a multithreaded performance test to ensure there are no threading issues
fix tests - refactor for readability
Bug 87379 - Ant verions backwards compatibility
fixed incompatibility to perf prj
Added in the functionality to load the default values for the add-revision parameters.
Improved tree node popup keyword stability. Issue 122.
initial commit of texture atlas and icon painter functionality.
"Fixed some bugs, and made some efficiency improvements (plus, parallel code that I missed!)."
"Refactored some code out of the atom server module and into the shared atom core module.  Added more functionality to the sramp archive class, and built unit tests for that functionality.  You can now add entries and get a list of entries from the archive."
Fixing accuracy rating so it is normalised
Added MapMessage functionality
DDF-1448 Refactors most of functionality out of AbstractIntegrationTest for greater reusability
renamed mapKey/ValueTypeDescriptor methods back to getMapKey/ValueTypeDescriptor (for Spring 3.0.x compatibility)
[4128] Fixed tarmed optifier to check parent incompatibility as well
SONAR-5528 Improve performance of syntax highlighting API
Compatibility issue where there are traversers which depends on that relationships are traversed ordered by type (reversed)... so made a new expander for the old traversal framework
ensure FLUSH and block/unblock correctness
Tons of performance enhancing modifications for the XML/A driver.
refactor performance test code and add pdtt files
"Naming conventions, minor readability enhancements"
GTNPORTAL-2106 : Navigation controller renderer performance improvements
Moved recovery logic to its own method for greater ease of extensibility
MODE-1312 - Implemented workspace.clone functionality
"Fiji Archipelago: Configurability of NodeShells, work toward secure sockets, initial commit"
JS:  extensibility of class/static members support
FEATURE: login functionality made more clear to user. FEATURE: Channels reconnect functionality had been implemented.
 - add date value validation  - rename DateFormatFieldValidator to DateFieldValidator  - fix performance issue : simpleDateFormat should not be instantiated each time isValidField is called
More cleanup and removed the ForkJoin functionality for the 0.1 release
Change template engine from mustache-java to freemaker. Improve performance and avoid hacks betweens mustache & angular-js tokens ({{}}).
Fixes #14 - improve doesNotHaveDuplicates performance when a custom comparison strategy is used refactoring : remove Embedded class that was actually not needed and avoid the algorithm duplication
Move over most CascadingHelper functionality
[FIX] Avoid the use of dot (.) in home name. See #413 [READABILITY] Move the getHome in HomeCommand.
Adds options for num writers and commit size on db-bootstrap page; improves bootstrap file format and performance by using type names instead of IDs
FEATURE: usability improvements.
Further cleanup of Tokens for performance/memory.
"Code cleanup and performance optimizations: fixed broken ResourceAccess cache (was never enabled), added try-with-resources in SearchCommand to avoid leaking IndexHits, unified doGet and doHead methods in JsonRestServlet to avoid issues with diverging code later."
"Applied updates for extensibility of ClassMapBuilder, as mentioned in issue#33"
Small improvements for extensibility.
Improved the correctness of return page names of Wiki. Wiki 90% - 97% Use pattern match in Edgar
BACK PORT - issue TRUNK-2015: Move some functionality from SaveHandlers to hibernate interceptors  https://tickets.openmrs.org/browse/TRUNK-2015
Fixed the add functionality of GenomeLocSortedSet.
1.  Added functionality to add a filter at a specific index. 2.  The size of the filterCollection can now be queried
Adding charts functionality to the data-explorer: scatter plot and box plot. Those new features are yet not fully working.
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Separate notion of not applicable test from the notion of failing test * Added explanation in the test name when a test is ignored (note that this will be needed to generate the CTS Syntax Report)
Bug 329682 - Restore backwards compatibility
LOG4J2-1179 benchmarks for performance page: compare various Log4j2 appenders to each other
WebSocket / Performance - cleaning up tests from fallout on bug 414913
"MAHOUT-1086 - Deal with round-off errors in computing L_2 distances.  Add special case to get higher accuracy when vector difference is small, merge AbstractVectorTest and AbstractTestVector, fix like() bug in Centroid and WeightedVector."
Bug 306267 [Compatibility] Initial DND throws NPE
JBRULES-2809 performance tests to check working memory corruption: nurse rostering
"Adding support for accessibility detection, fixing bugs with detection of fall-through checks"
"XWIKI-12229: Add support for Nested Spaces in the Create Action - Added backwards compatibility support for the ""space"" parameter (which was a single space's name) and introduced a new ""spaceReference"" parameter (which is a serialized and escaped space reference) to replace it."
"Minor cleanup, adding javadocs, configurability"
Finished hooking up ACL GUI to access control functionality.
"Bug 316303 -  [Compatibility] turn actionSets into MenuContributions Bug 316802 -  e4 variant of contributing to toolbars Bug 316304 -  [Compatibility] turn editorActions into MenuContributions Bug 316305 -  [Compatibility] turn viewActions into MenuContributions Refactor so that trim contributions are added by the trim renderer, and toolbar contributions are added by the toolbar renderer"
Performance optimizations in PolynomialEvaluationProofSystem verification 
[PLAT-3484] Performance tests.
Refactor main code for simplicity
checkstyle integration and eclipse compatibility
Issue 383: started to resolve eCloud compatibility problems
Improve performance when writing trees and small blobs
Merged improper commits from https://github.com/kdowbecki/aperte-workflow-core:   * 374befe9671bf32a9020ca6faa4a2d6dcca64627 Additional bundle location encoding for Felix   * 9709532d6bf14f247773b2990e4d92c1ba7a4e40 Support for ${aperte.workflow.home} setting to support proper resolution of plugins directory   * 8d0041fbfe9169495903e4db37900122d159ae98 Support for ${aperte.workflow.home} setting to support proper resolution of Mule directory   * 396cb859e1ed068d81d89df819dbf9b847e926e0 Fixed resource path compatibility with windows (and start of Liferay Document Library based widget)
Improve the performance when generating vertices for nodes without any links: * Use the existing maps instead of making additional calls to the database
OFC-1379 - Improve sampling design import tool performance
ROO-232: Modification of Roo commands to enhance usability and consistency between add-ons
290: Further refactoring for readability.
"added ""accuracy of aboutness"" test case - all above 90% accuracy!"
Added a TypeFactory for creating Types. Added primitive field accessors to assist in usability.  Updates to Map encoded types to allow copy on write checking. Updates to equivalency checking.
Increased stability in the assertCurrentActivity methods as well as in pressSpinnerItem. Also moved waitForActivity to the Waiter class and some other minor refactoring
Added group chat functionality.
REST API now provides areNodesConnected functionality to have WiseGui display current connection status
v1.38: Compatibility update for MC 1.4.4
Initial offer and pricing functionality.  Not complete
[NGRINDER-64]Develop test running function  adding report graph functionality and report data is wrote in file
"Improve CLI defaults, and improve readability of RuleProvider report"
Implemented Server-Server communication and pingServer functionality.
"Refactoring for improving  code organization, readability and reuse."
Unignored JBossPDPInteroperabilityTestCase tests and fixed the testPoliciesLoadedFromDir() test in it
Code working towards update manager backwards compatibility.
"Improved graph discovery by consolidating getPathsTo(..) calls. Also, improving accuracy of filtering by allowing attrition of the filters that are OR'ed together for child paths...when filters in that set don't match, allow them to drop out of the next layer of discovery."
Bug 320573 [Compatibility] View may be physically opened in a perspective without a placeholder
applyed patch to fix pnfs performance:
"EMBRYO-28, EMBRYO-38: reworking Schedule functionality to support different route upload scenarios"
Splits a method into two for the purposes of readability.
* minor cleanup for readability * added a couple more tests
More work on restoring functionality Some cleanup (moving stuff to a trash package)
update user functionality added. But not working. Cannot get Extjs-Store update method working.
move f2 ui functionality to the main forge ui plugin
Set FIT test which cause performance problems to 'Ignored'
 Bug 164639 - [JFace] improve usability of DefaultToolTip
[performance] Backport CompletionProposal -> IMethodName conversion
"Added functionality to null out properties on form beans that either were submitted as null, or were on the page but not submitted at all."
Fixed the majority of activity stability issues
Index creation uses json mapping configuration. Indexation and deletion methods rewritten for compatibility with Lucene version.
User-management functionality. Not 100% ready.
"MRM-1037 - Search Usability * timestamp versions are merged to -SNAPSHOT versions * duplicate artifacts are now merge by use of boolean filters * we now search the correct fields * content search has been removed (more accurate results) * added more tokenizers for groupId, artifactId, version, etc * Artifact Id's are weighted to improve quicksearch results"
"renamed, also compares ArrayList performance"
FACES-2201 Bridge does not remove the id of the PortletNamingContainerUIViewRoot from the list of execute and render ids from AjaxBehaviors (backport compatibility layer / minimize diffs across branches)
Bug 301695 -  [UI] Fix compatibility issues with the model
"Temporary refactorization of project structure due to keep compatibility for ""spring/ftl"" with ""struts/jsp""."
Refactoring for readability
Performance: AbstractSQLChange does not need to parse and split the sql to compute warnings or validation errors
Fixed compatibility with SpoutAPI
Accessibility checks improved with CF
implementing functionality to work with router REST service updated domain model updated controller and jsp to work with new domain model
perform maven migration without breaking ant compatibility
improved performance
caldav stuff from interop event. Move scheduling collections to be under calendar home collection for compatibility with apple clients. Note this will break resource API implementations using calendar scheduling features
Bug 296686 - Folder type container has poor performance
hooks added for extensibility
"moving parse and stream methods from AbstractFastqReader to FastqReader, since binary compatibility is not a concern for biojava3, where these are new APIs"
fix(qa/performance): fix typo
"- Add new resource types for distributed status data and response time   data.  Both live in performance and are always shown on the choose   resource page there.  The response time resource type is now used to   get data for the ResponseTimeModel (and is the only resource type there).   Eventually the ResponseTimeModel will go away, and along with it the need   to differentiate based on ""type"" (e.g.: performance or response). - Added a GraphDao for fetching prefabricated and adhoc graph definitions   including an implementation for the current properties file format.   Supporting objects are PrefabGraphType and AdhocGraphType (for the two   major groups of performance and response graphs) and PrefabGraph (which   is now a boring old model object).  The code for the properties   implementation was pulled out of GraphModelAbstract and RRDGraphServlet. - The RRDGraphServlet now requires a resourceType to be passed and the   root directory for RRD files is now based on the resourceType, not the   type. - Use Spring to create and wire up the GraphDao, ResponseTimeModel, and   PerformanceModel objects.  None of the servlets or JSP pages are currently   wired up directly by Spring, so they get these beans from the   WebApplicationContext. - Switch the performance adhoc graph JSPs over to be fully resourceType   aware.  They can now generate adhoc graphs for any resource type. - *LOTS* of supporting changes and cleanup. "
Add refresh token functionality Add additional interfaces methods for failures
"Continue total compatibility-breaking package reorganization, sorry."
#NAME?
Added crash reporting functionality through email.
"Added view-ad functionality, fixed problem when uploading large images in create profile."
ItEr36S11CUCreacionUnidadesPlanificacionItEr35S12: Pushing down and renaming functionality to convert ResourceAllocations into an AllocationBeingModified
Another round of performance optimization
Moved base functionality into concrete classes that implement common interfaces.
Visualization modularity.
added the upload functionality and 90% of the wizard functionality :D
Changed 'IIterationStrategy' into an abstract class with default functionality for the iteration strategies
refactor to reuse functionality where possible
refectorings before we wire in more functionality
"added support for e-mail parameter, new functionality in test server+++"
deadlines controller functionality finished
HIVE-11891 - Add basic performance logging to metastore calls (Brock via Szehon)
performance of PDF report enhancement
"Minor fix wrt #17: should not add `abstract` methods without default impl, causes unnecessary compatibility issues"
* some extensibility added.
Trac #130: Pre-allocate lines buffer for method (performance).
"CSPACE-5294,CSPACE-4579,CSPACE-5241: Minor tweak to FileTools method, to revert to defaulting to system encoding, as suggested by Richard. Traced and documented behavior of a key macro variable expansion method in Imports service, in part to verify CSPACE-4579 functionality and in preparation for work on CSPACE-5241."
HIVE-4378 : Counters hit performance even when not used (Gunther Hagleitner via Ashutosh Chauhan)
"code review comments, minor functionality simplifications and refactorings"
Added functionality to handle InputStreams. (useful when loading JarEntries)
Tweaked the RDataReader for efficiency
Implemented queue/topic functionality Still need to get topic message IDs to match
IN PROGRESS - issue SOAPUI-1490: Implement functionality  https://jira.eviware.com/browse/SOAPUI-1490
core: Move OS class to utils for reusability
new search functionality is operational
JDR plugin functionality.
Added compatibility with wildcards in web.xml applicationContext configuration
"For INSERT, convert Java-based type to SQL-based type before checking type-compatibility."
ADD Method importProject() FIX Minor in getElements() REF Method getElements() renamed to exportProject() ADD Class EntityCorrectness for develop WS REF Miscellanea
"[EJBBOOK-3] Rename ""firstejb"" to use chapter prefix for readability"
SPR-8612 Allow explicit status code in HTTP 1.0 compatibility mode
Refresh All performance. STS 2918. For Kris to review.
refactored undo story test for reusability
introducing StabilityStatistics
"[added] Texture#setWrap. [added] Bunch of functionality to TextureRegion. [changed] Sprite, BitmapFont to use TextureRegion. Moved Sprite texture manipulating methods into TextureRegion. This is an API breaking change! [changed] FileHandle, better exception trying to read/write a directory. [added] getColor to BitmapFont. [fixed] Sprite#rotate90. [fixed] SpriteBatch draw method, javadocs were wrong and params were int when should be float. [added] SpriteBatch and SpriteCache draw methods for TextureRegion. [added] A packed font to SpriteSheetTest. [added] Missing tiles.png from LWJGL backend."
"Make a performance enhancement. When a expression is direct reference expression, i.e. row[""xxx""] or dataSetRow[""xxx""], we will not get value through Rhino.[27522]"
Performance enhancements
removed spagetti code and fixed a major performance issue
Add FXOneLookBarrierOptionFunctions and added flexibility to FutureOptionExpiries
CheckIn:Jsrvr crashes due to allocating too many threads in dashboard performance scenario[27865]
"Added ""action"" checking functionality for the JAX-RS XML Security streaming code + some tests"
"Remove duplicate column initialization code, add datasource integration tests - Drop initialization of all columns on table create in favor of checking each column individually. This is slower but guarantees that each column is only defined once in the code. Columns are only created once so having clean code outweighs performance. - Write more datasource integration tests"
Collections and Module TetR_Inv still needs to be completed. Overall write_tester.java still needs to be check for accuracy. 
improved pdf functionality
Add exception handler functionality
Essential use of metrics. Some performance improvements.
[#395] Use XML configuration file instead of plain properties file - Implemented backwards-compatibility
OFC-626 Import XML functionality
optimized for encode performance
Improve performances: avoid creating attribute values using String when possible
#NAME?
Backward compatibility fix
"ProtectionSettings object (extended for docx, pptx, xlsx) to encapsulate functionality."
Added @ContextParameterObserver event functionality with examples
"Commit of 55 files in which the style, indenting and naming of the code is improved.     No functionality of component Validate has been changed."
topic: code enhanced type: functionality module: other description: MDEditor - export of datasets
#NAME?
Improvements in performance test comparing to raw Lucene
same interface as compiler now. benchmarks show that performance is comparable or even better than compiled. my guess is hotspot likes fewer classes.
[BISERVER-12264] (fix backward compatibility) Issues when exporting or importing a directory with a blank / space character
ACT-746: added functionality to involve people and give them custom roles
Minor performance logging improvements
"fixes related to changing the path of parent poms, though the actual functionality is not implemented"
IN PROGRESS - issue SOAPUI-1437: implement functionality  https://jira.eviware.com/browse/SOAPUI-1437 (list->2 tables interaction done)
Refactor selenium smokes (add Graphene for easier extensibility) (#281)
ASSIGNED - bug 377840: [Performance] Opening a review might be too slow  https://bugs.eclipse.org/bugs/show_bug.cgi?id=377840
updated $is functionality and examples of XDITestLocalMessenger
revive former connectionfactory functionality
"Outages Suppress UseCase, final view checked in Now all functionality is Springified. w00t"
Removed the need for 'high performance mode' by using thread.notifyAll() . CommPortHelper now throws exceptions for the GUI to display. Added folders to the GcodefileTypeFilter.
"Android performance optimizations, fixes #61"
Adding describe table functionality
"MODE-677 Completed the initial implementation of the clustering functionality, which at this point appears to be working as expected. These changes add test cases and fixes to the wiring of the JcrEngine, ModeShapeEngine, RepositoryService, and RepositoryLibrary with respect to the observation busses. The RepositoryLibrary was instantiating its own observation bus, so this patch requires passing it in via the RepositoryLibrary and RepositoryService constructor."
Graphics: Zoom with context improved. Start generalization of functionality AnalysedController that overlaps with DefinedController. 
change the modularity of the various internal part of the core
ISPN-1015 - Optimize HotRod client to match Memcached performance
implement a higher performance scheduling algorithim.
"Tournament is now able to run. Still need to kick it off and add an overview page, back the barebones functionality is there."
Added delta-import functionality
Fix TheSameAs functionality to use System.identityHashCode and other fixes
REPORT-771 - Incompatibility with OpenMRS 2.x due to reportingcompatibility dependency
Create NullCounterStore and NullPktInProcessingTime modules. These are used to create a minimal configuration for performance testing or to turn them off.
Bug 1083148 - Postgres Plugin - Compatibility Group With Postgres Users Errors On Configuration Change
"Interim checkin - DO NOT USE!! Unless you are interested in helping test: AOT compiler!   build and start Clojure with: -cp ./classes:./src/clj:clojure.jar   try:  (do   (compile 'clojure.core)   (compile 'clojure.set)   (compile 'clojure.xml)   (compile 'clojure.zip))   restart Clojure - faster?   rebuild Clojure w/o clean, should get faster start from jar alone deleted set/xml etc dirs Moved clojure ns to clojure.core, moved set/xml etc up out of dirs New binding syntax (breaking change) for:   doseq   dotimes   with-open   when-first   if-let   when-let  plus: new print-dup functionality for replica generation of compilation constants new *print-dup* flag, prints duplicators back to simplified readably printing for repl readable fns, as long as they are not closures"
Added doctors functionality.
SHIRO-25 & SHIRO-86 - created initial Builder implementations which allowed for significant cleanup of ThreadContext usage across code.  Builder implementations could probably be used in 'runAs' functionality moving forward.  Will investigate later.
"Added a Console Appender for logback performance, renamed various files and fixed a memory leak on the LoggingOutputStream"
#NAME?
"Make sure integration is 100% optional, increase efficiency of integration related checks"
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Refactoring by introducing a WikiIRCModel * Started adding the Event Listener to send notifications to the channel when a page is modified
"Moved from Single jPanel for drawing graphs to JLayeredPane for sorting graphs later, Color info moved to GenericDataElement class, which actually makes alot better sense. for better performance try running with -Dsun.java2d.opengl=true if under linux, or under windows this will work also but removing it will use Direct2d/3d pipes for rendering instead(which may further improve performance)."
various memory performance tune ups
#NAME?
Worked on source file functionality
BVTCK-89 Split BuiltinConstraintsTest to improve readability
Pulling out DB filter functionality into a user service implementation.
Validate owner migrations in flight and partition state version at beginning & end of querySequential to avoid query correctness issues.
renamed Add JAR to build path to add to build path for more flexibility in future created Remove from build path action
- Summary: [General designer usability] Removing Formatting from the GUI
merge with proposed JobMetadata + reintroduce copy functionality + improve logging and ui feedback
  * eliminate BlitterOperation   * change setObserver() to addObserver()   * improve span compatibility checking in the Operation classes   * add TernaryAssignOperation
Adding some logic to the analyzer functionality and some re-factoring etc.
"topic: code enhanced type: functionality, other module: [d3] services description: added renderable provider"
[MIN] GUI: Performance tweaks for older machines
Split functionality across mutliple tools and now we call helpers for site creation.
Run many tests with summary statistics at the end for RTree performance analysis
additional compatibility tests
Added minor robustness changes for input split opening.
Continued modifying shader wrapper classes to use JOGL GLArrayData for shader attribute arrays (automatically takes care of storing data in VBO or client side buffer -- very similar to the functionality which our GLFloatBuffer wrapper provides).
"performance turnning,refactoring, optimize send buffer."
- server-side support for private field marshalling - performance improvements (back-references simplified)
ISPN-3019 - Performance tests are added for Infinispan-Query module.
OneLoop performance testing on road.
TEIID-3651 minor performance changes
"fix all non thread safe graph rows creation change precision from long to double for 'Transaction Throughput Over Time' and 'Servers Performance Monitoring' (memory, Net I/O) add an option to disable vertical line draw in all charts (e.g. 'Transaction Throughput vs Threads')"
MetaRep.MappingImpl cacheing mappingRunner should improve harvesting performance
WGO clean up and performance 1
Slightly better readability.
#JC-1406 Improved test readability
Adding compatibility supports for permalinks.
Improved analysis performance - mostly by speeding up localNames resolver that uses caching per IR now
"prepared interface for general eigendecomposition we currently support only symmetric matrices and real eigenvalues Jira issue MATH-235 asks for asymmetric matrices support, which needs an API adaptation. Preparing the interface yet avoids introducing incompatibility later. The current status is explained in javadoc and matrix symmetry is checked at runtime with an InvalidMatrixException triggered if asymmetry is detected."
- Only use thread local proxied injectable providers for non-per-request resources (performance enhancement).
"BEAM-1147: Calculation of statistics, also improved performance by computing min, max, mean and standard deviation in one pass"
"trie tested: should be correct, and improves performance (of extracting surfaces) significantly."
[MOD] XQuery: various performance tweaks on value iterators
Overloading the generateChangeLog method to add a ChangeLogSerializer argument. The existing method remains for backward-compatibility.
"EMBRYO-582, EMBRYO-613: AIS source filtering now enabled on overview and vessel details. All filtering moved to AisTrack server thus optimizing performance."
A bunch of random performance improvements when I started doing scaleout performance testing.
Fixed multisign scanning (breaking Bukkit BlockFace change) Some minor performance improvements too.
Revise the Viewer code for performance issue.
Added better compatibility with the existing protobuf java api.. made implementing it's unit tests easier.
"Updated the person using observer pattern for wall updates. This allows the Person entitiy to subscribe for updates from other Persons and removes the need dynamic generation of the wall. This design should should improve the efficiency of ""wall"" operation."
Performance tuning
Moved the Cell helper back to static methods and made the instance methods use these. This allows for more flexibility when using the logic within the helper methods.
ROO-1506: Significant performance improvements - further improve dbre speed by caching managedEntities in DbreMetadata
PerformanceMonitor doesn't rely on NodeEngineImpl anymore
PERF improve AttributeMetaData.getDataType() performance for subsequent calls PERF improve EntityMetaData.getAtomicAttributes() performance for subsequent calls
JBQA-4798: Prepare automated solution for EAP-JBDS compatibility testing
Improved send/receive action builder and other Java dsl functionality
HTTPCLIENT-1266: NTLM engine refactoring and compatibility improvements. Contributed by Karl Wright <DaddyWri at gmail.com>
Continued work on DOIDataCiteIdentifier.  * Added a lot of functionality to DOIDataCiteIdentifierProvider.  * Added a table Doi to the database.  * Added use of Database table doi to DOIDataCiteIdentifierProvider.  * Moved DOIDataCiteIdentifierProvider.DOIToExternalForm(String) to DOI.DOIToExterenalForm.
[FIXED HUDSON-4640] applied the patch with some improvements in the backward compatibility handling.
Pulling out download functionality into a central file for easier IEDriver and ChromeDriver downloads
"added functionality that usings have class and namespaces names, and the usings are used in the right innerclasses and right indents"
[ADD] User Module: more flexibility added for specifying permissions.
Undo previous revision (731639) as it breaks process model compatibility.
Don't return null on an unexpected EOF unless the document is empty. This brings us back to compatibility with GSON 1.5.
More voms-proxy-init functionality
"DROOLS-227 Dirty tracking to skip nodes and segments. Addresses performance issues for large rules, and large rule sharing. DROOLS-226 Thread Safety issues for bitmasks and StagedLeftTuples"
"multiple fixes for new account flow - userpresence view now updates when connection changes - new settings, sign in/out switch on account list screen - added 'remove account' button to accountactivity settings - improved handling of vcard loading, and avatar performance"
Only read fonts once to improve performance over slow network mounts.
creating performance API package
OOZIE-1581 Workflow performance optimizations (mona)
BSM-88: Implement polling alarm table functionality
SONAR-4898 improve reliability
Add support to sync alert definitions with SNMP actions. Functionality added primarily to do integration testing for HQ-2047.
WICKET-5983: mostly linear performance in MarkupContainer.add
New endorser whitelist functionality
[MONDRIAN-2403] Severe performance issue with reports containing count distinct measures and compound slicers
"minor code refactoring, last release before fixing wrapping performance by using ""fake"" verticalScrollOffset."
[1120417] Break up transaction of updatePluginConfigurationDefinition into smaller pieces Another round of scalability enhancements for updating plugin metadata.  In the past we broke the update of each Plugin into its own Tx.  Later we split registeringTypes and removingTypes into separate Tx and applied a 30 minute timeout to the type registration.  With this pass we now update each type in its own Tx and allow up to 30 minutes per type.  This can be necessary if updating plugin configurations for a large existing resource population.
Added index iteration for ReferenceSequenceFile interface compatibility. Added better error checking for querying past the end of a contig. Lots more testing.
Expose Resource XML reader/writer functionality
Added functionality to create buttonstacks.
"STS-3407: implemented a new way to identify affected beans and configs when given a resource, improves performance and reduces memory footprint"
Bug 233643 API builder performance bad for incremental build
Made FieldNamingStrategy2 is package protected class. Made type hierarchy adapter registration package protected. Marked some of the classes final. Minor changes in the performance tests.
[MRM-1283] moved browseArtifact() functionality over to metadata repository and remove repositoryBrowsing component
Added weighted modularity computation toalgorithms toolkit.
Tests and refactoring of classpathscanner for readability
Enhanced the performance for the resource loading for library and i18n files.
Implement accessibility check.
refactoring tests and adding performance test skeleton
[PDI-15856] - Hadoop File Output variables do not get exported correctly to XML. Added functionality to make having variables in cluster hostname possible.
SCRUM-120 - renamed VaadinEditorAdapter to DialogFieldEditorStrategy - extracted VaadinFieldEditorSourceAdapter from inner class - javadoc and small refactoring for better readability
DRILL-5429: Improve query performance for MapR DB JSON Tables Cache and reuse table and tabletInfo per query instead of fetching them multiple times. Compute rowCount from tabletInfo instead of expensive tableStats call.
#134 adding nested method match functionality including UT after merge with #135
"Replaced CompositeTypeBuilder with CompositeTypeCollection, which is more versatile and useful for getting values back out of a composite type.  Some minor performance fixes, especially fixing the wasteful default implementation of validate() inherited from Cassandra's AbstractType."
BISERVER-5683 - Coding - functionality
"Polish ""Ensure compatibility with Spring Session module split"""
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer
Hash Join In-Memory functionality
"POULPE-469 Testcoverage and refactoring for Database backup functionality - testcoverage for classes: HeaderAndDataAwareCommand, AddForeignKeysCommand and CreateTableCommand"
performance improvements + tests
Fix most (but not yet all) compatibility problems wrt latest databind updates in 3.x
Extracted tests into TCKs for Asynchronous and Scheduling SPIs for reuse by all providers to ensure continued compatibility
"Add a map of <type, Beans that are assignable to the type> to TypeSafeBeanResolver This provides a large boost to the resolver's performance when there are a large number of beans"
PRD-4921 - Minor Excel performance tweaks
Fixed robustness of namespace handling for buffered WFS GetFeature responses
OPLA: improved performance with variable management (avoiding copy for most of the cases)
chore(jobExecutor): extensibility of DecrementJobRetriesCmd
adding catalog functionality
"Several changes. Big improvement in the performances of the XmlRegionAnalyzer. Link the component implementation and the user interface. Implement the ""Show WSDL"" dialog. Remove useless elements in the registry browser. Refactor the code so that maintenance remains easy."
LILY-505: added functionality in hbase-index to allow reading index fields from query results. This has the advantage of not having to duplicate the variant properties pattern in the data section of the index entries.
InvestmentAllocation: switch to millis accuracy (from micros accuracy) because standard deviation formula multiplies 5 numbers and for simplicity we want it to fit into a long.
Added label functionality
MAHOUT-648 API-changes for optimizing recommender performance in some usecases
"Very crude implementation of writing BAM 'schedules' to disk rather that 'meta- indexes'.  Not yet elegant, but proves that it circumvents the performance issues associated with the meta-index."
Move common storage functionality out of the cueball package
Hack to improve performance on first turn
Improved the scalability in terms of memory footprint.
Use local SonarQube ZIP in performance and upgrade tests
1. optimized transaction usage in model api  to improve performance 2. more fixing on aggregation adjustion algorithm for some edge case
DDF-22 Added QueryByID functionality
Added vertex centric index handling to SimpleVertexQueryProcessor for further performance improvements.
TURMERIC-1332: Refactor maven core plugin into core and ui. Moved all UI related functionality out of the core. Remove api and core from utils feature. Add maven ui plugin as dependency for functional tests.
NMS-9128: Add missing filter bits and remove functionality to create layer with unassigned nodes
Fix TED #15102 - 200% performance degradation found while rendering 2D+ bar chart html report
extract functionality to helper
enhanced readability
Fixed robustness of namespace handling for buffered WFS GetFeature responses
"o Added IndexHits#currentScore which exposes the most recently fetched   IndexHits item's score from the search, if any. The lucene-index supports this. o Moved the ""index"" shell app to the shell component where the other kernel apps are,   it was misplaced in lucene-index. o Added QueryContext#topDocs(int) so that you can specify to retrieve only the top N   hits from a search, which may improve performance - even if when retrieving all hits   the iteration all the way down to lucene is done lazily. o Performance improvements regarding the iterator stack which makes up the return IndexHits   instances from query/get methods. Previously there could be 5-7 nested iterators.   Now there are only 3-4. o Added configuration parameter ""similarity"" which controls the Lucene   IndexWriter#setSimilarity(Similarity) for an index. It points out class names."
MS: functionality for setting auto filters
Update Windows process and thread counts to use GetPerformanceInfo() (#143)
"* server can now automatically fetch IP2Country database from the internet and update its local one at runtime * now using some JDK 1.5.0 specific features, dropped compatibility with 1.4.2 * complete rewrite of IP2Country.java (uses generic TreeMap now) * using generics now with some lists (TreeMap<>, ArrayList<>), some other minor modifications"
cp-core connection functionality moved to CoreRemoteManager Restructured assets
"Webadmin: Refactoring move functionallity from poolsdao to domainsdao. This is only a move from one Dao the the other, because the functionality of getting namedCells and sending commands to cells just much more belongs to the domainsdao than the poolsdao."
"* d/control: update version constraint on maven-repo-helper   (Closes: #657889) * Update the build to use junit 4 * Refactor code in maven-packager-util and fix reading of output   from dpkg and apt-file * Keep improving usability of mh_make (Closes: #638782, #641266) * Remove Michael Koch from the list of uploaders. Thanks for your   work! (Closes: #654110) * Remove BSD license from the list of licenses stored in   /usr/share/common-licenses (Closes: #641301) * When the jar is installed in /usr/share/java, use symlinks in the   repository to avoid duplication of the jar contents (Closes: #665799) * Rename plugin maven-debian-plugin as debian-maven-plugin to adhere to   Maven naming conventions."
Added Share Project functionality from Layer Tree Menu
ERRAI-1070: MarshallerGeneratorFactory optimization for performance and js size.
Bug 331049 [Compatibility] IWorkbenchPage's hideView(IViewPart) and hideView(IViewPartReference) methods do not consider multi-instance views
"More read/write functionality, move in name enumeration markers refs #602"
initial basic client shell functionality
Adding schemaToProtoDescriptor functionality with tests
webadmin: iSCSI target list scalability
#35 Horrible performance in case of thousands of deleted files
Updated with edit functionality
Added functionality for merging the CT with the repository that has just been pushed to. This has not been tested.
More typesystem functionality
"- small ""fixes"" in GrateView service:   1) now uses the DigitalObjectUtils.createZipTypeDigOb method to create a DigOb from a zip.   2) changed the output type to IMA - refactored the VfdWrapper- and *Result to VirtualFloppyDrive.  - Performance tweak in DioscuriPnmToPngMigration service:   1) The service now creates a batch file for MS-DOS that converts the input file to a       file on the ""harddisk"" in the Emulator, deletes the input file from the floppy disk to free some space      and copies the result file from the harddisk to floppy. Afterwards the file on the harddisk is deleted as well...   That should help for the conversion of larger files. Will do more testing to find out where the limit is now ;-)"
add build offers functionality call offer service from offer activity
http://www.caret.cam.ac.uk/jira/browse/CTL-584 Fixes to improve efficiency of the summary page Reduced some of the warning logging Added DAO methods and related tests to check for reports viewing
Updates to reporting layer as more functionality migrated into kenyacore * Updated to latest kenyacore 0.10 and kenyadq 0.2
"fragments + tests: toolbar fragment deleted, tests refactored with performance improvement"
"[Search Filter] Improve performance and fix ""Show All"" Folders state"
Optionally buffer AGRepositoryConnection.add() for efficiency
RAVE-37 make email address a required field in the registration process (for future 'forgot password' functionality)
Disabled the spell checking performance test as there is no assertion to check.
added functionality for left and right game recyclebin setup
HSEARCH-2813 Rename hibernate-search-performance-engine to hibernate-search-performance-engine-lucene
Two changes to improve the performance of the conformance rules.
"- Reduced number of generic Exceptions - Merged duplicated code into loops - Reduced code complexity, increased scalability - Moved Status to public type (separate file) - Linked page footer to github project - Replaces number of counters with Map that keeps all values in single instance and allow to extend for new one - Updated tests so they don't mix skipped and pending results - Updated colors so Skipped/Pending/Undefined/Missing use the same yellow background color - each chart presents all kind of results (not only pass/fail) - fixed colors so they are the same on each page and chart - updated some tests to make them deterministic and simpler"
WINDUP-542: Fix severe regression in AST performance
"[GSCOLLECT-1369] Add additional JMH based performance tests for parallel-lazy algorithms using Java 8 Streams, Scala, and GS Collections."
Changed behaviour in LuceneIndex#query() to not throw exception if modifications has been made since it goes against common sense. Instead it strives to return correct answers if not specifically told not to do that (via QueryContext#tradeCorrectnessForSpeed()).
Allow caller to manage resulting AlertDialog. Also use CharSequence for a tiny bit more flexibility.
[#1250] Activate EditorPane also when connecting remotely with jOOQ Console - minor changes for reusability.
1.optimize the performance of the birt reports 2.revert BirtReportsUploadAction.java
[historyView] Performance second part
"The main menu no longer loads in all subreddit data, just the names (massive performance boost!)"
"Improve find-issues performance by adding boolean field ""hasEvaluations"" to DbIssue. Seems that JDO doesn't store ANYTHING in DbIssue referring to its DbEvaluations, so even issue.getEvaluations().isEmpty() results in a query which takes at best 15ms. As there is no eager loading (JOIN) functionality in App Engine, this may be the best we can do - optimize for the case of an issue with zero evaluations."
HBASE-17994 Add async client test to Performance Evaluation tool
Bug 407174 - Git log performance very slow
"JC: Code was assuming clockwise ordering of vertices, changed to use ccw. Added new methods and functionality to handle the indexed coordinates, normals and colors. Colors seem to be not functioning correctly right now"
Add configurability for exemption settings.
[DROOLS-64] Trait Performance and fixes
updated functionality and now with felix annotations
"all tests pass, and I've managed to improve performance a fair bit. Probably still a bit left in compareTo(..) that can be improved, and maybe in the normalization logic. It'd be nice to be able to silence version parts as I parse, but I'd have to parse backward for that."
Refactor BundleVersionsHash to make it easier for external code to invoke the hash functionality.
Updates for performance - removed needless regex matching
TRUNK-2896: change functionality of isObsGrouping method to return hasGroupMembers(true) instead of hasGroupMembers(false) TRUNK-2901: Obs.newInstance() method should include both voided and non-voided group member obs
"cleaned up the profusion of methods in OrientDB implementation. Removed exists(), open(), create() and put all that functionality into the constructor. Trying to keep the implementation as specific to Blueprints as possible so as not to allow users to depend on non interface based methods. TransactionsTestSuite still causing a problem with concurrent modification of HashMap."
Refactored QueryStage - most of the functionality moved to reusable classes
Extended the transformation assistant with new utility functionality for finding the enclosing statement of a node
Refactoring for better code and performance
updated Tiles support for Tiles 2.1 compatibility (SPR-5411)
Moreflexibility
More comments; slightly more performance.
"Renamed MessageBox to Dialog, better describes the functionality."
XWIKI-7571: Improve maintenance and stability of IRC Bot Application  * Added script service  * Continue code dev  * Added functional tests skeleton
"s/autoclosable/closable for java 6 compatibility, add rudimentary performance test"
HBASE-7156 Add Data Block Encoding and -D opts to Performance Evaluation
"JavaCL: test correctness of FFT and DFT against Apache Commons Math's FastFourierTransform, for various input lengths."
Updated DOI Minting functionality to work with the new template.
MODE-1065 Improved performance of the GraphNamespaceRegistry and the ModeShapeEngine and JcrEngine startup
Added tests for Code Review functionality
Performance improvements
Integration test for publishing functionality
fix performance tests
Performance opitimized
[ALLUXIO-2565] Improve concurrent UFS read efficiency PR5 (#4870)
"Add RowMapper.memoize(ResultSet,StatementContext) method so dynamic mappers like e.g. BeanMapper can optimize for performance."
"Bugfix for property updates while in grouped rule mode, enabled multi-select in rule list - users can modify priority levels via new popup menu, bugfix for multi-value renderers, new RuleSelection class.  I'm still waiting for usability/feature feedback comments!"
Add history feature; group some functionality into subpackages
"[HER-1546] Springify(5): Update checkpointing to work smoothly with spring-configured crawls processor-related bean checkpoint support: * Processor.java     implement Checkpointable and BeanNameAware; methods to support JSON state-saving * DispositionChain.java     implement Checkpointable and during-checkpoint disposition-lockout for state stability * **Extractor**.java     pull common reporting & checkpointing up to Extractor.java * WriterPoolProcessor.java     implement Checkpointable; freeze and roll writer-pool during checkpoint * PersistLogProcessor.java     roll log on checkpoint * TextSeedModule.java, SeedModule.java     eliminate obsolete (and probably unnecessary) checkpoint support * (others)     adapt to above changes          "
"code reorganization, moved files around to better seperate functionality"
New search and searchInView functionallity and correspondig searchFrom and searchInViewFrom. Some small performance tweaks
Tuned performance of configuration element comparison
WINDUP-617: Added class-not-found reporting functionality
Change public display map print functionality
"factored out field retrieved + validator, already got similar functionality in jarb-utils"
"Move Andrey's old indel code (plus MSG accuracy test, which depends on it) to archive."
"Performance tuning, improve workaround for bukkit scheduler bugs"
"[MOD] XQuery Update: performance optimizations, better update counter "
Some changes on custom methods for compatibility.
"replace test inheritance by @Rule, adapt CompatibilitySuite to work accordingly"
DDF-2900 Added proximity search functionality to the internal UI CQL query service
Majorly improved stability with groups and associated commands.
"Minor changes to auto-upgrade functionality, added secureUrl for secure login and upgraded Acegi to 1.0.1."
Merge some functionality down from old cartographer data-manager API
Initial drop for performance test suite.
* extensibility of current DLTK functionality.
Fixes to looks and functionality of network pane.
Improved readability of Authenticator.java
TEZ-3269. Provide basic fair routing and scheduling functionality via custom VertexManager and EdgeManager.
FACES-2018 Develop new PostConstructApplicationConfigEvent (backport compatibility layer)
Moved demo app for testing GWT functionality into separate module
"Reverted undo functionality, benchmark results reloading, minor fixes"
Removed references to WritableEntity to allow flexibility in entities inheriting alternative classes Moved some databaes properties into application.properties Refactored property names Documented properties Various Spring and properties changes to support latest JBoss and MySQL Changed default database properties to database.prod.properties Minor API changes Changed id-generation to AUTO to support different databases Beautified login form slightly Removed requirement to register in demo Added confirm message when to-many items are added to parent entity Upgraded to vaadin 6.8.0 Fixed bug in clearing fields with attached PropertyFormatter
Added functionality to export files.
"Bugfix for jms performance in async case, add support for using work queues"
s/productivity/contrib/ 
update performance test
Numerous performance improvements to Engine performance.
"Cleanup of performance monitoring, custom json serializers, and CLI display support."
"Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (renamed several classes, removed unused functionality, added additional test to improve coverage)"
- Changed spelling of 'dispersal' to 'disbursal' - Added UI path for 'RedoLoan' functionality - Modified DateTag to allow for indexing functionality
Share calls to getContextClassLoader as much as possible for performance
JFG-385 + add new level for monitoring plots + database : fetch monitoringPlots + links with back compatibility
 Added functionality to add new accounts. Fixed a bug with disconnection at the time that application exits. All working now.
Improving performance with threads
Increased test coverage and readability. Removed encoder from keywords.  Encoding should be addressed consistently in JBEHAVE-275.
#NAME?
"Refactored the wish list controller name, added ability for wish list operations to occur on multiple wish lists, first draft of add to wish list functionality"
Another small readability improvement in MakeDeclaredNamesUnique.
"- Added MonitoredService, ServiceStatus and RolledUpMonitoredService - removed Monitorable Interface, NamedMonitorable and RolledUpStatus - Replaced @Monitorable with @PerformanceMonitor - Modified breakers to implement MonitoredService rather than Monitorable - Many thanks to Wally Eggert for this submission against issue #44"
Moved start/kill Agents functionality to Coordinator. Removed start Agents functionality from --restart and renamed the cli command to --install. General cleanup of Provisioner cli commands and help texts.
Reverted correct size() calculation because of the performance penalty that would come with it. A solution to/existence of size() will have to revisited later
ACCUMULO-1654 Fixed a bug where keys and IVs from encrypted files were not always entirely read before being used. Found this bug in longevity testing. Also adds a key management strategy that caches keys retrieved from HDFS for better performance.
#NAME?
Fix getRawDef performance @bug W-3003110@
CLEREZZA-930: Improved scalability + clean up
"Refactored metadata management * Metadata belonging to different functionality areas (i.e. common, hiv) now in separate classes * Moved constants into same file as installation"
Added some of the functionality for the Monte Carlo CDS portfolio loss model (needs testing)
Making helpers more Clojure-esque for simplicity
Refactoring and complete task functionality for Client.
Renamed InterceptedHtmlGridCellRenderer to FieldDataGridCellRenderer to properly reflect its function. Added use of InterceptedHtml to the renderer so that the standard Chime mouse hover functionality is seen in data displayed by the renderer.
increase robustness and verbosity under error conditions
readability improvements
"Renaming, adjusting decision tree builder functionality"
"DDF-469: javadoc on ResourceCacheInterface, 0 max size translates to max size not being enforced, improved performance of tests."
"DRILL-2245: Clean up query setup and execution kickoff in Foreman/WorkManager in order to ensure consistent handling, and avoid hangs and races, with the goal of improving Drillbit robustness."
Added Log4j XML configurability to BootStrapper.
ERRAI-979: Provide functionality for CSRF protection
"some minor edits, shouldn't cause any change in functionality"
MIFOS-3046: support change password for first time user functionality which appears post authentication success
Performance improved
Tidied up enter/edit form pages and fragments * Moved discard button functionality into enterHtmlForm fragement instead of duplicating it * Moved fragments into .form subpackage
"Again many changes towards a better configurability of structr and its core parts, moving configuration entirely into the structr.conf. Added automatic UUID creation, removed UuidCreationTransformation in abstract base classes, many changes, work in progress."
ACT-1458: and some final touches to the Explorer suspend/activation functionality
Finished OverView and minimum functionality! Woo!
1. StackWidget vaadin 7 client parts created. Min-max functionality ported to vaadin 7 but don't work until ExtendedVerticalLayout fully ported. 2. BoundsInfoVerticalLayout renamed to ExtendedVerticalLayout and moved to ort.semanticsoft.vaaclipse.widgets bundle and package. Ported to vaadin 7.
Dependency Fixing: Added LaxHttpParser which can be used explicitly when using the lax header parsing functionality. Added HttpParser which just extends LaxHttpParser in the original httpclient package to avoid breaking compatibility with code which may still reference HttpParser. Explicit commons code changed to use LaxHttpParser in arc/warc record reading
#NAME?
improve readability
"DRILL-315: Parquet/JSON selective column read, parquet performance evaluation code from Jacques. Requested columns are specified in physical plans, logical scan operations will be modified by the optimizer as it analyzes the rest of the query graph to decide which columns are needed. This still needs to be added to the optimizer."
improve test stability closes #368
Improving performance of getAllInterfaces per LANG-500's patch from Pino Silvaggio
refactoring; generalizing mapping loading functionality;
Added compatibility with the new SpoutAPI
JBEHAVE-976:  Pulled up common functionality to IndexWithBreadcrumbs.
* Start bringing samples up to speed with 4.0 * Add 'compat-lib' plugin which will provide the action bar to users of the compatibility library (ala v3.x) * ActionBarSherlock content methods now properly dispatch content changed events to the Window callback.
"Renamed JPA entities package to better suite its purpose. Introduced JPA entity base class to contain common functionality like id, versioning, etc. Reduced web app  session timeout from 30 to 10 minutes."
EMBRYO-22: Fixed incompatibility between Shiro and CDI
Bug 343907 [Compatibility] opening the empty perspective causes NPE
svn merge -r 1359774:1359777 FIXES: HADOOP-8525. Provide Improved Traceability for Configuration (bobby)
Factor some bits out into call down methods so that we can do other performance tracking.
Version 0.3 fixes lessc compatibility.
GSA-515 Nanoscheduler GSA-551 / Optimize nanoScheduling performance of UnifiedGenotyper
"refactored query client to match ""design"" of capture client (no new functionality)"
Changed functionality to provide easier use of CodeViewer
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Remove Event Listener and instead introduced BotManager. The idea is that wiki Bot listeners are started when the bot is started and stopped when it's stopped. * Reorg stuff a bit * Fix some bugs
"Implemented caching (with synchronisation) of #isNil, #head and #tail in order to ensure repeatability and thread safety."
SF #1762836: Extensibility for Custom Launch Types
"CSPACE-1237 Update work for multiple sections. Existing tests now pass with new work, but no test for added functionality yet."
"Added rollback-demo for demo2 in demo2.MainRollback, refactored RollbackPrevayler some more for performance and simplicity."
restored e3.2 api compatibility
Avoid loading cobertura classes twice when testing legacy compatibility
#NAME?
"Adding more flexibility by letting the client override metricKey,metricValue and metric properties from config file with the use of regular expressions"
Performance Test - Enhanced the test to have more command line options
"HIVE-15947: Enhance Templeton service job operations reliability (Subramanyam Pattipaka, reviewed by Daniel Dai)"
Added functionality to store the sentenses in database and modified the the schema.
Add goog.reflect.objectProperty as a first class primitive with the same functionality as JSCompiler_renameProperty.
Bug 380946 - [Commands] [Compatibility] helpContextId not registered for legacy handlers
stability improvements to both human task and kSessionServices
Fix to enable anonymous inner classes as Enums for functionality
[BLEEDING] Fixes and additions for the compatibility layer.
Extensibility enhancements 
"[stroy 2] implemeted functionality, need to further refactor"
[performance][favorite]
Use WMI queries for raw data in preference to maintaining Performance Data Helper threads (#199)
"JBRULES-2615: Drools Grid Services remove unnessary dependencies 	- removing not needed deps + little refactors to improve the usability, still need comments"
Improve volume rendering efficiency.
MAPREDUCE-5159. Change ValueAggregatorJob to add APIs which can support binary compatibility with hadoop-1 examples. Contributed by Zhijie Shen. svn merge --ignore-ancestry -c 1480394 ../../trunk/
New class System2 to increase testability of classes that call low-level system methods
HIVE-2275. Revert HIVE-2219 and apply correct patch to improve the efficiency of dropping multiple partitions (Sohan Jain via pauly)
Fixed a few bugs related to remote proxy Session management (exceptions not properly propagating to the correct layer).  Added some performance enhancements in the DelegatingWebSecurityManager to cache the session on a thread-local instead of regularly accessing the back-end system avoiding network round-trips where possible.
Ticket#33: Removed values used to encode an enum from the definition - reducing coupling and improving forward compatibility.
Changed test status to be an enum instead of a String for compatibility reasons.
"Code clean, improve performances"
updated web services API for user groups; complete functionality of the API is pending the completion of PLFM-166
Move filetype recognition from productivity metric to the core; use it in wc metric. 
 added functionality to send email once user account request is sent - raf
Increase EdgeListDatabase panel settings reliability. Validation of fields.
"JGRP-66 Perf improvements for TCP1_4 (NIO) and NIO-based ConnectionTable. Performance improvement, e.g. through use of thread pools (excutors for util.concurrent). Using NIO for accept, reading and writing."
Slight refactor for readability
Add consolidation functionality[#389]
MITM performance improvements. New interface HashAlgorithm. Pre-built collisions file resolved by collision generator class name.
fixed issues related to run time hibernate exception.  made change for performance optimization. added more logs
moved unzip functionality to FileUtils
"Rewriting to use new functionality added by HUDSON-6598, and incorporating HUDSON-5083"
Improve reading performance by using a buffer
[added] functionality to choose whether a search term must be found exactly or if a submatch is sufficient [refactored] code to pain identifier and metadata nodes
Total rewrite of the isGATKLite() functionality with help of Khalid/David.  PluginManager was not working for us.
Improve testability of Dao
Compatibility update for BKC and changed routines
MODE-1583 - Implemented node-type functionality: - list a registered node type via a GET request - register a CND file via a form or directly through the body of the request
Moved large part of functionality of key retrieval from AccessControlManager over to here. refs #170
Fixes #200 - add assertContainsOnlyKeys functionality
Changed some variables names and improved locking efficiency
Change init type of BackwardCompatibilityTaskCreationTest
DATAGRAPH-872 - Improved compatibility with Spring Transactions and Spring Data.
performance optimizacion (avoid calling containsKey)
performance: reduce database round trips required to load group tree by eliminating N+1 query problem through the use of reporting-style queries and building the object graph in-memory
"FERATURE: added functionality for rewriting CSS @import url() and style=""... url();"" parts of .css and .html pages."
Improved ZooKeeperHostDiscoveryTest readability
Some performance optimisations. Instantiate theorems chosen before PExp created.
"PDF-95 - Force the user to choose a unique filename for the Save As functionality. Also a minor change to the FileExtensionUtils to allow for a String param, instead of just a File."
Issue #61: Implement Prev Track and Next Track functionality
"Basic functionality for intervaled reads in new sharding system.  Not currently filtering out cruft, so the mode of operation is currently queryOverlapping rather than queryContained."
"Major redo of exact AF computation for UnifiedGenotyperV2. Fact of life is, there's no way we can compute an exact QUAL field and keep performing the AF computation in linear probability space. In good sites with lots of samples, the ratio of Pr(AC=K*|D) to Pr(AC=0|D) can be 10^1500 or some ridiculous large number like that, which no double can represent. So, we abandon probablity space and work now in log likelihood space, which has several major repercussions: a) Sites were numerically well behaved now, but another hard fact of life is that the AF iteration is defined in linear Pr space, not in log likelihood space, and the math doesn't work out in log space. So, we need to convert back and forth from lin to log space. b) As a consequence of a), the code got a major slowdown, and calling the 629 samples was about 15 times slower than before (sic). c) To solve b), log10 of integers are now cached at init, and numerical approximations are now made. Most importantly, I'm using the approximation that log(exp(a) + exp(b)) ~= max(a,b) which seems almost inconsequential in practical performance but reduces computation time to what it was before. More detailes analyses are forthcoming. This approximation can be refined further on to avoid expensive log-exp conversions if further profiling and analysis deems it necessary."
"EndDate support in TimeCycle #2184  - endDate should not be used in the calculation of the dueDate  - some JUnit tests added (compatibility tests for the old configuration, endDate tests for StartEvent timer)  - bug fixes: the job dueDate was wrongly calculated so the repeat interval was not respected in some cases."
"Start performance increase phase 1: make as much as possible lazy-init=true, reduce JSR250 processing"
implement index functionality
[SYNCOPE-156] improve topology performance + basic provisioning implementation aspects
"had a silly catch(Exception e) {log(e)}. Also, improving readability and reducing cyclomatic complexity."
"Renaming files from ""ProcessEs6Modules"" to ""Es6RewriteModules"" to improve file organization/readability"
improving the robustness. http://www.nabble.com/slave-not-surviving-server-reboot-to14452705.html
"Can now add performance-tweaking properties to the database hosted by the server. It uses the same neo4j.properties file as the embedded version, but you need to add a property: org.neo4j.server.db.tuning.properties into the neo4j-server.properties file."
ISIS-165: minor refactoring (no change in functionality)
#NAME?
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Renamed again the Notification Event Listener to Document Modified Event Listener  * Added configuration class for the Broken Link Event Listener so that it can be turned off
Deprecate move legacy normlizer classes - functionality better met with SMIRKS (via AMBIT atm)
Enable TCP Route Functionality
- Summary: Anti-aliasing algorithm leads to significant performance degradation in 3D chart rendering(#40269)
Feature #907 : improving unit test performances.
[MIFOS-3168] Added acceptance tests for edit QG functionality
Bug 178587 - [ScrolledComposite] Accessibility: ScrolledComposite widgets don't automatically scroll when controls are tabbed to inside the composite
Added Vob + functionality
fix: RTPEncodingImpl.getBitrateBps() now works with spatial scalability.
YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He. svn merge --ignore-ancestry -c 1601303 ../../trunk/
"Send accuracy updates ONLY to the joining referee. Waste not, want not"
Performance improvements
added includes functionality
Tweaking explain plan range display for better readability
"Added upstream minus, started download sequence functionality"
"Total refactor of the plugin, breaking everything down into nice clean Mojos, adding functionality, cleaning, etc."
Bug 320671 [Compatibility] Resetting the last opened perspective will close all editors
OFC-626 Import XML functionality
"Changing all tests to inherit from ERXTestCase, not TestCase. Adding stub methods to ERXEOAccessUtilitiesTest, ERXECTest. Add functionality to Application, ERXTestUtilities for using model with different adaptors."
replaced byte[] with ByteBuffer in order to ( be able to ) spare memory allocations improved Draft75/76 framing performance
"Reverted the fix of the typo in PSParameter (secificMapKey > specificMapKey), as fixing this ruined backwards compatibility..."
"Implementing all basic functionality. Database connection through Hibernate, mustache for templates and jquery-ui for autocompletion and datepicker."
initial checking of compatibility state fragment
XWIKI-2613: Make XWikiServletURLFactory#getServerURL public * improve macro parameters usability
Moved AffineTransform multiplication methods into Transforms so that performance sensitive callers can make use of them.
Performance tests can be executed so that you get stats for modes:
Spring compatibility testing for Activiti 5 engine
"New features in application engine, Performance enhanced [environement's bounds, agent number's threshold, agent's energy, resources, new parameters in configuration file]"
genericize Sensei to provide flexibility in search code if desired by implementing your own AbstractSenseiNode
Various enhancements to Users usability
Adjusted performance tool
"Admin Forgot Password, Forgot Username, and Reset Password functionality."
project wizard extensibility
Undo recent additions of isDistractor and hasDistractors methods.  Moved functionality to Grading Service
Changes for ONB/Dublin Core-based repository cross-compatibility.
Performance improvement for indexing template based source code.
XWIKI-7012: Improve XWikiExecutorSuite extensibility
"OPENEJB-1801	Improved StickyConnectionStrategy for clustering and failover OPENEJB-1802	Improved RoundRobinConnectionStrategy for clustering and failover OPENEJB-1803	Improved RandomConnectionStrategy for clustering and failover OPENEJB-1804	Client Event API for monitoring connection, clustering and failover activity OPENEJB-1805	All client logging revised and greatly expanded OPENEJB-1806	New ""sticky+random"" ConnectionStrategy OPENEJB-1807	New ""sticky+round"" ConnectionStrategy OPENEJB-1808	Client property 'openejb.client.connection.strategy' can be set as System or InitialContext property OPENEJB-1809	RandomConnectionStrategy fixed reliability issues OPENEJB-1810	Client Event issued when Servers Added/Removed from cluster OPENEJB-1811	Client Event issued on connection Failover and Request Retry OPENEJB-1812	Client Event issued on Configuration change"
Provide backwards compatibility with 1.7.10 and earlier Also update the version to 3.6.4 since this was such a massive change
Record traces for calls to the getProperty non-standard operation. Fix traceability information for calls to traceability-impacting operations located within protected area blocks.
Move header handling to the MetadataProfile. May need to add backwards compatibility handling of old header names.
"Refactored browse patch. Improves performance / reduces db overhead by only have one table for all 'item' browses (with columns for different sorting options). All sorting options are available on *all* 'item' browses - at the top level, changing a ie. from title to issue date, will make all corresponding UI hints follow. Also, maintains a separate table of all withdrawn items. This is currently not exposed in the UI, but can be easily (it's a current feature request)."
Adding ES6 module checks for each warning type in CheckJSDoc pass. Part of verification/adding of ES6 module compatibility to compiler.
"Moved the test maven projects. Updated the s-ramp wagon's ""get"" functionality to bring it in-line with put."
"final fix up for planet manager getEntries() method by group.  basically i am reverting the changes from revision 526464 which allowed a list of groups to be passed in and reverting back to the code from revision 517463.  the code from revision 526464 was introduced to support a legacy way that the Roller Weblogger code was using the planet functionality, but we are going to fix that in a different way instead."
"LBCLASSIC-54  	  - Heavy refactoring of TurboFilters    TurboFilters are now collected in a CopyOnWriteArrayList which is   ensures safe access even if the turbo filter list is modified during   the lifetime of the application      Added test cases to ensure that performance does not degrade in an   uncontrolled fashion      More cleaning up to follow"
"Restructuring string_from_apk and adding functionality to find activity by parsing AndroidManifest.xml, also including latest apk_tool"
major refactoring - moved functionality from board class intro minesweeper class and added console runner for main
"separating out methods to better use jpeg2rdf as a library in other projects - shell operation remains the same, though there may be some level of performance penalty as new intermediate structures are created"
performance F1.1
Rename *PerformanceTest test classes to *LargeScaleTest
Added some super Entity class providing basic functionality
Overload parseIntervalRegion() to allow for the interval merging rule to be passed in (so one is not required to use the value from the GATK arg collection). Now the IndelRealigner can use this functionality without being forced to merge  abutting intervals (which was actually causing a problem with the cleaning).
Compatibility with ZephCore v3.2 - Use improved callback system - Compat for databases and configs
"FTP: Restore Kerberos FTP Door functionality, make Kerberos FTP door work with gPlazma Cell and gPlazma module"
ISPN-5689 Preserve compatibility with Hibernate 5.0.0.Final
Refactors Metric subqueries for a significant performance improvement
Rename variable and increase readability.
Performance fixes (https://bugs.eclipse.org/bugs/show_bug.cgi?id=261677)
Improve XML data import performance
Fix for the external settings functionality
"[OPT] XQuery: Inline nested closures, better performance for functional abstraction."
[102822] Bad performance on XML formatter
Critical RSE usability fixes
"Remove some of the ""OpenOffice"" mentions from the office importer module (without breaking backward compatibility)."
Refactor DefaultSubjectProvider to make it easier to subclass bits of functionality
CAMEL-3123: Fixed performance degration in camel-jetty due type converter lookup falling back to fallback type converters instead of using Jetty specific converters.
Provide default value and customization support to fiscal year functionality in BirtDateTime
Bug #1974 - fixing bad performances on massive contact displaying: - adding Function interface (inspired from functional interfaces of jdk1.8) - loading by a lazily way the UserFull linked to a ContactDetail - using new Function interface from ArrayCellText in order to give the possibility to get the text value only when necessary
Fix #5230: QueryRule equals + integration test method for caching performance measurement (#5239)
Index update operation performance was improved.
"This is a generic update of JMSConnection. It does add a little robustness to JMSConnectionSunMQ, but the major contribution is a simplification, that makes it feasible to try a reconnect on failing sends - this should be addressed in a review, though. The commit also contains a rollback of a faulty update of JMXUtils to do a backup in seconds, on a value that was computed in milliseconds. This made it impossible to wait less than 1000 seconds on JMX timeouts.  There is also a little unit test cleanup."
"ISIS-1194: reinstated TypedOid, required for backward compatibility with isisaddons fullcalendar2 cpt."
Improved performance of rsync over high latency connections
some performance optimisation
"Performance enhancement in setting minId, maxId, and freq for ""dummy"" facet values."
MODE-2323 Removed the proxy layer and delta write functionality in Schematic
Major performance improvement to the GATK engine
"Revamped property listener system to allow for listening for as many properties as you like, globally or to specific holders. This new system uses Annoations in order to provide such functionality, however now keys have to be written out manually in annotations as you cannot pass data to annotations at runtime."
Add fuzzy-search functionality.
"MODE-41 Attached a patch that fully implements the JCR connector with read and write functionality. At this point, only the standard connector tests are used, and the JCR connector passes all of them."
Improve performance
Added compass compile functionality to the compile mojo.
refactored code out of moduleZoom to improve readability
Added the @WhenPageOpens annotation to allow Page Objects to inject extra functionality when a page opens
improved engine readability
XE-1366: Setup regression performance testing
"JC-1449 - Error handling, extracting common functionality to the ImageUploadController"
Working on Remember Me functionality.
"case changes: handles hash collisions, can emit return type, performance path for all-int test constants"
"Added backward compatibility support so that pre JDBC 4, when using an 'Alias', it will still be returned via the ResultSetMetadata.getColumnName.   In JDBC 4, you will need to call ResultSetMetadata.getColumnLabel.      To enable backward support, add the property:  useJDBC4ColumnNameAndLabelSemantics=false to the url connection string."
performance
Introduce API Compatibility Layer between Hadoop 1.x and 2.x. (#250).
"ISIS-1427: renames methods in IsisSystemForTest, rationalizes functionality between IsisSystem and IsisSessionFactory"
The basic functionality has been tested and works.
Compatibility mode is no longer optional -The base datawatcher for a mob is now obtained through reflection -Added a method which can detect if an index has already been set
Added lab testing functionality * Lab tests are defined in an XML resource * labTest custom tag can be added to HFE forms and generate fields for lab tests dynamically
EL container integration; support for contextual objects; removal of deprecated Spring 2.0 functionality; Java 5 code style
Refactored OWS metadata model for OWS Common 2.0 compatibility.
Move all the base functionality of the JobProcessor into a base class and update the Reference classes to use the base. Purpose is to simplify the reference classes.
"Improved message persistance functionality. Messages are now marked as processing, completed or errored and the various metadata associated with each of those is stored to."
Convert pipeline tests to JUnit for simplicity and sonar compatibility.
Improved performance of indexing matchers by lazily creating helper objects
Removed ClientConfiguration to remove some indirections and increase readability of ClientConnector classes.
"First cut of private channel functionality. Authenticates and subscribes fine, added a new PrivateChannelExampleApp that shows it working. Needs more testing and some more error response handling next."
performance enhanced
"Added fix for ClassMapBuilder extensibility (issue#33), along with a test which demonstrates how to extend it; also made ClassMapBuilderFactory abstract, and created a default implementation to make extension simpler. Added fix for issue#50 which inludes a 'byDefault' boolean property on FieldMap to indicate whether it was generated from a default mapping; a FieldMap which was not generated from default is considered an override to any mapping taking from a used mapper Fix to DynamicSuite which filters out non-test classes matched by the regular expression. SourceCodeBuilder: moved check for built-in immutable types to the top of the list -- this reflects how it is done inside of MapperFacadeImpl, and corrects some issues which can occur when setting useBuiltinConverters(true) on the DefaultMapperFactory.Builder"
"Only add ""= undefined"" to LET nodes when it's needed for correctness (i.e. in loops)."
Cleanup GATK efficiency monitor classes
Removed dependencies on the compatibility plugin and replaced deprecated classes and methods. Warning cleanup.
"Got add auction functionality working, including uploading/storing of images in db"
Threaded profile writing to increase performance of WorldChangeEvent handling.  EXTREMELY EXPERIMENTAL!  BACKUP YOUR DATA!
Compatibility with latest spring social snapshot
Add ignore to previously disabled tests. Disable notification performance via system property/assume
Restored score functionality in a hopefully reusable way for other messages on screen
added more comments to readability of code
Add performance mesures on commands and on pmd execution
[RHQ-2270] - fix performance of updatingImplicitResourceGroup against large inventories;
- Added the ability to dexlib to do an annotated dump of the dex file as it is writing it (similiar to the --dump-to functionality in dx) - Other misc refactoring and cleanup in dexlib
Rename (and clean up) PerformanceTestCueballWriter to PerformanceTestCueball
[SUREFIRE] prolonged performance test for sake of build stability
SONAR-7305 Improve performances of WS api/measures/search_history
Enclose in scope functionality for containers and additional attributes
extracted PagingListFragment for common list display and paging functionality
PMD-289: Merged outer join functionality into advanced sql generator
NOJIRA K2 Split up the dev helper service into an abstract and mock to increase testability and reduce work that has to be done in other systems using EB
"JBIDE-1774 - changed wizards and server/runtime impl slightly to more closely match use cases of WTP and it's API, using less internal functionality. "
Added usability suggestions from alpharesearch. Refactored file streaming logic to make it easier to add more features.
Removing unnecessary classes. Small improvements to the jpa store. Enabling performance tests.
ISPN-922 Fix proposal with backwards compatibility - merged into master
[121692] fix for publish performance
Added more RDB functionality to family tree application
CORELIB: Adding functionality to User service
Fixed #415 ... used ? wildcard instead of T for Comparable for compatibility with said classes in issue tracker.
"[GSCOLLECT-1369] Add additional JMH based performance tests for parallel-lazy algorithms using Java 8 Streams, Scala, and GS Collections."
"MONDRIAN: Figure out solve order mode once per query, not each time an evaluator     is pushed. Fixing this performance bug makes the test suite run 30s faster."
"using lucene analyzer, accuracy of 73%"
"s/arquillian-openejb-embedded-4/arquillian-openejb-embedded-5/ to still follow arquillian convention, open question: do we add a arquillian-openejb-embedded-4 depending on arquillian-openejb-embedded-5 for compatibility? do we rename it arquillian-openejb-embedded?"
[WIP mifos-2986] ApplyHolidayChangesTask batch task needs tweaking now that it handles branch level holiday (performance/scalability)
"fix readability of prgressbar, rename jobmetadata, fix tests, fix jobs with status running on startup"
"Add additional checking to ensure that no more than one id set is added as a constraint, as this leads to the best performance on mysql 5.5. Also, consolidate logic for checking against multiple id sets in an evaluation context."
ROO-1831: Improve performance of DBRE - remove DbreTypeResolution service from DbreMetadata
refactoring to improve readability
Ticket #2838 - Addressed inefficiency in StatisticsQueryUtils.getBestExperiments() when used for efo attributes; Imposed new restrictions for API and web queries based on total experiment count for bioentities to be shown in heatmap.
Renaming CheckRequiresForConstructors to CheckMissingAndExtraRequires for readability's sake.
Performance optimizations.
reporting: First successfully working version of ExcelTemplate functionality
Performance improvements for dynamically merging BAMs in read walkers.
webadmin: Cluster compatibility check for volume advanced details
"TEIID-913 changes related to buffering and performance.  removing exceptions from tuplesource close, tweaking to more reasonable defaults, updated buffering to also consider column width, refined the performance of value caching, and allowed partitioning to work over larger sets"
More website updates - basic extensibility/unit testing documented
Finally got around to making compound events actually stick together until they arrive at the client. Mmm... network efficiency++.
[REQS-403] Curve calibration USD: added flexibility to take as inputs for Fed Fund swap based curves and OIS based standard curves the existing hard-coded values or another multi-curve provider from which the input data is computed.
Optimized BitSetUtils (thanks @socram8888); Added some ram read and write methods for compatibility.
"Modified StaticRelationshipResource to improve performance, relationships are now filtered  locally instead of merged with the whole filtered result set from TypeResource."
MNG-5805: Restore binary compatibility
JBIDE-10270: Bring back the 'Show in Forge' functionality 
switched from OGNL to JEXL for expression handling; performance improvents by factor 3-4; cleanup in expression handling and for/each-interation code
#NAME?
Basic revision retrieve functionality and 3 working test cases
Performance issues
MONDRIAN: Change test mechanism so that tests no longer need to call fold();     Reformat strings in test classes to comply with coding standard.     No other functionality changes.
"Made minor changes, to improve performance for ArrayEvent (without hurting MapEvent); eliminated warnings; avoiding byte[] when IPAddress is intended"
"Separated most prompts into the ShellPrompt marker interface, updated some fundamental reliability issues and began java commands implementation"
"De-activate LAX_NULL_HANDLING. We seek compatibility with OCL 2.0, not OCL 1.1."
Added functionality to compress all required and optional files into a single string.
StartPage performance merge - Made GetTutorialVideos a cached mapper.
XWIKI-7240: Add support for special versions qualifiers and version     ranges     TODO:     * a way to check different versions ranges compatibility
 ItEr17S10CUCreacionProxectoPlanificacionItEr16S12: Previous functionality of adding task is now set up using commands support.
Added tests for all suppression functionality
Changed xhr-multipart to use a random boundary marker. Fixed some encoding logic errors. Fixed other logic problems due to API change. Added some testing functionality to the chat example.
performance tweaks
"reverted back to old LoopPipe model in Pipes. However, provided emit functionality."
Simplify internal design and remove compatibility layer from production code. (#6)
JDBC checkin fixing the following bugs:   Fixed support in the driver for notifications (added PGConnection.getNotifications()) - problem reported by Benjamin.Feinstein@guardent.com   Worked around server problems with int8/int2 and constants; quote values when they are intended to bind to an int8/int2 column - reported by many   Fixed bug in the Array interface with string parsing not handling escaped characters correctly - reported by devajx@yahoo.com   Added workaround to support 'infinity' and '-infinity' for dates - reported bydmitry@openratings.com   Fixed some performance issues with setBlob - reported by d.wall@computer.org   Added support for using new prepared statements functionality in 7.3 (added PGStatement.setUseServerPrepare() and isUseServerPrepare() methods)
fixed performance issue for multi-time loading i18n in table tag
" 	 LBGENERAL-23  	   	 Working on the reliability of the extracted package information which is actually quite a difficult problem."
37884 Show Type hierarchy scalability problem
"Added insert/update functionality, fixed minor bugs, "
performance: check on set of values since string may or may not have spaces
"adding functionality to select tasks, display a task list and navigate to task forms in process applications"
Make UIResponder and UIImage implement UIAccessibility (fixes #948).
Bug 342697: [perf test] org.eclipse.jdt.text.tests.performance.EventDrivenTestSuite doesn't run on second windows machine
Renamed package to better suite its functionality.
"Downloads updates from dev.bukkit.org, also switched back to ChatEvent to keep compatibility with most servers."
Bug 299385 -  [UI] clean up errors in compatibility workbench Changes to support the extended compat layer
"TEIID-394: removed verbose methods on the VMControllerInterface. Functionality wise we only lost runGC, but that be done using jmx bean"
"MS: added ""save as"" functionality; fixed determination of bounding box when reading from worksheet"
Compatibility update for CraftBukkit 1.5 R0.1
[136935] Backed out performance fix because it caused a regression when dealing with non 8 bit character sets.
Made methods public for junit-testability
Tidying for traceability
"adjusted method declarations, chunked out code for readability, slightly adjusted classloader acquisition"
Major rework of target functionality
"New dungeon region storage method, for a huge performance and file size improvement"
"issue #245: Javascript now works as one would expect it ( without the "".static"" ) but is kind of slow from a performance standpoint, fixed package name for JavascriptLanguageSupport, fixed examples"
feat(engine): add functionality to purge db and cache
Performance enhancement.  Updates the view tab only if the local change manager changes.
- Indexbuilder & Loader API refactoring: commands instead of methods - Array design loader's gene identifier property made configurable through admin UI - Update index for experiment command support in indexbuild - Update index for experiment button functionality in admin UI - Repair experiment button functionality in admin UI 
Added functionality to remove a single task; fixed some abort/suspend interaction bugs (issue #373)
Bug 305038 -  [Performance] E4 is much slower than the legacy code
Adds Metrics and PerformanceLog to the client.
"Created extended properties provider for model objects; added ""create"" and ""edit"" functionality to ComboObjectEditor"
SOAP-2335 Thread pool (Executer service) support for analytics + removed unnecessary disable functionality
Fix inefficiency in FilePointer GenomeLoc validation
[OPENENGSB-1748] increased readability of the converting EDBObject -> Domain Model a little bit
Improves order performance query analyzer to recognize any comparisons.
Extract out Graphite HTTP functionality
Add performance tests for JSON serialization over rexpro.
HBASE-12127 Move the core Connection creation functionality into ConnectionFactory (Solomon Duskis)
"High performance version of standard vcf writer.  New general static Tribble class for common constants, including general .idx constant and functions to get standard index name for a given file."
Made a series of performance improvements to the RPC service and started to add java doc
Restructuring project to fit with standard Maven structure. This is just a restructure to simplify the POM as well as make the project fit in with regular Maven-ized projects.  Also adding in the structure for automated tests so that we can take advantage of that when Jenkins kicks off our job.  This will become very important if we start publishing APIs and events for external plugins as we want to make sure to maintain some stability for those external interfaces.
Bug 298671 Implement enough compatibility to bring up a simple view
"MODE-2185 Removed the ModeShape REST client (modeshape-web-jcr-rest-client module). The functionality required by the remote JDBC Driver was moved to the modeshape-jdbc package and a new, lightweight client created which only performs the functionality required by the driver."
Added valueType and primitiveValueType functionality
"[issue:0002162]  Kartierabschnittsübersicht wird jetzt aktualisiert, wenn sich das Bean ändert und ein paar Performanceverbesserungen"
229494: ExpandableComposite/Section accessibility
"JERSEY-2606: ""Monitoring statistics performance improvements"""
various performance optimizations
1000x performance improvements to MSG for crisis control
JBIDE-20580 Performance: EL resolvers unnecessarily create a lot of empty ArrayList instances
HIBSPA-84 Fixed stability issue.
Completely efactored to make it easy to add new custom MimeDetectors. Also depricated the eu.medsea.util.MimeUtil class and created the replacement class eu.medsea.mimeutil.MimeUtil class with much extended functionality
DDF-1196 Improved performance of security
Wishlist functionality
AVRO-753. Java: Improve BinaryEncoder Performance.
"- Summary: [Accessibility]Title Format Dialog, press ""Tab"" button, can not focus on ""Outline"" block"
Implements incremental edit distance calculation and performance improvements.
HBASE-5416 Improve performance of scans with some kind of filters (Max Lapan and Sergey)
Abstracted the common functionality of the AutoIndexers to a common superclass
"[GSCOLLECT-1369] Add additional JMH based performance tests for parallel-lazy algorithms using Java 8 Streams, Scala, and GS Collections."
added comment simple statement. a comment is a single line proceded by a pound symbol. did some tinkering with the gremlin functions---learning more about XPath and trying to emulate some of the XPath 2.0 functionality.
Improve performance of testdriver testcases (#452).
Introduced Unlocker for resolving a concurrency problem and improving unlock operation stability
"NXP-15050: enable optims on UIAliasHolder tag, keeping alias variable mappers in a request-scoped managed bean, and creating a component on specific use cases (or when compatibility mode is used, in case logics do not fit some applications)"
"Revert ""Reverting the performance tests added recently until it builds cleanly"""
MIFOS-3868: refactor adjust last transaction functionality with respect to interest calculation.
Refactored FilterFunctionalityContext.
Make a performance enhancement for time function calculator.
More performance enhancements.
Moving duplicate functionality for removing users to the controller only
Simplied configuration by removing unnessary summarized entry functionality.
Waiting more time to EE start on ScalabilityExperiment
"many changes, introduced JavaScriptMinifierMojo, but unable to figure out how to run it correctly with multiple maven goals in the same plugin project Moved some functionality to various supporting classes like FileUtilities Changed some parameter names Updated documentation JavaScriptMinification now takes a fileset or a directory"
"Add tests for Email functionality. Resolve minor issues with email functionality. Resolve issue with test failing. Update Java Mail library, Apache CXF. Code refactoring."
"Basic functionality, serialization error"
add configurability to centric plugin
chat functionality improved
"Added batch search operations, which improves performance substantially."
compatibility fix for modified API
"Added functionality to null out properties on form beans that either were submitted as null, or were on the page but not submitted at all."
Move more functionality to DelegatedMatrix
Add compatibility option to preserve original behaviour
Bug 514708 - Performance improvement indexer by caching Strings.
add easier support for ajax loading indicators + support NSArray and List type (for 5.2 compatibility)
"HV-755 Extracting overrides functionality into ReflectionHelper and making use of it in ValidationExtension to properly detect all override cases, especially the ones using generics."
"MAHOUT-270: completed update to ClusterDumper and added a unit test of Canopy, KMeans and Dirichlet all using the ClusterDumper basic functionality. More to polish but this is working"
Optimized performance for Collect Mobile.
Fix ReplaceActionsTest instability
performance improvements.
"* Improved shutdown of Coordinator * Added new CommandLineExitException to properly handle System.exit(1) cases * Added CliUtils to parse and init command line arguments * Separated concerns of Coordinator, FailureMonitor and PerformanceMonitor * Encapsulated thread in FailureMonitor"
Moved committing to a separate method. Try to improve performance by making open flag volatile in stead of synchronizing access
Refactored the nio implementation to depend only in the interfaces Journal and JournalRecord. Decoupled NioJournalRecord and NioJournalFileRecord from each other. General code cleanup. Achieved small performance gain of ~10-20% by the decoupling and dependency removal.
More work on using changesets to find nodes for ways. Fixed one bug and improved logging information for performance statistics. For larger datasets the changeset approach improves node search times by 2.5 times.
"Added functionality to allow for a contract between LocusWindowTraversalEngine and LocusWindowWalker which allows the Walker to act upon reads outside of the provided intervals. (Really, all we want to do is spit out all reads, but this allows the Walker to do other things with the reads if it wants)"
https://issues.jboss.org/browse/RF-10239 https://issues.jboss.org/browse/RF-10187 Performance optimization: - getClientId() replaced with getClientId(FacesCoontext) - Joiner replaced with FastJoiner
More implementation changes to accomodate cluster context management. This one is almost the final major change. The rest of the changes will now involve configurability of the cluster configuration properties in the jboss-ejb-client.properties
[Shapes] - Improve compatibility with traits ans simple relational databases
improved timesync extension so that it measures accuracy and makes lag available to the client
Bug 317311 [Compatibility] Cannot spawn new console
MAHOUT-236: - removed output directory deletion from DirichletDriver.writeInitialState - added runClustering option to KmeansDriver and MeanShiftCanopyDriver - refactored methods from MeanShiftCanopyJob into MeanShiftCanopyDriver and removed job - adjusted TestKmeansClustering and TestMeanShift - adjusted synthetic control examples to employ ClusterDumper of outputs - adjusted TestClusterDumper and TestDCbwEvaluator for KMeans and MeanShift job api changes - decreased number of iterations in unit tests to improve performance - all tests run
performance improvements
"New functionality, so that we take arbitrary properties and support form posts"
Leica LEI: improve setId performance
[93033]: Fixing performance problems. Updating the caching of server modules. Committed for MDE.
"fixing bug #3082, modifying the Gallery application - increasing performance on massive photo updates and deletes - increasing performance of metadata loading - unselection problem fix"
increase Datasource command performance. fixed function placeholder bug.
Performance tests can be executed so that you get stats for modes:
"TEIIDDES-1148 - Further checking was added to the AddToRegistry functionality.  If a MED with the same prefix is already registered, the user now has the option to update it (if it is different than the currently registered MED)."
"Removed the Xalan XPathExpression, since Xalan *is* JAXP 1.3. Added NodeMapper functionality to XPathExpression."
[WFLY-4585] Provide JMS forward compatibility
changes for readability
Minor performance improvements.
HSEARCH-2830 Add a performance test for stream writes
Performance improvements when arguments mismatch is disabled.
removed custom code that duplicates functionality of guava fallbacks
SOC-2372  Find People : native english usability review.
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer
Bug 270791: - made fingerprint testOpenObjectHierarchy2() more robust (repeat 10 times) - assertPerformanceInAbsoluteBand for cold tests
#NAME?
Started working on MOTAP functionality
mbox-import tool: improve performance of MboxInputStream
Update JSCompatibility to seamlessly encode field names upon exiting Spring MVC and unencode field names upon entering Spring MVC.
Remove some printlns in the tests Cleanup some of the synchronized blocks for slightly better performance
improved Date property parse performance.
Make the performance test work by tapping into the Sinks registered with the output ports.
BISERVER-5683 - Coding - functionality
Reliability update for fire/lava/burn suppression. Cancel after shutdown task when gate is dialed if task is running.
#NAME?
Committed Benno's patch to fix bug 113247: [performance] investigate using a range index in AnnotationPainter or AnnotationModel
New Feature: [IST CareerWorkshop]: Confirmations functionality added.
Remove PluginFinder annotation functionality
Trying to fix incompatibility of handlings png on Windows and Mac (second try)
Merge the Android Compatibility Library r2 sources.
Extend AS boxing functionality to also allow getting the imports togetherf
refactor for CRS functionality
Performance improvement when scanning for client exception mappers
Accessibility update
Added Modal on viewinstance.jsp Added delete message functionality Made RequirementInstance Comparable
"Allow hosts to decide if a player can join the battle, instead of having to auto-kick him each time he joins This has been tested, and it is totally backwards compatible with lobby clients which do not handle it. Changes: * LOGIN command updated for new compatibility flag * JOINBATTLEREQUEST/JOINBATTLEACCEPT/JOINBATTLEDENY commands added in ProtocolDescription.xml patch by bibim"
Fix compatibility of dry run mode with Oracle
Fixed  a bug related to getDocs By Id functionality
HIVE-17147: Vectorization: Add code for testing MapJoin operator in isolation and measuring its performance with JMH (Matt McCline via Prasanth Jayachandran)
various functionality for Alfresco support
Implemented method switching functionality in request window (SOAP-371)
Working on data service functionality.
Fixes traceability for queries
Added nextMatchingSubstring functionality
#NAME?
More performance improvements on message/avp parsing.
! refactor the AuthToken to remove role/privilege pattern from the AuthToken (AuthToken is not the right place to have this functionality)
[OPENENGSB-3663] improved model query performance
NOJIRA Adding AJAX functionality to calendar list.
backend: fixing a typo in canNetworkCompatibilityBeDecreased
Test stability fixes related to job scheduling/resource changes etc
"rhq-573 Changes to inventory sync with respect to actions taken for server requested sync and newlyCommitted resources as opposed to other sync use cases.  server-side sync requests limited to status change and more agent-side logic used to determine actions to take, given more robust syncInfo agent-side. Maintains async approach to deferring schedule creation and alert template application for imported resources, to ensure best performance server-side for large imports."
ISPN-4474 ISPN-4473 Get remote events working in compatibility mode
ISPN-3668 Lucene index performance regression test
Bug 298671 Implement enough compatibility to bring up a simple view
HBASE-660 [Migration] addColumn/deleteColumn functionality in MetaUtils
Extend import grouping functionality to allow groups to be specified.
"Rework of the blobstore functionality where blobs can only be accessed through the record they are used in and not directly by using their blob key. The general idea is that, to enable introducing record-level access control in the future, blobs should only be accessed through the record they are used in (via the repository API) and not directly using their blob key. Only in the very initial phase, where blobs are uploaded to the blobstore, can they exist without being part of a record. Before a blob can be used in a record it must have been uploaded to the blobstore. During a certain amount of time (e.g. 1 hour) the uploaded blob can then be used in a record. If after that time the blob was not used in a record it will become unavailable and will be removed from the blobstore. Blobs can be re-used, but only within different versions (also non-sequential ones) of the same field of the same record. Blobs cannot belong to multiple records or multiple fields at the same time."
Readability tweaks
Made performance tests more robust
Adding Image in Column header functionality
Changed SuperRegion primary key to Name and added more SuperRegion functionality
"make naive bayes working, 99% accuracy on twenty newsgroup with tf-idf."
HADOOP-1990 Regression test instability affects nightly and patch builds
retrocompatibility restored with old apu
Backwards compatibility fix
"Added copyright to everything, via the clever IDEA functionality."
[MRM-1283] improve performance of on-demand resolution from storage. Still could be improved.
Fix for jms performance
Bug 441726 - JDT performance regression due to bug 410207
JBIDE-24873 - update mgmt integration tests for use by EAP compatibility job
change login functionality
TEIID-2429 addressing performance issues with large sorts
Performance optimization to JSONSearch when using Lucene
logout functionality
more functionality for the interceptor and contributor mechanisms
Abstracted out some color helper functionality and cleaned up the image shader pipeline.
Fixed some bugs in FreenetURIPage which contribute to more stability
Added better random clustering of datapoints to better demonstrate cluster discovery. Also added in a Button to restart - but still need to add functionality to actually restart.
added annotations and started with start/end functionality
"Moved out performance tests and other tests which aren't really unit tests, out to an @Ignored test class"
Back out changes for Bug155558 because of incompatibility with older WTP versions
Bug 382839 - [Compatibility] 'Line Up' and 'Line Down' no longer work in con
"Fixing the legacy lifecycle mappings back to compatibility with 2.0.x in terms of classname, then mapping them back to a field in the lifecycle executor so the enforcer plugin continues to function."
"Performance overhaul sponsored by rockxz3, using his large server's data for reference to help with testing and tuning. Timing numbers below are based on this data set on my test server. * PlayerMoveEvent performance boost (from 0.047ms to 0.015ms in testing, ~313% as fast): now more thrifty in determining whether player has actually moved between chunks before doing anything else; important since this event triggers extremely quickly * PlayerInteractEvent performance boost (from 0.068ms to 0.034ms in testing, ~200% as fast): now ignores left-clicks for interaction checks, since in CraftBukkit 1.4 left-clicks no longer open doors or activate buttons/levers/etc.; not as important as above, but still triggers quite often as people are digging or interacting with blocks * ""/f list"" command performance boost (from 234ms to 30ms in testing, ~780% as fast): code was getting information for all factions, narrowed it down to only getting info for displayed page range * ""/f show"" command performance boost (from 132ms to 28ms in testing, ~470% as fast): tweaked the ally & enemy listing code used"
"base functionality, old offers parsing"
Add convenience functionality to check compatibility of types
Removed functionality to add custom severities
PT-2335: Import functionality for gene controller
upgrades to lexical soping implements to address some performance issues fixes to HTML model to capture use of local vars as window state in scripts
"Code clean, performance improvements"
Add a few more tests for the sending functionality.
performance optimizations
"First version of transactions. For now log is stored memory, without replay functionality."
#NAME?
Refactor context editor code drastically and add new functionality
Issue #28 Improved sequential and random read performance.
Bridging OSS and EE serialization compatibility (#9344)
"refactoring to add PaperRecord object, WIP added merge functionality"
prepared API functionality for pausing tool
Renamed PerformanceTracker to TestPerformanceTracker
"Fix backward compatibility, fix concurent modification exception and make timeout workspace configurable."
SONARPLUGINS-3433 Compatibility with multi-language support in SQ 4.2
"No more new Allele() -- must use create.  Allelel simple alleles are now cached for efficiency reasons.  VCF4 codec optimizations -- 4x performance in general.  Now working in general but hooked up to the ROD system now as VCF4.  WARNING -- does not actually work with indels, genotype filters, etc."
1693 change webapp config to improve maintainability.
Fix protocol versions for correct interoperability Fix decoding of flags for V1 protocol
Summary: [accessibility]Enhance accessibility support in Chart Builder
compute context reliability properly
Fix #191 Rewrite yaml configurators using common factored out functionality
Update existing average calculations to use the rolling algorithm to prevent overflow. Move the initial implementation to the test class to check for rolling algorithm correctness.
moved functional and performance tests to separate modules
Combine repo performance tests refs #362
Readability update + slight bugfix in logic.
turned Node into an abstract class to support better binary compatibility. This change is still binary compatible for everyone using this today.
Added recordId generation functionality
"restx factory: review machine behavior, isolate dependency satisfaction from component building  this enables to have a better view on components' building performance, and would also allow to add interesting features like dependency satisfaction check before building, and dependency graph display"
[#1472] Move org.jooq.tools.debug API from jOOQ Console to core - added column count to ResultLog along with row count. Both are performance relevant.
API Description performance tests
performance
Add refreshSubtypes functionality
"simplify the resolveTransitively API, and implement the new collector up to the level of functionality of the original."
"move caching functionality into WebResponse, improved javadocs a little"
Optimizing themes loading performance
Refactored for better maven compatibility
Fix performance regression in deploy file transfer.
Some refactoring for readability and added possibility to provide required message
"GH-107 Initial checkin of new test process Removed the full test or the hard-coded sql statements from this implementation     -Restructure the configuration to run the test suite by adding:         a Config parameter that should contain the configurations for the target         a ReportPath parameter which is the location where log file for the test         a SqlScript parameter which is optional...if not found, the test suite p         a -V parameter for verbose mode (optional), which is a more descriptive      -integrated comments from previous check-in, added addition functionality to 	handle prepared statements and errors Signed-off-by: Andymic <Andymic12@gmail.com>"
Abstracted TSV source/sink to data source/sink interfaces -- allowing wrapping in transparrent classes that augment the functionality for indexing etc
#NAME?
Added and changed performance to MapDB
Added functionality to (optionally) call native C lib for faster GMM training
Bug 421328 - fix for performance issue with TraitUtils.parse()
Renamed CandidateStep to StepCandidate for better clarity.   It highlights the candidate nature over the step nature of the class.  Being an internal class it does not affect any functionality.
code cleanup and improve readability
* more draggable bindings work (poppy effects on drag-over) * keyboard navigation in browser view * cleaner visual style in bindings view * substantial performance improvements with line/animation redraw (only redraw what we have to) * bunch of convenience methods on editors and models for accessing position information * split out WOBrowser's inner classes
UI enhancements and error handling in RegEx functionality
FORGE-141: Moved the install functionality of the Faces Servlet into the Facet
Added functionality to overwrite variables in environment
"added benchmark mode, various performance fixes"
Do not provide API compatibility if the design is not created by API codes.
remember me functionality
"Bug 250457 Compatibility of URLs encoded in content.xml, artifacts.xml"
Added functionality to restore auto-commit state if commit fails.
13x performance increase in jar comparison by parsing method signatures
Move common functionality from AbstractRing to Rings
XCOMMONS-215: Allow not loading all components during unit tests for better control and improved performances
Refactor BtVodUpdater for readability
abstract out the functionality that will be common to all upgrade tests to a base class so that we can have more freedom in splitting stuff up
Improved Performance for ByteArrays
CLOUDSTACK-9783: Improve metrics view performance
[misc] Fully fixed any remaining limitation introduced by previous performance improvement (even if it was for pretty rare use cases)
Totally rewritten to contain the functionality for both the RankingDialog and ResultsDialog (code reuse)
Added configurable limit threshold in node generation to find optimum performance
AVRO-1282. Java: Use sun.misc.Unsafe to improve Reflect API Performance.     (Leo Romanoff via scottcarey)
add search functionality
Core Restlet functionality.
"More additions to merge the new ontology browsing functionality into the tool base. I still have to rehook in the history component, allow the ontology browser selections to influence the ontology term definition pane, fix some GUI things and test more."
MODE-2019 Implemented the JCR event functionality.
Refactoring Open Ons testing functionality
"Extended the JavaFormat class with formatting of method types and functionality to check whether an apply expression is the invocation of a lambda expression. Also, support for formatting of 'final' parameters have been added."
topic: code enhanced type: functionality module: other description: mdeditor - list of referenced groups
Depend on older jackson version for compatibility reasons
Added master/slave functionality to the Broker
Tweaking for Queue performance and concurrency
"Removed error msgs in BaseTest, refactored PerformanceTest."
improved performance
Some renaming of methods on PerformanceStateContainer
[CXF-4219] - Another refactor of TokenStore. Removed AssociatedHash functionality.
"Penultimate step in exception system overhaul.  UserError is now UserException.  This class should be used for all communication with the USER for problems with their inputs.  Engine now validates sequence dictionaries for compatibility, detecting not only lack of overlap but now inconsistent headers (b36 ref with v37 BAM, for example) as well as ref / bam order inconsistency.  New -U option to allow users to tolerate dangerous seq dict issues.  WalkerTest system now supports testing for exceptions (see email and wiki for docs).  Tests for vcf and bam vs. ref incompatibility.  Waiting on Tribble seq dict improvements to detect b36 VCF with b37 ref (currently cannot tell this is wrong."
[job] refactored event processing for new job functionality
"More work on Genbank files, bringing them inline with interfaces. Renamed FastaHeaderParserInterface to SequenceHeaderParserInterface. Changed SequenceParserInterface to use BufferedReader instead of DataInput to provide flexibility for GenbankParser. Updated SequenceFileProxyLoader to BufferedReader."
adding cucumber tests to validate backwards compatibility with legacy templates renaming templates fields that conflict with legacy fields and adding legacy fields back in always using ContextHandlerCollection for the Handler
"Performance enhancements in GATKBAMIndex.  Not sure these will assist in a normal use case, but they cut startup times and memory allocation noise in the profiler, making my profiling time more productive."
Implemented import step functionality in the authoring tool.
Bug 351851 - [Compatibility] we need to fix up 122 errors in our org.eclipse.ui.tests bundle
Performance improvement
"Refactored strategy classes by moving functionality to a class (AbstractIterationStrategy), which is higher in the inheritance hierarchy"
Improve array copy performance. Remove unused initializations. Remove redundant declarations. Narrow field visibility in some cases. Remove unused method parameters. Remove unnecessary semicolons. Classes should not extend Object explicitly.
JBTM-2623 JBTM-2653 GlassFish to Narayana interoperability
performance-tests: remotewb run.sh use system env variables
"[CLEANUP] - Renamed initialize function to initializePerformanceMonitoring to make its use clear, as we have mutiple initialize functions."
"DRILL-2976: Part 2 - disable extended json in the default convert_toJSON method, the functionality is still accessible in a new convert_toComplexJSON method."
JBRULES-1944 Adding crontab type functionality for repetitive rules -Add full working semantics with tests for cron and interval based timers
minor refactoring for better testability without the need to generate intermediary files
"many minor usability enhancements for chef, as shown by new simple example mysql-chef.yaml"
"LSNBLDR-281; add item accessibility, handle top-level page special check"
Table accessibility. Also fixed many bugs when accessible was attached to a Control but didn't override any values.
"A global maximum is now used for the sparklines for all charge and mass error columns. Updated utilities to version 3.2.18, making it possible to get the precursor error in pmm or Da. Made the precursor accuracy type into an Enum. Updated all affected classes."
Blatently removes the Boards tab. Good riddance! It was redundant and all of it's functionality (and more!) is available in the Placements section of the Job.
"Moved the PDOM into the Core. Started introduction of ILanguage, the mechanism of language extensibility for the CDT."
Better GraphQuery execution to take advantage of multiple indexes covering a single index. This takes care of the performance aspect of #373.
Clustering added. Performance improved. Simple progressdialog added.
Mint AMPQ client: added new functionality & expanded unit tests
backend setup to access shared subgraph. + backend performance improve and eliminated redundant data delivered to client
#POULPE-208: test was rewritten to add readability
"MAHOUT-1086 - Deal with round-off errors in computing L_2 distances.  Add special case to get higher accuracy when vector difference is small, merge AbstractVectorTest and AbstractTestVector, fix like() bug in Centroid and WeightedVector."
#1288 - Added support for new PasswordEncoder and deprecated old PasswordEncoder usage. Fixed a bug where using a self salting algorithm such as bcrypt would break the forgot password functionality. Cleaned up and added new javadocs to describe the PasswordEncoder changes.
JIRA JASSIST-28 (including a performance bug) has been fixed.
"Major cleanup in the prediction of target features, ticket #181. THIS BREAKS COMPATIBILITY, PREVIOUS VOICES WILL NOT WORK ANYMORE!"
Improvements in performance of Text Editor and Query Output.
KNL-1230 Remove deprecated use of MultiRefCache and add in new caching implementation for the security unlock checks This still uses the legacy MRC when legacy is enabled (for 10 compatibility)
Fix typos in orm performance tests
Completely rewrote object data access to improve performance.
Implemented additional functionality
Bug 320672 - [WorkbenchParts] [Compatibility] SWTException when activating an editor with stale content
rearrange the choice of the scenario ids to match current practice and allow for simple renaming in case a performance test was moved
#NAME?
Improve accuracy of locals tracking in PureFunctionIdentifier.
CLOUDSTACK-9428: Fix for CLOUDSTACK-9211 - Improve performance
* Added the functionality of being able to comment each project  submission and send an email with the comment. (Project Submission Management Interface).
"Adding functionality to actually output resulting trie, need to add unit tests."
changes for login functionality
MergeTool: build input using a TreeWalk for better performance
"Revert ""Bug 319621 [Compatibility] All views now have view menus"""
Expanded functionality for writing BAMs from HaplotypeCaller
Bug 302284 -  [Compatibility] Pass the editor input to the instantiated client CompatibilityPart asks the reference to create the IWorkbenchPart
Added view criteria to UsageMetricModel for better accuracy.
Added chage base layer functionality. After this commit you need to recreate the DB.
"improve performance, memory use, and code structure"
Making functionality test-suite available in the metastore jar
Schema changes to support more flexibility for item groupings
Performance: unordered signature on OWLOntology
Collection startpage: improve performance for big collections
Performance improve for really big zip files:   * adjust limit for maximum ZipFile size to 30010   * scan them using ZipFile to see if they contain more than 30010 entries
Improve kld classifier performance (a lot)
* extensibility of current DLTK functionality.
Fixed JIRA PUSH-266 : Add listener functionality to NotificationProviders
selectize.js Integration - Basic ajax functionality finished
CHENT-49 performance test passes.
"Rename class, and remove some methods used for syntax compatibility"
improve prepared statement performance with atleast 100%
"Fleshing out clientRouter, refactoring to better distribute functionality"
"[OPENENGSB-2340] made code more readable, added javadoc, adjusted the names of the converter steps for better readability"
[Bug 912871 - Perf: resource configuration update taking a lot of backend resources] Scalability work for resource config update.  We already added concurrency limits that should throttle how many config updates the server gets hit with at one time but we also want to see if we can relieve the intense banging on the db and speed up the update time for each resource.
another good point to commit; the basic domain specific disk offering functionality is now in place
Issue #5458 unit tests for session and global storage performance characteristics were added.
Issue #628. All paint() methods changed to paintComponent() and some more Swing recommended practices implemented. This should help performance debugging in the future.
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
Improve reliability and error management of Importers.
"* Added density functions to remaining continuous distributions (F, T, Weibull, Cauchy). * Deprecated HasDensity interface. * Added density tests. * Made Brent Solver (inverse cum) absolute accuracy configurable for all continuous distributions."
"removed RawEdgeIterator: should be returned for edge creation, getEdgeProps without an endNode and getAllEdges, but this separate interface complicate to handle and incompatibility is harder to use"
"Rewrote the 'auto detect device' to a 'show device firmware' functionality to ""force"" the user to select a proper device type. If the ""show metadata"" button finds metadata for another device, it will assist the user by selecting that device instead. This way, issue #84 is still met, but in a slightly alternative way. Also, finally, found the possible loophole in which it was possible that no device profile was set in the device configuration. This was due to the code reading the device metadata twice, which is redundant. Either the device type is selected in the UI, or by the 'show device metadata' button. After that, it is the 'truth' wrt the remainder of the code."
"topic: code enhanced type: functionality, other module: [d3] wpvs description: added instantiation from config directory"
rename scalabilitySummary into timeSpendScalabilitySummary
MANAGEMENT-178: Avoid using ManagedPerformanceCounter as performance counter holders. Introduced delegate performance counter as its a more clean solution. And less confusing for people extending the camel management api.
"Fairly big refactoring to open the door for pluggable formats.  The KeyFormatter hierarchy controls the formatting, via a FormatManager.  However, this is probably a lot of flux that will still go on in AbstractKeyFormatter to best define a generic set of formatting functionality."
SAK-14602 http://bugs.sakaiproject.org/jira/browse/SAK-14602 Ensure gradebook helpers are in sync with existing gradebook functionality
[NGRINDER-28] Develop performance test module: test listing and editing function  - several fixes... - add the script resource viewing.. - add the various test limitation.. - provide the single point of test termination..
#NAME?
"Package Rename, Performance, and UUID"
* ExtractorMultipleRegex.java     refactor for readability
"Many changes towards CMIS compatibility, added support for cmis:item type, fixed folder / file tree loading, added missing mandatory properties, fixed type inheritance."
Bug 298671 Implement enough compatibility to bring up a simple view
XWIKI-7896: Display a global install/upgrade wizard when starting an new version of an XWiki instance * fix naming * improve a bit performances
"Added comments, changed order of a few lines for efficiency, general cleaning up."
210758 Improve LeakTestCase performance by checking multiple classes
Corrected functionality for student
Added ABS compatibility to ActionBarDrawerToggle
performance fix: cache type binding in biding resolver
"Adding combination functionality to checks for new providers, enabling provider-specific access denied handling for urls protected by multiple provider authentication"
Refactored Datastore for performance.
HSEARCH-1699 Introducing a performance tests focusing on the index writing backend
382985 Refactoring for testability of the PublisherServiceImpl
[CXF-6334] - Moved remaining policy validation functionality from the PolicyBasedWSS4JInInterceptor
Made methods public for junit-testability
MAPREDUCE-5222. Bring back some methods and constants in Jobclient for binary compatibility with mapred in 1.x. Contributed by Karthik Kambatla. svn merge --ignore-ancestry -c 1482208 ../../trunk/
Move col7a1 mutation database functionality code to a molgenis.mutationdb module. Create new Module.
Updated Phasing algorithm + evaluation module to properly implement haplotypes [including homozygous genotypes]; Implemented dynamic window phasing model for LARGE increase in efficiency
Initial pass at a file proxy -- hand it a path and it serves files under that path under a given CCNx prefix. Currently logs excessively. Note that this is a little silly demo app; it's not multithreaded and doesn't (yet) have the performance for serious production use.
JBQA-4798: Prepare automated solution for EAP-JBDS compatibility testing
MODE-1583 - Implemented functionality for bulk creating/updating/deleting of nodes
"changed parkingCard, removed unused image and added print card functionality"
"Improved BAQ implementation.  Now supports adding BAQ tags to reads on the fly with ADD_TAG_ONLY option.  Caching fasta reader implementation, and changes throughout the system to enable this.  Many performance improvements throughout the system due to better reference access patterns."
"Fixed issue 538: - improved performance on transaction, - improved reliability, since now a classic file is used, not a mmap - temporary records are now inside the tx log and this reduce fragmentation as well - this is a brick to create the server log for replication"
Initial implementation of functionality to add physical phasing information to the output of the HaplotypeCaller.
edit activity - widget compatibility
Improved robustness of PostGISFeature configuration (relational).
Split READ performance tests
- Implement JSR-330 Provider's for all container-level providers. - Temporarily remove the IOC test harness (use Christians old one) as there seems to be a minor incompatibility - All tests otherwise passing.
#19 Requiring @MappingTarget annotation for target parameters for the sake of readability/explicitness; Improving test method names
Make speedAccuracyTest work on Bamboo
"Analyse: C# analysis improved; indirect dependencies are supported now as well. Furthermore, the invocation analysis classes are restructured to match those of the java invocation analysis. All test cases in the accuracy tests for Java and C# pass the test."
Bug 431361 - Label and activity equals two objects Bug 390575 - Support BPMNLabel DI elements Bug 390566 - Label feature package is not exposed Bug 355672 - BPMN2 Modeler Usability: look & feel Saving work - still need to update SubProcess and Choreography Tasks Added a new Appearance section for all BaseElements which allows changing colors and line styles etc. Attributes are saved as extension elements.
Started working on MOTAP functionality
Compatibility update for newest SpoutAPI
Cleanup and reorganization.   - Added a private api layer (org.postgresql.core.Base*)   - Cleaned up public api (org.postgresql.PG*)   - Added consistent headers and copywrite info   - Removed deprecated Serialize functionality   - Cleaned up imports   - Moved some files to more appropriate locations
"GTFS-RT integration tests - add tests for TripUpdate correctness, new status attribute so proper TPRs are used."
Change plugin main class name. Lost backwards compatibility.
centralized open feature; fixes #155 by providing multiple error messages for different error cases; restructured OpenSaveExportAction for better readability
"- Major revision to the internal architecture of the message bus to improve performance.  Hash lookups for routing tables have been cut to 1/3 before.  Instead of relying heavily on hash tables, not using a unified routing table that uses a DeliveryPlan, which improves performance further. Overall, the time taken to route message is now about 25% of what it was before with all of the new optimizations."
DDF-2520: Versioning Performance improvements (#1338)
Basic Stateful/Business Remote functionality works.  Part of OPENEJB-92
Improve performance of subscribe action in standalone mode.
"ISIS-1374: moved setupXxx functionality out of ActionInvocationFacet, and into ObjectActionDefault.  Removed duplication with ObjectActionMixedIn and ObjectActionContributee."
DATAMONGO-1092 - Ensure compatibility with MongoDB 2.8.0.rc0 and java driver 2.13.0-rc0.
deprecated functionality was cut
Fixing backward compatibility issue with DBDocTask.
Bug 298671 Implement enough compatibility to bring up a simple view
Adds support for optional MethodHandles.Lookup parameter for verifying constructor accessibility and gain legitimate access to non-public (or otherwise non-accessible) constructors.
Major performance improvement to the GATK engine
"Corrected functionality, refactored code, improved JavaDocs."
Made some performance improvements regarding fulltext writing/searching invalidation. It's still slow though...
#NAME?
"Separated in and out threads selector threads, this adds a significant performance boost."
"Target is getting big enough that it deserves its own top-level place. Plus, as functionality migrates to Target the tests are becoming target-specific."
Refactoring of BQSRv2 to use longs (and standard bit fiddling techniques) instead of Java BitSets for performance improvements.
Improved performance of Executors by using wait/notify instead of ThreadGroup.activeCount
Re-Added Permission2 support for legacy compatibility
414913 - WebSocket / Performance - reduce ByteBuffer allocation/copying during generation/writing
"Bug fixes / minor features:  - It now notifies the user of permission failures  - Control signs are no longer case sensitive  - It no longer leaves water hanging midair after a sinking, although this only effects water within the ships borders. Water that spills outside will still hang there  - canFly has been replaced by blockedByWater, which is more descriptive of what the attribute actually does. canFly will continue to work, so it is backwards compatible  - Torpedoes and other moveEntities: false crafts no longer release as a result of movement  - Typed commands now actually use the Bukkit command system for better compatibility  - Walking off a craft, then back on, then back off again will successfully release the craft  - Trap doors will now remember whether they were on the top or bottom of the adjacent block  - There is a new command sign: ""Release"". You will never guess what it does..."
"TEMPORARILY BREAKING BUILD: svn rename to the same name but different case is not doable on OSX because of its case-insensitive filesystem.  Starting on the ""ask for JsonArray or JsonObject"" functionality."
"Refactored UnderlyingSymbolInfoViewSection into a UnderlyingSymbolInfoComposite, for simplicity and usability. - Removed AbstractViewSection (now the whole section is represented as a composite instead) - Further cleanup of the UnderlyingSymboInfoComposite class - Added getters in OptionOrderTicket and related classes for UnderlyingSymbolInfoComposite integration (in-progress)."
Test stability: another attempt to have stable connect() behavior
submit initial changes for offers/promotions functionality
Add test for correctness of XML-RPC responses
#NAME?
OFC-626 Import XML functionality
improved theme improved blackberry and meizu compatibility
Cleaning up some code while testing rio-ui functionality
Unimplemented Functionality
New command system based on non-static objects that follows DRY better. Uses HashMap for command lookup to increase performance
"Integration test for the real time, high volume indexing and search functionality."
"Validate: Speed and Accuracy improved of Violation-providing services. - Accuracy: Violations are selected now on specific from-class to-class combinations (not any longer on ""stratsWith""). - Speed: New HashMap + methods to support fast searching. "
CardUtil - renamed and made adjustAbilityCost public.
merged performance imporovemente removing lazy serialization.
Efficiency - items
performance improvements from Philip
V1 of read and variant simulator and assessor.  SimulateReadsForVariants generates BAM and VCF with given combinations of variant and read properties.  AssessSimulatedPerformance produces a table suitable for analysis in R
Bug 366608 - [KeyBindings] [Compatibility] Failures in KeysTestSuite
OFC-1365 - Improve code list import tool performance
Added Log4j XML configurability to BootStrapper.
performance; 3007936; check before going to synchronized block;
"Lots of cleanup, mostly on the ProxyProvider functionality"
Bug 430080 - Improve readability of ModelAssembler 
351884 Remove test for removed functionality
KNL-1011 - Improve performance of SiteService and Portal
"added subsetting functionality, started on redefinitions"
"performance improvement based on the input from http://www.nabble.com/Maven-job-5-times-slower-than-a-free-style-job--td14651245.html Avoid small roundtrips, and instead group them into a bigger batch."
Added support for geotiff files in publisher module: a quart job clean the unpublished geotiff from the geoserver and the disk after 30 minutes starting from the preview. Added support to the geotiff overview (Todo: improve the correct GeoTiffOVerviewConfiguration for best performances) Added a Geoportal nfs dir to store the user geotiff files.
http://bugs.sakaiproject.org/jira/browse/SAK-6001 SAK-6001 Refaactoring the Portfolio Property stuff to use existing Form functionality instead of doing it separately.
"[CXF-3677] Fixing the position of EncryptedKey, some flexibility in the way X509 key identifiers are handled"
performance
"Revert ""Bug 402878 - Implementation of Member Accessibility on Type Level"""
"Improved linear RealMatrixImpl and BigMatrixImpl performances. The main changes are the following ones:  - use directly the storage array when possible for    diadic operations (add, subtract, multiply), as    suggested by Phil, this avoids the cost of the    generic getEntry method  - replaced custom indices checks by simple use of    the JVM checks and ArrayIndexOutOfBoundException  - put row arrays reference in local variables to    avoid multiple checks in double loops  - use final variables where possible  - removed unneeded array copying  - added a constructor to build a matrix from an    array without copying it where it makes sense"
BLC-460 - Create ProductOption entity - Added ProductOptionValue. - Added sample shirt product data - Modified defaultProduct.jsp to include product options selections - Started work on AddToCart functionality
moved the title fetching functionality to util.WEB
"Now all the functionality is ported, but some things need to be tested and eventually fixed."
EST-1524: minor usability improvements for payment batch and credit transfer.
"Use private SQLiteDatabase constructor, with functionality to open the database separated out"
Removed Resource model classes since it is an antipattern bad for performances (each inheritance level generate SQL joins) Update samples apps and identity manager according to that Include Baptiste and Loic improvements for update controller method Replace Kazan specific password generator by Spring Security one Add an exception mapper for AlreadyExistingEntityException Use raw types instead of responses in GenericController
* lots of script cleanup * exposed functionality for reading out forest info (e.g. status) * lots of small changes
"#1287 - Support a pseudo property, rather than entirely re-use defaultCategory. This better supports deprecation of the defaultCategory field so that the new functionality works appropriately when defaultCategory is null in the database."
"Good test of basic functionality, needs some refactoring and helper beans."
"Refs #100300.  CCNNetworkManager was updated after the version originally modified, so manually fix the merge.  Changed the HashMap in CCNStatEnum to a plain AtomicLong array.  Added a performance section to the junit.  Measured as 8.88 nanos/increment operation on my high-end Mac Pro."
Implemented HTTP/2 push functionality.
"Adding support for accessibility detection, fixing bugs with detection of fall-through checks"
improved server functionality
Add service loading functionality. Refactor to always keep a reference to the used ClassLoader.
BIG CHANGE! Added Subgraph class and split functionality into explicit merge/insert/delete
"get graph from options, move wheelchair accessibility code into options"
"added functionality for having lists, issue #5, started working on organizations, issue #8"
"Steps to ensure legacy client compatibility through ProtocolMetaData propagation - In progress, but initial testing seems OK."
Performance tune for mit.
rename on Item will make a scm rename BEWARE: this functionality make an unwanted scm update when deleting old hierarchy ! This should be fixed !
" - FSRoot.fetchRevNodeFromCache() must not be visible outside its package, made it protected  - added tree, pget, plist functionality to SVNLookClient"
fixed an infinite-loop bug (truncated XML with FATAL_ERRORS=false) improved memory-efficiency and fd-efficiency of zipfile handling
"Created various compatibility check methods, added some TODO's"
topic: code enhanced type: performance module: deegree-core description: Added caching to shape feature store.
factored common functionality and data into generic trigger method adapter -- fixes for BYTEMAN-65
"Performance work: Support bulk loading of database objects easily. Database interaction is not the bottleneck now, DatabaseObjectComparatorFactory.isSameObject is"
"- added support for custom carets on non-win32 platforms - added support for wide carets (~accessibility) - preference to disable custom carets (accessibility) - preference to disable wide carets - smart insert caret is now default, raw caret is bracket fixes - bug 39600: [misc] Java editor does not read lines in JAWS 4.5 - bug 39205: [misc] Cursor in 3.0-M1has changed to ugly ""["" shape - bug 21715: StyledText - Text cursor is too thin in editor"
M2e Performance - Pom Editor Leak
Addition for InMemoryClientExecutor... will help with performance as well MultivaluedMapImpl.addMultiple
SWITCHYARD-2960 - preliminary work to improve performance (#619)
Added LinkContractsInterceptor functionality
#NAME?
"[FIXED JENKINS-26975] Three issues in the Jenkins performance plugin are fixed, resulting an significantly better performance (Disc, CPU and memory wise) of that plugin). An elaborate description of the changes can be found on https://issues.jenkins-ci.org/browse/JENKINS-26975"
Fixed ModuleClassLoader to improve module interoperability - #537 Moved all test cases into org.openmrs.test package Added comments/descriptions to some classes
"Refactored VisualizerCanvas, moved static functions to VisualizerUtils and reorganized all the methods. Also minor cleanup and changes to the communicator and Coordinate classes. Added an FPSCounter class to show the visualizers performance."
Inline and optimize some decoding methods to  improve performance
Facotred out some common functionality
"MATH-786 Reverting most of the changes performed in revision 1336458, because the caching of the hash code could be the source of inconsistent behaviour, and we are lacking proof that the performance gain is worth it. The implementation (from r1336458) of the ""hashCode"" method is retained."
Improved centering of dialogs. Initially highlight selected notif source.  Split up notif dialog for testability/cleanliness.  (B-08706)
Restructure and stability work
[RHQ-2264] - improve performance of availability reporting by altering the isAgentBackfilled logic (used by both the avail reporting flow as well as the agent suspect checker) to leverage the precompute data; 
Initial commit of executeAll functionality for the AsyncServicePool.
Rename method for accuracy
HDFS-3721. hsync support broke wire compatibility. Contributed by Todd Lipcon and Aaron T. Myers.
junit 5 compatibility
"Linearize the findEndOfRegion algorithm in ActivityProfile, radically improving its performance"
Index: improved performance for most common use cases + reduced code
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#getMetadataCollector()
NMS-8589: Cleanup NodeMapsApplication to destroy scheduled refresh to avoid Thread and Out of Memory Leak as well as Performance issues.
first working javafx image browser (very limited functionality)
IDE-1108: some performance related fixes
Updated CellImg classes for extensibility
LILY-505: added functionality to query for dependants of a specific vtag
reworked performance stats API and implementation
"Now Scientific Areas Sites also have functionality sections that allows them to show announcements, events, publications, structure and subunits"
"improving performance, especially around metadata reading"
"Created AbstractBlob and AbstractBlobStoreConnection and moved common functionality there. Notable additions are:   * implementation of equals() and hashCode() for AbstractBlob   * implementation of getBlob(InputStream, ...) in AbstractBlobStoreConnection   * all current store impls now make use of these"
"Bug 316303 -  [Compatibility] turn actionSets into MenuContributions refactor, slight differences"
Added the agent harakiri functionality when agent machine not used for 2 hours
"JBRULES-2345: Work items should also support pluggable parameter persistence 	- Merging the changes for this functionality into the trunk              - from the branch salaboy_diega_workitem_variablePersistence. 	"
"#JC-1251 JavaDocs improvement, small refactoring of external links functionality"
Adapt for Content-Security-Policy compatibility
working on TasksAdmin functionality
Bug 302284 [Compatibility] Pass the editor input to the instantiated client
Backwards compatibility with previous version backup format
Rename Web Filter for accuracy
single app for scalability testing with configurable generator count
added parking lot functionality: combined sink with source for re-entering of same vehicle
[SCM-586] AccuRev 4.9 compatibility Submitted by Grant Gardner .
"JENA-477 : Fixing working with TDB, esp default union graph. Add tests to pin down expected functionality."
Performance boosts & fix minator image
Implement functionality that allows to run batched method calls concurrently.
Added angled running support. Adjust 'angle' value in Sonic sprite to test this functionality. Changed floats for doubles when calculating movement. 'angle' will eventually be calculated from sensors attached to the Sonic sprite.
EST-1442: moves abstract mixins on domain object for task functionality into own subpackage (dom.task -> dom.dobj)
Bug 286867 Update demos and compatibility to use context#modify() instead of outputContext
"code cleanup,performance tweaking"
Integration new functionality from CW project
SAK-1927: added better error handling and more robustness for conditions where web contextual services are not available to facilitate unit testing
EPD-61: Moved targetUpdated functionality from AisLayer (ship) to AisLayerCommon.
"STAT-104: Refactored SiteStats API, deprecated old classes, deprecated old methods, added javadocs for major API classes and methods, added flexibility in sql columns for report queries (API)"
Fixed the mirror issue (by replacing the mirror functionality)
Fix #566 performance issues on the Add existing elements tool
Rename INTERNAL/java/src to simply src; a source directory should be easy to find. This refactoring doesn't appear to break the build or functionality.
LILY-352: changed implementation of scanners that return IdRecord in stead of Record such that this functionality is now accessible via a separate method in the repository API. This prevents clients from casting the resulting Record into an IdRecord
#1113 Handle LimboPlayer tasks via LimboService - Add methods to LimboService for handling messages to make it the only relevant Limbo class for outside classes   - Move LimboPlayerTaskManager to limbo package and make it package-private - Create MessageTask and TimeoutTask immediately when LimboPlayer is created - #1112 MessageTask: improve efficiency by keeping reference to Player
"I2C-0006 - mhuckaby : refactored Image2Css class to service, increased testability and test coverage"
"Given that all classes implementing output stubs already have getters for the underlying OutputStream and File, it makes sense to unify that functionality into the Stub interface.  Now it is possible to have an Engine utility method that iterates over all registered stubs to find the one representing a given OutputStream and return the File associated with it."
ItEr60S18CambiosPantallaArbolPedido: Performance improvements in Order window
"implemented ""Create collection"" functionality for the dashboard"
Bug 418392 - PDE Build's dependency on runtime compatibility should not be optional
Add parser compatibility for ODA driver schema changes
CASC-33 Logging changes to help confirm functionality of logout valves. Fix typo in regular expression-based logout valve class name.
SAK-7503 -- We're now calling SiteService.save(site) as little as possible.  Any further performance enhancements will need to be made in SiteService itself.
Test stability: avoid asynchronous SWTBotTreeItem.expand()
Improve performance of convertions to java.sql classes
Bug 413515 - Enhance log provider performance
major performance improvements.
"Initiated prefixes, source, and suffixes at the start of the program. Added updatePattern method for code readability. Added constructor so updatePattern gets called at instantiation."
cleaning up the metadata model for usability and sanity
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Merged from master after syntax module changes
ROO-1869: Boost performance of persistence setup command
Improve performance of DefaultTableIOPlugin
Refactor event painting code to add interface for rendering many events simultaneously for better performance
fixed issues related to run time hibernate exception.  made change for performance optimization. added more logs
[CXF-4959] Optional support for the partial comparison of subtypes when checking the compatibility of media types
"união de todas as estratégias de contração (a, com, de, em, para e por) em uma única tabela de contrações, indexada por prefixo; espera-se um ganho de performance, pois a CG será varrida apenas uma vez para todas as contrações; optou-se pela indexação em 2 níveis para que os casos negativos (entradas da CG que não participam de contração) fossem detectados rapidamente; tais casos precisam de apenas 5 comparações de String para serem detectados;"
improved toJSON performance
TEIIDES-2299: Improve performance bottle necks of LDAP wizard
improved efficiency and tested errors for normal models
"Added basic AOP functionality and configuration, including  AOP performance logging to replace actionTimer log."
"Extracted common functionality for user creation to super class, added icons for GS user registration"
Move fixed functionality out of the AbstractHost class and to the HostUtils class.
"CSS module, performance optimizations"
Fixed bug #187510: Table/TableViewer does not show icons Fixed bug #194884: TableViewer: Changing rows rapidly not possible The alignment that is set on a column now also affects TableItems Performance improvemenst for Table
Improve the performance when generating the Bridge topology: * Index the MAC addresses and bridge ports on the shared segments for efficient lookup
Use EnrichedTerm for terms that are enriched and propagate changes through Enrichment. This should be more extensible for fuzzy GMTs. Gained an extra 5% in performance.
Performance improvements
Added findFolder functionality
Bunch of minor tweeks to help performance and scalability
PLAN 4303: Legend persistence and backwards compatibility
"Expand handling of constraints against id sets, in order to best take advantage of mysql 5.6 performance improvements while also support efficient queries in earlier versions."
moved read functionality to TemplateContext.
"Performance improvements to fast loader. Bye bye, CSV!"
UF-177: Add functionality to retrieve all locks in a given directory
Performance optimizations
More performance improvements due to less object allocation.
Moved REPL debug functionality to separate package
improved readability of some code
DefaultScriptService: rename method for simplicity
Removing functionality.  Removed soundslike/distanceto/like operators
improved performance of preflabel conflicts and disjoint labels finding
"Fixing members list (showing pending members, removing deleted members, show proper error message if user already invited) and functionality for limited blogger (no error messages due to no mail service on document submission, allows limited to delete his own drafts and pending docs, remove inaccessible comments and entries tabs), some better named functions in UserManager & WeblogPermission.orm.xml."
FEATURE: all functionality for settings moved to presenter.
Fixed bug 32893: Workspace Compatibility Problems 2.0 -> 2.1
HIVE-1126. Missiong some Jdbc functionality like getTables getColumns and HiveResultSet.get* methods based on column name. (Bennie Schut via jvs)
Update for IAP functionality: (1) observer renamed to listener (2) made PurchasedItem a class (no need for interface) (3) added PurchaseValidator: template for post back validation of purchased items on server
"Properly handling traces for the Acceleo ""for"" blocks Handling traceability information for ""number"" returning operations"
"make mapping of mdat piece by piece the default, keeping the pieces in a softreference map to enable the GC to collect them Improved tests improved performance"
Stability fixes Windows fixes Drag and drop playlist reorder
It's funny how a DB hit in the middle of your trip planner loop will kill performance.
#POULPE-435 Exporting database functionality - javadocs
SOAP-2770 Add functionality for uploading a trust store
Implemented download functionality.
Moved MethodLogger and added base functionality for the Action Logger.
minor refactoring for better performance and added additional attributes from Identity
"Removed IWindowCallBack interface, remove IWindowCallBack parameter from Window#open() due to API compatibility to SWT. Done import organization (by accident, sorry)"
core: performance improvement
Improved performance and correctness of min/max/range
"2 additional optimizations introduced: 1) count the distributions for all the digits in one shot (one file read instead of K, where K is the number of digits) 2) use primitive counters for single-thread mode (really improves the performance since AtomicLong performs much slower than primitive long)"
#95: Implement more pedigree compatibility checks 
"JBRULES-2347  Drools Pipeline integration with Camel JBRULES-1434 Drools Spring -just moving some files around -disable the mina unit tests for task, for stability reasons."
#NAME?
Initial Accessibility API update
Initial release of compatibility code. (disabled)
Added rule override functionality
Analyse - C# analysis improved: 1) Six more dependency types detected in accuracy test; 2) performance improved vy catching exceptions; 3) External system detection disabled since the results for C# were not reliable enough. 
Extended the functionality of Abstract elements
https://issues.jboss.org/browse/JBIDE-9372 : VPE has a serious performance drawback for rather big pages - Applied JBIDE-9372_20110722_2.patch provided by Vitali Yemialyanchyk - Minor code changes
Bug 431361 - Label and activity equals two objects Bug 390575 - Support BPMNLabel DI elements Bug 390566 - Label feature package is not exposed Bug 355672 - BPMN2 Modeler Usability: look & feel Saving work.
Added test cases in HttpClientTest for new functionality
Bug 127793 - Improve Headless startup performance (osgi and core runtime side)
Chris Wiebe new patch: deal with type cache scalability.
Support repeating groups of parameters.  Allow required parameters to be specified out of order if they are named. Bump version to 2.0 since this is a large change in functionality and has some minor API breakage.
Refactor: increase readability
performance turning
performance tuning
Renamed QueryPerformanceTest to QueryPerformanceBenchmark & cleanup
Minor performance tune.
"Added tokengenerator, and extended functionality for cassandra-spesific data"
[Fixed] Memory leak in KeyframedModel.dispose() [Changed] WrapMode for animators with additional 'SingleFrame' mode to only play 1 frame of animation then stop. This is to get models out of bind pose into a 'frozen idle' with very little performance cost. [Changed] Added binary serialization of MD5Animation and MD5Model; intended for asset compiling usage. [Fixed] Memory leak with TextureDict not disposing textures correctly when unloadAll() called.
Refactored bulk load. Added a ruby script for performance testing.
Redo null/empty string checking for performance
"B2.1 First steps in code refactoring, now webpages themselves include a minimum of functionality, instead most of it has been moved to the dk.netarkivet.archive.webinterface package"
Changes for windows compatibility
"topic: code enhanced type: functionality, other module: [d3] wpvs description: added coverage api for textures"
Further along with the JMX support.  * Added a dynamic MBean for getting the Neo4j configuration parameters.  * Added an MBean for information about the Neo4j Kernel.  * Converted all MXBeans to MBeans for Java5 compatibility.
SGF-414 - Resolve incompatibility between the DistributedSystem created by the PoolFactoryBean and the DistributedSystem resolved by the ClientCacheFactoryBean when SSL is configured.
#NAME?
add some additional functionality for removing baseline bugs
Significantly improved the performance of WorldInventories import.
performance optimizations
EPD-127 and EPD-128: Merging intended route functionality of shore and ship
webadmin/userportal: VM compatibility version UI
Bug 61446.  Performance optimization on command and context supports -- as it relates to editor opening.  This delays reprocessing until the editor is completely open.
Added adaptability in
Refactored empty if checker to match on empty statements rather than ifs. Hoping to improve performance.
"Bug 316303 -  [Compatibility] turn actionSets into MenuContributions refactor, so contribution code is in e4 and actionSet code is in ui.workbench"
Add support to execute control actions for compatible groups. Functionality added primarily to do integration testing for HQ-2080.
Bug 325986 [Compatibility] Editor references need to be updated when switching between perspectives
Added chunk unloading functionality - still needs to implement saving
adapted json-utf8-generator buffer size for additional performance
"we hadn't actually been checking expected warnings on fields.  Added that functionality, and fixed issues that arose when we did"
HTML-92- modified the functionality to make it possible to use the repeat with 1 to n number of items
Completed user management section; included also change password functionality for administrators. Some refactoring in code. Added logging in backing bean.
trunk:  - added SVNMergeRangeInheritance and added low-level merge-tracking     functionality for properly tweaking inheritable and non-inheritable     merge ranges
Filter clean-up - refactored OncePerRequestFilter out to the new AbstractFilter and NamedFilter for clarity and to constrain OPRF to only already-filtered checks (overall functionality remains the same though).  Modified WebConfiguration to add a getFilterChainResolver method and deprecated the old getFilterChain method (it still functions as expected for now).  Further modifications will wait pending mailing list discussion 'Configuration: ShiroFilter vs WebConfiguration'.  Also fixed various JavaDoc/spelling mistakes.
worked on type compatibility check
"Atlas Standalone: Lots of loader performance changes.  Some of the scalability fixes I made to the parser have had knock-on consequences in the loader that needed resolving.  Everything should work now though, and slightly more reliably than before.  I think this has fixed the strange parser-timeout problem that could someitmes be observed before."
AI player performance...
Performance optimizations
"Can now add performance-tweaking properties to the database hosted by the server. It uses the same neo4j.properties file as the embedded version, but you need to add a property: org.neo4j.server.db.tuning.properties into the neo4j-server.properties file."
"Can now add performance-tweaking properties to the database hosted by the server. It uses the same neo4j.properties file as the embedded version, but you need to add a property: org.neo4j.server.db.tuning.properties into the neo4j-server.properties file."
"By passing TestClass to AllMembersSupplier, we can reuse the annotation parsing already supplied, and improve performance"
Minor refactoring for better extensibility
Reuse the same result objects to improve performance.
 - business services hierarchy refactored  - removed audit filter from filter panels as this functionality is covered by the advanced filter
Finished implementing basic functionality CollectionAssert and ListAssert.
Slight tweaks to improve code looks (not functionality)
"MONDRIAN: Performance fixes for aggregation manager; mostly adding 'final' to classes, methods and members. Contributed by rehdie, and fixes bug 1466221, ""Aggregate - Performance improvement"".     Also fix javadoc error."
ROO-410: Improve readability of message resources managed by Roo 
"Redesigned class structur torwards extensibility, Draft 10 server site works minimal. Other drafts won't work yet"
CSPACE-3245: Additional functionality to the blob service for the v1.2 sprint.
Update databind side to remove references to remove dataformat-detection (in jackson-core) functionality
added save data functionality
Update to handle new stdout / stderr functionality in conan 3.2.0
SCRUM-1084 - moved RenderableDefinitionModel from compatibility to new templating and updated it to work with the new template definitions - updated tests and versionhandler
"abstract ElementList class, minor changes for performance tests"
add setCredentials as convenience method (backward compatibility for git 2.0 beta builds)
Bug 342884 - [releng] Add performance tests to the build
AGOVA-38 Integrate Rest and OAuth engine in core Replacing @Inject in Generic class by proprietary @InjectWithQualifier to keep OpenWebBeans 1.1.X compatibility
a bit of QueuePool refactoring for readability.
GTNPORTAL-155 Merge performance branch ( up to revision 473) into trunk
Refactored iterators and explicitated cross-component iteration functionality.
"remove Transfer-Encoding header even in IdentityHttpHeaderProcessor. Fixes ARI-3777.   consolidated common functionality of preserving original headers by prefixing into new base class - this changes behavior for corner cases of prefix being null or """" (now more consistent)."
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: updated parsing of the configuration to enable dynamic reload of forms
Improving the API for statistical data registration. Improving the robot rendering functionality.
Working but needs modularity cleanup and service dependency manager
IVR GatewayManager - Completed major update to the code related to IVR GatewayManager implementation for improved stability and operational reporting.   - added updated object model for modeling the IVR call process - object model is persisted to the database.  No in memory storage. - isolated the ivr manager completely from the underlying mobile queueing system.  All retries are handled internal to the ivr GatewayManager - Completely re-wrote all of the unit tests for improved correctness and test coverage - added liquibase config for ivr specific tables - modified gateway to only require read-only access to the underlying mobile object types
"Many code enhancements, some typo corrections, tests fixed, a few bugs found and squashed, and some groundwork for future. No functionality changed, only fixes when found."
Added functionality for specifying end date and time. Now the user can specify exact interval.
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer
NXP-12375: improve performance of queue presence check
Issue #49 Read performance improvements.
Renaming method back to sustain plugin api backwards compatibility.
added functionality to have several tests in a row
Bug 319621 [Compatibility] All views now have view menus
finish up calendar mode of schedule editor widget functionality-wise; start on new SLSB method for scheduling an operation that takes a ResourceOperationSchedule as a param
updates to scripting functionality
"HIVE-14382: Improve the Functionality of Reverse FOR Statement (Akash Sethi, reviewed by Dmitry Tolpeko)"
Use the model reset functionality.
performance modify
Add feature and obstacle functionality
Separate into an helper method for readability
DDF-2344 Pull out functionality from CatalogFrameworkImpl to logical subcomponents. (#1066)
"Improved readability of code for IMap.values() and IMap.values(Predicate), e.g. newlines, moved declarations to usage, new sub-methods. Sorted methods per superclass and/or from public to private. Added @Override to methods."
SONAR-8740 use method name for better readability of what function do
"Splitted the big fedoraClient into lesser clients, each adding a layer of functionality"
ScalabilityTest now checks journal integrity after running the test.
SONARJAVA-160 Create sonar.java.libraries and sonar.java.binaries with backward compatibility
Performance optimization by introducing SimpleVertexQueryProcessor that can handle the most common queries more efficiently.
Adding more contiunuous feature functionality to naive bayes
Rename constants for better readability and consistency
Moved SQL filter functionality (WhereBuilder) to deegree-sqldialect-commons
Add Client Get Security Group Functionality
Move up validating of the JWT Added in deprecated functionality Added test for deprecated functionality
clean up ksc-performance-reports
Renaming for accuracy
Class naming changes for readability when using OAuth: names are now more aligned w/ the OAuth 2 spec
Reverted correct size() calculation because of the performance penalty that would come with it. A solution to/existence of size() will have to revisited later
Adding additional functionality to TLS module
Partial pipeline compatibility
bug 304843 - [discovery] ensure sufficient extensibility for Eclipse marketplace client
Fix bugzilla bug 191445 : [Scripting usability] Expressions in report design should use a new syntax to differentiate them from static strings
"1) Tweak the definition of BlockLocationRecord to better handle missing values (prefer NULLs, not NaNs) 2) Tweak the definition of BlockLocationRecord to map the EVehiclePhase enum to a varchar, not int, for better visibility in raw SQL and future flexibility to safely add new enum values 3) Add a Hibernate helper class (EnumUserType) for serializing Enums as SQL varchars as opposed to ints 4) Add method to CacheableMethodKeyFactoryManager to register custom method key strategies 5) Additional documentation for CacheKeyInfo"
refactoring of classes to work with the gov2 collection should work better with Trever's Galago tokenizer hopefully we'll get better retrieval effectiveness
MAHOUT-846: Improved scalability of GaussianCluster.pdf. Introduced some beginnings for MAHOUT-933. All tests run.
"Feature parity between LocusIteratorByState, DownsamplingLocusIteratorByState, including pushing mrl /  the LocusOverflowTracker into LocusIteratorByState.  Note that the 'Matt Hanna exception', is still enabled because I haven't yet validated the performance of the DownsamplingLocusIteratorByState when running without downsampling."
#POULPE-469 Testcoverage and refactoring for Database backup functionality - adding more tests
"Added support for various hopper and TNT minecart methods, and performance improvements"
(Scott Phillips)  - Added support for prepared statements.  - Added prepared statement pooling (config: db.statementpool)  - This enables security and performance improvements.
MAGNOLIA-543 Additional functionality - templates from subnodes of Config/module/templating/Templates are included in template select on Website panel
Added Spring Data Jpa Repository functionality. | Added load-time-weaving aspect to log Spring Data Jpa Repository method calls.
Bug 190923 [prov] Javascript in provisioning metadata has poor maintainability
refactor to prepare performance improvements
moved unzip functionality to FileUtils
Added functionality for finding and showing the next not curated attribute. 
refactored DynamicEntityDaoImpl for better structure and some efficiency improvements
basic layer renderer configuration functionality
Replace StartPage List by an array for performance reasons Use indexOf(char) rather than indexOf(String) Prefer StringBuilder over StringBuffer
Added restore functionality
MINDEXER-99: Performance improvements
Performance for test runs: Modified parallel strategy to utilize more cores.
Made some performance improvements regarding fulltext writing/searching invalidation. It's still slow though...
Add a load of missing functionality to selfreg. Save registrations in leveldb
"performance: set all filter at once, don't add them one by one"
Bug 402878 - Implementation of Member Accessibility on Type Level
SWITCHYARD-2087: Verify functionality of security policy support in Karaf
moved offset length functionality to separate Reader and inlined with the general URIRegistry
"Performance improvement, inline broken-ness checks"
"Removed EHCache, GWT and GXT, those directions were futile. Will continue implementing the basic functionality with JQuery and Spring JSON. JDO should now use Memcache for caching. Won't compile yet, because in the middle of redesign."
Added file execution functionality in SBATExecutor
[SPR-6184] Extracted ContextLoader resolution functionality from TestContext into a new ContextLoaderUtils utility class.
performance and memory optimizations
extracting common navigation functionality to extra module to remove dependency from navigation-formats to googlemaps
Refactor VcfGenotypeData for improved performance and meta data handling
more updates to theme editor to fix a couple bugs and improve the usability and verbage a bit.
* Hacking in more functionality in the 'new' JSON realm
Backport maxNoCall functionality from GATK4
Add flexibility for plugin a custom class manager
Performance Improvements
added functionality for editing assiduousness schedules dates
"Slight refactoring of the traceability visitor Now handling reverse operation for complex cases Handling Strstr, Strcmp and Strtok operations"
performance improvements for sagas using handler descriptions separate AbstractHandler and AutoTypedHandler because of different perf. characteristics
"Renamed AdditionalRequirement to Requirement because just it's simpler. The reason for the ""additional"" was that the first requirement is hardcoded to be the players main group, for performance sake. But that was just me nitpicking."
further refactoring for extensibility
HIVE-2562. HIVE-2247 Changed the Thrift API causing compatibility issues. (Weiyan Wang via Ning Zhang)
"#15: solved performance issues due to mockito spy unnecessary usage. Added Joy, IsFriendOf and IsEnemyOf predicates."
Preliminary functionality.
"For accuracy's sake, renamed isObjectType() method in StandardTypeMerger to isReferenceType()."
[SUREFIRE-973][SUREFIRE-569] Change attribute types from List<String> to String[] to make them available as properties without breaking Maven 2 compatibility
"resolve AMQ-1977, some more choreography required in duplex case. Fix duplication of deleteAllMessageOnStartup which slows down JDBC test, add some more robustness to DuplexNetworkMBeanTest"
Added VariantRecord functionality
IntSet/Interator cleanup. - Fully filled-out AbstractIntSet with default implementations of most   things and documented the two methods that must be provided (interator()   and size()) as well as the ones that should probably be overridden for   performance or to make one mutable. - Fixed implementations of contains(Object o) and remove(Object o) to not NPE. - Return hashCode() identically to the way Set<Integer> would. - Created an AbstractInterator. - Added notes where I believe an implementation is bogus...
New constant StateScopeType.PAGE for using typed collections and performance improvements
Fixed a performance problem of the job/build top page when there are too many artifacts.
Preparing [CXF-6267]: Refactor issuing and renewing SAML token functionality into utility class
MLHR-1830 Fixed backwards compatibility errors.
"Moved ERXAdaptorOperationWrapper functionality to own class, only sending notification now in ERXAdaptorContextDelegate"
[DS-991] - Tidy up Harvest.java. Add no new functionality but should make it a little easier to add additional filtering code in the future.
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer (Moved JSF 2 related method to CompatImpl)
[added] functionality to edit signature-policy identifiers by irondetect via a context-menu entry in the GUI
Added CQL Filter functionality to the layer elements.
performance
"Adding JCommander functionality for specifying Command parameters. Removing a bunch of now redundant code, and cleaning up help usage."
Renamed simple-n-fast-performances to simple-n-fast-benchmarks
"#POULPE-435 Exporting database functionality - fix default value for text based columns, fix for composite unique keys."
Extracting interfaces from Layer Module to support a better hierarchy and modularity integration
"- Add new resource types for distributed status data and response time   data.  Both live in performance and are always shown on the choose   resource page there.  The response time resource type is now used to   get data for the ResponseTimeModel (and is the only resource type there).   Eventually the ResponseTimeModel will go away, and along with it the need   to differentiate based on ""type"" (e.g.: performance or response). - Added a GraphDao for fetching prefabricated and adhoc graph definitions   including an implementation for the current properties file format.   Supporting objects are PrefabGraphType and AdhocGraphType (for the two   major groups of performance and response graphs) and PrefabGraph (which   is now a boring old model object).  The code for the properties   implementation was pulled out of GraphModelAbstract and RRDGraphServlet. - The RRDGraphServlet now requires a resourceType to be passed and the   root directory for RRD files is now based on the resourceType, not the   type. - Use Spring to create and wire up the GraphDao, ResponseTimeModel, and   PerformanceModel objects.  None of the servlets or JSP pages are currently   wired up directly by Spring, so they get these beans from the   WebApplicationContext. - Switch the performance adhoc graph JSPs over to be fully resourceType   aware.  They can now generate adhoc graphs for any resource type. - *LOTS* of supporting changes and cleanup. "
#NAME?
Add a new traceability element for the template to text synchronization
Add client-side GWT tests and improve client-side compatibility
"#POULPE-435 Exporting database functionality - testing, refactoring"
Finished filter base functionality. Started changing the DOM API.
Unimplemented Functionality
Bunches of updates to CORBA binding to enhance performance a bit as well as abstract out  some more of the stuff that is ORB specific.  Make some more stuff visible to possible  orb specific subclasses and such.
Added a new SQL parser. This parser supports both SQL style line comments and comment blocks. SQL statements can span multiple lines but must be delimited with a semicolon. This allows for improved readability of SQL scripts.
efficiency improvement to intra-bus communication: waiting messages now returnable on the client bus outbound channel.
Accessibility support for some controls. (54046)
Added some robustness to tests
Refactoring `getExt()` to `getFormat()` for clarity. And the corresponding setter and field as well. Marked the unused methods as deprecated for backwards compatibility.
core: VM compatibility version
Reverts the logging changes from #458 due to performance regression documented in #467. Also see #288 for original ticket for this work.
"Improve robustness, use the segmentation model for the header parser by default"
EVALSYS-80 completed!!! This commit is for completing use of groups for export CSV functionality.
AVRO-765. Java: Improvement to BinaryDecoder readLong performance
Added functionality and tests to ZkHostDomainPartition to mark partitions for deletion
"Bug 58901.  Massive overhaul of the commands API to fall in line with some API commentary.  Most of the changes are related to javadoc only, but there have been two significant concepts removed from the API.  IContextBinding and IImageBinding have been removed for the 3.0 release.  They will probably reappear shortly thereafter.  They provide functionality that is not needed for 3.0, and only serve to clutter the new API.  I'd prefer to keep as clean and simple for the major release and then start working on completing commands in the 3.1 timeframe."
"Issue 109, Issue 73: more work on compatibility layer; expose vendor interface as getApi(); more Strategies"
"This rather huge commit contains the following changes: * a new server-side plugin type is defined - the packagetype plugin that can define new package types and their ""behaviors"" * a concept of packagetype behavior is introduced - basically impls of this interface can enforce naming conventions, etc. * content subsystem is modified to consult the packagetype behaviors when creating package versions in user initiated workflows * a packagetype plugin for CLI scripts is defined * changes made to PackageSource iface (and impls) to return package version comparators are reverted because this functionality is now the responsibility of the behaviors"
"Fix #98 for comparing and adding numbers together - add support for number <op> number (primitive, wrapper, general) - add support for comparison of numbers (relational, compare, etc of primitive, wrapper, general) - cleanup template repository code to remove warnings and make init thread safe - add better support for AtomicInteger, AtomicLong, BigDecimal, and BigInteger as built-in numbers - support multi-threaded test cases - add test cases for Math and Compare operators with new numbers handling - fix minor issues with relational and compare operators (relational cares about type compatibility, compare does not) - cleanup class injector of warnings"
ISPN-263 Handle cluster partitions - implemented functionality to determine multiple successive failures
renamed preferenceGroup to preferences; collapsed preference management into preferences tree; added copy and move functionality to preferences - rjrjr
A few more performance improvements in PeepholeMinimizeConditions. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47556985
"HIVE-9482 : Hive parquet timestamp compatibility (Szehon, reviewed by Brock)"
Turned-on API analysis for Visualizer and tweaked previous commits that broke API stability. 
Added include functionality to meteor and fixed arithmetic expressions
"First step in major cleanup/redo of VCF functionality. Specifically, now: a) VCF track name can work again with 3.3 or 4.0 VCF's when specifying -B name,VCF,file. Code will read header and parse automatically the version.  b) Old VCF codec is deprecated. Reader goes now direct from parsing VCF lines into producing VariantContext objects, with no intermediate VCF records. If anyone can't resist the urge to still input files using the old method, a new VCF3Codec is in place with the old code, but it will be eventually deleted. c) VCF headers and VCF info fields no longer keep track of the version. They are parsed into an internal representation and will be output only in VCF4.0 format. d) As a consequence, the existing GATK bug where files are produced with VCF4 body but VCF3.3 headers is solved. e) Several VCF 4.0 writer bugs are now solved. f) Integration test MD5's are changed, mostly because of corrected VCF4.0 headers and because validation data mostly uses now VCF4.0. g) Several VCF files in the ValidationData/ directory have been converted to VCF 4.0 format. I kept the old versions, and the new versions have a .vcf4 extension."
ACT-747: new case functionality + fixed attachment popup window auto-sizing
CAMEL-3123: Improved performance of PropertyEditorTypeConverter.
#NAME?
significant performance boost in PraatPitchmarker
Bug 302284 [Compatibility] Pass the editor input to the instantiated client
Renamed VaadinUIServices's method get() to UIServices so that VaadinUIServices can be statically imported without losing readability.
"Check in Bug 210279 Added support to share bindings among multiple chart instances. Scale context will be stored in IReportItem after computation and re-used by multiple presentation instances for the sake of performance. Currently, share binding support is disabled for future complete integration. Refactored hardcoded property names as well."
[RHQ-2097] more comprehensive plugin update functionality. read the big test matrix comment in DatabaseAndFilePluginDeploymentTest for the different scenarios we now support. This should cover most (all?) of the different plugin deployment scenarios (plugin-1.0-patch.jar in the same directory as plugin-1.0.jar for example).
Improves CSV performance for date/datetime (#426).
rename module directories for better readability
"Several changes for getting the bilingual version working, and associated functionality. i. BuildBilingualIndex now works! (According to tests on europarl english-french data.) ii. TermVectorsFromLucene edited to properly enable reuse of basicDocVectors."
improved timeline performance
Serialization binary compatibility enhancement
Added custom snippets functionality.
"Code cleanup, performance optimization and fixes in EntityContext, added tests for entity callbacks."
Added functionality to send files as e-mail attachments to  SendHtmlMailFunction. Moved mail functions to structr-ui and refactored package structure of built-in functions.
search code refactored for easier testability and reusability
AlarmClock open functionality improvement
Refactored NIO vs OIO performance tests
More functionality
WebDAV: Fix compatibility with using GPlazma as a module
#215 : customer purge functionality
Fix SimpleClans error. Performance increasement. other code optimations
Created new ExternalRequirement component interface to represent external requirements of the EMR * Implemented the CIEL version checking functionality as one of these components
Added Boolean ReadWriteGenerator based on int rather than boolean[]. Reworked child Parcel to generate in-place serialization. Added performance application.
"Jopr-55 Continuing to improve robustness, discovery and metric gathering."
[misc] readability
"* more performance * less memory * now is supported all primitives types * now is supported Byte, character, Short, BigInteger and BigDecimal"
HZN-532: Improve performance of Syslogd ConvertToEvent processor: Update of date pattern and removal of unnecessary log messages. Update in parseDate method in order to throw exception and catch invalid date.
Improved merge persons and added delete objects functionality
Transpile TypeScript accessibility modifier for class members ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=98245037
AS7-4560 Use KeyAffinityService to generate session IDs for web sessions and SFSBs (fixes lousy DIST performance)
"Modified SynchronizationController to support changes in EntityContext and TransactionCommand, added some performance logging, still wip."
Updated Caching functionality + JavaDocs
"Improved accuracy of the byte counter, and added a test to verify"
improved label conflict finding performance
HIVE-4843: Refactoring MapRedTask and ExecDriver for better re-usability and readability (Vikram Dixit K via Gunther Hagleitner)
Analyse: FamixDependencyFinder updated with respect to inner classes.  husaccttest\Analyse Java accuracytest improved for direct dependencies. 
DDF-249 Fixed load more results functionality to actually return the correct next set of results instead of skipping ahead
CommandBlocks are now at full functionality
Extracted interface for functionality injected.
ASNN-448 http://bugs.sakaiproject.org/jira/browse/ASNN-448 Review performance for instructor landing page
Added version 3 of the eqtl functional enrichment. This class speeds up the performance but uses more RAM memory. Also fixed a bug in the calculation of the Fisher exact pvalue by subtracting the amount of hits for one TF from the total hits.
"More configurability because I'm tired of maintaining forks for Ed Still gotta do nether portals, but we're close."
"More stability fixes. This also has a built-in test case for sync and async command processing. Successor command processing is probably correct, but since this isn't actually used, it is untested."
added back in caching functionality for GetCapabilities requests
Forms are separated into multiple .jsp. Roles are defined in menu so it is visible which user can access which functionality. Selection-lists are removed.
DRILL-4846: Fix a few performance issues for metadata access:
#NAME?
Some more refactoring of setting functionality.
Bug 354739 [Compatibility] Perspectives with standalone views lay out incorrectly
Re #1143 Improving RightReusabilityCategorizer.
* Added accuracy buttons to merge histogram values of high latency probes into the same histogram bin to get a proper visualization * Stopped to add empty histogram bins to plot which makes the plot.getXXXAxis().setAutoRange(true) working * Multiplied the values of a histogram bin with the width of the bin to display the correct value
Move most of addCookie functionality into AbstractCookieStore
Implemented send functionality additional to the broadcast one.
Improve column add/remove usability
Remove generic functionality to 'CodeGenBase'
Minor performance tweaks.
"tests added, changes to code to improve testability"
[FIXED JENKINS-27121] Basic Pipeline compatibility.
Refactored operation robustness handling and retry. Added retry check for initial backend operation. Improved error messages. Fixes #236.
Update in add shape functionality:  now it is possible to manager multi layer preview and publish!
Add new subtree functionality and further evolved test client.
"updated tests to reflect the following changes: deprecated method getLength(), replaced with getThrowableCount(); deprecated indexOfThrowable(int, Class), replaced with indexOfThrowable(Class, int) to make signature consistent with other APIs; changed functionality of methods that receive an index argument to throw an IndexOutOfBoundsException if the index is specified incorrectly, rather than absorbing invalid indices silently, to bring in line with the String API"
replace Performance#createPerformanceMeterFactory(...) with factory methods on Performance
"created constants for default serializers, deserializers and instance creators since all of those classes were stateless. This helps improve performance and reduces memory footprint since we are reusing the same instances for all of the VM."
"o Added IndexHits#currentScore which exposes the most recently fetched   IndexHits item's score from the search, if any. The lucene-index supports this. o Moved the ""index"" shell app to the shell component where the other kernel apps are,   it was misplaced in lucene-index. o Added QueryContext#topDocs(int) so that you can specify to retrieve only the top N   hits from a search, which may improve performance - even if when retrieving all hits   the iteration all the way down to lucene is done lazily. o Performance improvements regarding the iterator stack which makes up the return IndexHits   instances from query/get methods. Previously there could be 5-7 nested iterators.   Now there are only 3-4. o Added configuration parameter ""similarity"" which controls the Lucene   IndexWriter#setSimilarity(Similarity) for an index. It points out class names."
commons-dbcp 1.2 compatibility
"we need to maintain the binary compatibility, so I reverted getComments and added listComments that exposes PagedIterable. inspired by 8f95c4f1790f282ede2a07995f3ebe2407f9dae3"
"graph serialization, cached UUID's for performance"
"Modified listBugs page, logout functionality, header & navigation sidebar"
make compatibility with previous version.
"Propagate accuracy between user, server and friends"
compatibility with previous form semantics (en/disabled)
"Added functionality to save the annotations to a database, and updated the dependencies in the POM to 2012.11.2."
Restore compatibility with previous configuration mechanism
HBASE-660 [Migration] addColumn/deleteColumn functionality in MetaUtils
Refactoring JarConverter functionality. Containment and declarations for CompilationUnit + Package.
"[ISPN-311] (CacheLoader.loadKeys(), and performance improvements when rehashing from a cache store)"
"HIVE-12261 : schematool version info exit status should depend on compatibility, not equality (Thejas Nair, reviewed by Sushanth Sowmyan)"
"Several changes to CovariateCounter walker to print more tables (called vs. observed Q scores), bug fixes to LogisticRecalibrationWalker and LogisticRegressor, and print string functionality added to Pair."
Still more performance tweaks to annotation code to get back our original performance
Moves audio-specific functionality from RtpChannel to AudioChannel.
use binary search in the B+Tree node to optimize the performance
Better symmetry performance.
"Updated the HAL javadocs to reflect the use of a formal constructor rather than system properties.  Updated the HAL main to check argOptions and pass them into HAL.  Added a new function to SparseDoubleVector that returns a new vector with the same type and same dimensional bounds.  Updated existing SparseDoubleVectors to implement this function, some decorated classes return an Unsupported Operation Exception.  Extended GrowingSparseMatrix so that it's underlying vector type is specified by the constructor and can thus use any SparseDoubleVector datatype for more options regarding efficiency."
"Bug resolved in Graphics which prevented DefinedDiagram to run. Define code : improved readability, included some comments. New: Sequence diagram for Load SA from XML."
Added functionality to generic provider implementation.  Added trace options.  Created exception logging method in SOContainer superclass and used it in SOContainer and subclasses
PerformanceProfiler: refactor the main() method
"Created a basic TCK, a test suite aiming to provide a fairly complete set of tests for the core Akubra functionality that each store implementation must provide in order to ensure the Akubra API's are properly, consistently, and fully implemented."
Adding a typeRole package and others new funcionalities to improve the functionality of Identity
FIXED MIFOS-2986 ApplyHolidayChangesTask batch task tweaked for performance
Updated efficiency and clarity of browse code. Much faster indexing at slight cost of lookup. Fix to normalisation code.
"Added caching of index count to improve performance, and enhanced SearchClosest with way to calculate search window based on estimated layer geometry density"
"NXP-10234: more flexibility for index creation syntax, for Azure"
Bug 298671 Implement enough compatibility to bring up a simple view
performances improvement: not using WST validation mechanism.
page downloading is done concurrently to improve performance
more cli functionality
CAMEL-1933: First overhaul of JMX management in Camel. Introduced pluggable API. Much more details in mbeans and more mbeans registered. Also fixed routes not being performance counted correctly before. 
Refactor generic transormation functionality into separate package
First cut of the overall reactor build structure. No functionality.
Revert some changes and use the line snapping array to make sure the position markers are lined up properly. This saves a bunch of code and should also be a lot less of a performance hit. Almost negligable.
Moved some functionality back into AnalysisContext from LegacyAnalysisContext.  Added support for more database types to AnalysisCacheToAnalysisContextAdapter.
build: Fix build performance regression caused by git describe
Implemented basic test for delayed/queued populators to implore performance (work in progress)
HHH-7640 Improve single node Infinispan 2LC performance
[GSCOLLECT-1368] Introduce JMH based performance tests comparing Java 8 and GSC iteration patterns.
"SCRUM-584 - moved version handler, its test and update task classes from templating-compatibility to templating"
Upgraded reroll functionality
add form validate functionality
[IO-332] Improve tailer's reading performance.
"improved java parser to automatically import classes when adding annotations by Class<?>, continued working on scaffolding, MavenJavaSourceFacet now properly sets configuration of the maven-compiler-plugin to source level 1.6, but needs to be refactored for simplicity"
"perf: improve setTimestamp, setTime, setDate performance"
Glassfish compatibility added
Fix backward-compatibility. File system can be changed by sensors...
Fixed bug 270808 (improving index file to provide better performance using SearchEngine.searchAllMethodNames())
DATAMONGO-1317 - Assert compatibility with mongo-java-driver 3.2.
"Well, realized that the fragment shader can't composite or blend.  So I think this is  the closest I'll get to a decent implementation of the Duff-Porter blend functionality."
Extra LDAP search functionality + config options
"Modified destroy() method chaining - previously used destroy and chain of before*Destroyed() method calls, which was confusing and hard to trace across the class hierarchy.  Now using simple super.* overriding calls for easy traceability.  The previous before*Destroyed() methods existed for simple subclassing overrides, but are no longer relevant since the next release will favor a composition over inheritance model (subclasses should be very rare).  Also modified some JavaDoc to reflect this."
REST API v1 and v2 backwards compatibility
Still restoring functionality
"Started introducing the management around indexes. In this new design, there can be any number of indexes, each with their own configuration and pointing to different SOLR instances. The configuration data of the indexes is stored persistently in ZooKeeper. ZooKeeper watches are used to trigger various components when the configuration changes. An index can be in different states such as ready, rebuilding, disabled, and others. This new structure allows for more flexibility and provides a way for integrating and managing index rebuilding."
performance: caching results for TypeEnvironment#create(ITypeBinding) : TType
Extended test cases to verify performance implications of different RTree tests on the tree nodes. In particular to observer the performance improvement from the recent RTree bugfix.
"Changes to remove dependency on internal queue and improve performance, reduce number of objects created, reduce GC overhead, and fix bugs in priority internal queue"
Refactoring of common functionality for retrieving and storing property records
Fallback functionality is implemented for some cases and a bug fix
"topic: code enhanced type: configurability module: deegree-core, deegree-services, deegree-sos-cite100 description: applying the jdbc separation to the SOS"
NMS-8589: Cleanup NodeMapsApplication to destroy scheduled refresh to avoid Thread and Out of Memory Leak as well as Performance issues.
fixed sampling and efficiency problems in creating splits for numeric nodes. Also renamed some things
"Fixed basic dependency functionality - If class can't be found, all other .jar files are scanned"
Stability fixes.
[JBRULES-3263] performance optimization of jitted constraint
Android: Streaming functionality.
BatchInsertResults -> BatchResults: backwards compatibility change
performance tweaks
[223157] support mixed type dependency support and performance improvements
Combined classes MCP23017Pin.java and MCP23S17.java in a super class for more flexibility when working with them.
"The whole notion of explicit priority plots and charts has been eliminated. Instead this functionality is now part of the generic line chart infrastructure . This is because radar charts now support the notion of prioritizing plots. Therefore it is not necessary to distinguish radar charts from line charts or XY line charts. Either this fact was not true before, and changed at some point, or this it is simply an oversight on my part."
@Profiled performances optimization
Bug 419895 - [WorkbenchParts] Compatibility editor and views have their context populated too late
Changed the functionality of the physical phasing in the HC: now hom vars are output as 0|1.
DRILL-4852: Fix performance regression for COUNT(*) query over large JSON table
Performance Bug 60703: [implementation] M8 Editors take longer to open than R2.x editors
#NAME?
"Re-align to new Galley fluent apis. Also, starting to develop TCK tests that are designed to be reused through various embedding scenarios to re-validate functionality with custom components from the embedding environment. TCK stuff is still dormant for now."
Added some performance testing
Move batch class to core (to keep compatibility of views plugin w/ 4.1 API)
"Federation - Implemented a paging mechanism for the connectors which makes use of the standard block segments. Updated the mock connector to simulate pagination for a node, so that the functionality can be tested."
Modified behaviour of Jena calls to not load imported ontologies if requested.   - reverts a previous change of behaviour but supports the functionality with expanded API.
JBIDE-21868 - Performance issue on Deploy Docker Image wizard
ICE-9200 : Servlet 3.0 compatibility for FileEntry
"Consolidate the policy interceptors down a bit to make them have MUCH less performance impact if policy is enabled, but not used."
Scalability/Memory enhancements upon the Parser framework.
[GSCOLLECT-941] Make the serial/parallel performance tests more fair by shuffling the test execution.
"Major update to the API with the new primitive collections, which exposes a primitive-based API.  This results in big performance gains for certain Graph-based operations, while not exposing a 3rd-party API."
Initial commit of deodex functionality in dexlib and baksmali
Sigificantly improved the performance of the JohnsonPathFinder. Refactored some tests to be more accurate
"Refactor the test suite, add performance spotcheck tests for profiling."
Fix disabled-worlds for compatibilityMode (Fix #37) + Update to Vault 1.5
WYRL: working on a) simplifing the process of creating different rewriters; b) getting rid of some performance issues in my existing rewriters.
"Patch for David Daoust. <BR> Refactored the scanner to make Scanner Contexts more specific for macro expansions and inclusions, yielding performance and memory improvements."
[196418] Tag Library Editor feature request (restore Show Attributes functionality)
Make Ace's immutable. Should not have any affect of functionality but does allow for some performance improvements.
trunk:   - new resolved functionality with depths and conflict choices
[DROOLS-1387] minor performance optimizations (#1052)
"moved play_sound's path functionality to its own function, play_sound_path."
modify tests for readability
Performance work watching queries being made: - Do not snapshot the entire Schema by default - Allow getIndex and getForeignKeys to optimize around index names. - Smarter default and null schema comparision
"Removed proxy pooling, too many stability issues."
Refactored base class for calculations moving some functionality into kenyacore
split compatibility for comparison and equality
Implemented an example demonstrating all current @ViewConfig functionality
ISIS-109: backfilling some missing tests; removed xpath functionality (since now have equiv support via path) and removed xom:xom optional dependency that it requires
Performance Improvements
Backporting functionality around http healthccheck from STS4
ServerInfo Class  Added Restfunctionality from Releasebranch
Removed static variables. Removed commons-logging due to memory leaks. Performance enhancements. Include only framework/otherclasspath sets with selectors. Optional value for the chmod command. Removed WOPropertiesHandler.
major refactoring for cdh compatibility
"A few minor modifications masquerading as significant changes according to  svn's logs: - Copied BAM indexing engine from Picard back into the GATK anticipating   shard merging algorithm.  Tried to leave most of the building blocks in   Picard.  If this turns into a logistical nightmare, I'll merge the building   blocks into the GATK as well. - Reorganized the org.broadinstitute.sting.gatk.datasources package, giving   better separation of query and management functionality for reads, ref, rmd,   and samples.   - Merged Shard building blocks into org.broadinstitute.sting.gatk.datasources.   reads package, indicating it's current strong relationship with the reads,   rather than the general unifying element I wish this would be. - Collapsed BAMFormatAwareShard into Shard."
Improve routing CA performance
Retain functionality moved from the PooledByteBuffer to the RetainableByteBuffer class.
added basic tasking functionality
renamed handler to make more sense for functionality. Closes #202
"Updated to work on Nvidia and AMD Stream SDK 2.1 properly, streamlined host-side block checking, allow fractions of an FPS to be used with -f, and removed the event callback code in exchange for a blocking thread per queue; now above 95% theoretical performance for a Radeon"
"FEND-1133: implemented 'more"" functionality for recent tab and separate out the logic for plosone and other journals. Still need to clean up the code for homepageaction"
Updated file upload functionality. Blank questions cannot be added anymore.
ARQ-421 Restore remote OSGi functionality
" * New `@NoException` annotation to reduce the size of generated code and optimize runtime performance of functions that are guaranteed not to throw exceptions, or for cases when we do not mind that the JVM may crash and burn  * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue #19)  * Fixed regression where the `@Adapter` notation generates incorrect code for types other than `Pointer` (issue #20)"
Switch to DrillBuf Add @Inject DrillBuf Move comparison functions to memory sensitive ones Add scalar replacement functionality for value holders Simplify date parsing function Add local compiled code caching
"Heavy refactoring on memento-save logic and code structure.  Optimized the number of created memento for the: check, opacity and alias layers properties. TODO: Implement on WS the new memento save operations.  	To complete the manage server functionality."
Renamed the saveTransactionConnection and clear to be saveSpecialConnection and clear.  We are now using it or non-transaction functionality.
SCRUM-329 - introduced ComponentComposer - added ComponentConfigurationBuilder for building a ComponentProviderConfiguration based on components from module descriptors - replaced hard coded config of system ComponentProvider to config in core module descriptor - extracted components from properties backwards compatibility logic to ComponentsFromPropertiesComposer - adapted ComponentProviderConfiguration to better suit configuration from module descriptor - extracted registration of context providers and scopes GuiceContextAndScopesComposer
"Dirty commit with working nesting. The functionality is already there, but it still needs clean up."
Removed makeTag-functionality in chckout()
XWIKI-8360: Code Macro is not multithreaded causing performance issues XWIKI-9162: Unsupported language should have the same behavior than none and not generate a verbatim block
rows[] backward compatibility and refactored codes for column binding related methods.
AVRO-752. Java: Enhanced Performance Test Suite
Generalized PortCustomizer functionality so that it's possible to customize a port for other purposes than just WSS support. Moved PortCustomizer to consumer module and extracted related functionality into new PortCustomizerRegistry class from WebServiceSecurityFactory.
moving location of AsyncBAMProducer functionality
Performance tweaks Fixed blocks not updating correctly
fixed bugs + new functionality
progress in backend performance related to identifications
Refactoring of Java CG related functionality
Add more functionality to the multi-room sample
Adding flexibility to IR future option SABR functions. Catching errors in getRequirements() when trades are malformed and improving documentation
fixing StabilityMonitor deadlocks
Merge encrypted wallets functionality by Jim Burton.
JBQA-4798: Prepare automated solution for EAP-JBDS compatibility testing
"UHM-987: Improve performance of archives room ""pull records"" page"
core: Move CompatibilityVersionUtils to bll
wip stream lined CSVColumnValueMatcher; part way through the functionality but so far reduced its time to parse a csv line from 8us to 1.5us
refactoring BuildStep so that it can be used for other project types. This is so far done in a way that maintains the binary/source compatibility with old plugins.
AS7-3556 Add management api-based system tests for OSGi management functionality
Performance tuning.
[208071] (performance) Traditional Memory Rendering: unnecessary populateCache
Bug 471103 Add caching for performance improvements of indexing process
"Refactorings to resolve bug #342677 (Removal of ConfigurationReader), test suite performance improvments"
SAK-7008 updated changed field name form commnet to commenText to allow for compatibility with oracle
"Added getPassword, getGroups, getSubjects services.  Get password filtered by access level of user.  Password search grid clickable to edit/view password.  Edit password GUI improvements, get current password functionality added.  Edit group selection GUI added.  Permission GUI in progress."
Analyse Accuracy test renewed for Java and C#. Test directory and testresources reorganized.
Bug 484361 Huge performance slowdown between 4.6 M3 and M4 - Performance optimizations added which reduce the searches for secondary types
Splitted dao base classes for extensibility
"Removed Hibernate dependence on Jasypt implementation, all encryption now down at service layer depending only on interface.  More work, but more flexibility to swap in different encryptor implementations."
Bug 102893 - [WorkingSets] Nested WorkingSets Bug 109174 - [WorkingSets] compatibility working set to bridge new page-level functionality
#JC-1605 Captcha fully moved to plugin. Added functionality of kaptcha plugin to registration jsp page and registration with js dialog.
HSEARCH-1460 Renaming old performance module into sandbox
"work on search functionality - query parsing, etc"
Refactored connection flow for better composition and readability
Implementing functionality
[MIFOS-3147] Added acceptance tests around the create Question Group functionality. Also refactored the QuestionnaireController to render the system error at the top of the page
added GetBacklinkTitles functionality for old MediaWiki versions
"JC: Reorganisation of the particle system code to give more flexibility and to work properly with alpha channel coloring. Removes the use of a properties file and assumes the user will explicitly set the values in code, although not all functionality hooked up yet"
Attention: The lucene functionality is still untested at the moment. It should work but we don't know it for sure.
added backward compatibility
Rename OpenGraphServlet to FacebookServelet because it better describes the functionality
Refactored NicProfile.java for readability.
GATKReport v0.2: - Floating point column widths are measured correctly - Using fixed width columns instead of white space separated which allows spaces embedded in cell values - Legacy support for parsing white space separated v0.1 tables where the columns may not be fixed width - Enforcing that table descriptions do not contain newlines so that tables can be parsed correctly Replaced GATKReportTableParser with existing functionality in GATKReport
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: referenced form groups
Restoring functionality lost with OPENEJB-1740
Long polling functionality completed
Renamed the performancemonitor to diagnostics
Fix for Bug 360159 - [Compatibility] Saved perspective loses its minimized trim stacks
"total database populator reworked, no longer using spring populate(Connection) interface.. now using own populate(). this makes it useable for JPA/custom persistence, not just JDBC. also we get allot more flexibility, as a datasource can be configured per populator. also created a cleaner API for SQL database populator."
- Sending STABILITY message *unreliably* but clearing 'votes' beforehand (https://issues.jboss.org/browse/JGRP-1638)
"back out backward compatibility fix, not required now."
Java readability ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52400888
"Just have a single input stream, as the functionality is the same"
"Removed copy-on-write tick approach, performance increased greatly.  Added jmx server monitor bean. UserActionService now longer copies and clears array. instead pointer assignment to new array is used. Performance increase here."
"Removed link-chain concept.  Instead of attaching Iterator/ Positionable links to any other linkable Iterators/ Positionables, we prefer now to build Iterators/Positionables that drive one, two or many Iterators/Positionables.  That removes the potentially empty move-calls from the interfaces while providing the same amount of flexibility at least."
"restored TypeDescriptor getElementType, getMapKeyType, and getMapValueType compatibility; StringToCollection and Array Converters are now conditional and check targetElementType if present; TypeDesciptor#isAssignable no longer bothers with element type and map key/value types in checking assignability for consistency elsewhere; improved javadoc"
Updated all form functionality pages * Removed allowed apps list from @SharedPage annotation so that they can be used by any app and access is determined by the form's allowed apps * Renamed *HtmlForm* to *Form* for simplicity
Improved code readability and cleaned the code
Missing some copyright notices! Fixed Java 1.5 compatibility as well
remove runtime.compatibility dependency
Added the functionality for BZ#981118 - Provide a way of enabling a standardized Author_Group.xml file.
Performance tweaks
BISERVER-9761 - Made CubeFileProvider creation use only the object-factory. Added compatibility migrator.
make digest functionality in FileUpload more versatile
"Centralise Thumbnail logic, and improve DB efficiency in generating thumbnail links on item lists (in testing, at least 4x better)"
major checkpoint:   - rewrote string handling in loader and in sequencestring packer for improved performance     and better memory management   - added tests
"Added functionality to specify options for kwbuildproject. Useful for changing location of tables directory, adding compiler options, etc."
Started 2nd benchmark to measure performance of WSNApp over the Testbed Runtime overlay
Moved performance/health monitor into com.hazelcast.internal from hazelcast.util
227098 [formatting][performance] Adopt new code formatter that now formats Javadoc
"Performance improvments and better shutdown handling, fixed also testcases"
ACT-746: added functionality to involve people and give them custom roles
Adding pull and push methods that take streams rather than local files for more flexibility and easier testing.
Added ID number validation functionality.
Updates to performance module.
[330984] Performance: persist and restore IDependencyGraph
new parameters: top list size and update accuracy
MRTD demo now uses RrdDbPool for maximum performance
"renamed couple classes, can select podcast to display on delete page, delete/revise functionality still needed"
Massive improvements to VE2 infrastructure.  Now supports VCF writing of interesting sites; multiple comp and eval tracks.  Eric will be taking it over and expanding functionality over the next few weeks until it's ready to replace VE1
"Applied fixes to allow more flexibility in in-line property definitions, added test cases to demonstrate."
Improved Functionality
Draft implementation: added connect functionality.
[MAJOR COMPATIBILITY] Updating the MineCraftReflection using the protocollib of @aadnk with his agreement. See #380 & See #406
Improvements to the usability and error messages of RefasterJS. - Show help message if no arguments are provided. - Show better messages as to what's going on in the program. - Allow globs to be specified and comma separated files in the inputs argument. - Don't show compiler warning and error output unless --verbose is specified. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=80028737
Ported Hazelcast 2 elastic memory functionality to 3.x
Started on basic proctoring functionality
add parsing bean functionality
Extendible hashing tests were added and performance was improved.
performance-tests: added soak tests
"introduced full/sparse subclasses, separated parts of the functionality"
[PLINK-316] Create static pool of PicketLink STS clients to improve performance of login modules
RAVE-37 make email address a required field in the registration process (for future 'forgot password' functionality)
abstract out the functionality that will be common to all upgrade tests to a base class so that we can have more freedom in splitting stuff up
[GSCOLLECT-815] Create OrderedIterable interface for order dependent functionality.
engine: Migration policies per compatibility version
"proxy monit disco : improved EasySOAv1SOAP monit disco * patched managementService's compatibility check    & replaced EasySOA*Configuration by ProxyConfiguration, * use & move of ProxyPropertyManager (not the same as PropertyManager,    else can't be seen from -api project) to create REST client    and do it only once, patched urls in case of GET wsdl, * improved title & instanceId metas, * still TODO LATER register EndpointConsumption if SOAP call"
cleanup for better readability
fix backward compatibility for rmi
modifications to improve performance - rjrjr
changed GameState.validChoices from hashmap to arraylist for efficiency.
Fixed horrendous bug caused by the predicates static analysis making an incorrect assumption of immutability of their operands. Resolve by gutting Predicates2 of all related functionality so it can't happen again.
Added 'Interesting' functionality
"Finish out the modularity to allow Aegis validation at some point. If this much is in 2.2.0, 2.2.x can fill in the rest when msv is ready."
changed visibility and method access so that wagon trees that are converted from weka decision trees can be read in. Changes are not expected to cause compatibility issues.
Improved performance of write queue processing during timeouts
* Added readability to methods
xforms module: added support for time concepts and worked on more usability issues and enhancements of the form designer.
Bug 331768 [Compatibility] Unpersistable editors outside the shared area in an active perspective are not closed on shutdown
Bug 328720 [Compatibility] Synchronize with CVS automatically triggers save on dirty editors
Performance fix for seam.
Bug 299968 - API builder performance still bad for incremental build
Add record data sequence number to record table (in order to improve fetch performance)
Refactoring for readability
Simplified TestCaseRunnerTest and improved its readability.
Update to functionality!
Improve data import performance
Adjusted the Cart API to remove redundant entity references and to make it more flexible Added remove buttons to demonstrate range of API functionality
more unit performance test
Now properly extending candidate haplotypes with bases from the reference context instead of filling with padding bases. Functionality in the private Haplotype class is no longer necessary so removing it. No need to have four different Haplotype classes in the GATK.
XWIKI-11509 : Display ratings information in the Extension Manager UI * improve performances
"lots of improvements to provider flexibility, in terms of how requests are sent to the server"
NEWSPLT-17 Adding initial JSR-286 functionality for the multi feed reader
ISIS-778: moving functionality into ReferencePanel
Added Dirty Functionality
"Standalone Atlas: NetCDF generation performance tuning, using Deque class to make sure refs to Future aren't retained.  Renamed Deque append() method to offerLast() though, so method names are identical to their equivalent in Java 6 Deque - it'll make it easier if we want to switch.  Updated context.xml and loaderContext.xml to use connection pool properties that seem to nullify the pool exhausted exception: due to maxIdle value?"
Attempting to add backwards compatibility for NetworkMarker.
Add logging and performance metrics to the PaymentGateway through AbstractPaymentGateway.
Some stability additions to the code
Improvement on the performance of SQLi identification. Lookup in the constant pool for certain class name is use to skip large amount of class that could not get impacted.
[FEST-133] IN PROGRESS. Renaming method(s) for better readability
"changes for #15 Multiple canvas editing panes plus mixing  first changes for #30 APi changes - Improve robustness, canvas interoperability and allow proxy"
Removal of more vecmath classes and adding in needed functionality to our own.
Bug 304250 [Compatibility] NPE thrown when restoring a view from its reference
LiveDataResource now supports all older web service functions using a combination of TargetTracker and AisViewHelper. There are bugs in the new predicate based filtering and some target filters still use old functionality. No support for anonymized target tracking (needs new implementation). (AISVIEW-1)
"move this back to org.opennms.netmgt.collectd for config-compatibility reasons, since we have not finished the OSGi move anyways"
added explicity addHost method on cassandraHost in prep for collapsing CassandraCluster and Cluster functionality
Decouple SSH functionality in separate bundle and fix tests accordingly.
"no functionality changed, just severely refactored for organization and maintainability"
Performance Improvements
Changes to Plugin and ResourceType deletion - refactor PluginManagerBean.deletePlugins for scalability and perf by avoiding   an umbrella transaction and allowing for deferred resource removal. - refactor ResourceMetadataManagerBean.removeObsoleteTypes to utilize the same   approach as plugin deletion for type removal. - fix bug in ResourceManagerBean.uninventoryResources() that did not utilize   a new transaction for each resource uninventory. - Various perf enhancements.   - avoid unnecessary and timely authz checks when uninventory is being performed     by overlord/inventoryManager   - use overlord a little more efficiently in places (but still take into     consideration its session timeout limit). - Add a little defensive coding to AsyncResourceDeleteJob to log less if   the doomed resource has already been removed. This can happen when the quartz job   runs at the same time as a runtime plugin update that removes types.
tried to improve performance
More robustness in using the AST deltas (always typecheck everything)
MAHOUT-236: - removed output directory deletion from DirichletDriver.writeInitialState - added runClustering option to KmeansDriver and MeanShiftCanopyDriver - refactored methods from MeanShiftCanopyJob into MeanShiftCanopyDriver and removed job - adjusted TestKmeansClustering and TestMeanShift - adjusted synthetic control examples to employ ClusterDumper of outputs - adjusted TestClusterDumper and TestDCbwEvaluator for KMeans and MeanShift job api changes - decreased number of iterations in unit tests to improve performance - all tests run
Performance adaptions as promised in last commit
Updated JavaCodeGenUtil with functionality for invoking SL to Java code generation
o Clean up copy on write stuff and optimized applying diff. o Removed tx field in NeoPrimitive in favor of memory footprint   (performance gain was not that big) o Added entrySet() to ArrayMap
Renamed DefaultPortableReaderPerformanceTest
"Performance improvements, contributed by Michael S."
Tweaked superclass handling to improve reliability when name resolution isn't completely possible
Code fixes and improvements. No new functionality added.
"more compatibility with other key types than RSA, AES"
engine: Remove update functionality from AttachNetworkToCluster
topic: code enhanced type:functionality module: other description: MDEditor - updated configuration
DBMaker: add missing methods for 1.0 compatibility
Fixed a prefs bug in JobPanel. HTTPified TableScannerCamera. Added a new wizard base class that removes a ton of duplicates functionality. Switched TableScannerCamera wizard to the new base class. Added a new method to configuration that allows classes to get a directory to store random data in.
IDE-1064: first cut of performance related changes in resource resolving
"[MRM-1283] start to migrate browse functionality to use the content repository. At present, this does everything except the just-in-time processing of models that haven't been stored yet"
add manual journals functionality - some attributes
CheckIn:Fix bugzilla bug 142136 [Performance improvements] Optimize storing data into report document
Changed compatibility tests. Testing JBDS5<->JBDS6 compatibility instead of JBDS4<->JBDS5.
get user home time line tweets functionality i searching functionality - merging
OOZIE-1575 Add functionality to submit sqoop jobs through http on oozie server side (bowenzhangusa via rkanter)
Tidied up new locations metadata functionality
"Refactorings to resolve bug #342677 (Streamline things a little bit, improvement of test suite performance)"
Finish new functionality for story #3676
add more functionality to the repository interfaces
"refactored cycle API, added RenderInfo to provide standard set of available views for plug-ins, changed the content-type definition by using a mixin interface to add extensibility to the set of standard content-types, refactored API according to these changes, adapted the UI/REST component accordingly"
let GPT use the new functionality from ceres-metadata
Renamed method to isNonTransactional to better readability
Liquibase OSGi compatibility
"refactor reinitializedModelTest, and add test for performance @rev gtorres@ @bug W-2063113@"
Add simple performance tests for List and Set wrappers
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
"[changed] SpriteBatch, made fields private. Added convenience method draw(texture, x, y), also added to SpriteCache. [changed] Sprite to derive from TextureRegion. Slightly cleaner because TextureRegion#flip modifies the Sprite position. [changed] Sprite to update the TextureRegion u,v,u2,v2 fields. This isn't that big of a deal, and allows SpriteBatch and other internal classes to avoid the getters without unexpected results. [changed] TextureAtlas.AtlasSprite to only handle the position offset due to whitespace stripping. This includes flip. Scaling a Sprite that has whitespace removed will not scale the offset. This was done for simplicity and removes some multiplies in setPosition/Bounds. Handle it yourself if needed. [fixed] getColor in BitmapFont. [added] getColor to SpriteBatch. [changed] SpriteCache to handle colors the same way as SpriteBatch."
Core functionality fix for [Bug 182820] [Exclusion/Inclusion] Included source FILE appears as source FOLDER
Small changes improving stability. API for importing archetypes and quickstarts added.
"Modified front end to take 3 input modes: run, clean and download.  Download has additional functionality which can retrieve all RAMPART's dependencies from the web."
Initial merge of Android compatibility library r3.
Some performance improvements on Jython (especially in the grammar which now uses a CharStream in the same way that PyDev uses it).
Moving inner classes back to IndexTankClient to ensure backwards compatibility
"Massive cleaning, double -> float conversion, renaming for readability, and commenting. Also started on forest restoring."
"Prepared code with improved readability and debugging: - Formatting - Renamed (private) methods and variables - Simplified code - Logging improvements - Fixed some FindBugs bugs (NPEs, character encoding etc) - Fixed some concurrency issues - Added or adjusted Javadocs"
XWIKI-4068: Allow the page to link to to be searched for or selected from the most recently edited pages * Added functional tests. Refactored image and link tests for improved readability.
Implement create functionality (on PatientResource) - RESTWS-81
"- Summary: [Accessibility]Series Markers Dialog, can't use keyboard to access the Markers"
Back porting to 1.11: Fix class loading performance issues - TRUNK-4618(cherry picked from commit a5953c35fd57c1c7c37cebb645dc623a4b38e3fe)
"Final ObjectDB performance tweak for a while, I guess."
HADOOP-7380. Add client failover functionality to o.a.h.io.(ipc|retry). Contributed by Aaron T. Myers
Add PR check profile for archives & stability fixes for Archive tests (#1583)
RF-12822: improving readability of tests
The buildin Score implementations (including their ScoreCalculator and ScoreDefinition) have been moved into a package per implementation functionality.
"Bug 267375 -  [ui] ""Available Software Sites"" usability issues"
"Moved async callback performance test to ""examples"" project"
externalized messages; improved performance of AOP reference model builder by caching AspectJPointcutExpression per AspectDefinition
improving reusability
Cleanup GATK efficiency monitor classes
[PLAT-5428] Moving functionality to get all curve names up the hierarchy of curve providers
restored changed methods as deprecated to maintain backward-compatibility
Ticket #192: Completed. - Functionality enhancements in end-point detection algorithm  - Important parameters determined and integrated into GUI  - Verified using the German neutral recording set
Move Resource to top level to better reflect functionality.
Moves ToolPageContext#localize functionality out.
moved common functionality to Util
283375 improved extensibility of SSL connectors
GWT-compatibility changes now merged upstream to JBox2D.
"A bit of a reshuffle.  I've moved the key stuff out of workbench, and into the command support class.  This cleans up workbench a bit, and groups functionality a bit better."
Refactored RingBuffer common functionality. Added RingBufferLong.
Bug 306896 [Compatibility] IEditorMatchingStrategy processing is unimplemented
Add block transparency attributes to improve lighting accuracy
issue JBIDE-4029: Make selection bar scrollable for tags and their parents https://jira.jboss.org/jira/browse/JBIDE-4029  - performance improvements  - drop down button image changed
1.1.0 beta version jQuery UI instead of Kendo Incoming radio functionality Multivolume Album other minor bugs
ACCUMULO-4095 Hacks on CustomNonBlockingServer to restore client address functionality.
#NAME?
Fix #1517 : this contains an optimization that might also globally increase the build performance by greatly reduce the number of times we search for secondary types.
Compatibility fix
NIXExporter: a bit of refactoring for readability
"Improves write performance with a new property cache layer in EntityWrapper, fixes logging output by adding a configuration file for logback, speeds up tests with reuseFors=true in core, removes charset output in every single test execution."
"CheckIn: Refactor code for javascript evaluators to evaluate expressions gracefully and efficiently, which especially improve the performance and readability of code for aggregation filtering/sorting"
#485 - Remove the PaymentResponseItem entity. Functionality should actually be eclipse by that of the PaymentTransaction
More performance-related changes.
"JS-200 Fix Bible book name lookup errors Lookup now prioritizes NT over OT over NC (non-canonical) and only sees Bible books in the current versification. Note, the Bible, NT and OT intros are classed as NC. This means that deuterocanonical books won't be found in a versification that does not have them. This was a large change moving the name lookup into Versification with it having BibleNames per locale using Chris B's locale provider. In KeyUtil, went back to not requiring a v11n. Also improved performance by requiring that all Keys provided are Verse, VerseRange or Passage, throwing ClassCastException otherwise. Did misc cleanup."
refactored for better reusability.
CheckIn:Fix tracker bug 97227 Performance issue when dragging/dropping fields into BRS
Replay functionality
Fixed bug on remote connections: the pool wasn't used properly with poor performance on parallel connections
Small refactoring to improve readability
1. Build System Backward Compatibility
"add little performance test for split values in the list index, disabled atm"
"clarified the difference between the Intermittent annotation, when used by the Rule, I've renamed it to Repeating. So, Repeating and Concurrent can be used with Rules to create scalability / soak type tests where as Intermittent can be used with a test runner to run several times (including @before/afters)."
Moved generation of changelog to separate classes for extensibility
"Cleaned up conditiona configuration support (introduced RequestCondition concept) to allow for configurability of enforcing secure connections, et. al."
"Big refactoring of conversion code - removed a huge amount of repeated, error-prone code and moved it to a super class for a very small performance penalty (occasional unnecessary conversions).  Improved unit tests to check all the conversions in concert with the .equals operator and found several bugs in the process."
more unit performance tests
Increased performance by changing to LAZY-fetch of area attributes
performance optimize
"Many improvements to CPD - mostly the GUI, but also efficiency tweaks in the renderers.  Thanks to Brian Remedios for the code!"
"HBASE-4195 Possible inconsistency in a memstore read after a reseek, possible performance improvement"
"RHQ-792 - test to make sure the corresponding AgentClient is up, before interacting with it (use 2000ms timeout);  on the crazy off-chance that the AgentClient is available but sending the report fails, catch Throwable to make sure the caller's request will continue to completion;  update mtime's of resources whose MeasurementSchedules are being changed (directly on the resource, or indirectly through the metric template);  while i was at it, improve the performance of the end-to-end flow for metric tempalte updates by batch all ResourceMeasurementSchedulesRequest's for a single agent into a single remote method call and, more importantly, single check against the availability of the corresponding AgentClient; "
"Several performance improvements, monster template and xml updates and fixed bug while logging-in"
Updated methods with new TheMovieDb functionality
1. Fixed BukkitContrib compatibility 2. Refactored xAuthPermissions & xAuthHelp
"Feature #2829. Now getting users and groups with priviledges to access a given application instance is supported. By the way, features are either added or refined to Admin, GroupTable, UserTable, UserManager, GroupManager and OrganizationController in order to improve this functionality."
SOAPUI-2916 Create POC functionality for SAML authentication assertion using a keystore (Holder-of-Key)
Added 2 faster speeds to estimator - both compromising accuracy on account of faster results.
HBASE-536 Remove MiniDFS startup from MiniHBaseCluster -Changed MiniHBaseCluster to not start up a MiniDFS -Changed HBaseClusterTestCase to do the work of starting up a MiniDFS. -Added pre and post setup method to HBaseClusterTestCase so you can control what happen before MiniHBaseCluster is booted up -Converted AbstractMergeTestCase to be a HBaseClusterTestCase -Converted any test that used a raw MIniDFS or MiniHBaseCluster to use HBaseClusterTestCase instead -Split TestTimestamp into two tests - one for clientside (now in o.a.h.h.client) and one for serverside (o.a.h.h.regionserver) -Merged in Stack's changes to make bin/hbase have hadoop jars first on the classpath -Updated PerformanceEvaluation (in --miniCluster mode) to start up a DFS first -Fixed a bug in BaseScanner that would have allowed NPEs to be generated
Refactoring of Java CG related functionality
Cleanup and improved readability for CloneAndRegisterMachineFromIMachineIfNotAlreadyExists.
improved TinyBinary performance (smaller storage and faster load times)
streamlining test case performance for faster builds
MEncoder logic improvements on Windows (fixes a few file compatibility bugs)
"Applied recent fix from trunk for issue#21, and remaining test objects from issue#20 Added functionality for mapperFacade to be available in Converter implementations (for mapping of nested types, as it is in custom mappers) Removed PropertyResolver, as it was simply a static singleton holder for the default property resolver strategy instance; since ClassMapBuilder was the only other class truly reliant upon it, deprecated the static map() methods, and moved their functionality into Mapper (classMap() methods) so that the mapper instance could be used to generate new class mappings. This is to help resolve class-loader leakage issues associated with retaining the Properties cache in a static member variable"
[SUREFIRE-1436] Increase usability in quiet mode
Addded back Agent Load Balancing functionality (was temporarely disabled in master by vmSync merge)
Fixing compatibility issue
"switch to only dealing with database configs -- connectionDictionary is maintained for backwards compatibility and will match the ""active database config"" at the time of writing your model"
"added split.stop(tag) functionality, MonitoringInterceptor changed accordingly"
Using MaxwellCommon to store shared tomcat functionality
XWIKI-7992: Improve performance of R40000XWIKI6990 for migrating large wikis and wiki farm
"Add support for XPath 2.0 and XPath 1.0 compatibility using Saxon.  This is implemented using the Saxon OM classes, for good performance.  Existing PMD XPath functions are refactored to be compatible with Saxon's extension support.  The functions are exposed using 'pmd' and 'pmd-java' namespace prefixes, while these prefixes cause no issues for Jaxen, they are required by Saxon."
The functionality to create a GTVectorDatabinding
Encapsulated the functionality of the code into a service class which the plugin now makes use of. As a result the code became testable and there were tests added for the service and the patterns.
CPTP-540 Multiple automated measurements applied to Spirometry. Code cleanup and robustness.
"performance: 1) reduce database round trips by ~40 for each record/rowItem displayed for resource alertHistory and subsystem alertHistory pages; previous implementation was loading alertRecoveryInfo from a static facelet-layer method was, which made several roundtrips and was executed by the JSF ER Resolver multiple times per rowItem;  moved the logic for generating recovery info into the UIBean logic, so it only makes *at most* 1 additional round trip per rowItem;  the ideal solution would be to load the necessary information in the query, but this should be good enough for 1.2 release;  2) doing ""this.dataModel = null"" in the UIBean is wrong, because it causes the DataModel to immediately be reloaded the next time the ER Resolver needs to access some item in the model; using an actionListen style resetting of the dataModel from the facelet fronting the UIBean correctly loads the dataModel once and keep the search filters working properly; "
[DROOLS-64] Trait Performance and fixes
refactored MustUseRule and SkipCallRule. edited functionality to distinguish the difference between rules on logical level and physical level.
Removed deprecated methods from filter functionality context and its hierarchy
java parser visitor used for groovy compatibility
Better names for methods and introducing more methods for better readability
hook unstucking functionality
Bug 366528 - [Compatibility] Implement IMenuService#populateContributionManager
"finished all Quoine Orders API functionality, unit tests"
[KARAF-5400] Remove usage of felix scr compatibility bundle
Improved backward compatibility implementation
"implemented the RELAX NG DTD compatibility spec. Moved ID/IDREF type into XSDLib, and changed the way ID/IDREF is validated."
improving connectivity management and performance
ssh performance improvements: reuse ssh connection
Implemented enough functionality for other entities to appear.
Fiji Archipelago: Basic functionality. Ping and Shutdown work.
Fixed broken tika compatibility
488246: improve readability of XrefReplacementTokenProcessor
SONAR-9245 facet new_reliability_rating in search_projects WS
Changed aggregate status view to site status view Moved site status config from db to xml Added indexes to new foreign keys for performance
All Mojos now extends AbstractMojo who provides commons parameters and functionality. To allow this the parameters now are readed using annotations instead of the old comments alternative no allow inheritance. (testing is pending)
"finished functionality (TODO: tests, persist messages)"
"enable the interceptor always. but that interceptor should only ever do something if the hibernate monitor has its debug logger enabled now to enable hibernate stats, you just edit jboss-log4j.xml and uncomment HibernatePerformanceMonitor category"
Abstracted TestCase into separate class and differentiated exceptions for better testability
"Non-blocking connection pool to avoid scanning the entire queue of pending connection requests on each connection lease / release operation (under heavy load the request queue can contain a significant number of pending requests, a full linear scan of which can cause massive performance degradation)"
Tests stability improved
Updated Manifest Merge functionality. Added support for SDK Tools R21.
"Coverage statistics now fully implements DepthOfCoverage functionality, including the ability to print base counts. Minor changes to BaseUtils to support 'N' and 'D' characters. PickSequenomProbes now has the option to not print the whole window as part of the probe name (e.g. you just see PROJECT_NAME|CHR_POS and not PROJECT_NAME|CHR_POS_CHR_PROBESTART-PROBEND). Full integration tests for CoverageStatistics are forthcoming."
#SB-426: Extract the common metadata functionality into a separate re-usable module
Fixed the performance problems with AISFrame.
JavaDocs and tests for session level performance statistic were added.
Add convenience functionality related to generation fo Java quotes
Test unmodifiability of returned collections
"finished creating integration tests for all functionality needed for beta.  fixed bad logging formats, added javadoc"
Adding CRUD functionality
bracket functionality moved to ASTNodes
Moved functionality from UI to service class
JERSEY-2305: Parameterized existing performance tests
[1.98] Temporary bug compatibility Fix for Bug 420038 - [1.8][compiler] Tolerate illegal type annotations on array dimensions of class literals for now for compatibility. 
"DDF-447  updates to escape the hyphen, underscore, and other reserved Lucene search chars for backwards compatibility"
Improve Collect Earth placemark data update performance (work in progress)
Added the AsOfTime functionality to the methods
"Added functionality to reset password. Upon resetting, password is encrypted."
Better and more clean up performance tests
"Complete translation to antlr4, performance improvements and descriptive error messages"
Code clean and performance improvements
"topic: code enhanced type: functionality, other module: [d3] coverage description: added supplement methods / fixed cache reader"
Multithread calculation of the complex numbers for each pixel to improve performance
Continued Repox Datasources functionality implementation
"* Interest grouping functionality bolted in, 0.3 is nearing completion!"
"JBEHAVE-474:  Refactored determination of previous non-And step.  Step starting word functionality now provided by Keywords rather than CandidateStep, which may not be defined."
Fixes #441 fix for issue 283 (recursive temp folders) caused incompatibility Put back in the method folder.newFolder(String) that was removed in #283. Tests that the method is there using reflection.
Full compatibility between 5.2.6 and 5.3.* version of Tapestry.
"2009-05-09  Fabien DUMINY  <fduminy@jnode.org>     * gnu/testlet/runner/Mauve.java :             split of execute(...) method for clarity and better reusability (in jnode).             changed visibility of instance variables to 'protected' for reusability.     * gnu/testlet/runner/XMLReportParser.java :             added another parse method, which take a Reader to allow something else than             a File as input     * gnu/testlet/runner/CheckResult.java :             changed visibility of constructor to 'public' for reusability     * gnu/testlet/runner/PackageResult.java & RunResult.java :             changed visibility of add method to public for reusability"
"V2 of VariantEval2.  Framework is essentially complete., very simple and clear now compared to VE1.  Support for any number of JEXL expressions.  dbSNP% evaluation added to show paired comparison evaluation.  Pretty printing output tables.  Performance is poor but can easily be fixed (see todo notes)."
first spike of migrating the codebase to the generated json schemas for #3046 with tests passing; though we maybe need to support backwards compatibility of the 'id' versus 'uid' on entities like pods/services?
Added exceptions for bad functionality requests. Renamed an exception to have a more approp. name
Get functionality working.  Needs cleanup.
Moved MethodEndpoint functionality to core-tiger module. (Fixed #SWS-20)
Created benchmark specific to comparing MINA and Netty performance.
"Disables forking in ui and rest tests, adds performance improvements by using bulk methods."
"We change the behaviour of the DriverManager and DriverUtilities classes, regarding the drivers associated to file sources. We use a FileDriverRegister to be sure that we don't instanciate many drivers for the same file, because that could threaten the stability of our operations on it."
Fixing 1.7 incompatibility
"massive change in the way the cleaner works, mostly revolving around the fact that we no longer trust indels from the alignments (although we do use it as a good alternate consensus possibility). Other changes include better ""greedy mode"" performance and allowing the user to have just the cleaned reads themselves be printed out (mostly for Matt's CleanedReadInjector)."
"[HUDSON-4876] Compatibility for the caller. This is more convenient for Jelly scripts, too."
display performance improvements to external utilities
Various bugfixes and performance improvements
"TurtleSerializer: added support for some syntax shortenings, improved performance"
improve performance
Simplified DataLoader functionality. A user doesnt have to specify the loaderType attribute of the DataLoader annotation anymore.
Small readability fixes
"making the memory device a more general buffered device, collapsing file/memory device functionality into a single entity"
#NAME?
Post-merge changes for merge compatibility.
"update functionality (remove progressbar, add notifyMessage"
"Added a new ActionResolver that will generate default bindings based on class and method names (with quite a bit of flexibility). In order to make this work properly, added a new getUrlBinding method to the ActionResolver interface - there were several places in Stripes that need to get the URL binding from a bean class, and had been assuming they could just hit the annotation for it."
DRILL-4982: Separate Hive reader classes for different data formats to improve performance.
(pseudo-)genotyping functionality added: force-emits calls (including REF) at specified locations. Currently @Hidden for testing.
updated search functionality
370611 fixed extremely poor slicing performance
[136935] Slow Performance and Out of Memory Error Editing Large XML Document
improve results readability
add more functionality for testing configuration
"Replace the end time in spans with a duration, allowing duration to now be measured in nanosecond accuracy."
[GSCOLLECT-1606] Improve primitive map performance.
XWIKI-12168: Most extensions that were designed to use webjars before 7.1 are broken * Quick fix to restore backward compatibility after XWIKI-10881.
HBASE-1286 Thrift should support next(nbRow) like functionality
Added an abstract class with the shared functionality of BODRIsotopes and the old IsotopeFactory now called XMLIsotopeFactory
"Compared results to standard Ivory SMRF with DefaultBoW and verified correctness, on robust04"
More progress on the core functionality
"Remove the lazy initialize functionality.  When no calls are made by the genotyper, we still want a vcf file to be output with valid header."
"performance: reduce database round trips by dozens and dozens per resource composite or group composite shown on any page;  the logic to generate the reosurce/group facets were extremely expensive, and could could cause dozens of round trips per resource type for the current transaaction;  this is really an interim solution, but lowers the cost of facet checked to one additional round trip per composite shown; "
Enhancement: Introduces method to fetch relationships instead of graph objects (nodes or relationships) in order to avoid performance bottleneck when trying to fetch a relationship by id only (slow due to missing index in Neo4j).
"replace Table with PagedTable, and enable SHOW_ALL functionality"
Moved logging functionality from portlet to swtbotext
Scalability work to chunk processing of availability reports.  Start outside of a transaction and execute one transaction per chunk.
Adding more note functionality and auto creating a note when miles have been entered
renamed built-in addCountDown to createCountDown but retained old name for compatibility -- fixes BYTEMAN-20
#198 further performance improvements
Stuff that was left uncomitted for quite a while. Basically moves some common functionality from the metrics implementation to the base class
"Bug 178587 - [ScrolledComposite] Accessibility: ScrolledComposite widgets don't automatically scroll when controls are tabbed to inside the composite 	- added setAutoScroll(boolean)"
The interface DataReader has been reduced in order to read data only via URL. This allows us to build various implementations with caching functionality easier than before.
"Intermediate commit refactoring FragmentPileup to (1) make it more accessible (now in utils.pileup) as well as (2) improve performance.  Passes all integration tests now.  Upcoming refactoring will change further how the system can be accessed, and further improve performance."
"http://jira.sakaiproject.org/jira/browse/EVALSYS-495 Added in the ability to view the assigned groups and hierarchy nodes, Added ability to view partially completed evaluations, fixed up some bugs in the evaluation setup process, added some extra functionality to the dao and logic methods around groups"
Opening neo-1.0-b6 optimization branch (kiwi) that includes a lot of performance (speed and memory) improvments. List of changes:
#POULPE-469 Testcoverage and refactoring for Database backup functionality - consolidate all code under one package.
Class naming and JavaDoc updates for enhanced understanding/readability
Update Accessibility + Rendition URL
"changed the sort function to not sort on keys as this causes compartor issues if you have non comparable keys. in order to get previous behavior you have to sort twice--sort keys, then sort on values. Started work on tranformers for getting edge weights and excluding (or including) certain edge labels from JUNG algorithm calculations. Also, added the .gremlinrc file for Ian --- havent implemented the functionality yet, just stubbed it."
"added test cases for Foreach, Repeat, While statements. Added Modulo opeartion to the mix. Added test case for Modulo. Added OperateValueFunction -- op-value() (makes use of operations). Wrote test cases for some of the functionality of OperateValueFunction. Will do more later. Small tweak to GremlinScriptEngineFactory."
Moved ART related reporting functionality out of the HIV reporting libraries and into the ART reporting libraries
"Included optional shade plugin definition for producing orika-core-standalone.jar (commented out for now) Returned deprecated Converter to it's original signature; though at this point, since it was mistakenly migrated earlier, it may just be worth removing it altogether. Applied MappedTypePair to Converter so it could be easily sorted. Added SortedSet extension of SortedCollection to support ordering of Converters with respect to class hierarchy, so that the most specific converter able to convert a pair is the one resolved, regardless of registration order. Applied fixes to ordering of mapper generation code to move primitive<=>wrapper mapping up into the section with copy-by-reference, since it is essentially the same (this fixes issues that can arise when enabling built-in converters by default) Changed built-in converters to be enabled by default Separated the comparators used for Mapper, MapperKey and Converter into a single class with shared compare logic Removed converter resolution from ObjectFactoryGenerator -- it is done via the call to CodeSourceBuilder, in consistent order, same as used for mappers Performance fix to MapperFacade.resolveMapperStrategy to avoid converting Class to Type until after the MapperKey lookup has already failed"
MAHOUT-767 Improve RowSimilarityJob performance
Add a passive Callback functionality to the updater.
[#3] Improved new API [#10] Improved Goovy compatibility with JDK 8
"MATH-698 Made ""CMAESOptimizer"" a subclass of ""BaseAbstractMultivariateSimpleBoundsOptimizer"". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a ""MathUnsuppportedException"" if failing."
"Added support for JDBC3.  The driver will now build under JDBC3 (i.e. Java 1.4). This concludes my changes that restructured the code to support JDBC3. The jdbc unit tests were also resturctured to allow different tests between jdbc2 and jdbc3, although currently make check (aka ant test) for JDBC3 just runs the JDBC2 tests.  Of special note the largeobject/PGblob and PGclob classes have been moved under the jdbc2/jdbc3 specific directories as they now differ by jdbc version.  Also note that this checkin removes the PostgresqlDataSource and files in the xa directory.  A recent checkin has added new datasource support that replaces the functionality provided by these classes."
Performance tweaks.
added clear functionality
"[BISERVER-12189] - JCR becomes very slow when there are too many home directories > 400 - introduce ""verify-user-on-principal-creation"" property to indicate whether or not to call USerDetailsService on emitting new principal - set its default value to true to keep backward-compatibility - add tests - fix Checkstyle violations"
CHENT-49 Performance optimisations
Improved style and robustness of job manager end-to-end test
project wizard extensibility
"WyRL: added support for manual rule ranks. Now you can specify a numeric rank for your rewrite rules which are then sorted accordingly.  This should hopefully allow me to optimise certain cases more aggressively. I have also manually ranked the rules in the Solver, although this has not had any significant effect on performance.  Instead, I believe that some empirical data examining different orderings would help.  #387"
"METRICS-2774: Standardize the	endpoint analysis functionality"
KER-225: Cleanup the code that generates UUID to improve the performances
TEIID-346 adding in a compatibility layer with 5.5 connectors.
core: Improve performance of GUID constructor
Added deployment functionality to deploy local 'site' artifacts to configured database
Performance enhancements!
Performance enhancement to MsgPack converter.
performance enhancements
Performance optimization
[NGRINDER-283] Fix type compatibility problem
test fixes; change collection to list for the sake of extensibility in case order is ever relevant for certain providers
parser performance improvements
#NAME?
HBASE-4054 Usability improvement to HTablePool
JBIDE-1785 Initial input with base functionality
EMBRYO-47: extracted Property functionality into new embryo-common project. 
PrismTech JAC#362 Performance optimisations returned to OS.
"Committing the changes needed by our partners to better support a variety of tool references. A class hierarchy of tool references has been introduced. The base class is an abstract tool reference. Unqualified tool references, like those used in the manifest or project files will be continue to be treated as tool references. However, we now have some flexibility for the future should a more refined type of tool reference be needed; for example, a dynamic tool that reads a configuration file to determine what environment it is targetting."
CSPACE-5727: Refactored into abstract and implementation methods for easier extensibility; e.g. for updating moveable locations (crates or equivalent) for some implementers.
Move the gateway functionality.
enhance performance
 - deleted unused test classes  - added test cases from James Mailbox Lucene with assorted classes  - modified indexing so that searching works for terms in body of mail  - store now handling all persistence operations to HBase  - using the same parsing from James for backward compatibility
"[HER-1783] BloomFilter64bit bit-length bug prevents full bitfield from being used; premature saturation * BloomFilter64bit.java     include the split-to-subarrays (for larger bitfields) and round-up-to-power-of-2 (for performance) options previously in largely-redundant classes     fit a number of problems with int/long overflow and bitwise ops     add methods for reporting/testing * BloomFilter.java     add methods for reporting/testing * BloomFilterTest.java, BloomFilter64bitTest.java     more extensive tests, including two lengthy tests of default/oversized blooms usually disabled by renaming * BloomFilter32bit.java, BloomFilter32bitSplit.java, BloomFilter32bp2.java, BloomFilter32bp2Split.java     deleted as buggy or redundant * BenchmarkBlooms.java     move to test source dir * BloomUriUniqFilter.java     change to accept filter instance (rather than parameters) for added configuration flexibility     fix comments * BloomUriUniqFilterTest.java     supply filter not paramters"
"functionality flushed out, trying to test out database calls"
"cleaning up method override functionality: JavaModelUtil, MethodOverrideTester and Bindings"
merge fast functionality (https://jira.jboss.org/jira/browse/JGRP-1191)
Ding Presentation code had been cleaned up.  Default helper code is back again to avoid performance problem.
Bug 358108. [ds] Implement new functionality for R4.3 compendium (RFC 176)
refactor to prepare performance improvements
"removed newInstance method from class definition, is import functionality not metadata"
"Added method getText(page, version), getHTML(page, version), moved functionality of old getHTML() into protected textToHTML(). This lets us request previous versions of pages easily."
EDA: efficiency in data structures
#NAME?
[jayes] better SparseFactor.realPosition performance
Revert change for issue #133. We need to remove the enum to allow extensibility or find another solution. Might take some time.
Filterable functionality improved.
Improved EventLoopState performance
Extracted common account functionality into BaseAccountManager
[sync] Fix performance problem with GitModelCache#getChildren
A few performance improvements
I thought about adding the version and date to the HTML reports... but I'm not sure it's a good idea.  Simplicity is good.  Anyone else have an opinion?
"Huge performanceboost, 200% faster, used StringBuffer instead of String"
add update functionality
Good performance
"[added] TWL Layout method to eat events. [added] Ability to set max size on Bag and Array pools. [removed] Pool. Replaced all Pool usage with BagPool (which doesn't do a memory copy when items are returned to the pool as Pool's use of ArrayList did). [changed] TextureAtlas, renamed methods to findRegion and createSprite to better reflect the operation cost. [removed] IntHashMap and LongHashMap. [added] ObjectMap, IdentityMap, IntMap, and LongMap. These use open addressing with linear probing to avoid allocation of entry nodes on put. See JGO thread for performance. Changes HashMap usage to ObjectMap. [removed] LocklessThreadQueue. Replaced by AtomicQueue."
updated testing structure for performance (single and multithreaded)
Performance improvement: WIP: status should use single wcDbRoot instance
Added performance test for the Consistency checker.
#360 Deprecate integrateViews() method and remove all related functionality
"Rebuilt poller, deleted unnecessary functionality"
TIKA-2273 -- two tests turned off temporarily in bundle.  First draft of adding configurability to EncodingDetectors
Usability changed: dialog is now used only for editing the current active filter template. Add and switch functionality is now removed from dialog an part of parent form (button and combo box).
[SPARK-11787][SQL] Improve Parquet scan performance when using flat schemas.
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Added a Scheduler Job to automatically start/restar the bot when active
fix performance when creating/updating alert definitions en masse
#42 Fixed: Dependency on Eclipse resources - functionality moved to ui
fixed issues related to run time hibernate exception.  made change for performance optimization. added more logs
Critical bugfix to ReduceRead functionality of the GATKSAMRecord
Async Loggers performance test refactoring
Furhter refinement for Bug 116095 [Preferences] ScopedPreferenceStore causing memory leak and performance degradation
* renamed class VAbstractLayer to AbstractLayer * added class InteractiveLayer to extend common behaviour of layers * redesigned aligning of WMSTile in WMSLayer in single tile mode - it's done on client side * added panning functionality to layers
Improving performance documentation.
Fix MappingServiceImpl unit tests Fix meta data compatibility check
Compatibility issue where there are traversers which depends on that relationships are traversed ordered by type (reversed)... so made a new expander for the old traversal framework
Improve performance of FileMapListBuffer (#404).
Improve code readability
added mtgox market and limit order placing functionality
Moved properties functionality into a separate package. Created an enum to list reserved properties.
"Improved robustness of HTTP caching. For pages that were intercepted by SMFilter but were of a non decoratable content-type (e.g. images, css) the 304 caching now works. Except for an edge-case of large documents in certain conditions."
CLOUDSTACK-650: Rename ExternalLBUsageMgr to more generic ExternalDeviceUsageManager since it contains firewall usage also. Most of the functionality is already fixed in CLOUDSTACK-1289
"Merged Raw Config Collection Functionality into the class used for Structured, and dropped the ability to maintain multiple edits going at once."
Moved AisHandler functionality to AisHandlerCommon
Add a unit test covering some basic prune functionality. Factor out common MVCC test code into base and use for both basic and prune tests
Initial binary compatibility support.
"Moved monitorPerformance from CoordinatorParameters to WorkerParameters, since the true performance monitor is running on the worker."
Added functionality to persist rampart settings
Pulled out the --regenotype functionality from SelectVariants into its own tool: RegenotypeVariants. This allows us to move SelectVariants into the public suite of tools now.
Attempts to fix failures of the Windows Audio Session API (WASAPI) integration which reportedly break the very capture and playback functionality.
Updated fixes/additions include: List of templates to create new objects from Validation on new/edit objects Single direction linked objects show Able to access edit functionality for new objects. Fixed hard coded pid to create links to Miscellaneous other fixes and additions
refactor emit functionality
support fetch mode for a resource itself to bring more flexibility
Move Cueball performance test to the performance package in src/
Bugs fixed and performance improved
"Major refactoring of the SpringHelper injection functionality, and the addition of tests for it."
"Fixed issue 61, added individual serializers for 1D arrays of primitives, Strings, and Objects for better performance."
Add the beginning of functionality to log a failure message in data collection failed events.
Improve data import process performance
Improve efficiency of calculating bbox for JtsGeometry and ShapeCollection.
"[MRM-1443, MRM-1327] properly restrict per repository and improve performance"
Completed rewrite that now uses module interface for 90% of functionality (yay!) and once again works.
"CARE #86: Created database for performance testing, updated context, updated scenarios"
Improved performance of tree map
"Add XYZ corner probing, fix several small bugs in XY and Z probing, refactor visualizer components for better reuse and readability."
"Moved the actual functionality of the commandline/Main class to a method that throws exceptions, and changed the main method to respond to those exceptions.  Cleaned up logging"
#NAME?
Improvements to checking in/out functionality * Active visit list now updated automatically * Fixed potential bug with stopping visits
#NAME?
Atom<T> is now uses generics. Updated all functions with new Atom<T> model. Added performance timing tests to all test cases.
added changes to support alec toUnmappedRead seek.  Huge improvements (orders of magnitude) in unmapped read performance.
"Added the optimizer, which in many cases will improve your script's performance."
fixed #113 - all of the stuff on domain_group.jsp is sorted by domain name now -introduced a new AbstractDomainGroupVersionDomainVersion for the compareTo functionality
JEXL2 upgrade.  Improvements to JEXL processing including dynamically resolving variable -> value bindings instead of up front adding them to a map.  Performance improvements and code cleanup throughout.
Fixes and performance improvements.
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Add new JIRA Search Bot Listener * Rename IRCBotConfiguration to IRCConfiguration
DDF-1497 Added functionality to download GeoNames .zip files from a specified URL and add it to the local GeoNames index.  Added a geonames:import command to call the new functionality.
simplified TypeDescriptor usage and updated use of the API across BeanWrapper and SpEL; collapsed PropertyTypeDescriptor into TypeDescriptor for simplicity and ease of use; improved docs
"MATH-1416: Delete functionality available in ""Commons Numbers""."
Refactoring of type assistant functionality
Moved some of the wizard functionality from portlet to swtbotext
A scaffold to support metadata configurability of readers.
"Restructured project by moving benchmark code to its own modules, and by splitting the websocket module into client and server. Introduced also Jetty7 modules to compare performances using the benchmark modules."
TEIID-1824 performance enhancement for sql/xml
Cache ports for better performance.
"Improved traceability (iterator source, charset file block, last)"
- Summary: [Chart usability spec#2.4] UI refinement of Legend
SONAR-5141 Improve performance of technical debt measures decorator
Initial work on client performance improvement fix
"Latest row filtering model, with find functionality"
added caching for already processed projects while preparing the list of class path URLs; added logging that can be enable using Eclipse's tracing facility ASSIGNED - fixes #687: Performance problem in JdtUtils.getClassPathURLs  http://springide.org/project/ticket/687
Cucumber features refactored to improve readability
Cleaner fix for out-of-order PlayerQuitEvent. Can restore some of the previous simplicity.
LOG4J2-154 improve ThreadContext performance with copy-on-write map and stack
Implemented Vaadin filtering support to EntityContainer with JPA 2.0 Criteria API and removed custom filtering functionality.
#NAME?
"Improvements for the navigator outline so it updates on built and when the file is parsed for the first time. In addition, some code cleanup + mofications for the VdmEditor that makes it easier to replace the ast searching functionality (will be useful for COMPASS) by providing a VdmEditor.ILocationSearcher."
adding functionality for known types and xml type decorators.
move extractAccessibilitySuitabilityDetails method to abstract producer
Improved robustness around refreshing the list of supported resolutions for an ONVIF IP camera in its wizard - Always add an item to allow the default resolution to be chosen - Added null check for the list of supported resolutions from the camera (in the case that no camera is connected) - Select the current resolution if it's set - Refresh the list when the camera is changed/connected
"Update issue 28 Add cache for ClientProperties, will improved performance"
Added metadata endpoint to opensocial rest service and refactored for maintainability (fixes RAVE-912)
"PlainTextMatcher como simplificação do DamerauLevenshteinTextMatcher, para os casos em que a distância Damerau-Levenshtein máxima seja 0 (zero), quando não há necessidade de fazer programação dinâmica nem backtracking das operações para obter o mapeamento do match; espera-se uma melhoria significativa na performance do Untokenizer final, visto que a primeira rodada será com distância D-L máxima 0."
Serial performance test refactoring
#NAME?
Fix compatibility of tests with mysql and postgresql
bug 274981: [ErrorHandling] [StatusHandling] StatusDialog needs accessibility
Fix compatibility with jansi 1.11
"WIP, add waits for reliability"
"Add events structures, indexes and event caches per trace instead of per context. MAJOR performance and stability improvement."
added some basic performance measurements
"Added functionality to mark components as ""Widget"" or ""Block"".Added functionality to mark components as ""User Friendly""."
PT-2336: Import functionality for variant controller
"Create new generated value vectors utilizing fmpp.  Includes: - First pass; integrate build system and some cursory implementations - starting to split common logic into base class - implement most of varlen value vector functionality, minor cleanup of tdd tags - added nullable derived class - Merge changes from JA, minor format cleanup. - minor fix and cleanup - added bit vector, removed widthInBits which also allowed removal of FixedBase ctor - apply TC's fix for resetAllocation() - added repeated value vectors - Hooked up templated ValueVectors to codebase.  Removed old ValueVector classes.  Cleanup. - fix repeated get() and add() - added some value vector tests.  fixed bugs in VV and some call sites.  generated TypeHelper from FMPP template.  removed unused VV methods - made base immutable, some debugging - split mutable/immutable basic VV types. minor refactoring - fix several allocation bugs - fix various bugs, only JSONRecordReader test is failing - fix nullable bit value vector - make bit vectors use ints to represent the bit value - remove superfluous logging - fix value vector getters and setter - comments and cleanup - temp disable repeated map JSONReader test - formatting - whitespace cleanups"
Got the importer functionality in the web layer working.
first pass at file storage functionality
Code readability refactoring--working on issue #1557.
"1. Renamed directory structure from public/c++/VectorPairHMM to public/VectorPairHMM/src/main/c++ as per Khalid's suggestion 2. Use java.home in public/VectorPairHMM/pom.xml to pass environment variable JRE_HOME to the make process. This is needed because the Makefile needs to compile JNI code with the flag -I<JRE_HOME>/../include (among others). Assuming that the Maven build process uses a JDK (and not just a JRE), the variable java.home points to the JRE inside maven. 3. Dropped all pretense at cross-platform compatibility. Removed Mac profile from pom.xml for VectorPairHMM"
"* Made OptionMessageHolder a little bit more general by allowing a larger number of fix field maps to be associated with a given ""line"" in the ui. * Added option order parsing to the CommandParser (try ""O B 10 IBM OCT25C 4.5"") * I changed the functionality of the option order ticket (back, I think) to allow only one user modifiable symbol field.  The second field is for information purposes, and it is this second uneditable field that actually contributes the field back into the fix message. * Anywhere there was a method like isPut(), I replaced it with getPutOrCall() which returns PutOrCall.PUT or PutOrCall.CALL.  This allows for fewer ""if (isPut()) ... else"" constructs. * The application now assumes that internally, messages use the PutOrCall field, and the MaturityMonthYear (rather than MaturityDate) regardless of FIX version.  These are then modified on the way to the OMS if necessary. * I found that the OptionOrderTicketControllerHelper was getting a little ungainly, so I factored out all of the logic surrounding the ""details"" of the option series into the OptionSeriesManager.  That is all of the logic around updating the combos and such is in there.  Everything else is still in the OptionOrderTicketControllerHelper."
small performance.
Added Product.get functionality.
Compatibility with Jetty 9.3.
Achieved basic functionality for real-time view updates.
* Added new cli option --waitForTestCaseCompletion to properly wait for TestCase to finish its runtime. Can be combined with --duration. * Fixed bug with Infinity performance report due to --duration 0s. * Increased code coverage of CoordinatorCli.
Improved stability of template import process.
"Significantly improved performance of Vector and Hyperassociative Map (2x - 4x). Added LayeredBrainHyperassociativeMap for properly displaying layered type brain, and using this now in examples. Refactored the name of the unit test classes slightly."
"Changed the data reading behavior when an error or warning occur, so that the calling operation never be terminated, but logged. This change strengthen the stability of a `RefreshableDataStore` implementation during refresh and avoids that clean data will be overwritten by dirty or corrupted one. (belongs to issue #6)"
"Improved login/logout session management, better user logout/login and application load GUI, usability is streamlined, password search screen is default screen."
@WithBridgeMethods and @AdaptField did not work to maintain binary compatibility. Existing code referring to a member of type AbstractBuild often called methods not present in Run. Changed to retain the existing fields and getters but deprecating them and introducing replacements.
Extract common functionality into methods
Pull back injected bug for Bug 420045 - [1.8][compiler] Introduce temporary bug compatibility mode with javac (report errors as warnings)
Caching and sharing service registry instances in the RegistryFactory to improve performance (after previous refactoring to make the RegistryFactory the only public way to get a service registry instance)
Added time travel functionality
191445 : [Scripting usability] Expressions in report design should use a new syntax to differentiate them from static strings
Compatibility with all supported DBMS verified
WFLY-3893 JacORB compatibility subsystem
Private: Lobby now has basic functionality. Players can join the lobby and see others who have joined the lobby.
Attempt to fix performance problem in get-recent-evaluations. Was causing some http 500 responses. Appears to be due to calling queryResult.size()...
"added new module for cdi integration, this provides better and cleaner separation of functionality"
extracted all wsdl/soap functionality into an external library (generic-soap-client). Needs it now for compilation.
Extracted functionality to replace subtypes
"Commented out debug statements.  The new Linked Data publishing scheme appears to be working as it should.  However, it appears that NativeStore performance has become a bottleneck for the demo at http://twitlogic.fortytwo.net, on account of the store becoming too large (around 1 million tweets)."
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Use XDOM+XML syntax for CTS * Added javadoc * Improve unit test
topic: code enhanced type: functionality module: other description: MDEditor - validation
Bug 298671 -  Implement enough compatibility to bring up a simple view
Updated concepts version to 20130604 * Also moved functionality related to concepts version in Dictionary class
Optimized stepping performance.
NotUniqueIndex: fixed back compatibility
introduced faster implementation for distance calculation & added some more logging functionality
"DNA-467 Refactored the query functionality to minimize dependencies on the rest of 'dna-graph', meaning that we can probably extract it and that it would be useful for other projects. This impacted a fair bit of code, but it does clean up the assumptions and dependencies of the query engine.  Search is still not very decoupled.  But everything still works and all unit tests pass."
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#buildMetadata()
Renamed a couple of methods for better readability.
Refactored code for better readability
"#JC-1353 Improve performance of ""Mark all topics as read"": * Improved test clarity * Moved ObjectsFactory to the main sources so that it can be reused in other modules"
Initial compatibility update with BKC
"Added remote folder field in the AppManager, added functionality to save to same remote folder,  fixed method to get file metadata in GSDataManager"
FEATURE: enable/disable bluetooth functionality had been enabled.
Slightly improve efficiency by restoring player data from a cached copy if it exists instead of querying the database.
"Issue #4873, ridbag performance attributes were added."
upgrade to the latest netty 4. lost the pipeline performance though.
TEIIDES-2299: Improve performance bottle necks of LDAP wizard
Improve boot.dash testability and add more tests
[OPENENGSB-2749] new functionality for XLinkUtils
PDF-517 removed Annotation dependencies and move out to RI until new state manager can be created to fix undo functionality
"Moved out performance tests and other tests which aren't really unit tests, out to an @Ignored test class"
"Linearize the findEndOfRegion algorithm in ActivityProfile, radically improving its performance"
Added buttons and finished all functionality of the dialog except for the refresh functionality.
"[JBIDE-9200] moved static methods to util classes and changed static method to be instance methods where they should not offer functionality to the instance, only (no accessibility from outside the object is needed)"
Move some functionality from X86_64StubCompiler to AbstractX86StubCompiler
updated the rule generator and performance test so I can run tests with 2k rules and 1 to 3 conditions per rule.
KARAF-608 Reworked FeatureServiceTest for better readability
"NAS-2276 All tests now pass, and all traces of JUnit3 functionality has been removed."
"Store subscription data as JSON instead of simple byte concatenation, will allow for more flexibility in adding & removing properties. SubscriptionContext renamed to Subscription. Put the rowLogId also in the Subscription object to make it completely self-described."
rename SpeedTest in PerformanceTest
+ Introduced JMX agent to simplify performance testing (single agent enables code instrumentation at runtime to allow HTTP container/JAX-RS implementation agnostic testing) + Rewritten existing performance tests to get rid of unnecessary Jersey/Grizzly dependencies when applicable + Introduced Grizzly/Jersey based runner + Reintroduced parameter-less MBW test case apps + Added functional tests to all perf test cases
Added assert text present functionality
Backwards compatibility for particle effect files
Modified functionality of PaymentService start requests.
"HIVE-16311: Improve the performance for FastHiveDecimalImpl.fastDivide (Colin Ma, reviewed by Xuefu Zhang)"
Bug 368944 - Slow typing in big php files Ð LineStyleProviderForPhp performance optimization Bug 368947 - Slow typing in big php files Ð enabling open type/call hierarchy action performance optimization Bug 368951 - Slow typing in big php files when Outline view is open Bug 369106 - Slow typing in big php files Ð multiline statements indentation performance optimization
"Change field label to ""ImageJ 1.x compatibility mode"""
moved performance tests under the metrics package and replaced the invalid JSON string with \n with a valid one.
Refactor event painting / listener code in preparation for painting performance improvements
Performance improvements
New version of WAL with better performance characteristics was implemented.
"MODE-1455 - Implemented node.update and createWorkspace( name, srcWorkspace ) functionality"
working on performance
FACES-1459 Support for JSF 2.2 (introducing JSF 2.2 compatibility layer in order to minimize differences between branches)
Improved efficiency against randomized test.
Enhanced testability; Fixed issue #17 (http://baralga.origo.ethz.ch/node/87)
Additions to support functionality added via bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=418634
Performance improvements in Less/Css module builder initialization
Addressing backwards compatibility for public APIs.
"small changes, and a small performance improvement"
Provide backwards compatibility for json files with a list of currencies instead if map; move ANXCurrencyData to core as CurrencyMetaData
Refactoring and performance improvements
Minor: improved readability and speed by reducing the scope of variable in some hot points
"Clean up types, remove extraneous types, update BOOLEAN/BIT to be consistently BIT Implement ValueHolders for all types through code generation, remove manually coded value holders. Rename ValueVector.randomizeData() to ValueVector.generateTestData() and provide consistent return results for repeatability and data validation."
JBIDE-10355 to trunk - openshift publish usability
"Atlas-standalone: Reformatting of loader code.  Fixes to make data matrix file all columns - previously was hardcoded to look for 'hybridizationref' but can actually vary - assay, scan allowed too.  Lookups for these columns added, but this still needs more work to make sure scan data resolves to the right assay data (need mappings internally between assay, scan node names).  DAO performance optimisation."
Added more logs functionality
EMBRYO-47: EmbryoLogger functionality moved into embry-common
include event properties when exporting a stored calendar collection as an icalendar object. all the pieces are in place now for subscribe interoperability with ical and other icalendar-over-webdav clients.
[misc] Cache computed data for better performance
added a new test for text performance added the supported features webpage Issue number: Obtained from: Submitted by: Reviewed by:
Add default parameter compatibility to remove unused vars pass
PRD-4854 - Performance monitoring infrastructure added
MONDRIAN: Added tests for compatibility of Mondrian XMLA with Cognos8.2 connected via Simba O2X bridge
Portal Tutorship - Students Low Performance with QueueJob
SGF-667 - Apply Java 8 types and functionality to the Continuous Query support.
Adding VariantContext.hasAlternateAllele functionality
"Renamed module web-waffle to web-runner, to better express the functionality of the module, as waffle is more properly the framework used to implement the runner."
implement compatibility adaptor generation.
few style/minor performance fixes
Node attributes editor has correct functionality.
TRUNK-2896: change functionality of isObsGrouping method to return hasGroupMembers(true) instead of hasGroupMembers(false) TRUNK-2901: Obs.newInstance() method should include both voided and non-voided group member obs
Fix for Issue 75. Performance of IMap.containsValue is poor for large data sets. Indexing values. Fixes issue 75.
"Namespaces draft. Basic functionality is there, but it still needs clean up. For now, namespaces have to be declared before being used."
"Removed the MGRast export functionality since it's just dead code. Added ISAconverter integration. Some small additions to add, but functionality is there. Improvements are just focused on UI. Closes #12"
358292 Refactor ProductFileManipulator for reusability
[#45] More flexibility for the eClass field order
Renamed <roots> to <forceLinkClasses> (<roots> has been kept for backwards compatibility). (#119)
add layout change functionality
Adding compatibility on analitcs with drools maven structure 
interface refinements as well as moving the feedsource to archiver association up a level for flexibility purposes
IDE-735: moved beans validation infrastructure to a public package; introduced IBeansValidationContext interface to allow extensibility
"- Updates for CR-9, CR-18, CR-19 - Added //i18n* comments identifying sections of code have data/time, number, currency conversions that may or may not be significant from i18n perspective - Updated tradebase default password - Updated quickfix application to depend on activeMQ broker bean within ORS configuration as quickfix application depends on JMS queues - Updated Persistence to use the new I18N testing utilities & Validations to ensure that strings can be saved into the database (as mysql supports a subset of unicode characters supported by java, mysql supports version 3 and java supports version 4). This boils down to mysql not support supplementary characters   - Test Updates to save unicode strings into string columns   - Test Updates to save unicode strings into clobs   - Test updates to configure logging for test runs    - Updates to validate strings used in persistence   - Added DBVendor to abstract out database specific functionality / limitations   - Test updates to test string validation during persistence and query   - Test updates to verify that all unicode characters can be saved and retrieved from the database   - Added a unicode.txt file that contains interesting unicode data for testing clob persistence   - Updated package.html documentation adding details on validation needed to ensure that strings persisted contain characters that are supported by MySQL"
Multi-threaded performance tests
Improve performance when scanning large jars
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
HADOOP-6502. Improve the performance of Configuration.getClassByName when the class is not found by caching negative results. Contributed by Sharad Agarwal and Todd Lipcon.
"Added a HashIntSet class that uses hashing with linear probing to get most of the memory benefits of ArrayIntSet and better performance than a HashSet<Integer> (presumably because of less boxing and better spatial locality).  The downside is that you need to pick a sentinel value that can't be stored in the set, but that's not a problem in any application for which I've ever used an IntSet.  In some (admittedly simplistic) Google Caliper testing, HashIntSet was 22% faster than ArrayIntSet and 73% faster than HashSet for arrays of size N=10, 100% faster than ArrayIntSet and 69% faster than HashSet for N=100, and 357% faster than ArrayIntSet and 74% faster than HashSet for N=1000."
27646 - performance
"MONDRIAN: Implement member keys, for example [Store].&[1234]. Fixes bug     MONDRIAN-485, ""Member key treated as member name in WHERE"". Full     functionality (in particular composite member keys, such as     [Store].[City].&[San Francisco]&[CA]) is only available if     SsasCompatibleNaming=true. If SsasCompatibleNaming=false, you can use simple     member keys, and performance is poor (mondrian scans all members of a level)     as before."
Restructure and stability
Performance!
[MNG-4035] - Removing plugin manager changes. This is breaking tycho build and also causes a hefty performance hit. Using mixins is over-generalizing this solution. Only need to cleanup config merging.
Bukkit events for RM/DM tools and Philosopher Stone.  ACT MkII fix.  Rewrote Trans Tablet.  Fixed lots of memory leaks and performance issues in EE2.
Committed patch by Daniele Madama to get working with new DB URL. When local the entire path is the name of directory where the database is contained. Backward compatibility has been kept.
1. fix for [Bug 187822] Problem with setRawPathEntries 2.backward compatibility fixes 3. source/output entries fixes
"refactored the factory away from the functionality in messaging, reflected that change here too. also rearranged the pom dependencies for better comparison. also refactored the sensors and actors to reflect the messaging changes"
"Complete rewrite of the arquillian plugin. Containers are now installed from a provided JSON url that is extracted from the documentation. This is still work in progress, although most functionality is implemented."
Extended the allele-biased down-sampling functionality to handle reduced reads.
Allowing some flexibility in the expected number of merged results
[jayes] compatibility with Jayes 1.0.0 for jayes.io and jayes.testgen
[294691] Capability Index function added (increased performance) and more tests.
Improve the deployer flexibility
renamed for correctness. load loads more than ne models but also the word_info
Changed boolean method name for readability
Improved code readability in general user information generation method.
"second update of plot code The second update is aimed at simpler plot configurations, better flexibility, faster plot generation and reduce memory usage in JDBC connection and plotting processing by aggravating large number of jdbc rows into fixed number of bins."
Ontology Refactor for prep for improved term searching performance
Renamed RegionCursor to RegionIterator. Made RegionIterator conform to the Iterator interface. Though the internals of RegionIterator are somewhat uglier the performance improved another 20%.
"Refactor: Remove redundant method names, improve usability"
remove calls to the prototype library in favor of pure JSF-based solution; temporarily disable alert notification template functionality; fix the custom UI for subject-based alert senders
Move PerftPerformance test
"Resolved a major performance bottleneck. Each time a FunctionCall is evaluated, the function (e.g. symbol '[') needs to be resolved: renjin needs to check each enclosing environment for a function called '[' before applying the primitive '[' function. "
SWITCHYARD-2083 Verify functionality of SCA binding in Karaf
Various changes that help performance. Breaking?
Re #945 Modify logic or RIGHTS + REUSABILITY queries.
JBEHAVE-777: Refactored CrossReference to be resposible of the serialisation of the performable root.  CrossReference does not implement Format anymore.  Previous ublic methods left for binary compatibility but deprecated and non-functional.
quickassist & astrewrite performance
Site list menu functionality
Implements JIRA feature request SGF-227 adding support for GemFire 8.0's auto-reconnect functionality on forced disconnects.
http://bugs.sakaiproject.org/jira/browse/CLE-27 Opened up DELETE functionality for batch processing
"Bug fixes, added performance test"
Change public display map print functionality
refactoring: XFormsProcessor.getXForms now returns Document instead of Node refactoring: setupTransformer method now takes a URI as argument feature: it's possible again to specify a xslt on the root node of a XForms document for easier extensibility fix: ResourceServlet did not know the application/xml+xslt mimetype - in addition it now checks for the availability of a mime type in web.xml fix: Error messages in ResourceServlet have been improved
Backward compatibility support for visibility (all tasks public if feature not supported)
[GSCOLLECT-1368] Introduce JMH based performance tests comparing Java 8 and GSC iteration patterns.
"Use disabled property in test actor, also added isDisabled functionality to send/receive action"
Enabled performance + minor documentation update
Each GetAttributeExpression will cache its own Member instead of using a central cache; this improves performance
"Created system to store world data by region, not by chunk for better performance"
"Adding functionality to Stout, and supporting more method arguments."
"Removed Fixture#usePerformanceOptimizations() as it is misleading, added reset methods instead"
new map functionality
Compatibility fixes for omrs 2.x data access.
"Migrate Truth to com.google.common.truth, leaving some back-ward compatibility surfaces to give time for implementers of Subjects and SubjectFactories to migrate."
Closes OOZIE-90 coord rerun add backward compatibility
"- Moved propertiesToString/propertiesFromString from market data and strategy to core and unified the functionality (added tests to core and updated existing tests) - Updated PublisherEngine to have a synchronous notification mode to be used by strategy for sending orders - Added ability for strategy test modules to emit execution reports in response to receiving orders - Added ability for strategies to send notifications - Added ability for strategies to send/cancel/cancel-replace/cancel-all orders - Added ability for strategies to query execution reports for orders they have submitted - Added ability for strategy to automatically subscribe to execution reports if it's set up to send orders to an ORS - Added order/execution report tracking for submitted orders - Corrected logger debug and warning messages that were missing for Ruby because the thread running the strategies started with ""org.jruby"""
Code cleanup and some minor performance fixes.
Simple test that the DC version information is applied to the slave domain. Patch remoting and xnio for backward compatibility
Added more parameteres to be received from master. Added custom config-file for the slave. Implemented stopDaemon functionality. Change lifecycle
"Adding validation code, some more minor refactoring while checking for readability"
"SCRUM-456 : externalLink functionality accepts also contentMap, better method names."
expanded client functionality
Implement 'Save As'  functionality
"Refactored the whole configuration system The main goal of this refactoring was to increase performance by removing lots of reflection.  * Added a new ConfigToken allowing to store a configuration, how to read it from properties and how to process it. Note that even if all configurations have been refactored to support the CamelCase, the case remains insensitive when it's read.  * Added TableConfig and ColumnConfig: placeholder for all possible configurations  * Refactored ColumnConfiguration and TableConfiguration to use ConfigToken instead of plenty of fields/accessors  * Improved exception handling when a wrong configuration group was activated  * Refactored export mechanism to be able to use a totally custom export. Some export formats use reserved words, such as ""csv"", ""pdf"", ""xml"", ""xls"" and ""xlsx"" and allow to activate default values (e.g. mimeType, built-in export classes)  * Refactored all Thymeleaf processor with the new configuration mechanism. Also eased all method signatures thanks to the abstract superclasses.  * Updated all unit tests  * Removed the cdn option from the TLD and from the Thymeleaf dialect: it now handled by Dandelion Core  * Closed dandelion/issues#141 by making some classes implementing the Serializable interface  * Closes dandelion/issues#191  * Closes dandelion/issues#176"
BPMSPL-84 - variableId=value functionality
Server side module interoperability
"Created entity factory, changed ExistingFileMatcher to use WorkspaceFile and added splitting functionality to WorkspaceFile"
"o push more functionality into the sitebricks-test-support project to the point where the sitebricks-acceptance-tests project can use it. the sitebricks-test-support project is still not fully reusable, but i want to get it to the point where it's simple for someone developing a sitebricks app to test pages and services easily"
Build performance type family declarations
Bug 251617 incremental build performance test
"	* gnu/testlet/java/lang/Class/init.java: made existing tests 	more strict and added a few more test cases 	* gnu/testlet/BinaryCompatibility/foo: put -classpath flag 	before class name(s) when invoking the Java compiler"
"Separated out chat message listener functionality, and subsequent chat message processing. This enables subclasses of ChatDirector to listen for their own types of chat messages, but call the superclass to process them."
"Ported basic functionality (open, close, exit). SOme code debiugging and reformatting still needed."
"Refactored RubyCompletionEngine to better support prefixes at cursor, relevance grouping, and improve performance."
Using epoch time on performance.csv
Implemented new way to observe operator efficiency: -Dbeam.gpf.tileComputationHandler=<TileComputationHandler.class> e.g. -Dbeam.gpf.tileComputationHandler=org.esa.beam.gpf.framework.internal.SimpleTileComputationHandler
"Added functionality to `Parcels` to wrap under a specific type, using the associated factory mapping."
CORE-2322 Added updateToTag functionality to ant and maven
Implementing server part of input stop/restart functionality.
relax ExaminationPerformanceTest (lower time needed)
Added several missing classes and methods for Log4j 1.x compatibility.
"158655 - [Cheat Sheet Editor] New composite cheat sheet editor:  Model, UI, & functionality"
compatibility with old AppComposer API + ignoring jaxrsprovider when deploying using application
[MOD] Performance tests: adding documents
"Moved .wrap, .before, and .after from Element to Node for flexibility. Overriding implementations in Element still return Element."
Make threshold dialog interactive and start adding functionality
"Add support for --profile parameter and loading profile credentials from ~/.aws/config for compatibility with the ""aws"" command line interface"
Fixing more test issues - starting to address some of the test modularity concerns
ensure FLUSH and block/unblock correctness
Draft implementation: messages and added publish/subscribe/unsubscribe functionality to client.
Renamed Worker.shutdownPerformanceMonitor() to stopPerformanceMonitor().
Keep registerClient for older clients. Rename the new version to registerClientWithPassword. Add an error message on NoSuchMethodException so that this kind of version incompatibility can be handled and informed to user.
"- Fix for bug#2216 -- KSC Report list is reordered every time a new report is added. - A unique ID is assigned to each KSC report, is persisted across edits, and is used instead of the report's index in the KSC configuration file everywhere, particularly in URLs.  The ID is initialized to be the report's index (starting at 0) in the KSC configuration file and is persisted the first time changes are saved to the file during normal editing. - Instead of having a set of fields in the KSC_PerformanceReportFactory that track what report and graph are being editing, move this to the new KscReportEditor object along with related methods and store this object in the user's session. - Use Asserts in afterPropertiesSet and other methods to simplify things. - Format code in a few places. - Refactor some controller handleRequestInternal() methods."
Issue #1159: HGNC should be indexed locally for better performance and one less external server dependency Much better suggestions Also fixes #1360 and #1616
ISIS-553: updates to example todoapp to demonstrate ViewModel functionality
LIBS optimizations and performance tools
ISPN-4605 Update PerformanceCompareStressTest
[Tutorships] New Feature: Added new moments four and five for low performance students. Bugfix: Pre-bolonha registrations that were moved to bolonha are now taken into account in moments and the prescriptions list. Bugfix: All low performance moments now exclude partial time students.
"Compatibility with API, fixed tallgrass placement and properties"
small changes for stability
Big performance boost for all things involving type checking (especially the automated prover.)
Very naive performance tracking system added
Determinant performance tests for small matrices
"Patch for John Camelon: CORE 	Brought DOM up to par wrt functionality with Code Model.   	Added isFunctionDefinition() to SimpleDeclaration.   	Added visiblity indicators for member declarations.   	Added offset information that was previously unavailable.   	Added preprocessor statements (inclusions, macros) to DOM.   	Updated TypeSpecifier hierarchy to allow for parameter declarations to own elaborated types.  	Added new constructor to parser to aid testing.  	Fixed bug36065.  "
ISPN-4372 Map/Reduce performance is dependent on cache value size
implemented several performance improvements
Further working out compatibility examples: parse handler and service task
Added closestCategories BFS functionality.
Move BindingMap functionality into Binding.
Update Issue 2191 SIP LB TCP performance updates and tests
"Latest row filtering model, with find functionality"
rename HashUtil.start to HashUtil.startHash and HashUtil.next to HashUtil.nextHash to improve readability when these methods are staticly imported.
Add loads of different fixes to performance
BZ1014071 - DataModelOracle: Performance issues when model is large
pull up some functionality
Moved Model evaluation functionality into 'pmml-evaluator' module
updated sorting functionality to allow explicit choosing of asc or desc; added filtering by hotel location; fixed cookie setup to set path of cookie to always be root
Refactor to improve equals/hashCode performance
"Split PackageDocument functionality up in a base, reader and writer class"
#692 pull request merge to the Activiti 5 compatibility engine
Misc jaxb databinding performance improvements
changed how path was calculated to avoid numeric stability errors. Speed of hit on items changes how fast they move when coming off conveyor.
"Analyse accuracy improved: Java analyser detects indirect access of inherited attribute, and direct declarartion of type cast. Variables of primitive types are included as structural entities too, but (as far as possible) without associations."
"MultiInv compatibility *seems* to be fixed, revision of entire Settings class, illegal action notify limit fixed, multiple other small fixes/edits"
Update Issue 155 Extracted menu functionality into its own interface. Updated OverlayManager to use new IOverlayMenuProvider
Bug 319621 [Compatibility] All views now have view menus
Accessibility checks improved with CF
"XAADMINISTRATION-77: Improve the registration interface - Run Selenium tests with LiveValidation and without, also test configuration from adminstration page and improved performance of RegisterTest"
ISPN-2281 Implement Hot Rod and Embedded compatibility
Attempt to address performance problem in the IBinaryParser To many open()s a new method was create isBinary(byte[] ..) So the file could be open only one time.
Method/naming changes for the ID site functionality
"Make sortedness a trait, and add a rule, RemoveSortRule, that implements ORDER BY by finding a rel that is already sorted. SortRel is now defined by a RelCollation, not a List<RelFieldCollation>, although they are fairly similar in content. (Most of the functionality is disabled in this commit.)"
Added functionality to clean-up feed items after an update.
Refactor JolokiaHttpsHandler so that it's functionality of checking for client certs is implemented as an Authenticator instead.
 * change paging: Only Superuser could use the pagingIterator to win on performance. Other Users will handled like before.
"Startup performance boost ~50%, fixed some bugs and inconsistencies with parsing/completion"
Adding functionality for put item
HDFS-4049. Fix hflush performance regression due to nagling delays. Contributed by Todd Lipcon.
Node.join functionality is atterative
MONDRIAN: Add more compatibility tests. (note case tests commented out)
HSEARCH-2895 Separate ORM performance test execution from scenarios
CAY-1147 Remove id reading functionality from ResultIterator
Bring the productivity metric plug-in up to date
Added more general implementation. Started adding code to test for correct Board functionality
if arguments cannot be completed we'll display options for better usability
Bug 316450 [Compatibility] Secondary workbench windows are created as MWindows instead of MTrimmedWindows
moved vision functionality to Raster2D
1) support importClass/importPackage in BIRT. 2) cache the compiled script to optimize the performance of Javascript.
"Changed Service EditarPublication to EditPublication, plus it now dereferences objects, instead of just deleting them. EditPublication and DeletePublication now both have the same filter which tests authorship; didatic field in publication ceased to exist; objectified PublicationTeacher indirection, which was yet only partially achieved; Publication.getAuthors() and Author.getPublications() ceased to exist in DML specification; corrected 'Ficha de Docente's publication removal functionality."
Made internal classes static (improves performance)
"Implemented (untested) areNodesAlive() for SessionManagement, did a lot of refactorings and documentation for better understandability."
Bug 324849 [Compatibility] NPE thrown when trying to close unavailable perspectives
Issue #7: Corrected thread-safety issue in outbound concerning communication with SoapOutboundHandler. Improved also performance (issue #8). My tests indicate aound 5 tx/sec is attainable. Given 50% of processing each for inbound and outbound indicates around 10 tx/sec for a standalone server.
nojira - repeatability hell
[BLIND] Add dedicated compatibility module for Glowstone.
Added caching of index count to improve performance (Craig patch)
Added some functionality
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer (Moved methods from CompatImpl to BaseImpl since they were JSF 1.x related)
PrismTech JAC#102 Performance improvements and code simplification returned to OS.
compatibility updates
Add tests by JCUnit. Isolate legacy facade (CommandUtils) Add a functionality to kill a running process.
provide functionality for bug rank categories allow for hidden bug categories
EVALSYS-138 Fixed take eval page so that it checks to make sure the user is actually able to take the evaluation before displaying it to them fixed bugs in take eval and improved efficiency
Cleaned things up so that a single keyboard manager is to be constructed and used throughout an application that cares to make use of its functionality.  Allow registering key observers that are notified of all key presses while the keyboard manager is active.  Clear things out properly when the keyboard manager is disabled or reset.
engine: Change backward compatibility logic for add/update vnic
"Added UI resources, and functionality to enroll patient"
Modified for JBoss and Hibernate compatibility.
Refactoring of trace related functionality in the Java code generator runtime library
"reverted to old LoopPipe with new emit functionality. Need to think more on new LoopPipe implementation---its logically correct, but inefficient."
GEOT-3560 Improvements to JMapPane performance with slow rendering.
"TEIIDDES-1265 Incorporation of several defect fixes regarding Teiid Execution Plan Usability. (TEIIDDES-880, TEIIDDES-942, TEIIDDES-1194)"
"refactor, more OO stability"
adds various usability improvements for capex
SONAR-2291 fix instability regression when temp dir is not in the same drive partition than cache
HV-962 updated readme file for performance module except the profiling section. Moved Random object to state class. Changed logging level from trace to info
"- JSTest class added to run parameterized junit test, one per *.js file under src/test/javascript - adding missing or not working functionality between binding of java driver to javascript api using JSTests (ensureIndex and dropIndex behavior now working) - many assorted changes and some experimentation to get {'123': 123} style objects to return String: Integer instead of Integer: Integer java objects (work in progress)"
[UF-70] Some api changes for backport compatibility
Bit of performance optimization.
o Refactored to improve performance
small features added and improve stability
Accuracy test in a seperate folder and not in the benchmark folder
Bug 184087 - [ActivityMgmt] Optimize performance of MutableActivityManager#setEnabledActivityIds()
work on the flexibility of the base test classes
"Move Controllers into more sensible spots in the code. This is actually the tail end of some work that was begun in 0.6, but not finished for stability reasons."
performance upgrade
HBASE-3610 : Improve RegionSplitter performance
Splitting function CompatibilityCheckerXRecessiveJava.
Configuration: renamed the RuleML compatibility mode to reflect it's new purpose
"1) Print more accurate error message, when there is no performance measurement history;  2) Small code clean-up in the performance processors;"
"feat: #67 finally decided to make variable assertion accessibility type safe for HumanTaskAssert only for the moment, new issue up to come to make it accessible for all AbstractCaseAsserts and test document them"
Adding the delta indexing functionality.
Improve performance. Fixed #28 : Lazy get or map file to avoid reach reclaimed direct buffer.
Added xml functionality to storage class
Quick fix for fastbreak: Efficiency on leaves.
#NAME?
"[#2178] Improve FieldList. Avoid creating excessive array lists, where simple (immutable) Field<?>[] are sufficient - More improvements leading to another 50% performance increase"
"Revert ""Temporarily restored compatibility with Eclipse 3.7."""
"Fixed some bugs, and made some efficiency improvements (plus, parallel code that I missed!)."
Bug 87379 - Ant versions backwards compatibility
SHIRO-95 - created test case to verify explicitly set Cache and CacheManager instances are not overwritten by defaults.  Both AuthorizingRealm and CachingSessionDAO were setting their respective caches to null when a CacheManager instance was set - this behavior has been removed as it is unexpected by end-users.  Also made Cache and CacheManager interfaces and implementations generics-capable.  IniSecurityManagerFactoryTest#testCacheManagerConfigOrderOfOperations test method was added to verify functionality.
#691 - Performance Improvements
topic: code enhanced type: functionality module: other description: MDEditor - multiple occurence of form groups
Made 'external' package. Planning to move all external programs functionality into it.
"XWIKI-12228: Provide API and storage for optimized space related queries * better ""retro-compatibility"""
"o collapsing more of the project builder, trying to turn it back into one component -- we have the old and the new with the old wrapper the new -- so that I can have an interface for compatibility and then all our new stuff in another component."
Performance enhancements for style resolving.
"ISIS-1145: introduce RenderContext2"" interface to avoid an unnecessary breakage of backward compatibility with existing isis-module-publishing."
chore(engine): binary backwards compatibility
Fixes #335 by way of introducing an LRU VertexCache. Added configuration option tx-cache-size to make its size configurable on a per transaction basis. Greatly refactored the PerformanceTest Case to verify that the LRU cache indeed solves the running out of memory problem as well as test for other memory leaks.
Start of 0.90 compatibility. Won't build yet. See TODO.
API compatibility with Keycloak
#NAME?
"performance improvement: allow caching of type information where possible, and significantly improve type resolution performance for numeric types in interpreted mode."
"Fixes 3. Now the system supports more than one InputDataIngestionMode per operator. This provides higher flexibility. For example, an operator can receive data through a barrier that synchronises scaled out upstream operators at the same time that is receiving one-at-a-time data from another operator sending requests."
"for [#3356] StudyCreator out of memory error - employ memory performance optimization utilized in the ScreenResultReporter class (used originally for [#2610]) for all studies created with the StudyCreator, namely: - do not use the AnnotationType.createAnnotationValue stock method, which also populates the Study->reagents link, rather, use the ScreenDAO.populateStudyReagentLink method which populates this link table using SQL directly"
#NAME?
"1) Refactor arrivals-and-stops-for-stop functionality into internal non-bean RealTimeStopTimeService 2) Add ""useRealTime"" param to trip planner ConstraintsBean"
JBIDE-1646  - trying to allow any type of poller the flexibility to request more info. 
"fix file names, avoid breaking backwards compatibility"
form for tasks was almost implemented merge with main form functionality - will be the next step
Working towards BRMS 5.3 profile - minimal functionality to support BRMS 5.3 release.
"Fixed issue 61, added individual serializers for 1D arrays of primitives, Strings, and Objects for better performance."
1) Introduced functionality to generate data in an asynchronous manner
"Preliminary implementation of ""verbose register info"" functionality"
WELD-2322 Fix performance issue with WeldManager.instance()
- Removed use of deprecated Run.getEnvironment() - reduces log WARN noise and improves compatibility with later Jenkins versions. - Use UTF-8 to write and parse changelog files (falls back to parsing in platform default encoding if get IOException - to handle old files). - Slightly improved diagnostics on most file I/O exceptions (identifies what kind of file failed more accurately).
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: first version of an own form element 
216167 [performance][breadcrumb] Java editor leak after closing editor when in breadcrumb
Slightly improve the performances of zeroOrMore()
builders for static factory methods #63 refactor usage of type.name vs type.typeAbstract.simple in templates correctness of other type's marshalers and moved names to templates improved generated javadocs in many places generate less unused stuff
"Created planned position functionality for intended routes - refactored safehaven area, updated intended route transmitted data to include planned ETAs and active waypoint"
performance upgrades count treasure fix
Changed implementation of adding/removing/getting relationships on a node in cache layer. Previous implementation worked with sets but that had a performance problem  when doing small modifications to a node (create adding or removing a few  relationships). This could be noticed when node had many relationships (copy on  write on largers sets was just to slow). 
Created a feature branch for AccountStoreMapping related functionality.
refactor to promote performance
Introduced `AnnotationIntrospector` arguments while maintaining backwards compatibility.
Prototyping backwards compatibility
"Improvements to read-group filtering in PrintReads  - Read groups that are excluded by sample_name, platform, or read_group arguments no longer appear in the header  - The performance penalty associated with filtering by read group has been essentially eliminated  - Partial fulfillment of PT 73075482"
Opening neo-1.0-b6 optimization branch (kiwi) that includes a lot of performance (speed and memory) improvments. List of changes:
#232 MgcpRequest.getParameter(K) no longer fails fast to maintain backwards compatibility.
- 81526: Change method signature dialog performance on name changes [refactoring] - 82724: Exception in change method signature
Toolchain edit: new functionality Properties are enabled for non-C files Some bugs fixed
Performance improvement for the UI.
Added CommandForm and buttons functionality
cleaned performance testsuite
ADD: New XML setup functionality.
"Improved support for concurrent testing in PerformanceTest. Also more fiddling measuring performance metrics for DateService, without getting any reliable results"
"JQMButton - data-role=""button"" is not set anymore to remove dependency from deprecated jqm's buttonMarkup() and improve performance."
Performance improvements
added mask functionality
Move Serialize/Deserialize of Tag map to TextSerializerHelper for modularity and code reuse
"Performance improvement for implicit bindings, bug 268383."
Fix stability of issue tracking
introducing comment plugins to provide greater control and flexibility over how weblog comments are handled.  A number of things changed in this commit ...
Deprecating Theory-based functionality
TRansaction with single threads implemented: Performance needs to be check (for import).
"Moved airline JMS functionality from to sandbox, not ready yet."
"renamed Solr/Lucene fields to have ""lux_"" prefix (to improve compatibility with user schemas) auto-generate fields and field names in Solr schema (so users don't have to declare them explicitly) prepend lux:/ prefix to document uris (to inhibit interpretation of path-only uris as file paths by Xerces)"
Compatibility with BKC and R1.0
<No Story> Include LookUptable functionality
Another performance tweak.
Now Includes Performance Improvements - All the maps iterators to for-each loops - Removed duplicate code - Other minor changes
Disabled some unittest code related to implementation of NAS-1895 (ExtendedField functionality). Needs to be fixed properly: NAS-1925
Performance tuning
"added some tests, one to test draw to texture directly without pixmap usage, the second to test draw to texture using the PixmapHelper and then a test to test performance of pixmap usage on the android devices"
PLANNER-401: Moved SingleBenchmarkResult's score functionality to averageScore and added subSingleBenchmark building
Bug #5196 : - handling a user role cache in order to increase the performances in cases of several call on same resources - upgrading the node access controller to take into account some fixes made for previous versions of Silverpeas
"added new searches for beans by property name and child beans by parent name; removed ""include subtypes"" options due to complexity / performance; refs #8"
CITRUS-6 Add Docker command result callback functionality and just use one command per action instance
SOAPUI-1239 - common notify functionality extracted to parent
"Moved out performance tests and other tests which aren't really unit tests, out to an @Ignored test class"
[NGRINDER-28] Develop performance test module: test listing and editing function 
JSPWIKI-566: Ajax functionality rewrite.
XWIKI-4028: Use a XHTML renderer that doesn't add round-trip comments when viewing a wiki page in view mode in ordre to improve performances
"Standardize unit tests in PureFunctionIndentifierTest - use LINE_JOINER for easier readability and better line numbers when we get errors - no more verbose ""....\n"" + ... (new lines are standard across all tests now)"
Histogram performance: Views rather than PointSets
Prepared transformation assistant with functionality to be used for generation of the exist1 expression.
Restored backward compatibility
"Refactored monitor package.  In a nutshell, the monitor functionality (IO and Memory) was decomposed into 2 sets of classes: Stats and Monitors.  Stats acts a model that holds the statistics for the monitor and monitor collects and parses the stats."
XLCLOUD-1848 Refactored EntitlementValidator to allow similar functionality in XSA.
IN PROGRESS - issue SOAPUI-1437: implement functionality https://jira.eviware.com/browse/SOAPUI-1437
Fixed MapStreamer incompatibility with Hazelcast versions prior to 3.5.
improve(engine): improved test case efficiency
consolidating logic for extensibility into a single base class. NameForm should be extensible.
add IntAllocator class for allocating channel numbers. It's a more elegant solution and should exhibit more uniform (and often better) performance
[DS-732] Further browse refactoring for efficiency
adding shopping cart cookie functionality
Content Assist Configurability
some cleanup and performance improvement by caching mdat#getContentSize
"Colors/Strokes for series, ParallelCurrencyRateProvider improved robustness, fixed NBS provider"
Improved performance on traverse
"refactoring, performance improvements by using array vs. lists"
Performance tests can be executed so that you get stats for modes:
adding login functionality
#NAME?
M4720 Unit and integration test robustness improvements (#5933)
modified getContext( ClassLoader cl ) method for readability/logic flow
added SVNAdminEvent and ISVNAdminEventHandler that replaced ISVNTransactionHandler and ISVNDumpHandler  in functionality
Optimize event storing and tracking performance
"Performance test implemented, hessian web service, basic implementation for command processing"
Performance improvements
adding performance improvement by aggregating updates into one commit
Adding more functionality to the Logging Panel
#NAME?
improve performance.
storing @WebXXX jar/file to get a simpler logic in OpenEJBContextConfig (tomcat integration) TOMEE-572: Store @WebXXX scanning result to reuse them in Tomcat (improve performances as Tomcat does not need to do it itself)
Assured handling deviating shipping address functionality by tests.
[FIXED JENKINS-15735] Group files together to improve cvs rlog efficiency
Various fixes and performance improvements relating to cache priming
Bug 431361 - Label and activity equals two objects Bug 390575 - Support BPMNLabel DI elements Bug 390566 - Label feature package is not exposed Bug 355672 - BPMN2 Modeler Usability: look & feel Saving work.
"Almost finished the overview panel on genen page. not all functionality is there yet, but starts to look like Nikolas's "
Refactored the output executor functionality so that it's easy to inherit from and modify.
[PLAT-5281] Changing issuer curve type to use legal entity filters. The previous functionality is preserved by using a short name filter
functional decomposition for DataForm flexibility
Added Modules view. Added an image cache for better performance.
Changed: Performance enhancement in Metadata Extraction code by not invoking the body handler. The content is not parsed - only the metadata is extracted. New: Added a unit test to check whether metadata extraction fails for large files (4GB+). Fixed: Moved the FITS library dependency from DcShared module to DataCommons module.
"DNA-497 Moved the functionality of the extension-based MIME type detector into dna-common, as a new MimeTypeUtil class. The ExtensionBasedMimeTypeDetector was changed to reuse (by subclassing) the functionality, but this allows other components that need the filename-based MIME type functionality to rely upon dna-common."
"Big UG refactoring and intermediate commit to support indels in pool caller (not done yet). Lots of code pulled out of long spaghetti-like functions and modularized to be easily shareable. Add functionality in ErrorModel to count indel matches/mismatches (but left part disabled as not to change integration tests in this commit), add computation of pool genotype likelihoods for indels (not fully working yet in more realistic cases, only working in artificial nice pools). Lot's of TBD's still but existing UG and pool SNP functionality should be intact"
Refactor to move reusable functionality out of SkinnableCharonPortal and into PortalService.
Refactoring SelectTranslator for better extensibility
multiple (additional) good types connected via input-output-model; performance optimizations
Updates in voice adaptation using weighted codebook mapping based transformations: - Spectral plotting functionality for debugging - Cleaned up freq. domain transformation code & updated various variable names for clarity - Updated codebook mapping and weighting functions after unit testing
Lots of new FluentCv functionality and a few renamed methods.
Extracted common functionality of all caches with string keys into CacheHelper.
Performance improvements
added warnings if ZK isn't found upon startup.  factored out common base functionality from both BaseNettyServer and BaseJettyServer into generic BaseServer
Reversed if/else conditions using guards for improving readability
SONAR-4898 improve (again) stability of WatcherThreadTest
Development of contacts update functionality.
CLI separated to the module. Added switch to distinguish binary and source compatibility.
added a getQT() method to QRDecomposition interface compute Q by transposing QT rather than the other way round for efficiency JIRA: MATH-223
FELIX-2169: Improve dev:show-tree performance and avoid NPE when no matching export is found
Fix performance issues when processing reviews
Performance improvements
CSPACE-451 Finished up the functionality to support VocabularyItem sub-resource of Vocabularies. Reworked some of the ServiceContext and related classes to support alternate services when a sub-resource is involved.  Renamed the vocabularyitem schemas and related classes to consistently use all-lower letters to prevent problems with the repository layer. 
Logging bug fixes + new functionality
Update test structure & stability fixes
134760 - Performance of fill* methods
Did some refactoring and added some performance improvements to the partitioner.
PerformanceProfiler: sort the output of report(stream) by total time
Java-readability cleanup. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48189762
#NAME?
Rewrote pack access code against WindowedFile to improve performance.
Fix for Bug 90815 - performance tests failing consistently (hopefully)
Improve BatchRefUpdateTest readability
implemented clear functionality
Bug 514277 - Performance of closing parts/windows (with many visibleWhen/enabledWhen) is very slow
Bug 431361 - Label and activity equals two objects Bug 390575 - Support BPMNLabel DI elements Bug 390566 - Label feature package is not exposed Bug 355672 - BPMN2 Modeler Usability: look & feel Bug 400944 - Add Participant Bands to CallChoreography and SubChoreography Saving work. Fixed Event SubProcess depictions.
Bug 476145 - [region] performance issue with large number of bundle listeners and bundle events
Bind BridgeHealth API incompatibility warnings to logging.debug.
fixing bug #2054 Changing scope of some transactional methods in KmeliaBmEJB due to an incompatibility with JPA during emission of notifications
refactored common functionality
Update : Portal Tutorship. Students Low Performance with moments
RESOLVED - bug 251665: [plug-in registry] improve view performance https://bugs.eclipse.org/bugs/show_bug.cgi?id=251665
improved Representation functionality and some more fixes
Created a Device class which encapsulates the functionality of Configuration and History together
"The core elements of HBASE-2037: refactoring flushing, and adding configurability in which HRegion subclass is instantiated"
"Make the sub index functionality look like a function.  Also make it act like Perl's substr at the suggestion of jeffg@, where there is an offset (which can be negative which means it's an offset from the END of the string) and a length."
XSLT fixes SubjectRewriteFilter refactoring for better extensibility
finalized functionality and tests
add orm files back to allow for extensibility
"Adding new excludeFields functionality for EqualsBuilder and HashCodeBuilder, as submitted by Pete Gieser, Bugzilla: #39315"
[CXF-4539] - WS-Security inbound performance regression  - Fix confirmed by Alessio.
several performance improvements
RatingPopup added Caching by hibernate Some improvements of performance Changing name of remote movie to TMDBMovie Movie list to import added
Consolidating WS-Security DOM + StAX functionality into a single demo
ASNN-516 ONC-1919 Adding error messages in Add/Edit Asnn Screen if there are communication or other errors with the Turnitin functionality
"* Machine Setup now monitors for changes in children and attempts to refresh the nodes. This doesn't work perfectly yet, but it's an improvement and allows for dynamic updates such as adding feeders, cameras, etc. * CamerasPanel (from tabs at bottom) has been removed and it's functionality moved to the Machine Setup tab. * Cameras can now be added and removed without restarting OpenPnP. * Name and Looking properties added to camera wizard. These were previously settable in the table, but the table has been removed, so now they are fields on the wizard. * Auto generated action methods removed from cameras to allow the actions from the ReferenceCamera through. This enables the delete action in Machine Setup. * Minor refactoring and improvements."
JBRULES-3251: marshalling backwards compatibility test framework implemented
undo some refactoring to maintain Vault compatibility
"bug 6703, 6704:  use the correct method signatures for invoking updateTemplate/updateIso and updateTemplatePermissions/updateIsoPermissions APIs.  It's possible that the reflection should just use 'isAssignableFrom' when getting methods since the manager methods were using a base class as the parameter rather than UpdateTemplateCmd/UpdateIsoCmd and UpdateTemplatePermissions/UpdateIsoPermissions, but for now the explicit methods are added for simplicity."
Improve ConnectionsPool implementation and performance. Patch provided by Laurent Quérel
LIBS optimizations and performance tools
Added rating filter and fixed performance issue.
Refactored code to improve the testability
"Bug 86973: [Dialogs][IDE] Open Resource dialog should accept pattern for matching folder path: - improved fix (performance, only match path if patterns contains a '/' )"
"Relaxed accessibility modifiers of a few methods to support FCGI parsing, and introduced method setResponseStatus(int) to set the response status programmatically (since in FCGI the response line does not exist and therefore it is not parsed)."
"CAMEL-1417: Fixed performance issue with StreamInterceptor causing too many convertions attempts that is bound to fail. Improved logic in MessageSupport to also avoid type convertions if not possible. In the rude performance test we get a 2x gain on my laptop. And the Camel715 can now again be run with 50000 loops in about 5 sec, giving a 10x gain."
#POULPE-435 Exporting database functionality - tests
JBRULES-1944: enabling 'timer' functionality in the parser
 - Modular approach to the Performance Optimizations.  - More scalable and plug-able so that users can write their own modules
"The didl UUID functionality is only used by the DIDL OAI crosswalk, 1.6 will utilize default java UUID support, moving this into OAI to assure it is not used similarly in the core."
[change] search functionality from utility class to SearchAndFilterStrategy implementation [change] simple search functionality allows 'complex'-search terms [change] implementations of Searchable use methods from SearchAndFilterStrategy
performance increase
MAHOUT-767 Improve RowSimilarityJob performance
Ready for a beta release! I just need to validate integrity and functionality a final time before adding it to BukkitDev.
"Latest row filtering model, with find functionality"
new high-performance static variable tables!
spelling error corrected in the getPoolEfficiency method name
Eclipse 3.7 API compatibility
Adding exists functionality for workspaces and a little better feedback for deletion...some convenience stuff
BACK PORT - issue TRUNK-2015: Move some functionality from SaveHandlers to hibernate interceptors  https://tickets.openmrs.org/browse/TRUNK-2015
performance enhancements in property DAO
JBRULES-1915: Improve process persistence usability  - improved command-based implementation of StatefulKnowledgeSession
#NAME?
DDF-249 Fixed load more results functionality to actually return the correct next set of results instead of skipping ahead
performance tuning
Fix Difference add bug Fix FileAppender transferFrom bug Use transferTo improve defrag performance
Performance improving + frontend corrections
#NAME?
issue SOAPUI-2445: Switch Environment functionality started changing request combobox
Added playlist functionality #23
Basic functionality of streams in web interface
added payments functionality to Academic Administrative Office
Changed behaviour in LuceneIndex#query() to not throw exception if modifications has been made since it goes against common sense. Instead it strives to return correct answers if not specifically told not to do that (via QueryContext#tradeCorrectnessForSpeed()).
Improved documentation and readability
Improve Collect Earth balloon performances
"v1.35: Fixed compatibility with Spigot, permissions load properly, plugin depend. fixes"
Refactoring for better package and name organization and changed httpclient from 4.2.5 to 4.0.3 for GWT compatibility
Improve performance of IndexMergerV9  (#3440)
Renamed SmokeTest to RobustnessIT - doesn't need to run all the time
adding log filtering functionality
golive functionality deserves it's own class
"inventory sync performance (part 3): make application of measurement schedules efficient by changing the ServerService interface to accept a set of resource ids, and by processing ALL ids at once with a single insert/select query; descendants are processed in a similar batched fashion as necessary, and oracle errors for large in clauses are bypassed by batching the insert/select into groups of at most 1000 items; "
Changed Layer Menu logic using a Factory Ref on IGPUserManageDetail and IGPUserSimpleDetail for a better hierachy management Added Sharing functionality on Manage Project Window
Miscellaneous changes including modifying the calibration model for greater accuracy compared to the ISDA model and additional testing of the model.
 r1078@thor:  alex | 2006-11-23 10:53:54 +0200  all launch functionality factored out in LaunchUtil
HV-962 migrated performance tests to JMH
FIXED MIFOS-2986 ApplyHolidayChangesTask batch task tweaked for performance
"Changing testing framework from junit -> testng, for its enhanced configurability. Initial test to see how Bamboo will respond.  More detailed email to follow."
"HADOOP-6166. Further improve the performance of the pure-Java CRC32 implementation. Contributed by Tsz Wo (Nicholas), SZE"
Discord linkage intensifies Nick/link role will update when renaming occurs and when rejoining Nick functionality can be configured
moving functionality from ERD2WQueryPageWithFetchSpecification up to ERD2WQueryPage
Implemented the project sharing functionality.
restore functionality to allow enums to inherit Proxied
trying to improve performance
XWIKI-2568: Continue implementing the new Rendering Architecture * improve macro parameters usability
"All symbols will now be generated through the new Symbols class. All generated symbols will now use [J] or [j] as prefix, [J] for methods and [j] for all other symbols. Removed mangling of class names and method descriptors to increase readability. (#108)"
"BZ#967677 Reworked the ""--server"" option so that the server attribute comes from a config and the functionality from the command is replaced by ""--flatten""."
CLOUDSTACK-8423: [Xenserver] Improved the performance for processing of ClusterVMMetaDataSync command which can cause slowness in DB if there are huge number of VMs this closes #204
"Added a new ActionResolver that will generate default bindings based on class and method names (with quite a bit of flexibility). In order to make this work properly, added a new getUrlBinding method to the ActionResolver interface - there were several places in Stripes that need to get the URL binding from a bean class, and had been assuming they could just hit the annotation for it."
"Login bar functionality (account popup, topup, transfers)"
adds some simple functionality to ui
HIVE-6952 : Hive 0.13 HiveOutputFormat breaks backwards compatibility (Ashutosh Chauhan via Prasanth J)
Bug 376011 - [accessibility] Eclipse 4.2 tab traversal needs refining
#95: Implement more pedigree compatibility checks 
[jira] [HBASE-5469] Add baseline compression efficiency to DataBlockEncodingTool
moved performance tests under the metrics package and replaced the invalid JSON string with \n with a valid one.
"SHIRO-157 - implemented functionality.  Remembered principals will automatically be added to the session, and if there isn't a session, a new one will be created to receive the principals.  This ensures that the RememberMeManager will only be consulted if a session does not yet have an identity associated with it."
robustness
"DNA-467 Restructured the SearchEngine functionality to simplify it, and to change over to have implementations be extensions.  To specialize, an implementation now simply subclasses the SearchEngine, and this is instantiated directly."
"Given that all classes implementing output stubs already have getters for the underlying OutputStream and File, it makes sense to unify that functionality into the Stub interface.  Now it is possible to have an Engine utility method that iterates over all registered stubs to find the one representing a given OutputStream and return the File associated with it."
Complete - task 4: Implement action-specific dispatch paths http://code.google.com/p/gwt-platform/issues/detail?id=4 Complete - task 9: Adding compatibility with multiple security context. http://code.google.com/p/gwt-platform/issues/detail?id=9
BISERVER-5683 - Coding - functionality
"SVNKIT-334: SVNCommitPacket#setCommitItemSkipped functionality was broken in SVNKit 1.7, now fixed."
PatientAdmissionSchedulePerformanceTest
fix bugzilla 155958:Backward compatibility on 'resultset' property . fix bugzilla 156495: ModelOdaAdapter sometimes may lost user-defined datasetParameter
HIVE-3420 : Inefficiency in hbase handler when process query including rowkey range scan (Navis via Ashutosh Chauhan)
"Fix for ME-1185, adding functionality to download notes. This fix also moves deleteFiles and createFilefromContent into meleteUtil.java"
rename new treeLevels() to distinctHeights in order to keep backwards compatibility
"Expanded the r-to-java wrapper code generator to handle multiple overloads and generic methods. At this point, RuntimeInvoker (slow reflection-based r-to-java caller) is only used for Group Generics. Unfortunately nearly all of the operators (+ - / * etc) are group generic, so we still aren't likely to  see big performance improvements until the code-generated wrappers for Group Generics are working"
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#getServiceRegistry()
fix polygon regions - still has bad performance
Added fast A^T*x after much agro trying to get the performance up. Gazillion tests need writing along with the statefull versions of the faster code and appropriate shortcuts for alpha or beta being 0/1.
increase extensibility
Renamed QueryBuilder to be StatementBuilder and PreparedQuery to be PreparedStmt for better compatibility with non-query actions.
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Fix bug where the URL Factory is set to null from time to time leading to the Logging Bot Listener failing to send t notification to the IRC channel * Fix bug where the Wiki Bot Listeners must execute with the same user as the user who started them (in order to benefit from its permissions and allow to run groovy macros for example) * Moved BotData and BotListenerData out of the wiki package (they shouldn't have been in there in the first place) * Started introducing a JIRA Bot Listener using a Groovy macro
Bug 210450 [prov] Forwards compatibility of file formats
EMBRYO-47: Rework of mail functionality to get rid of MailService which can not be used when functionality is separated into several Maven projects. 
Introducing InterceptionMetadataException to highlight issues when extracting metadata from the classes. Adding a statically-bound class metadata registry for improving the performance of parsing classes. Non-interceptor methods that override interceptor methods will cause interceptors from the parent not to be invoked.
Bodcast Functionality
HDFS-347. DFS read performance suboptimal when client co-located on nodes with data. Contributed by Colin Patrick McCabe.
"In preparation for refactoring retrieveResponse(), I realized that it was being used to test what is now the functionality inside rectifyURI(). Making that more visible and changing the tests to exercise it directly simplify things, including letting me delete the spy I created. All still green."
NXP-3995: VCS: allow more flexibility in backend column types
Added prootected accessors for Default field mappers and property resolver strategy as requested in comments of issue#33 for extensibility of ClassMapBuilder
"Modify the atompub-contacts-server authentication and authorization functionality to use the brand new ability for a container request filter to inject a security context, coupled with Jersey provided functionality supporting a @RolesAllowed annotation to guard each resource method."
"Feature: Added new features to CSV import: 1. Disabled websocket notifications 2. made main quote character, field separator configurable 3. added periodic commit functionality 4. added status feedback to structr-ui and the console 5. added better error messages"
SMR-16 added performance test code.
"WbmPersistLoadProcessor: add simple performance metric. drop confusing metric failedCount, add missedCount and errorCount."
"Port functionality from B2009_03_26_HBasePersistence to trunk:  * OID generation that does not depend on OJB (not yet enabled, but ready to use)  * Add ownerObj and slotName attributes to VBox  * Make all VBoxes serializable, including arbitrary composition of value types (still not implemented for SQL)"
#NAME?
HBASE-1669 need dynamic extensibility of HBaseRPC code maps and interface lists
Add respect-min-size functionality. (#4215)
Implement high performance HTTP api for plugins with jetty.
Bug 376011 - [accessibility] Eclipse 4.2 tab traversal needs refining
added new attribute and its support for phpContentAssistProcessor ext. point. Note that is has backward compatibility and the default partitionType is PHP_DEFAULT
"Decode JSON literal types eagerly and with our own decoder.  Previously we relied on Double.parseDouble() to decode tokens. Since that method is expensive, we deferred calling it unless absolutely necessary. Now we decode the literal type immediately. For efficiency we decode the token right out of the char buffer. This makes things more complicated but it saves many calls to charAt().  It also opens up the possibility to deferring string creation."
Added UndoHandler + undo/redo functionality
Made usage of Histogram for throughput measurement. Cleanup of Probe interface. Merged annotations @Name and @Performance to @SimulatorProbe. Moved probe start time from probes to TestContainer. Cleanup of PerformanceTracker methods. Cleanup of WorkerPerformanceMonitor.
172828 - Enhance new body text section usability used in plug-in manifest extensions page
Extend ObjectIdMap with more and better performance tests
#NAME?
Merged push image functionality.
"MONDRIAN: Integrate from mondrian-release/3.2 to main @13928.     (This integration intentionally does not include recent changes such as XMLA     server, performance tuning, or change to JavaCC parser. They will come in     later tranches.)"
5.3/5.4 compatibility (that JavaScript one ... wow ... have fun :) )
Performance: Fix Bug 62209
Misc correctness enhancements: develop the bin selector into a recursive algorithm and return a shard when reads are missing.  Also improve the performance of the read filter that clips reads not actually present in the shard.
Improved API and performance.
Some minor performance tweaks
minor tweaks to m2e.jdt implementaton extensibility
Improved scan performance with configurable pre-fetching
Fixed drag and drop functionality for legend view.
[DS-734] Further database efficiency changes
Refactoring of BQSRv2 to use longs (and standard bit fiddling techniques) instead of Java BitSets for performance improvements.
Refactored password reset functionality to avoid using HTTP session for token storage. Token is stored directly as a property on the corresponding user node. Also introduced token expiration (by default it is equal to the session expiration time) ( BACKLOG-6259 )
"MONDRIAN: Fix bug MONDRIAN-588, ""UDF returning List works under 2.4, fails under 3.1.1"".     Also add test cases for other UDF functionality."
Bug 431361 - Label and activity equals two objects Bug 390575 - Support BPMNLabel DI elements Bug 390566 - Label feature package is not exposed Bug 355672 - BPMN2 Modeler Usability: look & feel Bug 400944 - Add Participant Bands to CallChoreography and SubChoreography Saving work. Cleaned up the Choreography Activity update/layout mess.
#NAME?
"* added templating functionality to read so that one can use variables to inject maven properties and even complete files with some groovy help * added new test-source folder as home for example files, like the beans and the actual example script"
"Implementing workspace-centric databases, where each database is associated with exactly one workspace. This should allow unloading segments of data that aren't related to a given task. With discovery / general performance improved as much as it is, re-discovering the graph isn't a major issue if the poms are cached locally"
Added previous optimization to diploid (non-pool) model and shaved off 20% of runtime from it.  Moved out some common functionality to joint estimate parent class.
Performance tweaks
improved serilaze performance
chore(engine): add createComment to ensure api backwards compatibility
Change mechanism used to convert users to UUID storage to increase efficiency somewhat
"158655 - [Cheat Sheet Editor] New composite cheat sheet editor:  Model, UI, & functionality"
Renamed a fiel to reflect functionality. Added aliases.
"as we already know what we are going to display, we might as well use that info. This gives another 20% performance boost (YMMV)"
LESS CSS performance improvements
Extended functionality of PathConfig
POULPE-469 Testcoverage and refactoring for Database backup functionality - Making Sonar happy
performance tuning * creating an object during deserialization
"fix up extensibility tests with better names, plus a failure test."
[NOBUG] expand datamodelprovider extensibility. Committing for DFH
Renamed FFmpegVideo back to FFMpegVideo for plugin compatibility
"OPENNLP-199 Fixed the perceptron, most importantly: uses standard update, stepsize is gradually diminished to ensure stability, and averaging is simplified and improved. Added prepositional phrase attachment dataset and added perceptron unit test on that data."
Move copy/paste functionality to the NodeBoxDocument.
ACT-747: new case functionality + fixed attachment popup window auto-sizing
"Atlas-standalone: Reformatting of loader code.  Fixes to make data matrix file all columns - previously was hardcoded to look for 'hybridizationref' but can actually vary - assay, scan allowed too.  Lookups for these columns added, but this still needs more work to make sure scan data resolves to the right assay data (need mappings internally between assay, scan node names).  DAO performance optimisation."
Testing and confirming very poor performance in dusjs compilation phase.
performance
Add the beginning of functionality to log a failure message in data collection failed events.
PDT-3884 SSTableWriter functionality will now correctly write to index tables. Test now correctly sstableloads the generated SSTables and queries them back out via Rhombus and confirms the result.
Bug 31561 - Parse build files with Ant Editor parser Bug 31672 - Broken backwards compatibility with Ant 1.4.*
"Apparently only yohoho ever uses the runtimeadjust stuff, so we don't care about backwards compatibility and this naming scheme is better.  We now have ClientImageManager and ImageManager."
HBASE-576 Investigate IPC performance
Brushed up 1st stab at instructor functionality
Globally streamline naming and functionality of Form Builder
HSEARCH-761 - Rename method according to new functionality
Updated profiling and validation functionality in developer app to use angularjs
- Summary: Bugzilla Bug 124580 Usability: New Report should not always prompt for Template Properties
MONDRIAN: refactors OrderSet() using chained comparator; improves performance of BreakArrayComparator by pre-computing member value
extensibility issues
[MOD] Test and performance classes revised and debugged
Massive overhaul of useless instancing. Big performance boost!
Adding latest changes for put item functionality
The basic functionality is in place.
Fixed some samples for performance test.
minor tweaks for better tests readability
"Checkin:Performance enhancement:  the value of a column with a simple expression like row[""country""] does not need to be re-evaluated[19342]"
MassiveCore - Performance improvement for command argument readers.
Compatibility update for CraftBukkit 1.5 and BKCommonLib (huge!)
Robustness for GroovyCompilationUnitTests#testGetModuleNode_7(). Test ModuleNodeMapper cache after each test tear down method.Basic refactoring and clean up.
CAY-1421 CayenneRuntime shutdown functionality
"* Re-write time-range HQL to be more efficient (make better use of the indexes),   which should result in better performance especially for larger collections"
Killed some bugs & improved some performance. When having allot Elements prevent getXPathExpression get called over 10 million times
MAPREDUCE-3794. Support mapred.Task.Counter and mapred.JobInProgress.Counter enums for compatibility (Tom White via mahadev) - Merging r1241299 from trunk.
CAMEL-4414 Add new simpler CamelLogger in util and CamelLogProcessor in processor. Old CamelLogger stays in place for compatibility
Working on readability with @andypalmer
Fix for ticket 146: Avoid using MaryServer related classes in MaryClient directly by implementing additional feature requesting functionality.
Attempt to increase performance of the OCWS module by caching the compiled transformers
Refactored transactional observer code for better encapsulation and runtime performance.
[DROOLS-664] minor performance optimization to xpath evaluation
Added 99.9th percentile and max interval latency to PerformanceState and PerformanceStateContainer.
HSEARCH-2075 Update ShardIdentifierProviderTemplate to maintain backwards compatibility
"Did quite a refactoring on the commad handling part. The new callback makes a lot of new features possible, while completely maintaining old functionality."
Refactoring partly done. functionality BROKEN!
"OOZIE-1424 Improve SLA reliability on restart, fix bugs related to SLA and event generation (virag)"
Possible fix for items loosing their metadata Warning: This build is only for 1.5.1 (IT HAS NO BACKWARDS OR FUTURE COMPATIBILITY FROM UP NOW)
Performance fixes
"Example of ""City Search"" from remote cross domain service using filterable functionality is added. "
Fixes for Master-Slave functionality
Modified delete functionality. General cleanup.
"Redo layout stuff so that it works with zoom, and with tiny images. Add support for stepping through image planes with the arrow keys. Reorganize code with some additional comments, for readability."
performance refactoring on WS split
kernel tweaks and performance testing
Bug 355059 [Compatibility] Mylyn's activate task trim is not shown
"[GSCOLLECT-1369] Add additional JMH based performance tests for parallel-lazy algorithms using Java 8 Streams, Scala, and GS Collections."
add functionality to replace StyleRanges
Bring ArithmeticCoder and decoder from MG4J and modify to improve performance and functionality. Add a move to front coder and test. Add a force option on fasta-to-compact mode. Add a test to check read codec can decode the entries it encodes.
Cached profile images in memory to improve performance.
Decoder performance improvements once again!
small improvements in efficiency
added nat functionality to cloudstack
improved testcase performance
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Add support for test descriptions (so that we're able to extract them later on when we generate syntax reports) * API refactorings
"topic: code enhanced type: functionality, other module: [d3] coverage description: fixed raster chache and added tests"
"* Made file ""View With..."" use the same improved functionality as file ""View"". * Did a little bit of other refactoring. * Reviewed by Russell. * If time ever permits, the rest of this plugin should be refactored."
scope changed to add flexibility
Make a memory and performance enhancement in the class ExprDataReader2
PERF improve performance/scalability in case of ADD or UPDATE
SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions
TEIID-2934 TEIID-2935 improving odata performance and ensuring the correct inline count is returned
"Performance test with QuickFix Server, documentation"
Charts are now based on recentAccuracy vs. accuracy
"Issue #4831 is partially fixed, but we need to add binary compatibility  support."
"Bug 428786 - [1.8][compiler] Inference needs to compute the ""ground target type"" when reducing a lambda compatibility constraint - preparatory refactoring"
Started working on new log functionality and fixed some various issues
"Broke ChimeBase into 2 parts:  ChimeBase now includes Chime specific classes, and ChimeMessage is the core messaging classes. This is done so that services can be built on the Chime framework without including Chime application specific functionality."
readability
performance: name thread pools for debugging
benchmark statistic CALCULATE_COUNT_PER_SECOND (to analyse drools performance)
Add JsonCompatibilitySuite (no stream)
Improved configurability of workload generator
Bug 307403 - [Accessibility] NPE creating FilteredList on Linux
PMD-296 : Add support for outer joins (small backward compatibility fixes) PMD-303 : Move from display names for table aliases to business table IDs PMD-299 : Add support for expressions that use business columns from multiple tables PMD-300 : BusinessColumn formulas that reference outside business columns fail PMD-301 : Complex join between two tables where one or both tables are duplicate/aliased at the metadata level. (first stab)
"Major refactoring: Moved processing of build scripts to own Processor class, generified model items and introduced package ""model"", added downwards compatibility and bundled configuration items in configuration class"
migrated the optimized GremlinScriptEngine from TinkerPop Gremlin to FaunusGremlinScriptEngine. Much better performance as import is not callled on ever evaluation.
"[MOD] XQuery, Conversion Module updated [MOD] XQuery, improved performance for mappings Java arrays to XDM"
moved getSampleSizes into a overridable method to help in places where getting all samples and asking each sample for it's size costs performance added tons of javadoc
Allow caller to manage resulting AlertDialog. Also use CharSequence for a tiny bit more flexibility.
CheckIN: Make a performance enhancement[38282]
Refactoring of some functionality in the JavaFormatAssistant to promote reuse
Added Log4j XML configurability to BootStrapper.
Fixed servlet/client incompatibility if parentSpanId is not provided
Improved getGroundKernel() performance in Reasoners.
ref: Improves the readability of the bitrate allocation algorithm.
Refactor Mapping class for extensibility
Atlas-standalone: Scalability changes - modifying how expression values and design elements are arranged to ensure that primitive types are used wherever possible and that the various results are correctly indexed with appropriate maps.
MODE-1461 General JDK7 compile compatibility
Moved SortableArrayList.binarySearch functionality into ArrayUtil to make it generally accessible. Moved test code from ArrayUtil into separate JUnit test class.
Compatibility issue where there are traversers which depends on that relationships are traversed ordered by type (reversed)... so made a new expander for the old traversal framework
"http://jira.jboss.com/jira/browse/JBIDE-2058,  1. Full path to image ""src"" attribute was added 2. Some css styles and classes were fixed 3. Functionality of getting label value from bundle for panelGroup and PanelItem was added"
[Java container] Refactored ProcessManagerController to improve its testability.
Refine BasePP class in order to provide better flexibility in resetting original value for subclasses
Added functionality to store and read FullContexts to and from disk
Issue 77: added shared ip functionality
make compatibility classes more obvious + fix some issue
Implementing SavePoint functionality
"Rollback since it probably increased the instability as seen in Yverdon formation. Bug will be automatically solved in the future. Also, core can only be modified for bug fixes and the modification didn't solve the bug."
Some of the functionality of LOTTool to LOTFactory. Tasks and scrtips take LOTRuntimeObject and LOTValues as parameters now.
[resolves #831] Migrate config core functionality to fuse-patch
Bug 349331 [Compatibility] Closing non-active perspectives will remove all views from the shared area
"updated some calls, minor performance improvements"
Split ms parsing tests for readability
More functionality in the user and invitation department
engine: Extract isVlan into NetworkUtils for reusability
"Removed playedOtherCommand, added that functionality into playedCommand Added functionality stats [User] to the statCommand Added functionality statpage [user] to the statPageCommand"
Testability metric (DOES NOT COMPILE) Build breakage cleared by: ade
\#121: added history functionality
Start moving ALL the XML parsing and printing to using Stax.  Should help performance and security.
Added extensibility to ArquillianObjectFactory
"Revert ""Rename OpenGraphServlet to FacebookServelet because it better describes the functionality"""
when the jar is a file we can enumerate the entries directly which provides much better performances
OGM-95 improve on performance test adding metrics and using 2GB of ram
Optimized interface method dispatch using itables. ITables are located using a linear search. The latest table is cached to improve performance. (#4)
FACES-1639 Bridge improperly throws BridgeException when an error is detected during Ajax (introduced compatibility layer for ajax detection -- renamed method)
"OmimHpo annotator refactored, fixed tests. Removed huge comment blocks. Made all static methods non static. Creating beans is now done in constructor instead of every run through annotateEntity. Big performance boost."
restore backwards compatibility to the 1.11 release
Updated indexQueue mechanism for performance (no compression yet).
Split off functionality of updating a player's board status and broadcasting it to its own function so that just that can be overridden.
"117335 - [Accessibility] Mac: cannot select checkboxes in trees, lists"
refactor for readability
Enhanced output of performance.txt. Replaced lots of dashes with constant value to create one-line commands. Removed some warnings from code. Little cleanup.
improved performance of map start up PJSM-101
"Implemented 'forgot password' functionality * Added secret question and answer to edit login details form * Added 'My Profile' page where users can change their password and secret question/answer * Added 'Forgot password' link to login page * Added 'Forgot password' form which asks secret question, checks answer and redirects to password change page"
Working to improve performance.
Bug fixes and improvements for Content-Security-Policy compatibility
First cut of provider-independent PlatformServices to supply Cron and TaskQueue functionality where not provided by the platform
Corrected performance regression. Tweaked dynamic query results.
Feature #3216 - improvements : - improving converting performances for Office document preview - fixing the positioning of navigational buttons on file preview pop-up whereas the user had scrolled the page - removing boring message when user enters the full-screen mode of the document viewer
Add import point functionality and some bug fixes[#200 state:fixed responsible:none]
Work on the CvPipeline stuff: * Worked out the basic API and functionality. * Implemented a couple stages to start with. * Started working on a UI editor for CvPipelines.
refactor for serialize performance
topic: code enhanced type: flexibility module: wms description: Enabled the renderer/styling to render multiple geometries at once.
Reenabled URL Search functionality; migrated to SOLR 4.4.0
"Added mailing list functionality, refactored DAO hierarchy, and modified users to account for different types of users being added"
"Bug 84694 - More ""Open Declaration"" functionality in Ant editor"
TEIID-916 TEIID-925 fix for stream corruption during a timeout.  Also further refining the dup remove strategy for performance.
MBS Internal Builder implementation. This functionality is experimental and is disabled for now. Fixes for the Build Model implementation.
refactored OSM / OAM related code added diff functionality
upgrade to jargon 3.0 snapshot performance tuning of jargon/irods connections edits to intro content
REFACTORED state updates to reduce repeatable code and to increase readability
https://bugs.eclipse.org/bugs/show_bug.cgi?id=266243 - make download of meta data repository index files resumable (resume functionality controled via property).
Implemented most of the functionality of the netcare video application.
"Improve LOCAL mode Hibernate caching along the same lines as the improvements for DISTRIBUTED mode:  * Rework AbstractAccessDelegate to factor out only the common methods    between the various Delegate classes.  * Truly implement READ_COMMITTED transactional semantics (i.e.,    handle insert, update, and remove as no-ops, and only apply    modifications to the cache on afterInsert, afterUpdate, and    unlockItem) in all asynchronous cache access strategies.  * Implement NonStrictReadWrite and ReadOnly AccessDelegates for    improved performance.  * In LocalRegionCache, improve handling of invalidations in the    following cases:     - post-commit deletion (in unlockItem),     - Collections that have a VersionComparator but null version,     - Hibernate bulk / multi-table updates (in unlockRegion).  * Small optimization: Nodes do not have to listen to their own    events published on the TopicService."
Refactored exception name. Added new tests and functionality to support these passing tests
SAK-9005 Fix backward compatibility for old hard-coded grading scales
Refactor TaskCommentsView/Presenter for unit testability & add unit tests
Performance improvement for topological sort
WorkerParameter cleanup with performanceMonitorInterval
" - fixes to functionality for splitting path edges to segments of inferred edges, started creating estimators to replace internal update methods on inferred paths and path edges"
"- Re-added ""debugLogPath"" as an alternative parameter to ""logFilePath"" in DebugLogPropertyDefiner for compatibility with older LogBack configuration files. - Implemented setting of syslog port - Implemented getting and setting of syslog facility - Added ""Copy"" to jList popup menu (copy to clipboard) - Made syslog host, port and facility disabled when syslog is active - Added ""F3"" as a search shortcut - Fixed a bug in CustomJSpinner where mouse wheel would still work when the component was disabled"
FACES-1967 MyFaces compatibility (moved MyFaces fix to ApplicationCompatImpl since the 3-arg signature of createComponent is only since JSF 2.0)
Update in add shape functionality
"Adding static content handler and static resources to support jQuery-based editor features (still in heavy development). Inverting the GTHtmlRenderer functionality to have the GTemplate wrap the rendered html from pegdown...may scrap pegdown in favor of on-page markdown conversion, not sure."
Performance Improvements.
Added NodeFilter to filter things like security and visibility. Refactored way Id's were formatted to allow more flexibility in formatting options.
Imp. performance of Explanation:
1. Cdt Variable functionality fixes 2. tests update
#178 added bug report functionality
Refactoring to more readable code (and probably better performance)
Adding in all the functionality to update the sub form components too.
First round of OF-DPA additions for learning switch functionality.
"Fuzzy Truth: Start work on containsExactly functionality — this is the big fish in this pond. Specifically, this CL includes a partial implementation of IterableSubject.UsingCorrespondence.containsExactlyElementsIn. The other versions will hang off this. This CL handles some cases but the maximum cardinality bipartite matching algorithm is still unimplemented and so the method throws if it hits that bit. The method is package-visible, so that we can test it but don't expose it to users."
Basic functionality for team presentation layer.
Refactoring history performance improvements Cleanup and consolidation
"integrate location update functionality on finish of wizard, currentLocation -> previousLocation"
- User Mirroring from Crowd to persistence layer. - Revert persistent object ID generation for compatibility with MySQL; updated authorization code to work with this change.
Analyse: Accuracy of lineNr of parameter improved.
Refactored performance history. M2 code. Test cases updated.
Added functionality to check that backups are recent.
ISIS-130: enhancements to the onlinedemo functionality
Improved thread naming and disabled WebDriver test for compatibility with Travis build
Bug 275020 Reverting workspace only works for compatibility tests
Added edit functionality for sources
Added more temporal functionality.
fix memory leaks caused by missing responses on invocations and added basic performance test
Fix cross platform colelctions for Gwt compatibility
Dropped the Snaplogic code. Improved performance of the project REST calls
BatooDB compatibility refatorings...
added unwind functionality (select statement)
"Update Java versioning API to allow Timestamp based versions, stored with 2^-12 second accuracy, or long int based versions."
Bug 481796 - Performance tuning
Remove and reload jobs functionality
Performance improvments by Valentin Valchev
Continued working on JDK 1.5 compatibility - added support for static import statements.
"CheckIn: Fix bugzilla bug 275622  [Accessibility]Provide shortcut key for check box of ""Create a Connection Profile Store..."" in export dialog;  Fix bugzilla bug 275621  Provide a dialog for user to specify name of exported Connection profile"
[US 6] Implementing update functionality for structured and raw
Updating similarity calculator in order to improve performance
#NAME?
"ui.format system refining from RC1 feedback: Support for one format annotation applying to multiple field types, Printer/Parser building blocks for more flexibility, full Joda time formatting support, FormattingService as a service entry-point for clients to use"
patch from Marc: http connection performance improved
MAHOUT-1264 Performance optimizations in RecommenderJob
JBRULES-3615 sable solution writing with a flag to avoid OutOfMemoryError and performance issues on very large datasets
Cleanup and stability improvements.
bug 7878: Fixed Basic zone functionality - uservm/systemvm/domR start status 7878: resolved fixed
Move Compatibility plug-in to main Editor plug-in
Coloc 2: add a test that checks for the correctness of a masks content
Hamamatsu VMS: final bug fixes and performance improvements
Refactoring existing functionality and making b-m-p more light while moving stuff to b-c so I can play with reuse with functionality later on
"branch:      javabot clean up and simplify the ""no"" functionality"
Bug 320672 - [WorkbenchParts] [Compatibility] SWTException when activating an editor with stale content
New OpenShift Application tests + improved stability of existing tests
"Some more changes to the test classes, combined many tests into group classes to improve performance."
Refactor to tuning the evaluator performance
ISPN-2210 Rework configuration and builders for loaders - Distinguish between loaders and stores - extract interfaces from abstract classes to ease extensibility
#NAME?
Coverage tests and performance improvements
first impl of reconnector functionality in TCPGOSSIP (https://jira.jboss.org/jira/browse/JGRP-1010)
Added functionality so logicalModuleTo cannot be null but always is an object that will contains empty String when no logicalModuleTo attribute will be assigned during creating of a violation
Updated to refactor functionality out of the WindupEngine.
Improved OperationSelector performance by creating an OperationSelectorBuilder which constructs an OperationSelector instance with fast data structures.
"Make the sub index functionality look like a function.  Also make it act like Perl's substr at the suggestion of jeffg@, where there is an offset (which can be negative which means it's an offset from the END of the string) and a length."
minor. brough back for deferEvent for readability
Factored out methods to reduce duplication and increase readability.
"TRUNK-1662: Modify functionality of getConceptByMapping method: added new getConceptsByMapping method that returns one or more concepts, depending on the number of mappings; getConceptByMapping now throws an exception if a mapping points to more than one concept"
"remove the ""disable interning"" functionality in dexlib"
"Revert ""add update functionality"". Update will overwrite effects that have been annotated themselves"
"Merge asmified branch into joni trunk. The asm compiler is not yet implemented (only parts of asm infrastructure exist now) though the original one is abstracted via visitor pattern and won't be affected by asm compiler work (it won't even touch asm classes). This branch also includes lots of performance improvements and memory savings already, also code ranges are now loaded in thread safe way. The main reason for the merge are 1.9 oniguruma changes that need to be incorporated into joni relatively soon."
renamed sanitizeUniqueSolrKey command to generateSolrSequenceKey (and retained the old name for backwards compatibility)
Some refactoring for readability
Minor modifications to enhance readability
"major performance improvements for FASTQ support; adding new low-level and event based parsers, adding FastqTools for common conversions, and adding compile scope dependency on guava version 11.0.1"
[ALLUXIO-2565 ] Improve concurrent UFS read efficiency PR2 (#4825)
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: added empty list entry; avoid saving referenced groups
Issue #1. Alpha version of Edit fields functionality added
"More extensive OSM testing for difference between performance of indexing with points, as well as performance on much larger datasets."
[performance] More performance optimizations
unified purge functionality for WS asynchrony correlation and HL7v2 continuation storages
       * gnu/testlet/SimpleTestHarness.java: Don't implement config.        (getSourceDirectory): Removed.        (getTempDirectory): Removed.        (getPathSeparator): Removed.        (getSeparator): Removed.        (getMailHost): Removed.        * gnu/testlet/TestHarness.java: Implements config.        (getSourceDirectory): Added.        (getTempDirectory): Added.        (getPathSeparator): Added.        (getSeparator): Added.        (getMailHost): Added.        * gnu/testlet/BinaryCompatibility/BinaryCompatibilityTest.java:        Don't cast to SimpleTestHarness.        * gnu/testlet/java/io/File/jdk11.java: Likewise.        * gnu/testlet/java/net/Socket/SocketTest.java: Likewise.        * gnu/testlet/java/net/Socket/jdk12.java: Remove SimpleTestHarness        import.        * gnu/testlet/java/net/Socket/jdk13.java: Likewise.        * gnu/testlet/java/net/Socket/jdk13.java: Likewise.
Search with Forms (XEP-0055 Extensibility)
Performance Fixes to TypeAbstractSelect
Improve upstream/downstream triggers handling for cascading functionality. Add additional validation for triggers recursion
Moved PMML unmarshaling and marshaling functionality into IOUtil utility class
Bug 475441 - Investigate any performance issues in plugin model initialization
Extracted the functionality for loading project's properties as the loadProperties() method.
Refactored method name for accuracy
Added a mechanism to re-initialize the object (for performance).
Moved some classes. Restricted some editor functionality to named references only.
Rollback changes generalizing exception ctors; this destroys traceability in the code for which combinations of exceptions are used in the system to produce an error.
[MNGECLIPSE-2136] Improve robustness of Java project configurator
Added new functionality in the inference rule application infrastructure. Completed the PicProc driver.
Added unit test for lookup value UI add/update. Hooked up backend support for lookup value add/update functionality.
A few small improvements to JPEG-2000 decoding performance.
Improve mult-threaded performance of DefaultObjectReferenceManager
"removed unneeded classes, added a bean property handler that retrieves property values from public methods or field if none are declared, extended exporter with more functionality"
[added] SpritePerformanceTest
HTML-50: HTML Form Entry module needs to support Problem Added / Problem Removed functionality added tests and did some slight refactoring
"* Improved ""View"" functionality so CSV-compatible data types (both file-based and in-memory) are viewed in Excel after conversion. * Also significantly refactored code."
adding functionality to add time to positions by intrapolating from next applicable successor and predecessor
improving readability
did some more work on the MongoDB connector. Found some areas to increase its efficiency---need to find out how to solve the 'remove vertex' optimization issue. That will help greatly. Added some more test cases to the TestCaseSuite --- never had test cases for bothEdges...found a bothEdge bug in both Neo4j and Sesame. Added a StringFactory which is a class that pprovides toString implementations for Vertex and Edge--this way others implementing the General Graph Model can rely on these methods to make sure their toStrings look like the others.
Re-organized admin functionality fragments into an admin subpackage
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Mark test as ignored when there's no syntax data for a CTS test * Fixed some checkstyle errors
"TEIID-2627: Added Count(*), IN, IS-NULL, Comparator functionality to the non-indexed columns in Accumulo Store"
Removes the RequiresConfigurationResolution class and it's semantics and adds a new ConfigurationListener method to replace it. All classes using the old functionality updated to the new. Purpose of the change is to avoid ambiguity when resolving configuration data.
"Ticket #1146 - Initial refactoring of ReportService.  Mainly addition of method comments and the deprecation of separate create / update methods in favor of a single new save method.  Removal of unused ""getCurrentEvaluationContext"" functionality.  Addition of ""Run Report"" privilege."
"topic: code enhanced type: functionality, other module: [d3] wpvs description: re enabled support for se-texture provider"
Moved some files in order to make a better distinction of basic functionality and extensions.
Moving in some seam functionality to allow for page scoped beans in form submission.
Completely remade the caching functionality.
"Removed mkpopup command, functionality rolled into /sms give A few other command class tweaks too"
Minor refactor for maven compatibility
* some tcl extensibility added
unit test for performance measurement and benchmarking
Renamed the RrdMessage protobuf classes to a more generic PerformanceData name. Changed RrdConfig so that it always initializes itself by merging the system properties with the contents of rrd-configuration.properties. This eliminates the need for lots of otherwise unnecessary RrdConfig.setProperties(new Properties()) calls that were used to work around side-effects of the old initialization.
Reworked functionality for listing forms * Forms are now contained in per-visit and per-patient lists in a FormConfiguration * FormDescriptor.FREQUENCY is removed * Only per-visit forms appear in 'available forms' in medical chart now
Fix bug 153507: Bogus error when bad data set column referenced in group key In original grouping algorithm Dte creates a temporary computed column using JS expression for every group with interval. In some cases Rhino can?t give clear error message for the error in  this computed column.  Add a class GroupComputedColumn to replace the ComputedColumn with complex JS expression.  The class is sub class of ComputedColumn and contains a Calculator which can do the work of JS expression. New algorithm can give exact error message and have better performance.
"[HER-1762] H3 performance tuning * AbstractFrontier.java     change config and defaults for 'inbound' and 'outbound': allowing any BlockinqQueue bean, of any size, to be specified if desired * **/profile-crawler-beans.cxml     changed commented-out descriptions of defaults to reflect what's used if nothing is specified for 'outbound' and 'inbound'"
SAK-7006 Better UI and performance for uploading files and creating folders. 
improved performance for BeanToArray
New functionality for the demonstration-framework
Additional functionality in BPEL Model for wrapping and moving activities
"Started work on feature that looks up full text documents based on entries' url or doi links. Basic functionality in place, accessible from Tools -> Look up full text document, but needs modules for handling the various publishers' sites."
"STAT-241: improved performance by properly consolidating presence events; added related tests; added option to report against site presence time; added ""average presence time per visit"" to Visits in overview. Requires ""display.users.present=true"" and ""enableSitePresences@org.sakaiproject.sitestats.api.StatsManager=true"" in sakai.properties. Using ""presence.events.log = false"" won't do it."
#NAME?
"BISERVER-5683 - refactored the domain setting on the ModelerWorkspace to detect a legacy model (created without the separate OLAP LogicalTables & LogicalColumns) and silently upConvert to the new model. Also, resets any Measures and Dimensions to their new OLAP instances of the LogicalColumns.   Added Unit tests around this functionality as well as making sure mondrian xml files export without change following this upConvert process."
Some better testing of performance and size when using KryoWrapper in Hazelcast.
More incremental performance improvements to module content handling.
"- Ported to new debugger command APIs (bug# 163623).  This makes DSF build with 3.3 M3, but breaks compatibility with 3.2. - Warnings cleanup."
Improve usability
"- Added an option to toggle the WG flag - Removed old pre-CB 1.1-R6 chest compatibility - Changed priorities for block destroying - Synchronised run() in Queue, as it's called from asynch thread."
SAK-1988 Accessibility--My Profile
Implement simple import functionality.
MAGNOLIA-1551:  - solved by using content2bean per instantiation (performance?) - allow adding pages no having a definition in the repository
"renamed PojoPerformanceTests to PojoPerformanceTest, so that performance tests are run with mvn test"
Merged changes from helios for backward compatibility with graphiti 0.8.2
* ExtractorMultipleRegex.java     remove temporary performance testing code
160985 [api] make functionality of JavaProjectWizardFirstPage API
Improve accuracy of index based binding resolution
Improved global transaction performance. 
Performance - Streamlined event handlers.
"https://jira.jboss.org/jira/browse/JBIDE-4285 - code review - add updateSelection function and reduce ""returns"" - functionality remains the same"
"efficiency update, preparation for multilabel regression"
Added CitiTraders wallet trait compatibility 
Added partial layout functionality and began transition to relative positioning
Fixed other JENKINS-10360  - Added matrix compatibility
Implement core.deltaBaseCacheLimit to improve unpacking performance
Tracking processor stability improvements
tmf: Introduce performance tests to TMF
Added configuration option in archive section which allows to disable gzip before the slave <-> master transfer. It may improve transfer performance in case of win slave and good channel between hosts.
added lookup functionality
"Removed getPageText( String ).  All functionality is now in getPageText( String, int ). Added getPageInfo( String, int ), removed getPageInfo( String )."
Fixed accessibility issues to comply with W3C level 1 standards.
refactored for a better reusability
Added functionality for TBCohort and cqi
XWIKI-7240: Add support for special versions qualifiers and version     ranges     TODO:     * a way to check different versions ranges compatibility
TAJO-1442: Improve Hive Compatibility
"Wired up first SQS-enabled test. Refactored non-vendor-specific logic from NevadoMessage to AbstractMessage. Added string serialization to be able to put entire NevadoMessages into SQS body. Created send, receive, and delete functionality. Wired up simple message acknowledgement logic."
Added functionality for checked and unchecked arguments.
84386    Site Caching Performance Issues
XWIKI-7240: Add support for special versions qualifiers and version ranges TODO: * a way to merge version constraints * a way to check different versions constrains compatibility
FACES-1494 Improve and enhance JSF1.2 <-> JSF2.0 compatibility layer
solver callable is now implemented as a utitily function for better reusability
added test for name enumeration with versioned names.  fixes to implement that functionality.  the final test needs to be uncommented when the new versioning code is checked in and merged with this code.
"JDBC adapter: Performance improvements: Push down distinct-aggregation; implement un-parse of ORDER BY and a few more functions/operators; generate ""table"" rather than ""(SELECT * FROM table)""."
Name changes in order to improve readability and writeability of tests.
"moved from edu.civic.mit.mediacloud to org.mediameter (for readability, if nothing else!)"
Created new orcid-identifier element to allow orcid-id to remain as is for JSON backwards compatibility. Tidied up a load of related oddities.
"PRD-3857 - Performance for golden sample tests. Unless defined otherwise, these tests now run in parallel, and all streams are buffered. Also: gold-output is compared as byte-array before trying an XML compare. In the best case this avoids that we have to parse the two documents."
added conditional and many other performance improvements
added notes about why gae times outaws/s3/perftest/src/test/java/org/jclouds/aws/s3/JCloudsGaePerformanceLiveTest.java
Log more times if logStartupPerformance is enabled
Rollback of accessibility fixes
"Fixes Issue 172 Updated MyLocationOverlay to be clearer in how it implements location and orientation services. The functionality to enable/disable ""follow"" is now separate from enabling/disabling location services."
Finished basic functionality of ObjectArrays.
[PLINK-316] Create static pool of PicketLink STS clients to improve performance of login modules
"Added support for ANSI Color Escape Codes, removed unused IConsoleStyleProvider configurability."
Added functionality to build EntityManagerFactory from META-INF/persistence.xml file.
Added IBM Message Broker mock functionality to Jaxen base code
Modified some codes to improve usability.
fix(multi-instance): improved performance of parallel MI join with high cardinality
Improve readability
"Add ability to pre-filter the phrase filter for a pretty big performance win.  (when intersecting with a sparse filter, the benchmark runs ~40% faster)"
Separate opcontrol and ui functionality in oprofile's event config tab.
"Keep JmxSocketFactory in jrds.probe package, for compatibility with jrdsagent."
* extensibility of current DLTK functionality.
modification to secure EJB methods based on roles; added login and logout functionality; hide buttons/context menus based on roles - rjrjr
"Complete overhaul of the Find API code structure. It is now more clear how it works. The Add API was changed the same way, but it is still nonfunctional via a browser. (used for R API at the moment) Improved functionality of Find API by showing a login/logout box, plus entities that Anonymous may see. So now there is no more 'security lock' for anonymous, while logging in will (probably) allow you to see more. Auth related entities are always hidden. To make this possible, the behaviour of MolgenisServiceAuthenticationHelper was changed to only print small pieces of HTML. Harmonized use of password string in requests via static variable."
Tests added for maven performance
Issue 597: Export database as JSON. Fixed backwards compatibility issue.
"Got rid of quite a few (40 or more) warnings from Eclipse 3.1, mostly having to do with missing serialVersionUID static fields in classes implementing Serializable.  Used Eclipse's serialVersionUID ""quick fix"" generator to calculate the values.  As such, there should be no noticeable behavioral effect of this change except for getting rid of nearly all warnings in Eclipse.  Serialization version compatibility should have been kept so users should see no difference."
"mad performance fixes. this reduced the time to handle a message by ~50%. thank you, profiler #winning"
Replace DBCP with HikariCP for better performance
Re-write Class-Path support for better spec complicance and simplicity
JS Operation performance
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
CLOUDSTACK-8537 refactor registerSSHKeyPair() for legibility and testability reasons
Compatibility with Microsoft ADFS 2.0
RPM: createrepo import form page functionality
Refactored filters for performance tuning.
Move some tests to the client module that don't need a broker to validate the functionality. 
Tweaks and fixes for correctness and performance.
NXP-5305: keep compatibility on sort info API for new PageProvider
"Lots of tests for metadata classes, and implement corresponding functionality in mondrian driver. Review org.olap4j.type package, and remove/hide several methods. Add API for creating validator and validating an MDX parse tree. Test that non-unique axis names cause a validation error."
HBASE-3006 Reading compressed HFile blocks causes way too many DFS RPC calls severly impacting performance--Revert mistaken over commit
"Updated onebusaway-gtfs to 1.0.4, with api changes to support: - wheelchair accessibility information - better missing value handling"
Git History View: cleanup and usability
Reviewed groovy script message validation functionality
"Added Functionality: mapping to setter methods, embedded dto objects Added More Unit Tests"
1. Initial fix for [Bug 174936] [Scanner Discovery] Per file scanner discovery is broken with the New Project Model functionality 2. Fix for [Bug 176301] Imported executables no longer recognized as binaries 3. Other bug-fixes
Further along with the JMX support.  * Added a dynamic MBean for getting the Neo4j configuration parameters.  * Added an MBean for information about the Neo4j Kernel.  * Converted all MXBeans to MBeans for Java5 compatibility.
Pull all mirgation functionality into StoreMigrator
1. Fix for the [Bug 175675] ClassCastException when parsing a file 2. Path Entry Variable Manager functionality is made as a wrapper over the Workspace-level Cdt Variables (aka Build Macros) functionality 3. bug-fixes
Fix bugzilla bug 191445 : [Scripting usability] Expressions in report design should use a new syntax to differentiate them from static strings.
Bug 376011 - [accessibility] Eclipse 4.2 tab traversal needs refining
"Bug 117505, Bug 120652, Bug 122053.  This fixes multiple problems having to do with the activation of handlers representing legacy actions.  Now: action set handlers are only active when the corresponding action set is active (duh!), and viewer contributions are only active when the corresponding menu is showing.  For bonus credit: performance improved, delegates are created per window, workbench window now has a slave handler service.  Oh, and world peace.  Word out."
Renamed PmsConfiguration.getDisableTranscoding() to PmsConfiguration.isDisableTranscoding() for correctness
[105190] Severe performance problem on resource change
More performance checks
"fix Annotator dependency resolving, refactor names for readability"
Reworked the metadata provider functionality * Metadata providers are now called bundles * CoreMetadataInstaller is replaced by a single install() method and a set of deploy handlers for different object classes * Added Constructors which is used to create unpersisted object instances which are persisted by install()
"moved most of the functionality into AbstractInteractive2DViewer. AbstractInteractiveExample only contains the painter thread, which calls the abstract paint() method to do it's work."
TESB-9116 - finalize replacing of old SAM REST-like API on sam-server-war with new SAM REST API on JAX-RS service  - backward compatibility downgrade aggregated flows response  + add check alive context
"Improved performances and precision of the occurrences finder, which will improve: - the refactoring - the hover - the occurrence highlighter - the search"
Extract interface to ease the testability
improve toString performance
increase writer performance
1. End point modification functionality complete.  2. Test coverage measurement has been incorporated with ODEDeployer. 
"More API cleanup inside the provisioning code. Separated the MINA-specific code from the AsyncBasicDetector code. There is no change in functionality here, just refactoring."
Renaming performance tests.
Bug 366522 [Compatibility] Failures in MultiEditorTestSuite
Refactor large amounts of code. Improved readability and maintainability. Split last friends generation phases and serialization
"Renamed MapWordCountAggregationPerformanceTest, since it's no JUnit test"
Updating AbstractResource classes to properly swap out link properties to Resource properties as needed.  This significantly improves performance by utilizing cached instances that may exist.  Previous code required an HTTPS call always.
"Hazelcast Client performance enhancements:  - Do not flush the socket outputstream if you don't have to  - ParallelExecutor is costly, slows down client executions on the server side        Documentation updates"
"simplified code by moving a chunk of the functionality up into the superclass, MutableNumber. Still important that setValue turns the Number into the correct type however, so that method may not go up into the superclass"
Added more tests for raster and field functionality.
Add delete and exists functionality for our new data
fixed #31 flex3 compatibility fixed some as3 and mxml wizard bugs note: this commit changes config names
Changed behaviour in LuceneIndex#query() to not throw exception if modifications has been made since it goes against common sense. Instead it strives to return correct answers if not specifically told not to do that (via QueryContext#tradeCorrectnessForSpeed()).
Added WebSocket functionality stubs
Continued implementation of new functionality to list student's evaluations
Renamed getPortletMap to getPOPPortletMap for better accuracy.
remove deprecated visibility check code and one of the validateAccessibility() methods from extension
"Converted the model manager and back-end types to use batching, should greatly improve HBase performance). Existing inMemory set objects now pull everything in the set at once rather than one by one as well. You may wish to clean up your persist directories to speed things up by setting HBaseStorage.PERSIST and TmpFileStorage.PERSIST to false for one run of the tests."
#NAME?
Big code refactoring. Added shrink/expand thread functionality
small performance improvement: shortcut to skip FormattingInfo if it is the no-op default instance
[GEOT-3394] ContentFeatureCollection.isEmpty(): improved performance using a query that returns at most 1 result instead of checking if size() == 0
"[changed] Texture now takes a TextureData that's quite a bit more comprehensive :D [changed] Texture.invalidateAllTextures can now use an AssetManager to reload texture asynchronously, see AssetManagerTest.  [changed] BitmapFont now takes a BitmapFontData that holds all non-GL information.  [changed] mip map generation is now performed by a class called MipMapGenerator instead of having the functionality inside of Texture.  [changed] TextureAtlas now takes a TextureAtlasData that holds all non-GL information. [added] AssetManager and a shitton of other stuff. [added] AssetManagerTest"
reorganized test classes to separate expensive syntax/parsing tests from functionality tests fixed Rascal JUnit runner test reporting removed dead code
Refactoring for multi-tenant compatibility
Minor rename of method in PerformanceStateContainer
Teleport rewrite to improve stability
Issue 695: Implemented getPerformanceStatistics for a date range
ISPN-2449: Rename the newly-introduced (5.2.x) Loader/Store Configuration builders so that backwards compatibility is not compromised
LOG4J2-1179 modified and added benchmarks to compare parameterized message performance
"Simplified tracking of exporters, tools, devices and component providers by using DependencyManager's bundle adapter functionality. Removes the need for such functionality in our own code. Some additional code cleanups."
Moving common functionality up to the base class
"Start of implementaton of NoGo time slider functionality, front and back end"
more improvements on the jterm related functionality
Synchronization works!! Need ways to test/show the effectiveness of synchronization in the next version
performance of JQMSelect.indexOf() optimized.
ACCUMULO-259 - interface tweak + insecure implementations. Need to do testing with insecures to ensure functionality of all zookeeper implementations independant from one another
ItEr21S04ArquitecturaServidorItEr20S04: Refactoring tests to increase readability.
Largely fixes CAY-888: CM Usability: Object Select Query Improvements.
Changed aggregate status view to site status view Moved site status config from db to xml Added indexes to new foreign keys for performance
Moved socket/tcp related functionality to tcp package
Refactor equivalence configuration for readability
major improvements in functionality:  - ability to serialize anything implementing Writable - ability to handle special symbols
[PLAT-1658] Enhance usability of examples
Bulk resolvers (for performance)
Improve SABRHaganVolatility numerical stability close to ATM. Changed IborIndex to include Convention.
1. Build System Backward Compatibility support 2. Bug-fixes
[DROOLS-875] optimize KieSession creation performances
"topic: code enhanced type: functionality, other module: [d3] wpvs description: added coverage api for textures"
Regex utilities (alarms) refactored for reusability
The DockableDisplayer has now more flexibility how to layout its Dockable and DockTitle. That should be helpful when writing a subclass.
"Refactor: removing reSetMaximum method, this removes some not needed loops so it increases the efficiency and the code is understandable"
"changed Messages class back to old naming for compatibility reasons, added package-info"
"change tag to template in many APIs, optimize the template load performance"
"fix PerformanceTest timout for hudson, clearly state mode"
Improve #41 (Stability API improvement)
[BACKLOG-6745] - Enhance performance logging [BACKLOG-7929] - Auto-scheduling on server side
Refactored: test readability
rewriting ContainerStateMonitor to use MSC 11x StabilityMonitor
Moving to Jetty8 for Java6 compatibility.
ROO-2370: Performance enhancements relating to MemberDetailsScanner and TypeLocationServiceImpl
Additional functionality
"    adds support for dynamic effectors, where an effector can be added to an entity after it is live;     for simplicity, this commit makes EntityInternal extend EntityLocal -- not sure if this will cause problems, but seems reasonable     (assumption is that the ""internal"" access should only happen in the JVM where it is managed, but TBC...);     also adjusts DynamicTasks to use the term ""queue"" instead of ""add"" and remove the confusing ""autoqueueing"" behaviour and other unnecessary classes;     see EffectorTaskTest for illustration of how tasks can be built and nested"
Add additional test for functionality and code coverage to VideoPlayerKeyCodeHandler
1) Refactor location of TimeBean 2) Create new DateLibrary with common date functionality 3) Make date library unit test work in any timezone
Performance enhancements for very large workspaces
Updated so that all tests are now passing. Basic rules functionality now available in the RuleBasedIbanValidator.
HBASE-1286 Thrift should support next(nbRow) like functionality
Set BsonProvider as default provider (+compatibility)
"DDF-14: Merged functionality from xacmlprocessor and xacmlapi into xacmlrealm, removed PDP API."
Big CQ Result: Created a DiskBufferDriver that can be used as custom query result. Changed GDMS format with backward compatibility. Driver has been refactored to obtain a library that is used on the DiskBufferDriver
Extract some logic to methods in DefaultComparator to improve readability
Performance turnning:make storing data more fast
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer (Introduced Factory mechanism for AfterViewContent request/response)
Changes ToolUserDevice and ToolUserAction to be non-embedded so that looking glass performance isn't tied to the ToolUser.
"% heavy API changes (after re-reading the RFC and discussing with a co-worker, I found out that senders and receivers need not be associated - in fact, they may never be!) - removed the RtpParticipantContext concept + added RtpParticipantInfo (previous RtpParticipant) % RtpParticipant is now the previous RtpParticipantContext + ParticipantDatabase added (helps factoring out important logic and testability) % bumped version up to 0.4 (due to the high amount of API and internal changes)"
Renaming method for better readability.
"Allow jobs associated only through fingerprinted files to appear in the dependency graph. This functionality is enabled through a feature flag, hudson.tasks.Fingerprinter.enableFingerprintsInDependencyGraph, which is off by default."
add MailSender and related functionality
"- Added method to FileUtils: extractFilesFromZip(inputZip, outputFolder)   This method returns a List<File> with all extracted files AND folders.   NOTE: this is just a proposal. It could return the ""parent"" folder of the extracted files as well.    Please let me know, what you'd prefer! - modified/""improved""/bugfixed and renamed createSimpleZipFile(...) in FileUtils (former ""createZipFile(...)"") - added junit test case for zip functionality. - adjusted classes that are using the zip methods (MsgTextMigrate)."
Performance: DependencyCollector now caches the results of some reflection calls. This avoid a lot of calls to the (slow) reflection API.
"rename edb-core-tests, separate unit- and performance-tests"
HIVE-11354 HPL/SQL extending compatibility with Transact-SQL (Dmitry Tolpeko via gates)
Updates to B14.  Mainly affects DebugBridge stability
Improved performance of 3D analysis
[Shapes] Improve configurability
Added new methods to Jean-Yves iteration performance test:
removed custom code that duplicates functionality of guava fallbacks
minor performance enhancements: calc num of tweets + adjust ratelimit in Twitter4j;; now urlEntries contains all URLs; mark tweet as spam if urlCleaner contains them; if url not resolved -> use url itself as title
WIP agent and push functionality
Added FlowdockTestCase for some code reusability.
more heartbeat functionality on the server side
Database functionality appears to be finished and working
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Rename IRC Event Listener into Notifications Event Listener to make way for other IRC Event Listeners
"Result of last night's hack session: Jangaroo IDEA 9 plugins have about the same functionality and bugs as their IDEA 8 counterparts! * Found out that in IDEA 9, there still is a FacetImporter (only in another package) and reverted to implementing that instead of MavenImporter. * Added post-Maven-import tasks to patch Jangaroo libraries so that IDEA 9 finds their source and let Jangaroo compiler output contribute to IDEA artefacts. Also fixed that not only actual compiler output, but also resources are copied. * Fixed several NPE problems."
Bugzilla 147222 [Regression][Compatibility]Exception while running the old report
Total rewrite of the isGATKLite() functionality with help of Khalid/David.  PluginManager was not working for us.
Restore dependency-tools API compatibility
Indexing performance improvements.
Refactored theme deletion to clear cache correctly and increase performance. Corrected cascading on Theme entity.
Reworked 'create patient' functionality * Patients can be created from existing persons * Similiar patients listed on create patient form * Create patient button removed from Intake app
Created ContainerCreationException which delivers the error messages to the client. Added performance logging. Validation performance might be a concern. Will keep the design such that we can lazily validate if desired.
HBASE-576 Investigate IPC performance; fix miscommit that made for broken build
Improve performance of ReceiveCommits for repos with many refs
added task tracking and logging functionality
CAMEL-7191: Disable load performance statistics by default. Thanks to Preben Asumussen for the patch.
"added FluentPipeline, renamed AggregatorPipe to AggregatePipe, abstracted CollectionFilterPipe and GraphElementPipe. Really setting the stage to completely migrate all functionality out of Gremlin."
"Added String and StringPrefix grouping unit types, the String grouping unit type is compatibility with text grouping."
"Fixing incorrect use of RowLocker in IndexUpdater: the return value should be checked to know if the lock has been obtained.  * introduced a blocking RowLocker method which retries until the lock can be obtained (with some maximum timeout)  * IndexUpdater skips pushing the message if the lock cannot be obtained within one minute.  * introduced RowLockerMetrics to keep track of the frequency of lock contentions (= failures to take a lock because the row is already locked)  * use a common RowLocker instance in the lily-server (in order to have a single corresponding metrics instance). For the Kauri-wiring this required the introduction of a RowLocker interface. Meanwhile noticed that the lock-contentions (due to indexupdater taking a lock to push a message) are not really a rare thing (at least when running the tester & mbox tools), i.e. not only in the indexupdater but also in the client apps, likely leading to performance degration due to operations that need to be retried."
Restore legacy resources/attributes for better compatibility with older versions.
Functionality updated.
o Made changes so that one application using constretto was able to be ported to this trunk without any broken functionality.. So now the new constretto actually are feature complete in regards to what was supported in staged-spring :)
"[CXF-6267]: splitted policy dependent functionality, renamed utility class"
"Replaced the concept of CacheWrapper with Service and Traits * The Service is singleton object (only once on each slave at every moment) which provides traits, using the @ProvideTrait annotation * Traits implement some functionality, not specific to cache * Stages can use @InjectTrait to get the instance of trait provided by the service, or call slaveState.getTrait(MyTrait.class) * Cache traits are using methods from JSR-107 Cache spec"
Improve performance of some buffer operations and ensure unicode support
Added support for nested locality-based modules; bugfix in modularity part
small refactorings to improve code readability
"Got the ""another pub"" button and shake working. Had to break the integration tests to use the compatibility libraries."
Fix STS compatibility issues; other improvements
fixed performance/scalability problems with dependency tree
Implemented ERRAI-723: Add gatekeeper-like functionality to IOC
Rename the directory for readability.
Maven compatibility
"added method getObjectToSynchronizeOn /** 	 * When loading a page for the first time it is synchonized for caching and performance reasons. 	 * Overrid this method if you do not want the whole instance of your servlet to be synchronized."
Refactored SailGraph and LinkedDataSailGraph for compatibility with manageable thread-local connections.  This should be a definitive fix to the 'danging connections' issue.
Rework the isApproved method to improve performance.
Improves performance of bulk deletion.
Fixes #1656 - Improve configurability of ConnectionPools.
rename OpenEditorTestSetup to PerformanceTestSetup
maven pom hiearchy refactoring selenium version upgrade better exception throwing on page object loading package refactoring basic carousel functionality w/ tests
Completed functionality for the execute method of FormCommandAction.java Updated IncomingMessageParser to accept new request string format.
"Add support for ""CacheMaxSizePolicy"" in ""CacheEvictionConfig"" - fix for issue #5180 (Backward compatibility of eviction configuration for cache is broken)"
altered path of VersionedDefaultHandler to same path prior earlier movement for better backwardscompatibility (before a change to config.xml in WEB-INF was necessary)
added a performance project for debugging
Importer performance fixes
Working on functionality of form for showDetails.jsp
"Move datasetdeleter to omx-core, is not importer functionality"
SAM-1701: Performance regression from grading attachment functionality
Refactor index functionality into abstract base class where appropriate
"Revert ""build: Fix build performance regression caused by git describe"""
"liferay-dm-info-viewer-issues-2: Refactored classes and properties to enable compatibility with Liferay Portal 6.1 EE GA2 (6.1.20) patch ""plugin-deployment-1-6120""."
"Updated to SServer v13 & JRE1.6. Not implemented functionality of V13, it just parses the information and doesnt crash."
improving tests reliability and speed (work in progress)
NXP-6054: move locking to a separate thread for strict correctness
* Hacked to compile. Can begin restoring old and building new functionality. * Added UIViewAction
Added utility functionality for generation of records using abstract syntax of the OO AST
Implemented idle timeout functionality for streams.
Added Objectify performance sample.
Issue #1404. WAL tests and performance improvement.
performance improvements
https://jira.jboss.org/jira/browse/JBIDE-5930 main functionality was added only tests and demos remain.
Switched the managers in the handle object architecture to inherit some common functionality.  Added events to CommandImageManager.
[FPR-21] Provide HttpService functionality in Tomcat
Cleaned up the scalability test a bit
NOJIRA first codebase merge for true configurability in app layer.
JBIDE-11217: present verbose mode functionality in Forge JBT/JBDS Tooling
- Summary: Fix Bugzilla Bug 144199.[Accessibility] Can't use keyboard to set focus on list cells of dataset parameter binding dialog
Refactored code to address performance and reliability issues
Basic EJB home and BMP functionality
"Now supporting configurability for other Google charts end point URLs (e.g. JFreeChart Eastwood Servlet), part 2."
"Code clean, performance improvements"
Performance: Improve server-side caching of artist list.
#POULPE-100  * Improved readability due to using additional DTO + Domain Logic class  * Removed unneeded methods
A few minor tweaks to slightly enhance performance
Modifying grammar to throw exceptions when 'assert' is used as an identifier and JDK 1.4 compatibility is enabled
"[MOD] Performance stress, refactoring"
Tool-chain modification functionality fixes
restructuring compatibility tests (so no more bizarre npe will be raised during test
"Changes to profile download code: * Refactored class to improve performance and use a queue. * Added ""unknown"" image."
"Work on loan arrears aging fix for story 2397, issue 2645. * tests added here demonstrate the use of the ""time machine"" functionality in integration tests to create a loan, move time forward and make payments so that a loan can be overdue (or not) * test cleanup * eliminated old tests * added new tests with time manipulation to cover cases exercised in old tests."
some small changes to improve bootstrap performance.
Implemented functionality to send a message to a temp actor in a remote ActorSystem (provided you have the ActorRef).
Minor code clean up for readability.
[JENKINS-39414] - Stop messing around with the compatibility breakage and just fix it
added update and delete functionality to task
Tune render performance
Performance improvements
[CXF-4158] - Generate a new ID for a renewed SAML token + Added functionality to test a received AppliesTo address against the audience restriction URI.
Handle Collect and Reject as traceability impacting iterators
Fixed bug 277864: Make ACCESSIBILITY_PREFERENCE_PAGE help context id API
"Code clean, validation performance improvements"
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#getMetadataBuildingOptions()
bug 148079 - Implement content assist functionality for the plugin.xml source editor
" * Protecting all consumer-related methods with @EnforceConsumer  * Modifying consumer interceptor to only throw a 403 if the consumer exists, otherwise throw a 404  * Adding i18n support to exceptions thrown in consumer interceptor  * Updating unit tests and cucumber tests to reflect new functionality"
Added Repec importer. Added OpenDocument spreadsheet export similar to OOo calc. Several refactorings that don't change functionality.
Refactoring almost done. Functionality complete.
URI tests test actually java.net.URI compatibility. 
Bug 265198: [target] make sure we warn about forward compatibility https://bugs.eclipse.org/bugs/show_bug.cgi?id=265198
Further filled out Manta job functionality.
Added a ton of functionality. Should be ready for a release within a couple of days.
work on integration testing and search functionality
"making the memory device a more general buffered device, collapsing file/memory device functionality into a single entity"
Cleanup: trying to improve readability of test
"Rename method, Improve efficiency of digest(). Collaboration works with Tatu Saloranta"
performance update
CSPACE-753: Added item term search functionality to Person and Organization services.
Improve the default redirect handler robustness and tests
general stability and quality improvments
Improved functionality.
SQLCompletion: improved performance  * added caching of the SQLToken list (cached when already parsed once).
refactoring for maintainability; fix alignment of elements
"CSPACE-2558,CSPACE-2556: When returning lists of authority references (terms used) within a record, the sourceField name is once again correct for value instances of singly repeatable fields, rather than reflecting the parent field's name.  This check-in assumes one level of repeatability (a parent field with 0-n child fields of the same name and type) and will require revision for complex, or nested, repeatability, but also lays the groundwork for such support."
improved draw performance by excluding edges not in visible area and excluding nodes at all
issue #56 major structural changes for better reusability of the step modules
SONAR-6068 Improve performance of FileSystem query operation
lots of work on adding multi-index functionality to Gremlin. This is Blueprints 0.2.1-SNAPSHOT propagating up the stack. These new functions are experimental and may change.
Improved internal design and value compatibility logic.
Complex optimized and export functionality added.
Centralized separator characters Moved namespace functionality to bootstrap only introduced separate unique class namer utility class
"DDF-14: Merged functionality from xacmlprocessor and xacmlapi into xacmlrealm, removed PDP API."
ChunkReloader is fixed. Code refactoring to help to add backward compatibility with 1.9.2
Generalized some RippleList functionality previously in the Sesame implementation.  Added type-checking to RdfPredicateMapping to avoid ClassCastExceptions.
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#buildMapping(Metadata)
Fix issues of compatibility with Minecraft 1.9.
update for improved performance
Add methods which consume json and do the same thing. Duplicate functionality of /rest/guests service to /rest/guests/guest
"Update StreetLocation to take into account parallel edges, StreetTraversalPermissions, and wheelchair accessibility (patch from flaktack)"
"NetCDF writing optimization stage 1:  - zero-copy expression values reading and netcdf writing - bye-bye netcdf-generator module and all its usages - no more expression values handling in DAO and Assay class - ArrayDesign objects now contain inverse map from DE accessions and names to their IDs - AtlasUnloader functionality moved to loader, no need for two separate modules here - AtlasLoader correctly cleans up old NetCDFs on experiment reloads "
386278 enforce BREE and compiler target compatibility
improved float/double parse performance.
CASC-230 Call HttpServletRequest#logout() via Reflection to Improve Backwards Compatibility with Spring Security
#NAME?
"added ""add pet"" functionality to pet clinic"
ROO-2083: Boost performance of gwt setup command - improve GwtOperationsImpl
"Add support for dropout on input layer, can lead to higher accuracy."
"rename BdbUriUniqFilter.forgetSchemeHost() to forgetAllSchemeAuthorityMatching(), improve performance"
FACES-1494 Improve and enhance JSF1.2 <-> JSF2.0 compatibility layer (Mojarra InjectionProvider)
Pulled out gobs of Sprite/Animation functionality into AbstractMedia. Pulled out gobs of SpriteManager/AnimationManager functionality into   AbstractMediaManager. The big change: sprites can have their render order fine-tuned like animations.
HIVE-6012: restore backward compatibility of arithmetic operations (reviewed by Gunther/Sergey)
"Added back a FactionsBlockListener.playerCanBuildDestroyBlock() method which references Location instead of Block, mainly for backwards compatibility"
Performance optimizations for Genotype field decoding for GT field
core: Allow deployment of HE on clusters with compatibility less than 4.0
"Added BasicManagedDataSource, extending BasicDataSource. Also improved extensibility of BasicDataSource by encapsulating methods to create object pool, connection factory and datasource instance previously embedded in createDataSource."
Refactor commands to make use of refactored code + testability improvements
Build refactoring to add more robustness - Add full build at the beginning - Wait for full build to typecheck opened file - More robustness in lazyLoading (replace synchronization by flags)
added more flexibility for socket bind
"a bit of code refactoring, moving common image and video recording functionality to base class."
Removed module tr.runtime.xml-testbed-factory and moved its functionality to tr.iwsn-cmdline module
[ModelCompatibility] Improve compatibility checking
Fix (again) compatibility of test DatabaseUtilsTest with Oracle
Renamed PerformanceState to PerformanceStats
TU39.2: Implement set parent functionality on drag-n-drop event
Scalable performance work - ask Kim for instructions for the time being.  Doc forthcoming.
WICKET-5178 StopPropagation functionality on link is broken WICKET-5093 The event listener in Wicket.Ajax.ajax() should not return the value of attrs.ad (allowDefault)
Domain model is fixed to match the API v1.1 remaining parts of shared ip functionality is removed
EMBRYO-29: Dynamic form functionality for writing Voyage plan in place. 
Re-try functionality
added functionality for the petclinic jpa test
Move some methods and/or classes around. (Performance has become Statistics)
"More work in progress. Moved converters out of layouts since they might be reused. Created FileManagers so multiple appenders can share the same file. Added locking and buffering to FileAppender. Added performance test to compare Log4j 1.2, Logback and Log4j 2.0 file appenders."
Completing initial CryptoProvider functionality
"Can now add performance-tweaking properties to the database hosted by the server. It uses the same neo4j.properties file as the embedded version, but you need to add a property: org.neo4j.server.db.tuning.properties into the neo4j-server.properties file."
"1) Refactor block indices into block trip indices for better performance (this will require a bundle rebuild: use -skipTo block_indices to reuse what you've already got) 2) Flesh out service alert code, with: 2a) Some support in the onebusaway-webapp admin interface for creating simple service alerts 2b) Very simple backend support (currently, no serialization) 2c) Api support (currently, attached to tripStatus elements)"
[FIN-113] HibernateSecurityMaster matches new SecurityMaster API. Still needs the additional functionality for version/correction data.
refactoring: moving some common functionality to JGitCommon
Support multi-dimensional arrays and returning arrays of primitive server types as wrapped java Objects so that NULL values can be detected.  Backwards compatibility is provided using the compatible=8.2 URL option to return arrays of primitive types.
Abstract common functionality and officially support non-forked runs.
broke out pkg private classes from TypeDescriptor to improve manageability and testability
CAY-2355 Project compatibility module can't handle standalone data maps   + make XMLDataMapLoader stateless
Adding compatibility on analitcs with drools maven structure 
decoupled core instagram functionality from authentication and signing to support unauthenticate proxy use cases
added more tests around scheduled date generation and hooked the use of this code to the methods on customer and savings accounts that are used by the batch job. The purpose of this is to improve the performance of the batch job. see http://www.mifos.org/developers/wiki/ScalabilityAndArchitectureDiscussion#batch-jobs
"Fixes for handling Arrays, had to change index creation from event-based to synchronous for simplicity's sake."
Really fix backwards compatibility for ejbd. The order of read and write can only ever be changed 'after' the version has been written. NOTE: The best place to append new features is in org.apache.openejb.client.EJBRequest.Body
Reorganized packages for compatibility
Added some gui functionality and fine tuning.
srmclient: add ability to print performance info patch adds options to the client which enables printing of the start and end time in epoc for complete client invocation. It also makes use of dryrun option for get and put clients for dry run invocation of srmcp. Patch also annotates some of the client code with Override. 
Use local SonarQube ZIP in performance and upgrade tests
implemented html report generation functionality for CollectionReports (DisjointLabelsViolations)
"patientsummary:  PS-17 and PS-18 - add in backwards compatibility with legacy version of the module, but make it optionally enabled based on a global property.  Also move a few files around into appropriate packages."
Rework compatibility action bar menu handling to act like native.
increasing robustness in case there are many messages with the same title
"inventory sync performance (part 4): the agent only cares about certain modifications made to the resource (as opposed to every single entityManager.merge(Resource) call); although it's important to sync when plugin configurations are updated, it's unnecessary here because plugin config updates are synchronous and require the agent to be up at the time the update is made (otherwise the update fails); further optimize the sync process by determining whether or not measurement schedules were able to be sent down to the various agents live, and ONLY if the agent was DOWN or could not be contacted do we want to mark the corresponding resources as needing sync;"
"HIVE-15520: Improve the sum performance for Range based window (Aihua Xu, reviewed by Yongzhi Chen)"
Fix instability in GitRepositoriesViewBranchHandlingTest
Improve CSV data import performance
"getting rid of ""plus"" functionality; refactoring options/configuration api; adding new Component module type to support sub-components as replacement for previous plus approach"
"Bug 428786 - [1.8][compiler] Inference needs to compute the ""ground target type"" when reducing a lambda compatibility constraint"
"251469, 251482 - Incorporated Carolyn's patch to not return the name as a description. Also took out workarounds for Accessibility Verifier, as they appear to be bugs in the verifier or Cocoa. Finally, took out large chunks of code that were either unnecessary or belonged in a base class, primarily for Composites."
Fixing JPA performance test.
Updated ADLSerialiser and some tests to match changes in AOM (ArchetypeTerm). Also refactored and commented some spots to increase readability.
Fix Project 1149 - #12907 Improve the performance of BIRTActionRenderer.
Improved performance of ChunkReloader
added options file (saves the selected folder) and minor stability improvements
ISPN-856 Fix compatibility issues of Query module with Lucene 3 and Hibernate Search 3.3.0
Updated for Cascading 2.0 compatibility
made the reverse id's use long values even with a performance impact
"Huge performance improvement of BackCallRule, SkipCallRule and MustUseRule"
"Common,B,CheckBoxTree,Fixed the performance issue while batch selecting nodes in CheckBoxTree with digIn mode,,no"
"HSEARCH-408 Improve execution speed of functional tests: disabled some performance-only tests, reduced size of data generated in some bigger functional tests."
"add new finders, add indices to increase performance; included TestAll in test mask"
Better readability
"Moved ATNA audit functionality, which is not XDS specific, from commons-ihe-xds to commons-ihe-ws (as preparation for XCPD)"
#NAME?
[DS-707] Multithreaded correctness
Refactored classes and menus to improve usability
minor tweaks to JcloudsLocation to restore the extensibility needed for interoute in some apps
Implemented a database level storage cache for Titan that significantly increases warm cache performance. Added tests for the cache.
increase robustness of storage commit implementation
 #26 improve performance when switching band members
Refactor the implementation of the XMLRPC Confluence API (XWIKI-1617) True Interoperability with Confluence (XWIKI-1616) Proper exception handling for XML-RPC code (XWIKI-1618)
Improve performance of fat jar loading
Adding test and heartbeat functionality.  
SONARJAVA-1291 Check accessibility from callsite and not from owner
Improved performance of visit-all-events query
"Separate the validation and the import functionality from each other. Create a validation, back and import button."
topic: code enhanced type: functionality module: other description: MDEditor - support of limited number of fields in multiple input field component
Move common test functionality to helper classes
Implemented ListenerWrapperEventFilter to carry Listener to other members without breaking backward compatibility
* regenerated AST hierarchy with new clone methods * AbstractAST has utility methods for cloning * extend functionality needed clones of ASTs to avoid sharing a cache between an original function application and an extended function application.
removed deprecated functionality
Closes OOZIE-90 coord rerun add backward compatibility
Feature ready with timeout functionality. Not fully tested and documented yet.
"XRENDERING-187: Implement a Rendering Compatibility Test Suite * Ignore TeX tests since they produce a wrong output, see XRENDERING-198"
 * added log record cursor for ascending/descending iteration  * replaced query result file format (file buffer list to logstorage file)  * renamed sort2/stats2/timechart2 to sort/stats/timechart  * refactored logstorage file package  * logstorage file now support non-compressed format for performance  * offset and limit type is changed to 'long' type
moved TogglzApplicationContextBinderApplicationListener to togglz-spring-core module to increase usability
"The ""Export to external SQL DB"" functionality is now fully implemented.  The jabref.sql packages contains utility functions that facilitate exporting to either a file or existing SQL database."
"[PLAT-2916, PLAT-2917. PLAT-2918, PLAT-2919] Fixing and improving batch functionality"
Add query write functionality for all years
Finished buffer main functionality. #63 related
exploring stability of shutdown routine
Fixed text in TableScanner to properly display in a Label instead of a TextPane. Added setSelectedCamera to CameraPanel. Refactored CameraView to store scaled and unscaled selections. Increases accuracy and reduces complexity. Removed calibration mode from the CameraView popup menu. This is now done in the CameraConfigurationWizard. Started work on calibration mode in camera wizard.
Added Log4j XML configurability to BootStrapper.
Bug 323531 [Compatibility] <enabledWhen> definitions for handlers are always ignored
1. isCdtProjectCreating state functionality and tests
"Added parametrisation for: width/height of graph, optional vertex labeling with full Id. Refactored project for easier testability."
Move functionality to specify service endpoint location to the bus
Created logo remove functionality
SWITCHYARD-361 update console to use new admin functionality
Fixed stepper. Some performance fixes too.
#NAME?
"Many changes in Waiter.java and Searcher.java that result in significant performance gains, also other minor changes have been made to other classes"
Add compatibility-v7-appcompat
moved tracker functionality from LiveDataResource to TrackerResouce
DATADOC-24 - Refactored SimpleParameterAccessor to improve usability.
"[ISPN-500] (Improve Lucene's performance by using SKIP_LOCKING, SKIP_REMOTE_LOOKUP and batching) - trunk"
"added split.stop(tag) functionality, MonitoringInterceptor changed accordingly"
Updated Tasks classes in Desktop App. Updated Collection Request functionality so approver selects files.
CDH-11092: Improve Solr Sink performance in SolrCloud mode by adding support for proper batching
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#preferBasicCompositeIds
New Functionality
Per default use simple type cast instead of a char codec when converting from byte to char and back in order to reduce intermediate buffer copying and improve performance
Removed link coalesce functionality.
Enabling some functionality after refactoring.
"Massive post list performance improvement (no longer ""streams"" in posts, just displays them in batches of 25)"
Change name of sub-directory of 'target' where generated makefile is stored. No longer support the target configuration being used to determine the output file. Split cleanUp method for readability. Support APKLIB with either static or shared library when ndkFinalLibraryName is configured.
by Andrey and Artem to improve performance on index lookup with operators > and <
Bug 61446.  Improve opening editor performance.  Avoids updating listeners when not processing; avoids creating unnecessary iterators and collections; and avoids unnecessary copying.
Transaction cache performance enhancement.
"Allow mutable object ids, improving commit parsing performance"
JUnit compatibility: multiple test methods (walking skeleton)
Enhanced robustness of ExcelRowMapper
TEIID-346 adding in a compatibility layer with 5.5 connectors.
" Extend AUC threshold criteria to maximum_F1, maximum_Accuracy, maximum_Precision, maximum_Recall, maximum_Specificity, minimize_max_per_class_Error"
Moved functionality to folder reading class.
Core functionality done
"http://jira.sakaiproject.org/jira/browse/EVALSYS-544 This ending up being the most incredible fixup in the history of the project, it required no less than modification of 3 tables, new methods in all layers, a completely new test class with test methods, a rewrite of about 3 logic layer methods, and fixes in about 25 files total, and all for functionality which I am pretty sure is not being used at any of the piloting institutions.... hooray"
"clean api refactor:  - refactored AbstractAction to support ""clean api"" parameters and http parameters at the same time  - refactored ""clean api"" actions NodesInfo, NodesStats, and State to match with new functionality in AbstractAction  - removed some obsolete methods and members from AbstractAction"
Added support for old robot builds. Renamed RobotResultArchiver to RobotPublisher for backwards compatibility. Removed redundant RobotResultAction. Added support for critical testcases. Fixed directory problem with using ant GLOB patterns. Modified views to be clearer.
Changes for compatibility with ES 2.0/2.x
Initial compatibility update for CB 1.3.1
Moved MethodLogger and added base functionality for the Action Logger.
"PERFFORJ-10: Usability enhancements to StopWatch class, including lap method and LogginStopWatch and subclasses."
"Cleanup of VariantEval, diatribe about performance problems with StateKey"
some minor performance improvements
PRD-4242: Refactoring as subreport and crosstab share common functionality
"Latest row filtering model, with find functionality"
Delegating loader now prioritizes the FileLoader over a ClasspathLoader. Removed another regex from LexerImpl for a performance increase
Performance tests
Fix backwards compatibility
it now has a new list with elements of the type publicationTypeAttribute changed the existing get's to ensure compatibility
Performance updates
Improving performance of setCellStyle for large sequences; support for setting hyperlinks
Customer Testing - wrote unit and integration tests around customer service and center creation functionality.
Performance improvements
Add a plugin to allow usage of java7 source features while maintaining jre6 compatibility. Import cleanup too.
Deprecating (and removing) ERXToOneRelationship2 and ERXToManyRelationship2 (and dependent D2W components). Rolling in functionality into parent components. Uses properties to determine 'mode'.
Less sanitizing for more performance
Reverted correct size() calculation because of the performance penalty that would come with it. A solution to/existence of size() will have to revisited later
"* Mostly complete world storage functionality. Quite messy and some parts may be broken. * Fixed level storage and stuff, threaded a bunch of stuff * Removed all fallback commands, replacing with Glowstone commands * Cleaned up chunk saving, added a few extra things, and added missing say command"
SONAR-3644 Break compatibility with plugin configuration
fcrepo-1149: refactor for unit testing HTTP HEAD passthru - Pass HEAD request through to external datastream content services - Normalize ETag values as MD5 checksums - Finish refactor of DOTranslationUtility for testability
Moved LDAPrintTopics to utils added functionality to read DictionaryVectorizer dictionary.file-* 
"JBRULES-325 JBRULES-326 Performance of compiling improvements, caching of extractor generation etc"
added LogicOperation and MathOperation to generalize functionality in each respect class of the type. Went through and 'final'ed variables and arguments here and there. Added test cases for errors with true/false in AND/OR operations.
Moved FastMathTestPerformance out of the main test tree.
improve Slug implementation effectiveness
"CDS: Time points for curves functionality corrected to include start and end dates, and tested"
"improved usability of wave zoom, small bug fixes"
Add Model Compatibility plug-in
"refactored test cases, added test cases for new functionality, fixed bugs"
Configurability of callback policy distribution.
Implementation : UI of performance history for client. jsp code.Test case updated
Fix more m2e 1.6 incompatibility issues
Fix problems with mdr performance.
Drop sync connect as it's a performance killer with Netty 4
Turnning invoke method's performance
Abstract out the life cycle management code out into it's own abstract class and reuse it in classes that provided the same kind of functionality.
Minor renaming for readability in calling application code
"XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Move to PircBotX version 1.6 instead of PircBot, see http://code.google.com/p/pircbotx/"
Split up integration test for readability
"implemented flexibility, change utilization into slack"
Implemented the extensibility for the instance source generator visitor.
"Efficiency boost, tests for older name gen"
initial commit of acceptance test performance report
"[JBIDE-9793] implemented key validator and ""new"" (create new key pair) functionality"
Improved performance and concurrence
jbpm-performance-tests: Configurable DB
Apparently the author of FastCraft fixed our incompatibility. Woo!
Added more utility functionality to the store assistant used in the traces transformation
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * More checkstyle error fixes
Add comment functionality to Beanshell console
1. added paintedItemListener functionality for childArea and modified it to pay attention to the event.item object 2. created a new protected method: createTitleArea() so that subclasses can choose when to create a title area composite.  NOTE: SWT.TITLE still applies as it used to because it will cause createTitleArea() to be called during initialization.
improve both the performance and the correctness of the html cleanup
Replacing the LatestTest class with LatestTestAfterCheckpoint. The new database test functionality starts the database tests from a given database version (the current checkpoint) and walks through from there.  This initial commit will start at revision 172 and test through the current 174.  A followup commit will move the checkpoint up to revision 174 in order to bypass the lengthy 174 upgrade.
Extended Compatibility with firebase API - Fixed todo example - Fixed Distribution Logic
1) Improving performance for profile page 2) Updating unit tests to work with database improvements 3) Add cache to the external cdn link
NewSourceModuleWizard extensibility
Javadoc link to reference. Remark on numerical accuracy added as code comment. Added unit tests. Added normalized sinc function.
performance test changes
Improving performance by removing unnecessary ContextEntry subinterfaces
Split up log-in and find-issues command so no invocation data is written to the DB when searching for issues (for performance).
"Complete rewrite of internal configuration and action execution system for performance removed noclip check,  itemdrop check andgui editor"
"KPME-253: changed location of warning messages, moved validation functionality to service, added TimeOffAccrualServiceTest"
Convert to caliper-based performance tests
"CheckIn: Fix bugzilla bug 191445  	[Scripting usability] Expressions in report design should use a new syntax to differentiate them from static strings;   Fix bugzilla bug 276427 Expression builder dialog of data source property binding pops up several time"
Working on the BaseClientDialog and BaseClientTable for stability. Changes to PaymentService Interface; addition and Separation from PaymentServiceAccount. Almost done with settings tab
List only unread functionality.
WINDUP-559: Merged our local changes for performance and stability into the forked procyon
CDH-11465: more grok performance enhancement
"ISIS-330, ISIS-334: ensuring backward compatibility with gmap3"
Cleanup: Preparing to remove FunctionalityContexts
Added object flag / isObject method to SEXP to improve performance of generic dispatch mechanism.
"Dropped [x up/y dn]-type efv information; introduced two types of ef-related descriptive text for the EB-eye dump: one indexed - longer (to increase search accuracy), and the other displayed - short (to de-clutter the search results screen)"
Renamed Queue methods and added deque functionality
Performance optimization
"MONDRIAN: Access control for XMLA requests, contributed by Pedro Cassals. Each XMLA request for metadata now executes in the specified role, not as the superuser. Move RolapSchema.getSchemaLoadDate() up to Schema. Move RolapConnection.getDataSource() up to Connection. Add generic Pair<Type1,Type2> class, and use in various places, and other refactorings to make things more strongly typed. Remove uses of the deprecated 'DriverManager.getConnection(..., boolean fresh)' parameter from the code base. Clean up logic which determines whether the schema-pool is used. Take a pass over the test suites, minimize the number which are creating their private schema (to improve performance) and fix those which are polluting the shared public schema."
Add ‘Flag’ support to TARDIS WorldGuard compatibility
#NAME?
"Removed 1st draft of ""try samples"" functionality"
"- Summary: [Chart usability spec#2.11,2.12]Added format preview and axit type consistent check"
updated code to java 1.7 idiomatic compatibility
fixes for JDK 1.1.7 compatibility
"Drop javac7 support: remove jdk7-compatibility shims, and merge jdk8 implementations into core. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=76996707"
ASNN-103 Fixes the lack of functionality for the Upload and Cancel buttons. Implementation of upload all functionality.
"first pass of performance enhancement, removing sqrt from distance calc"
"CORE 	Added Complete Parse support for ASM Definitions.   	Added isVolatile() to abstract declarations. 	Added Complte Parse support for elaborated types / forward declaration of classes.   	Fixed some robustness issues."
[2022774] Various usability issues: The 'Save' and 'Save As' in the File menu of the Robot Editor is now enabled and disabled depending if there is anything to save or not.
Performance improvements for slow route searches
#NAME?
performance tuning in reflection usage streamlined exception handling
Added update() functionality to model elements
improved parser performance.
"Add DRF reproducibility test, same as for HEXDEV-194 in h2o-dev."
more performance optimizations
DATACMNS-332 - Performance improvements in conversion subsystem hotspots.
topic: code enhanced type: functionality module: other description: mdeditor - ongoing: multiple group instances
SOAP-2335 Added functionality for disabling analytics and skeleton opt-in code in SoapUI.java
OPENEJB-1729: Reliability of Multipoint remove event when last peer disappears OPENEJB-1730: Reliability of multipoint discovery heartrates less than 1 second
"implemented maven process caching to improve performance, especially in the distributed environment. This feature is not enabled for general use right now, so that I can give it a longer soak time."
"[SSHD-632] Provide more flexibility in overriding Nio2 related classes - e.g., acceptor, connector, session"
Further along with the JMX support.  * Added a dynamic MBean for getting the Neo4j configuration parameters.  * Added an MBean for information about the Neo4j Kernel.  * Converted all MXBeans to MBeans for Java5 compatibility.
Modified the front end to make use of additional helper functionality in Conan 2.6.1-X and TgacConanProcs 0.6.0.  This makes the interface much cleaner and easier to understand.
"multiple bug fixes for UI stability relates to fragments load times, NPE on getActivity() also implement the action buttons menu in the chatview window also add better logging of remoteexception errors"
KARAF-1838 Adding old package mbean methods for compatibility
[SSHD-766] Separate forwarding filter functionality according to sshd-config options
Migrate the compatibility tests suite to JUnit 4.
CAMEL-7991 Added MultiPartUpload functionality to S3Producer with thanks to Andreas
make JoinSets richer as a model - move some functionality out of other classes into here to make its interface less leaky
"Adding static methods that don't require NodeTypeManager, for simplicity of usage"
"- add the ability to pass different bind username/passwords for binding - add the ability to reload attributes - remove use of field.setAccessible(false) as it is never needed.   Accessibility is restricted to the specific ""Field"" instance, and does   not affect the rest of the JVM."
BKCommonLib compatibility update
Move EdgeEffects related logic in ScrollingAspect to separate class for cleaner code & increased testability.
HADOOP-9805. Refactor RawLocalFileSystem#rename for improved testability. Contributed by Jean-Pierre Matsumoto.
inventory sync performance (part 2): make application of alert templates to newly imported resources resilient to previous failures
[SONARPLUGINS-824] improvements on testability
Remove Hadoop versions compatibility layer.
Disk Journal performance improvements.
WS permissions/search_global_permissions improve readability
366998 introduced maven launch configuration extensibility API
"moving a couple util classes into the ident.util package, and moving ArtifactPathInfo out of aprox and galley, and into atlas-identities (since the functionality belongs here)"
Added tag support to Volumes and Snapshots. Re-factored tag functionality in AMI/EC2 and moved some common code to AWSCloud.
added functionality such that you can persist against counter column families
Improved the performance of CPS's OutputSteram by adding write(bytes[])
use stability monitors where possible
Move getTotalSamples() into ImageUtils. Improve performance in ImgLibProcessor via change in use of planePosition
"fixed precision issues, +improved StringToDouble use performances"
"Bug 372128: [syntax highlighting] ""Highlight enclosing brackets"" has massive performance problems"
"- Summary: Bugzilla Bug 120918 Usability: Tabs above and below Layout Editor are confusing.(Partial fixed) Bugzilla Bug 124767	Null value is not processed in getModel method. Bugzilla Bug 117984	Partial fix by add source page to library. (Please see the mockup)"
added functionality to replicate locks from primary to backup nodes
"re-factor ""parsing"" of clients receive-buffer * more modularized * more documented * marginal performance improvements"
"Performance change to streamreader to not use indexes for next nodes for DOM, use getNextSibling."
increase performance by fetching entity lists only when needed during JSF lifecycle (more work) - rjrjr
"With more stuff promoted to API, change the hack put in place to maintain compatibility with <=2.5.x"
Issue #152: increase readability of formatted values:
* simplifyed LanczosInterpolator by extending FloorOffset * gained additional speedup of ~2x by accumulating dimension   separate products instead recalculating them per each iteration   through convolution kernel * included Lanczos into the interpolation switch of   Interactive3DRotationTest because the performance is reasonable   real-time now
new search functionality is operational
[GSCOLLECT-1288] Implement additional performance tests for ParallelIterable.
More utility functionality to support JML generation
"Removed ""item playback"" functionality."
"Initial commit of features to support a number of existing tickets around improving usability of the Period Indicator Report, and also providing an alternative dataset for using indicators and dimensions that is more suited to certain use cases.  Tickets addressed include: * REPORT-24: Period Indicator Report Form should allow editing column definitions * REPORT-160: Create a new DataSetDefinition containing indicators and dimensions, which does not require specifying all distinct combinations  * REPORT-9: Period Indicator Report Form should either sort automatically by column key or allow moving columns"
* Moved FrontendsFragment functionality to MainMenuFramgment including frontend auto discovery.
160985 [api] make functionality of JavaProjectWizardFirstPage API
Added more functionality to the gui and cleaned up a little.
Experiment with performance of TrackPainter
Cache JPA EntityManager* for better performance
Intermediate commit of new bubble assembly graph traversal algorithm for the HaplotypeCaller. Adding functionality for a path from an assembly graph to calculate its own cigar string from each of the bubbles instead of doing a massive Smith-Waterman alignment between the path's full base composition and the reference.
"Refactor languages/i18n functionality. There are 8 standard languages: ""en"", ""nl"", ""de"", ""es"", ""it"", ""pt"", ""fr"", ""jj"" en: is default jj: is a placeholder for my language"
bug CS-10789: Adding volume sync and delete functionality.
Further refactorings for modularity and decoupling
"ObjectMapper renamed to Mapper, extended Mapper interface with allowsToMap methods, .using(context) merged into methods signature due to performance reasons, extracted handcraft implementation framework-independent part into separate module, made MappingContext more reusable, refactored lot of stuff, updated readme.md."
Performance test for 70856
Compatibility with API-Commons
Sub-image performance improvements for some of the slower readers.
Old header compatibility options and handling. Not complete.
o Clean up copy on write stuff and optimized applying diff. o Removed tx field in NeoPrimitive in favor of memory footprint   (performance gain was not that big) o Added entrySet() to ArrayMap
Refactor adding new links functionality
Copy all www-eee-util-convert core Converter implementation functionality into www-eee-util-misc.
"Removed unused bean wrapper functionality, more code cleanup in validator"
"TIKA-48 - Merge MS Extractors and Parsers     - Moved MSExtractor base class to org.apache.tika.ms.MSParser     - Extracted the PropertiesReaderListener class to a top level class     - Merged MS Extractor classes to MS Parsers     - Refactored the Excel parsing functionality into smaller methods     - Various cleanups (indentation, formatting, etc.)"
Improved performance and accuracy when computing worst result and health
added conversion service performance optimizations; added mapping cyclical ref handling; removed ConverterInfo in favor of specifying S and T at registration time if necessary
"JERSEY-1617: Content length determining   - Added buffering functionality to CommitingOutputStream   - MBWorkers.MessageBodySizeCallback merged to (Buffering)StreamProvider   - Added configuration enableBuffering() into ContainerResponseWriter   - Refactored writing and buffering entity on ther client side     - RequestEnityWriter unified     - connectors refactored (InMemory connector simulates now Container side)     - non needed callback interfacess removed   - Settable added for the future use   - PS4:     - minor stylistic changes and javadoc updates.     - uncommented tests that should have been fixed as part of the task (still failing)   - PS5:     - added support for HEAD methods     - enabled buffering for grizzly container     - committing of response replaced by closing (fixes gzip streams)     - PropertiesHelper: RuntimeType support added to all methods (tests added)     - Removed BufferedOutputStream, buffering refactored (simplified)     - Removed RequestEntityWriter (part of ClientRequest now)   - PS6:   	- review comments incorporated   - PS7:   	- copyright fixed"
OFC-626 Import XML functionality
Renaming and refactoring towards debugging functionality
initial implementation of the rankings functionality
implemented remote notification functionality & test
Fixed multiple quality issues regarding multi-threaded correctness and improved error handling and error logging.
"- Summary: fix bug116707: Min Slice doesn't apply to legend, 117059(partial):Optimize chart drawing using medium to large datasets - Bugzilla Bug (s) Resolved: 116707,117059 - Description: 1. support filtering legend item according to the actual series rendering result. 2. replaced EcoreUtil.copy() with custom copying routine if applicable to reduce the performance impact caused by EMF framework. - Tests Description  :"
efficiency increase in GrouperWithRollUp using double buffered tuples
commit for sync: ecologylabConceptMapping: algo improvement in progress due to performance.
Summary: [accessibility]Enhance accessibility support in Chart Builder
type proposal creation performance improvments (less accesses to Signature)
BCK: back-up before remove functionality of createSampleRequest into RequestActionBean
"IIteratingChemObjectReader now extends IChemObjectReader, so that it has Mode functionality too"
SAK-11257: Core Citations Editor Integration functionality - initial checkin
Performance improvements - peak ~300-400k msg/s (with timeWindowSec = 0).
merging the alternate and persistent identifiers into a single list for the sake of extensibility and simplicity
Improve performance of compareTo
Fix Activiti 6 failing identity tests + more backwards compatibility testing
Performance enhancement: use sets to define filters; add module paths mbean operation; add additional logging messages; use exact match for filters; reduce resize overhead on paths maps; fix bug in quoting glob escapes
Persisting: improve efficiency of file-access
Moved some more functionality back into AnalysisContext. Implemented more of AnalysisCacheToAnalysisContextAdapter.
"Simplified the compatibility code in setTitle, setContentDescription, and setPartName. Updated JavaDoc"
[MATH-1131] Improve performance of KolmogorovSmirnovTest#kolmogorovSmirnovTest() for large samples. Thanks to Schalk W. Cronjé
Rebase Interoperability third part: handle stop upon conflict
o Improved robustness against incompatible event spies
ISIS-778: moving further functionality ...
increase efficiency
Fix Bugzilla #204922 - [Chart usability] Set table / chart to hide when no data.
File header compatibility issue was fixed.
"Added basically full-plugin functionality. Lots more to be done, but everything so far is going very smoothly."
Update performance tests
changes to overcome performance issues with huge fitnesse result files (several MP)
Watch as I implement functionality!
Adjust a compatibility method for speed and probably compatibility.
Refactoring for better readability
"Added relationship attributes to edit-relationships-panel, added relationship attribute transmission to CloudService, modified CloudService classes to handle large files with streaming, added pull functionality to CloudService, introduced new configuration value ""server.ip"" to specify the CloudService reverse connection address when pulling nodes, added active transmissions display to cloud tab."
CHENT-49 performance tune repeated puts.
refactor JPA tests to improve efficiency
refactor netcdf reader for better extensibility
applied patch from Nathan and Matt at PRX.  Should have a positive impact on performance
o Clean up copy on write stuff and optimized applying diff. o Removed tx field in NeoPrimitive in favor of memory footprint   (performance gain was not that big) o Added entrySet() to ArrayMap
"a) Fully functional and working multiallelic exact model for pools. Needs cleanup/more testing. b) Better unit test for pool genotype likelihoods - it now optionally generates actual noisy pileups that can be used for assessing GL accuracy, c) Totally experimental, hidden option in VariantsToTable to output genotype fields. Specifying -GF will output columns of form Sample.FieldName - needs also more testing"
"[FIXED HUDSON-3028] in 1.319. In a long run, I believe doing this control in the queue with ResourceController is better, because (1) scheduling one at a time can create unnecessary wait time --- say if one of the configuration needs to run on a slave that's blocked, then it's better to schedule others first, and (2) the notion of shared resources spans beyond a single job, so doing that coordination at a job level isn't general enough. That said, I think it'll be easy enough to maintain data compatibility when this happens, so I'm committing this change now."
Improved performance by handling begin and end of offsets in cluster data.
HBASE-5804 Add more to verification step in HLogPerformanceEvaluation
Warm start ADMM and fixed weights for GroundCompatibilityRule
Improve data import performance
Removed depedency to runtime.compatibility
Changed record serializer back to old version to maintain compatibility with old unit tests
"Various performance related changes:  - A property block is now removed from the property record as soon as is set not in use  - The above makes the inUse field of PropertyBlock useless, remove  - DynamicRecords of deleted blocks are moved to the containing PropertyRecord, to be added in the XA log  - When a PropertyRecord has just the position in the chain changed, it is not written out whole in the log - just the pointers  - Removed a bunch of iteretors and unrolled some loops in store operations"
Major serialization performance improvements via type-checking of string-friendly collection element types enabled by type-injection into keptcollections.
Fixing missing attribute for backward compatibility on DiffDatabaseToChangeLogTask. Adding more unit tests.
Extracted Model evaluation functionality into dedicated ModelManager subclasses
performance tweaking
"wrap workspace config with workspace instead of duplicating functionality, allow forced-override for GAV selections which ignores old version."
"Performance optimization: defer attempt to use user-defined conversions during overload resolution, bug 268383."
vertx server performance test
main scheduler functionality in Provisiond update
Bug 127793 - Improve Headless startup performance (osgi and core runtime side)
Fixes for George and more flexibility in the Util classes.
SOAP-2335 Added functionality for disabling analytics and skeleton opt-in code in SoapUI.java
"Big UG refactoring and intermediate commit to support indels in pool caller (not done yet). Lots of code pulled out of long spaghetti-like functions and modularized to be easily shareable. Add functionality in ErrorModel to count indel matches/mismatches (but left part disabled as not to change integration tests in this commit), add computation of pool genotype likelihoods for indels (not fully working yet in more realistic cases, only working in artificial nice pools). Lot's of TBD's still but existing UG and pool SNP functionality should be intact"
JBIDE-20580 Performance: EL resolvers unnecessarily create a lot of empty ArrayList instances
Move PropertyType functionality into Property class
HibernateWebFilter has some nice comments and new Exception Handling functionality - it still needs some fine tuning but it works properly - or seeems to work properly ;) Other classes has been formated and organized
481437 - Port ConnectHandler connect and context functionality from Jetty 8.
#NAME?
"Added StringHandlerAdapter, renamed classes for simplicity"
"[BISERVER-12794] Permissions can delete but not restore file - Expanded doRestore functionality (added ability to restore files in home folder, choosing one of overwrite modes) - Created new user dialog, suggesting user to restore files in his home folder when he has no write permissions to original file folder. - Test written"
Fix showing performance trend in workflow job (#112)
Improves performance of o.j.r.junit.before.test extension.point processing. Part of #456
fix for http://code.google.com/p/mybatis/issues/detail?id=20 . Performance enhancement: create cache key and dynamic SQL just once
"MONDRIAN: Implement compound slicer; that is, a WHERE clause that contains     a set of members or tuples. Fixes bug MONDRIAN-444; logged MONDRIAN-555     to record missing functionality."
improved performance of preflabel conflicts and disjoint labels finding
Basic functionality provided for creating tasks
optimize the archive performance
HADOOP-1990 Regression test instability affects nightly and patch builds
#217 Improve TemplateParser performance
"http://jira.sakaiproject.org/jira/browse/SAK-14216 Split create/update from inputable so that there is more flexibility on combinations of capabilities, should be backwards compatible"
MIFOS-5753: Added advanced options to Search functionality
Some work on packBitsUncompress efficiency.
Added a Sample OSGi bundle to test logging functionality
Fixed .nfs files issue in DcStorage and refactored bag completion code. Changed the bag archiving functionality to archive individual files instead of complete bags. Fixed an issue where tagfile entries were removed when adding new files.
"Simplified and improved the OpenDialog. Fixed various other minor GUI bugs. The spectrum annotation, ion table etc are now updated when the user changes the annotation accuracy in the AnnotationPreferencesDialog."
"New fulltext features: - efficient fuzzy index added, with exact, wildcard and fuzzy search support - improved performance of ftindex (building and querying) - fuzzy search enabled for ftindex - Bugfix"
Expedites the realization of the expiry of endpoints in order to better the behavior of the last-n functionality.
 Bug 233643 API builder performance bad for incremental build
Refs #3533 - Replace JavaHelp manual with link to manual.cytoscape.org on Help menu. Remove help-impl as it isn't being used anymore. Deprecate CyHelpBroker as JavaHelp won't be accessible in the UI anymore (the class will still exist to maintain API backwards compatibility)
Moved IOUtil utility class to 'pmml-model' module. There should not be any JAXB-related functionality in any other module
[JBTM-1453] Perf timeouts and rename performance Result type
Working on the search functionality and page.
Fixed #85. MySQL performance degredation is due to using a Key Value indexer.
Added functionality to edit receipt contributor. Added option to set gratuity exemption on dfa's with custom enrolment model. Changed string write on DBChanges to use clob.
Refactor extractContentFromResponse() in a way that will support output testability.
Enable back the option that let the user add group of layers in the Toc. I've made some factorisation too in order to improve the readability of the code that builds the JMenuPopup.
- Minor performance improvement for [<- - Ensured that rbind() and cbind() handle empty vectors correctly - Implemented null subscripts (i.e x[NULL])
Fixed table implementation. removed dependency on jwic.compatibility package. removed unneeded javascript from xwiccube.js
Added general utils class with file handling functionality. Also introduced Utils as resource as it should be.
refactoring in code. No functionality changes.
ItEr30S17ValidacionEProbasFuncionais: Extracting method to improve readability. Bug #22
Compatibility issue where there are traversers which depends on that relationships are traversed ordered by type (reversed)... so made a new expander for the old traversal framework
Minor performance enhancements (removed unnecessary object creations).
* Bulkprocessor is reused * Remove unnecessary transformation of entities to Default Entity * Add rebuild index to copy functionality * Give a warning instead of throwing an exception when type is not found.
"TexturePack classes updated System changed, reverted to vanilla classes. HD functionality will be added when MCPatcher  for 1.3.1 is merged"
Added key dumping functionality.
Move Performance and BenchmarkTest under package app
Moved regmien functionality from kenyacore to kenyaemr packages since it's liable to change soon
Removes offsetId functionality.
- improve debugging performance (removed $GLOBALS array from retrieval each time) - fixed function parameters not displayed in parameter stack view - fixed wrong variable information is displayed when moving between stack frames
#NAME?
"XWIKI-6741: Move all retro compatibility aspects to xwiki-legacy Should be ready now, just need to update some code here and there that still use deprecated API"
"Adapted formatting functionality, using more NumberFormat."
"Created new interfaces in bolonha manager portal to show, create and delete competence course (missing edit functionality)"
Added basic experiment commenting functionality.  Just accepts and displays comments at the experiment level.
511120: improve stability of worksapce tests
improve OpenALMusic getPosition accuracy fix #4268 (#4659)
"Added more functionality to simulator, but need to improve response handling"
Bug 329287 - org.eclipse.core.runtime.compatibility.registry shows error for removed class
Refactoring the handling of streams with SliceInput and SliceOutput to use a slice as buffer for performance
+ all launch functionality factored out in LaunchUtil + generalized parameter solver to work with multiple IJavaElements + consistent merging existing launch configurations + added behavior for dependsOnGroups (warning displayed) + temp suite generation uses core generation + TestNG core upgraded to 5.4 ----------------------------------------------------------------------
Refactor and tidy. Configuration classes moved into configuration package. TestListener moved into testrunner package. Consolidated some duplicate functionality.
Backwards compatibility tests.
Add performance tests framework to rexster.
[ENG-136] Replacing global live data override functionality added for the demo with custom per-view live data overrides
Refactoring of Guice modules for greater test modularity
refactored for modularity
"Bindable proxies generation improved (size and performance), fixes https://issues.jboss.org/browse/ERRAI-1069"
structure refactored throughout for performance improvements
"Remove IdentityProxy from BaseResponse, ExtractResponse. Now IdentityProxy is only referenced in CreateCmdResponse, which involves some async job logic change. Since it is not impacting list performance, will leave it there for now."
- Summary:  [Accessibility] The description is not shown completely when create data cube under High Contrast mode
"[2022774] Various usability issues: The list of available robots in the 'New Battle' dialog is now automatically refreshed before it is being shown, when a new robot has been compiled or a robot has been removed."
Improving performance by removing unnecessary ContextEntry subinterfaces
Duplicate method getCustomerPerformanceHistory removed. test cases updated.
Renaming Groovy-based performance test
- compatibility with Prime 5.x - searchModel adjustments
Added the @WhenPageOpens annotation to allow Page Objects to inject extra functionality when a page opens
Performance improvments and IOCExtensionConfigurator API change (details below).
fixed crashes on tablets improved performance by reducing setTheme() call
"improved performance of filter: verify only ""executable"" resources and use module prefixes to limit the number of functionalities to check"
[scalability] Staging view should handle huge amount of entries
Adding functionality to stop (suspend) and restart inputs.
Bug 316303 -  [Compatibility] turn actionSets into MenuContributions Refactoring to get Menu bar contributions and ToolBar contributions working the same way
Bug 298671 Implement enough compatibility to bring up a simple view
major refactoring of the core code base towards cleaner responsibilities and more flexibility
"Revert ""Bug 354538 - [Contributions] [Compatibility] Window menus and toolbars"""
Fixes traceability of the protected areas
ISPN-7645 RemoteQueryEngine should use subclassing to deal with compatibility mode
NPE in the traceability visitor
Moved resources reference functionality to the separate bundle.
Added sort functionality to QueryEngine.executeListQuery / CoreDao.list
TEIIDDES-407 Fleshing out Data Source & Translator management functionality
Added more NIO vs OldIO performance tests
XWIKI-2613: Make XWikiServletURLFactory#getServerURL public * improve macro parameters usability
merged Kenji's change to hbase de-duplication module: - SingleHBaseTable using single HTable instances (no HTablePool) with backing-off upon communication errors. - FetchHistoryHelper for allowing multiple crawl history sources. - row key backward compatibility mode.
#23 Account.username became Account.email for simplicity.
https://issues.apache.org/jira/browse/AMQ-4574 - EndpointCompleter functionality for camel component
[DS-707] Fixes for correctness
"Move debug things to its own package, add support for Jay instead of Jacc, and improve performance substantially"
Documentation updates + base functionality for removing plug-ins
Refactored tests for common functionality.
Deleted relation between OssecSnortMessage and SnortMessage to increase performance. Deleted UnprocessedSnortLog entity that doesn't necessary further. All new snort messages will be saved as SnortMessage.
add new index creations for better srm performance
"ROO-3311: Provide option for Spring Roo managed XML configuration for Services, Controllers, GWT Locators, etc. ROO-3230: Add method level security to Spring Roo services ROO-3211: Modify the inheritance chain of activities and views in order to increase flexibility. ROO-3208: setEntityPickerValues method not being added to View interface in EditActivityWrapper ROO-3204: Use existing renderers in mobile list views rather than defining new ones ROO-3179: Better organize the scaffolded views in a GWT application ROO-3178: If a user adds a field to an unmanaged edit view, do not add it to the managed edit view. ROO-3177: For GWT plugin, separate requests into a managed and unmanaged interfaces"
"topic: code enhanced type: functionality, other module: [d3] coverage description: Extracted a coverage interface, implemented get as raster for all abstract rasters, added geotiff writing support"
HADOOP-2471 Add reading/writing MapFile to PerformanceEvaluation suite
"Attempt to restore compatibility with MCPC/Cauldron Addresses aadnk#90, aadnk#83, and aadnk#71"
"GEOT-5514: Make parsing of external entities in DocumentFactory configurable For reasons including backwards compatibility, a user can now choose whether or not to parse external entities in DocumentFactory. Defaults to false."
231882 - [Accessibility] Characters typed into Text are not accessible on Leopard 232114 - [Accessibility] VoiceOver speaks name of some controls twice
"DRILL-257: Move SQL parsing to server side. Switch to Avatica based JDBC driver. Update QuerySubmitter to support SQL queries. Update SqlAccesors to support getObject() Remove ref, clean up SQL packages some. Various performance fixes.  Updating result set so first set of results must be returned before control is return to client to allow metadata to populate for aggressive tools like sqlline Move timeout functionality to TestTools. Update Expression materializer so that it will return a nullable int if a field is not found. Update Project record batch to support simple wildcard queries. Updates to move JSON record reader test to expecting VarCharVector.getObject to return a String rather than a byte[]."
FIX Robustness of saveServerCSW method: execute independently of catalog version REF Use CatalogGetCapabilitiesBean for saveServerCSW method FIX and REF Minor
Updater: refactor the update-the-updater functionality
refined disruptor experiment test and a first skeleton for performance test
code-formatting according to checkstyle warnings (no new functionality)
Extract methods for readability
DDF-665 Improved performance of dump and ingest commands
Basic object mapper functionality and test take 2
"XCOMMONS-33: "":"" (colon) is parsed as list converter separator Keep retro compatibility after all"
"Fixes for 1633683. BrokenNullCheck now also catches problems if there is an equality expression in the offending code. The rule now also matches array literals in the expressions, for slightly greater accuracy. Some comments + cleanups too."
Added functionality and test cases. Checking in to preserve the code.
Create GraphModelAbstract and de-duplicate PerformanceModel and ResponseTimeModel
TEIID-3119 performance improvements for aggregate and tree processing in general
improve beangle ui tag performance
"performance tracking and (small) improvements performance stats are collected with jamon can can be displayed with {baseuri}/@/monitor using default jamon rendering (a very basic html table) the only perf improvement is related to hibernate validator configuration there is basic perf tracking at component factory level, but it includes dependencies. this needs to be reviewed."
"Added Attach PDF functionality to inspection dialog. It basically works, but isn't done yet."
#18 fix sonarqube reliability rating
Lot of QQ improvements.  Commented out some extra functionality for the time being though as it should be handled another way.  Fixed some spelling in the XMPP transport.
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#getMetadataBuildingContext()
PAXCONSTRUCT-50: improve performance when unpacking embedded entries
"	Changes to get some performances.  The array of 	events is passed instead of one at a time."
Performance instrumentation
gui functionality for hiding / showing wms
Dispose table items in reverse order to improve performance
Further along with the JMX support.  * Added a dynamic MBean for getting the Neo4j configuration parameters.  * Added an MBean for information about the Neo4j Kernel.  * Converted all MXBeans to MBeans for Java5 compatibility.
Convert DelayedCreationFileOutputStream to DelayedCreationFileWriter. Rename ProcessContextImplementation to ProcessContext. Rename ThreadContextImplementation to ThreadContext. Refactor functionality from GrinderProcess to ProcessContext and GrinderThread to ThreadContext with an eye on the inverted control of G3.
Performance improvements
DNA-115 - Moved the federating functionality into a separate connector and out of 'dna-repository'.  This cleans up the 'dna-repository' project and also makes it easier to assemble and (re)use the federation capability in different parts of the system.
Move some of the jaxws22 functionality up into the base classes.  Deprecate the 2.2 specific versions
"Improve the NG raster API, add support in NetCDF readers for multiple coverages, read only structured grid coverage reader support, high performance ND indexing"
"thumbnails cahce + G2connectionutils refactoring, using only android httpclient beginning move to photo number functionality"
"Add ""Millis"" post fix to ivars and pnames. Also rename plugin attributes and add an no Millis postfix for backward compatibility."
Message#size() --> Message#estimateSize() for performance improvements
Added benchmark and extensibility to SumKeyVal operator
Complete REF on plugin structure to manage the add layer functionality on the same window
 * Cleaning out ConsumerProduct entity  * Adding Entitlement revocation functionality  * Adding functional tests around entitlement deletion
tidy up Messages by moving some functionality to LanguageManager
Renamed tests from camel case to underscores for better readability.
"XWIKI-11754: Real-time notifications of watched pages - Added ""realtime"" option for the ""interval"" property of XWiki.WatchListClass - Added an event listener that generates realtime notifications to all matched subscribers of the ""realtime"" interval -- TODO: Handle the actual work of the notifications generator in a separate thread since it is now blocking the request and slowing save operations - Renamed mentions o ""jobs"" to ""intervals"" in the API to relax the notion that the intervals need to be watchlist job document names, so that we can support this new ""realtime"" interval ID, possibly others later - Considerable work done in WatchListEvent handling (creation, converting, matching, diff generation, etc.) with focus on reusability -- Externalized the dependency to ActivityEvent inside a WatchListEventConverter"
"More work on result writer, specifically the dynamic table header writer. Added some overloaded methods for functionality.  Refactored some of the functionality to support this."
#NAME?
Extract out the Piping functionality
Update WorldEdit logging to 6.0 (No backwards compatibility!)
PRD-4652: Caching for even more performance for short running reports.
Upload functionality added Cleared up pom Removed db.properties files database properties now hard coded into persistence.xml
Do not require DS for compatibility state
topic: code enhanced type: functionality module: other description: MDEditor - extended loading of a template or dataset
Improvement of unittests for the new Webadmin. Improved testability of Poolmode changes and added additional tests.
Added some functionality to wormhole regenerate. Fixed a few bugs with the iris code in the process.
Ping pong example to test the stability of the connection against real servers
OSGI-196: improve scanning performance
"optimizations, export improvements, bugfixes for new functionality"
"Join process cleanup, change some default settings (should improve performance and security with default settings)"
releasing patches by Susan Franklin - Bug 89197 [Undo] - Warning/prompting usability issues
PLANNER-221 Performance bottleneck: do not default EntitySelectors to cacheType STEP if the entity count is stable
"JGRP-66 Perf improvements for TCP1_4 (NIO) and NIO-based ConnectionTable. Performance improvement, e.g. through use of thread pools (excutors for util.concurrent). Using NIO for accept, reading and writing."
Completed the functionality on the register view so there is full support for GROUPS/REGISTERS/BITFIELDS if the underlying service supports it. This included editing as well.
Improve robustness of p2p client
o Improved memory consumption and performance of dependency collector in case of errors during artifact descriptor retrieval
Refactor Compatibility suite
lazily creating Maps and Lists in UriInfoImpl for performance
Clean code + fix performance issue by reading list of users
Various VQSR optimizations in both runtime and accuracy.
Added timelapsing functionality
fixing formatting performance bug
progress in backend performance related to identifications
old view property now roundtrips - full backwards compatibility
XWIKI-5786 Deprecate Document(Save|Update|Delete)Event and add new Document(Created|Updated|Deleted)Event in xwiki-bridge instead XWIKI-5787 Add new Document(Creating|Updating|Deleting)Event events being notified before the actual actions are performed on the document XWIKI-5788 New xwiki-legacy module to host backward compatibility code
Unimplemented Functionality
updateSeq now parsed as a string (cloudant compatibility)
HTTPCLIENT-784: Improved browser compatibility mode of the HttpMultipart class; upgraded mime4j dependency to version 0.4-SNAPSHOT
HIVE-1464 improve test query performance (Joydeep Sen Sarma via Ning Zhang)
 PDF-1085 introduction of reworked PageViewComponent and support models.  The page init and paint methods are now interruptible and numerous memory and performance issue associated with the old page view implementation have been addressed.
Renamed method to increase code readability
Trying to fix incompatibility of handlings png on Windows and Mac (second try)
Implementation : Bulk entry performance optimization. M2 code. Test cases added.
Re-styling the gui and adding some functionality.
"- Fix for bug#2216 -- KSC Report list is reordered every time a new report is added. - A unique ID is assigned to each KSC report, is persisted across edits, and is used instead of the report's index in the KSC configuration file everywhere, particularly in URLs.  The ID is initialized to be the report's index (starting at 0) in the KSC configuration file and is persisted the first time changes are saved to the file during normal editing. - Instead of having a set of fields in the KSC_PerformanceReportFactory that track what report and graph are being editing, move this to the new KscReportEditor object along with related methods and store this object in the user's session. - Use Asserts in afterPropertiesSet and other methods to simplify things. - Format code in a few places. - Refactor some controller handleRequestInternal() methods."
ISPN-5352 Improve scalability of DSL based filters by using the publish/subscribe feature of org.infinispan.objectfilter.Matcher
"Added a profiler class (which measures times and memory usage) to the core framework, and updated the XAT performance classes to use this timer."
"Fixed a typo in HTTPClientConfig Builder API. For API compatibility reasons, the old method remains but has been deprecated."
Critical bugfix to ReduceRead functionality of the GATKSAMRecord
small improvements in efficiency
Improved serialization efficiency for basic RPC messages.
Add delete functionality for aerospike module
"Moved out performance tests and other tests which aren't really unit tests, out to an @Ignored test class"
some rather big bugfixes & some performance improvement
minor change to FeedFetcher to support conditional feed fetching based on lastModified time of the subscription.  this is meant to help performance a little bit so that we don't waste time processing subscriptions that haven't changed since they were last fetched.
"Added css-dir parameter to plugins, expressed in generated compass config as a relative path. Added a new test project to verify custom install-dir and css-dir settings. Also factored out more common functionality to abstract plugin class and tidied up test pom."
Further work on extensibility interfaces. Documented it - see website.
"remove plink dependencies on csv, add+split tests, improve performance"
XWIKI-13130: Slow performance and memory leak in UI Extension Points when creating a subwiki
use (hopefully) only java 1.3 methods to detect encoding compatibility
"MAHOUT-270: completed update to ClusterDumper and added a unit test of Canopy, KMeans and Dirichlet all using the ClusterDumper basic functionality. More to polish but this is working"
runner extensibility fixes
"Complete refactor of pdf export classes: seperate classes to convert DOM and FO and performance logging of Pdf creator. Better naming and more story telling in code. Except for removing system.exit(1) and some bad exception handling (which is still present), all functionality is still present"
"ISIS-1603: renames the refactored ScalarPanelAbstract and ScalarModelSubscriber, and brings back in older versions for backward compatibility"
ARTIF-615 miscellaneous performance improvements
Removed the functionality of running perl scripts from within MBT. MBT shall be run from within a perl script instead.
Fix reliability of NetworkUtils#freePort()
Performance lack fixed in substituiton
"- selectedProject is now a bean, - More flexibility by delayed initialisation of Project - More cleanups and breakage in metricslist"
Refined new metadata provider functionality
[PLXCOMP-202] [PATCH] Huge performance improvement in JavacCompiler by caching the JavaC class Submitted by Jörg Waßmer.
Delayed data fetch until it is necessary. This improves performance when only the simulation spec is needed.
Bug 511278 - [performance] o.e.e4.ui.workbench.* trace() methods are heavy weight
Performance improvements to HTTP client after profiling session.
TEIID-2210 refinements to the object translator. decoupling the translator logic from the connection logic.  this temporarily breaks the functionality
"Uploader and BaseStatus, now support changing panel implementations by extending and overriding. Flexibility patch by carlos.aguayo"
"annotation processor fixes and refinements for Gson , Mongo correctness and for tests to pass"
ISPN-4105 Optimize Cluster Listener performance for Replicated Caches
"CheckIn: Fix bugzilla bug 283491 [Accessibility] Shortcut keys are missing in dialogue ""Advanced Bidi Data Source Settings""[32341]."
#NAME?
"MAHOUT-767 Improve RowSimilarityJob performance, threshold integration"
"topic: code enhanced type: functionality, other module: other description: MDEditor - updated configuration, creation of the GUI"
"Added ""being quiet"" functionality to http requesters. To create a ""silent"" http client,  simply use MaryHttpClient maryClient = MaryHttpClient(true);"
Variable initialization should now handle traceability for most cases
Rename subtype to type compatibility.
WIP for syncing hive functionality with latest snapshot
HBASE-8209. Improve LoadTest extensibility
Added functionality to archive notification alerts if connection has already been made.
Exposed source provider functionality through spi.
Implemented getCurrent/getExistingCurrent methods. Refactored existing assertions code to make use of this functionality.
o Clean up copy on write stuff and optimized applying diff. o Removed tx field in NeoPrimitive in favor of memory footprint   (performance gain was not that big) o Added entrySet() to ArrayMap
Performance improvement: property docx4j.openpackaging.parts.JaxbXmlPartXPathAware.binder.eager.* allows us to avoid unmarshalling via DOM
Implemented message functionality
[CORE/WEBUI] Add recovery functionality: handle player quit event and save movie status.
"Compatibility 1.7, fallbacks etc."
Changes to cleanupDeletedmodules and cleanupDeletedsections methods to improve Melete cleanup tool performance(ME-644).
"Better functionality, add hoppers, ..."
"Improve ItemDisplay performance, ease of use."
CheckIn: Fix bugzilla bug 176575. Use annotated sql to tune the performance of BIRT.
Changed compatibility tests. Testing JBDS5<->JBDS6 compatibility instead of JBDS4<->JBDS5.
MIFOS-3594: Finished creating tests for new scheduling functionality. Renamed some test classes and their methods to match what's actually beging tested.
"Improve performance, add missing meta data"
"Added a lot of missing JavaDoc comments. Fixed up the chat example to work on all current browsers through a Flash fallback. Added a some missing functionality to the main classes, including responding to a Flash client's policy file request to the WebSocketServer, which is required for the Flash WebSocket implementation."
More performance tweaks
WICKET-5688 Restore the functionality an IPageManager to be able to clean all data/pages for the current session
Fix compatibility problems with 7.1.1: change implementation of part's toolbar reallocation (moving part toolbar to tabsheet's tab panel).
Moving reduced read functionality into GATKSAMRecord
Fix KCL performance problem
Converted all patient listing/searching UI functionality to be AngularJS based
HIVE-13027: Configuration changes to improve logging performance (Prasanth Jayachandran reviewed by Sergey Shelukhin)
Bug 353248 [Compatibility] Disposable services created by the context may not get disposed
Lech | #143 | Added processor functionality for CCS child-only forms
Fixed bug 227098: [formatting][performance] Adopt new code formatter that now formats Javadoc
"https://jira.jboss.org/jira/browse/JBIDE-4285 - code review - make code more readable: rename/create functions where it was necessary, use proper interfaces, reduce code size, add code comments; functionality remains the same"
" Issue 183:	Handle InterruptedException correctly in org.javalite.activejdbc.statistics.StatisticsQueue because JVM does not want to stop - backwards compatibility change"
Added hash table performance test
"Based on the request from community, it is decided that the single-entity operations based benchmarking would be better to measure the performance outcome."
"split ViewerPanel out of SpimViewer. ViewerPanel has most of the functionality. SpimViewer has just the JFrame and Keybinidings. Needs some renaming, more comments, etc"
messages - improve performance of labels.js[on] generation
enhanced functionality
Moved most functionality up to AbstractDelimitedTextFileOutput; added sync on OutputStream.
DATACMNS-350 - Improved extensibility of Parameters.
Issue #1899. Compatibility of BP indexes.
"refactored cycle API, added RenderInfo to provide standard set of available views for plug-ins, changed the content-type definition by using a mixin interface to add extensibility to the set of standard content-types, refactored API according to these changes, adapted the UI/REST component accordingly"
"Reduces the number of indexes to one, i.e. no separate fulltext, keyword and spatial indexes any more, fixes rebuild index command performance, removes selection of rule-based query planner in cypher statements, adds a test for SourceId and TargetId property types."
#NAME?
Moved getBackwardCompatibilityType method from RELAXCoreReader to GrammarReader.
Modmode 3.6.0 - Spigot 1.9 Compatibility
Fix #12907 Improve the performance of BIRTActionRenderer
Retain backwards compatibility
JBRULES-2809 performance tests to check working memory corruption
"Aaaah, that feels good.  Away with all the old code that I was  keeping around for compatibility with the old demo and tools."
Merging SAK-18458 to trunk - Need a MatrixManager.getNode signature that doesn't check locks for scalability
HBASE-15560 TinyLFU-based BlockCache - revert pending performance verification
SONAR-5954 Fix backward compatibility of componentRoots parameter
Commit before heavy modifies on memento structure TODO: complete the manage server functionality
Creating code for splitting of functionality into commands.
"* Work on story 1407, the ability to set the date in Mifos from an acceptance test * Completed task 1434, adding handler for URL processing * Got basic TimeMachine functionality working in acceptance tests, but haven't turned them on yet * Implemented DateTime setting functionality using a Spring controller and Freemarker for page rendering"
merge MAPREDUCE-4946 from trunk. Fix a performance problem for large jobs by reducing the number of map completion event type conversions. Contributed by Jason Lowe
"#POULPE-475 All functionality from JcommuneHttpNotifier rewrote over REST. Additionally implemented test-cases with ""restito"" framework. Old notifier not deleted, yet (waiting for code review). "
Modbus plugin: Added TCP compatibility. Libraries update.
remove usage of java.beans.Introspection to improve android compatibility (fixes #247)
Extracting alert receiver/condition functionality from alert resource
Extracted clique tree functionality to separate class.
improved performance - prepared statements are compile just once in postgresql server now
GlassFish compatibility fixes
Bug 431361 - Label and activity equals two objects Bug 390575 - Support BPMNLabel DI elements Bug 390566 - Label feature package is not exposed Bug 355672 - BPMN2 Modeler Usability: look & feel Saving work.
"HTML-64: Additions to htmlforms for workflow and states Fixed bug in Checkbox widget Fixed checkbox functionality Changed name of style tag to ""type"""
Improve writing performance by writing Strings in chunks
#NAME?
"Bug 315677: The getNumChildren() method was not actually used and was causing some inefficiency, so we deprecate it in favor of hasChildren() and getSubExpressionCount().  Also fix the JUnit tests accordingly."
WINDUP-98: Split Iteration functionality out of VarStack
YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA. svn merge --ignore-ancestry -c 1552209 ../../trunk/
Extended the allele-biased down-sampling functionality to handle reduced reads.
bug: 5148 implement limit-recurrence-set in CalDAV reports Updated project.xml to pull latest ical4j that contains limit-recurrence-set filter implementation. Add unit tests  testing limit-recurrence-set functionality.
added high light functionality fixed some bugs refactoring added info area with number of opponent's hand cards
adding <restrictByRole> tag functionality with tests
add functionality for http://jira.jboss.com/jira/browse/JBIDE-600
"Fix 216721 copy/paste issue Now once plot chart is pasted and the chart figure is created, will add an asyc process to look for the axis chart and set hostChart reference to it. This process only occurs one time each paste command. If the chart has no axis, it will do nothing. In addition, refactored ChartReportItemImpl code to make it as simple as possible, since it may affect performance."
Increased code coverage of WorkerPerformanceMonitor. Cleanup of WorkerPerformanceMonitorTest.
Increased line coverage of WorkerPerformanceMonitor
Android: Streaming functionality.
ODE-444 Improve performance of InstanceManagement service
[PLAT-2746] Enhance safety/reliability of ToolContext loading via http
Added new tag enable=discovery-download to better configuration and performance Fixed a bug in handling node deleted event
http://jira.sakaiproject.org/jira/browse/SAK-13373 More updates related to performance in classloaders and fixes for the describe functionality
Enhanced the performance & footprint of the parser by reducing number of lists created and getting rid of extraneous cross-reference construction in ParserMode's that do not warrant it.
Fixed missing functionality: alias declaration with function declarator
Moved requirements functionality into a new content manager class following same pattern as all other content
"Fixed bug that Container.compareStorageContainerCompatibility() is done by each instance of Container, for example CellContainer has to check if the cell size is the same."
MAHOUT-1264 Performance optimizations in RecommenderJob
"Added performance metrics calculations, and optimized some of the worst queries. Also, removed storage of all properties files contents in the graph, as this was enormously slow"
End to end tests for testing query more functionality. Fixing bug which was resulting in reset never getting called for RowKeyComparisonFilter and SingleKeyValueComparisonFilter.
"Implemented weapons capabilities & associated facilities dealing with damage, destruction, and repair. Implemented energy, engine heat, and repair processes previously neglected. Fixed data readout generation to display correct rotation angles, respect sensor range, and display previously missing data. Implemented player roster at game join time and in the I3 command. Shrank zone into which combatants appear to liven up the action. Added ""thanks for playing"" panel that replaces the text prompt when player's game ends. Refactored combatant creation. Removed Movable type.  It was overkill, I think. Added commander to Combatant & changed constructors to supply it. Removed position, velocity, & heading from Combatant constructors and added setters to replace them. Changed accessibility of several Combatant classes to protected instead of private and removed clumsy references to getters/setters. Fixed bug in GameServer that was causing ConcurrentModificationExceptions when combatants died during the update phase of the game cycle. Added repairDelay to ShieldArray and subclasses. Modified GameController.gameCommands() to invalidation HTTP session on player's death."
start and stop functionality of ForgeRuntime is implemented and tested
Expanded functionality for writing BAMs from HaplotypeCaller
WELD-689 Add Performance Category
"Added the ability to lazy-load or force manual loading of GeoName ancestry, setting the defaults for all queries to lazy loading. This should improve performance, bringing it back to CLAVIN 1.x levels for simple lookups where ancestry is not desired. In order to achieve this, GeoName was refactored to an interface to allow a wrapper object that provides the lazy load functionality. The Gazetteer interface has been updated to provide methods for loading ancestry for one or more GeoNames and to specify an AncestryMode when loading a GeoName by ID."
"Refactored classes surrounding the webdriver tests, lessening the amount of required boilerplate and increasing test stability."
v1.72.1: Heavy performance and bug fixes
"Improved efficiency of handling of CACerts/CRL/sig ""stores"" (JGLOBUS-119 && JGLOBUS-49)"
Bug 342929 [Compatibility] DBCS4.1: Window->Navigation->Minimize Active View or Editor not working
CXF-5121 Refactor for better readability
topic: code enhanced type:functionality module: other description: MDEditor - updated configuration
- Summary: [Scripting usability] Ability to set format of a control without changing the locale of the entire report.
XWIKI-2613: Make XWikiServletURLFactory#getServerURL public * improve macro parameters usability
Basic functionality of all controls except gradient.
Added more functionality to SCA simulator
"Fixed the ""Convert to VDMTools Project"" functionality on Mac - had to change the preference page (previously a FieldEditorPreferencePage) to be able to add warning label for MacOsx users - this needs to be tested on all the non-Mac platforms."
Refactored backwards compatibility code
slider preview functionality added
"Fixes related to scalability with large array initializer, bug 253690."
"Add AttachmentData to UserProfile. Move authentication away from the shared S3TokenManager, to the calling managers (UserProfileManager, and EntityManager for now), and move associated tests too (oh, and implement new auth tests for User Profile attachment).  Expose service calls for getting a user profile S3 attachment token, and pre-signed url. And add calls to the Java client to expose this functionality. Note that a preview version for the user profile attachment is generated when the profile is updated."
"switched the en, en-US yml files back to their original state whilst maintaining compatibility for the new SvSEIdNumbers"
Graphics: husacct.graphics.presentation.GraphicsPresentationController created and included it in the initialization process. First step in architectural refactoring needed to avoid Swing synchronization problems and to improve the maintainability.
#POULPE-242 * Using JSR-303 validator on form to check field correctness
Validator - minor performance optimizations
Modified app functionality to work with appframework 2.0
"Continuing cleanup of SSG.  GenotypeLikelihoods now have extensive testing routines.  DiploidGenotype supports het, homref, etc calculations.  SSG has been cleaned up to remove old garbage functionality.  Also now supports output to standard output by simply omitting varout"
"Added an accuracy slider to the spectrum and fragment ions panel in the overview tab. Made some improvements to the way the intensity slider was used, and also updated the annotation preferences dialog in the same way. Renamed a couple of methods to make it clearer what they do and to be consistent with the terms used in the GUI, e.g., setMzTolerance to setFragmentIonAccuracy."
SONARJAVA-966 Improve readability of unit tests
Back compatibility with SQ 4.5
feat(engine/bpmn): Add functionality to put all variables in/out call activity within one line and to put businessKey in call activity. - add testcases.
remove dependency of org.eclipse.core.runtime.compatibility
PrismTech JAC#770 Fix for configuration caching performance issue.
Reenabled Functionality for Servlet
#189 refactored query functionality from js to java
Add simple search functionality
"5431 compatibility, for those that can use it. This patch had no testing in 5.4 and only a bit in 5.4.3.1, but should not be problematic."
New Dismissals Functionality
added import functionality to GUI - rjrjr
"Implemented ""fakesneak"" check - detecting players that ""sneak too fast"" + again some code moving for better readability"
Significant modifications to expose annotations functionality through annotations API.
Cleaned up RouteManager and moved shared functionality to epd-common
Added more IO functionality
implementations to fix #347883 (done some robustness improvements)
Added unit tests for standard service functionality (159680).
topic: code enhanced type: functionality module: other description: mdeditor - select label of a referenced group
search: reimplemented and extensibility added
Performance optimisations to radix sorter
Re-factored the performance monitor.
Allow rate limiting on everything we do by queueing runnables We'll see how this impacts performance
[132756] implement generic search list dialog -- add minor performance improvement to pool xerces parser when searching
"WikiSession receives several under-the-hood changes to improve session stability. The technique used to detect session status changes now includes an explicit check for prior authentication; this should prevent sudden ""downgrades"" from authenticated status to asserted (cookies). User/login Principals and the status strings (anonymous/asserted/authenticated) are cached now, rather than dynamically calculated. WikiSession gains a new public method, isAsserted() that does what it says. Finally, WikiSession now takes responsibility for populating the JAAS Subject with user profile principals, rather than the various login modules."
"[fixed] fuck you Dalvik, fuck you direct buffers on Android, fuck you. fixed a couple of performance bottle necks. spritebatch is now useable."
Improve stability of the git bridge and use a single feature for ease of use.
Check point on service alert functionality.
#NAME?
Moved to rio-api module to make accessibility for external code better
- Indexbuilder & Loader API refactoring: commands instead of methods - Array design loader's gene identifier property made configurable through admin UI - Update index for experiment command support in indexbuild - Update index for experiment button functionality in admin UI - Repair experiment button functionality in admin UI 
Compatibility with RedstoneChips 1.0-SNAPSHOT
basic functionality completed
"Largely resolved performance issues with price history and the web page, web page now refreshes automatically with latest changes."
"v1128, improved RythmException log message, merge literal content to improve performance"
DATAREST-597 - Improved AlpsJsonHttpMessageConverter for Spring 4.2 compatibility.
fixed bad schedule for weekly maintenance and improved DAO performance
Performance improvements: scan all classes just once
Set FIT test which cause performance problems to 'Ignored'
[fpr-20] Provide HttpService functionality in WildFly
"Using a shared fixture for the tests for performance reasons. Now the test project is created only once for each test class. Grouped together the FindBugs, SaveXML and LoadXML tests. On my machine the runtime went from 70 secs to 40 secs."
improve serialize performance
Bug 431702 - Performance bottleneck in engine executor
"Added performance metric for ConcurrentLongPriorityQueue, not much of a speed improvement"
Add compatibility with Gwhalin Memcached Java Client
HBASE-576 Investigate IPC performance; fix miscommit that made for broken build
SimonFactory renamed to SimonManager - because it really is rather manager than a factory (which is only part of the functionality).
performance enhancement
HBASE-15467 Remove 1.x/2.0 TableDescriptor incompatibility
"GH-39 Mondrian support enhancements • Table and Field referencing case insensitive • Support upper() and lower() content modifier in both select list, and where clause • Support AVE() aggregate function • Support “select distinct”, and “count distinct” • Implement faster ECLType <-> SQLType <-> JAVAClass conversion lookup • Support multiple JDBC connection URL delimitors (: | ;) • Support IN () and NOT IN () logical operators • Support implicit JOIN support • Improve generated ECL code readability • Implement faster candidate index scoring • Support for escaped single quote in incoming query   - Two single quotes considered escaped single quote,     converted to ECL escaped single quote. • Ensure single rec response for scalar output • Prevent early 'Having' filter and/or late 'where' filtering • Enumerate all appropriate value series • New test cases for all new features"
Initial commit: 1. Guice Examples (copied from Getting Started of Guice doc) 2.  Added PonsDictionary with basic functionality (getEntry() works) + PonsDictionaryTest.
Renamed WorkerPerformanceMonitor to PerformanceMonitor
Performance optimization
Add shutdown method to LocalDistributedExecutor and remove failing CustomDataTypeTest => the removed test functionality will be included in an upcoming test by @aljoscha
Moved MethodLogController and renamed LogController to ApplicationAnalysisHistoryLogController for better readability and maintainability.
Compatibility with Agorava 0.6.0 API modifications
"ImageViewer: Red markers are drawn on the image now to follow the nci-brain training! It looks good, but it might slow down the performances... to test!"
main scheduler functionality in Provisiond update
"Fixed unit tests. Added logging, JMX metrics. Improved reliability"
DATAMONGO-682 - Performance improvement for mapping hotspots.
"Big cleanup (no new features, mostly javadocs and removing some old stuff). Some backwards compatibility broken due to APIs moving around, but that won't happen again (doing that now while not many people are using this :-) )"
minor performance fix.
Issue 541: corrected add/remove disk functionality per trmk spec
"RHQ-1292 - simplified subsystem view for resource configuration update requests, implementing all functionality listed in corresponding JIRA;"
"New Fixture: New report file for residence students performance Minor Change: Recover access link by candidates, Fix on upload documents"
Report image cache performance in all relevant places.
"Issue 151,160: Remove 'persist' and 'safedir' functionality."
Fixed bug in per agent performance + Minor code tweaks + logging cleanup
ACCUMULO-4443 Make PerformanceTests group consistent
Added new tag enable=discovery-download to better configuration and performance Fixed a bug in handling node deleted event
ISIS-1194: inlined AdapterManager functionality back into PersistenceSession
Improved efficiency of managing root rows.
Fix incompatibility between PoolManager p2p and new pool
"Renaming DrawEngine test class for clarity.  Also lowered the number of members in the performance test, was too long for impatient people like me."
minor fixes to SearchBarPanel for maintainability
Changes to the performance tests using JMeter. Added load test for the JPA store.
Added some utility functionality to support SL code generation
HSEARCH-2250 Improve readability and efficiency of MultiWriteDrainableLinkedList
"Added getExpressionLanguages() and getTypeLanguages() to UBpmn2RuntimeExtension - implementations must provide list of supported values. Changed Bpmn2ModelerFactory to add target runtime-specific object attributes and set data types on load. Added targetNamespace to OnEntry/Exit-script.script for compatibility with jbpm web designer. Deprecated ModelUtil.addAnyAttribute() - use createDynamicAttribute() instead. Updated Example Target Runtime plugin. Changed jbpm custom task object recognition to use displayName instead of taskName because UserTasks also use taskName. Added ""Locale"" to jbpm UserTask. Created partial fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=393063 - jbpm web designer allows EscalationEventDefinition in IntermediateCatchEvent (and others). Removed ""isClosed"" attribute for jbpm Process tab. Fixed ""Actor"" handling for jbpm UserTask. Added enablement checks in I/O Parameters tab, Sequence Flow tab and Activity Loop Characteristics."
Add another overload to markEvaluation() that takes a project version; factor the functionality out into a common private markEvaluation() that takes three parameters and optionally updates the version of the mark as well.
Work on match up functionality
ISPN-2281 Add compatibility mode for REST and Memcached
"Fixing the JAXB Map<String, Object> adapter for JSON compatibility"
Restore compatibility with Jetty 8 when SSL is being used
mingle 2832: add test to verify applyCustomerFeeTask is no longer needed and functionality is covered by GenerateMeetingsForCustomerAndSavingsTask
GENERAL - moved performance test to separate module
improving robustness for retrieving output written by started process when process quits quickly
SAK-5954 -- Addressing roster performance and id/eid issues.
Made some performance improvements regarding fulltext writing/searching invalidation. It's still slow though...
performance improvement on market price function; time system fix
"Removed the ScannerData object and moved it's fields right into the Scanner. Made all users of getChar in the scanner call getChar(boolean) directly to remove the extra call to getChar(void). Merged readFromStream in as well. Finally, I have remove the trigraph code to remove the checks for every character. A bug will be raised to reimplement this functionality elsewhere."
adding set log and logs functionality
make slots typesafe and add view bind functionality
Renaming tests for readability. Part of ES6 compatibility for Inline Type Aliases (full functionality + tests not yet complete).
Performance enhancements to RexPro.
implemented dispatcher functionality for management module
WIP (lightly tested so far) implementation of top-down LCS based heuristic for improving differencing performance
[misc] Improve reusability
performance enhancement
attempt to support Jetty 9 (unsuccessful because of incompatibility)
added flexibility in token parsing
added more functionality to this class.
Modify tests to also test interoperability; strip out ill-advised configuration permutations
set the source encoding to UTF-8 to ensure cross OS compatibility. Was MacRoman before.
"Some progress getting Array_Realiz to compile.  Also, fixed an incompatibility where I had inadvertently introduced a Java 7 feature into JProofDisplay."
"added some missing functionality and a unit test to create an indicator, hypothesis, and portfolio."
 Fixed stability issues with Adams integrators.
add QueryPerformanceTest for collections module
Reorganize the order of methods in XAPool for increased readability.  Pull static XAFactory creation out into a helper class (XAFactoryHelper).
ROO-1728: Performance improvements for DBRE
"Changed the interface of the CommandHandlerInterceptor. This API allows for more flexibility, such as retrying command invocations, changing the actual command and result, etc. To be used with caution, of course..."
"- disabling OpSearchImplTest until search is completely finished. - erasing SearchPerformer (legacy low performance class) - temporarily OpSearchImpl is commented, as impl. TODO - rewritten Node + FilterTranslator structure; every Node sits in node package now (mv).    -> new method on Node-s: boolean evaluate(SolarisEntry entry) -- TODO impl this."
Snapshot functionality was restored
Performance tweaks regarding logging mostly
"* reintroduced the number type, common supertype of int and real * with the number type we also introduce the (abstract) interface INumber which is implemented by IInteger and IReal naturally * updated all implementations of the PDB API with the above changes * added tests for the new functionality * adapted tests that tested for 'value' as the lub between int and real, since this is now 'num'."
"o Re-enabled a backup test for windows o Commit requests in HA are allowed to create a new channel, but are still not allowed to wait for a permit to get a channel.   This solved a bug regarding index creation in HA. o Renamed tests and only runs single-JVM w/ netty, but w/o ZooKeeper environment to be as stable as possible,   without sacrificing test coverage except the ZooKeeper part... which ha-robustness tests will cover."
"performance enhancement of WS Frame reading/writing, added basic ws interceptor support, added log interceptor"
"HSEARCH-1309 Splitting as module into as, spring and performance. Cleaning up dependencies."
"Designer now works with one file, just the BPMN 2.0 XML. The object model is now just a POJO model. This is work-in-progress, but most main functionality works already."
"Reverted global getwork instance work, it was causing more problems than it was fixing. Increased khash meter accuracy. Removed stuck executor thread code, this didn't work right and the thread eventually unsticks itself on applicable platforms anyhow."
ODE-446 Improve performance of InstanceManagement
"DNA-468 This commit includes several fixes for the XPath query functionality, some fixes for several tests, and some new unit tests.  At this point there are still some outstanding issues with certain XPath tests, but these are being tracked under DNA-612 and DNA-613."
Added functionality to ServiceEndpointDescriptionImpl
Updates to improve usabilty with projects which contain multiple binaries and to improve extensibility of quick launcher.
Bug 390480 - Slow performance on folder requests
XWIKI-10140: Improve the performance of the Solr Index Job * Expose the Solr API to stream the search results * Paginate the search/database queries and leave the CPU after processing a page/batch * Speed up the Solr queries by disabling the faceting and highlighting.
FIX Password of method insertUser() ADD EntityCorrectnessException for manage internal error on WS side REF Pertinent test
Made FieldNamingStrategy2 is package protected class. Made type hierarchy adapter registration package protected. Marked some of the classes final. Minor changes in the performance tests.
"Improved yet performance with huge datasets. When the mmap pool is full, then the channel technique is used. The dramatic slowness of read/write when the mmap pool is exhausted has been fixed."
TcpTransport: fix interface compatibility.
"o Added IndexHits#currentScore which exposes the most recently fetched   IndexHits item's score from the search, if any. The lucene-index supports this. o Moved the ""index"" shell app to the shell component where the other kernel apps are,   it was misplaced in lucene-index. o Added QueryContext#topDocs(int) so that you can specify to retrieve only the top N   hits from a search, which may improve performance - even if when retrieving all hits   the iteration all the way down to lucene is done lazily. o Performance improvements regarding the iterator stack which makes up the return IndexHits   instances from query/get methods. Previously there could be 5-7 nested iterators.   Now there are only 3-4. o Added configuration parameter ""similarity"" which controls the Lucene   IndexWriter#setSimilarity(Similarity) for an index. It points out class names."
PrismTech JAC#6 Performance changes. Add optional (default:off) disable client side orb policies.
[WFLY-2476] Work around instability in 7.1.2 server restart op
reporting:    * Improved performance for patient dataset by caching data.  * Added charts and more data to the reporting dashboard.  
merge updateNotification() into networkStateChange for simplicity
Changed service interfaces into abstract classes for later extensibility.
Multithreaded correctness
dos page search functionality
"NaCl: improved performance, useability and security"
i18n. Add Limits functionality. Changes to INSTALL and HACKING documents.
MONDRIAN: Fix for 1671613 Moved Hierarchy null functionality into RangeFunDef vs. ExpCompiler
Optimization functionality
"More extensibility issues - put the renderer in the tile, rather than the name, so that we don't need the factory later"
implemented control ship functionality
Added framework functionality to UI input <-> content wiring classes
added the upload functionality and 90% of the wizard functionality :D
add factory methods for InvocationCountPerformanceMeter
RESOLVED - issue SOAPUI-1437: implement functionality  https://jira.eviware.com/browse/SOAPUI-1437
Add ZeroMQ to PerformanceTest
"Added style-classes to the permission view. Added functionality to have empty rows in WFList when using form elements and AbstractWFEditableListManagedBean. Fixed bug in ContentViewer so that the path is maintained when working inside Contentviewer but reset when clicked on external link...."
add performance test
Encapsulated the class detection for Hibernate models. Introduced a method to detect the Hibernate model for a given object type due to the fact that this functionality is needed more than once.
Renamed Vob + added some stream and project functionality
Bug 431702 - Performance bottleneck in engine executor
topic: code enhanced type: functionality module: other description: MDEditor - namespaces
Handled near cache compatibility for versions smaller than 3.8
Added annotations for templating. This broke the backwards compatibility.
Added Settings functionality and implemented always on top option
moving sun15 provider and compatibility tests back to main project
Fixed dragging of CoolItems and refined appearance while dragging Table without columns now shows first item-text Client-side performance optimization for Table widget Fixed bug# 180978 (NullPointerException when the main window is closed) Fixed topIndex which wasn't reported back to server under certain circumstances
refactor getLanguagePreference for better readability fix invalid language in cookie issue
#NAME?
Updated to latest javassist version. Modified to better mirror WO's KVC API Thread safety improvements Better cache performance
Fix TED #13008 - improve the performance of copying EMF Object and writing chart image.
Performance improvements when selecting best pools
Performance
major performance improvements
Moved MethodLogController and renamed LogController to ApplicationAnalysisHistoryLogController for better readability and maintainability.
OFC-1296 - Check survey compatibility when importing survey
GENERAL - moved sample app to performance test directory and renamed it to test-server-jetty
Completed test cases around new connection methods and backwards compatibility (issue #123)
"Added chat functionality to notifications, added identity handler for shore, modified comms panel for epd ship"
HBASE-18902 TestCoprocessorServiceBackwardCompatibility fails
SOAP-2335 Thread pool (Executer service) support for analytics + removed unnecessary disable functionality
CRUD functionality for Orders and Products for JqGrid added
Assignment C.10.1: Improve performance of index switching and lessen disk usage.
Re-implemented Cache based on ConcurrentHashMap and ConcurrentLinkedQueue to improve performance in multi-threaded environments.
added saving and loading functionality to game
RF-11906: Warning when JMS integration is off but JMS API is available + slightly refactored for better readability
page-fragments: ChoicePicker performance improvement
removing deprecation warnigns and adding test to ensure backwards compatibility
"crecoskie July 8, 2005 - applying patch from Jeremiah Lott to extract some functionality into protected methods"
"Adding back the org.rhq.enterprise.server.measurement.MeasurementAggregate because of the JON 3.2 backward compatibility breakage (for EJB remote clients). This contains also adding a new method, deprecating the old method and the added class so that it can be removed in the next major release."
TEIID-4122 improving the metadata query performance and enhancing compatiblity
Added: Load opened folders on start-up functionality Various improvements
Added AntiVirus functionality. Fido now run only on the server.
performance: refactor the test
Add new separator functionality to meet ISO8601 requirements
added ip address functionality to cloudstack
Shortens method and local variable names in hope of improving the readability of the source code.
Added mid- functionality for AST node lists in the tree walker
more proof functionality
using neo4j labels instead of relationships for vertex type. Improves code and probably performance too.
Added the Prefered Server functionality back
Refactored Nic.java for readability.
Bug 329457 [compatibility] Editors do not get reused
 - performance adjustments
improving tests reliability and speed (work in progress)
Convert to array/arrayList for performance. Changed some iterators to index based iterators.
Closes OOZIE-76 Add coordinator state backward compatibility for DONEWITHERROR and PAUSED
Improve memory efficiency with marker annotations Rename method to fit new instance model
started on refactoring roadmodels to allow compatibility between PDPRoadModel and GraphRoadModel
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Rename test class
Performance updates
Move metadata functionality from MysqlCollection to MysqlMetaDataRepositories.
Use SortHint information in Data Set Design to improve Multipass performance. [38680]
HHH-11323 Update CorrectnessTestCase
describe() instead of getModel() everywhere (it took one year to revert this!) Graphity ResourceBase w/ query/service functionality now extends LDPResourceBase with default DESCRIBE PageResource fixed accordingly
HZN-800: Refactored SyslogTest so that it can test both Elasticsearch forwarders. Disabled Alarmd to optimize Eventd performance.
Fixed two issues related with invalidation listeners backward compatibility:   - 3.7 client should receive invalidations from 3.8 member as if they are coming from 3.7 member. To fix this `canSendInvalidation` method was added.   - 3.8 client should attach invalidation listeners to 3.7 member as if it is a 3.7 client. To fix this `ConnectedServerVersionAwareNearCacheEventHandler` was introduced.
performance and other fixes driven by models of Web pages for JavaScript
156038 - [Cheat Sheet Authoring] Implement basic simple cheat sheet editor functionality
Bug 398733 - [Compatibility] Disable API tests until they're implemented
IDEAS-395 : New encoding tests and quick performance numbers
1. Bug-fixes for 175090 and 175091 2. Map is used to store the project-to-CProjectDescription associations instead of project session properties 3. Basis for functionality of preserving settings on resource rename/move.
"Testing the scalability of the Commit Files dialog. No really, I've removed the old indexer, search and type cache and have fixed all the compile errors that doing so caused. A number of features are disabled to be re-enabled later."
change the package name to conform standards: http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.releng.basebuilder/plugins/org.eclipse.test.performance.ui/readme.html?content-type=text%2Fhtml&revision=HEAD
* ruby debugger hotswap inmrovements * DLTK TCL extensibility mechanism.
1) Testability: EmbeddedService constructor gets storage object from outside instead of creating it themself. 2) Apache Felix File Install updated from 3.1.2 to 3.1.4 3) .gitignore adapted to new directory layout.
First round of performance tweaks. Loading for simple at 12 min now on my laptop with default settings.
Improved performance of Dijkstra and shortest path algorithms
each filter must now be passed explicitely separated by ^ and sharing has 4 options to allow more flexibility also ?0_?0_?0 is a special filter that uses a separate filter class that just emits what it receives and 'none' means that the spout is going to be connected to the terminal
"Fixes for MyLocationNewOverlay where the accuracy circle would not be invalidated properly by one pixel along the edge. Added MapView.invalidateMapCoordinates() with integer parameters in case you don't have a Rect handy, or if your Rect may change on another thread before it is used like in MyLocationNewOverlay."
"Move to Gson instead of Jackson. Create duplicate project processor. Add clients for TreeItem, Folder, Task, Milestone. Code cleaup and factorize common functionality in AbstracServiceClient"
Change upload profile picture functionality to compare lowercase version of filename.
Tidied up and added unit tests for new form loading functionality
"MODE-746 Discovered that the section of code in the JcrRepository constructor that's initializing the anonymousUserContext field is actually using the options supplied as a parameter to the constructor, rather than the options field initialized (with the defaults) earlier in the constructor body. Changing this code to simply referenced the instance's options makes this functionality now work."
split AisView functionality into Legacy web services (backwards compatibility) and newer functionality (AISVIEW-1)
"http://jira.sakaiproject.org/jira/browse/EVALSYS-353 Setup the template processing so that it can now use either freemarker or velocity for template processing (switchable at runtime), also improved efficiency and adjusted logging to reduce the traffic in the logs caused by extraneous junk, freemarker is the default template processor"
Improved way of dealing with config jsonobject keys Added url shortener functionality
A few refactorings in anticipation of more formats that needs some common functionality
Add new checkout method (add param recursive) in the api and default impl's for backwards compatibility
Try and improve performance of Loggers.formatMessage() by reducing the maount of String elements that get created
"Official parallel CountCovariates, passes all integration tests.  Now poster-child example of parallelism in GATK (Matt H).  Apparent general performance improvements throughout too."
added sld and dimension functionality to GFI
Refactored a lot of the partitioner so it is more manageable. This should be the final refactor I think. From here on in it ought to be performance tweaks and bug fixes.
"MODE-677 Created an initial patch that provides basic clustering functionality, although the patch does not yet include many new tests of this functionality. (Such tests will be coming very soon.) The new clustering functionality includes:"
Re add sync versions of StatBlob getters for compatibility.
Refactoring Open Ons testing functionality
Renamed VisItPlot to MagickPlot for accuracy
SONARIDE-182 Improve reliability of resource resolution
Feature #4370 : adding a new portlet to display the last consulted publications - fixing a SQL query that does not perform as it should - refactoring some code - applying the Silverpeas code formatting - fixing a compatibility problem about the portlet titles with already existing Silverpeas servers
Added functionality to deal with roles
[JBTM-1369] Performance harness
"Improving usability, removing unnecessary services and reload state."
Make public the functionality to determine if a class is an implicit Guice component class that can be instantiated by Guice and managed by Jersey.
backend: generalize method names in BlockStorageDiscardFunctionalityHelper
Various fixes  - circular queue  - compact  - async performance
More modularity
Performance: Improve browser caching of artist list.
Bug#: 2232 Usability: No way indicate a warning in a wizard (1GEAR6U)
HBASE-6321  ReplicationSource dies reading the peer's id HBASE-6647  [performance regression] appendNoSync/HBASE-4528 doesn't             take deferred log flush into account
Clean up performance in VBOWithVAO and supply performance test
GSA-515 Nanoscheduler GSA-551 / Optimize nanoScheduling performance of UnifiedGenotyper
V3 of the distributed GATK.  High-efficiency implementation.  Support for status tracking for debugging and display.  Still not safe for production use due to NFS filelock problem.  V4 will use alternative file locking mechanism
* Modifying server plugin config page to be read-only * Adding additional edit page for server plugin configs. * Refactoring several UI beans to share common functionality.
backward compatibility for text viewers
Most functionality complete. Able to request multiple feeds. Need to test further.
216973 New JavaProjectWizard API should expose functionality from internal JavaProjectWizard class
Mercurial Integration is now done with java native library hg4j. Refactoring to clean up the code and to allow easy adoption of other java native libraries in the future. Some unit tests added and classes moved to dedicated packages for better maintainability
removed outline folding (too buggy and performance hungry)
Copy DynamicResult functionality into www-eee-util-misc from www-eee-util-convert and remove the dependency.
[performances] Add a bit of caching to XWikiDocument
cache the highlight rule conditional expressions to improve performance
Added more functionality to cufflinks and updated GTS interface to V0.1.3.
Moved all of the service side RPC functionality to ServiceRunner. Created a ServiceInvoker interface with version specific implementations that take a command and call the appropriate ExampleService version. Changed the names of the constants in ExampleAMQP.
WIP on MIFOS-4831. Added first cut of edit functionality.
[HAMA-593]: Improve RPC scalability (Mayank Mishra via tjungblut)
Fixing jira AS7-2757 by adding functionality to update a current user and roles
Move what used to be AfterGrammar template from a test in legacy runtime tests to tool test and remove from runtime test functionality.
Added functionality to create a buttonBar/buttonStack with a custom ColumnSpec and/or RowSpec
APEXMALHAR-2412 Provide emitTuple overriding functionality for user in kinesis Input operator
Compatibility fix for CB 1317
[MRM-1283] moved first part of browse() functionality over to metadata repository
Issue #1404 Import/export functionality was restored.
"[HER-1053] compressed HTTP fetch: ""Accept-encoding: gzip"" [HER-728] Offer replay stream that has been un-chunked (whether because response was HTTP/1.1 or used chunked in HTTP/1.0 against spec) [HER-1876] Offer HTTP/1.1 option - for chunked transfer-encoding (but not persistent connections)  * FetchHTTP     add 'acceptCompression' and 'useHTTP11' properties, both default false * Recorder     track whether recorded-input is transfer-encoded (chunked) or content-encoded (gzip etc)     offer alternate replay streams for        (1) raw 'messageBody';        (2) entity (un-chunked if necessary)       (3) content (decompressed if necessary)     always content & GenericReplayCharSequence for CharSequence replays * GenericReplayCharSequence     always use a stream (rather than random-access buffer)     always decode to prefix buffer first, so short content never touches disk no matter the encoding * InMemoryReplayCharSequence     deleted; 'Generic' now works similarly for small content and anyway random-access for single-byte-encodings is now rarely possible (given deconding streams) * RecordingInputStream, RecordingOutputStream     adjust for changed stream names, functionality moved to Recorder * ReplayCharSequence     use Charset instances rather than names * ReplayInputStream     add convenience constructor (and tmp-file-destroy) for copying any other inputStream into a seekable ReplayInputStream     "
GUI performance improvements
Performance Tests for the package explorer
Made some performance improvements regarding fulltext writing/searching invalidation. It's still slow though...
"small backend cleanup.  remove unnecessary method getWeblogCategoryByPath(website, category, pathString) from WeblogManager.  that method provides no functionality not available via the existing method getWeblogCategoryByPath(website, pathString) and none of it's callers were using the category arguement anyways."
Completed <recent-items> functionality
Refactor retrieve() to allow us not to connect to the Internet. The act of retrieving the response from the site seems like a nice place to start. It seems like a logical unit of functionality that we can encapsulate to create a seam.
Improved bind performance for large SKUs with modifier entitlements.
Next we just need to add saving functionality
move API classes to hudson.plugins.git package for backward compatibility 
Splitting functionality more cleanly.
"supports legacy bash-style (lower-hyphen) format for key settings, e.g. private-key-file; re-instates needed backwards compatibility following recent locations overhaul"
- Summary: [Chart usability spec#2.2]UI refinement of Meter series
More performance/locking improvements
FORUM-432 | Performance problems when viewing Topic
"changed a lot of stuff around for more flexibility added interface for peptide and protein drawing modes started with splitting up the fasta based and database based data retrieval and preparation added a properties controller to store and retrieve user preferences more fasta support added, fasta files are now converted to internal projects and then handled by the code added more support for quantitation data visualisation"
"1. Renamed directory structure from public/c++/VectorPairHMM to public/VectorPairHMM/src/main/c++ as per Khalid's suggestion 2. Use java.home in public/VectorPairHMM/pom.xml to pass environment variable JRE_HOME to the make process. This is needed because the Makefile needs to compile JNI code with the flag -I<JRE_HOME>/../include (among others). Assuming that the Maven build process uses a JDK (and not just a JRE), the variable java.home points to the JRE inside maven. 3. Dropped all pretense at cross-platform compatibility. Removed Mac profile from pom.xml for VectorPairHMM"
implement general toArray functionality
3D Viewer: Restore setColor() functionality.
Refactoring of 'ObjectCopy' functionality
Improved the performance of IndexedRecordReader by chunk reading
Bug 260732 yellow performance tests need tuning
Move compatibility layer under 'compat' package.
HBASE-16101 Tool to microbenchmark procedure WAL performance.
"adding more functionality in split/join, added chars() usage (#1155)"
Added byte array backed alternative; need to test performance
[91186] improved performance for source validators that validate the entire document for each dirty region (JSP validating)
Issue #1404 WAL performance optimizations. Blueprints tests were successfully passed.
HEAD - Rename binary compatibility to compatibility
Improved functionality of 'Related Data' field and curation of linked Collections
Additional functionality for creating/updating keyspaces/tables and tests to go with it.
improve OrdinalNode performance by resplitting for descendants.  Improve TreeBuilderTest
Small performance fix in DiskJournalIOUtils::writeRecord and moved some of the more general helper classes to util package
"cleanup the code and separate the performance tests from the other tests, including excluding them, and the bio2rdf resources from the rdfjson-tests.jar file"
#NAME?
"Modified DateService to be explicit about date formats, and to use SimpleDateFormat when it's faster. Also modified test to better check thread safety and provide *unreliable* performance feedback"
improve performance on 4.x fix #464
"Tested/Certified LoadIncrementer completely. Squeezed some more performance by containing new Object (HashMap, and ArrayList)"
auto resubscribe The previous implementation only auto resubscribed if the connection was unexpectedly closed. The new functionality copies that of the JavaScript library; it will resubscribe even if the disconnect and reconnect were invoked via API method calls
initlizing array at release time asynchronously instead of at get time so that the time is spent not on query thread. Better typed TermValueLists for better performance.
Refactoring some methods to better support extensibility.
"Version Check code is refactored with phone home code. After hazelcast 3.x version check functionality is deprecated but class names,properties and urls were still containing `version check` related stuff. This pr refactors `VersionCheck` to `PhoneHome`"
"Implement new, high-performance cipher in native code. Currently available only for Linux-x64, other platforms will fallback to Java cipher."
"""Harvest"" functionality moved to business logic layer in preparation for e-mail subscription"
Brought the ComponentProvider functionality up to date with the current functionality. ComponentProviders can be used (currently) to add new menu's + functionality to the client.
Made charts plot points clickable using hudson imagemap functionality.  Now a build plot point takes you to the clang bug details.
Performance fix for non-Windows platforms. Bug 11498
EXOJCR-996: Merge performance improvements
HBASE-576 Investigate IPC performance
"break compatibility with 1.0.0 : typed if are marked with profile, not provider"
Bug 322901 [Compatibility] IWorkbenchPage's close() method is unimplemented
refactor config to xmlconfig and added config interface to improve testability
renamed EditorPage to ContextEditorPage for better understandability
LoopPipe reworked with new valid semantics and emit functionality.
Renamed file for better readability
Accessibility
"Issue #18 - First pass at extracting all text strings on client-side to i18n constants and messages for internationalization flexibility, merged some similar messages, updated documentation, using constants for other common strings in code."
"KPME-2403: Created HrTestConstants containing static references to Core URLs; Accrual Category, Leave Plan, etc ... KPME-2347: Cleanup associated with spring modularity structuring - dataDictionary-1_0.dtd & lookupable beans KPME-2401: Moved PTM and XAPoolDataSource bean fetches to HrServiceLocator. KPME-2405: Preparing core to accept data lifecycles and common test utilities"
Decoupled functionality for creating user profile from the GUI class.
Fixed scene rendering issues and improved performance.
bootstrap robustness for appcore.js (#1148)
"Teiid 773 -  changed the following: -  the testcase will not use system property to pass in overrides/additions to the loaded config.properties file.   Now will use an addProperty() method provided on the abstract testcase that will apply the properties per test. -  remove the  datasource_mapping.xml.    There is no need to distinquish between xa and nonxa connector types.    The connector type will be specified in the connection.properties file. -  if using the -DuserDataSources property to control datasource, it will imply order based on whats specified.    The config.properties file will now map the model to order (i.e., pm1:1), where this order determines which datasource it will correspond to based on the userDataSources property.    This mapping is done so that the nightly testing process can control which datasources are being used and can ensure retestability."
Adding the functionality of persisting evaluations associating with articles
[OPENENGSB-1748] The EKBService now implements the new function defined by its interface. Also added class EKBUtils which handles some code parts needed by the EKBProxyHandle and EKBService. Readability of the three files increased.
improved performance for android
Changed implementation of adding/removing/getting relationships on a node in cache layer. Previous implementation worked with sets but that had a performance problem  when doing small modifications to a node (create adding or removing a few  relationships). This could be noticed when node had many relationships (copy on  write on largers sets was just to slow). 
Updated AntColonyOptimization improved usability
added flexibility to pass in a PredictiveModelBuilder to a StaticBuilder method
Basic Order(Insert/Update) Functionality Hook up order flow with FoodEntry and Index Refactored Interceptors Fix issue of tests to run simultaneously  
EPD-127 and EPD-128: Move intended route functionality to new layer
Core robustness: deleting types (#1011).
HSEARCH-2794 Move performance tests to a common parent directory
cells: Various performance related refactoring
Improve test reproducibility
Improve accuracy of locals tracking in PureFunctionIdentifier.
"[changed] FileType.Absolut to Absolute. [added] LwjglApplication#setSize. [changed] Named LWJGL audio and music threads. [changed] SpriteBatch#renderMesh made private. [added] SpriteBatch#flush (public). [added] Sprite#setTexture. [added] Particle classes and particle editor tool (in extensions). 99,999 particles on the desktop at 44fps (default 32x32 image). Haven't tried performance on a device yet, that will get me motivated to work on it again."
XLCLOUD-594 Modify vcms-gui to use public/private accessibility of the templates
"ICE-8286 fix to re-initialize the component when only the button is dynamically updated, so it doesn't lose styling and menu functionality is re-applied to the new node"
Fix compatibility of build with Java 8
Refactored createContents and added DialogArea for backwards compatibility
"Introduce 'Volume' as abstraction over raw storage (file, memory, disk partition). This introduces flexibility on low level storage level."
Bug 261293: [Scripting usability] Ability to set format of a control without changing the locale of the entire report.
Decoupled functionality for importing the configuration files from the GUI class.
"Dropped [x up/y dn]-type efv information; introduced two types of ef-related descriptive text for the EB-eye dump: one indexed - longer (to increase search accuracy), and the other displayed - short (to de-clutter the search results screen)"
optimize performance
cleanup: moved mutexing and sudo functionality to place where it was meant to be born: SolarisConnection.
"Refactor to rename all ""cliniical alerts"" functionality to ""patient flags"". Only thing not yet updated is .ke-alerttag class in KenyaUI"
Changed help functionality so that help content appears in a modal dialog
MODE-1224 Improved restart performance
Updating CSVStrategy for write functionality
Fixing CAS functionality and fixing nasty bug where the table column is not case sensitive and therefore do can have collisions for base64 encoded keys
[GSCOLLECT-1372] Revert memory tests to use Java 7 for stability.
[PDI-15856] - REVERT. Hadoop File Output variables do not get exported correctly to XML. Added functionality to make having variables in cluster hostname possible.
generator performance improvements etc
Galileo compatibility
GENERAL - created submodule for performance test client
"refactored the code for modularity, added folder batch processing. "
"Memento: Add TimeGateBadQueryException for memento 400 response, add timegate functionality to DatelessReplayRequestParser"
"Initial functionality applied, stresstesting needed"
MVPortals Compatibility changes
"Refactoring pst.TypeInfo for memory performance.  see parser.changelog this is a small step toward a faster parser (see bugs 59468, 54040, 60902, et al)"
Updates to pedigree compatibility checks.
remove runtime.compatibility dependency
HBASE-4180  Check isSecurityEnabled before User.login for 0.21 compatibility
JBPM-4926 Enhance kie-performance-kit to run soak tests closes #304
Improve code readability. Fix javadoc issues. Forward thrown Exception during tests. Remove System.out.printlns.
switched to using test rule scripts instead of annotations. added more rules to test scenario to improve readability and clean up. enabled comments in scripts using # prefix
Improves performance of inprocess testing (#442).
GRECLIPSE-998 Fixed compilation error for Eclipse 3.7 and cached validation rules for Java values to improve performance.
"Versio, Region and Site functionality"
"Unit, integration, and performance tests are all busted, so this is a good time to make a big commit..."
Private: Added basic functionality for Tic-Tac-Toe game.
"MODE-934 Removed some of the code for QueryResults specific to JCR-SQL that was handling the 'jcr:path' and 'jcr:score' values, since JCR-SQL result sets always have these columns. This same logic was now being handled in the base class as part of the pseudo-column functionality, so it was no longer needed.  Also added quite a few JCR-SQL test cases that use pseudo-columns."
"Drop javac7 support: remove jdk7-compatibility shims, and merge jdk8 implementations into core. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=76996707"
Backup tool now checks if target of incremental is older version and backs up and does full backup if needed. Refactored some functionality into exitAbnormally in BackupTool
"TRUNK-4419 Change Dabase1_9_7UpgradeTest to integration test, corrected integration test and performance test setup"
"Improved plugin compatibility, Permissions and Help"
Bug 331441 - [Compatibility] 'Search' menu disappears after installing CDT plug-ins
Adds Bulk Restore functionality to BulkArchive servlet and BulkArchiveSearchResultAction.
Move project watchers functionality to a new class ProjectWatch
Small performance improvement
"Added RuleCacheProvider SPI, enhanced performance of QueryStringBuider, Query, and Join on Outbound Rewrite events. Added non-lifecycle parse() method to ParameterizedPattern, to enable more general use. Renamed QueryString to Query. Prevented duplicate wrapping of HttpServletResponse."
HBASE-3006 Reading compressed HFile blocks causes way too many DFS RPC calls severly impacting performance
"Major refactoring of shards.  No longer uses interfaces but is now an actual object hierarchy with most of the important and common functionality pushed up to base classes.  Eliminated a lot of duplicated code, and the shards are much more understandable now.  Also now require a GenomeLocParser to work with their own GenomeLocs."
improved highlighting stability
"Changed the cron expression just to stop execution for now, and added very basic CSV functionality for TimeBLock"
Merge -c 1241205 from trunk to branch-0.23 to fix MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest & Priority.
"Refactor CveDB - make class thread-safe and declare so (also DatabaseProperties) - prepared statements represented by enum: performance gain, eases experiments when tuning for performance - minor changes/cleanup/code style"
improving code testability and adding some tests
"Slight performance update for the Item Stacker, utilizing Bukkits getLocation that was added"
ACT-628 fixing backwards compatibility of deprecated expressions type
updating the catalog endpoint to handle composite category call (i.e. /catalog/category/{id} will return entire subtree with subcategories with a default depth of 1) updating wrappers to support this functionality
Added new functionality to filters that allows removing and replacing headers and cookies
Rename task classes to correspond to config values and use minutes as the unit for human readability and thinking.
add some instrumentation to collectd to make it easier to detect performance issues
"Toggles the state of the install service button (windows only)  - Added WindowsUtil class with method isUmsServiceInstalled()  - Moved install and unistall service methods from PMS to WindowsUtil  - Added constant NEWLINE_CHARACTER to StringUtil  - Added empty constructor to CustomJButton  - Removed the unistall button  - Update text, tooltip and executed action for installService button in new method refreshInstallServiceButtonState() depending on the installation state of the service  - Copy the service wrapper into the working directory in order to be able to debug this functionality and add thisdirectory to the git ignore list"
#306 Change help provider to non-static / add calls to help functionality
"Complete overhaul of the Find API code structure. It is now more clear how it works. The Add API was changed the same way, but it is still nonfunctional via a browser. (used for R API at the moment) Improved functionality of Find API by showing a login/logout box, plus entities that Anonymous may see. So now there is no more 'security lock' for anonymous, while logging in will (probably) allow you to see more. Auth related entities are always hidden. To make this possible, the behaviour of MolgenisServiceAuthenticationHelper was changed to only print small pieces of HTML. Harmonized use of password string in requests via static variable."
Bug 90815 - performance tests failing consistently (partial fix)
CompositeMove now uses a Move array instead of a List<Move> for performance reasons.
Added more functionality for JUnit tests.
"Performance enhancement for the map.get on the locally owned entries. Significant performance boost for get calls. Locally owned records are cached. Get call will first look into the cache. if found, it will check to see if the record is still active (not removed). if not found, call will continue as normal and ServiceThread will offer the locally owned Record to the cache (only for local calls). if node starts migrating, cache is cleared."
"performance improvement: reduce time taken by performance test from 7.5 seconds to 2.5 seconds (2 tests, gain=10 seconds)"
ROO-1045: Big performance problems with roo shell
"Added ""Copy to Clipboard"" functionality to group chats. Resolves Issue #263"
Changed calculation of modularity score and added reference.  Also fixed typo in PCoA.
HIVE-5951 : improve performance of adding partitions from client (Sergey Shelukhin via Ashutosh Chauhan)
Updated password restore functionality
"Improve lookups for optional Java6 type (DOM, javax.xml) (de)serializers, to reduce performance overhead"
core: Pull up AbstractUserQueryTest's functionality
move atk to new accessibility.gtk package
add complex number functionality for Vector2
"remove unneeded mixin indexing of classes, interfaces, methods and functions (variables & constants is also to be removed when DLTK indexer performance is fixed for IField)"
Performance improvement
"Creating a new EvaluationService and associated HqlBuilder class, and add in the capability that when used together, large ""in"" queries are now done via temporary insertion and joining in a new reporting_idset table, in order to improve performance and memory utilization"
Modified configuration parser to utilize InputStream suppliers to allow flexibility for varying data inputs
HIVE-9106 : improve the performance of null scan optimizer when several table scans share a physical path (Pengcheng Xiong via Ashutosh Chauhan)
ACT-628 fixing backwards compatibility of deprecated expressions type
Improve the accuracy of dangling head merging in the HC assembler.
fixes #597 moved Fluo Formatter functionality to Fluo scan command
no need to compare element with itself when selecting min improve general readability
Bug 24414 [runtime] Plug-in registry performance
Improve DOM conversion performance
Bug 316305 -  [Compatibility] turn viewActions into MenuContributions The rendered toolbar renderer has to deal with contributions now
"Performance improvements:  Implement temporary tables, and be smarter about which transforms are run for which rows.  Improve logging."
[HAMA-367]: Runtime Compression of BSP Messages to Improve the Performance
restapi: Improve addLinks() readability and performance
"Performance: Make ClassWithJavaScript return the java class. We always know which class we are supposed to use when we create an instance of this interface, and it really helps our poor ClassLoader when we remember what it is instead of asking for it every time."
HBASE-9808 org.apache.hadoop.hbase.rest.PerformanceEvaluation is out of sync with org.apache.hadoop.hbase.PerformanceEvaluation
"player: implemented getPlaybackTime and stopAfterCurrent functionality, removed unused logging"
Added logging and performance metrics to all new methods. Cleaned up Javadoc on both classes and in all methods.
More work on performance icache test
"Added inferencing support to GraphSail.  It requires further testing, but its behavior without inferencing remains the same.  Also added MemoryStoreTest as a sanity check for notifying and inferencing functionality which is incompletely specified in Sesame's API docs."
Applied some performance optimizations in CandidateElementExtractor
Aura Flavors functionality and tests
Ensure compatibility with Spring Session module split
Refactored queries for Blueprints 2.4.0 compatibility
SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)
Refactors test for reusability
merge fast functionality (https://jira.jboss.org/jira/browse/JGRP-1191)
"Completly change TypeOrExp parsing to a far more simpler solution.  Fixed some related bugs, updated tests to new functionality."
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Better class name. Replace notion of Generation by that of Parsing
HBASE-5001 Improve the performance of block cache keys (Lars H and J-D)
refactoring to shuffling some functionality into WikipediaDocnoMapping
"major work on memory performance. Providing a driver-created GraphPath object that can be used from within a graph mutator to search for managed versions instead of caching them all over the place...makes mutators nearly stateless objects (probably completely stateless actually). Getting rid of all-projects caching in neo4j driver, which kills performance when retrieving en masse like that, but is also less prone to constant recalculation tax on insert...though it still needs an index per GraphView in order to track membership of relationships and nodes to replace this cache. Performance of other aspects is becoming much more manageable"
CHENT-49 performance enhancements of UTF8 string handling.
Refactoring method names to improve code readability
Add working tests for new r.js optimizer functionality
add more flexibility to the CartographerBuilder setup
More complete demo of swing functionality.
"CDH-11465: add inplace extraction mode for Grok, plus regex performance enhancements"
"Mostly cosmetic update: - Cleaned up Support.write_log usage - Cleaned up generics for various classes to reduce warnings - Some very minor syntax/style stuff - Added a format for glue grammar - Added SAMT reader reading functionality (writes Hiero-style as of now) - Added markup for nonterminal symbols: X is stored as [X] now, eliminating the casing issue"
Autosave activates each PopOv entry. Use kryo to handle serialization. Stubs for similiar config functionality.
"Remove broken redeploy functionality, and change isolation group behaviour to only isolate explicitly declared classes and packages, this results in a much simpler (usually) parent first delegation model which generally helps us all to retain our sanity."
Shelf compatibility and API
Updated PeerUtils -> PeerUtil: * updated methods for more efficiency * upadted documentation
"more pom cleanup; add some missing functionality, like blog/likes, /tagged, some pagination and filtering, etc.; add toString() to many classes to facilitate regression testing; fix avatar stuff; run through full integration test of all calls to verify they work; add a couple fields to BlogInfo"
JBIDE-21050 - allow JaxrsEndpointModuleArtifact to have serialization support and extend ModuleArtifactDelegate for integration with launchbar and more efficient wtp-servertools functionality
ApplyIndexMapping performance improved in two times.
"Add REST support to access the /system URI and execute scripts on connector or resource. By default the development mode allows any script execution but the production config does not allows it. Initial commit contains only the development functionality for testing. Add a symmetric key to the keystore and update the truststore with the default public certificates.   OrientDB Config got a new query to make easy the test the patch-by-query http://localhost:8080/openidm/managed/user?_action=patch&_query-id=for-username&uid=DDOE and the patch [{""replace"" : ""/email"",""value"" : [""ddoe2@example.com""]}]"
Updated Cache to provide flexibility of auto-expiration
refactored episode and video activities to now use live stream table for watch it now functionality
Bug 262377 Compatibility and Usage tests do not respect specified compiler compliance Bug 258101 Explore alternate methods to acquire enclosing method for local types
[BZ 771418] Added back delete methods for backward compatibility and created a new version of the method that takes the display version as an argument.
Eureka Connect comment widget: all major functionality in place.  (B-08349)
"[ACT-1758] Add ability to flexibly configure the command interceptor chain by moving their configuration from the interceptors themselves to CommandConfig. Simplified the command-executor related functionality in implementations of ProcessEngineConfiguration. CommandExecutor split into seperate CommandExecutor and CommandInterceptor interfaces. CommandExecutor now has 2 execute methods, 1 with and 1 without the CommandConfig. CommandInterceptor only has the one with CommandConfig. CommandExecutorImpl renamed to CommandInvoker."
Added the rest of the required functionality for BZ#968925 - Provide a mechanism to add additional revision history entries for translations.
Fix scr bug 97983 : Converting reports to PS results in huge files.      bugzilla bug 213478: Report emitters are inefficient. Optimize the performance of postscript emitter.
Added 'update' functionality
Refactor the new skipping functionality for easier maintenance.
"Safer implementation of ""WindowOpener"" functionality. moving new default location under /workspace/window rather than /window and the componentId is now a UUID instead of a simple int number. Bufixes in Builder Application."
"PLAT-4955 - Remove old convention source, add temporary compatibility methods"
"CORE 	Fixed bug36693 - Problem parsing Loki's Reference SmallObj.cpp Impl 	Fixed bug36696 - Problem parsing Loki's Reference SmartPtr.h Impl 	Improved our error handling robustness so that we don't mistake function bodies for CElements.  	Fixed bug36713 - Parser fails on definitions of pointers to functions  	Fixed Dave's performance test parse failure.  	Fixed bug36811 - The using directive causes parser to fail 	Fixed bug36794 - ClassCastException for A template with no parameters "
Bug 279562 Add functionality to the telnet console
"refactoring to add PaperRecord object, WIP before adding merge functionality"
"Began re-write of CDS pricing model to improve logical structure and accuracy. Began adding the extra valuation functions needed to support all types of CDS (legacy, standard etc)"
Added basic hierarchy service as dependency Put in initial hierarchy logic impl with partial functionality
ISPN-4291 Poor REPL state transfer performance with cache stores
Major and minor changes; project modified; DB functionality extended
REPORT-283:  Consolidate all Excel utilities into a common package and standardize functionality
Refactored GetConfigurationAction for better readability.
Improve efficiency of LOCI Bio-Formats ImageJ plugin. Move readers' DEBUG flags into FormatReader. Begin work on OMETools cleanup.
XWIKI-8360: Code Macro is not multithreaded causing performance issues XWIKI-9162: Unsupported language should have the same behavior than none and not generate a verbatim block
Merge -c 1241319 from trunk to branch-0.23 to fix MAPREDUCE-3697. Support binary compatibility for Counters after MAPREDUCE-901.
Added functionality to convert incoming survey to incident report
"HIVE-12220 : LLAP: Usability issues with hive.llap.io.cache.orc.size (Sergey Shelukhin, reviewed by Prasanth Jayachandran)"
"Performance improvements for entity network controller, wrote beginning of CPS Hook implementation (is unused)"
"Changed compiler to support default handling of extensibility elements across all activities, including scope and process"
"158655 - [Cheat Sheet Editor] New composite cheat sheet editor:  Model, UI, & functionality"
"topic: code enhanced type: functionality, other$ module:  tools description: $add description$"
first impl of reconnector functionality in TCPGOSSIP (https://jira.jboss.org/jira/browse/JGRP-1010)
"slight refactoring of @WebXX handling - no need of threadlocal normally + more generic handling of web-inf/classes (advanced webapp config, not default) TOMEE-572: Store @WebXXX scanning result to reuse them in Tomcat (improve performances as Tomcat does not need to do it itself)"
JBIDE-3635 Fix compatibility issues with Portletbridge distribution
performance improvements
update to sos calsses to improve readability
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Added notion of Bot listener priority (since for ex we want the logging bot listener to execute before the other ones) * Changed way to access the bindings without requiring PR
Remove User/Item abstractions. Preference values are now floats. Lots of API changes to reflect and rationalize these changes. Replace Preference[] with PreferenceArray implementations for memory efficiency.
"Increase edges drawing performance. Edges have also now settable thickness, which doesn't change when zooming. Instead of a line, two 3d trangles are used."
FACES-1494 Improve and enhance JSF1.2 <-> JSF2.0 compatibility layer (BeanManager)
Due to memory and performance reasons array objects are now set to null after they have served their purpose
ti: some extensibility
"added more flexibility to the browser, and fixed bug 17, 'Inactive/Invisible perspective should be made visible when activated'"
"MODE-1583, MODE-887 - Ported and updated the query functionality into the new rest service"
Lots and lots of bug fixes with a few minor functionality enhancements.
Fixing useReqSigCert functionality for JAX-RS streaming XML Sec
simplified code to keep backward compatibility with Modello attributes model changes
Update MPXJ library. Changes to Project Import functionality. Code refactoring. i18n.
refined #BAEL-100 and remove Java EE app for simplicity (#1168)
Bug 299385 -  [UI] clean up errors in compatibility workbench This will allow JDT UI to come up and the Java perspective to (more or less) load
#NAME?
better integration for @WebXXX (tomcat call method we override too much for us so simply skip calls > 1 when processing is already done + fixing bad management of a map in core) TOMEE-572: Store @WebXXX scanning result to reuse them in Tomcat (improve performances as Tomcat does not need to do it itself)
Move over to using byte[] arrays for the actual packets and an arraylist for the packet stack. this improves performance by a huge factor
"Lots of debugging of FrequentPhrases and related classes. Added lots of unit tests for them. All test that are checked in now pass, but not all functionality in FrequentPhrases works completely (namely calculating co-occurrences still fails)."
"Improved performance of AbstractRecord.fieldsRow(), resulting in a 14% performance gain in a relevant Record.setValue(), Record.getValue() benchmark - Regenerated H2 Schema"
broke out to top-level class for readability
added functionality to create regions as a result of an effect
indexAll method uses ItemIterator and returns number of Items indexed Add getNormalizedTitle method Implementation cleanups:   + getTotalInIndex method returns the number of Items in a Browse index.       previously this functionality was clumped together in the       getSomethingInternal() method  + getTargetColumns() returns the correct columns for a browse type  + getSubqueryClause() does what its name says  + getItemId() ditto  + addScopeClause() puts all the scoping logic in one place
Implemented some functionality of Azure template.
Inlined   - transform.FastFourierTransformer.verifyDataSet(double[])   - transform.FastFourierTransformer.verifyDataSet(Object[]) to improve readability.
Renamed package for Preparation step classes. Added command line functionality to execute the VDMTools and generate POG files. Added unit tests for new methods.
[ADD] GUI: better JSON support [MOD GUI: improved usability
moved main functionality into own class and broke dep on british dict
Moved some of the wizard functionality from portlet to swtbotext
Extracts an internal class into its own file for the sake of readability.
Modified Class name to clarify functionality Modified ActionLogController to implement new listener
DaoPerformanceTest??
"Implementing configurability of events, including ordering. o Refactoring out the configuration loading into its own domain service. o Refactoring out the EMS conversion functions into a separate class."
ROO-1506: Significant performance improvements
topic: code enhanced type: Functionality module: deegree-core description: PostGISWhereBuilder is now based on AbstractSQLWhereBuilder.
TrackMate_: rework the DownSampled segmenter for better efficiency
[core] performance improvements for resolving IType[Method]Name from IType[Method]Bindings. Replaced unnecessary calls to JavaElementResolver by corresponding calls to BindingUtils 
added group controller added functionality to get all groups and join a group added abstract class with common method for controller
RESOLVED 361662: Rename OperationMode#STANDARD to SWT_COMPATIBILITY
* Some RSE related performance improvements.
SONAR-6229 improve performance of ES indexing at startup
Added support for using defined property as item ID instead of index of item in query result. There will be performance problem when row is selected and sorting occurs as container needs to iterate through the entire result set to find new index of the selected row. Fixed https://github.com/tlaukkan/vaadin-lazyquerycontainer/issues/27.
SONAR-3825 improve error handling + compatibility of sorting with oracle
Improved the performance of $proceed when it represents a static method. This change does not make any difference on WindowsXP but on Solaris/SPARC.
"Improve performance of preprocess, cleanup code"
Refactor adorned target CRUD for enterprise by introducing new alternateId param - previous data and formatting is still there for backwards compatibility
Improve MathUtils code performance when getting all statistics.
make sure that the header is still OK when the mdat is written (costs performance so just test it when assertions are activated.)
Added new tag enable=discovery-download to better configuration and performance Fixed a bug in handling node deleted event
"#POULPE-435 Exporting database functionality - migration to test with db-in-memory, gzipping, unique keys"
adding aliases doubleMax and doubleMin for max and min respectively renamed all [Max/Min]*.java to [DoubleMax/DoubleMin]*.java and created [Max/Min]AggregatorFactory.java which can be removed when we dont need the min/max aggregator type backward compatibility
"search functionality for ip forwarding rules, with covering of cerner cases"
"Add functionality to Duration/Durational, Separate DurationField"
Bug 267626 Update incremental performance tests
Additional functionality
Removed RelTypeElement and subclasses. All required functionality resides in RelIdArray already so this was just an unecessary layer in the call stack
added rename folder functionality
reimplemented contact approve/decline functionality
move more functionality to overridable LnPrint instead of non-overridable Ln
"topic: code enhanced type: flexibility, configurability, functionality module: deegree-core, deegree-services description: FeatureStoreManager now uses SPI for finding FeatureStoreProvider implementations. Completely pluggable now."
MLHR-647 #close Fix the incompatibility between Malhar0.9.3 and platform0.9.3 
Backport maxNoCall functionality from GATK4
Redo RPM unit test for easy readability and fixed bug in summary template.
#204 fixed serverside issues with private endpoints refactored autocompletion servlet code for better usability
XWIKI-5122: XWikiDocument#getContext and XWikiDocument#getXWikiContext do exactly the same thing.  The name getXWikiContext and the functionality of getContext were kept.
MAPREDUCE-5234. Change mapred.TaskReport and mapreduce.TaskReport for binary compatibility with mapred in 1.x but incompatible with 0.23.x. Contributed by Mayank Bansal. svn merge --ignore-ancestry -c 1483940 ../../trunk/
Atlas-standalone: Scalability changes - modifying how expression values and design elements are arranged to ensure that primitive types are used wherever possible and that the various results are correctly indexed with appropriate maps.
"Revert ""OPLA: improved performance with variable management (avoiding copy for most of the cases)"""
"Refactoring of Sql Data Set Evaluation to use a new SQL evaluation code within the SQL Query Builder.  Aims to solve consolidate this functionality and solve a number of outstanding tickets, including:"
Preparation and investigation for compilation. ASM chosen as framework and initial performance tests using hand crafted arfefacts. Speedup is between 2 and 5. 
[PLAT-3508] - Fix poor performance of market data subscriptions
[JBTM-1464] report results of txoj performance tests
[SLICE-95] extended functionality of JcrProperty tag
Handle the case of indexing points in a better way to ensure correctness. Point#getMBR now returns a very small rectangle rather than a rectangle with zero width/height.
"added hibernate constraint violation resolver. improved performance and coding style on existing vendor violation resolvers. pattern compiling is now only done once, not per invocation (twice)"
#NAME?
Rename to make the functionality more obvious. Addresses #28.
Add property persistance functionality to catalina JMX listener for mod_cluster by saving the configuration directly into the server.xml file.
"Revert ""Bug 441726 - JDT performance regression due to bug 410207"""
Parallel memory shard loading --> much better performance.
"[CXF-4161] - Support processing a UseKey Element that uses a SecurityTokenReference to another token  - Only merging this to trunk, as it breaks backwards compatibility in the KeyRequirements class."
Added open and showOpener binding for more flexibility in usage.  Started moving toward something less tied to Modalbox.
"Initial commit of metadata generator support for the IUs and artifacts for eclipse features. Two IUs are now generated per feature: the group IU which has been renamed to id.featureGroup (e.g org.eclipse.platform.source.featureGroup) and the IU which actually holds the feature artifact, id.featureIU (e.g. org.eclipse.platform.source.featureIU). A filter of ""eclipse.p2.install.features=true"" is applied to the installation and configuration of the artifacts. This property is now set in the profile, but we need to better define the Update Compatibility use case to determine the right way to get the filter set. Currently a vm arg (system property) -Dorg.eclipse.p2.update.compatibility=true  is used to  feature installation by setting the value of the ""eclipse.p2.install.features"" property in a new profile to be the value of the system property."
merge duplicate wheelchair accessibility fields
IDM performance - use hibernate flush instead of commit/begin
"Experimental linear version of the exact model.  In testing, but gives identical results to N2 gold standard version, and passes integration tests.  Performance optimizations still ongoing."
More functionality added
Improved error handling and connection performance in CloudService.
"Completely pulled everything but CloudStackClient calls from ec2Engine, it builds/compiles, but lots of functionality is currently broken"
"o Made metadata immutable, fixed interaction of relocation and dep mgnt (relocated version must not be managed), tweaked performance of tree construction"
More filling out of functionality to drive JRuby invoker work.
"Outages Suppress UseCase, final view checked in Now all functionality is Springified. w00t"
add KeyColumnValueTest for HazelcastKeyColumnValueStore (+ performance improvements)
Improve startup performance for nested JARs
"Performance improvements for matrix selections, for example: x[i, ]"
"[changed] SpriteBatch tests [removed] SpriteBatch.draw() that took an array. No performance difference on desktop or android to non array method [added] Sprite2, a counter suggestion to Nate's Sprite class [changed] added new SpriteBatch.draw( Sprite2 sprite ) method. "
"[feature] readded SSL-Functionality for http-components:  - enabled 443,8443 as default ports  - renamed property from ""httpclient.ssl.factory"" to ""httpclient.ssl.context""  - renamed property from ""httpclient.ssl.factory.defaultPort"" to ""httpclient.ssl.context.customPort""  - renamed KeyStoreSSLProtocolSocketFactory to KeyStoreSSLContext"
ticketmonster tests stability
[NGRINDER-28] Develop performance test module: test listing and editing function  - enhance perf test search - change test edit page L&F
"-- Add PerformanceMonitorFilter to the spring project (thanks Jon Moore) -- Add WrappedException in support of the PerformanceMonitorFilter -- Enhanced and consolidate the jrugged-examples project 	-- Removed a second Spring example by collapsing it into the original web based example. -- Added a test for the PercentErrPerTimeFailureInterpreter -- Corrected some defects in PercentileTracker -- Removed PercentErrPerRequestFailureInterpreter as a bad idea I birthed."
All changes required to make loading and importing tables and networks available from command lines. Few issues need to be improved but the functionality already works
removed unused code to improve readability
setElements functionality with double arrays
Fix #157 adding utility context back for backwards compatibility
Beginning of test for verifying correct functionality of distributed cache.
readability improvements
Admin functionality moved to new package
"Addition of a connection property to set default schema (aka search path). Better compatibility for setSchema (supports older backend versions, and take null to reset to the default)"
"replace the didyoumean results directly in the boolean query for performance all result properties are kept backward compatible as string, in the future it may be better to return the terms instead of strings"
"Major refactoring of spatial library. Should be roughly ready for public consumption at a high level, but functionality isn't working yet."
PLAT-6550 - Enhance comparison performance of primitive-based pairs
Use optimized Char functions to improve performance
Don't return null on an unexpected EOF unless the document is empty. This brings us back to compatibility with GSON 1.5.
cat performance optimization
Added more functionality to the test suite.
added add/remove functionality and commands
Changed PlayerProfiles to serialize as a Map instead of ConfigurationSection to increase compatibility.
Improved replacement functionality in the base transformation assistant
#NAME?
Updated testability
TESB-9116 - finalize replacing of old SAM REST-like API on sam-server-war with new SAM REST API on JAX-RS service  - backward compatibility fields renaming
HBASE-10791 Add integration test to demonstrate performance improvement
"Silk Touch Functionality, Material cleanup"
* Created ProbesType class which defines the different probe types. Moved additional instantiation checks to Probes class. * Added more tests for probes package. * Enhanced probes to measure operation counts. * Added new WorkerProbe which measures operation counts but produces no results. * Replaced AtomicLong operationCounter in AbstractWorker with concurrent WorkerProbe. * Fixed overwriting of probe result files by adding testcase id to filename. * Fixed some performance number outputs (column order and width). * Fixed most checkstyle issues.
extracted Ide.usageInExpr() from Ide.analyzeAsExpr() which is just the functionality needed in Catch to analyze the type clause
MAHOUT-796: SSVD power iterations; performance patches.
Bug #1261: Extract method createTab with common functionality for each tab
Move core functionality into a sub-module and add a unit test.
Hotfix for compatibility problem observed in live server but not caught by test.
added game opinions functionality fixed cache for getting games by gameADU
Work in progress on story 2183 - hunting down CurrencyMismatchExceptions for CDLP work * this commit allows group performance history to render when one or more clients has an alternate currency loan that has been disbursed and/or when they also have a disbursed default currency loan. * added a new properties file SharedMessages.properties that has messages that can be accessed from java code using the MessageLookup class.  This is where the error message for multiple currency mismatch in performance history calculation lives.
added beginnings of performance testing for sif loading
"Very basic functionality for annotating indels (specifies whether the indel is frameshift, inframe, or non-coding).  Does not attempt to recalculate the variant codon, variant amino acid, or whether the site falls within a splice region.  Added a convenience method to WalkerTest for building command-line arguments with the proper spacing (so that I stop getting annoyed when I've gotten it wrong and the test system yells at me."
"Fix for Bug 102033 	  	[Performance] TableViewerTests too fast on windows"
refactor(rest): refactor common query functionality
PErformance improvements
"Refactoring handling of Java7 compatibility functionality, to further encapsulate it"
"change resolve() methods to not return Artifact - but instead modify the original. Artifact is immutable except for version so it is safe - but will it cost flexibility later. Currently, this makes it much simpler as less copying vigilance is required. This has ironed out most wrinkles. Still need to implement the snapshot checking cache, and special case the use of installed snapshots over deployed ones."
Reorganise classes to use (soon to be standard) SAMP_HUB environment variable not (non-standard) jsamp.lockfile/jsamp.profile system properties for hub location configurability.
Opening neo-1.0-b6 optimization branch (kiwi) that includes a lot of performance (speed and memory) improvments. List of changes:
"Total compatibility-breaking package reorganization, sorry."
"Significant fixup of ExcludeFilter functionality. refs #627 Remove 'range' methods from ExcludeFilter. Provide new excludeUpto() method to provide required functionality for searching using Interests with incremental Exclude filters. Provide new uptoFactory() to generate Exclude filters to match components upto a particular value. Fix up ExcludeFilter test/add methods to handle new ExcludeAny class correctly. Move ExcludeElement class inside ExcludeFilter as Element. Introduce new Filler class as subclass of Element, and superclass of ExcludeAny and BloomFilter. Remove matchEverything() factory on BloomFilter."
improving DBUtil.getNextId in order to avoid infinite loop... renaming SilverpeasArrayList.newList fixing a problem about IN parameter splitting improving performance on result set wrapping of JdbcSqlExecutor fixing a problem about the group synchronization fixing the IN clause handled by JdbcSqlQuery in order to throw exception when no value to set fixing the case of mixed domain fixing a problem on the user modification page when an explicit notification limit is set fixing the deletion of a user fixing the deletion of a group fixing back button of group management page fixing the transaction management around Admin implementation of Administration interface coding integration tests which show the differences about transaction between a singleton or a simple instance fixing user favorites displayed from administration fixing potential NullPointerException on domain deletion cleaning correctly the group and its subgroups caches on deletion process fixing the update of group where synchronization rule was not set to null when not defined fixing the user search on last name criteria avoid getting stacktrace log when someone accessing a file whereas it has no right on removing no more used properties from general.properties (about java applet)
Added new license plugin to update Java sources. Added new copy functionality to IOHelper.
Fixed start of WorkerPerformanceMonitor although CLI parameter was not set in Coordinator.
MAHOUT-706 use reusable TokenStream in Lucene for performance
[PLAT-3186] Miscellanous performance tweaks
Adding the ability to specify the type of output to a file while maintaining backwards compatibility with the current options.  Also allowing a new output type CSV_TS which prefers the unix timestamp of the entry first.
Bug 303682 -  [Compatibility] Create the legacy handler service
Improved the CountDownLatch functionality.
Added image-stamp functionality to CanvasExample
"DNA-468 Simplified the design of the Lucene search indexes, which improves the performance signifantly (the TCK unit tests run approximately 10% or more faster). The performance improvement should be even higher when there's a lot of content and the queries have more criteria."
function call performance optimizations and some cleanup
"Massive refactoring to improve performance and avoid opening a browser before every test, even pending ones."
SWITCHYARD-1245 Improved fault reporting and flexibility
"moving more functionality (cycle handling, missing/variable ref handling, etc) to the driver, and fixing tests. Still need to figure out how to store / navigate cycles in the neo4j driver."
Better ChatMessages. Preparing for better performance and solving issue 283. Upgraded to GWT2.0.3
"Added some general debugging tools, and began work on Performance measurement tools."
STS-3238: content-assist for @ComponentScan - improve performance
"continue migration; implement base functionality (without CalendarDataModel), move utility methods to the CalendarHelper class, add currentDateChangeEvent support "
implemented repair functionality for nobroaderandnotopconcepts issue
"override read(), leads to ~10 percent performance increase"
pom.xml updated for Gatein compatibility. Minor refactoring.
Refactoring SynchronousDispatcher to allow for more reusability in the Spring MVC framework
"Improve usability of ""Create New Tag"" dialog"
"WFLY-2080: Moves all functionality to save context, i.e. the ContextHandleFactories, into each ConcurrentContext instance. The context is saved in a context handle that chains each factory's individual context handle, and which manages serialization tasks. Each ConcurrentContext is installed into MSC, to support deserialization. Two additional context handle factories are added to, one that builds handles which add Other EE Setup Actions to the invocation context, and another one that rollbacks any started transaction left open."
bunch of EOM<=>WOLips compatibility fixes
Initial check-in for the Option Value Handler functionality fixes
"WICKET-670 Merging in changes from my experimental branch: - made new submodule, wicket-devutils - moved statelesschecker (et al) as well as inspector bug and all related classes to devutils - added debug setting for enabling or disabling the inspector functionality - created a debug bar that can have components added to it dynamically "
finally fixed precision problem (but 10% performance drop)
Refactored DefaultMapperFactory to provided extensibility. Added Extensibility test Added capability to disable auto-mapping functionality Removed reference to convertersMap which was always empty after Converters refactoring performed in a previous version.
GDrive functionality in core
[#6] Improved restartability and reliability during abrupt shutdown
"+ Further repackaging and consolidation + Tested compatibility with @Value (works, but noticed and filed an unrelated-to-javaconfig improvement. See SPR-5530)"
Created util for MessageDialog to prepare examples demo for JEE_COMPATIBILITY
Performance tweak
"MONDRIAN: Integrate from mondrian-release/3.2 to main @14042. This is the last     tranche of integration from the 3.2 branch. It includes various performance     improvements, and the switch to a JavaCC-based parser. Also fixes a     checkFile exception in Util."
Robustness improvements
"MONDRIAN - refactoring and performance enhancments for NativizeSetFunDef.  Introducing two new properties, NativizeMaxResults and  NativizeMinThreshold.  These were hard coded in previous revisions"
"EHV-52 - changed concept, User will be combination of db user and LDAP and UserService combines UserDao and LDAP - always enriching the User object             - fullname of the LDAP user is persisted in eHour to improve performance for reports;             - UserDepartment table is dropped             - Audit does not link to user table anymore             - many many minor changes related to the changed User obj"
"Reorganised JBehave directory structure, and implemented functionality to calculate a solar activity score for a given location"
* extend functionality of filtering OSM stream to filter by tag key-value * refactor CLI interface * prototype serialization of loaded entities
"J-522, J-493: Enabled multiple Jersey apps within a single WAR/JVM               Jersey based HTP handler made public so that multiple Jersey handlers could be used in a single Grizzly HTTP server               Introduced a new, jersey-cdi1x-validation, module that avoids double-validation of CDI based JAX-RS methods               New tests added for the above functionality (EAR and Grizzly based)"
added more category functionality
"added subscription functionality, started query dispatcher implementation"
rename SpritePerformanteTest2 -> SpritePerformanceTest2
Add functionality for tableMain
Further refactoring for readability
Move up common diagonal matrix functionality
performance workaround: remove building file hierarchy each time when type hierarchy is being built
#NAME?
Several usability fixes; added 'save as' functionality for projects. Refactored 'save project' to store to the same file.
NOJIRA added in reflection caching to improve the efficiency of the id value retrieval and the entity description methods
"New timer implementation, added some hudson functionality"
Added new map functionality. Performed deep tests and fixes
Fixed Bugzilla #311494 - [Accessibility] The contents in the pattern pane can not be accessed.
"HIVE-8664: Use Apache Curator in JDBC Driver and HiveServer2 for better reliability (Vaibhav Gumashta, reviewed by Thejas M Nair)"
"Continued cleaning up project, enhancing functionality of project and demo, edited message campaign file"
"topic: code enhanced type: functionality module: other description: mdEditor - support of defaultValues, selectFormFields and codelists"
*added preferences for choosing commands *added gps enable/disable *added engine displacement/volumetric efficiency options *new fuel econ methods *added option for changing units
"Added the remaining missing functionality, setting and removing properties Added tests for the above Added javadocs"
"- Reviewed by Will per ENG-209. - Updated orderloader to generate agnostic messages by default and be able to send fix messages as well. - Updated orderloader to use the client instead of doing its own jms communication. - Updated the unit tests to run in junit 4 instead of junit 3. - Added 2 separate maven profiles for running orderloader in sys and fix modes. - Updated assembly to use the new orderloader class name and copy different csv files as sample input - Moved all FIX specific functionality into fix sub-package. Old OrderLoader class has most of its functionality in FIXProcessor.java - orderloader.xml has been removed - orderloader_base.xml has been renamed as orderloader.xml - FIX42-orderloader-text.xml has been renamed as FIX42.xml - Renamed reasonableOrders.csv & smallMarket.csv files to have FIX suffix and created files Sys from them for sending agnostic orders - OptionsProvider interface to CliContext to be able to extend command line parsing being done by authentication libraries. - Included a fix for EG-381, not unit tested; will add unit test in a subsequent checkin."
"Implemented Add Feeder functionality. Implemented Remove Feeder, but not quite complete in ReferenceMachine. Made the board name in BoardLocations uneditable. More feeder configuration work. Configuration docs update."
Some renaming and refactoring to improve readability
Group functionality into methods
"CSPACE-5294,CSPACE-4579,CSPACE-5241: Minor tweak to FileTools method, to revert to defaulting to system encoding, as suggested by Richard. Traced and documented behavior of a key macro variable expansion method in Imports service, in part to verify CSPACE-4579 functionality and in preparation for work on CSPACE-5241."
#65 #124 Wrap results in listgrid fixed grouping functionality
changes to performance measurement
"Proper handling of verse 0. Added methods to Versification:     isIntro, isChapterIntro, isBookIntro (to allow front-end to skip verse 0).     next(Verse) to optimally get the following verse. Removed skipping of verse 0 from BitwisePassage.iterator, AccuracyType, AbstractPassage Optimized Versification for common operations. Optimized VerseRange.VerseIterator to not call v11n.decode"
WELD-1787 Avoid performance degradation when the same Event instance is used to dispatch different event types
"move back to pre-1.0 package names, for serialized form compatibility"
SONAR-5010 improve testability of web service and fix media type of response
"http://jira.sakaiproject.org/jira/browse/SAK-15490 Merged in all changes made to the entitybus codebase from revision 8-49 This includes a number of critical fixes and improvements to the usability of the system, it also completely removes the usage of JCL and thus corrects the last of the classloader issues"
Introduced Append Data functionality. A user can now choose to either append the data of two files together or overwrite the data
"Redesign GuardLogStatement: Turns out that the implementation based on the one published by Heiko Rupp could simply not catch all the case in our test suite. I therefore opted to backport the previous implementation - a simple Xpath rule, from GuardDebugLogStmt into a java class. Performance are not as good as the one based on Heiko's proposal, but it still twice faster as the simple GuardDebogLogStmt (instead of five times faster). However, correctness is in this case more important."
Refactored plugin loader to use more methods for higher flexibility.
Pulled up common functionality for supertype replacements Changed terminology from interface to supertype
[GSCOLLECT-1288] Implement additional performance tests for ParallelIterable.
chunked up a complex method for simplicity/readability
removed dependency to compatibility
"JRobin 1.4.0 - Major graph datapoint calculation rewrite - Added elaborate Export support with RRDtool like functionality - New classes: RrdExport, RrdExporter, RrdExportDef, ExportData - New interface: RrdDataSet - Value grid tweaking - Several minor tweaks"
"XWIKI-8355: Define XClass property types using components * Return the property type hint in PropertyClass#getClassType() instead of the full Java class name. * Use the value of the ""classType"" XML element from the XAR as property type hint (extracting the hint from the Java class name for backwards compatibility). * PropertyClassInterface should extend PropertyInterface. * Add a PropertyMetaClassInterface interface following the existing pattern. * Add a PropertyClassProvider role that can be used to retrieve a PropertyClass instance and its definition (the associated meta class). * Transform all the available meta classes in PropertyClass providers. * Apply checkstyle to meta classes. * Modify MetaClass to lookup the PropertyClassProviders instead of hard-coding the available property classes/types. * Make sure MetaClass is backwards compatible by extracting the property type hint from the Java class name if needed."
base gui functionality;
added a performance test for traversing nodes; estimates 38m characters per second for CharacterNode (a simple regexp)
HBASE-975  Improve MapFile performance for start and end key
"Various performance related changes:  - A property block is now removed from the property record as soon as is set not in use  - The above makes the inUse field of PropertyBlock useless, remove  - DynamicRecords of deleted blocks are moved to the containing PropertyRecord, to be added in the XA log  - When a PropertyRecord has just the position in the chain changed, it is not written out whole in the log - just the pointers  - Removed a bunch of iteretors and unrolled some loops in store operations"
HBASE-975  Improve MapFile performance for start and end key
POULPE-469 Testcoverage and refactoring for Database backup functionality - small fixes for Exceptions & GzipContentProviderTest
"Taint safe objects config: Refactor for consistency, minimal / no effect on performance"
Flexibility for ring start angles.
Improved robustness and error handling.
performance!!!!
Add @Producer functionality to the event bus.
Fix performance issue in CE when many files have being deleted/moved
"Implemented a performance enhancement. Metadata cache spools up faster, about 20%."
Performance improvment for Element.text
BZ1014071 - DataModelOracle: Performance issues when model is large
performance tweaks
TURMERIC-1350: move validator functionality and packages to eclipse.core.
"Added lastTxId and logVersion to XaManager mbean. This can be further evolved to split this bean into two, but that would require backward compatibility consideration."
refactoring to increase extensibility
"Port the resource preloading architecture. Rather than making PropertyConfig also responsible for resources,  I created a new SceneElementConfig class that layers SceneResource functionality on PropertyConfigs. This way  PropertyConfig will hopefully stay more of a generic utility class."
Track AST size in PerformanceTracker.
Store images in the ImageRegistry provided by AbstractUIPlugin and rename Visibility to ValaSymbolAccessibility.
"New way to deal with compatibility and bans. When we ban an IP it's added in the banned ip file of bukkit to be sure if the method is not there in the event, the ban will be proceeded. See #70 & See #63"
[KARAF-2628] Fix synchronization issues in the commands completer [KARAF-2307] Fix some backward compatibility issues with commands Fix completes so that they only complete with the correct command (i.e. do not show options for other commands with the same name but a different scope) Do not register the subshell service multiple times
GC performance benchmark
added shortenString functionality
Split the big data migrator class and decouple functionality from the big main class.
"Generalized the concept of accessing the javadoc from test cases, that functionality is now in the kernel test package."
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Move IRC Event Listener out of the wiki package since the wiki package is only about the wiki bridge (i.e. for Wiki IRC Bot Listeners)
"CSPACE-1364, CSPACE-1365 moved gen/seed of authorization to import module in order to expand the functionality to generate permisssions for all the services as well as all the permission-role relationships for bootstrapping purposes.  test: authorization-mgt all service tests"
Fixed ModuleClassLoader to improve module interoperability - #537 Moved all test cases into org.openmrs.test package Added comments/descriptions to some classes
JBRULES-1915: Improve process persistence usability  - fixed persistence / transactions solution
"vishnu, gopal | #136 | Added restricted_elements functionality to InfoParser."
Implement #78: Add JMX performance stats for non-sticky session operations
"Atlas Standalone: Lots of loader performance changes.  Some of the scalability fixes I made to the parser have had knock-on consequences in the loader that needed resolving.  Everything should work now though, and slightly more reliably than before.  I think this has fixed the strange parser-timeout problem that could someitmes be observed before."
RecordSummaryQueryBuilder performance improvement
Moved annotation and cache functionality from the HistoryParser to ExternalRepository
A couple of changes for performance:
135: Add functionality to filter out variants that are incompatible with inheritance 
still working on performance improvements: refactored Paths in order to avoid use of IOService
More settings flexibility
Try some performance optimisations: mainly pre-computing and storing the hashCode values for the likes of Dotted.
"158655 - [Cheat Sheet Editor] New composite cheat sheet editor:  Model, UI, & functionality"
"Fix #76, #77, #78, #79 - add sortArray and sortList to SortContext for backwards support (marked deprecated) - cleaned up SortContext for consistency and performance - add HTMLContext for HTML-based pagination support for legacy support - updated BeanAnalzyer to attempt to fix bridge method issues - add missing messages in type checker properties"
Started work on managed beans integration. Functionality still needs to be wired up.
SONAR-5056 Fix performance issue when converting new rule to old rule
Added SuperCaller functionality to all event mappings
dump performance tuning
"Created entity factory, changed ExistingFileMatcher to use WorkspaceFile and added splitting functionality to WorkspaceFile"
Performance improvements
"CheckIn: Fix bugzilla bug 313472 [Accessibility] The data set editor is resized after click ""Finish"" and the contents can not be shown completely under High Contrast mode."
CheckIN:Enhance cube generation performance.
restructured XFormsFilter; created a XFormsFilterLegacy class (keeping non-scripted operation); created WebTranscoder class to host functionality related to xslt transformation; moved xforms session registration in cache to init() instead of handleRequest(); removed some wrapper methods in AbstractProcessorDecorator
Remove User/Item abstractions. Preference values are now floats. Lots of API changes to reflect and rationalize these changes. Replace Preference[] with PreferenceArray implementations for memory efficiency.
(Task SAM-376) added grid to graph and extracted methods to improve readability
#NAME?
Put the internet handler data in memory to improve the performance.
Committed the new version of MVRB+Tree with better performance with large indexes
usability - improved usability and fixed the environment creation workflow
Added more functionality for JUnit tests.
MODE-681 - Committed  JcrResultSet and related changes.   This is the first of (probably several) checkins as the JcrResultSet functionality is being added.  It also includes testcases to cover related functionality.
fixed camp radius calculation removed ecoUW wrapper for Wolf class removed uQuest options from ecoCreature.yml massive code renaming and reformatting for readability and my sanity
CORELIB-SOLR Extended MongoDB functionality and Refactored Corelib-SOLR structure - TODO Unit Tests and complete Proxy EDM Fields 
"Weld SE, Servlet - set bean deployment archives accessibility clearly"
"Provide hooks to match fixed bugs, to handle version instability issues"
DDF-2025 Restore backwards compatibility for ActionProvider (#948)
[JENKINS-46700] symbol support for better pipeline compatibility
"topic: code enhanced type: performance, scalability, stability, flexibility, configurability, functionality module: Georeferencing tool description: restructuring regarding to the MVC "
Performance optimizations for rules generation in CSS module
XWIKI-12263: Add support for Nested Documents in the Create Action - Cleanup to make checkstyle happy (reduce if branch nesting) - Cleanup to improve readability by reordering methods based on call order
"HashMap dependenciesOnFromTo and related initialize and get methods moved from Validate ConfigurationServiceImpl to Analyse FamixDependencyFinder. Method getDependenciesFromTo() included in IAnalyseService, to make the functionality reusable to other components too."
BookKeeper: Local Bookkeeper enhancements for testability 1. Allow creating local bookies without always starting a zookeeper server - This is required as tests may want to create and use their own instance of a test zookeeper 2. Allow using non default zookeeper host and more importantly non default ZK port 3. Allowing the caller to specify the initial port for the bookies 4. Optionally shutdown bookies when the bookie thread exits
ISIS-903: fixing backward-compatibility breakage of FixtureScript#ExecutionContext API.
Move common functionality from AbstractDomain to DomainUtils
Moved all the driver functionality to seperate module to prevent relying on unrelease benchy dependency
Added functionality to see what Classes in the same package are being referenced and automatically adding an import for them.
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#handleTypes(MetadataBuilddingOptions)
Deprecating old yield curve functions and increasing functionality of config populators
WELD-1042 Fix handling of additional BDAs and their accessibility rules
"EST-1601: moves supporting next and previous functionality up to DomainObject_triggerAbstract, genericising it."
#103 disable bookmark functionality depending on loggedin status and db connectivity
The buildin Score implementations (including their ScoreCalculator and ScoreDefinition) have been moved into a package per implementation functionality. => tests
Mercurial Integration is now done with java native library hg4j. Refactoring to clean up the code and to allow easy adoption of other java native libraries in the future. Some unit tests added and classes moved to dedicated packages for better maintainability
Rename methods for readability
More CPD performance optimizations; thanks again to Steve Hawkins
NGRINDER-28 Develop performance test module: test listing and editing function
Further performance tweak for Enumerable based on Iterable. Improve javadoc.
Visualization performance
"Fix a number of locking, performance, and race condition issues"
NOJIRA Major refactor and simplification of cspi-services complete; removal of __auto functionality which was interfering with simplifying implementation; addition of request cache into cspi- to allow efficient querying of services; correction of existing unit-tests from 0.2 to work with 0.3 changes.
TRUNK-5063: Extract private methods from ConceptServiceImpl.saveConcept(Concept) for readability (#2197)
"- Summary: [Scripting usability] Expressions in report design should use a new syntax to differentiate them from static strings,[Scripting Usability ] BIRT Model, Designer changes to support expression in default value"
"#374 reverting most changes because this broke backwards compatibility in spectacular fashion :). We are using Java 8, and RowListener is used in ExpressPigeon a lot as a lambda expression."
Extracted common super type refactoring functionality
Bug 315133 [Compatibility] View references need to be updated when switching between perspectives
* Refactored position engine to use a single row type for summary and regular rows (was having problems with generic glazed lists) * Added Grouping functionality  * Added incoming position API * Added trader id to ReportHolder
"[SPR-5995] Renamed makeNotifier() to springMakeNotifier() in order to allow compatibility with JUnit 4.5, 4.6, and 4.7."
Improved global transaction performance. 
Compatibility update for 1.2.3
Refactor the ListEditorComposite to provide better modularity for buttons.
"Refactored OrbBarrier to Barrier interface, implemented OrbBarrier with O(N^2) efficiency, wrote unit test (OrbBarrierTest)"
Extension of Bug 50425 - changed extension point child labels - saving show active/all plugins setting in memento - added bundle context to PDERuntimePlugin - added collapse-all functionality to toolbar - added show active/all plugins to menu in toolbar (no longer in context menu)
ROO-2903: GWT add-on does not fully scaffold an application when --activeRecord is false and a repository is used - tidied and documented to improve readability
Initial checkin for Assets and Media handling.   Work in progress.   Includes image upload functionality.
"Move most functionality to base class, support for setting configuration entries, notify the plugin administrator when configuration was changed"
Added report functionality for tb cohorts smear not done 8-12 months earlier
ISPN-3218 Support non-byte array replication in compatibility mode
SONARPLUGINS-557 Compatibility with sonar 2.2
HEAD - Improvement to speed-up local Windows performances tests
"ma: type hierarchy usability, copyright headers"
Refactoring of type info related functionality
"Added Comparable functionality. Initial CollectionBeanImpl impl, but both untested."
"Added export folder option for examiner, performance improvements for chunks component"
"adding a simple performance test of the Cueball writer. it's hella fast, but there seems to be some indication that performance could improve a lot with compression."
Efficiency.
Removed jersey/rest functionality and replaced by simple socket communication
"Improving, improving, improving performance"
now CoGrouperConfig and SerializationInfo uses lists instead of HashMaps for efficiency
ACT-2037: Performance - Bulk deletion of variables at process end
"Bugfixes following Marc's comments: java 1.4 compatibility when calling the ESTs, plus misc. minor fixes."
added functionality for node static node building
AVRO-1933: Add more specific error details to SchemaCompatibility class
43593: Fix the performance issue caused by 43404
Quartz job to start node maintenance. Also consolidate storage node functionality into the storage node bean.
SONAR-2227 Manage plugin incompatibility at sonar startup
Moved import and export functionality from abstraction layer/package to task layer/package
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
#NAME?
"SHIRO-205: Filter bracketed config with nested commas now no longer needs to be quoted.  E.g. the following is now a valid chain definition:  foo, bar[a, b], baz[d, e, f]  (it was previously required to be: foo, bar[""a, b""], baz[""d, e, f""] ).  Backwards compatibility is retained by stripping quoted config if it exists.  Test cases added."
"2004-11-10 Alain Magloire 	Fix for PR 51113 and PR 66268 	It allow more flexibility in the GDB console, for example 	when gdb require interactive questions."
STS-3690: Factor out browser functionality from gettingstarted.
more performance testing - moving files
Separating components to promote modularity as an architectural feature
Corrected a missing field parameter in Metadata for IUSes (it wasn't checking for barcodes). Added functionality for adding annotations in the BatchMetadataInjection class
issue #252 : improve MongoDBRecordWriter performance by using bulk writes
Added index report as well as basic application report functionality (no specific reports generated as of yet).
Additional show-all functionality for import/export wizards plus cleanup of other show all support.
Fixed performance degradation when creating lots of entities.
Bug 298671 Implement enough compatibility to bring up a simple view
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Pull up JDBCMetaDataConfiguration#metadata
Yet MORE synchronization updates to fix a couple SSE holes and improve performance.  Some aesthetic refactoring.
"General compatibility update for BKC and CB, fixed itembuffer bug, added lighting fix completion msg"
Improve ParserInterpreter code simplicity
Removed public exposure of the average formula to open the path for its configurability
[ANA-154] Relative outperformance option definition and pricing. Refactoring to allow definition of two-asset options.
MAHOUT-846: Improved scalability of GaussianCluster.pdf. Introduced some beginnings for MAHOUT-933. All tests run.
Removed MavenClasspathBuilder functionality from Runway and fixed LoggingTest by removing dependency on SLF4J.
Efficiency and cleaning for the ScriptEvents
"DNA-40 Added some optimizations to the basic model implementation, centered around a cache of locations that have been found during the current transaction.  This dramatically improves the performance of the connector when requests are processed in batches. Also corrected some behavior related to getting subgraphs and to making changes (primarily deleting)."
Angularized the patient flag display functionality. It also now refreshes every 30 secs
BZ-577853 - add first cut of GWT-based search bar functionality:
FACES-2165 Remove PortletContainer.create*URL(String) methods FACES-2171 Clarify the contract of BridgeURL by moving URI functionality to the new BridgeURI class FACES-2172 Simplify the class hierarchy of bridge URLs by removing marker interfaces
TRUNK-2896: change functionality of isObsGrouping method to return hasGroupMembers(true) instead of hasGroupMembers(false) TRUNK-2901: Obs.newInstance() method should include both voided and non-voided group member obs
FACES-2018 Develop new PostConstructApplicationConfigEvent (backport compatibility layer)
Fix for issue #366: check static compatibility when inferring expression
Renamed the JChemPaint RendererModel and extend the CDK RendererModel. Their functionality does not clash.
added Playlist functionality
[DS-732] Improve efficiency of record inserts (Postgres only)
[NOBUG] builder extensibility work for flexible projects. Committing for DFH
Implementation : Bulk Entry performance optimization.
removed DateTimeHelper and moved functionality to own Time class Server stop is not run
Maximise model.writer(RDF?XML) compatibility by using old-style writers (so properties work). Clean up.
fixed #35 flex4 langref asdoc compatibility
"Use PerformanceCounter, add instructions, swap swipe and long press."
"Improved performance test suite, added memory testing utils, still a bit left to do before this is ready to use."
"MONDRIAN    This is a performance checkin triggered by testing XMLA with our    (clearly misnamed) ""small dataset"" which has over 250000 entries    in the Customer dimension. Prior to changes it took between 30 and    40 minutes to execute a MDSCHEMA_MEMBERS with CUBE_NAME and    LEVEL_UNIQUE_NAME restrictions against that dimension. After these    changes it takes 25 seconds. The reason for the previous large runtimes    times are:    1) XMLA restriction filtering was done at the end of generating    Row objects. This lead to large number of objects being created only    to be discarded. For the small dataset, it used 900mb of heap and    then started GC madly. The checkin pushed the filtering as high up the    evaluation as could be done.    2) In an earlier checkin I had replace the ArrayList Row implementation    with a HashMap implementation - this was a mistake on my part.    3) The setting of Member ordinals for the small dataset was 651865ms    and with this checkin is now 4241ms. The difference is how all    of the members are loaded and how they are traversed.    For FoodMart things are also faster.    Tests were run with the CmdRunner; who knows if an XMLA client    can even consume the close to 2 million line SOAP XML response    generated for the MDSCHEMA_MEMBERS request.    Added printing FreeMemory at debug level to XmlaHandler and    to RolapResult."
[NGRINDER-28] Develop performance test module
"PRD-4606 - Removed performance degradation in row-model, which got slower the more rows we added."
TEIID-2429 last refinements to sort performance
"add maven profile to show all tcms annotations and their associated methods, move annotations helper and tcms helper to traceability package"
Fix performance issue in CE when many files have being deleted/moved
"performance improvement, caching was not in effect in rel and partial-entitystate"
TMI-TIFF: Now uses subclasses instead of if-branching for LZW compatibility decoding.
o TestBackup test now runs properly o Minor refactoring of BackupTool for better code readability o Documentation o Added a test for loadable modules for backup services
[SONARPLUGINS-1518] Increase compatibility and fix typos
Added save functionality to admin params UI for OBANYC-1249
"TEIID-2561: added some nested merge functionality; insert only, update and delete will throw exception"
Fixed incompatibility of legacy test driver
feat(qa/performance): add ability for wait steps
"NOJIRA Internal XML and JSON encoding of entities with entity meta data is finally working, Update to reflection utils and some minor tweaks to entity view to increase efficiency when generating lots of entity URLs"
A number of performance tweaks to the typechecking subsystem and a little clean-up in TypeGraph.
Refactored out functionality into helper classes.
Allow disable transaction and record validation in CSV data import in order to improve performances
finished with server functionality; extended tests
progress in backend performance related to identifications
code-formatting according to checkstyle warnings (no new functionality)
Closed #26 (Federator: Implement WSN.getSupportedChannelHandlers()) and closed #50 (Federator: Implement WSN.setChannelPipeline()) and did a lot of refactoring several classes for better testability
Did a performance increase. Read description
Fix problem identified while performance testing validation queries.
fixes #788 The dnd-api package is removed and all of the drop related task factories are modified. All the editor functionality was added to the right click menues on NodeView or NetworkView (NetworkViewLocation).
More work on minimal functionality needed for FOSS4G
Fiddling with the cluster synchronization functionality.
Added functionality
JBNADM-1943 Intermediate check-in on resource delete performance work.  Some of these files will be further changed and/or cleaned up.  This is to increase delete speed and gather further feedback.  Please let me know if you see any bad behavior that you believe may be related to these changes (like failures due to expected but missing resources.  Note that running agents already generate server-side failures due to availability updates for removed resources.)
"Refactored JAXB for better compatibility with fcrepo3, added more XML tests for fcrepo-legacy-api"
new functionality add to send mails from coordinator portal refactored code in send mails from teacher portal
HBASE-694 HStore.rowAtOrBeforeFromMapFile() fails to locate the row if # of mapfiles >= 2 -Added new test to TestGet2 to highlight multi-storefile getClosestBefore issue -Removed erroneous return that caused 2nd and subsequent mapfiles to be skipped -Split HStore#rowKeyAtOrBeforeFromMapfile into two sub-methods for readability
HBASE-9488 Improve performance for small scan
"Refactoring, and now using the accuracy reported by the GPS to computer the procession"
"Migrate from org.openjena.riot to org.apache.jena.riot Merge old RIOT classes with new web reader versions, calling from old to new. Leave compatibility classes in org.openjena.riot, which are calls to new code, and RIOT exceptions which are supercasses of the preferred org.apache.jena.riot ones."
Compatibility with android-maven-plugin-4
* Performance optimizations
352222 Moved JmxMonitor functionality from Codehaus
"topic: code enhanced type: functionality, other module: [d3] wpvs description: added support for arbitrary rasters"
Renamed a fiel to reflect functionality. Added aliases.
"Added extensible feature generator and feature generator trainer, metric for measuring performance of classifiers"
"#146, split reference into contact and app info, added extensibility"
Added functionality for scope parameters. Refactored relevant classes.
Functionality
Initial functionality and tests for LoginBean.
- Summary: [Chart usability spec#2.9]Added Apply saving functionality for chart builder
stability
"Rolled back to deprecated call to getBoundingBox() so as to properly effect desired functionality and avoid infinite recursion.  Since Polygon.calculateBounds() has package-protected access, our only happily non-deprecated alternative is to copy calculateBounds() and the code from Polygon.getBoundingBox() into this class, explicitly avoiding a call to bounds.getBounds(), but for now I choose to live with deprecation."
Add code for MapWrapper including performance tests
All unsafe methods removed from tensors package. Tensors# methods performance improved and all bugs fixed. Expand shoul be totally refactored.
"Major refactoring, gains in performance, adding support for new dictionaries"
"topic: code enhanced type: functionality module: deegree-tools, GRViewer description: differentiation between the hole boundingbox and the showed image that could be smaller in general"
"Increasing the readability, if you like code to flow like prose"
"Combine the footer and the message bar such that all of the info is now in one place.  This hopefully makes better use of real estate, giving our LHS and RHS panes about 30 more pixels vertically, while also improving look and usability. - Also, allow navigation changes to clear the message bar, on the asumption that if the user is navigating he probably no longer needs the message displayed. - Also, get rid of the annoying labels that used to spew in the footer for each messageCenter message. The messageBar and the MessageCenter button is sufficient."
#NAME?
Moved XWHS unused deprecated functions into compatibility aspect.
Restoring backward compatibility of names
Clean up and try some performance tweaks.
[RHQ-1930] blacklist resource types whose discovery components timed out. this is to avoid a rogue component taking out the entire agent. added functionality to the discovery prompt command that allows you to view the blacklist and to clear it (in case you want to try to run the component again).
Build legacy DialEvent from DialBeginEvent for backward compatibility
"Tracking of ts across operators. Structure to link input-output added. Focus on functionality, not performance (yet)"
[306430] New server wizard performance is poor
modify the performance issue and css issue
Fixed backward compatibility to older versions
many updates to server architecture and connector/contributor functionality
"Started using a result tree, instead of String output, providing more flexibility, e.g. easier formatting"
GWT compatibility; huge FLG serialization boost
400014 - Http async client DNS performance.
Bug 298671 Implement enough compatibility to bring up a simple view
"CORE-1943 - Handle Error: InetAddress.getLocalHost().getHostName() UnknownHostException results in NoClassDefFoundError - Use 'Smarter' way to get localhost for local host name as well as local host address.  (Basically same approach as 2.0.2 functionality, which worked)"
"* Adding Unit Tests for jpox-jdo-mapping. * Adding assertions to jpox-jdo-mapping tests. * Adding ability to specify different column name for <field> * Adding ability to turn off the identifiers as primary key logic in order to allow for proper .equals() and .hashcode() generation by modello:java (defaults to on, for backwards compatibility) * Added ability to specify jpox.primary-key on <fields> * Corrected hookup for jpox.identity-type and jpox.identity-class modifiers."
upgrading the compatibility
[FR] performance issues
accelerate ui rendering performance
issue 1210 : Separate the Windows specific functionality and avoid calling Platform.isWindows() everywhere
Fix Loadsophia uploader backward compatibility Polish Loadsophia uploader GUI Prepare dbmon for unit tests
Impleming '304 Not Modified' functionality via Etag
Primera version de la funcionalidad de la evidencia Tiene bastantes problemas de performance y manejo de memoria
Refactor: CallActionManager replaced by a hierarchy of abstract subclasses for better extensibility.
Performance improvements: the index insertions now are handled by module (and not by token anymore) / code folding marks won't be shown when too many code-folding marks are available (eclipse updates those in the UI thread and it can get really slow on large files).
increase performance vcf import and repo merge
Refactored a bit to get the download caching functionality in with the DownloadUtlity class
increase performance by fetching entity lists only when needed during JSF lifecycle - rjrjr
Extracting common functionality into shared superclass.
Experimental feature: change the rate at which log messages appear on-the-fly and enable/disable performance logs from outside the JVM process.  Making this available for the moment; we'll see whether it ends up being useful.
"OpenShift tests completely rewritten, Mylyn config fixed - number of tests is doubled - more stability - more obvious connection between TCs and tests via IDs - fixed version of RedDeer for mylyn plugin and tests"
"HTTPCLIENT-1032: change variant storage mechanism in HttpCacheEntry from a Set to a Map; Set-based interface retained for backwards-compatibility. Currently, the map just maps a variantURI to itself--in essence it is still really just a set; however, this sets us up for mapping different variant keys to the same cache key (coming next)."
"renamed CleanupText to CleanupTextTransformer moved dependency versions of contentconnector-poi-transformer into properties depend upon bcmail-jdk16 instead of bcmail-jdk15 don't use a specific version of xercesImpl as this is provided by tika and setting our own will only lead to conflicts major (still incomplete) rework of TikaParserTransformer - read out many more attributes from files - added language detection - added configurability of where to store read values - renamed attribute field from ""attribute"" to ""contentAttribute"" as there is a ""targetAttribute"" now too as this transformer has been intended as test only I hope nobody relies upon it yet and won't be bite by the changes"
"Rework the recent change that preserves cast information after inlining. Remove the methods from NodeUtil, as they aren't really general purpose, and add the functionality to FunctionInjector directly. Add an integration test to make sure that j2cl inlining and disambiguate-properties are working together as expected."
Integrated lightweight probe into TestContainer and WorkerPerformanceMonitor (via special test property).
"deprecated method getLength(), replaced with getThrowableCount(); deprecated indexOfThrowable(int, Class), replaced with indexOfThrowable(Class, int) to make signature consistent with other APIs; changed functionality of methods that receive an index argument to throw an IndexOutOfBoundsException if the index is specified incorrectly, rather than absorbing invalid indices silently, to bring in line with the String API cleaned up javadoc; rearranged methods alphabetically"
Added reset functionality to support multiple synthesis using the same object.
ADD Implemented functionality for manage the update of own user REF The minimum length for account password is 4 REF Minor
"Debugging started, according to colab test cases Searchquery: Minus replaced by not exists (but scalability needs to be tested)"
"OPENEJB-1227: Active MQ 5 support. Thanks a lot Andy for providing this patch. Backward compatibility provided to connect the old openejb: prefix to the new ActiveMQ5factory. BTW, we have two prefixes to manage ActiveMQ factory selection: amq4factory, activemq5factory and openejb (for backward compatibility)."
Improved PerformanceMonitor plugin system
Improved compatibility to older mesh formats
* The first take at implementing a classic I/O compatibility layer on top of the event-driven HTTP transprot * Lots of API changes * Some minor code refactoring
FACES-2018 Develop new PostConstructApplicationConfigEvent (backport compatibility layer)
"#16 delted removeNutzungWithoutCreatingAHistory(), functionality is now inside removeNutzungBuchung()"
ACT-747: new case functionality + fixed attachment popup window auto-sizing
"XWIKI-13528: Add support for replacing the default WYSIWYG editor * Make the top level categories for Editor<XDOM> (i.e. PureText, Text and Wysiwyg) case insensitive for backward compatibility * Add ""PureText"" editor as it is required by some TextArea properties (whose value is not wiki syntax) * Set the ""editor"" meta property of some known TextArea properties (whose value is either code or plain text) * Modify XWiki#getEditorPreference() to use the EditConfiguration component * Deprecate XWikiContext#getEditorWysiwyg() which is not needed any more * Modify TextAreaClass to use the EditorManager for displaying the right editor in edit mode * Remove code duplicated between editors/xdom*.vm * Remove textarea_text.vm and textarea_wysiwyg.vm as they are not needed any more"
"Worked to incorporate the semantics of call-by-need into the intermediate  representation, and generally improved correctness of the IR translator/evaluator.  *Nearly* all tests pass with the IR-based evaluator, but not quite so it is still switched off."
begin to implement the search functionality for the new controller: make it compile but not running
"Patch for Sean Evoy: This patch adds a ""hook"" for F1 help on the new managed project wizard  configuration selection page. It also adds functionality to the managed  build project property page to allow the user to edit the make command and  build artifact name. They can also add and delete configurations from a  target. There is no support for adding another target to a project in this  release."
improving readability
"OGM-931 Fixing typo, using manually assigned ids for the sake of understandability"
OOZIE-2872 Address backward compatibility issue introduced by OOZIE-2748 (pbacsko)
"  1. Cleaned up MetadataStore and MetadataRetrieve interface usage:     * Renamed OMEXMLMetadataStore to OMEXMLMetadata.     * Created MetadataTools utility class with conversion methods between       OMEXMLMetadata, OME-XML string, and other (""foreign"") MetadataStore       and MetadataRetrieve object types.     * Migrated existing convertMetadata(MetadataRetrieve, MetadataStore)       method from FormatTools to MetadataTools.     * Also included useful reflection methods for working with OMEXMLMetadata       objects without depending on loci.formats.ome package at compile time.     * Reworked places that uses OMEXMLMetadata objects via reflection to use       new MetadataTools utility methods instead.     * Reworked OMETiffReader and OMETiffWriter to be more flexible about       their assigned MetadataStore and MetadataRetrieve objects, respectively;       using the MetadataTools convertMetadata functionality, even foreign       metadata object implementations are usable.   2. Eliminated a few catch-all exception handling blocks, but still some left.   3. Some miscellaneous cleanup and tweaks.   4. Given the scope of the changes, I probably broke something.      If anything stops working for you, please let me know."
Added functionality to Automounter to manage backing up original VirtualFile locations.  Also some test cleanup
"MONDRIAN: Fix MONDRIAN-550, ""Performance bug with NON EMPTY and large axes"";     Partially fix MONDRIAN-473, ""Performance bug in RolapEvaluator.setContext""     by storing a cube's unique name, which is heavily used in Member.equals."
#master: performance fixed by caching of STTC counters
DRILL-3765: Move partitioning pruning to HepPlanner to avoid the performance overhead for redundant rule execution.
scientific council research activity new functionality
performance improvements fixed account management bug fixed user timeline bug
Abstracted some of the init/tear-down functionality to make it easier to customize.
"Check in Bug 208373 Fixed by setting dynamic chart bounds as axis label height, and setting Legend, Chart title, axis title invisible in axis image as well. This functionality is not open due to dependency limit. Refactored presentation impl classes."
Rename module from mmps-file-repository-server to mmps-file-repository-service for better description of module functionality
Ehanced these performance tests so that the producers are running in their own threads. Also change the dumping of stats to be time based and not based on the number of messages received.
Permit partition key reuse for efficiency.
adding an entry point for improved reusability.
"[AST Nodes] working toward ASTRewrite engine, for each node: 1) add descriptors for each field in a node 2) provide PROPERTY_DESCRIPTORS 3) Setters and Getters 4) set parent sets also the descriptor 5) clone functionality"
Separated dereferencing from Call in parse tree and emitter. Now supports java constants neatly. Improved performance for both types of member access
Refactor BundleVersionsHash to make it easier for external code to invoke the hash functionality.
"Improve performance of the IBinaryParser by providing a new API IBinaryParser.getBinary(byte[] hints, IPath path)"
* extensibility of current DLTK functionality.
Change Group JQMSelect to use normal GWT ListBox to improve flexibility
Updated performance test suite
functionality ready. Decisions per metric and per test group are saved
http://jira.jboss.com/jira/browse/JBIDE-623 add initial functionality for resolve this issue
fix Android 4.2 compatibility
FACES-1355 The incongruity tasks added to the context are not being processed. FACES-1358 Develop JSF1 <-> JSF2 compatibility layer
added VertexDegree and simplified the JSON representation for efficiency.
Moved more functionality from RVMInterpreter to RVMCore
(fixes http://code.google.com/p/mybatis/issues/detail?id=123 ) Added a new attribute 'columnPrefix' to <association /> and <collection /> to improve resultMap reusability.
Refactored ImportGeometryAction towards reusability
"Major refactoring of the SpringHelper injection functionality, and the addition of tests for it."
Performance improvement and some fixes in generating
"- Added new Utility methods to DigitalObjectUtils enabling the following functionality:   1) Create a zip-type DigitalObject from a folder or from a given zip file, the fragments will hold all entries in the Content zip file.   2) Create a folder-type DigitalObject from a folder, with all files in it as contained DigitalObjects and NO Content!   3) Get a single Fragment from a Zip-type DigOb without unpacking the whole zip.   4) Insert a single Fragment/File into a zip-type DigOb...   5) remove a Fragment/File from a zip-type digOb...   6) test if your DigOb is a ContainerType / a zip-Type / or a folder-type   7) Recursively retrieve all Content in a DigOb (even the contained ones) as files   8) Get all contained DigObs as files ONE level deep"
Compatibility with RedstoneChips 1.0-SNAPSHOT
improving stability of DatabaseMigrationImplConcurrentAccessTest
"[GSCOLLECT-1369] Add additional JMH based performance tests for parallel-lazy algorithms using Java 8 Streams, Scala, and GS Collections."
HAMA-822: Add feature transformer interface to improve the power and flexibility of existing machine learning model
* improved the DataConversionService api and implementation * updated compatibility bundle to take advantage of the better conversion service
Fixed custom service task functionality
Bug 166684 - [WorkingSets] isApplicable needs optional adaptability
"Minor: grouping slightly less memory intensive, performance improvements"
[snipmatch] Bug 446326: Improve performance of snippet completion
Initial commit of Valang to JavaScript translation functionality.
MAHOUT-648 API-changes for optimizing recommender performance in some usecases
XWIKI-9520: Add support for extracting wikis using Wiki Descriptor in passed URLs using the new URL module * Backward compatibility!
Refactoring Regex2PotTask for reusability.
Added link and lock store and search functionality
"Fix a number of locking, performance, and race condition issues"
Completing functionality around Intent/Fragment factories
Allow a test to be ignored into compatibility suite
HSEARCH-2813 Add support for asynchronous mode in Elasticsearch engine performance tests
Performance improvement
#NAME?
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: handling of messages
Extracted base functionality of SwipeDismissTouchListener into SwipeTouchListener
Refactored for better readability
Fixes a bug in the performance calculation premature ending
Major performance tuning for annotations that use a drawing strategy. Fixed bug caused by patch for bug 161483.
modified to improve performance
[#1633] Improve the performance of CursorImpl.CursorIterator by setting Record values by index rather than by field
"LOG4J2-1591 Introduced new interface LifeCycle2 with stop(long,TimeUnit) method to avoid breaking backwards compatibility with new Configurator.shutdown(LoggerContext, long, TimeUnit) API."
Bug 229814 - Incremental build performance improvement
"Combine memory and access time tests into one test, for efficiency."
Bring API up to XNIO 2 compatibility
CDH-11747: bunch of renames for better modularity
fixed break of binary network compatibility with 1.7.* 2.0-M* versions.
HSEARCH-592 Moved performance tests into the integration test module
Bug-fixes and improved usability for the service registry.
Fixed Bug 426678 - [1.8][compiler] Another issue with vararg type element accessibility
User Role functionality is added
Separated common and ISO metadata store functionality.
updates to account to support first name and last name separately (required for backwards compatibility with API 2.0)
"Added functionality for disabling indexing of comments, based loosely on patch suggested by Matt Schmidt."
add performance test against ResultSet and Hibernate
Improve performance: separate stack cells and current cells in tetris model.  Cache pixel coordinates for tetris cells in TetrisPane.  Don't update stack cell rectangle primitives when current cell is updated and vice versa.
"Push command-line expansions, such as BAM list unpacking and -B tag parsing, out into the CommandLine* classes.  This makes it easier for external functionality (such as the VCF streamer) to use GenomeAnalysisEngine directly."
Configurability of timeouts and ports
Renamed and refactored Streaming DB code. Modified existing datastore code for compatibility
Windows performance tuning and cleanup.
"AbstractHttpDataTransmitter#readLine() optimized to minimize content copying, which resulted in 10-15% performance imporvement"
Made several changes for use with TPC-H implementation and col-stores DBs: - New benchmark states for cold and hot query runs. - Can run queries serially (run each query in sequential order on one terminal)   exactly once (a `latency' run) or for a set amount of time (looping through   the query list until the timer expires). - Added support for MonetDB in TPC-C. - Can re-run a test using the .raw output. Submits identical queries to the   system at the same time; for repeatability of tests. - Can specify `groupings' of query weights in config file. A shorthand to   make config management a little easier.
IN PROGRESS - issue SOAPUI-1437: implement functionality  https://jira.eviware.com/browse/SOAPUI-1437
"effect module ""sort of working"" on IE now--serious performance problems."
removing some settings improving L compatibility
Separated configs for HBase and MongoDB into separate subfiles controlled by a single import in the main file. Moved more common create/update functionality out of backend providers.
Do not use weak values for typeClosureHolders as that could harm runtime performance
"archive-commons: Lots of work on ZipNumCluster. Switching to SeekableLineReader from Stream as the abstraction layer. The ZipNumStreamingLoader loads one block at a time, by using new SeekableLineReader.seekWithMaxRead() which allows the subsequen readLine() calls to read up to a limit (using LimitInputStream for File IO, and a *bounded* http range request for HTTP) Also support for gzip wrapping -- this effective implements the functionality of ziplines block loaders w/o"
JukeAlert - Updated snitches to include the last visit date by a semi owner (moderator / owner).  This is included as a date-time column in the snitch table directly with appropriate index.  Date being logged as UTC with 100 batched up before inserting (or 1 sec - same as other flush).  This change doesnt include any of the other requested functionality and is just the basic block for the other ones (querying/culling).
Simplified code a little to improve readability.
user criteria builder for more lookup flexibility
Initial implementation of functionality to add physical phasing information to the output of the HaplotypeCaller.
Bug 506623 - Split the plotter functionality from the scope.
Cleaned up a lot of tests by moving shared functionality into the helper class
[#1223] Cache ExecuteListener classes for performance
Refactored remote start and stop to make the functionality clearer. Updated remote-start-and-stop documentation Updated release notes
Feature #5616 - improving WYSIWYG image size management: - refactoring the WysiwygContentTransformer to get more flexibility - taking into account the missed cases - taking into account an impact on the mail content transformation - fixing problems of transforming image URL with wrong sizes - improving the performances - adding a new useful and amazing tool: StringDataExtractor - adding a new processor for SilverpeasFile in order to handle Attachment Url Link - moving the Attachment URL processing from the save to the load operation
T4: Implement functionality to populate activity tree from database (for U35) - Separated ActivityTree out of ActivityTreeNode
Refactor. Added Predecessor and Successor functionality
more updates. added POST and DELETE functionality. Stuff is moving along nicely
HBASE-576  Investigate IPC performance
Revamp JBI integration layer and improve ServiceMix interoperability
add drop cache functionality in appkit
Implementation : Bulk entry performance opimization M2 code. Test cases modified.
* Switching to Maven for simplicity * Updating to latest fest assertions
"Communication, breachMessages and slaveMessages now resides within common-project, as this functionality is accessed by both master and slaves"
initial commit - basic functionality
"Fixing some interceptor functionality - structural validation, deployment error reporting."
HIVE-3746: Fix HS2 ResultSet Serialization Performance Regression (Navis via cws)
"try very hard to start url consumer, and therefore bind the queue to the routing key, so that no messages are dropped, before crawling starts (should always work unless rabbitmq is down); some other tweaks for clarity and stability"
more functionality for authenticating and private key retrieval
HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.
"STS-3056: switched meta model creation to asm-based variant, added more test cases, and fixed remaining issues with broken annotation processing for the meta model creation due to performance optimizations done before"
Reorganize PerformanceTestCueball
Minor Change : Occupation Search to Space Managers -> improve performance + add sort and search to result table
"http://jira.sakaiproject.org/jira/browse/SAK-14033 Split up custom action capability into 3 parts to allow for more flexibility and control, better testing in place now, extra mocks added as well"
Added waiting in order to avoid instability issues. Issue 126.
added Friends functionality with verification by page or mail updated User's view
Added backward compatibility for a Bluefire hack regarding the token
"Revert ""More progress on the core functionality"""
Compatibility 'chain.mtl' file : Creates the import sequence and the template content
Improving pedigree compatibility checkers.
Improve performance of DatasetGraphCollection (JENA-813)
"+ generify little bit MetricGroupNode + extract AbstractTree from ControlTree with ""cascade check - one event"" functionality + create LegendTree with specific cell (LegendNodeCell)"
Changing Package for Compatibility with WarpSign.
"Massive efficiency updates to HAL: when dropping columns, only non-zero values are touched.  Fix entropy code to interpret given arrays as un-normalized probability distriubtions and not records of events"
implemented list functionality
add new functionality to delete projects without an associated entry
- Implement JSR-330 Provider's for all container-level providers. - Temporarily remove the IOC test harness (use Christians old one) as there seems to be a minor incompatibility - All tests otherwise passing.
Webadmin: Patch to disable checkboxes after submit in the poolusage page. Mainly this is done by a refactoring of the PoolList-Class. The Model is now directly bound to the membervariable of the page and after the submit a reload of the Pools is done. In addition I discovered an API functionality to provide the marking of each line with the html attribute even/odd and refactored the EvenOddListview Accordingly. I now set a default-selectOption (enabled) in the dropdown-menu.
topic: code enhanced type: functionality module: deegree-core description: Added schema for db-independent relational mapping.
simplified the shell extensibility mechanism
CDS: ISDA pricing engine performance improvements (approx 50% win so far)
[JENKINS-31202] To preserve backward compatibility we need to keep all API methods unchanged.
fixed some issues about mysql millis losing accuracy and related tests
SONAR-7755 deploy/plugins/index.txt should expose SonarLint compatibility
"The core elements of HBASE-2037: refactoring flushing, and adding configurability in which HRegion subclass is instantiated"
Reinstates the behaviour of the CDKHueckelAromaticityDetector in that all atoms that can not be in an aromatic system are removed before finding the rings. This has little performance gain but it does allow us to exactly mimic the behaviour of the CDKHueckelAromaticityDetector for backwards compatibility.
SimonFactory renamed to SimonManager - because it really is rather manager than a factory (which is only part of the functionality).
Moved BaseDAO functionality into DbUtils
Refactoring and Admin Functionality added
"Bugzilla 266811: Added support for inheriting groups and aggregations in model, UI and data processor. TED 12813: Added two settings ""inherit columns and groups"" and ""inherit columns only"" in data sheet as follows: New property ""inheritColumns"" is added to chart's extended item handle. and default value is true. That means existing chart which has aggregations defined in series will use ""inherit columns only"" setting, and it keeps backward compatibility. In chart builder, data sheet will check if ""inheritColumns"" property exists in handle. If not, will set ""inherit columns and groups"" by default. If aggregations exist, then select ""inherit columns only""."
"Simplify indexerconf syntax for indexFields, re #272. Backwards incompatibility: the old syntax is not supported anymore. An XSLT to convert old syntax to new will be made available."
[ENTESB-1031] Improved patch functionality - offline patching - patch survival of data direction deletion - purge of old artefacts when patching offline
GTNPORTAL-2658: Fix export/import to use new page service    - Try and improve performance by not calling loadPages unless import mode is overwrite.
Update README.md. Introduce compatibility layer. Clean up pom.xml a bit.
[resolves #985] Compatibility for DS based components
#131 Added basic ChainedMain for performance comparison
"[MATH-749] Improve robustness for convex hull algorithms in case of identical / collinear points, added flag whether to include only extreme points or all points on the hull, improve unit tests."
Add the beginning of functionality to log a failure message in data collection failed events.
"NetCDF writing optimization stage 1:  - zero-copy expression values reading and netcdf writing - bye-bye netcdf-generator module and all its usages - no more expression values handling in DAO and Assay class - ArrayDesign objects now contain inverse map from DE accessions and names to their IDs - AtlasUnloader functionality moved to loader, no need for two separate modules here - AtlasLoader correctly cleans up old NetCDFs on experiment reloads "
Test stability: clean up after config test
CSPACE-694 Temporary workaround for CSPACE-694; unit test robustness improvements.
Changed method name to match new functionality
Beginning to add Hand Tracking functionality - INCOMPLETE
Fix stability and race condition problems in SRM Job timeout
caching optmizations and performance tests
Fixes COMETD-260 (Improve sweeping performance).
"Many changes in CloudService, improved transmission stability and ease of use / extendability."
ItEr27S07CUVistaRecursosTempoPorProxectoItEr26S08: Refactoring. Extracting methods to improve readability
refactoring to increase extensibility
"Improved core/IDE separation, added logger and a way of launching the functionality via the core (only for testing purposes)"
added support for enriching module seed signatures with super/subclasses to modularity part
o added functionality to optionally back up next build number and build archive
Simplified the access control performance test to write random data instead of a file
Re-factored MVP tests for readability.
CAY-810 IncrementalFaultList performance improvements removing synchronization on elements array from fillIn method.
performance improvements and bug fixes
"Improvements to read-group filtering in PrintReads  - Read groups that are excluded by sample_name, platform, or read_group arguments no longer appear in the header  - The performance penalty associated with filtering by read group has been essentially eliminated  - Partial fulfillment of PT 73075482"
Implemented smart deindent core functionality
Add functionality to create VMs.
SONARJAVA-630 Fix parser performance problem
Turn FileStream into a more general URLStream so that we can stream music from jar/resource URLs (but retain FileStream for compatibility).
we now have two context types: php and new php. removing the doc context till we have these kind of functionality
NEW - bug 259089: HtmlDocumentBuilder beginDocument extensibility improvements https://bugs.eclipse.org/bugs/show_bug.cgi?id=259089
Starting 1.1.0 development:  - Refactor to have internal and public package  - Write MenuItemTracker to be able to extend    the functionality  - Writing documentation into the README file and    removing the site
NXP-6012: fix escaping and performance in Document.FetchByProperty
Added withParams functionality.
refactored for better reusability.
improve - extensibility
Performance improvements for automatic schema detection.
Enjoy the new functionality: now it is possible to upload zip files having shp and geotiff files all together. Fell free to add geotiff sld file also!
"* Refactored apache client out of com.heroku.api.command. Apache client is used primarily in BasicAuthConnectionProvider and BasicAuthConnection as a transport mechanism. Connections are the primary abstraction that contain a transport. If need be, the transport can be decoupledif we need the flexibility. For now, we only have one implementation of a connection and don't need the decoupling. * Reorganized code into more appropriate packages.   * Using com.heroku.api.http http related information (e.g. headers). This is not intended for transport -- use connection, or some other package, for transports.   * Using com.heroku.api.exception for any custom exceptions.   * Using com.heroku.api.util for utilities * Made CommandConfig immutable * Added a static method in HttpUtil for encoding name=value parameters in HTTP requests. It's currently used in Command implementations. * Added HttpHeader, which should be used by Command implementations for providing header information."
HBASE-13702 ImportTsv: Add dry-run functionality and log bad rows (Apekshit Sharma)
Activate Supply and Demand system + remove TrailingMapSupport (performance gain on VRP)
Last methods extracting and reordering of methods to improve readability
"http://bugs.sakaiproject.org/jira/browse/EVALSYS-689 Very tricky change in the copying code which actually improves efficiency by reducing the number of DB operations but increasing the code complexity, this will keep extra things from being created during template copies"
Generic data-explorer first setting  Adding a new Rest Api entry-point for getting meta-data tree. Adding JavaScript functionality to the data-explorer that supports entity selection;
Reverted correct size() calculation because of the performance penalty that would come with it. A solution to/existence of size() will have to revisited later
Added basic command line parsing functionality
[CXF-4786] - Support KerberosToken SupportingToken policies without a security binding  - Also refactored all of the standalone interceptors to put common functionality in an abstract class
"Reworked tests to make them more deterministic by removing sleeps for asynchronous calls to complete, and removed lots of inner classes providing the same functionality of Latch."
Update for IAP functionality: (1) observer renamed to listener (2) made PurchasedItem a class (no need for interface) (3) added PurchaseValidator: template for post back validation of purchased items on server
Bug 514277 - Performance of closing parts/windows (with many visibleWhen/enabledWhen) is very slow
New reference iterator that works with the new FastaSequenceFile seek operations.  Greatly improves performance of jumping around in the genome.
Refactoring mostly for readability (and small performance improvement)
Refactored StackConfiguration so that its core functionality can be used by other stacks such as workflow stacks.
Give flexibility to write in-place AsyncMethod callback hanlder
MONDRIAN: Cosmetic changes to match rules enforced by checkFile; update some copyright dates; no functionality changes.
BISERVER-5681 - Coding - Reporting Perspective (UI) BISERVER-5683 - Coding - functionality
Reuse DiffPerformanceTest support code to validate algorithms
performance blooper
Fixes warnings. Splits a couple of files into even more files for the sake of readability.
Refactored BatchGraph to move caching logic from the individual caches into BatchGraph. Fixes #281. Adds support for incremental loading by checking for vertex existence in wrapped graph. Extended test cases to test this new functionalityl.
Moved functionality to folder reading class.
PerformanceCollector cleanup
Bug 443632 - [Performance] Event Loop Monitor prefs page: UI bugs
Opening neo-1.0-b6 optimization branch (kiwi) that includes a lot of performance (speed and memory) improvments. List of changes:
Heavily refactored HttpOp to use the new authentication framework (JENA-480) Note that existing API methods are retained for backwards compatibility
HBX-1367: Create a new project 'hibernate-tools-tests-db-common' that will contain all database related tests common to all the dbms's - Move 'org.hibernate.tool.test.jdbc2cfg.PerformanceTest' from 'h2' and 'hsql' to 'common'
Improve backward-compatibility when adding data to a non-indexed resource
"High performance, correct implementation of -XL exclusion lists.  Enjoy."
MODE-1365 Migrated JCR query functionality
"Add PatientIdentifier sub-resource - RESTWS-84 Introduced a SubResource interface. Introduced DelegatingSubResource, and moved common functionality from DelegatingCrudResource into a new BaseDelegatingResource. Added a BaseSubResourceController Also implemented PatientIdentifierResource, and most of its controller. Still to do: update, delete, purge"
Bug 329458 [Compatibility] Editor is not automatically set as the active part on startup
Simple search functionality
MONDRIAN: Integrate from mondrian-release/3.2 to main @13978. Includes XMLA     server changes and switch to olap4j-tck but not performance changes or     JavaCC parser.
"DRILL-336: Modified the netty direct memory manager to:    1) Efficiently reduce (""trim"") the size of a memory buffer, releasing the extra memory back to the memory manager.    2) Opportunistically allocate larger buffers if it can be done efficiently.    3) Raise a warning exception if resizing a buffer copies more than 1 page of data.    4) Added Javadocs and some in-code comments.    5) Created a Junit test to verify basic functionality."
Refactor common functionality out of WalkerManager and into JVMUtils and PathUtils.  Add support for loading walkers from a jar.
160985 [api] make functionality of JavaProjectWizardFirstPage API
performance improvements on server for client protocol
"Added some integration tests to verify the correctness of the ""js="" property in the .stjs files. Fixed the uncovered bugs."
open performance test setup
Staging View: add commit functionality
Further changes for more modifiability of various checks/bugfixes
Bug 311212: [package explorer] Performance problem with refreshing external class folders
Add history feature; group some functionality into subpackages
1. Added jtable context menu 2. completed edit context menu item functionality 3. Other minor modifications
Fixed a permissions-related issue in the upload files functionality where a user was being authorised for a null domain object.
addRequiredTearDown functionality removed
"cleaning up method override functionality: JavaModelUtil, MethodOverrideTester and Bindings"
"Let RayTracing test all combinations of transitions for all axes. Previously only ""random"" transitions were taken, for simplicity. For the sake of better debugging and consistency we check all combinations of transitions now, calling the iteration with all transitions done at once the ""primary line"", while calling step with a subset of transitions done would be the ""secondary line""."
[removed] db4o import functionality [added] YAML file import functionality [changed] Java JDK version from 1.6 to 1.7 [adjusted] gitignore [changed] README.txt to README.md [adjusted] configuration files (wrong paths to procedures and training data) [added] log4j.properties to test resources
Final import functionality added; fixes #16
"Added first api's for FieldDescriptor, RecordType and TypeManager Functionality for field deletes Functionality for getting versioned or non-versioned information from fielddescriptor Added EasyMock support"
hazelcast functionality in own classes + refactorings + unfinished server lockfile writing
proper restore defaults for tool-chain modification functionality
CheckIn:Bugzilla288805-- [Compatibility] Error happend when preview attached report as html
NXP-9526: split non-implementation-specific functionality off DefaultBinaryManager into AbstractBinaryManager
More addon functionality (incomplete)
"s/productivity/contrib/ even more, to increase my contribution rate"
Adding functionality to do Kmer counting and kmer analysis on the assemblies.  Also adding functionality to standardise FastA headers in the final assembly.
HBASE-7952 Remove update() and Improve ExplicitColumnTracker performance (Raymond Liu)
Added a simple cache to improve performance readily for benchmarks
Added functionality for openssl integration for HZ EE (#10823)
"XWIKI-8355: Define XClass property types using components * Return the property type hint in PropertyClass#getClassType() instead of the full Java class name. * Use the value of the ""classType"" XML element from the XAR as property type hint (extracting the hint from the Java class name for backwards compatibility). * PropertyClassInterface should extend PropertyInterface. * Add a PropertyMetaClassInterface interface following the existing pattern. * Add a PropertyClassProvider role that can be used to retrieve a PropertyClass instance and its definition (the associated meta class). * Transform all the available meta classes in PropertyClass providers. * Apply checkstyle to meta classes. * Modify MetaClass to lookup the PropertyClassProviders instead of hard-coding the available property classes/types. * Make sure MetaClass is backwards compatible by extracting the property type hint from the Java class name if needed."
move some functionality to wala.util
Adding more functionality to the Logging Panel
added save functionality of team events
ctags performance fix
"Make the ""compare to accuracy level"" operation visible from Expiry."
moving more CH related functionality into the decorator
Implement database insert functionality
improving tests reliability and speed (work in progress)
refactoring to improve readability
"GUI functionality: edit account/atm, remove account/atm;"
Refactoring to better support configurability
"move performance tests, to its own package, do not run them during integration tests"
"Completely got rid of the concept of setting unique IDs. This was way buggy and totally unnecessary.  May need to add the concept of reference at some point in the future, which would be editable, but from now on ID is immutable.. Various other UI cleanup and usability tweaks."
"Issue 76: restructured to jaxrs annotations and created new ones where functionality was lacking.  added resteasy client apis to our repository, as there is no dep-free dist available from source.  introduced TransformingHttpCommandExecutorService, which processes http independently of extracting results.   This uses an ExecutorService.  In google app engine, there is now a WithinThreadExecutorService which is automatically selected via CloudContext as per the annotation SingleThreaded.  All command classes have been converted to annotation definitions in S3Connection."
"SONAR-6134, SONAR-6048 Improve performance of FS indexation"
first version of search functionality
Refactoring of functionality used to print merge errors and information about unsupported nodes
Include json-smart in performance tests
common functionality moved to superclass BaseService. Also implemented a generic PropertyEditor
"JBRULES-325 JBRULES-326 Performance of compiling improvements, caching of extractor generation etc"
"TEIID-2188 adding functionality to support 1-to-many relationships in the root object, and additional cleanup"
Performance tuning
 #149 improved configurability by allowing users to disable/enable specific features
Grow and shrink the hash so that our performance stays near O(1). (Altered Serializable compatability). Reformatted tabs into 8 spaces.
Bug 105017  Performance enhancement for framework.util.Headers
"Improve performance of preprocess, cleanup code"
Shoehorning upload all functionality.  Some changes to fix build
"- bug fix. current jitter buffer duration is calculated in RTP timestamp units, but it was compared to jitterBufferSize, which is in milliseconds. Now both are compared in timestamp units. The choice is to convert jitterBufferSize to ts units in order to better preserve accuracy. Typically 8 ts units = 1 ms (clock rate 8KHz). Sometimes 16 ts units = 1 ms (clock rate 16KHz)."
add some instrumentation to collectd to make it easier to detect performance issues
"Mark all as read functionality, fixes and improvemements."
Added functionality for getting test input files and result files from a directory
Testing modification to test recovery functionality.
renamed integration and performance tests...
Backcompatibility fixes to APIs + first test for workflow use
Most of the way though the large refactoring of the ant tasks. Added two new ant types: DatabaseType and ChangeLogParametersType These can be defined outside of the ant tasks and reused. Migrated over the BaseLiquibaseTask to use the new types and ported over the old attributes to maintain backward compatibility. Added two new abstract classes that extend from BaseLiquibaseTask that will encapsulate the common functionality from change log tasks and diff tasks. I performed the same migration of old attributes to the new types. Still have to finish refactoring the diff tasks and generate change log tasks. A lot of additional documentation and deprecation marking was completed and logging was added to notify users of deprecated attributes to migrate over to the new model.
"topic: code enhanced type: functionality module: deegree-tools, GRViewer description: x-y-coordinates put into the controller and began to implement the MouseWheelListener"
increase testability: - ContentRepository does 'not' create jcr sessions - WorkspaceAccessUtil uses FactoryUtil
"Changes aiming at typecode interoperability:    - Removed poteentially unsafe casts to org.jacorb.orb.TypeCode.    - Casts to org.jacorb.orb.TypeCode are performed only when they are      guaranteed to succeed (instanceof checks were added to ensure this).    - A JacORB typecode can now refer to foreign typecodes. It should be      possible to create a JacORB typecode describing, say, a struct whose      field types are described by foreign typecodes. All but one      typecode-valued fields of org.jacorb.orb.TypeCode had the field type      changed from org.jacorb.orb.TypeCode to org.omg.CORBA.TypeCode.    - The single typecode-valued TypeCode field whose type remained      JacORB-specific is actualTypecode, used by recursive typecodes.      Therefore a recursive typecode created by JacORB cannot be used      to build a foreign typecode."
Removing MessageWall several publish on preview Tests Ensuring IE stability Adding 2 methods to BasePageObject.class: 1. getParent(element) 2. jQueryNthElemClick
"Bug 388476 - [EditorMgmt] Editor tab management lost ""working set"" (MRU) functionality"
Improved delete performance by: - Checking with inflight writes and only syncing them when needed. - Reduced number of seeks. - Only physically syncing when the corresponding journal property is set.
[BZ-982586] optimize compilation performance by parallelizing generated classes wiring and caching AlphaNodes hashing
performance improvements
Fix to check directive for effectiveness and check for fragment payloads correctly.
Enable ascendent compatibility
added performance timings to many of the model test suite testcases (where apporpriate). More work in this area would be good. Worked on the document interfaces and MongoDB implementaiton.
Added missing Ring.toString() and RingSet.toString() methods; Moved Ring.toString(Molecule) to only user RingSearchTest; and Removed RingSet.reportRingList(Molecule) (Further fixing the stability of the core module)
[task 18] com.googlecode/github.* -> me.gladwell.* for better code stability
performance tuning
project wizard extensibility
Extract common functionality in a parent class.
Moved common SSH related functionality to the base class SshTransport
gplazma2: Split JAAS functionality of krb5 out into separate plugin
wrap performance monitoring around method that captures a larger part of the end-to-end request flow; 
TURMERIC-323: Added PerformanceTrend graph and ErrorTrend graph in the service tab. Fixed minor display issues
Add a test for repo checked write functionality.
Some simplicity and comments.
"Json interface (#60): adding more resources and more functionality to the existing resources. Added an ExceptionMapper to format the error responses. All resources (URIs + methods on them) should now be present, but many of them still completely untested."
Explicitely check pedigree for compatibility with VCF file
NO-JIRA  Move more tests into the client module using the TestPeer to validate the functionality. 
Minor performance improvement to LD modules.
PRD-4242: Refactoring as subreport and crosstab share common functionality
Moving annotation related functionality into a new class
"topic: code enhanced type: stability module: deegree-core, deegree-services, deegree-oraclesupport description: Improved dealing with imprecise feature type / property names."
"RHQ-942 - sweeping modifications to the AlertConditionCache to fix OOB constraint violations once and for all;  changes include completely removing code for on-the-fly updates to the cache (since the HA model is to fully reload on an agent-by-agent basis) - this actually makes the AlertConditionCache easier to understand / maintain / verify correctness of;  removed obsolete methods from the AlertConditionCacheManager local interface, and AlertConditionCacheMonitor;  discovered during code removal that there was *NO* correct mechanism for unloading baselines (was using inverseAlertConditionCache, but that was wrong baselines aren't keyed off of alertCondition ids);  added completely separate mechanism for tracking baselines on an agent-by-agent basis, which is able to load/unload them by agent now; "
AStarExperiment in -performance shows promise
Fixed the add functionality of GenomeLocSortedSet.
Changed unified array internal representation and made it throw NPEs on incompatible index/dimension situations for performance reasons. Allows us to avoid checkcasts of get() variations.
Added more command line parsing functionality to a number of tools.  Using new interface in conan the helps with command line parsing.
engine : Performance improvements at AsyncTaskmanager
[Performance] Adding phpdoc info
DDF-22 Added QueryByID functionality
topic: code enhanced type: functionality module: other description: MDEditor - export of referenced groups
Embed some more of JDK7 functionality directly
adding performance plugin and suppressing inner jetty run
Changed project name from DcBag to DcShared. Did some performance optimization for bag uploading.
"Latest row filtering model, with find functionality"
HDFS-3024. Improve performance of stringification in addStoredBlock. Contributed by Todd Lipcon.
Functionality to remove connections.
1. Extendible hashing performance optimizations. 2. Fixed backward compatibility issue in local cluster. Cluster version is updated to 2.
"Real Multi-threaded; much performance improvements, fixed some todo's, Annotated Thread safety"
"code complete for new concept mapping. updates: 1) more OO-style code: preparation for use in cF. 2) performance tuning: global caching of surface / concept data (as more as possible). using prefix tree for dictionary, enabling very fast surface matching & extraction. 3) iterative version of disambiguation algorithm: for better accuracy without lowering performance too much. 4) carefully close database prepared statements & connection after use. a clean-up hook added to do cleaning at exiting. todo: 1) changing to stored procedures (already in database) in DatabaseFacade. 2) more testing. computations: 1) freq surfaces with sense count. 2) commonness + keyphraseness. 3) feature extraction. 4) training."
#NAME?
198894 Performance tests commit measurement in done in loop in several tests
Enhance the performance by: 1. cache the formatter through patterh/locale 2. optmize the string formatter 3. optmize the content style 4. add buffer to the XMLWriter
"CSPACE-3245: Committing more functionality to the the Blob service.  REQUIRES full server restart after ""ant undeploy deploy create_db import"" ."
final touches to assembly functionality
Add some extra functionality to ParserGenerator
"Change the web security(ies) resources to accept a time-series master rather than a source, providing enough flexibility for WebSecurityResource to return a related time-series whenever one is available, without having to issue multiple searches for each known data field (alternatively, the time-series source could've been extended to provide a 'find all related time-series for a security's external id bundle' facility)."
Clean up JavaDoc and minor rough edge in ProtoSubject API by making ProtoFluentEquals ignoring methods match the FieldScope API for simplicity.
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: messages/labels
"Rollback of ""Improve accuracy of locals tracking in PureFunctionIdentifier."""
Minor refactor of extension mechanism to improve reusability
updated to 7.0.0.CR1 compatibility. Fixed for interface and behavior changes
Full functionality
renamed method to better reflect functionality
"Prefer StringBuilder over StringBuffer Use indexOf(char) rather than indexOf(String) Remove duplicated evaluations of indexOf User charAt(0)=='c' rather than startsWith(""c"") For performance reasons iterate over List in the same way as an array"
JQMSelect compatibility with GWT designer fixed.
Use the markup of the base container when trying to resolve the doctype. This way the functionality works for markup inheritance.
Improved robustness
Fix compatibility of tests with mssql
Removed the DataAccessor class which was responsible for allowing users to do random access gets and puts on a DataSet. I've created a new RandomAccessDataset interface that datasets which should allow random access should inherit from. This replaces the functionality DataAccessor provided.
Bug 322563 [Compatibility] Part initialization failures prevent disposal from happening
Starting to use the new default properties functionality in functions
xrootd: Stability fixes for xrootd
implemented ActorRefGroup functionality and did some internal tuning based on performance tests (serialization cache is now turned off by default as it has negative impact on throughput)
Renaming of ACompatibilityChecker and ICompatibilityChecker.
Performance improvement: encoder/decoder invoked only once
SLE-129 Improve performance when refreshing Subscriber
Back compatibility issue.
Added check result functionality.
TEIIDDES-305: Adds in statistics for performance optimisation
Bug 327522 [Compatibility] Workbench window arbitrarily unsets active part when a part has been closed
"implemented path definitions. This is some very cool functionality to allow you to define your own path relationships. Once people agree to the syntax conventions, I will add a section of documentation on this new construct---you will think its cool---cause it is."
TopN performance improvements
"TEIIDDES-891 VDB Editor Other Files resizing problems with may Other files added. Changed the VDB Editor to have models and files on top and data roles and description on the bottom. The top and bottom are separated by a splitter. Also added double-click open editor to other files and data roles. Added confirmation dialog when deleting data roles. Also the add, edit, and remove buttons are now in a toolbar at the bottom of the table. Fixed some layout issues, added tooltips, and various other usability improvements."
"GENERAL - added checkstyle to other important modules, copied mocks to jackson serialization modules, testing performance"
"Deprecated TypeID's big list of static fields, replacing it with the FieldType enum, which helps us ensure that all types appear in all switch statements, as well as reducing the number of string comparisons.  This turned up some missing functionality (below). TypeID-based constructs were deprecated, not removed, to minimize impact."
Closes OOZIE-76 Add coordinator state backward compatibility for DONEWITHERROR and PAUSED
Rename Scenegraph to Scene for simplicity
moved creating of problems markers into readConfig method to prevent creating markers multiple times in BeansConfig; add null check in ValidationUtils; used on cached instance of BeansUIActivationHistory  ASSIGNED - fixes #690: Performance problem in Open Bean dialog  http://springide.org/project/ticket/690
Added more functionality related to generation of SL and JML
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer
"Added RegexPropertyResolver which allows specifying pattern for read/write method matching. Refactored core property resolution logic into PropertyResolver abstract, and extended IntrospectorPropertyResolver from it for better extensibility"
added 'sign-in with Twitter' functionality
"Functionality to create id automatically added , but getting exception related to java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: foreign key no parent; SYS_FK_10035 table: BOOKRECORD"
"GH-67 Optimized 'Having' and Grouping clause support - Utilizes ECL HAVING function as recommended by Gavin. - SQLFragment.getValue() incorporates special translation for fragments of a Having clause in which the ECL 'ROWS' syntax is generated. - Grouping clauses without having clauses are still processed as part of the final result TABLE call for performance reasons. - In ECLEngine, select structure is now based on the latest DS name. - SQLParser found to be upcasing group by clause, thereby creating issues in group by having clauses"
Bug 363432 - NPE in Performance Tests run on N20111105-2000
huge update to increase performance on stupidly large PSTs
"EHV-23, EHV-24: Modifications in Service, Dao and UI layers for Customer --> Project --> Activity structure Basic functionality is working. Still more testing to be done and few areas are work in progress"
CheckIn: Fix bugzilla bug 306122 [Accessibility] Problems about context help for sub dialogues of Edit Data Set.
 - Added the Search functionality.
"making everything use BSON, w/ mongo API compatibility"
[Performance boost] Resolving type binding using cached results
"Refs #3641 #3586 - Update export dialog code to use new support for refreshing embedded Tunables. Remove custom export image dialog, as all functionality (except for auto-fill file name, which will be in a future commit) can be implemented using Tunables now. Revert change in FileUtil causing problems automatic extension handling..."
refactor for readability
Added the OAuth2 functionality for sign on google earth builder
Improve GroupingChecker performance by caching transitive closure results for resolved bundles.
Use column names not numbers when fetching metadata for readability.
CrossModuleCodeMotion: refactor to statement-based operation. This sets the stage for a performance fix that will make the pass smart enough to move all declarations to the best possible module in a single run.
Attempt to add start/stop functionality to local services
Fix backward compatibility
Reverting the performance tests added recently until it builds cleanly
jfrontend - some code refactoring and minor usability settings
restructured jangaroo project. Runtime is a standalone project. Itests is a standalone project. Browser compatibility classes are standalone project
[DS-102] Submission without file possible with the skip upload functionality disabled  [DS-103] Use of the Progress bar button don't save the current page modification [DS-104] Cancel/save button during edit of a workflow item doesn't work
Using ERXSubmitButton when useButtonTag = true for WO 5.3 backwards compatibility
"added g:dedup(), g:union(), g:sum(), ... work on test case suite to include performance testing."
Temporarily restored compatibility with Eclipse 3.7.
DRILL-3952: Improve Window Functions performance when not all batches are required to process the current batch
[GSCOLLECT-1368] Introduce JMH based performance tests comparing Java 8 and GSC iteration patterns.
M2 objects for performance history changed to have bi-directional  relationship.Test case updated.
"Added a test for the create, build, analyze and destroy new api functionality."
"WICKET-5439 more flexibility: allow stop and restart without ART, clean-up timeout-handle when shouldTrigger() returns false"
Fixed bugs in DynamicLineSetPainter and DynamicPointSetPainter delete functionality.
Improves performance of testing the jboss server connection
"Fixed some CML reading things, to restore compatibility with an old, obsolete and invalid CML producing tool (you may wonder why...)"
Better assertion messages for type compatibility checks.
Added tests to check query more functionality using row value constructors. Renamed tests in QueryCompileTest to reflect comparability checks instead of coercibility. Moved row value constructor tests out of QueryExecTest to RowValueConstructorTest
"Changes on ""login as different user"" functionality for nacka"
Move example class into performance test project
updating performance tests; making cache modules instantiable
Bug 525946: [Webkit2] Port download functionality to WebKit2.
"Removed MasterClient.shutdown() and moved its functionality in the close() call. Renamed the previous close() to disconnect(), as it allows the user to temporarily disconnect with the Tachyon Master. Appropriate updates to the unit tests. Minor edits to the comments and log statements."
Move code form main() to a separate method to help with testability
[3701] Docbox performance optimization
Exposing some functionality to allow for fetching optimizations
HIVE-5274 : HCatalog package renaming backward compatibility follow-up (Sushanth Sowmyan)
"Split the runtime-adjustment functionality of ImageManager out.  In order to preserve backwards compatibility, the complete functionality including runtime-adjustment can be found in ImageManager which now extends BaseImageManager.  The bulk of functionality is now in BaseImageManager and anyone who wants an image manager without the RuntimeAdjustment bits (it uses ClientPrefs and thus isn't friendly in server-land) should use that directly."
HIVE-5204 : Change type compatibility methods to use PrimitiveCategory rather than TypeInfo (Jason Dere via Ashutosh Chauhan)
"Gideon : Fixed a inefficiency / arguably potential bug in NonterminalMatcherFactory.java. Basically the OOV symbol, should, just like the goal symbol, only be allowd to match to itself, and also no other symbol should be allowed to match to it. This was previously not the case. This has been fixed now by introducing the new boolean function 'isOOVLabelOrGoalLabel'. Firstly, for the label that is matched to in the function 'produceMatchingChildTNodesNonterminalLevel' if this function returns true, only strict matching is allowed. Secondly, in the function matchAllEqualOrBothNonTerminalAndNotGoalOrOOV, the function is applied that non-exact matching is only allowed for non-terminals that are not OOV or GOAL symbols."
analytical production function for multiple input factors; real estate; separate prices panel; performance optimization in market; merged factory and farm; JUnit test
[completions] improved performance when subwords is active 
"Changed getNonPrimaryKeyColumnNames methods name to getColumnNames,   reflecting actual functionality. Updated javadoc throughout"
[sync] Improve performance
"EST-794: introduced DocumentAbstract, moved functionality into mixins"
"Godin - 4) I prefer ""org.sonar.plugins.totalquality"" as a package name for plugin (like for build-breaker, artifact-size, build-stability and so on)."
* made AbstrackSocketAppender not lose events when socket connections gets lost (now uses LinkedBlockingDeque) * extracted aspects of deque creation and output stream creation to factories in order to improve testability * ecapsulated automatic flushing of output stream into a separate class in order to make this functionality testable * slightly refactored internal structure of AbstrackSocketAppender to improve maintainability
bug 304843 - [discovery] ensure sufficient extensibility for Eclipse marketplace client
#NAME?
Increase robustness of closing store files
"Refactored alignment to allow anchored compounds for all global alignments Replaced setSteps(int[] anchor) algorithm due to design flaw (information lost in anchor conversion: not possible to get steps from anchors {(1,1), (3,3)} as alignment could 1-23 or 12-3) Added aligner.addAnchor() for addition of single anchors Refactored some alignment internal method signatures to improve code readability Improved test coverage Bug fix: #78"
1. Additional Fix for [Bug 174936] [Scanner Discovery] Per file scanner discovery is broken with the New Project Model functionality 2. Bug-fixes
Removed TAMU specific assume user functionality. Updated user roles.
"Refactor performance test ==== Potential optimization: 1. Disallow type changes 2. Use ""or"" condition in query 3. Use ""or"" condition in key selection"
"More tweaking around with file filters, for speed and accuracy. Now ""All supported file types"" does not permit file probing, but individual file filters still do."
Refactored the MediaPlayer and MediaPlayerFactory to accommodate different types of media player but sharing common functionality. Unfortunately these changes break the existing API and client code will have to change.
Fix PerformanceTest_AIX: 45% degradation in Batch Generation of 500 Page BIRT Reports(T21498)
Added Swedish translation More performance Nice code formatting Fixed some deprecations Signed-off-by: narrowtux <narrow.m@gmail.com>
build: Fix build performance regression caused by git describe
get indy working again. looks like performance has improved since jdk 7u4.
Now we have the functionality extended to the UI...
[Performance improvement] Calculate timestamps from tail for finished builds
Traces core: added functionality for VDMJ to support direct execution/expansion with VDMJ
"o Flushed work in progress, moving to immutable objects to easy caching required for acceptable performance of tree construction"
Added backward compatibility. Plugin now is supporting 1.9.0 - 1.9.4
Updated efficiency and clarity of browse code. Much faster indexing at slight cost of lookup. Fix to normalisation code.
ROO-2455: Improve performance of Roo shell with large projects - move conversion service creation out of metdata item
MODE-1085 Improved the performance of the NamespaceRegistry implementations.
Fixed the PerformanceStateContainer to aggregate the received PerformanceState samples by maximum values for the continuous performance monitor output.
Bug 355497 [Compatibility] Activities/Capabilities in Eclipse4
Add new html5 compatibility files (from html5.js)
modified IP search adding a threshold to improve performance
"preference for proposal scope, remove deprecated, performance"
Removed compatibility test module
400332 : fix Dali Kepler M5 compatibility
Move tests for Maven compatibility
"Performance optimization for #2008, #2009, #2010, #2011 and #2012"
"add delete computer functionality in web-app add in dao delete,update & insert "
"Fixed some bugs, improved performance, improved API"
Restoring some deprecated method overloads for compatibility with hypothetical plugin clients.
#215 : cart purge functionality
Fixed performance issues on summary page by storing derivedCategory on transaction table
[299595] Improves the extensibility of XSD editor to add figure
Cache poll results Better accuracy of the Distributed Computing because not that much uploads of results Better performance and quicker results
"MAGNOLIA-2337: increased reusability of BarEdit, BarNew, BarMain and ButtonEdit by letting them use a Writer instead of a JspWriter"
Many wording/functionality improvements on monoalphabetic substitution and analysis plugin for monoalphabetic substitution
"sf patch #1432283, from John Lewis Adds the following functionality:"
"MONDRIAN: Implement functions DrilldownLevelTop, DrilldownLevelBottom, and     add support for index form of DrilldownLevel function. This required a     new syntactic type, the empty expression.     Fixes bug 1816112, ""MSAS Compatibility issue, Empty Params in Functions""."
ISPN-3526 Inject dependecies into the marshaller used for compatibility mode
improved L compatibility
"Add a new window in time for event occurrences: the year, so that this new functionality provided by the Almanach EJB can be directly used for rendering event occurrences in the current year instead of using the overloaded getListRecurrentEvent() method. It stays the AlmanachPdfGenerator to update with this new feature. In todo: add a message waiting during the load of occurrences in a given period (weekly, monthly or yearly)"
Implemented feature request #4694: Annotators lack an 'update' functionality (#4787)
Allows traceability to alter indentation
Fixing bugs and optimizing performance
CAMEL-6340: Added cache for compiled groovy scripts to speedy performance. Thanks to Antoine DESSAIGNE for the patch.
"package misannotated -> problemfacts (package names are functionality based) + remove ""test"" prefix of test names (JUnit 4)"
IN PROGRESS - issue TRUNK-2015: Move some functionality from SaveHandlers to hibernate interceptors  https://tickets.openmrs.org/browse/TRUNK-2015
merged back form panel into template as extensibility can be achieved without having to separate those classes
RHQ-1053 - new back-end for measurement views;  smoke tested by re-integrated old UI functionality to use new back-end;  will write unit tests to verify the rest; 
Refactor plugin management for better maintainability
improving readability and correcting minor mistakes
+ Fixed compatibility issue with GWT2.1.0M1 (prefix mapping attributes were not generated any more because of a configuration issue with the SAX parser which replaces the 2.0.3 DOM parser) + Added more utility methods to OMSVGPoint
"reporting:   * Fixed data export persistence hanlder order issue  * Implemented ""Map indicator-to-cohort parameters"" story (not working yet).  * Implemented ""Create cohort definition (with parameters)"" story.  * Implemented ""Purge cohort definition"" story.  * Added better error handling.   * Improved usability for the Lab Report.  * Lots of small UI changes.   "
Added Orika to the performance test
ADD: more flexibility to XML schema
TMC-IOENC: Refactored Decoder to use ByteBuffer instead of byte[] for better readability/simpler code.
#NAME?
Fixed compatibility with 1.2.4
[jayes] better XDSL format performance
add a performance test
Refactoring of generic codegen functionality into a generic CodeGenBase class
Fixed JIRA PUSH-266 : Add listener functionality to NotificationProviders
CAY-1976 Slow performance of DbMerger
Moves commonly used functionality to MapOperation like recordStore creation and eviction
* Performance optimizations
Added password restore functionality
#NAME?
Added performance monitor snapshot event and listener. This is so that the junit performance testing can know programatically when the test is complete by listening for the appropriate step.
added opaque version of spout for increased fault-tolerance
fixed class name of the performance test
"JBRULES-461 JBRULES-616 Restore functionality, plus some cleanups."
Component and repeat functionality refactoring.
Bug 326081 [Compatibility] Workbench thinks there's an active editor even if it's behind views
Backward compatibility with JDK 7
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer
Move emit functionality from NullEquivalentStrategy in runtime to generate library
Try to improve performance of MeasurePersister
optimize the performance of archive file
Improve readability and documentation
merge refactored as a Command for extensibility as discussed on https://github.com/jenkinsci/git-client-plugin/pull/20
Bug 319997 [Compatibility] Merge QuickAccess changes from 293044 to 4.0
Bug 322827 [Compatibility] Views cannot save/restore state via IMemento
#SB-426: Extract the common metadata functionality into a separate re-usable module
kpme-1772: moved functionality to super class for approval pages
"Completes initial functionality. NOT TESTED. More to come, but I'm rotating off."
"improving readability, from rafaelferreira"
"Incorporated patches for handling gz'ed ps files, enabling [bibtexkey].*.pdf style file names for Autoset function, and removed use of browserlauncher. Improved preview test button functionality. Changed layout of AttachFileDialog."
"backend, restapi: Add read-only disk functionality"
Applies small bugfix in improve performance
Much more stability and unit test fixes with new node system
XWIKI-6741: Move all retro compatibility aspects to xwiki-legacy
Added measurement aggregation functionality
"Make the sub index functionality look like a function.  Also make it act like Perl's substr at the suggestion of jeffg@, where there is an offset (which can be negative which means it's an offset from the END of the string) and a length."
trying optimize performance
Greatly improve accuracy of pricing.  Partial items will now be sold with the proper price.
MODE-1631 - Fixed the ISPN configuration of the performance tests and some of the tests themselves
refactored move and onTick methods into more methods with single functionality
"Cleanup, fixes for memory leaks, reorganization for improved modularity."
Fixed missing parser functionality: function attributes for special function declarations like this(this) .
added more robust error handling and improved readability of main() method
Changed convert API for flexibility
Moved logging functionality from portlet to swtbotext
"performance improvements (expanding items), fix horizontal scroll bar and more"
srmclient: fix compatibility with castor
Move more functionality from play and stop scripts into the base for use elsewhere
"kpme-1267: added  logic to cover leave plan daily changes, performance enhancement"
"ISIS-107, ISIS-130: reworking web.xml for html and json viewers in examples in line with new behaviour of ResourceCachingFilter vis-a-vis IsisSessionFilter; improvements to the functionality of the onlinedemo"
TrackMate_: move some performance tests around post merge with Dscho
Concurrency and performance fix
Undo rename to fix requestlogger functionality Issue: WICKET-3755
HBASE-576  Investigate IPC performance
increased extensibility of iterator
IN PROGRESS - issue SOAPUI-2609: Switch environment functionality  added EnvironmentTestProperty implementation for TestProperty
Changes to enable greater compatibility with Hiero's rule extraction.
"Created entity factory, changed ExistingFileMatcher to use WorkspaceFile and added splitting functionality to WorkspaceFile"
Updated: Rewrote PConfManager to be generic (possible performance upgrade) (! - may break a few things)
"a solution to issue #6. However, it involves locking on GlimpseLayout.paintTo() which has the potential to affect performance. There should really nevery be any lock contention under normal circumstances, so I don't think it will be a big deal."
"Bug 372128: [syntax highlighting] ""Highlight enclosing brackets"" has massive performance problems"
Updated trace reduction GUI with functionality for restoring settings from the preference store
"1. Follow-up for fix for [Bug 188764] make it posible to apply the ""isCDTProjectCreating"" ICProjectDescription with no configurations 2. test for the above functionality"
"- Caching now transparently forwards exceptions and keeps working when serializers throw exceptions - Improved database-layer, removed 2 bytes for cid in references - General performance improvements - Model-data not stored transactionally anymore. Store model (which is transactional) is guarding access to models - Improved updating plugins - Updated to dump methods of new query objects to avoid hash collisions for different queries"
[ENG-136] Replacing global live data override functionality added for the demo with custom per-view live data overrides
Scalability: don't run incremental update if there are too many changes
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Added new API to get Bot Listener data and statuses * Added some more tests * Introduced Page Objects module for functional tests
XWIKI-7571: Improve maintenance and stability of IRC Bot Application * Added bindings for event scripts * Started implementing a Log Bot Listener to archive IRC messages * Added some tests * Added some javadoc * Misc improvements
Added buttons and finished all functionality of the dialog except for the refresh functionality.
add configurability to centric plugin
"cleanup - javadoc, improved code readability, replaced full object stub with mockito's mock"
work towards JSR330 compatibility
"Almost finished the overview panel on genen page. not all functionality is there yet, but starts to look like Nikolas's "
"Ticket #3032 - Implemented new, faster download functionality - based on a combination of bit index access and traversal of ncdfs files for matching genes, conditions and statistics types."
Bug 261293: [Scripting usability] Ability to set format of a control without changing the locale of the entire report
FUSETOOLS-1976 - improve usability when adding or inserting figures i… (#588)
"Changes from Kimloan Ho, hooking up lookup options UI functionality to the updated interface plus code cleanup."
Added some performance testing
progress in backend performance related to identifications
checking context function correctness
Moved harakiri functionality in own package
Disk Journal performance improvements.  Allow concurrent journal writes.
Reduce cache key instability caused by feature discovery during has! loader plugin branching.  Also simplify/consolidate calculation of expanded dependencies.
MODE-2661 Changes the logic of some of the Lucene queries to improve search performance The changes include both the logic of ConstantScoreWeightQuery which no longer goes through all the documents directly and also making sure to use Lucene native TermQueries when applicable. They also refactor some of the query code to use Java 8 idioms.  This commit also upgrades the Lucene version to the latest 6.4.1
Move Performance and BenchmarkTest under package app
"Merging the procedural animation controllers and emitters into Model  functionality, so that they will be visible in the model viewer."
"- performance da estatisticas 	- update do BD: cacheEstatisticas 	- n consulta + razoes e tipo de crime"
HEAD - Improve performance tests
"Performance optimization: - avoid Annotations, use Interface instead (huge win!) - avoid copying data - avoid copying subsets and use filtering iterator instead - use Arrays instead of Lists Additional tests"
"http://jira.sakaiproject.org/jira/browse/SAK-13372 All headers should now be up to date, also extended the functionality of the entity manager slightly to make it possible to determine the complete set of capabilities for an entity"
HSEARCH-2830 Use multiple entities in Elasticsearch performance tests
1) file data utilities - add utility function 2) improve context performance
"New patch from Chris Wiebe to boost the performance of the TypeInfo, a separation is done via the Core and UI to provide more flexibility for clients using this service."
Private: Added functionality to end game.
Adding returningDecoratorResult and ignoringDecoratorExceptions functionality
SONAR-4087 fix compatibility of Tinkerpop Blueprints with Java 5
Issue 695: Refactored getDailyCpuPerformanceStatistics into getPerformanceStatistics as it works for daily/hourly+memory/cpu
SOC-2371 | Avatar : Native english usability review
Big refactoring to improve performance at N levels: - Serialization now minimizes the creation of temporary small objects like Strings. All serialization method receives a StringBuilder and append data directly to it - OLazyRecordSet now keeps the items always sorted for faster retrieval of items
WICKET-4802 Add functionality to be able to export DataTable content
"All panes have the new design, but functionality is still missing."
Removing AS2 functionality from oxalis-outbound.
"- Fix for bug#2216 -- KSC Report list is reordered every time a new report is added. - A unique ID is assigned to each KSC report, is persisted across edits, and is used instead of the report's index in the KSC configuration file everywhere, particularly in URLs.  The ID is initialized to be the report's index (starting at 0) in the KSC configuration file and is persisted the first time changes are saved to the file during normal editing. - Instead of having a set of fields in the KSC_PerformanceReportFactory that track what report and graph are being editing, move this to the new KscReportEditor object along with related methods and store this object in the user's session. - Use Asserts in afterPropertiesSet and other methods to simplify things. - Format code in a few places. - Refactor some controller handleRequestInternal() methods."
SCHEMA-354. Initial compatibility with HBase 0.94.
Refactored the html form view dialog functionality to much simpler dialog type from kenyaui
#NAME?
"Changed to inherit from PackageMemberAnnotation, from which we get some implementation functionality.  Split SignatureConverter into its own top level class."
Added functionality to fetch the approximated (VDM node) location of an IR node.
Fixing BotOperation to allow for testability for formatMessage
"Rework IStatDataProvider, now with more flexibility and 32% more compile errors"
Implemented a new way to pass the callback ID from an incoming websocket frame to the afterCommit WS controller where a broadcast message is assembled. This should improve the reliability of the websocket callbacks in case of bad network conditions.
"[JENKINS-43536] - Restore full binary compatibility, move some logic to EnvInject API"
#NAME?
"Better compatibility with Essentials ""jail"" plus big performance improvements"
Moved annotation and cache functionality from the HistoryParser to ExternalRepository
added includes functionality
Extend counter functionality.
Improve compatibility with some economy plugins (hopefully) #385
"also support non-length delimited JSON tweets (performance testing), upgrade jackson to version 2.2.1"
Clarify property name and functionality
o MCOMPILER-172: restore backward compatibility for downstream consumers
KPME-2347 - spring modularity structure -- probably still some cleanup to do
several usability improvements for palette and properties view (FUSETOOLS-1202 FUSETOOLS-1203)
Restore API compatibility of CxfPayload
"Huge commit. Fixed bug in dependency extractor that prevented if-then branches from being processed. Changed the dependency extractor to detect dependencies between types, including subtypes (tested inner classes only, but should work with static nested classes as well). The functionality to retrieve dependencies between compilation units (files) is still present, but now such graph is built on-demand from the type-dependencies graph. Very preliminar initial tests."
"Moved DefaultArtifact, DefaultArtifactType, DefaultMetadata and DefaultDependencyNode into API to improve usability"
"Simplify dependency flags to use a common set for all module types. To date, CommonJS modules were automatically converted to JSModules. This interfered with interoperability with other module systems and added no unique functionality. Remove this and associated tests. CommonJS modules now are treated with parity to ES6 modules."
"MODE-2684 Removes the compile time dependency of modeshape-core towards Apache Tika The mime type extraction functionality will still function as-is if Tika is present, but now there is also an independent extension-based default which will be used if Tika is not present in the CP at runtime"
Bug 336985 [Compatibility] IWorkbenchPage.CHANGE_EDITOR_OPEN events are not fired
SCHEMA-31. Refactor locks for testability purposes.
SHIRO-25 - Implemented 'runAs' functionality!  Finally! :)  Implementation is localized to DelegatingSubject at the moment.  Accompanied by test case for verification.
HBASE-4054 Usability improvement to HTablePool
Refactor and add new functionality to 'StoreAssistant'
Consolidates controller logic.  Renames methods for better readability.
[sync] Next package of performance improvements
"JBIDE-5149: Make OpenOn work for styleClass=""|"" JBIDE-5119: Refactor PageContextFactory to improve performance of context creation."
"PrismTech JAC#789: Refactoring of interoperability test suite (correction of packaging, simplification of ant script and integration with regression test suite)"
Add the getBug() functionality in class Bugizlla
1) Refactored SIRI structure to more closely resemble existing SearchResults design. 2) Completed intial LinesRequest functionality
EST-1289: sketches out the PaymentBatch functionality
added load resources functionality for modules
JBEHAVE-267:  Renamed StoryEmbedder to Embedder as it is more representative of its multiple functionality. Renamed correspondingly the configuration and monitor classes that the embedder requires. Renamed package from runner to embedder.
CAY-1421 CayenneRuntime shutdown functionality
"MODE-1667 Changed RepositoryFactory so that it does not have ""dual"" functionality: that of a container and that of a repository factory. Created a new service interface & implementation named RepositoriesContainer which exposes the kind of operations that are required by the web extensions."
Improve XML Data Import performances
Introduce DatabaseTransactionNotificationApi to allow services to register for database completion operations (commit/rollback) Mofify InflightQ algorithm by using the new DatabaseTransactionNotificationApi to provide a synchronous way to be notified about rows comitted on disk. This provides a reliable notification mechanism (as opposed to the polling model) which should both improve latency (performance) and remove unfriendly database polling queries.
Implement more ServletContext functionality
Bug 431361 - Label and activity equals two objects Bug 390575 - Support BPMNLabel DI elements Bug 390566 - Label feature package is not exposed Bug 355672 - BPMN2 Modeler Usability: look & feel Bug 400944 - Add Participant Bands to CallChoreography and SubChoreography Saving work.
"Revert ""Bug 320672 - [WorkbenchParts] [Compatibility] SWTException when activating an editor with stale content"""
Improve performance
"[CLEANUP] - Refactored code to improve maintainability and facilitate unit testing - Added parsing methods from String in MarketplaceXmlSerializer - Moved DocumentBuilderFactory dependency from PluginService and RemoteMetadataPluginProvider to MarketplaceXmlSerializer - Set IPluginResourceLoader as PluginService instance dependency instead of global static variable access - Encapsulated getting Pentaho session and PluginManager in an instance method of PluginService to facilitate mocking - Removed PluginService dependency on PluginFactory, PluginVersionFactory and CategoryFactory. - Added PluginService dependency on MarketplaceXmlSerializer and IRemotePluginProvider. These are set via decency injection configured in the plugin.spring.xml.template."
M2 code: test cases updated Performance history details added for savings account
Merged groovy action updates from philkom/master Had to fix some issues regarding script template resources and backward compatibility
Performance tests can be executed so that you get stats for modes:
Implementation : Performance history for client and loan. M2 code.Test cases added/updated
Performance optimizations
Parser performance improvement through flattening the inheritence structure & removing reference caching.
Improved performance of TRAVERSE and SQL graph functions
Subtitles search and buffer performance changes / DVR-MS fix / Small changes
revert code for performance issue
"Updated Quast to V2.3, so we can use the gene finding functionality."
Added specific versions to maven plugins in orika-parent for build stability Applied a MappingStrategy functionality to cache all of the branch logic and lookups performed for a given set of inputs -- for a reasonable speed improvement Cleaned up test cases where javassist was writing source and class files
"Added option to depth-sort the triangles in transparent meshes.  I tried  to optimize this, and seems reasonably fast, but not fast enough to  enable it for all transparent meshes.  Hopefully the artists can improve  performance by merging meshes together, and we can strike a happy  balance between sorting by mesh and sorting by triangles."
Improve CSV data import performance
HEAD - Bug 324987: [formatter] API compatibility problem with Annotation Newline options
Bug 326161 [Compatibility] Shutting down while dirty parts are in inactive perspectives does not cause a prompt for save
performance optimization to hierarchy construction
Moved test cases opening the database 100 times to performance since it takes quite a while.
Patch for David Daoust - remove all instances of sub-Scanners in the scanner.  Performance gains abound.
"Updated CheckpointDataOutput, CheckpointDataInput for readability and to inplement OrbConfigurable."
#NAME?
"    Hudson will now kill all the processes that are left behind by a build, to maintain     the stability of the cluster.     (<a href=""https://hudson.dev.java.net/issues/show_bug.cgi?id=2729"">issue 2729</a>)"
HIVE-10306 : We need to print tez summary when hive.server2.logging.level >= PERFORMANCE.  (Hari Sankar Sivarama Subramaniyan via Thejas Nair)
remove the functionality in the org.jboss.tools.forge.core.ext plugins
"http://issues.apache.org/bugzilla/show_bug.cgi?id=22692 : - added new splitPreserveAllTokens methods to mirror the split functionality, preserving empty tokens indicated by adjacent tokens; - refactored logic of existing split method into splitWorker for sharing by new splitPreserveAllTokens methods"
"Uses skip list to sort entries before adding them to entry log file, to improve ledger read performance. Memory arena is used to allocate skip list entries, to avoid GC impact. A single-threaded scheduler is used to flush skip list to buffered entry log file channel, once configured data size limit is reached. Sync thread is notified as well to flush file buffers. Compaction uses Skip list, to  merge entries together as well as remove duplicate entries. This change also fix an existing issue of old entry logs being removed w/o forcing new entry logs flushed."
"Moved all substitution functionality into separate class View vars, user vars, predefined subs, custom subs"
Renamed some files to reflect functionality.
https://jira.jboss.org/browse/JBIDE-7264 Added tests for performance issues.
Create Enterprise add functionality.
Added more functionality to the dash page.
"Cleaned up imports, removed activeArrowEffect system, increased speed and efficiency, added timed arrow effect scheduling"
 - Added the Search functionality.
improve robustness of url resolver during template compilation
SONAR-8458 fix compatibility of locally-built plugins/SonarQube
refactored HtmlServlet: removed unneeded code and improved performance
"Teiid 773 -  changed the following: -  the testcase will not use system property to pass in overrides/additions to the loaded config.properties file.   Now will use an addProperty() method provided on the abstract testcase that will apply the properties per test. -  remove the  datasource_mapping.xml.    There is no need to distinquish between xa and nonxa connector types.    The connector type will be specified in the connection.properties file. -  if using the -DuserDataSources property to control datasource, it will imply order based on whats specified.    The config.properties file will now map the model to order (i.e., pm1:1), where this order determines which datasource it will correspond to based on the userDataSources property.    This mapping is done so that the nightly testing process can control which datasources are being used and can ensure retestability."
RF-11117: Modified pickList component to use the list.js functionality
"KERN-1652 Added Code to sign token content items, and to resolve home based tokens. This completes the sparsecontentmap part of KERN-1652. Next I need to add functionality into the world servlet to grant access to content pool items via world locations, and to access content pool items via world locations."
"Improved XOM handling. Now (optionally) using XOMSource and XOMResult, with increased performance."
Cleaning up some dodgy string comparisons and extracting a method to improve readability
Disabled test form JettyHttpClient since it breaks Java 6 compatibility
add the verify functionality
Refactor EntryPoint class to improve readability.
"Improved ZooKeeper usage in rowlog: made it safe against connection losses, and use separate thread for internal event dispatching, so as to not block other ZK watchers (e.g. waiting on a SubscriptionsThread to end in the RowLogProcessor).  * Used ""observer"" terminology rather than ""listeners"" since the MQ itself also has listeners, to be able to easily distinguish the two concepts    * Renamed SubscriptionsWatcherCallback to SubscriptionsObserver    * Renamed ListenersWatcherCallback to ListenersObserver  * All functionality is grouped in the inner class ObserversSupport of ConfigurationManagerImpl. This replaces the getAndMonitorSubscriptions/Listeners methods. Instead you can now do addSubscription/ListenerObserver, which by contract will call the observer after adding it."
[WEBCORE-27] Added functionality
Code cleanup and some minor performance fixes.
Improve client side record serialization performances
Adding delete item functionality
First iteration of streams functionality.
Updated to use new loggers. Patched classloaders for stability and isolation of web applications.
"Renamed auditLog to changeLog to prevent misconceptions concerning the use case and functionality of the log data, renamed config parameter name to application.changelog.enabled, added support for array properties in changelog."
Basic Stateless/Business Remote functionality works.  Part of OPENEJB-92
Fix for uninitialized String expressions and general cleanup of the declaration assistant by moving some functionality to the expression assistant
Added functionality to the gui.
Added functionality to XMPPClient
Refactoring for #31: - Replacing the Criteria class with an interface - Moved almost all implementation details for the criteria functionality into the impl module.
sorting the index before append to the disk to optimize the performance.
Added autocomplete tab compatibility with multiple names
App-schema Joining Performance Improvement GEOT-3593
Implemented RuleML 1.0 parser with compatibility mode for 0.88 and 0.91
#NAME?
rename MutablePair setters for bean compatibility
Fix inefficiency in FilePointer GenomeLoc validation
"Added since tags, restored deprecated method in AbstractBranding to maintain compatibility"
GRECLIPSE-998 Added type browse functionality and fixed several NPEs
More domain fixes: - removed Customer (not needed for now) - moved Allocation->performance relationship to Booking - added hashcode()/equals for Allocation and Booking
Check point console process status work before refactoring to merge AgentStatus functionality into ProcessStatusSet.
Performance improvements
SONAR-7300 Improve readability of RoutesFilter
Enhanced WKTShapeParser for extensibility.
major restructuring on the way to good separation of functionality
Refactor ProcessInstanceUtil & StartProcessInstanceCmd for extensibility
"Complete rewrite of most of this module -- old one had a bug in parseBefore() and parseAfter() - same/similar interface, now includes several constructors, is based on Calendar instead of ArchiveUtils, is majorly refactored, and does not throw ParseExceptions. The lack of ParseException requires significant slight changes to the rest of the codebase, to remove (woefully inadequate) handling of this exception. Possibly this new version will have performance issues..."
"fix intermittent failure in JDBCNegativeQueueTest, sync store add and cursor add such that cursor is always in order w.r.t the store. Hense, when the cursor cache is exhausted, resuming from the store is just fine. Without the sync, moving from cache to store can result in duplicate messages, out of order messages and on occasion missing messages. disabling the cache resolved all of the above but kills performance. Syncing the sore add and cursor add is the correct solution, but it has an impact on concurrent transaction completion for a destination, paralell completion across destinations can still continue, so there is still some batching potential"
improve mysql sql parser performance
"Split off IIOP EJB client classes into seperate artifact, and implement some missing IIOP functionality"
"updated docs (read that for a summary of this commit); added byon compatibility for RegistryLocationResolver, to pass flags to it from a named location"
Functionality is ready. Docu is left
Added functionality to PrivateMessage for either supplying username/password OR basic auth token.
[CORE] Add RANDOM functionality and more filters.
Fixed Bug 426984 + Bug 425897 capture incompatibility issues.
Refactoring of JML generation related utility functionality to promote reuse
(PLF-4239) JS of Getting Started portlet not good for performance.
Many robustness improvements to the downloader
Inproved I/O Manager performance.
"EHV-23, EHV-24: Modifications in Service, Dao and UI layers for Customer --> Project --> Activity structure Basic functionality is working. Still more testing to be done and few areas are work in progress"
fixed a bug in the backward compatibility support and added a test case for the regression test.
"Additions: zip,thread-safe,locale,scheduler,bugfixes,performance improvements"
"#943 - Refactor internals - Performance tweak / tidy for WhoCreated, WhoModified on OneToMany connections. #942"
"Finalized Sorting, Hashing and Resettable logic. Baseline performance passed."
"o Added IndexHits#currentScore which exposes the most recently fetched   IndexHits item's score from the search, if any. The lucene-index supports this. o Moved the ""index"" shell app to the shell component where the other kernel apps are,   it was misplaced in lucene-index. o Added QueryContext#topDocs(int) so that you can specify to retrieve only the top N   hits from a search, which may improve performance - even if when retrieving all hits   the iteration all the way down to lucene is done lazily. o Performance improvements regarding the iterator stack which makes up the return IndexHits   instances from query/get methods. Previously there could be 5-7 nested iterators.   Now there are only 3-4. o Added configuration parameter ""similarity"" which controls the Lucene   IndexWriter#setSimilarity(Similarity) for an index. It points out class names."
Initial commit for the build description model functionality
"Implement new, high-performance cipher in native code. Currently available only for Linux-x64, other platforms will fallback to Java cipher."
"Readability: changed populateFedoraRoles to populateFedoraAttributes and updated comments/javadocs, since the method has the effect of populating FEDORA_AUX_SUBJECT_ATTRIBUTES with fedoraRole in additional to all other subject attributes."
Fixed profile experience UI and functionality
Various minor fixes and performance improvement.
"org.eclipse.cdt.core 	Added some trace statements to CompleteParseASTFactory.   	Cleaned up usage of Enum.getValue() wrt encapsulation of enumerator value.   	Refactored CompleteParseASTFactory for correctness and abstraction.  	Added preliminary IProblem support to CompleteParseASTFactory.   	Added (commented out unfortunately) assertions into CompleteParseASTFactory.  	Updated IASTUsingDeclaration to return an Iterator for declarations mapped rather than just a single declaration.  "
Java 7 compatibility introducing SslUtils.getTrustAllSLlSocketFactory()
HIVE-4838 : Refactor MapJoin HashMap code to improve testability and readability (Brock Noland via Ashutosh Chauhan)
Improve performance tests and add a test for empty message strings as well as escaping braces
Add NotForForwardCompatibility annotation into tests
TRUNK 4374: Improve performance of getCountOfConcepts
Moved performance metric tracking and reporting classes to appropriate package
adding old-style query compatibility layer
#NAME?
Performance enhancements to legacy layer
Add operation count based functionality to benchmarks
#95: Implement more pedigree compatibility checks 
"branch:      javabot Most of this checkin is related to the patches from avalys, which will be added to the patches directory.  jdom.jar was updated to Beta 10 because some classes were moved around inside it.  docs/BUGS should have been added some time ago. build.xml now has a buildxml (maybe that's badly named) target to build the javadoc-related XML.  docref.xml is a rather large XML file that the javadoc functionality uses."
MLHR-1798 Improved robustness of query checking and validation for snapshot schema.
Added more placeholders for future functionality
Changes to util classes to add some flexibility to the location of the PresentatioonState object.
Repackage compatibility
Refactored: removed ConvertEntityToBytes and moved its functionality to GcAwareEntityRepository
"This update adds additional functionality to dfr-syn in partial fulfillment of dfr-91.  Given the existence of a directory /tmp/dfr-test/ with several files in it and a locally running duracloud instance on 8080 with admin/apw credentials, files are being uploaded, and active and queue status info is being reported."
A few refactorings in anticipation of more formats that needs some common functionality
#NAME?
removed PerformanceStats since we've moved from a loopbased to an event based system Fixed mobs falling through the floor on 'in npc'  Fix hp bug Cleaned up a lot of legacy movement handling and moved them to the session system.
Refactored all operations to use OperationsParams and GenericOptionsParser. Let operations access command line arguments directly for flexibility
Bug 428427 - introduced ResourceBundleProvider to increase extensibility for loading resource bundles
Code review: pulled up some functionality into AbstractMarshallingSession. Reduces several cut-n-pasted code chunks.
"refactor, fixes, performance upgrades deleted feedback factor"
"Implements Editors functionality, single ok but infinite editors partially First shot of serialisation of the MapContext in the GUI (the map is automatically saved by the map editor)"
Fixed unit test to reflect current core snapshot functionality.
Updates to events and session list functionality.  Started adding twitter feed for events.
Improved robustness for download failure cases
HV-912 Reducing accessibility of some classes and methods
Bug 445802 - Heavy progress reporting degrades performance
Massively improved efficiency and performance of Criteria folder handling.
make performance meter factory configurable through .options
initial take on the new enunciate engine run() functionality
Added functionality to handle InputStreams. (useful when loading JarEntries)
ISPN-5200 Enhance performance of annotation driven marshallers by caching nested entity marshallers instead of always looking them up
#NAME?
1. Additional fixes for [Bug 174936] [Scanner Discovery] Per file scanner discovery is broken with the New Project Model functionality 2. Bug-fixes
Initial (non-working) version of compatibility filter.
finish out button functionality and testing
performance patch from Andrei Loskutov
"Autotest added, Tokenizer reusability bug fixed."
Removed all trace of annotation and moved functionality to Annotation
Introduced dev and prod profiles to increase configurability
"Replaced generic pair class with specific wrapper for candidates and their fitnesses.  Fitness values are now always primitives, there is no auto-boxing so performance should be better.  Also tweaked a few Javadoc comments."
HTML-50: HTML Form Entry module needs to support Problem Added / Problem Removed functionality some more refactoring
HSEARCH-2717 Performance tests in sandbox running out of JDBC connections
SONARPLUGINS-127 Create a Sonar Jira Plugin some refactoring to improve code readability
"https://jira.jboss.org/jira/browse/JBIDE-5638 - implemented support of the attributes ""name"" and ""library"" for the tags h:graphicImage and h:outputStylesheet. - created JUnits for the functionality"
Fix #1419 Getting null pointer error when trying to calculate modularity Fix #713 Modularity Calculation Throws Exception On Empty Graph
Rewrite of the fedora part part of the bitstorage. Hopefully much better performance
"* Fixed some GUI layout issues. * Added clear button for the first related file selector field, the executable file selector field, and the source code files selector field. * Fixed template string insert-placeholder functionality."
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer (Adding back in Facelet support for bridge:inputFile)
CAMEL-5675: Improved startup performance. Especially when JMX enabled. Introspection and JMX mbean assembling uses a internal class introspection cache to speedup.
"NOJIRA Version 1.0.1 In this version: 1.) Added Xstream implementation for retrieving xml in xstream package. 2.) Moved dom4j code to new dom4j package. 3.) Updated edit functionality, added new controllers. 4.) Added multiple locations ability. 5.) Externalized many items in jsp pages/classes to messages.properties 6.) Updated pom dependencies. 7.) Externalized constant variables to interface. 8.) Adjusted test to handle more generically and correctly. 9.) Created smaller accuweather logo. 10.) Added accuweather.com terms of use file."
"- Added OpenGL interoperability methods to CLContext and CLQueue (can create a CLByteBuffer from an OpenGL buffer object, a CLImage2D/3D from an OpenGL 2D/3D texture or a renderbuffer). - Finished migration from NativeLong to NativeSize (breaks low-level bindings but fixes the OO bindings) - Removed line comments from low level bindings to make update diffs more readable - Updated changelog"
"HAP-499 - Compatibility with ""Flexible publish"" plugin, only supported with Maven builds"
Clip/concat functionality
HBASE-6295  Possible performance improvement in client batch operations: presplit and send in background
Committed Benno's patch to fix bug 113247: [performance] investigate using a range index in AnnotationPainter or AnnotationModel
re-added zoom to coordinate functionality while deleting a lot of cruft
[FIXED HUDSON-1938] Moved Maven project's block when upstream is building functionality up to AbstractProject. Now available as advanced option for all project types
"Some progress getting Array_Realiz to compile.  Also, fixed an incompatibility where I had inadvertently introduced a Java 7 feature into JProofDisplay."
"HBASE-528 table 'does not exist' when it does -Changed HStore and Memcache methods for computing closest row at or before -Added more test cases for verifying this functionality -Simplified the getClosestRowBefore interface so that it does not take timestamps -Noted that getClosestRowBefore is assumed to work correctly ONLY on tables where updates are always with ascending timestamps (method is still not a part of HTable interface, so not available to clients)"
"Prototype implementation of protoshard merging when protoshard n and protoshard n+1 completely overlap.  Gives a small but consistent performance increase in  non-intervaled whole exome traversals (2.79min original, 2.69min revised).  Needs a more in depth analysis of optimal shard sizing to determine a true optimum."
Improved reliability by adding priority execution for System Operations.
"Standalone Atlas: NetCDF generation performance tuning, using Deque class to make sure refs to Future aren't retained.  Renamed Deque append() method to offerLast() though, so method names are identical to their equivalent in Java 6 Deque - it'll make it easier if we want to switch.  Updated context.xml and loaderContext.xml to use connection pool properties that seem to nullify the pool exhausted exception: due to maxIdle value?"
"improving performance, especially around FK metadata reading"
Functionality moved from from ConnectorGui and ../client/HubConnector into GuiHubConnector
339835: Remove all classes that provide backward compatibility for eclipse & swt 3.4 https://bugs.eclipse.org/bugs/show_bug.cgi?id=339835
Refactored: made RestService protected and moved all functionality to LeanEntity.
"Move enable jobs functionality over to the Jobs class, this also now runs code after everything has been initialized"
Add counter on issues performance tests
Performance improvements around anonymous entry points.
Bug 283178 [Compatibility] Make actionSets visible/invisible
Re-factored limit functionality for including specific genes in fusions
synchronize the performance optimize from 2.2.1 to main branch
refactoring to improve extensibility
Rename Scenegraph to Scene for simplicity
SONAR-7782 Rename QualityModelMeasuresVisitor to MaintainabilityMeasuresVisitor
Improvements to system tests readability
Bug 263090 [legacy] Load the model with commands and handlers Bug 271331 [Compatibility] Fill in the main menu with menu contributions Bug 271332 [Compatibility] Fill in the main menu with action sets
MONDRIAN: rolling back removeoverlappingtuples optimization for distinct count.refer http://forums.pentaho.org/showthread.php?t=59308.By removing this tuple list optimization we get a boost in performance at the cost of losing capability to handle elimination of duplicates and duplicates occur in rare scenarios.
Google App Engine compatibility as a plugin (.jar).
Performance improvements
"Added schema json importer and extended existing import functionality to support Schema JSON. Now you can incrementally extend an existing schema by adding Schema JSON embedded in <script type=""application/schema+json""> tags in Widgets."
MAHOUT-796: SSVD power iterations; performance patches.
Add documentation about E-mail sending functionality. Update JUnit version. Code refactoring. Imports optimizations. Changes to UI of E-mail Templates page. New values for i18n. Validations of E-mail functionality.
GTNPORTAL-155 Merge performance branch ( up to revision 473) into trunk
Improve LoggerManager compatibility
Portlet: Created JBDS7CompatibilityGatein test with artefact updated on nexus
"Implement ClassPath class, refactor analysis code to use new ClassPath functionality, start adding verification for individual opcodes"

Commit message
added additional device and component abstractions added device and component event listeners
"* In alignment-to-text, tsv or tsv-single-base output there was a column for score but no header. added header. * For the QueueObjectPool, made a more generic interface and added a Null version that always creates new objects. This can be used for performance comparisons. * Added another layer of object abstraction GobySamRecord which contains one or more GobySamSegment. Things that exist for the entire read are stored in this object and the parser returns a GobySamRecord instead of a List<GobySamSegment>. This is easier to understand and models the data better. * Discovered a minor error with GobySamSegment sequence variation generation * Added tests from seq-var to verify seqvar during clipping, indels, etc. Make sure gsnap->sam->GobySamParser gets the same output as gsnap->compact-alignment->display-sequence-variations which enabled me to find one more issue with gsnap->compact-alignment seqvar generation related to soft clipping."
added LooseCouplingRule
"Extracted the administrative methods from the services and into a separate ""ServiceAdministrator"" component.  The use of composition rather than inheritance allows each service to reuse the service management functionality without having to extend a base class.  "
Added group size message to ECF shared object-over-xmpp messages
added getSolver() into LUDecomposition
JBQA-8017 Size rotating handler test rotate-on-boot attribute
fixed WICKET-2076 Need a way to programmaticaly configure the size of the chunk buffer Issue: WICKET-2076
Performance improvements:  - Memoized MathUtil's cumulative binomial probability function.  - Reduced the default size of the read name map in reduced reads and handle its resets more efficiently.
"Make bitcoinSerialize() return a copy by default, provide an unsafeBitcoinSerialize() method for high performance applications that are willing to deal with the extra API complexity."
tightened implementation of the abstraction of the graph configuration.
improvement: preferred tile size set
Fix bad URL rewriting during CSS inspection when nut comes from heap composition.
* SchemaIndexProviders are now loaded as KernelExtensions * Simplified solution for using in-memory lucene indxes when using an EphemeralFileSystemAbstraction
Make chunk size an argument. Default is -chunk_bits 24 -> 16MB.
Extended renderers to allow a more compositional and traditional approach to interface engineering
Adding streamy vs chunky abstraction
inheritance of namespace declarations for nested bundles
Fix for query parameters deserialization with remote connection Fix for ObjectDatabase automatic OClass generation and inheritance Fix for ObjectDatabase in version field conversion
sketched out the start of a columnstore abstraction; investigating better ways of modelling financial apps
Fix for the issue 4. * making sure that connections are all established before migration. * redo size call if any of the block is migrating.
Introduced Datastream abstraction for use with DatastreamService
Working on drivers for Plink's MAP and PED formats. Added a helper function to count the number of trailing newline characters at the end of a file to correctly get the number of elements. Restructured into packages. Introduced class 'Biallele' for the data types. Applied inheritance to data types to avoid duplicate variables.
"bug 7362: we were missing the size validation check, when we create a volume from disk offering (the storage.max.volume.size param wasn't being used for validation). Fixed the same, made the validation method name more generic to be applicable to all validations, and changed the param description to denote GB as the unit status 7362: resolved fixed"
Added proper font size management to the new GUI
DDF-512  updated so that HazelcastNotificationStore uses Hazelcast directly vs. platform cache abstraction
REPLACED tabs with blanks (4 per tab) UPDATED readme UPDATED bucket merge to reset the file size to 0 after a merge
MAHOUT-251: Generalized and refactored Dirichlet models and model distributions to  remove 2-d and dense vector assumptions by introducing a new abstract  VectorModelDistribution to provide a modelProtootype and size to the distributions for  creating prior models of arbitrary vector size and flavor.
added metadata abstraction
"BLC-799 : When setting up a datasource with a ceiling entity that is not an interface, the inheritance hierarchy can be incorrect. (cherry-picked from 785dd2c)"
"expaning writer abstractions, refactor packages, removed unused"
"Optimize ImmutableList,Set,SortedSet builders.  In particular, uniquify ImmutableSet/SortedSet contents in-place, and make it so that if an ImmutableSet/SortedSet is initialized to the correct size and has all unique elements, then no copying is done at all."
"CAS-1116 Refactor KryoTranscoder to use an initial buffer size and add explicit buffer overflow protection to handle what should be edge cases with proper buffer sizing.  Also, correct improper usage of ByteBuffer#array(), which caused entire backing buffer to be stored in cache instead of just used bytes. Unfortunately the fix requires byte array copying with the resulting object allocation overhead."
Remove some index fields in order to reduce the size of the document.
Fixed a window size bug in the download sites editor. Added the ability to download beta modules from Crosswire.
cleanup of Encapsulation class
Merged EigenDecomposition and EigenDecompositionImpl (see MATH-662).
Refactored to use annotations instead of inheritance.
"Added Peer inheritance in comm. tests, user-defined CommAddress"
Reduce size/complexity of app.js serialization (#959)
Browser should open to maximum size by default
moving the recomposition out of the main method
[KARAF-831] Added cluster:group-pick command. Also added output suppression support for all group commands. This is really useful for command composition.
JaxbCollection: Renamed size to maxLength
webadmin: Edit/Remove Template & VM abstraction (#748413)
SPR-6093 - MVC Annotation Inheritance
Remove uneeded abstraction
Issue 176: size can now test compatibility with images; refactored vcloud config logic; updated to support latest bluelock
"Added a layer of abstraction, to make it easier to insert a new ScriptEngine"
SONARPHP-613 Improve ClassComplexityCheck
IDE-943: added abstraction to make IContentAssistCalculators independent from WTP's internal classes
major overhaul of the JavaDoc mechanism to support JavaDoc inheritance
undid generic DocumentAccessor due to unnecessary complexity
"Tighter coupling of subscription expiry logic with other subscription management. The previous implementation could detect an expired subscription, allow another client to subscribe to it, and then stop the (now active) subscription."
Refactoring of SlidingWindow class in RR to reduce complexity and fix important bug.
Fixes #216 Interceptors do not support Entity inheritance
"Minimize transient garbage volume by optimized serialization based on the 'Kryo' library * AutoKryo     extension of Kryo to allow classes to control their own registration, trigger registration of associated classes, and deserialize classes without no-arg constructors * KryoBinding     binding for use with BDB that uses AutoKryo serialization for a 2X-4X reduction in byte[] size * UURI     improved serialization via Externalizable and Kryo's CustomSerialization methods * BdbModule     discard deprecated CachedBDBMap option     (getObjectCache) extend with both declaredClass and valueClass (for when map values are specializations of the declared type, as with frontier.allQueues)     adjust type declarations * ObjectIdentityBdbCache     use KryoBinding rather than SerialBinding * CachedBdbMapTest     discarded * BdbFrontier, BdbServerCache, StatisticsTracker     adjust type declarations, objectCache creation * BdbMultipleWorkQueues     use KryoBinding rather than (Recycling)SerialBinding * BdbWorkQueue, CrawlServer, CrawlHost, CrawlURI     add autoregister support * LinkContext     public for kryo registration  "
"Uses DEV_NULL instead of SYSTEM StringLogger in many places, as well as abstractions instead of printStackTrace() and such. This greatly reduces amount of logging to the console when running kernel tests."
fix configuration abstraction for c + tests + minor fixes
XWIKI-11460: Allow filesystem skins to indicate a base skin * better handling of cross inheritance
"New tests and fixes - inheritance, injection"
Complete LUP decomposition with pivoting
"more code cleanup, exporter is now even simpler due to composition"
Reduce complexity of tool framework
Created ValidationEventHandler which allows the xml file to be validated Validates xml files before they are unmarshal Added an additional method to auto find a elementMass file in default location Generated the schema for aminoacidcomposition.xsd Change the XML file structure such that the element weight is directly recorded instead of computed Remove all the test cases for the computation of the abundance. Successfully generated an XML schema for ElementMass.xsd and AminoAcidComposition.xsd Remove abundance from ElementMass.xml
Support for scale relations and checking them in coupling
Break apart the inheritance structure of the timeline into Timeline and MessageListener.
"Checking in downsampling iterator alongside LocusIteratorByState, and removing the reference implementation.  Also implemented a heap size monitor that can be used to programmatically report the current heap size."
allow inheritance of @UseModules
more inheritance testing
Added popups. Introduced page-level abstraction called container for pages and popups.
[historyView] Reduce commit dot size and expand lane color palette.
- A bunch of JMX related tiding up.   - Added a sendTextMessage() method to the DestinationView so that a JMX console can send a test message to a destination.   - Renamed a few bean properties so that they would be more consistent:       - use get*Counter for properties that keep incrementing       - use get*QueueSize for poperties that repesenet the size of list in broker.   - the gc() method on the broker is now the only one expose   - the CachedMessageCount is not exposed anymore.
Bug 497008 - java.lang.StackOverflowError or eclipse crashs when using Quick Type Hierarchy and Open Type Hierarchy on cyclic inheritances
"Dump sample for Mysql, file size request, file size printing for dumps."
bug #5154 : incorrect sender for pdc notification - taking the opportunity to fix a little problem around the footer of the mail sent by delayed notification mechanism - refactoring the inheritance of created PDC user notification classes and renaming them in order to be homogeneous with the existing ones
"continued cleanup, made tables joined inheritance and matched nullable/sizes"
"HIVE-1631. JDBC driver returns wrong precision, scale, or column size for some data types (Patrick Hunt via cws)"
[C#] Updated complexity distribution computation
"major reimplementation of list and combobox binding dynamic filter and dynamic sorting is now fully supported through java.util.Observable. selectableItemsHolder replaced with selectableItems property to support any selectable collection type like ListModel, Collection, List, ValueModel (containing a collection type), Object[] or Object (single selectable element) reduced complexity of ListBinder/ListBinding. Collection type for selected items is now determined from propertyType including single selection and multiple selection ListBinder and ComboBoxBinder now supports the definition of preset values for selectableItems, filter, comparator, editor (only ComboBox) and renderer to support further customizing "
MIFOS-5111 : size of the image is fixed
Removed the obnoxious size pair and replaced it with two ints. NEW - # 348: Provide a TileStore implementation for accessing remote WMS instances  http://tracker.deegree.org/deegree-services/ticket/348
StewartSingularValueDecomposition: re-factor monolithic code and ugly switch statement into multiple methods
Enhanced tool palette composition functionality. Added Morph Activity/Gateway features.
Refactor Main test class to have higher abstraction
SONARJS-509 FunctionComplexity: ignore AMD pattern and IIFE
"Common abstraction of DockElement, DockTitle and other elements representing Dockables"
"Adding a notion of a graph composition, which is a series of GAV-sets each optionally paired with a filter that can be combined through some calculation (optionally) like add, subtract, intersection...then allow the RepositoryOps recipe to use that for complex recipes. Also, add the preset factories from aprox-depgraph (integration with cartographer) here so we can use them in embedded mode if we want."
"remove @JsonIgnore, remove inheritance of KillBillObject (auditLogs) and refactor worng property names for json building"
reworked groups (again!); now inheritance works
Major refactoring of FormModel related code: * Reorganized interfaces and implementations * Reorganized package structure * Improved JavaDoc * Introduced validation abstraction * Removed dependency on Rules for validation * Dirty tracking now works for unbuffered form models * Dirty tracking now fires property change events * Revert now works for unbuffered form models * Improved unit test coverage to about 80%
"[BACKLOG-4709] - Small changes in platform to improve performance - UserSettingService    - replace keySet() + get() combination with entrySet()    - remove useless object instantiation    - remove useless explicit map.remove() - AbstractSpringPentahoObjectFactory    - add logger.isDebugEnabled()    - remove useless non-null validation - OrderedApplicationEventMulticaster    - replace ArrayList with array for faster sorting    - extract stateless Comparator to a final field to avoid useless instantiation    - replace new Integer.compareTo() with Integer.compare()    - add tests - RoleAuthorizationPolicy    - create ArrayLists of exact size - JcrRepositoryFileAclUtils    - iterate through List, not Set - DefaultPermissionConversionHelper    - replace indexOf("":"") with indexOf(':') as it is more effective - AuditConnection    - change the order: first try to obtain a connection and only then sleep"
Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.
Added test case to ensure inheritance and properties work fine
Set default tray icon size which caused Tomighty to crash on start under MacOSX 10.6.8 (Lion 10.7) (issue #41)
Iterator now cover splits exclusively within their range (was off by 1).  Also fixed problem where the buffer size exceeding the split size caused overlap in the iterator.
"1. The joint estimation model now constrains genotypes to be AA,AB,or BB only (i.e. to use a single alternate allele).  Note that this doesn't work for the old models (point estimate or SSG) because calculations aren't divided by alternate allele. 2. Allele frequency spectrum is not emitted for single samples (since it doesn't make sense). 3. If in pooled mode, throw an exception of pool size isn't set appropriately."
[bs-15] Integrate audit abstraction into Spring Security setup
Removed complexity.
more refactoring towards a cassandra abstraction
Adds base api support via single-inheritance interfaces
Refactoring of filters to make better use of inheritance hierarchy.
Reduces the size of JavaScript emitted by HtmlWriter#writeAllGridJavaScript and changes it to not fire if the layout areas are already in the right order.
"Clean up Navin's abstraction over Hibernate Core, clean style issues, apply back changes from my original fix patch"
Fixed bug on change file size reported by Anton.
Removed FieldDecompositionSolver<T>.solve(T[]). This is in accordance with JIRA MATH-661.
Throwing out the Key and Value classes for now to reduce the overall complexity
Refactor People Project & Inheritance Projects
ROO-2018: Roo 1.1.1 does not support inheritanceType TABLE_PER_CLASS with GWT 2.1.1
Improved the UI for setting the battlefield size when creating a new battle.
adding valiation to Jaxb. Replacing strings with statics. correcting the composition of the specicmeasures xml
"Totally rewritten to simplyfy and compact the code + added 1200x1200 size, and set the step size to 100"
"A custom Info.plist file can now be specified on the command line. Also added other iOS target specific options (-entitlements, -resourcerules, -signidentity, -sdk). (#92) Auto-generated Info.plist used when no custom Info.plist have been specified will now support iPad screen size as well."
"Added abstraction to messages, to contain senders ip. Necessary to determine which slave message comming from at master, but also used to provide masterIp at slave's initial setup"
Reduce duplicate code and code complexity
created sketch of type handling removed unnecessary abstraction reuse for declaring type
Refining HttpServiceProxy abstraction.
Minor decomposition for extensions
Reduce move generator complexity
SONAR-5531 Set max limit when page size is < 1
Changed JOhm persistence paradigm to JPA-like from inheritance-like to make API use annotation-driven and minimally-invasive.
#135:  Comments InheritanceCompatibilityChecker
SONAR-8743 Handle only leak period when computing new size measures
HADOOP-6949. Reduce RPC packet size of primitive arrays using ArrayPrimitiveWritable instead of ObjectWritable. Contributed by Matt Foley.
More abstractions in Adapter pattern + exercise for Bridge pattern
Reduce testFileGetParallel input size to ~160 KB
"Fix for 256-bytes payloads, better errors for payloads that exceed the maximum size allowed, ability to estimate the size of a payload before adding a property, option to reject properties if the size estimate exceeds the maximum size allowed, new class for running specific tests related to reported issues, and more."
EST-76: more decoupling (asset from lease)
first steps to refactor the database layout code to use class inheritance
Semantin analysis decoupling Integration with prototype e4 DI integration New extension point
[PLAT-2500] Initial work on dynamic composition of market data providers
SONARDOTNT-49 Replace complexity distribution by class -> by file
Renamed TrafficCompositionInputData to VehicleTypeInput to more closely correspond with the XML element name.
"Start to build BWT abstractions, so we can present a reasonable facsimile of the BWT to the user no matter how it's represented on disk."
use eclipse prefs for indent size and initial indent
fixed inheritance recursion
"Reviewed by tlerios, Colin & Will per ENG-508 1. Added 2 new constructors to ExpectedFailure. one default and another one that accepts I18NBoundMessage. Updated all usages of the single arg constructor with a null value, to prevent compilation errors. 2. Added a mechanism to abstract out instrument specific functionality into pluggable classes. All the instrument functions in this checkin are abstracted out except for XML serialization, which requires the specific Instrument classes to be included in an annotation. 3. Added new option position APIs & option symbol <=> option root lookup APIs to the client. 4. Added pluggable mechanism to extract & insert instrument from / into FIX messages 5. Updated PositionKeyComparator to use new pluggable mechanism for position comparison 6. Updated orderloader to support options 7. Removed OptionSymbolSplitterMessageModifier & its unit test as it doesn't make sense for options any more. 8. Updated ORS to save the fields for options for position computation. Added implementations for the new client services. 9. Updated FIXConverter and RequestHandler to add a particular FIX field to the message only if it is supported for the specific message. 10. Added OptionRootUnderlyingMap abstraction to the ORS for carrying out option symbol to option root symbol mapping. 11. Fixed an issue in the suggestions view that was preventing the photon strategy perspective from opening up."
update web-core:com.silverpeas.sharing package - Update NodeAccessControl in order to make CDI works - Update JPA model for subclass Entity inheritance purpose
"refactoring, add new config option - the size of the software output buffer"
Coloc 2: Require the offset and the size of a masks bounding box
Pool: Make pool size less static
* Added more to the end2end spike * Created some concrete Phase classes * refactored/renamed phases * removed BasePhase to encourage loose coupling * removed dependency on spring from events module
CAY-795 Horizontal inheritance
Added solve methods using double[][] to linear algebra decomposition solvers.
"Refactored event listening, fixed group invalidation, fixed inheritance of rights from main wiki, added unit test."
TEZ-3813. Reduce Object size of MemoryFetchedInput for large jobs (Muhammad Samir Khan via jeagles)
"Multiple code improvements - common-java:DuplicatedBlocks, squid:S00112, squid:S134, squid:MethodCyclomaticComplexity, squid:HiddenFieldCheck, squid:S1172"
Added new CManager class and started basework for manage AI. Modified Player and Person class inheritance.
CHANGED: Changed the JUpload to use the TempFileService instead of creating a task in the resource class. CHANGED: Changed DcStorage's addFile() method for URL source to use temp File service. CHANGED: Deleted old temp file task classes. CHANGED: The rate calculation algorithm in StopWatch now provides valid values when time elapsed is > 0 millis. Previously it did only when > 0 sec. NEW: Created a SavePartStream task class that extends SaveInputStreamTask. Refactored code in latter to allow for code reuse. CHANGED: Increased the width of the file size column on data files page.
Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.
more abstraction in scheduler
Issue 280: added support to parse the ovf envelope for a vapp template so that we can get to os and size data
HSEARCH-2581 Add an abstraction layer over ES requests
"continued cleanup, made tables joined inheritance and matched nullable/sizes"
Renamed SingleTaskRenderingExecutor to DefaultRenderingExecutor and simplified the code. GEOT-3784: reduced coupling between JMapPane and MapLayerTable. GEOT-3746: work towards map pane with multiple backing images GEOT-3780: start of new JLayeredMapPane (not usable yet) Simplified RenderingTask class and RenderingExecutor interface. Removed renderer setter from JMapFrame (assumes StreamingRenderer instead) Removed unnecessary event constants and related methods in listeners. More unit tests.
Increased the size of the rule dump column.
Use Is Filters for Collections of Size One
Add support for dynamic table size changes to HPACK Encoder.
Some minor abstraction in SPARQLParserBase to make it easier to extend sub-query parsing
"Changed to a dynamic buffer when processing .jar files based on the size of the .jar file Added the getByteArrayOutputStream() as helper method Extended the processZipFile(File, ZipInputStream) to take nested .jar files into account"
Add possibility to set view size + example
More work on abstraction.
"=- Add TPC-H Data as test dependency (automatically downloads from S4 on first execution) - Update avg function to divide using double instead of integers - Update classpath file system to return correct size information (to allow cp use of Parquet files) - Enhance BaseTestQuery to support all query types (sql, physical logical) and execution from file - Add TPC-H queries updated to use TPC-H test Data (disabled) - Update field name matching to be case insensitive. - Treat CHAR literals like VARCHAR in Optiq - Add clear as part of VectorUtil - Add hash aggregation physical plan executions using tpch data."
@djazayeri Rename MPI interface and change inheritance.
"BookKeeper Client: Ensemble placement policy changes - Include ackQuorum as an argument to the newEnsemble method - Add ackquorum size to RRTopologyAwareCoverageEnsemble - Include ensemblesize, write quorum, ack quorum and existingEnsemble as a separate explicit argument to replaceBookie; so replacement decisions can be made in accordance with any constraints on the ensemble"
SCRUM-285: code review: inherit -> enabled. Using InheritanceContentWrapper temporarily to be replaced with inheritance wrapper.
HBASE-11527 Cluster free memory limit check should consider L2 block cache size also when L2 cache is onheap. (Anoop)
DATADOC-128 - Enable storing inheritance trees.
Analyse: System documentation extended with UmlLink and Type Parameter declaration detection. UmlLink detection extended with links to library classes. C# code analysis improved (multiple inheritance. Test case extended.
Added ErodingPool decorators designed to shrink the size of a pool without the use of an evictor.
"add support for Lucene indexes configuration: directory (mmap, fs), analyzers, stopwords, size of buffers"
Refactor some of the inheritance providers.
"Bug 388281 - [compiler][null] inheritance of null annotations as an option - comment 28: consider inherited annotation inside method body, too"
Measure coverage for equals/hashCode methods with inheritance generated by Lombok
Added an additional abstraction layer for example queries and implemented a generator for simple regex queries.
"Error messages are slightly colorized, continued implementing JPA setup abstraction"
JBRULES-1450 De-couple drools-core from the java dialect's PackageCompilationData -Initial de-coupling attempt -also updated to mvel 2.0 alpha 2
=- Extracted A SortedIndex interface from the Index interface to non sorted indexes having to deal with that leaky abstraction. - Added A free() method to the Paged for symetry with the alloc() method. - Added A A couple of pre canned Marshaller impls
Fix size parameter passed to freeSpace
reactoring classes coupling and dependencies in NPM
=- accounting for changed inheritance - Renamed method to more sensible wording
Refactored into polling and direct route selection.  Required new abstraction and inheritance.  Simplified/moved data types and utils.  
Stage / InstrumentType decoupling.
Finalize decoupling of producer parts from concrete JAX-RS implementation
Added verify upload and upload buffer size configuration parameters.
"fixes #591 we are now a bit smarter about the size of tables that we create by default, which was the root of the time and memory consumption problems here."
Added Agent abstraction to coordinator
Reduce size of feature list in request URL
ItEr34S12CUCreacionUnidadesPlanificacionItEr33S14: Extracting methods in order to keep the same abstraction level
TIKA-639: Maximum pool size for ForkParser
Fixed the new events to use the abstraction layer
Updated to fix issues with inheritance and tree branching in querying
"Optimize SkipList flush by Sync thread to check if mem-table entry after sync-logMarker, which indicates the target checkpoint position. SkipList is augmented to capture last rolled-logMarker before inserting any entry, to indicate all entries are added after rolled log Marker (aka checkpoint). The sync thread simply move sync-logMarker on timeout or shutdown for checkpoint position, which allows SkipList size limit and sync-interval settings factored in the tuning."
Verified crawling size during download progress to ensure real size is used Added testcases
"fixed decoding of captured data: - packets with a timestamp of 0xffffff start with 4 bytes unknown data that are not included in the header size - don't decode ""notify"" packets with a stream id as they contain stream metadata"
[SPARK-9453] [SQL] support records larger than page size in UnsafeShuffleExternalSorter
[SSHD-82] reame listFiles() to listSshFiles() to allow implementation using FtpServer file abstraction
Fix Quality flaws about complexity
SONARJS-729 Do not include complexity of nested functions into nesting one complexity (#309)
"[ARQ-193] Create auxillary OSGi test bundle Add TestClass abstraction. ClassEvent uses TestClass internally Add Context parameter to DeploymentPackager Add Context parameter to ApplicationArchiveGenerator, ApplicationArchiveProcessor"
SCRUM-500 refactored AbstractRegistry to be used with composition rather than inheritance
Replaced EigenDecomposition by EigenDecompositionImpl (preliminary cleaning for solving MATH-662).
RESOLVED - issue SEAMSOCIAL-27: Enhance loose coupling by having more CDI bean associated to the service and less standard objects  https://issues.jboss.org/browse/SEAMSOCIAL-27
Translation of imports and log checkers done. Basic log fw abstractions implemented
"Fixed dimensions not being properly reduced, ImagePlusContianers were always 5d which breaks e.g. Gaussian Convolution that cannot handle dimensions with size 1."
"FINALLY! decoupled the gwt, amf, rest, and xfire modules from the spring-app module. rearchitected, loosened the module dependency tree streamlined the configuration for spring 2.5 support removed unneeded complexity in spring-app. split out each module into its own servlet."
"- Added UNICAST_RetransmitTest to test https://issues.jboss.org/browse/JGRP-1868 - SeqnoList now extends FixedSizeBitSet and uses a bitmap for retransmission (https://issues.jboss.org/browse/JGRP-1868) - NAKACK2, UNICAST3: added max_xmit_req_size - Table.forEach(from,to): returns immediately if from > to - Table.getMissing(): returns immediately if size == 0 - Added NAKACK_RetransmitTest"
ISPN-4470 Implement RemoteCache.size() w/ new Hot Rod size command
CMTC-10 : [Groovy support] Add tests for metamodel inheritance
"- Added an abstration of condition expression lanugage (cel) - Added an abstraction of function expression language (fel) - Removed the tight coupling between the bean framework and valang.  - Changed the ""valang"" annotation and element to ""expression"" - Removed the bean expression resolver support (was replaced by fel)"
"* restructured code and package structure for higher cohesion * implemented proxy logic with cglib * fixed bug with introspector, generics and interfaces in java 1.6 * extended and added tests for ReflectUtil and ObjectFactory * added AbstractBeanTest to pull out similarities"
Slight abstraction
Improved mmap management by computing the right size of blocks avoiding overlapping
Making sure that missing size attribute in @BoundList is not causing any problems for ArrayCodecs
push rarely-used repositoryService injection down inheritance tree
DATACMNS-387 - Introduce Slice abstraction.
Thirs commit for Roller 3.1 Theme Encapsulation work ...
Merged QRDecomposition and QRDecompositionImpl (see MATH-662).
added algorithm to marshalling generator to guestimate a more appropriate allocation size for the StringBuilder used to construct the marshalled object.
Decoupling the MethodTargetResolver from the ApplicationContext
Added experimental support for inner joins and flattened attributes. Improved support for inheritance (mostly untested). Separated out common EOAdaptor code for implementing non SQL EOAdaptors.
"ClockService, Starting on decoupling (agreement from lease, finance)"
"New button - 'reset'. Removed Guava, because it increased size of binaru from 70Kb to 2Mb. Other refactorings"
DAO abstractions and updated 'npc' sql file
iumplemented eigendecomposition for non-symmetric matrices
CAMEL-4428 Introduce NamedNode as Abstraction of OptionalIdentifiedDefinition. This avoids some references from api to model
Added QCOW2 virtual size checking for S3.
revamped inheritance lookup
"Added a layer of abstraction, to make it easier to insert a new ScriptEngine"
experiment to support inheritance during parsing of inlined entities
fixing inheritance issues (Issue #256).  thx rrotmark
"Refactored command line argument and configuration file handling * Improved and refactored Configuration class * Added extensive unit test for Configuration class * Tried to reduce tight coupling with Main and Configuration class * addresses issues SERVER-43, SERVER-44"
[cleanup] Reduce fanout complexity (but still not enough)
"[XQUF] fast replace, fixed missing attribute size update for parent. still deactivated though"
"ROO-3353: Make GAE and GWT version properties ROO-3352: setAccetableValues(Collection collection) method is still added to EditViews when field is marked read-only in proxies. ROO-3211: Modify the inheritance chain of activities and views in order to increase flexibility. ROO-3208: setEntityPickerValues method not being added to View interface in EditActivityWrapper ROO-3204: Use existing renderers in mobile list views rather than defining new ones ROO-3179: Better organize the scaffolded views in a GWT application ROO-3178: If a user adds a field to an unmanaged edit view, do not add it to the managed edit view"
Keep track of top-most rank; remove unused abstractions
 You can now resize the browser size and the screenshots in the reports using the thucydides.browser.width parameter.
Reduce the size of calculation job result messages.
bugfix; 3136650; problem with inheritance mappings;
Implemented sort() Fixed missing so that it works correctly with the formal argument has a default value Implemented cat() Implemented stdout() Corrected bug in unique() Removed special handling for classpath: files and created simple abstraction over file system so that library and other files can be read from jar files.  library paths are now constructed from the classpath.
[1065461] readOnly configuration is editable via CLI - Fix a regression in List of Maps handling by relaxing size assumptions - on the old and new list entries. - Add equals checking for read-only Maps and Lists
OGM-256 Provide support for InheritanceType.TABLE_PER_CLASS
"Atlas-standalone: Fixing bugs with edge conditions in index builder (i.e. zero size lists, empty properties etc.)  Tests should pass now."
Op products and compositions
"UOM management for symbol's size in value classif for points Everything is updated, that's beautiful."
o Strengthened IT to check deeper inheritance hierarchy
Refactored to prefer composition over inheritance
Made XReferenceType an interface.  Changed XObjectType to extend AbstractVertex.  Added InheritanceGraphEdge class. These changes allow us to create a graph of inheritance relationships.
HIVE-14299: Log serialized plan size (Prasanth Jayachandran reviewed by Ashutosh Chauhan)
LOG4J2-1412 Unbox test increasing the cache size should run later
[BEAM-1292] Reprojection dialog shifts image if pixel size is changed
Removed responsibility of getExportExtension to abstraction service layer
Added QCOW2 virtual size checking for S3.
Resolved bug 285539: Use SWT to determine image size https://bugs.eclipse.org/bugs/show_bug.cgi?id=285539
Factor layout out of LayoutData and expose a preferred size subclass
HBASE-7255 KV size metric went missing from StoreScanner.
remove inheritance in tables since inheritance strategy joined creates extra tables
fix(engine): Changed size to totalJobs in MockBuilder for Batch
"Extracted and renamed some interfaces, as the first step towards reducing coupling between the parsing and specification modules. This will eventually allow multiple specification methods."
Removing player index to reduce complexity since I doubt its required. Decouble and nullify faction descriptions.
"[WFLY-405] make core-service=patching:show-history return all the history (instead of the current patching state), modified the history format to patch-id, type, applied-at, make CliUtilsForPatching.rollbackAll() actually rollback all the ever applied patches, introduced PatchingHistory abstraction with the possibility to iterate over the patching history, added ageout-history handler which deletes history past the last active cp"
move old composition stuff away
DRY'd up the Tomcat remote container.  Refactored to composition over inheritence for the Tomcat Manager command URLs.
"Fix for 256-bytes payloads, better errors for payloads that exceed the maximum size allowed, ability to estimate the size of a payload before adding a property, option to reject properties if the size estimate exceeds the maximum size allowed, new class for running specific tests related to reported issues, and more."
– changed render routine for text fields – added tabbing abilities to CustomScreen – various modifications on CustomScreen to match the new TextField requirements – changed size of PacketSky
Abstraction of `CeylonBuilder.getSourceFolder()` and `CeylonBuilder.getResourceFolder()`
Core API: Compositions support topic refs (#786).
Introduce environment variable controlling page size of nitro requests
Adds options for num writers and commit size on db-bootstrap page; improves bootstrap file format and performance by using type names instead of IDs
"Refs #3052, #2939: Adds default ENTER and ESC key mappings to Preferences and Bookmarks dialogs. Also increases the size of the ""Filter Displayed Data"" dialog, so the title end is not cropped."
"Integrate Statistics modules in the trunk with large refactoring. Clean API and split StatisticsAPI module with a new DesktopStatistics, where the TopComponent and desktop UI, controller and model is located. Build a MVC architecture to support workspace encapsulation and adapt Panels code to support asynchronous model-based refresh. Reimplement Panels with better layout. Adapt StatisticsStandard with new API, delete front-ends and migrate to use current Graph API access. Increase consistency of Statistics settings panel."
The expressions defining properties are evaluated for each benchmark size independently * benchmark hierarchy: ScalingBenchmark does not inherit from FixedSizeBenchmark * added variables benchmark.activeSize and benchmark.maxSize
1.  Added functionality to add a filter at a specific index. 2.  The size of the filterCollection can now be queried
Allow expression decomposition in a few places where we previously weren't allowing.
decomposition of composite attributes in fields
reporting module: added automatic deleting of reports after a configurable number of hours. added UI to build CompositionCohortDefinition.  added UI shortcuts for creation of common parameters added UI to re-run a historic report with a new format
extracting LexicalEnvironment abstraction
Refining HttpServiceProxy abstraction.
"Use composition, not inheritance"
1. Enable file size update 2. JSON parser in progress
"added abstraction level to navigation renamed ""scheduler()"" method of EntityAI to ""tick()"""
Bug 432265 - Support manifest inheritance and global properties for Cloud Foundry Deployment
Add support for headers indicating the size of the image.
Refactored ManagementContext to  improve encapsulation - so all registrations of MBeans happen in one place
"Multiple code improvements - squid:MethodCyclomaticComplexity, squid:S00119, squid:S134, squid:RedundantThrowsDeclarationCheck, squid:SwitchLastCaseIsDefaultCheck, squid:UselessParenthesesCheck"
Get use of protocol message instead of direct js function call - bug 356729: [TextSizeDetermination] Switch text size determination to the protocol https://bugs.eclipse.org/bugs/show_bug.cgi?id=356729
"revert prefetch and maxPageSize to defaults to transaction tests, issue was negative inflight count due to duplicate acks, prefetch and max page size was a just a workaround that is not now needed AMQ-2149|https://issues.apache.org/activemq/browse/AMQ-2149"
Moved worker thread spawner into new method (NPath Complexity is 80 (max allowed is 50)).
SONARPHP-664 Correct Cyclomatic Complexity implementation (#172)
ASNN-719 Moving method that's only used in a single producer to that producer so we can finish decoupling AssignmentSubmissionBean from non-grading pages
Rename new grammar class and new complexity visitor
Factored out useless cell value abstraction
#JC-552 BB-code aware size validation
Fixed label pref size when using font scale.
MNG-5871 refactoring: put url extrapolation algorithm in inheritance model merger
"issue JBIDE-4416: Modify templates for ui:composition and ui:define  https://jira.jboss.org/jira/browse/JBIDE-4416 - part #2 has been fixed: now if the web-root folder is not found, it is assumed that the root folder is the parent folder of the opened file."
"Given the huge size of the SLF4J user base, we need a more lenient version  check mechanism. For example, we can't expect external implementations such as Mina, jetty, jboss to follow SLF4J's release schedule. We just can't."
Standarize solution and entity classes annotation inheritance behaviour + Check interfaces too. + add unit tests
413155 refactor HttpTransportOverSPDY to fix some bugs and reduce cyclomatic complexity
"Creating GranuleCollectorFactory Creating a GranuleCollectorFactory to abstract out creating granule collectors, moving actual mosaic creation logic into granule collector, eventually going to rename these classes to reflect their new responsibilities. Had to make some inner classes static to accomplish this. Moving GranuleCollector to its own package + all the necessary modifier changes for that Adding granule collector factory to raster layer response Indexer is now initialized when ImageMosaic is initialized. this was done so that we have access to its configuration while reading the image mosaic. A decent number of things shuffling around, in particular moving some subclasses out of RasterLayerResponse to top level classes for clarity (since these classes are now used outside of this class) Added the correct test results image Don't use default Operations object, instead create one with hints we may need. Removed some unused code that was missed Removed some unused imports Fixed a test case with a fixed number and the size check in RasterLayerResponse to account for nulls in the list Fixed an issue where indexer file wasn't getting initilized correctly"
SB-713:  LayoutProviders draft implementation using Path abstraction
start of changes to monitor file size and modified date to detect other processes changing wallets
The size of the outer most column can now be set as well
replaced jersey w/Uris & UriTemplates; removed complexity in url encoding and edge cases like matrix params
ACT-696: Added inheritance for TaskPage
EST-257: refactoring inheritance hierarchy
Refactoring  * move ASHelper methods to appropriate classes (to ensures abstraction)  * rename WS_ENDPOINTS_KEY -> JAXWS_ENDPOINTS_KEY  * getJaxwsPojos & getJaxwsEjbs should never return null collection
"Tweaks to tests, BasePerson class, common inheritance to test classes, tweaks to complex/simple type detection."
"modified ParticleEmitterUtils to scale the particle emitter spawnHeight and spawnWidth values too, and to modify base sprite size too, added a particleEmitter declaration specifying the particle scale to convert it to world coordinates"
"EXOJCR-350 : Enable plugability of management layer : first pass of decoupling, need more work"
"JBIDE-9763 https://issues.jboss.org/browse/JBIDE-9763 When building inheritance for parameted types, resolved parameters are reused from base types."
CAMEL-2558: Producer and ConsumerTemplate can now have its max cache size configured. Also CamelContext now returns already started templates in its create template methods.
Better encapsulation inspired by AbstractCRPDBTest.configureEntities (configuration of entities mixed with db configuration)
Reduced complexity in getIgnoredFields()
"[core,kraken,coinmate] removed additional data map from Trade, replaced it with KrakenUserTrade, added inheritance to Trade.Builders, renamed Coinmate integration test classes"
reducing complexity by introducing intermediary abstraction (removing reference to RestClient from commands)
=- new prefs to display debug info - optimized size of parse tree graph - improved rule ignore in interpreter
Added person connection abstraction.
Removed coupling between XT Ajax and Prototype: + Prototype-specific actions have now their proper package. + Two different directories for JS libs: core and opt.
changed inheritance and moved stuff to ERXComponent
Analyse: Indirect inheritance associations are reported now; also indirect-indirect inheritance associations are reported (recursivly).
More work on abstraction.
Removed abstractions - we're only supporting Bukkit API
"* refactored to fold DebugST into ST; adds one object ptr to every ST instance but worth reduction in complexity. ""new ST(...)"" calls didn't work (not DebugST objects) in inspector.  ST.inspect() for any ST now. * Fixed bug in STViz. Didn't highlight entire output when you click topmost template. * STGroup.debug no longer there nor static.  It's an instance var of Interpreter.  ST.inspect() tells interp to debug. STGroup.trackCreationEvents says to record where in code an ST was created and where code added attributes. * Gutted tree model for STViz, refactored debugging/event tracking code. * creation events had wrong location (launch of interp location); only tracks now for externally/injected created templates."
"Made an InterfaceGenerator, renamed CSharpClassData to CSharpData for some abstraction reasons. Made ClassGenerator and NamespaceGenerator work together well, now it sees the nested namespaces, but cannot see which it is nested to. Will do that later. Fixed small typo in ModelCreatonService"
Truncate mmap based log to actual size when closed Fixed bugs in log reader code that prevented reading of logs with trailing zeros (like in the mmap code)
Work done: * Minor changes in Infrastructure and ElasticInfrastructureUtils to accurately determine the current size (i.e.: number of physical instances) of an operator identifier in the logical query. * Minor fix for scale-in support in adaptor class for SEEP.
More sophisticated partial indexing which allows decisions based on other fields. Added ValueIf and PojoIf base classes. Fixed a bug in If class inheritance. Added unit test for PojoIf.
Refactor the KeyOutWriter and DailyKeyOutWriter to create a slf4j logger. Remove duplicate code from DailyKeyOutWriter. Add the ability to create a Logback based out writer with size and time based rolling and with no filename on rollover. Update slf4j to the version used by Logback.
Starts decoupling from old span type; untangles ServerRequestInterceptor (#299)
simplify impl inheritance
HIVE-10028: LLAP: Create a fixed size execution queue for daemons (Prasanth Jayachandran)
First step towards store size limit
"ACCUMULO-580 moved batch size setter and getter to ScannerOptions, made scanner wrappers (ClientSizeIteratorScanner and IsolatedScanner) take range, batch size, and timeout parameters from the scanners that they wrap"
bugfix; 3385226; 1953410; inheritance with more than two levels deep causes same mappings done multiple times;
Allow specifying memory size to the BitmapManager
changed dialog size to fit release notes
Config decoupling continued.  Created a convenient abstract ConfigSingletonFactory class that can be used to create singletons based on config .properties.
Implement framework code to support for Resource-per-class-hierarchy approach to hiding inheritance - RESTWS-243
Removed unnecessary abstraction
"The lions share of work on issue #636. Checkstyle errors have gone from a count of 383 at release of 0.0.2 to 488 errors after almost all of 0.0.3 is finished, to a count of 300 errors now that a good bit of work has been done on that front. Along with that, some complexity reduction work was done. Play and Fling actions got refactored as well as the mouseWheel zooming code both in EntireGraphingPanel.java. Bugs found and fixed were a play delay int roll-over catch that didn't work in the slowDown() method of EntireGraphingPanel.java and the method getTransferDataFlavors() in GenericDataElement.java was returning a reference to the interal array instead of a copy."
Add an option to limit the max size of a function after inlining. The default is still unlimited. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=80357438
"Atlas-standalone: Fixing bugs with edge conditions in index builder (i.e. zero size lists, empty properties etc.)  Tests should pass now."
WAL max size limit was restored. Free space detection bug was fixed. Additional improvements.
Eating a creature provides a stat bonus. Body size calculated based on part sizes. Entities now have width/height for intersection calculations. Screen helper for a random point within a restricted region of the screen.
Portals and inheritance
allow eigen decomposition of a matrix already in symmetric tridiagonal form
Consolidate database connecting actions reducing code complexity and duplicate code fragments
"Enhanced ERXFetchSpecificationBatchIterator to optionally re-filter batches against the original qualifier after fetching. Also wired things up so that interleaving calls to nextBatch() with calls to next() or nextElement() works as expected, as does changing the batch size mid-stream. (Committing to trunk, and copying trunk version to Wonder_2_0_0_Branch branch.)"
"Various fixes and changes: removed operations abstraction and merged with Request abstraction. Refactored Request (now ClientRequest) out of the server behaviour and added a LocalServerRequest subclass that is aware of the local server instance. The base request only operates on the CF Java client. Updated junits with further harness changes, fixing several failing test cases. Additional bug fixes, including bugs in URL domain and org and spaces lookups."
"prepared interface for general eigendecomposition we currently support only symmetric matrices and real eigenvalues Jira issue MATH-235 asks for asymmetric matrices support, which needs an API adaptation. Preparing the interface yet avoids introducing incompatibility later. The current status is explained in javadoc and matrix symmetry is checked at runtime with an InvalidMatrixException triggered if asymmetry is detected."
Screen Size and Position [#321 responsible:none state:fixed]
Adding pagination to decrease the heap overhead size and to call Nitro with 30 PIDs at once.
"Revert ""Revert ""[MIFOS-4052] removed original loan schedule and fees inheritance"""""
"* Added @size attributes to fs:deepfs, fs:dir and fs:file elements * human readable size value for fs:fsSize element"
webadmin: Display size of ISO and floppy files in human readable format
can now set font size for UI (in code)
Add polymorphism with discriminator test
Extracted protocol and server bits into abstraction.
added params inheritance test for spring
"clean up, some refactorings dealing with buffer size of buffer"
"Replace jersey which is a pretty big library if you aren't already using it, with apache httpclient. With all the dependencies this is about half the size and less intrusive for people using other webservice libraries like CXF."
BVAL-31 first support for basic composition
Repackaging to remove remaining cycles and increase cohesion
fix subscription/feeding extract common database encapsulation types
* fixed formatting issues * broke down complexity of getGenericTypeAwarePropertydescriptor method * refactored names of tests to be more expressive
"Bug fix : when an error happen before the total size is computed, the progress bar should be in determinate state."
chor(engine): change ManualActivation rule to reduce cyclomatic complexity
More cleanup and following through on better encapsulation of Flags.dimension and Flags.seedlength.
"Added tests for the size of Solution. Introduced a constructor of Solution, taking a List. Introduced NoSolutionException to distinguish from SolutionException."
initial attempt for abstraction; druid cluster works with Derby as a default
Variable width size dock with Roster: Fixes issue 235
Refactored: inlined serialization filter classes to reduce complexity
#136 Reduce cyclomatic complexity
Fixed file and directory size calculation in MapView.
Fixed message ID in topics Added method inheritance test Refactored out NevadoQueueConnection and NevadoTopicConnection
o Added another test to exhibit inheritance issue o Removed task tags for resolved issues
Bug 82854.  Reduced the size of the event classes. Fixed some of the copyright information. Removed some unnecessary classes.
"core: VisitQueue.addAll, javadoc, size -> orderCount"
- improved decision DFA: vectorial representation where states can be moved using the mouse - improved decision DFA: exportable to EPS and bitmap image - improved export to EPS: file size has been reduced by up to 1/2 of the previous generated size - move caret to decision location when displaying DFA decision
"CRUD, reorder, and inheritance of notes on workflow step."
"Added some better commentary, made sure unit tests pass. Added overrides to common methods for the abstraction in SparseMatrix."
create ThresholdGroup abstraction to make configuration more clear -- reviewed by mhuot
FFT convolution almost done Problem with rearranging of size is odd (e.g. 315)
"cleanup abstractions by pulling out State interface, implement StatefulBolt for regular topologies"
sendemail.maximumDiffSize: Limit the size of diffs sent by email
Issue 130: fleshed out compute abstraction and hardened TemplateBuilder design
Added class higerarchy scanning for inheritance handling Moved Parcelable collections into singleton repository
Changed font size management to preferences
Pool: Make pool size less static
Expose our own History abstraction to avoid needing so many hacks
"Restructuting to get file layout closer to maven standard, remove complexity of poms"
Correct PiffSampleEncryptionBox behaviour when asked for it's size before being written (after manual creation)
CAY-795 Horizontal inheritance
Decreased complexity
added additional device and component abstractions / added device and component event listeners
"unify committer and batch bolt abstractions with the ICommitter interface, this greatly simplifies the transactional topology abstraction and makes things more reusable"
SONARCS-601 complexity metrics for functions and classes (#99)
Create alternative inheritance structures for axioms that do and do not need to cache entities and named individuals
"Issue 183: Adds support for detecting multiple barcodes, and simplifies ResultPoint abstraction"
"Password complexity, force register and ip verification options, xauth.exclude permissions node to exclude a group/player from having to register, option to block players with blank names from joining the server, players are no longer kicked if someone with the same name joins the server, unregistering a player now notifies them and hides their inventory, registration.pw-min-length -> password.min-length, security.filter.* -> filter.*"
EJP - Added size menu
"Use object model renderable abstraction to generate layout builders instead of templates w/ spaghetti code. Removed code generation hooks from Directive, should not be possible for directives to insert arbitrary code, as convenient as it may seem. Still not as clean as it could be."
"- Reduced number of generic Exceptions - Merged duplicated code into loops - Reduced code complexity, increased scalability - Moved Status to public type (separate file) - Linked page footer to github project - Replaces number of counters with Map that keeps all values in single instance and allow to extend for new one - Updated tests so they don't mix skipped and pending results - Updated colors so Skipped/Pending/Undefined/Missing use the same yellow background color - each chart presents all kind of results (not only pass/fail) - fixed colors so they are the same on each page and chart - updated some tests to make them deterministic and simpler"
"smartsprites: SMARTSPRITES-44: resource writing abstraction added, filesystem-dependent validation removed from SpriteBuilder, further refactorings to the ResourceHandler interface (IOExceptions thrown for the caller to handle)"
Refonte complete de l objet page + coupling servlet-service-page
[GSCOLLECT-1120] Change SortedBag inheritance so SortedBag and UnsortedBag are siblings.
HBASE-16229 Cleaning up size and heapSize calculation.
Refactor cells log4j support for better encapsulation
Refactor event and spi related classes into their own package to match the API and reduce complexity.
[KARAF-3646] Remote service method loockup inheritance support
Allow max layer cache size to be specified in number of megabytes of disk storage instead of number of cache entries
MEDIUM: Fixed issues when two templates: * are located in different directories * have the exact same name * have the exact same last modified date We now also compare the size of the templates
"[ADD] GUI, Preferences: Adjust max. size of text results. Closes #1362"
Abstraction decoding + operations
[RESTEASY-1706] Add support for jax-rs annotation inheritance with generics.
"replace test inheritance by @Rule, adapt CompatibilitySuite to work accordingly"
moved the various solve function out of decomposition algorithms and into a dedicated DecompositionSolver class
Fix a bug that increasing temp block size by RequestSpace doesn't trigger availableBytes change
Separated HighAvailabilityMembers into HighAvailabilitySlaves / Members and introduced abstractions along the way to be able to write mocked tests.
Fix bug in DisambiguateProperties involving generic interfaces and interface inheritance.
CLAHE: semi-fix inheritance problem from beanshell scripts call fast clahe by
fix - check channel size logic
Added some logic to support size on index hits
Add method to estimate in-memory size of QuantileDigest
changed skill class inheritance
HZN-937: Introduce TopologyService abstraction to better control access to the underlying (Meta)TopologyProviders (#1182)
Add WriteRequest abstraction
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
"[DS-739] Batch processing mode extended to itemimport, filter media. Configurable option for batch size added"
CAY-2050 parameter binding with better encapsulation
SONARPLUGINS-31 Scan PHP projects added complexity per method and complexity per class metrics
pulled up classes so there's less abstraction
SONARJS-312 Re-enable ExpressionComplexityCheck (S1067)
"CDX Server: Add header for sending cdx cluster uri for pagination query, allow setting arbitrary page size with privs"
"DDF-469: javadoc on ResourceCacheInterface, 0 max size translates to max size not being enforced, improved performance of tests."
#34 : start Refactoring RiverService with abstraction level
Encapsulation of SharedPreferences(.Editor)
Queue size limit tests
Commit before reducing complexity of matching
Add and change default cache to fixed size hash table.
TEZ-678. Support for union operations via VertexGroup abstraction (bikas)
Finished group permission inheritance changes and a lot of refactoring.
HADOOP-11350. The size of header buffer of HttpServer is too small when HTTPS is enabled. Contributed by Benoy Antony.
Added HTTP buffer size and TCP socket time out configuration parameters. Removed signature cache TTL and HTTP transport configuration parameters.
"[JBQA-5271] Async test enhancment - canceling, exception, descriptor, inheritance, remote call"
Set the size of the root tree in the tree browser frame so that it is at least as high as the right hand pane.  A default minimum height is hard code.
Added directed graph tests. Added graph interface. Added abstraction to the tests
"trunk: bugfixes in DefaultSVNDiffGenerator; removed the class SVNMergeRangeInheritance, got rid of that class dependancies"
[AS7-4330] Make JMS RA pool size configurable
CAMEL-11421: Up in the sky coding. Tokenize language can now set the group size using dynamic values based on simple language like some of the other options can do.
Refactoring to place size logic into PDataType.isSizeCompatible.
Ticket#33: Removed values used to encode an enum from the definition - reducing coupling and improving forward compatibility.
JBRULES-1450 De-couple drools-core from the java dialect's PackageCompilationData -Initial de-coupling attempt -also updated to mvel 2.0 alpha 2
"Locks: DRY, NativeAtomicAccess abstractions instead of address/Bytes, offset duplication"
"Reorganize some packages:   * Move OME/OMERO database connectivity layer out of Bio-Formats package,     into separate OME I/O library in loci.ome.io package.   * Move OME-related plugins out of LOCI plugins and into new OME plugins     in loci.plugins.ome subpackage. Still needs some cleanup, but should work.   * Move OME database plugins out of LOCI Tools bundle and into a separate     OME Tools bundle (which requires the LOCI Tools bundle to function).     This change reduces the file size of loci_tools.jar by over 50%.   * Rename some classes in loci.plugins to make more sense.   * Begin work on making some logic in LOCI Plugins more modular.     Not yet complete, and virtual stacks are broken at the moment.   * Update the build scripts to reflect all these changes.   * Miscellaneous package cleanup."
Fixed issue 156.  Added support for serializing an object field (or array elements) as per its actual type. Refactored inheritance related tests into its own test class. Added regression tests for issue 156.
"API improvements * pushing new context to stack #2 * Access to values in context stack #3 * Safe partials in the current execution. Template Inheritance * Support template inheritance * fn, inverse, params and hash are public and final fields of Options * Rename 'scope' reference to 'context' * Bug fix for null outputs"
"had a silly catch(Exception e) {log(e)}. Also, improving readability and reducing cyclomatic complexity."
Fix: prevent infinite loop in exmlc for cyclic inheritance
"Release 0.8: 	- Added JPlasma 1.0. 	- New, multithreaded versions of dense Cholesky and QR decompositions (JPlasma is used). 	- Added CSparseJ 1.0. 	- Added sparse Cholesky, LU and QR decompositions (CSparseJ is used). 	- Added SparseDoubleAlgebra and SparseFloatAlgebra. 	- Added 2D and 3D dense floating point matrices with elements stored in multidimensional arrays (to avoid 2^31 size limitation). 	- Removed JCublas. 	- Removed corejava (replaced by String.format()). 	- Fixed few bugs in MRNSD and CGLS.  	- Some refactoring and many cosmetic changes."
"renamed Validate to QA, and started a SystemX abstraction which will help unit testing where the use of system wide Globals are tempting (or even encourage by Java, think System.out or System.currentTimeMillis)"
Fixing TED #15920 - Remove empty tags and elements to reduce xml size of the new chart format.
"Use Toolbar rather than default actionbar, keep fixed size regardless of orientation"
"Fix, (partially) test registry inheritance"
Fix style inheritance & format property issues
aaa: AuthzUtils: Unify query size limit handling
Optimized @Callback generation to just generate them in the subclasses that actually need them. This cuts exe file size significantly. (fixes #916)
JPED-cli refactoring. And Gene wise Inheritance variantwise inheritance filter changes
Improved method complexity
SONAR-5531 Fix paging when page size is set to zero
Static inheritance for classes with qualified names. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69949454
Implemented WIKI & TLD links via annotations. Added related WIKI & TLD links to all ace component showcases Increased font size of the showcase menus
Refactor inheritance to composition.
fixed a small bug with setting the transaction mode in Neo4jGraph. Added a new inputGraph method to GraphMLReader to allow for setting of buffer size for Transactions. Updated TransactionGraphTestSuite to ensure that the graph passed in is in the right state. Commented out broken OrientGraphTests for luca.
Make additional static constructors for Round/Ceil/Floor to improve abstraction
Continue decoupling media channel from RTP connection. Code cleanup and writing javadocs
"fixed npe when generating code, fixed empty window initial size (Linux)"
fixed @ExceptionHandler resolution in case of multiple matches at different inheritance levels (SPR-7085)
"[OPT] XQuery: Inline nested closures, better performance for functional abstraction."
SONAR-1845: Create a new Sonar rule to check method complexity
multiworld inheritance and multiworld prefixes
A few openwire refactors/enhancments  - The old/default marshaling style is now refered to tight encoding   - We now support a loose encoding style which should be less CPU intensive (it's only a 1 pass algorithim)  - prefixing the packet size is now optional (needs more testing)  - Updated the c client so that it works once again.
Updated to use larger thread size for tasks (#1636 et al)
Added the ability to delay batching to bundle messages into larger packets. Also determined the size of what to send by automatically determining the MTU from the NetworkInterface.
increased result size for getQueryTerm
MAHOUT-251: Generalized and refactored Dirichlet models and model distributions to  remove 2-d and dense vector assumptions by introducing a new abstract  VectorModelDistribution to provide a modelProtootype and size to the distributions for  creating prior models of arbitrary vector size and flavor.
Renamed MatchBuilder.whenPassed to passed Used interface inheritance to allow tests to skip build phases
SONARPLUGINS-2390 Add computation of metrics (except complexity)
moving more fingerprint stuff up the inheritance chain to AbstractProject/Build.
support for inheritance using APT api
Bug 459279 - Size of string literals with escape characters
ACT-696: Added inheritance for TaskPage
Fixes #353: Reduce bytecode size with super crude constant propagation
"Added node inheritance DAO. Also, addressed most of Nicole's comments CR-PLFM-84."
72136 Correct the algorithm to calculate transitent document size in javaserver side
"Added more docs for GeoMap code, added constructor overload for setting the tilecache size on a per-geomap basis"
"[HTTPCORE-14] Consider decoupling HttpHost and Scheme and moving Scheme, SocketFactory and SecureSocketFactory to HttpConn"
Adding float versions for LU-decomposition
DATACMNS-122 - Introduced further abstractions to improve entity instantiation.
Make the number of concurrent get bulk tasks and their size configurable
ADD Search at all in CSW server (search text empty) REF Button search enabled after check a CSW server REF Page size for summary records search to 10 REF Minor
XCOMMONS-601: Reduce the memory size taken by the core extension index
started work on the filestore. it reports actual total size of the gluster volume!
More reactive step size spinner in platform. Closes #417
Made undo histroy size the same for both undo manager to pass test cases
Refactoring to reduce code size in Bug 117362 [IDE] Remove references to java.io.File in org.eclipse.ui.dialogs
Refactoring to remove complexity.
Polymorphism cleaned up.
JC: Debugged size handling so that dynamic size setting can work without needing a canvas. Labels should automatically resize according to the provided text
"ZipNum: Use NIO by default for local file access, use map() for known block sizes HttpTextLoader: lookup file size using HEAD, specify split params automatically, allow direct use of urls w/o encoding!"
"[#1895] Decouple Executor from Configuration. Use composition rather than inheritance - Removed Executor.DEFAULT_INSTANCES, remainders of early jOOQ days"
WFLY-6604 Expose clustering API abstractions as capabilities
GTNPORTAL-2183 Build a new UIFormUploadInput component and difine limit size unit for UploadService
better abstraction for metadatastorage
Abstract inheritance calculations from Sponge code
[added] preliminary texture/pixmap support. no idea why a canvas that's not attached to the document doesn't take on the size specified. grrr...
[cleanup] Reduce fanout complexity (but still not enough)
"New dungeon region storage method, for a huge performance and file size improvement"
Raw protocol test fix: corrected invalid message size which should be less than header size.
[CXF-5176] Aegis inheritance: inherited xml attributes appear twice Patch applied
SONAR-3289 On java projects compute complexity distribution by file
 Pull from the latest trunk updates.  - Update our hack to check if write quorum size equals 2.  - BOOKKEEPER-325: Delay the replication of a ledger if RW found that its last fragment is in underReplication. (umamahesh via ivank)  - BOOKKEEPER-208: Separate write quorum from ack quorum (ivank)  - BOOKKEEPER-396: Compilation issue in TestClient.java of BenchMark ( showing this in eclipse) (umamahesh via sijie)
"MAHOUT-665 remove unused cache classes, move least-k next to its point of use, remove unused cache size setter"
Fixed generic attribute inheritance with type variables substitution + added license headers
Regex and array size verification enhancements
[OPEN-HUDSON-6227] Allowing view path not to be the same as view tag Refactoring : include most cleartool commands under ClearTool abstraction. Removed most of specific implementations of ClearTool to centralize in CleartoolExec
Move to lwjgl 2.8.4 which removes the 0 size ARB Buffer check
[JACOB-6] Rename Process as RunnableProcess to prepare a better Process abstraction
CAY-795 Horizontal inheritance
improve unit test decoupling
"- Every message sent through ENCRYPT now has an EncryptHeader # (https://issues.jboss.org/browse/JGRP-2021) - Refactored ENCRYPT into SYM/ASYM_ENCRYPT - ENCRYPT.encrypt_entire_message = true is now the default - Messages without EncryptHeader are dropped by ENCRYPT - More tests in ENCRYPTTest - An encrypted checksum (signature) of the hash of the encrypted message is now shipped in the header (only when encrypt_entire_message == true and sign_msgs == true)). This allows for checksum comparison; if a checksum shipped with a message doesn't match the computed checksum, then the message will be dropped - Probe: sort protocol attributes - KeyStoreGenerator: use the algorithm specified - Changed tests to use SYM/ASYM_ENCRYPT - Added new protocol SNIFF - Join and merge requests/responses skip encryption / decryption - Unit test for ASYM_ENCRYPT: when a member C leaves the cluster, make sure C cannot send messages to the existing cluster members - Unit test for rogue injection of merge view - Handling of merges is now correct - Added doc/design/MaliciousAttacks.txt - Added section on SYM/ASYM_ENCRYPT to the manual - Changed encrypt.xml default - Set @BeforeMethod/@AfterMethod(alwaysRun=true) so that init() of EncryptTest is always run - Using delegation rather than inheritance in {A}SYM_ENCRYPT_Test, as inheritance doesnt work correctly in TestNG - Added sample configs for SYM/ASYM_ENCRYPT"
CompetenceCourse Refactor: domain corrections involving the checkParameters  and the abstraction of the CompetenceCourseInformation
polymorphism
"NOJIRA: Reworked the ServiceExecutionResult API. It now exposes plain Spring Errors interface as there is really no need to overabstract it since the Open Registry is tightly coupled to Spring anyway. Plus coupling the API and exposing Javalid ValidationMessage is bulky and combersome, IMO."
Replace typed encapsulation commands for generic setEncapsulation and setEncapsulationlabel ones.
Checkstyle: cyclomatic complexity
CAY-795 Horizontal inheritance (patch by Dzmitry Rusak)
Wrap checked exceptions into runtime exceptions earlier to simplify method signatures and code. Improve code encapsulation.
Push couplingConstants down
Packet size reduction. Making sure that we are not writing more than we need to over the over. Fixes issue 183.
class that populates a predetermined size array with the cumulative count
"CSPACE-173, CSPACE-325, CSPACE-71, CSPACE-72, CSPACE-73, CSPACE-74. Introduced key abstractions for repository client, document handler, factory and document wrapper in the services layer. Boiler plate code for interfacing with a repository via either Java Remote APIs or REST is moved to respective repository client implementations. A CS service only needs to implement a resource and a document handler. Exception management is improved such that GET, UPDATE and DELETE now return proper HTTP status codes if csid is invalid or not found. CollectionObject service is revamped to use new repository client framework. CollectionObjectService client test now asserts returned codes. Still need more rigorous negative tests. "
Merged SingularValueDecomposition and SingularValueDecompositionImpl (see MATH-662).
Modified luDecompose to require that the matrix be square. Added RealMatrix preMultiply(RealMatrix). Modified preMultiply(double[]) to return a double[]. Renamed private pivot[] array to permutation[]. Exposed lu decomposition matrix and associated permutation array as protected properties.
The keep-it-simple-and-stupid solution: Specify a lower page size when looking for tags. Create separate tags for each found OntologyTerm.
[MIN] GUI: font size of search bar; comments updated
Added PCA function: it uses either eigenvectors or singular value decomposition.
Remove coupling with mybatis SqlSession by using internal DbSession.
"Tightened code size and visibility, added some javadocs"
Code review tweaks: Event inheritance-based triggering protected over private Renamed and repackaged event related classes Comments
Refactored the nio implementation to depend only in the interfaces Journal and JournalRecord. Decoupled NioJournalRecord and NioJournalFileRecord from each other. General code cleanup. Achieved small performance gain of ~10-20% by the decoupling and dependency removal.
Fix the Sorting#index to actually work with an IdentitySet via some abstraction by IndexHelper
Reducing complexity + code clean-up
refactored code to avoid extra abstractions and added hover support
"Two features useful for ancient DNA processing. Ancient DNA sequencing data is in many ways different from modern data, and methods to analyze it need to be adapted accordingly. Feature 1: Read adaptor trimming. Ancient DNA libraries typically have very short inserts (in the order of 50 bp), so typical Illumina libraries sequenced in, say, 100bp HiSeq will have a large adaptor component being read after the insert. If this adaptor is not removed, data will not be aligneable. There are third party tools that remove adaptor and potentially merge read pairs, but are cumbersome to use and require precise knowledge of the library construction and adaptor sequence. -- New walker ReadAdaptorTrimmer walks through paired end data, computes pair overlap and trims auto-detected adaptor sequence. -- Unit tests added for trimming operation. -- Utility walker (may be retired later) DetailedReadLengthDistribution computes insert size or read length distribution stratified by read group and mapping status and outputs a GATKReport with data. -- Renamed MaxReadLengthFilter to ReadLengthFilter and added ability to specify minimum read length as a filter (may be useful if, as a consequence of adaptor trimming, we're left with a lot of very short reads which will map poorly and will just clutter output BAMs)."
Use composition instead of inheritance
Move max column size calculation in an abstract class.
SONAR-1930: Create a SQUID rule : depth of inheritance should not exceed XX
Extracting Query abstraction from ...book.search.lucene.
ACT-696: Added inheritance for TaskPage
Decomposition in progress...
"XWIKI-12023: XWikiAttachmentContent#setContent(InputStream is, int len) is not taking into account the passed size XWIKI-11612: Store the attachment mime type in the database instead of recalculating it each time it's required"
Fixed some deeper issues with the abstraction heirarchy.
svn merge -c 1508220 FIXES: MAPREDUCE-5411. Refresh size of loaded job cache on history server. Contributed by Ashwin Shankar
Improved encapsulation of AssetClassType
Issue 130: basic support for compute abstraction
"change so persistence dir is only backed up if node is HA master or HA disabled; handles the case of HA autodetect selecting master hence the complexity. this is done by introducing a ""deferredBackupNeeded"" flag in the ObjectStore which kicks in when triggered by certain ""contended writes"", e.g. just after a standby node is promoted, or auto detects master.  (Previously tried to detect if master/standby then backup immediately but was too racy to try to let persister read if-master from the store while the store is waiting to know if-master!)"
Add support for restricted encryption for WS-SC by allowing key size less than 256 bits
Obtain timestamp and file size _before_ reading the file contents to protect the index from getting stale.
asadmin command abstraction is now using ProcessBuilder
Support the tight coupling between image items and embedded images.
Added recursive inheritance prevention
Backport some sanity wrt view size & scale factor.
Refactored for better inheritance
Lots of small and medium size changes. (Too lazy to document all here..)
"modify monicluster, add zookeeper start and stop operation modify TestCreation case add file lock for write operation modify test case testFileCreationNonRecursive fix: throw exception when close a file with no block allocated modify test case testFileCreationNonRecursive optimize default configuration for zoo.cfg:maxClientCnxns=300 FSNamesystem:delete adjust delete Minicluster two Exception modify TestCreation add old markBlockAsCorrupt(Block blk, DatanodeInfo dn) method(empty function) for test comment of getBlocks(dn,size) is error:called by balancer not by snn fix: BlockEntry.getTotalLength(...) should not be added to total length when block size is -1 fix: FSNamesystem.getListig(...) should return null when src is not existed add setLeasePeriod() for stateManager"
working on reducing symbology parser complexity
=- Decoupling entry points to avoid module dependencies - FormDisplay access without the need of authentication
"22000, 84733, 84953.  Clean up size allocation of controls."
"Upgrade to newest platform, use jclouds abstraction, use essex openstack api"
SONAR-8857 make ws/qualityprofiles/inheritance organization aware
More work on abstraction
inheritance on components
"cleaned up dependencies in client and server, added necessary abstractions to the spi"
Tidy up file abstractions
Bug 103863 - Support encapsulation in SWT layout mechanism
"[core,ripple] Introduced inheritance to Order.Builder classes, fixed up Ripple trade history to remove additional data maps"
docs: describe problem size of every example
ISIS-537 Further simplification of ScalarPanels' markup. Use inheritance and fragments to reduce the number of the HTML files to minimum
1. MapTransactionTest refactored to use AbstractionWorker 2. Added a property to select TransactionType
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
started work on MDC abstraction
Refactored toolabstraction of maven.
Annotation IoC inheritance tests. Still some TODOs.
fixed CS error - only extracted some mothods to reduce the complexity and lenght of mothods
Simplified inheritance to subclasses
"Fixed up top level shortcuts, and reduced the size of standard buttons"
"Factored a new InheritanceGraphVisitor class, OverriddenMethodsVisitor, out of AbstractMethodAnnotationAccumulator.  In general, visiting all overridden methods is a useful thing to be able to do."
"#20 Local folder as target (looser coupling between FTP sessions, job action and file processing strategies)"
"Fixed tests for query result size limit (work for client now, make use of MapStreamer)."
implementing storage abstraction (for future persistence)
fix inheritance for protected/private methods
"The UI has been deeply reworked There is now a new debugging viewing mode that shows what is drawn when in selecting mode (It is assuming rendering has been properly implemented) Star, planet et station textures have been fixed to reflect more properly the true size of the objects. The zoomedOut ship texture has been cleaned and rounded. FocusPoint locking is now cancelled by dragging the world."
"Fix #429, #430: - create SumConstraint to manage opposite of such constraints - override the `makeOpposite()` method of SumConstraint - disable decomposition of boolean sum in IIntConstraintFactory - add a new Settings (`enableDecompositionOfBooleanSum()`)"
[OPENENGSB-876] added a new abstraction interface JPADao and one implementation for it: JPACriteriaDao. Removed not needed serp bundle and replaced it with the serp bundle from servicemix.
Check aliveness of mobile device through buffer size (approximation)
indexes always deleted in tx no longer uses getMaxIdsInUse to determine size of db but just stops after deleting maxNodesToDelete
Refactored package structure to improve coupling.
Feature #7291 - ManagedThreadPool: - adding the possibility to specify the maximum size of the thread pool execution - removing SilverTrace references
Merge with ontologies_abstraction
Removes tight coupling between managed service and heartbeat notification.
parameterization for decoupling
"switch to json instead of tsv, and split size/length field into two fields, contentLength (not including protocol headers) and size (includes headers)"
IO-84 Modify copy() methods that return an int to throw an ArithmeticException if the returned size is too large for an int to handle. Add two new equivalent copyLarge() methods that return a long for large files.
"Refactored strategy classes by moving functionality to a class (AbstractIterationStrategy), which is higher in the inheritance hierarchy"
[misc] Extracted method to fix checkstyle cyclic complexity failure.
Reduce the size (and cost) of the host page
NOJIRA start of CSP abstraction.
refactoring - raising the abstraction level
hibernate-jpa-2ndlevel-cache. Project name in POM corrected. Example for accessing HazelcastInstance and getting Hazelcast map size added. 'stats' command added.
Passing tdouble KLU decomposition tests.
"MIFOS-4305: remove questionnaire and application coupling by pushing service facade into appdomain along with required services, move migration services into apponly-services.xml, fix problems with display of labels in UI."
ruby composition stuff
Fixed an issue that prevented the HA management bean from being loaded. Fidex an issue that prevented the discovery of how to connect to the management beans of an instance in a HA cluster. Added an abstraction for running test services in a sub process.
"fixed IntelliJ plugin UI, fixed outstanding issue with JSplitPane not resizing to the correct size the first time they are displayed"
"RegistrationState refactoring: - defining base methods in RegistrationState and overriding in specification classes - moved YearMonthDay->DateTime conversion logic to StateBean (and to RegistrationStateCreator, by inheritance) - when forwarding to inactive state, checking if registration has curriculum lines for the given execution year"
Various fixes - Make jpa API optional - CRP resource is a CR - Application is a CR - Split base model abstraction from BindingEdgeModel.
Use real Bson document size to check if param is a primitive
Issue 131: transfer 1-time abstraction to httpnio
Bug 33550 - [Dialogs] Dialog should support remembering size and position
Create a Runnable object to run commands from BotCommandInterpreter - this removes the need for explicit inheritance of Thread from commands - every BotCommand becomes a thread by default
Implement entity size limits
"=- Refactored getter methods to get Holes number, size and list - improved profiler at storage level"
Reduce complexity of test
[SPARK-9700] Pick default page size more intelligently.
"Fix isOclInvalid and isOclUndefined. Add support for multiple qualifiers, using uml Abstraction on the association."
[SPARK-9285][SQL] Remove InternalRow's inheritance from Row.
First commit for Roller 3.1 Theme Encapsulation work ...
Performance improve for really big zip files:   * adjust limit for maximum ZipFile size to 30010   * scan them using ZipFile to see if they contain more than 30010 entries
changes related to the change in inheritance
Spring properties editor:   - a few regressions tests.   - save/restore proposal popup size after user resized it
SONARJS-541 Precise issue location for ExpressionComplexity (S1067)
stabilize rendering of routes by decoupling directions from markers and polylines
Changed inheritance heirarchy of coursemanagement interfaces so we can have participants in course offerings and sections.
Added JMX support for introspecting the on-disk size of the store files. Also changed the name of the management package.
RESOLVED 242486: Improve text size guessing
"- Alteração do factory para receber apenas o hostname, visto que o repositório será informado ao executar o método de login. - Alteração do VersionedItem, incorporando o atributo size que só existia em VersionedFile. O propósito é que qualquer item saiba o tamanho acumulado dos itens contidos em si. - Criação de uma configuração do netbeans para executar o servidor RMI."
changed the name of heart-beat-failure handling method of dummy clients for the sake of abstraction
Changed file size computation
"Many changes towards CMIS compatibility, added support for cmis:item type, fixed folder / file tree loading, added missing mandatory properties, fixed type inheritance."
Refactore PolicyRestrictor in order to reduce complexity.
"refactored method complexity, added severity setting to some checkstyle checks"
task abstraction
webadmin: sub-tab tree view abstraction
Added infos in the CHANGES file. Renamed AssetLoader to AssetDownloader to avoid having 2 classes with the same name in Gdx. Set download size of audio file to 0 when not using browser cache (they are not preloaded but directly loaded by the audio system).
[PLAT-2500] Initial work on dynamic composition of market data providers
SONAR-2230 Refactor to decrease complexity
HV-390 Allow for boolean operators in constraint composition. Still needs some more testing
Fix: Support polymorphism in XML-JAXB
fixed sass compile and lots of changes ot make photo album paging and display size to work
Moving classes from ModeOfInheritanceFilter to the package level.
factor out common save method and introduce DAO inheritance for statistics DAOs
removed unnecessary inheritance of method
"Decoupling of the existing routing and geocoding providers to make the project modular, due Geoservices For Emergencies project's requirements. (#108119)"
Reduce complexity of if/for statements
Fixed StdCyclomaticComplexityRule
Refactored the promotion code to allow for a better separation of transient promotional calculation values and methods from the cart entities. Also added some additional abstractions that would make subsequent customization of the promotion engine more feasible.
o Unified inheritance hierarchy of POM model classes
The keep-it-simple-and-stupid solution: Specify a lower page size when looking for tags. Create separate tags for each found OntologyTerm.
"OK, the inheritance graph stuff wasn't working before because it wasn't actually adding any vertices to the graph!  Fixed this, and a few other bugs, and now it REALLY seems to be working.  Seems a bit slower(?) --- need to benchmark."
"column definition cleaned up, no more inheritance for metadata"
"WizardSplitDockStation: can set side, size changes lead more often to a revalidate."
CLOUDSTACK-9972: Enhance listVolume API to include physical size and … (#2158)
AS7-4706 Use Infinispan externalizers to reduce serialized size of replicated data
Complete the abstraction of the ModelLoader
DRILL-2150: Create an abstraction for repeated value vectors.
SONAR-4682 Start decoupling hash computation from issue matching
Merged FieldLUDecomposition and FieldLUDecompositionImpl (see MATH-662).
remove Java5/Java 6 abstraction since Java 5 is EOL and not widespread anymore
"Some test edits for release notes, but especially experimenting with MaxComputerTest: can MaxCore be written in terms of the Computer abstraction?"
AS7-5764 add global JPA settings for VFS URLs and extended persistence context inheritance compatability.
Unwrapping of ITE in EJB Methodhandler Removal of invokeAndWrap Using Reflections.invoke instad of method.invoke in some method handlers Removal of duplication checks in beans.xml parser (should be in validator) policy -> alternative with the exception of the inheritance naming problem in beans package
Simplified Is.* classes to use inheritance instead of delegation. `
Introduced BioAssemblyInfo to encapsulate transformations and mmSize now macromolecular size of assembly is also parsed
extended inheritance unit tests to abstract classes + fix bugs in APT plugin that was selecting the wrong method to pass to the invoker argument
Add the IncrementalUpdatePlan abstraction. Add the possibility to store deltas in the cache.
added a decompose method to the base DecompositionSolver interface to allow a solver to decompose a matrix after construction.
remove old DB and update to now version; set this DB as base initial version in V1__initial.sql; update all models; add some coupling code to control the burners & pumps
Removed Resource model classes since it is an antipattern bad for performances (each inheritance level generate SQL joins) Update samples apps and identity manager according to that Include Baptiste and Loic improvements for update controller method Replace Kazan specific password generator by Spring Security one Add an exception mapper for AlreadyExistingEntityException Use raw types instead of responses in GenericController
"Added Host/Domain Application URL feature, which replaces the single text control URL for applications. Included are validations for URLs based on existing domains, as well as refactoring of the application deployment wizard to use a new abstraction called a UIPart which allows for better management of error handling in the wizard. Mapped URLs also now uses the Host/Domain feature."
allowing different block size for storage modules
Inheritance Fixes found from TCK
* Refactoring spring configuration classes to match new modular approach * Pulling classes in to different modules to reduce efferent coupling * Tweeking generics on APIs
refactoring to reduce complexity
=- Simplified CompoundValue. - Removed AmountAdjuster from core. - Introduced initial version of calculation abstraction to extensions.
Renamed knob size variable
"removed the beanshell, provide (recompilable) support for tabbed or splitpane layout of requests and responses, use Preferences rather than Properties, remember the preferred size and position of the frame"
SONARJAVA-75 Fix McCabe complexity computation
Add remaining features to support the abstraction
factor out common save method and introduce DAO inheritance for statistics DAOs
" * Blob API change: introduce Repository.getBlob() method, which returns a BlobAccess object, which provides access to the blob meta data (Blob object) and the blob input stream. This allows to read the blob metadata before opening the inputstream. This fits better with how the REST itf needs it.  * Adjusted implementation of BlobByVersionAndFieldResource to make optimal use of the new blob API (no separate read of the record, set size response header).  * Since blob code is the same for HBase and Remote Repository impl, introduce a BaseRepository class"
reduce method complexity
Removed double[][] solve(double[][]) from EigenDecompositionImpl.Solver
HZN-966: Update Syslogd to the the Sink API for dispatching messages * Use the Camel based Netty receiver in both OpenNMS and Minion by default * Removed incomplete / unused receiver implementations * Aggregate messages into batches before dispatch * Expose configuration parameters for the number of threads and queue size and batch control
randomized value abstraction simplification 
Bug 388281 - [compiler][null] inheritance of null annotations as an option
fixed issue with graph size when rule name is displayed
Removed num pages / page size args to matrices. Better to let the OS manage them.
Created data socket provider abstraction layer. Subclassed FtpException from IOException
lowered complexity in separator and aggregator
Extracts an inner class into a new separate file in order to reduce the size of the original old file.
moved test classes to inheritance and extensions packages
"relocated functional related classes to a new package, functional and starting thinking about a Try abstraction and its relationship to Future and Nullable"
- Summary: fix 184335 Incorrect layout in designer when using font size percentage in report style
Corrects inheritance of contexts within promises
Migrate ComplexityChecks to AST
"Lots of changes related to changing from a time-based to speed-based model, decoupling concepts from one another, reducing GameLogic class, having conveyor belt handle the motion of the items on it, simplifying collision processing (in GameLogic - AI will need similar changes), etc."
"updated rm.quantity package - adjusted inheritance tree; added DvProportion, DvAmount and DvAbsoluteQuantity; removed DvMeasurable, DvQuantityRatio and DvCustomaryQuantity"
bean param inheritance support added for jaxrs
Reduce analysis cache size from 100 to 20. Cleanup of previous analysis cache changes.
refined size constraints for pruning of similarity candidate pairs
"Introduces the PathwayMonitor, an abstraction which refactor the reaction recursion depth monitor, and fixes bugs for the monitors."
"Fixed thread pool size for WorkerConnector, which were accidentally enlarged to CPU count + 1 instead of 3. That should just be the case for the AgentConnector."
Change elements size depenending on their content.
[Abstraction] migrate all `ImportProposals` and `Indents` use cases
SONARJAVA-1272 Restore complexity api breaking change and deprecate some methods
Client.game ref decoupling
CAY-2084 ObjectIdQuery - no cache access polymorphism
"TEIID-848 TEIID-788 TEIID-853 making insert with a query expression the dominant processing abstraction, adding validation of select into in a union, changing dynamic sql projection to positional, fixing insert with query expression"
"#1255 Extension of autoInheritanceStrategy, removing of name based ignore reverse mapping"
moved cache abstraction from context.support to context
CAY-1438 refactoring EntityInheritanceTree lookups
Added provider abstraction
fixed computing size of columns tree and columns scale
Remove coupling of sonar-plugin-api on Guava 10
removed inheritance
Continue cleanup and decrease coupling.
"Major refactoring Renamed Assignment to Installation Renamed ConsoleAssignment to Assignment Broke inheritance between Assignment and Installation Changed Deployment to only save assignment and not installation Consolidated test assignment, installation, and repo code into helpers"
abstraction of Danbooru-style API
flame traps have a higher terrain cost and so tend to be avoided in pathfinding.  Refactored to reduce complexity of contstructGrid() method
Changed the given-when-then test fixture API. - added an very detailed error report on failed assertions - API now uses a fixture instance instead of static methods - removed coupling on JUnit
Two major changes: (1) creation date has been moved from Base to Revisable (2) Made new DTOs for the preview and locations portions of GAEInputDataLayer so that we can apply different permissions to the CRUD operations for each portion.  Decoupling the DTOs from a 1to1 mapping with the persisted objects is good.
Using options instead of criteria and size in rest services
All calculations are done using real world units Added size filter in 3D Sholl
"Refactoring the AffinityMatrixCreator to be an interface and create a new SimilarityFunction interface.  Additionally, any class using the WorkQueue now all use the same singleton WorkQueue, as opposed to their own.   - The two affinity matrix edge selection methods are now different     implementations of AffinityMatrixCreator.   - Each AffinityMatrixCreator takes in two SimilarityFunctions, one for     selecting edges and one for weighting edges.   - Any classes using AffinityMatrixCreator have been updated to use the     interface and take in a pre-constructed AffinityMatrixCreator as an argument   - The LPP based mains have been simplified to create AffinityMatrixCreators   - Every similarity method in Similarity has a corresponding SimilarityFunction   - The kernel functions from AffinityMatrixCreator also have a corresponding     SimilarityFunction   - A bug fix in HashBiMap is fixed that caused infinite puts   - Minor spacing or javadoc fixes as needed   - WorkQueue is now a singleton class.  Any threaded classes using the queue     now access the same queue and submit runnable's to it so that no job queues     are conflicting.   - GenericMain sets the initial size of the queue based on the -t option"
increment to cover expansion size (now that it's bigger)
"add new test for concurrency, collections, inheritance and some general"
README for composition also combined parallel with then and renamed to when and renamed run to end in composer
Cleanup group by abstraction part 2 of 2
CLOUDSTACK-9211: Refactor vm vram size setter method
renaming VehicleComposition --> TrafficComposition
Removed the inheritance-based temporary database classes and WebAppTestConfigBean which was used to set up system properties. Added opennms.properties system property initialization to DaoTestConfigBean. Ported a bunch of unit tests over to use JUnit4 annotations.
adapted json-utf8-generator buffer size for additional performance
trunk:  - added SVNMergeRangeInheritance and added low-level merge-tracking     functionality for properly tweaking inheritable and non-inheritable     merge ranges
"XWIKI-3442: Review the font plugin * Font family and font size can be changed, but they are not yet detected"
Move SeverityProvider abstractions to editor.support
Increased max upload size limit. Added some logging to fileService. Added path creator to fileService.
Added a first version of a PRIDE export dialog for inserting the experiment properties. Removed the cancel button in the New Project dialog and increased the size of the Create button. Also made the Create project button and the Validate and Apply buttons in the Validation tab green when they can be clicked. (As done for the Convert button in the PRIDE export dialog.)
Version 3.8.2.2 * Fix for certain size settings not working correctly * Added languages folder
"Some initial refactoring of the help system, introduced HelpPage abstraction and HelpPageManager"
The FieldsetPanels option and page size are now created by AbstractListForm.
Removed nonrequired(nonsupported) Generics.  It seems that Java generics do not properly handle inheritance.
=-changed board size -Implemented World checks when adding robots
chor(engine): get rid of unnesecary abstractions
cleaning up and abstraction
#416 - RawSql issue with inheritance - PersistenceException: Inheritance type for discriminator value
abstraction for filter
Some rework of threading skeleton; documentation of major classes; generic abstraction added; removal of some unnecessary locking; errors still outstanding.
Switch to TABLE_PER_CLASS inheritance mapping strategy
"Modified inheritance hierarchy to match DOM model, implemented more W3C DOM methods, added tests."
New operator metadata abstraction
[SSHD-82] Add an abstraction on the FileSystem to allow more customization of the sftp subsystem Patch provided by Richard Evans
Reduce Cognitive Complexity
"BaseService interface doesn't extend HibernateDao interface anymore ""or you have inheritance or composition, never both"""
ClusterProviders: Increasing encapsulation through events.
More cleanup / inheritance.
"[MOD] XQuery, Fingertree: Unified inner nodes and made maximum size configurable."
WFLY-5233 Optimize marshalled size of web session cache keys and entries.
added PathfinderGoal abstraction level to reduce NMS code usage
Created *Settings classes for all extensions Allow KernelExtensions to specify settings-class Added size and duration accessors in Config Use GraphDatabaseFactory and settings in as many places as possible Added EmbeddedDatabaseRule for handling graph database during tests Added GraphTransactionRule for handling graph transactions during tests Updated ProcessStreamHandler to be easier to use Removed ancient StandaloneWithShell Updated settings to have same naming conventions
Implemented NPC and Actor calculators. Updated L2Character calculators to match abstraction
Modified oxalis-standalone to reduce the size of each result object being saved for statistics.
biggest city size / longest road length hint for king and scout bonuses is back (displayed on mouse over king or robber icon)
=- avoid putting content of property file in the configuration page - Remove fixed size for select and use A drop down when using single select mode
[PLAT-2500] Initial work on dynamic composition of market data providers
"Ditched the concept of sqi (square index), added RowCol class sqi just doesn't work when the board size could vary"
Implement superstep abstraction on Nephele readers/writers. Cleanup Nephele readers/writers.
"Refactored Server, created interface and abstraction, improved waiting"
"change composition semantics, no more init() method"
"Since merkle trees being compared must be of same leaf size & ary, the getChangeTree() method in the change log store needed to return hashes for buckets even they didn't exist"
New method to get cache - can provide size of a cache
SONAR-1722: Support multiple levels of inheritance
"added guice injection, removed resource-inheritance"
New way of looking at the size of a pileup: there's a physical number of elements in the data structure and there's a representative depth of coverage (since a reduced read represents depth >= 1).  The size() method has been removed because its meaning is ambiguous.  Updated several annotations and the UG engine to make use of the representative depths.
HIVE-8671: Overflow in estimate row count and data size with fetch column stats (Prasanth J reviewed by Sergey Shelukhin)
JBRULES-2835: renamed and implemented new abstraction
Colors page now has tree view and supports inheritance
FLUME-620: Collector fails due to an infinite loop during file-rolling if the body size is greater than 30kb - Added option for Thrift event body truncation - Added option for Avro event body truncation
store numClasses and code size in AppVersions
Create abstraction for common task of loading JS deps in Rhino
CAY-954 EJBQL Query: Support for single table inheritance (raw translator for dbpath)
[issue:0002523] + prepare decoupling
Use an actual instance of CommandLineExecutor This will allow us to keep some stuff as member variables and modularize the code a bit in order to reduce code complexity
composition ?????? ??? ???? ?????
Refactored QRDecomposition to match up with the rest of the package.
[NGRINDER-588] Fix checkstyle issues  [NGRINDER-599] Make the size calc logic on the runningSample
Initial outline of memory pool for EphemeralFileSystemAbstraction.
Decoupling FxmlLoader from SpringPlaceResolver
parallelize cholesky decomposition on single node.
#JC-147 improved entites encapsulation by changing visibility of accessors and adding constructors topics now removed and added using branch removed extra not null checkings in services
Improved encapsulation.
(1) Added HTML output to result viewer. (2) Added size & last modified to file list.  Also can sort it. (3) Added PMD Look & Feel.
Working dynamic inheritance
Reduce method complexity.  Make Sonar happier.
Added avatar size limit of 700kb
Removing inheritance between SimpleReducer and SimpleCombiner. It simplify the code
"Added support for ""bound"" configs (with sets of expression  bindings that automatically update properties based on the  context in which the config is created).  Used these to handle  change of render surface size.  Cleaned up the way render surface  size changes are handled."
WFLY-1812 Web session clustering should not require a RegistryService if sessions aren't being replicated. Introduce CacheServiceProvider to allow dynamic service installation per clustered cache (like what ChannelServiceProvider does for channels). Refactor wildfly-clustering-registry into wildfly-clustering-api and wildfly-clustering-server Remove wildfly-clustering-api dependency on jboss-msc WFLY-1885 Refactor wildfly-clustering-singleton. Introduce a new builder API and move the actual SingletonService construction and implementation to wildfly-clustering-server Refactor a separate Group abstraction from CommandDispatcherFactory.  Add channel and cache implementations for channel view vs cache view. Add NodeFactory and implementations for creating Node objects from a JGroups or Infinispan Address. Add GlobalComponentRegistryService for use by services that need to ensure an Infinispan cache container's channel is started.
35675 - Proj 1291: wrong font & size in one of computed column in the summary table when report exported in XLS format
"Using directives for fast indexer (including namespace composition), bug 200673+216527."
"Finished separation of Builders, made builders final. Added toBuilder() method for all kind of contexts and queries.  Fixed invalid inheritance for some query types.  Added according create methods and made constructors private."
[PLAT-6321] Increase complexity of test and include necessary fixes.
"Working on OMIM-HPO annotator, added LocusAnnotator abstraction"
Compute the preview canvas size from the rendered elements
o Added some more unit tests for all getRelationships methods premutations o Fixed bug in IntArray composing new array when size was 1 and that element    should be removed  
Fix late coupling of CodeReaderCache. Allow for cdtparser.jar to build w/out dependencies on cdtcore.jar.
"JUnit directly executes least squares tests      Previously JUnit would make the call to test a specific optimizer, and then that method would call all of the individual test cases relevant to that optimizer.,Now JUnit will directly call each individual test case.      The same test coverage is preserved. The GaussNewtonOptimizerTest is split into two classes, one for each decomposition algorithm it can use. There is a significant amount of duplicated code between GaussNewtonOptimizerWithLUTest and GaussNewtonOptimizerWithQRTest."
XWIKI-4772: Improve typing speed * Use the cache while updating the editor tool bar. * Cache the detected font name and font size (this was the most time consuming operation while typing) * Update the executables due to the recent refactoring of the Executable interface. * Other small refactorings
Further CSS cleanup and encapsulation
"Merged the code from APPSERVER-8 and some refactoring for FLVReader and related code. (1) FLVReader now uses a prefetching buffer for file reading and the file won't be mapped to memory at the beginning but read as needed. The prefetching buffer is mainly used for reducing the disk IO overhead and the size of buffer can be configured in red5-common.xml as a static property of FLVReader ""bufferSize"". (2) Cache for FLVReader in FLV is temporarily disabled by returning null on FLVReader.getFileData(). We need to redesign the cache architecture to put cache logic beneath FLVReader so that both tag caching and file caching are feasible."
* added mtime attribute * add size value independent from FSMETA value * removed fsSize and dateLastModified elements
Atomic Decomposition updates.
mainly ruby composition
[BZ 756100] Use file timestamp and size during drift detection
Adding more tests to cover other possibilities concerning different versions of the XenServer Adding a better algorithm in order to corver deeper inheritance form the command classes Removing some unsued variables.
"Code quality clean up. Remove singleton cache feature (adds complexity, encourages poor design)."
PLAN 4549: resource tree renderer abstraction
speed through polymorphism
added advanced betsquery feature calculates the result size for all bestqueries so u can decide which are the best
"=- Added A widget abstraction to allow plugins to contribute boxes to be displayed on the left. - moved out the build history to A widget, so that this can be reused elsewhere."
Fix ted issue16278:Proj 1124: Excel emitter didn't preserve an image size defined in the report during export;Fix ted issue 16143:The image without size setting is resized when preview as xls
"Make sure external profiles are applied to the superPom before it's used as a basis for inheritance in the project builder. Also, adding some debug statements to the lineage-building process."
[#2362] Decouple org.jooq.impl.Executor from Configuration. Choose composition over inheritance
JBIDE-15548 - Use JUnit @Rules instead of inheritance in test cases
"Totally decoupling services (database, mapreduce) from p2p"
"made optimalcoupling work; not sure it sounds better, though..."
Move org.sonar.api.measures.AverageComplexityFormula to sonar-deprecated
Improved method complexity in this bean definition parser
add auto scrolling test add initial 'Poster' abstraction
Added variable evolutionary step size to improve annealing evaluation in each step.
Stage/InstrumentType coupling.
Issue 350: changed from Size to Hardware and added Processor model
Release 0.6: - a lot of refactoring (now each object of a given type has its own package) - JTransforms updated to version 2.0 (no more power-of-two size limitation) - multithreaded implementation of Object matrices - fixed bug in DComplex.inv() and FComplex.inv()
"HIVE-16582: HashTableLoader should log info about the input, rows, size etc. (Prasanth Jayachandran reviewed by Sergey Shelukhin)"
"Modified destroy() method chaining - previously used destroy and chain of before*Destroyed() method calls, which was confusing and hard to trace across the class hierarchy.  Now using simple super.* overriding calls for easy traceability.  The previous before*Destroyed() methods existed for simple subclassing overrides, but are no longer relevant since the next release will favor a composition over inheritance model (subclasses should be very rare).  Also modified some JavaDoc to reflect this."
Inheritance of class and inherited parameters added. Closes #66. Closes #70.
Phase 1 of decoupling socket and queue in critical section - TESTED
"Get rid of stack size support, since it's not propagated to ulimit (where it's really needed)."
Use BigInteger in complexity metrics checks to avoid integer overflow (bug 1654769). Thanks to Simon Harris (haruki_zaemon) for reporting this bug together with an idea how to fix it.
CAY-2122 Vertical Inheritance: Cannot Insert Record For Implementing Class with Attribute And Relationship
Refactoring RiverService with abstraction level - Tests are now easy to write ;-) Fix #34
[CXF-6227] Adding a convenient Address abstraction to the http transports to avoid useless (and costly) URI->URL->URI conversions
"qr decomposition for real matrices, is.matrix, as.matrix"
"Add better inheritance / merging of configuration files, break up Rwanda configuration into several files that do discrete tasks, fix dependency filters so that they run after the primary filters, fix default dependency configuration errors, speed up export logging, add identifier generator to provider transform, add summary of number of rows exported per table at the end of the export log"
MEDIUM / Merge with ontologies_abstraction
[PLAT-2500] Dynamic composition of market data providers
"Revisit ZooKeeperClusterBootstrapImpl, DataStoreManager for improved state encapsulation"
"Loxi master is up-to-date now with FL codebase. With this commit, both ant and mvn should work to build. We will transition to mvn though to reduce the branch size (w/history purge) for upcoming v2.0."
"refactor QR decomposition, avoid mutating parameter"
"Added disk cache size limits, general cleanup"
Start creatint a 'YamlAssistContext' abstraction
Calculate size of types and described types
Refactor code to improve encapsulation
Fixed mapConfig retrieval complexity by getting it from mapContainer and prevented unnneeded object creation
ISIS-268: Breaking apart Polymorphism test to address exception in Hudson. Commenting tests to describes what they are doing and explain test philosophy. Minor code cleanups (unused imports). 
" * New `@NoException` annotation to reduce the size of generated code and optimize runtime performance of functions that are guaranteed not to throw exceptions, or for cases when we do not mind that the JVM may crash and burn  * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue #19)  * Fixed regression where the `@Adapter` notation generates incorrect code for types other than `Pointer` (issue #20)"
"o Adding back parent pom reference. o Disabling the lookup for snapshots in the functionaljava repository. o Fixing NPE in CopyDirectory operation. o Removing asAbsolutePath(). o Adding a simple PackageFileSystem class that represent the filesystem inside a package.  - Used to handle duplicates and changing of attributes.  - Removes a significant complexity from each of the package implementations and removes duplication. o Making sure SetAttributes defaults to ""/"". o Adding documentation on symbolic links. o Removing the empty FileAttributes constructor, just FileAttributes.EMPTY as a template object instead. o Improving the ""apply"" interface of the FileCollector.   - It now take the entire UnixFsObject as it needed to know what kind of object it was.   - Merging the two different kinds of apply into one. o Getting the symlinking to work properly, trying to straighten out the concepts. o Cleaning up the operation testing."
add public API for hessenberg decomposition
"Stub services updated, newPrice calculated inth item service, only brand and size passed as parameters, updated jsp to show item info in orderForm"
get rid of now unecessary IAnchorable and FinishedTuple abstractions
Ensure that URL paths for directories always end in '/' Add special support to JavaZipFileSystem for streaming the backing zip when it is mounted Also returns the backing zip size when it is mounted
save slime size on leashing
"[FLAPI-22] Provides a new ExecutionListener abstraction, with the ability to log each method invocation via the MethodLogger implementation. (This is quite useful for debugging.)"
"SWITCHYARD-1003: Extensible ""wrapper"" type for Message Composition"
Refactored connection flow for better composition and readability
ISPN-6362 Infinispan Query DSL parser failure with inheritance
SONARJS-299 Complexity/function includes is wrongly computed
DRILL-2723: Add option to change text format row size estimate.
Forgot to change the decomposition method back to LU
The commit has interdependent changes for: - [LOG4J2-634] ThrowableProxy ctor throws an exception when using suppressed exceptions. - [LOG4J2-584] TCP and UDP socket servers should be able to handle JSON log events - [LOG4J2-583] TCP and UDP socket servers should be able to handle XML log events General: - The Jackson code is 100% non-intrusive to the API and Core types. Jackson mix-ins are used for all IO specifications. Details for log4j-api: - Log4jMarker is public so it can be accessed Jackson XML and JSON IO code. Details for log4j-core: - The POM now depends on the JSON and XML databindings. Note that the runtime only needs Jackson if the JSON or XML layout or listeners are used. - The class StackTracePackageElement has been renamed ExtendedStackTraceElement and tracks the StackTraceElement it conceptually extends. StackTraceElement is a final JRE class so we use composition. This allows (de)serialization to deal with the extended stack trace in a more OO and simple manner. - The ThrowableProxy has been reworked to (de)serialize easly. It now tracks the suppressed exceptions of its Throwable. - The XML and JSON layouts also use the same Jackson XML/JSON IO specifications. Both sides of the IO are in sync!  - There are unit tests of course. - org.apache.logging.log4j.core.LogEventListener.log(LogEvent) is now public.
Abstraction for imaginary numbers
exposing .inner() on collections and renaming Wrapper as HasInner for consistency (next step toward eventually simplifying the inheritance hierarchies/generics/constructors)
JCLOUDS-951: Remove inheritance in ProfitBrick's AutoValue classes
Fixed up sync-translation to use the new Datasource Abstraction layer and added log messages.
Further preparatory work on time and size based rolling  - related to LBCORE-90
"Use composition instead of inheritance, to bind an OAuthClient to an HttpClient."
Test abstraction
Resolve NPath Complexity issue in InternalPartitionServiceImpl.memberRemoved()
CompletionProposal/InternalCompletionProposal inheritance changed getter & setter for CompletionProposal.extraInfo field
[RHQ-905] - reduce the xaction size for creating and updating alert templates; 
more on composition
new parameters: top list size and update accuracy
SONAR-926 remove useless coupling with class Language
Add Library abstraction
[Backport] DDF-3354 CDM verify file size stable before ingesting (#2487)
refactored academic service request events code to better reflect inheritance
Refactoring out an abstraction over the DB
Fix the UDP stuff on OSX by making sure the proper buffer size is set
[CAMEL-10824] Improve DefaultRuntimeProvider abstraction
[SSHD-477] Allow user control over size of copy buffer(s) used in DefaultSftpClient
enable fluent assertions on size of Maps (as suggested in https://github.com/joel-costigliola/assertj-assertions-generator/issues/67)
Fix quality flaw: reduce complexity
* Increased code coverage of PropertyBindingSupport to 100% * Refactored class to reduce NPath and cyclic complexity * Split up test files to reduce number of methods warning * Suppressed filename check for test classes
Fixes VideoFormat size discrepancies.
LineParser now supports curly brackets. It have also been refactored caused by increase of complexity
Merged CholeskyDecomposition and CholeskyDecompositionImpl (see MATH-662).
Allow for on the fly kmer size assessment.  Calc appropriate kmer size for translocation assembly.
"expanded SCM a bit to make it usable from MavenModuleSet. This doesn't seem like a good abstraction, so will check back later if there's any other way."
Bug 449795 - [patch] [LogView] Does not show log entry if size of sub-entries exceeds 1MB (1024*1024 bytes) 
Use method polymorphism
ISPN-5836 Expose eviction size modification through JMX and DMR
SONAR-5718 Add possibility to configure facet size and minimum doc count
"fixed a bug with the inheritance and hibernate, see http://chriswongdevblog.blogspot.com.es/2009/10/polymorphic-one-to-many-relationships.html developed 80% of adding files to an existing album"
"really test seeking (we weren't before). Also test backwards, and different size seeks. Also test skipping different size amounts, and share code between the tests. refs #236"
Refactoring to remove old Database Strategies and replace with new DatabaseAbstractionLayer - also started pulling in some static code anlysis reports
Mapping strategy in Inheritances models: tests
Use the object size in 64bit JVM of sun-jdk-1.6 to calculate memory size for 64bit JVM. Fix this issue.[34543 ]
Refactoring of Browser size workaround. Changed JavaDocProvider title.
Modified Graticule Lines style dialog. Added minimum square size guard.
"Tighter coupling of subscription expiry logic with other subscription management. The previous implementation could detect an expired subscription, allow another client to subscribe to it, and then stop the (now active) subscription."
- add an abstraction layer for the socialnetwork connection to introduce DI for easier testing - add the SocialKrakenFactory :)
"Addition of ContainerAbstraction interface, and associated refactoring"
"home directory browser can now actually browse collections and download file contents. a collection index displays the contents of the collection, with display name, type (folder or file), created and last modified dates, and file size (the last two attributes only for files). each resource in the collection also has a link to browse (for collections) or download (for files)."
Refactoring to simplify complexity of type resolution for properties
BACKLOG-5418: factory for CMIS and improve the abstraction layer to handle the query to retrieve folders since it's used by all the factories
added effect size and pValue to unidimensional and Categorical data tables using StatisticResult objects
Clean up Jackson inheritance examples
corrected executors to use this new abstraction
"Refs #2865, #2573: Custom Graphics Size now works with gradients. It also works when set through visual mappings, not just as default value or bypass. Custom Graphics (specially image) proportions also fixed."
WAL max size limit was restored. Free space detection bug was fixed. Additional improvements. (cherry picked from commit 253e575)
+ add XML support for cache abstraction (cache-advice) - DRAFT
SONAR-1931: Create a SQUID rule : total class complexity should not exceed a pre-defined threshold
 Bug 103863 -  Support encapsulation in SWT layout mechanism
Introduce type Size for image sizes in theming
wip on decoupling and extracting wicket-request. also the request encoding is now properly propagated to url handling.
Cleanup abstraction hirarchies. Added intermediary workspace builder and configuration
TEIID-1017: step(2) Associating data policies read from the vdb.xml file into the engine that they can be enforced by the Teiid runtime. This removed the old authorization framework as the complexity may not be required here.
SONARJAVA-2180 S2150 update - add more methods with linear complexity (#1402)
Fixed small issue in Receive message action regarding complexity and added unit test for bean definition parser
"[HER-1659] make default WARC size comply with spec; adjust default pool size for fewer odd-sized (W)ARCs * ArchiveFileConstants.java     remove superfluous constant * WriterPool.java     DEFAULT_MAX_ACTIVE -> 1 * WriterPoolMember.java     update constant use; remove deprecated+unused methods * WriterPoolProcessor.java     pull storePaths up from subclasses, but set default via subclass method     set defaultMaxSize via subclass method * WARCWriterProcessor.java, ARCWriterProcessor.java    (getDefaultMaxFileSize), (getDefaultStorePaths) as appropriate"
Remove ability to dynamically size TestStatistics - ain't gonna need it.
"Updated to work with RC0.88; Decoder is less strict now, allowing to be built withless than the amount of outputs required for the number of inputs; Divider now checks for division by zero and the modulus wordlength bug is fixed; receiver and transmitter report their channel and start-end bits on activation; sram reports its memory size and file name on activation and will save it`s memory to file every time the plugin saves its circuits file;"
"better support for immediate priority higher message dispatch for durable subs, tidy up audit and page size config for durables, use destination batch size to page in, remove extranious calls to store getSize(), test for duplicate delivery, audit needs to be large when priority is used and needs to be statically configured, prefetch is a bad model in with priority spread, restrict priority values to 0-9 as impl is restricted to 0-9 jms range"
Optimize cache key size by using component name instead of bean class name.
72136 Correct the algorithm to calculate transitent document size in javaserver side
HBASE-13628 Use AtomicLong as size in BoundedConcurrentLinkedQueue
[ISPN-235] (LRUDataContainer keySet() looping fails when inside there's a get call) Cache size is now correct after a clear. Fixed by looping through the entry set rather than the key set. Also added a peek() method to data container to allow cache retrieval without changing the order when iterating through the key set.
Now finds the most likely configuration of genotypes given the genotype likelihoods and inheritance constraints.  The parental genotypes are now phased as well (the alleles are ordered as A_transmitted|A_untransmitted).  Rewrote the way the transmission probability is calculated.  This will probably move into core soon.
Tree abstraction & huge trees
JBPM-4792 - Refactor DefinitionService (BPMN2DataServiceImpl) to avoid complexity with thread local closes #313
Added Coordinate & Fixed some decoupling issues (pointers array)
* XWIKI-5030: DefaultWikiMacro should store XDOM instead of string * XWIKI-5031: Wiki Macro should provide macro document in the macro binding * Applied codestyle (can't find a clean way to get rid of the remaining Fan-out complexity)
Abstraction ftw.
MAPREDUCE-3511. Removed a multitude of cloned/duplicate counters in the AM thereby reducing the AM heap size and preventing full GCs. (vinodkv) svn merge -c 1229347 trunk
Lack of Cohesion in Methods??
"Removed warnings from TestContainer. Enhanced findMethod() to search super classes for annotations, so we can use inheritance at all in test classes (e.g. to create a base class for IntIntMapTest, StringMapTest and follow up classes like StringByteMapTest etc.)."
Added an alternate layout such that pool groups are shown like the space  usage view for pools (showing the accumulated size and usage information  for the pool groups). Can be disabled with an option in httpd.batch.  Enabled by default (please tell me if you think it is bad to make this  the default).
[KARAF-831] Added cluster:group-pick command. Also added output suppression support for all group commands. This is really useful for command composition.
Reduced NPath complexity of OperationSelectorBuilder.
trying to reduce complexity in shape stroke
"Vast restructure, introducing metameta project and many dependency adjustments, which reduces sip-creator size from kitchen sink (36Mb) to normal (8Mb)."
jenkinsstatus-1: AppleJavaExtensions: create abstraction layer that makes it compileable
"Added methods to schedule renderers to the simulation, also tided basic hierarchy for renderer composition"
CAY-954 EJBQL Query: Support for single table inheritance (starting on support for inheritance discriminator columns that are not object properties)
refactor and rename incorrectly named JsonRequestManager to DrupalServicesRequestManager and removed extraneous layer of abstraction.
Use class abstraction to store state designator info
Change test:  By default writing to an existing file must replace the old file and the file size must be truncated when using OutputStreams. 
Extracted connecting check and extract file size to methods
Removed complexity.
All Mojos now extends AbstractMojo who provides commons parameters and functionality. To allow this the parameters now are readed using annotations instead of the old comments alternative no allow inheritance. (testing is pending)
ArtifactVisitor inheritance cleanup
"The libs have been removed from the repository to avoid increasing its size (a README file has been added with instructions on how to obtain the necessary JDT libs). JDX now uses a smarter structure to store source code (i.e., it is no more duplicated inside types and methods - instead, they recover their source code from the compilation unit's source code). This makes the DependencyReport much more lightweight. Type equal's method now checks for their parent compilation unit. Only a single source directory is now alloed (simplifies model). Method have a new attribute that holds its javadoc. Other smaller changes here and there (but no changes to the dependency extraction itself)"
"byte[] properties are handles differently, in that they aren't analyzed for bit packing, due to its unlikelyness of deflating, and also the cost of analyzing it if the size of the array is big."
Analyse: Code Viewer can be activated now also for a selected class in the decomposition view. Furthermore some restructuring and refactoring.
Huge decomposition of all web services bot tests
"progress bar size increased, for test steps in security panel."
move marker size to style manager
Harmonics+noise based sinusoids and noise decomposition: Completed maximum frequency of voicing detection.
  * refactor ImgLibProcessor::fill(mask) to calc via object composition and hatch classes as needed   * PlanarNumericDataset - add some new signatures to interface   
Extracted/moved tokenized formatting  abstractions to format package.
Added major testing which confirms network composition algorithm.
=- Merged the NamedFigure with the BaseFigure class to Remove redundant abstraction - updated LayeredLayoutStrategy to Update all lines - Added willChange() and changed() to RelationFigure to handle the events - updated the code in various parts to cope with the removal of NamedFigure
"Model changes for 	Bugzilla #204677 - Pie chart: fixed chart size, independently of labels 	Bugzilla #247402 - Legend shows ellipsis even if it is not desired 	Bugzilla #247384 - Long Legend title should be wrapped 1. Added ChartWithoutAxes/Coverage, which specifies the percentage of size that the chart graphics (pie or dial) in client area. By default it's not set, which means the size will be auto adjusted. 2. Added Legend/TitlePercent: The maximal percent of space which the 								legend title can take from the legend 								block. By default, it's 0.33333333. 3. Added Legend/Ellipsis: Specifies the min count of characters before                         		ellipsis. 0 means ellipsis won't be used.                         		Default value is 1."
Mercilessly decoupling system
Implement database type specific abstraction (dialect).
better encapsulation of the resources and services api
SCRUM-451 - merged GuiceModuleManager with ModuleManagerImpl - removed coupling of module manager and ModuleInstanceProvider by adding ModuleLifecycleListener - restart of modules are now done by ModuleManagerImpl by passing in an operation to be executed when the module is temporarily stopped
Moved IsotopeFactory from cdk-standard to the cdk-core module: reduced complexity of IsotopeHandler (by splitting up into methods) and added missing and fixed JavaDoc
Refactored blob storage. DB threshold now compared to final blob size instead of original.
[C#] Fix bug on method & complexity computation
Better subtypes and size handling.
"fix tests that check cron expression. Do javascript-based validation of an empty value, then server size validation of valid cron expression"
Progress toward GL20 abstraction. - Moved GL20 interface into playn-core - Small tweaks to Android GL20 implementation - Beginnings of WebGL GL20 implementation
"Two features useful for ancient DNA processing. Ancient DNA sequencing data is in many ways different from modern data, and methods to analyze it need to be adapted accordingly. Feature 1: Read adaptor trimming. Ancient DNA libraries typically have very short inserts (in the order of 50 bp), so typical Illumina libraries sequenced in, say, 100bp HiSeq will have a large adaptor component being read after the insert. If this adaptor is not removed, data will not be aligneable. There are third party tools that remove adaptor and potentially merge read pairs, but are cumbersome to use and require precise knowledge of the library construction and adaptor sequence. -- New walker ReadAdaptorTrimmer walks through paired end data, computes pair overlap and trims auto-detected adaptor sequence. -- Unit tests added for trimming operation. -- Utility walker (may be retired later) DetailedReadLengthDistribution computes insert size or read length distribution stratified by read group and mapping status and outputs a GATKReport with data. -- Renamed MaxReadLengthFilter to ReadLengthFilter and added ability to specify minimum read length as a filter (may be useful if, as a consequence of adaptor trimming, we're left with a lot of very short reads which will map poorly and will just clutter output BAMs)."
Implemented combatant inheritance hierarchy. Started to distribute command processing methods to appropriate combatant classes. Started to distribute combatant state to appropriate combatant classes. Implemented Combatant.addMessages(). Added randomPosition() and randomVelocity() to GameServer.
Reduce complexity (checkstyle)
Decoupling renderable tree w/ ViewNode/ScopeDefinition by moving bulk of creation logic to RenderableFactory and not using those classes in templates. Also made the guice factory via class mechanism work w/ any number of args.
"MAHOUT-939: Add in ability to alter pool size and thread count, mark ASF email classification examples as experimental"
"Improved type safety for Binary Space Partitioning and reduced complexity, using generics where it was relevant and reorganizing interfaces."
=- inheritance served - test for calling with wrong object
fixed proxies using attribute decomposition
=- make sure error window calculates size Every time it opens
Updates so far to use the abstraction layer.
RenderPanel is specific to JChemPaint. Decoupling this from the IRenderer interface means we should be more modular and able to utilises the implementations in CDK. Not sure if it's correct as accessible from IChemModelRelay but okay for now. Note the only usage was in the RGroupHandler.
"REPORT-685 - Expand CompositionCohortDefinitions to other types of Queries.  Refactored the CompositionCohortDefinition and CohortExpressionParser to create a new abstract base class for any CompositionQuery and CompositionQueryEvaluator, re-implemented the CompositionCohortDefinition/Evaluator using this mechanism, and added a CompositionEncounterQuery/Evaluator.  Also added some unit tests for both, which were not previously present."
Refactored SQSConnector into an abstraction to allow for easier implementation of multiple approaches.
Data Recovery fix for size and query operations 1.7.1-SNAPSHOT to 1.7.1 Test case updates
"support configurable block size, the size is defined in system property ""org.eclipse.birt.core.archive.compound.DEFAULT_BLOCK_SIZE"""
CZI: use a buffer size of 1024 in most places
I've added a few comments to TestSingularValueDecomposition.class
use polymorphism instead of instanceof check
"Partway fixing full ejb inheritance OPENEJB-781: Validation: Timeout method syntax OPENEJB-780: Validation: Conflicting use of @RolesAllowed, @PermitAll, @DenyAll on a method OPENEJB-779: Validation: Conflicting use of @RolesAllowed, @PermitAll on a class"
Refactoring of .jsp structure - decreased complexity of pages. Decreased complexity of actionBean classes - decomposed. Added parent-child structure among actionBeans.
"[added] TWL Layout method to eat events. [added] Ability to set max size on Bag and Array pools. [removed] Pool. Replaced all Pool usage with BagPool (which doesn't do a memory copy when items are returned to the pool as Pool's use of ArrayList did). [changed] TextureAtlas, renamed methods to findRegion and createSprite to better reflect the operation cost. [removed] IntHashMap and LongHashMap. [added] ObjectMap, IdentityMap, IntMap, and LongMap. These use open addressing with linear probing to avoid allocation of entry nodes on put. See JGO thread for performance. Changes HashMap usage to ObjectMap. [removed] LocklessThreadQueue. Replaced by AtomicQueue."
refactor core abstractions
"#596 tidied up the code, removed dead code and unnecessary abstractions (as the MQ and HTTP gateways are quite different now)"
Fixed Report items transfered to a library do not preserve section display inheritance (T54497)
Improve ModelElement encapsulation
SONARPHP-504 Migrate ClassComplexityCheck
First pass polymorphism of the DefaultrKey
Added some logic to support size on index hits
Reworked the Editor settings so that they are now contained in a popup dialog. Added Font Size to the editor settings.
Adding LU decomposition test.
Remove obsolete inheritance providers and globalise verbose setting
experiment to support inheritance during parsing of inlined entities
TEIID-2525 fix for fetch sizing being a small non-divisor of the batch size in prefetch scenarios
"MODE-1752 Updated Infinispan Binary Store's ChunkedInputStream to be able to skip directly to a given chunk, without the need of loading intermediary chunks. This is a backwards compatible change, because all the needed information to perform this operation: the size of 1 chunk, the total size and the number of chunks was already present in the system."
refactoring of 2q size increase adding test case for am queue
Extracted method to lower processMapping's complexity
Issue 84: Reorder inheritance of PrefabValueFactory
generalized test listeners to allow inheritance; little refactored
Renamed Size to NativeSize
"DRILL-933: Remove old physical operator cost & size concepts, add automatic size-based parallelization"
SONAR-5007 - Implemented Inheritance for CodingRules
SB-713:  LayoutProviders draft implementation using Path abstraction
CubeListener refactoring changes Prepared JDBC batch size usage in JDBCLoader
"Changed functions over to the new backend system, seriously decoupling functions from Script.java"
"fixed some logging levels by excluding the log4j.properties from the core, added better JMS connection feedback, fixed text-area size issue with script registry dialog"
????????????Avg.Complexity 1.62
"o refactored Resource abstraction (again!!) now less retarded, but still not 100% as I would like. Unfortunately this actually breaks the API of all previous 2.0 releases :( o Added support for registering full json files on a key and environment. Kind of made the api breakage worth it :)"
Modify CommandDispatcher api to use CommandResponse abstraction. This allows users of the api to distiguish between sender vs receiver failures.
OPEN - issue SPRINGME-7: Factor generator options out into separate abstraction  https://kenai.com/jira/browse/SPRINGME-7
https://issues.jboss.org/browse/JBIDE-8701 - junit is skipped because window size should be set.
unification of properties. additional logging. set buffer size for automatic transactions
o Moved dependency management importer into package dedicated to mixin composition
allow limit updates processing MR job's internal buffer by size in bytes (in addition to limiting by count of records)
Better encapsulation for Config and some test cleanup
[PLAT-2583] Created coupon on Ibor composition: Definition. Changed visitor for CouponFloatingDefinition. Added some methods in ScheduleCalculator to facilitate coupon construction.
"fixed yet another eigen decomposition bug identified, debugged and fixed by Dimitri! Many thanks to him."
use provider interfaces instead of inheritance
TEZ-2575. Handle KeyValue pairs size which do not fit in a single block (Saikat via rbalamohan)
Moved SampleDependencyTypeBox away from fragment package CompositionTimeToSample Box now reads offset as signed
"LOG4J2-423 Added MBeans for instrumenting AsyncAppenders and AsyncLogger RingBuffers, exposing queue size and remaining capacity"
o Added some more unit tests for all getRelationships methods premutations o Fixed bug in IntArray composing new array when size was 1 and that element    should be removed  
[NGRINDER-712] Detect the perm gen size and show error if not enough.
Fixed the shutting down of repositories for some test cases. Increased heap size for surefire and fixed pom.xml for modeshape-jca.
"Added a layer of abstraction, to make it easier to insert a new ScriptEngine"
Reduced NPath Complexity in HeatMap.
Added 1Mb payload size option for storage perf test Handle multiple custom urls as separate tests under the perf test framework
bug 11023: recalcuate vmware template virtuali size while upgrate above 2.2.10
Refactored to use FileSystemAbstraction (where there's now a EphemeralFileSystem) and proper StringLogger lifecycle
"MODE-1396 - Tck Locking Tests fixes:  - added missing handling on lock token in JcrLockManager  - added exception conversion - AccessDenied to LockException  - changed events & lock properties handling on locked nodes: the RepositoryLockManager sets the isDeep & owner properties, so that events are properly fired for locked nodes. Removed previous ""hack"" regarding event handling and also the code which changes the document ""behind the scenes""  - changed getLockTokens to return only the open scoped locks (Jcr spec)  - bumped up testing memory size because of an OOM exception on JcrWritingTest and the LuceneIndexWriter"
added composition trace to StringBuffer and StringBuilder
ebXML encapsulation classes to reduce redundancies in transformation steps.
[303004] Allow to extend MIBreakpoints instead of copying it.  Use inheritance for GDBBreakpoints_7_0 now that we can.
Reduce coupling in json generators
"reduced complexity of FilteringOsmStream, as it does not need to filter by type now"
Handling of excel default paper size fixed.
Added full command-line options support to Main.  Allow default composition file to be optionally specified - either via file or classpath resource.
CZI: use a buffer size of 1024 in most places
[MGWT-192] gwt:soyc does not produce report. Start introducing some refactoring (composition better than inheritance :-) )
Added distinct ping and pong operation for worker timeout detection. Made update of last seen timestamp more robust. Added logging of last seen timestamp updates. Added logging of message queue size to ping operation processing.
executor pool size configurable
fix inheritance problem. Needed changing to the Transformation sequence in order to define VDMThread extension after the getAllMethods have been completed. Test updated with the thread section.
"Script generation now takes into account the event objects used by event listeners. Scripted beans now support JavaScript ""inheritance"". Scripted beans can now have their names specified (instead of only class.getSimpleName()). The information that ""goes over the wire"" about scripted beans now includes their class name."
Reduced complexity threshold to 8 for Sonar and fixed violations accordingly.
CAY-1923 Optimize BatchTranslator - use fixed size array of BatchParameterBinding
Journal Pre-allocation 1. Make the Journal pre-allocation size configurable and increase the default from 4MB to 16MB 2. Also make the journal write buffer size configurable
Fixes compilation errors on CannedFilesystemAbstraction
"Move virtual point with player,SendProtocol polymorphism"
extend downloads dialog by size and date columns
Change behaviour for counting jobs size and builds size + add tests for it.
jcache Max size test
Added an abstraction to encapsulate the borrowing/returning of request queue senders to a pool.
[SPARK-10916] [YARN] Set perm gen size when launching containers on YARN.
Inheritance bug fixed;
"Bugzilla#278777 Added enhancement like this: if user manually specifies width or height of dimension cell, chart engine will use that size to render plot chart and axis chart. This will be a workaround for fixed layout."
Removed double[] solve(double[]) from QRDecompositionImpl.Solver Had to implement toArray() in ArrayRealVectorTest to make QRSolverTest pass.
PRD-5184 - Metadata system clean up to reduce the complexity of the parsing process. A bunch of pseudo-builders help to collect properties. A set of new validation tests uncovered some missing/invalid metadata in the process.
Better error handling for Java client. Fixed error in device inheritance hierarchy. Updated tests with new cases.
"Reduces contention regarding purging (evicting) entities from the gcr cache. This is done by not synchronizing the purge method, but instead keeping a flag if someone is doing a purge at the time that I (current thread) would like to do a purge. If that's the case and if we're within a slighly higher threshold we just return and get on with our business and let the one doing the purge do that and count on it getting down the cache to a decent size. If the cache size grows above the higher threshold we will sit and wait for the current purge to complete to not flood the cache. This makes threads help each other out and gives a buffer room where contention would happen before, but will not happen anymore."
=- Added possibility to read real time updates - did some more abstractions
"Added a HashIntSet class that uses hashing with linear probing to get most of the memory benefits of ArrayIntSet and better performance than a HashSet<Integer> (presumably because of less boxing and better spatial locality).  The downside is that you need to pick a sentinel value that can't be stored in the set, but that's not a problem in any application for which I've ever used an IntSet.  In some (admittedly simplistic) Google Caliper testing, HashIntSet was 22% faster than ArrayIntSet and 73% faster than HashSet for arrays of size N=10, 100% faster than ArrayIntSet and 69% faster than HashSet for N=100, and 357% faster than ArrayIntSet and 74% faster than HashSet for N=1000."
More work on abstraction.
=- large string values in argAray are now capped in size - testing that ThrowableInformation is serialized correctly
?????????????????????avarage complexity 1.64?
Second commit for Roller 3.1 Theme Encapsulation work ...
removing project files for now (seeing errors in my IDE) - will re-add them after cleanup.  Also added some utility methods to reduce method complexity
"Blag! Both the ZoneDirector and the SpotSceneDirector needed to extend the SceneDirector which, without multiple inheritance, would make it impossible to use both in a single client. Of course, we need to use both in Yohoho!"
"Renamed ""InheritanceChain"" to ""Hierarchy"""
"Renamed Maven package for LinkedDataSail, further decoupling it from Ripple. Note: there are still code dependencies."
Model Refactoring Add new Image abstraction
o Added UT to exhibit properties inheritance issue
"Fix #247, could not reopen collections with size counter."
"NOJIRA Updated support for tagging, minor interface change and updated test cases for tags, moved all the direct servlet logic to a central location for better abstraction, added tests to check the logic related to parsing and request processing using spring mock request/response, Updated the servlet to return error codes that correspond to REST microformat, Corrected bugs in the property handling code that would cause it to fail if the property handling was not done by the core entity provider for the prefix, now it should work correctly and the tests will check for this"
Add Spring loose coupling
"Exponential complexity resolving overloaded function calls, bug 283324."
provide prefix inheritance at class level
Changes related to stack size computations (still incomplete)
refactored the JmxTemplate code separately from the caching or creation of JmxConnectors' from Agents so we can reuse this abstraction in more places
schema mapper now also takes @Inheritance into consideration
"refactoring, add new config option - the size of the software output buffer"
HBASE-16229 Cleaning up size and heapSize calculation.
[Breaking] Remove unecassary plugin abstraction
"Shapes : Support for OR-ed superclasses, Transitive inheritance reduction, Logger replaces printouts"
"Implemented the detection of strict type dependencies, i.e., inheritance and interface implementation. Refactored a lot of stuff. For now, it is not possible to distinguish between inheritance and interface implementations. Tests still need to be rewritten to assert method call dependencies. Found a bug I introduced back in commit 68bb394. Will fix it in the next commit"
"added a check for the right jaxb version to Jackson2StaxReader, renamed JSONFromJAXBInheritanceTester"
Abstraction issues
"BLC-799 : When setting up a datasource with a ceiling entity that is not an interface, the inheritance hierarchy can be incorrect."
Analyse: 1) processWaitingAssociations() refactored; 2) processInheritanceAssociations() improved and extended; 3) Speed of analysis improved; 
decreased cyclomatic complexity
Added file size to the condition used for determining if the file has changed since it was indexed. Timestamps on Unix have 1-sec granularity and comparison based on them alone may produce false negatives.
#JC-1188 Complexity of fillLastReadPosts was decreased.
SAK-11245 http://jira.sakaiproject.org/jira/browse/SAK-11245 Fixed the merge operations that were increasing the size of the index under certain circumstances.
"SONARPLUGINS-127 Create a Sonar Jira Plugin reverted to sonr depency 1.10 deleted priorities metrics, replaced by a simple metric containg priorities with size in the text value added a issues_url metric"
pool: Refactor handling of replica size in the repository
"AS7-566 support for pluggable JPA providers, restructure jpa into separate modules, moved Hibernate4 integration into its own module, started decoupling references to Hibernate4, we now have separate JPA core/SPI/Hibernate3/Hibernate4 modules, support for one persistence provider and adaptor per app deployment, use the packaged persistence provider and adaptor, module org.jboss.as.jpa.hibernate3 added, added META-INF/services, can deploy hibernate3 with test app, Add reference to not yet created org.hibernate3 module (so applications can share the hibernate3 module),  adapter class init fix"
Removing Integer.MAX column size limit. (#3743)
TEZ-3739. Fair CartesianProduct doesn't works well with huge difference in output size (zhiyuany)
Reduce PoolV4's coupling to AbstractCell and CellAdapter.
Initial implementation of template inheritance
"Bugzilla Bug 175767 bubble charts too small in some cases. Add 20% margin area to display bubbles according to bubble size and min/max when computing scale. If bubble is out of bound because of specified min/max, to clip the bubbles. Refactor the logic of outside data check. Fix a minor bug in scale UI."
increase coverage slightly by reducing complexity in the BSlot.
Added ability to scale event row size and icon size independently in StackedTimePlot2D and EventPlotInfo.
Turn off forced_load_balancing by default. Add option to limit the size of printed confusion matrices in JSON/GUI. Add some Javadoc comments.
Change Stopwatch to use delegation instead of inheritance.
" * Rewrites InstanceTemplate as NewInstance, strictly from docs.  * Rewrites Metadata to have the same shape as in json, avoid really complicated json parser.  * Rewrites GoogleComputeEngineServiceAdapter.createNodeWithGroupEncodedIntoName to use less network requests.  * Removes untested aspects of TemplateOptions, except additional disks.  * Removes complexity around location by using aggregate apis, which removes custom location module  * Switches to uris as ids, which removes the InstanceInZone and MachineTypeInZone class  * Stop using metadata to temporarily store jclouds image id as it is reachable via disks[0].source -> disk.sourceImage  * Starts using MWS, which makes it possible to read the offline tests for compute service  * Reduces newlines needed in tests by switching mock project name to ""party"""
Bug 140226 - [PopupDialog] Separate persisting of bounds and location <rename parameters so that bounds never refers to size only>
Fix light bean setters via bean abstraction
"Not quite finished.. still have lots of optimization to do, and need to finish properly implementing the refcnt stuff for Storage so max size is properly implemented"
"There is no border around floating toolbars anymore, they are no longer resizeable, the size is always the preferred size of the Dockables (even if that size changes)."
- Long name (>15 chars) support - Added Bukkit Persistence Reimplemented by LennardF1989 - Made the plugin faster - Deleted unnecessary files (.jar size went down by 10 KB) - Added final and private keywords - Support for Bukkit's built-in permissions - Updated to newest Bukkit's standard (getFace -> getRelative)
bug #4760 :  Generalize in one single point the generation of the error message for file size limit exceed. Fix the maximum file size computation in Mo
moved megabyte size to Constants
"updated Typeahead request to run faster when there are many (non-user) keys in K/V store:    1) global keys are now fetch using new task, which uses faster lower-level interface to K/V store and fetches keys and information about keys locally as the result of the task rather then invoking TaskSendKey for each user key.    2) user keys (+ their type and size info) are now cached locally in separate cache which is updated only once in a while."
Improved inheritance trees.
HBASE-14869 Better request latency and size histograms. (Vikas Vishwakarma and Lars Hofhansl)
Reduce complexity
[models] Fix button size on AdvisorPreferencePage.
"[MRM-1293] introduce repository statistics as a new plugin that operates over the metadata repository. Currently a work in progress - repository size statistics are not stored, and only the scanner and scheduler have been hooked in (meaning reports will be out of date)"
CAY-954 EJBQL Query: Support for single table inheritance (refactoring -> implementing a stack of the marker buffers)
HSEARCH-2581 Add an abstraction layer over ES responses
Abstraction for vectors and matrices
SONAR-5700 New logging API to remove coupling on SLF4J
Fixed inheritance;
Split regions properly when KmerSizeEvaluator not used.  Improved validation around kmer size specification.
simplify impl inheritance
"#182 Moved lossless support classes to main package for better encapsulation, sorted out license issues."
Combined mkdirs and autoCreatePath in file system abstraction.
SONAR-5007 prepare medium tests for inheritance of profiles
First set of changes to make size check dynamically possible
"Fix various code issues as detected by Sonar Mostly minor changes: - Add deprecated javadoc tag on deprecated members - Reduce duplication (FlatFile, BackupService, ...) - Make methods static - Reduce size of anonymous classes - Replace name with displayName in PermissionsSystemType (avoids confusing with Enum name()) - Tabs to spaces - Merge if statements"
Fixes #335 by way of introducing an LRU VertexCache. Added configuration option tx-cache-size to make its size configurable on a per transaction basis. Greatly refactored the PerformanceTest Case to verify that the LRU cache indeed solves the running out of memory problem as well as test for other memory leaks.
Payment channels: Fix a dumb bug that caused the negotiated channel size to be wrong. Add a test.
Make non-classification inheritance make sense.
Moved all ArrayList tests to test classes corresponding to their place in the inheritance hierarchy.
Create an abstraction level of rivers
Resolve #6 -- restrict sample size to 2 for boolean theory parms
OGM-945 Using batch loading if the dialect supports multi-id-get but no batch size has been given explicitly
"Update dimension size and keep existing unit when resizing table, table column, table row and xtab cell. Other report items are supported in previous change."
"More refactoring trying to unify reader/writer side property abstractions a bit, for code reuse, consistency"
manage default and inheritance after loading all skilltreefiles
Reduced NPath and cyclomatic complexity of PropertyBindingSupport.java
"cleanup in workflow module. (packages, abstraction) also registration of workflow servlets. Now requires restart."
SLICE-47 injector hierarchy based on module configuration inheritance
"Refactor location addressing code.  - page size is parametrizable, increased to 4 KB  - location stored in 6 bytes  - fixed concurrent modification exception in cache  - synchronization for MRU cache"
Caching. Per-user (permissions/inheritance/prefix/suffix) caching implemented. Regular expressions are now cached too.
"Further decoupling of rendering classes:  - abstract Renderer is extended by SimpleRenderer and    MultiResolutionRenderer  - made InteractiveDisplayCanvas an interface (implemented by    InteractiveDisplayCanvasComponent)  - split RenderTarget from InteractiveDisplayCanvas, so Renderer doesn't    have to know about InteractiveDisplayCanvas  - BufferedImageOverlayRenderer is a RenderTarget and OverlayRenderer,    everything is painted through OverlayRenderers"
Major refactoring to loosen coupling between weatherstations and parsers
"MONDRIAN: Addition to changelist 8977(Formatting Inheritance). Added more tests, refactored code and added comments."
"decrement jar size & improved perfomance, decrement new SoftReference"
ruby composition stuff
refactoring of GraphHopperStorage: use composition instead of inheritance
implemented and tested first sketch of buffer size optimization
"added new searches for beans by property name and child beans by parent name; removed ""include subtypes"" options due to complexity / performance; refs #8"
SONAR-1722 increase the size of RULES_PROFILES.PARENT_NAME (same as NAME) + change the type of ACTIVE_RULES.INHERITANCE
"added getSize, incrSize and resetSize methods in Input.java for getting size of deserialized data to Unpacker objects"
Initial implementation for DBBAckedQueue abstraction
Op composition working except for the second opcall PO on op;asgn;op.
"logging, stubs for abstractions classes"
TEIID-2428 avoiding setting the fetch size for sybase
STS-3102: added additional optimization to the algorithm to lookup cached items in the inheritance graph first
Further abstraction of the Capsd SNMP classes.
[cleanup] Big cleanup on Extension Manager API * add javadoc * improve codestyle Only three remaining classes not fully following checkstyle (mostly fanout complexity issues)
"Configurable amount of logical logs to keep, by for example number of days or size on disk. keep_logical_logs configuration is extended to support values such as: ""10 days"", ""200M size"" a.s.o. Regardless of configuration there will always be at least the latest non-empty logical log left."
functional decomposition for DataForm flexibility
Total rewriting of the memory management of MVRB-Tree: - entrypoints now it's a TreeMap of all the nodes in memory - during optimize()  the entrypoints map is reduced to the config size - fixed a couple of bugs - registered much less memory used and all the operations are now much faster!
Bug 432265 - Support manifest inheritance and global properties for Cloud Foundry Deployment - Manifest inheritance support
Using abstraction to access NMS code
added a getQT() method to QRDecomposition interface compute Q by transposing QT rather than the other way round for efficiency JIRA: MATH-223
"HBASE-17605 Changes - Moved locks out of MasterProcedureScheduler#Queue. One Queue object is used for each namespace/table, which aren't more than 100. So we don't need complexity arising from all functionalities being in one place. SchemaLocking now owns locks and locking implementaion has been moved to procedure2 package. - Removed NamespaceQueue because it wasn't being used as Queue (add,peek,poll,etc functions threw UnsupportedOperationException). It's was only used for locks on namespaces. Now that locks have been moved out of Queue class, it's not needed anymore. - Remoed RegionEvent which was there only for locking on regions. Tables/namespaces used locking from Queue class and regions couldn't (there are no separate proc queue at region level), hence the redundance. Now that locking is separate, we can use the same for regions too. - Removed QueueInterface class. No declarations, except one implementaion, which makes the point of having an interface moot. - Removed QueueImpl, which was the only concrete implementation of abstract Queue class. Moved functions to Queue class itself to avoid unnecessary level in inheritance hierarchy. - Removed ProcedureEventQueue class which was just a wrapper around ArrayDeque class. But we now have ProcedureWaitQueue as 'Type class'. - Encapsulated table priority related stuff in a single class. - Removed some unused functions. Change-Id: I6a60424cb41e280bc111703053aa179d9071ba17"
Major refactor of column and EntityFacade logic.  Added both caching as well as encapsulation for various field types.
XRENDERING-192: Reduce xdom+xml/current markup size * move simple parameters to attributes
Added InputQueue initial size feature support.
artificially reducing complexity
Add new unique color and size transformers for labels
Initial implementation of ROP refactoring decoupling Hessian from connectivity layer and introducing pluggable serialization and connectivity layers.
"Fix for an issue with creating relationships on a node which hasn't got its relationship chain loaded and then in that tx getRelationships. It wouldonly return one grab size of committed relationships plus those added in that tx, no other."
"Throttle writers if mem-table reach 3/4 of size limit while snapshot is being flushed, and block writers if mem-table reach size limit until snapshot cleared."
Better abstractioness
"HTTPCLIENT-975: added CacheConfig settings to provide more detailed control over the background revalidation thread pool, and enabled the stale-while-revalidate feature by default with a single worker thread and a max queue size of 100 pending revalidations, which should be a pretty safe setting."
BookKeeper Client: Read Last Add Confirmed and Entry Error handling - Empty responses (no update to last add confirmed within the long poll timeout) should send a success code with an empty entry - so as to differentiate from requests that fail with errors - sendNextRead should treat a request as having failed only if there are no outstanding reads; thereby ensuring that the last read is the one that makes the final determination if the complete request has failed - sendNextRead should use ensemble size for read last add confirmed and entry
refactored to remove Classifier factory pattern and allow for model polymorphism
SONAR-9148 fix partition size for large inputs in MySQL
Cleaned up the inheritance tests.
Refactor retrieve() to keep a consistent level of abstraction throughout. This will allow us to break down our test a bit.
UI Fixes. Small bits of refactoring to aid decoupling of some classes.
"restructure the vertex/edge class hierarchy, improving encapsulation"
SONAR-6000 Try to decrease size of duplications in persistit
"- Split sending of JOIN-RSPs from GMS.castViewChange() to sendJoinResponses() - Changed Draw to marshall into a smaller payload - Changed merge policy in Draw - Added DeltaView and size test GMS.prev_views now contains a stringified rep of the view rather than the view itself, this uses less memory - Sending VIEW changes as DeltaViews (https://issues.jboss.org/browse/JGRP-1354) - A new coordinator sends the first view as *full view*"
Bugzilla ? Bug 236742 Preview <blockquote> tag in PDF and PPT fails with NullPointerException Bugzilla ? Bug 236822 Output attached report to pdf with actual size lost content[1200] Bugzilla ? Bug 236351 [Automation][Regression]Text is messed and out of grid when previewing report as PDF
"In ReferenceCamera#transformImage, adjust the size of the image before rotating so that the full rotated image will fit in the new frame. Fixes #228"
ACCUMULO-580 roll back changes to add batch size to batch scanner
Added a factory for Decomposition
Reduced NPath complexity of JavaInstallationsRepository.
KS-436:Lack of size unit of many attachments when viewing Entry
Fix encapsulation/safety issues from direct store of array arguments
[KARAF-2793] Remove tight coupling from bundle/core and kar/core to pax-url-aether
Adding a SecureTransport interface and removing many of the leaky abstractions in the transport package.
EST-76: some more decoupling
BookKeeper: Configurable retry pool size for ZK Client - Allow the client to specify the number of threads to use in the retry executor - Associate specific names with the thread for easy identification
More work on abstraction.
request reporters to their own package + page size and quick search are in one row now
#135:  Documentation InheritanceVariantContext
EPD-204: Restrict size of Route Request Window to fit within one monitor
Some Refactoring for better CatalogSpatialComponents Encapsulation TODO : Add Logic to manage binding with AreaInfo Bean
"Port functionality from B2009_03_26_HBasePersistence to trunk:  * OID generation that does not depend on OJB (not yet enabled, but ready to use)  * Add ownerObj and slotName attributes to VBox  * Make all VBoxes serializable, including arbitrary composition of value types (still not implemented for SQL)"
SONAR-9803 remove bad coupling of processes on sonar-plugin-api
Add a TransactionBroadcaster abstraction to PeerGroup.
cleanup vfs service (exposing methods that are only needed by client side ) + adapted to use kie-commons-io (new abstraction layer on top of nio2)
Restructuring and abstraction
"Added a layer of abstraction, to make it easier to insert a new ScriptEngine"
#JC-261 Replace string page size with an int value
SONARJAVA-2113 Feed cognititve complexity metric (#1385)
Refactored the listener to a top-level abstraction
Changed implementation of module name resolution from inheritance to delegation approach
added abstraction for calls provider;
Reworked controllers and components to use an interface/basic system. This was to solve inheritance issues.
Fixed an issue that prevented the HA management bean from being loaded. Fidex an issue that prevented the discovery of how to connect to the management beans of an instance in a HA cluster. Added an abstraction for running test services in a sub process.
"working on abstraction of XML Elements and Attributes, "
Starting to adjust some of the ops implementations (and associated classes) to use mutators and to use graph composition more heavily.
Use info collected by inheritance algo to update ES index
WELD-1238 CDI-18 Better abstraction over enabled classes/stereotyopes
Changes to store queue size independently as an O(1) lookup - uses some memory.
refactored and fixed Principal/Person/User inheritance fixed CRUD UI made auto-creation of users after authentication optional and configurable
Various refactoring for easier testing and better encapsulation
HIVE-2185. extend table statistics to store the size of uncompressed data (+extend interfaces for collecting other types of statistics) (Tomasz Nykiel via Ning Zhang)
"#723 Create provider for TimeoutTask and MessageTask, remove LimboCache#getInstance - Create class to handle the creation of ""LimboPlayer tasks"" (adds encapsulation, reduces duplication) - Move group setting into its own class because (mutual dependency between LimboCache and PermissionsManager otherwise)"
"Renamed file upload method. Replaced .equals with != null. Removed size check, this is done by molgenis."
further route table abstraction
"HIVE-15178 : ORC stripe merge may produce many MR jobs and no merge if split size is small (Sergey Shelukhin, reviewed by Prasanth Jayachandran)"
Fix critical issues detected by a SonarQube analysis. Split The authentication in AuthenticationServlet into several chunks of code in order to dial down the complexity of the code
adjusting the abstraction
Add parent pom for common dependency inheritance  - Cleared or moved some unused static properties from SingleService to SingleDao  - Added README
CAY-795 Horizontal inheritance
Correct distribution of allowed delta size along chain length
abstraction of new hot deployment thread
SONARPHP-504 Migrate FunctionComplexityCheck
WELD-1636 @WithAnnotations resolution does not consider scope inheritance rules
TEIID-4557 TEIID-2465 refining size limitation and adding a session limit
A bit more abstraction. And make the stuff we write to stdout be a bit nicer as a progress gauge.
"clean audit code, comment and allow inheritance for Auditable annotation"
Enhance field manager to account for polymorphism when getting a field from a ceiling class
"Done many changes, including creation of a KeyboardListener and setting app size in java"
Refactored transactional observer code for better encapsulation and runtime performance.
HSEARCH-2764 Limit the size of Elasticsearch work queues
Bug 379568: Refactoring of DSF-GDB JUnit tests to use inheritance.
"Add composition of configuration factories: Programmatic Configuration, System Properties, Environment Variables, Properties File, @FluentConfiguration annotation, Default Configuration."
Move metadata size validation to RawTableMaster
[AMQ-6815] have checkpoint validate status of async writes to avoid stale metadata and validate location size on read to avoid potential oom on restart
EST-76: more on decoupling (InvoiceProvenance)
"[PLAT-3191] Refactor the ViewComputationJob class into SingleThreadViewComputationJob, preventing an abstraction to ViewProcessImpl that allows other execution semantics."
moved getSampleSizes into a overridable method to help in places where getting all samples and asking each sample for it's size costs performance added tons of javadoc
[SPARK-9451] [SQL] Support entries larger than default page size in BytesToBytesMap & integrate with ShuffleMemoryManager
Consolidate tests related to @Config inheritance
some more wizard abstractions
add Geocoding service abstraction
o Moving all documentation to docbook.   - Produces single and multi page HTML documents in addition to a PDF. o Cleaning up how the parameters are passed to the UnixPackage.   Reduced complexity significantly as the entire initialization is split into    two different phases and not a bunch of methods. Should make it easier to    follow the logic in the packages too. o Moving version calculation from the ControlFile and SpecFile to the    Maven integration code. Moved CF and SF to their respective artifacts   as they now don't depend on any Maven code and in addition model the   actual file types closer.
added support for generation of ueber certs  - and increased checkstyle parameter list size to 24
More work on abstraction.
Remove unecessary complexity in cli module
Added file size restriction to file upload [#155 state:fixed responsible:none]
Modify model and gui inheritance
"Some refactoring of inherited index behavior.  Fields now get the indexed default state from their declaring class, not from the final class in the inheritance chain."
"Add support for reading/writing binary content to Directory abstraction, as well as copying files between directories. This is required by the offline generator so it can copy resources such as images."
Move cartesian coordinates abstraction down to GeoScorer level
"merge [#3167]  - restrict size of multi-element ""finder"" queries - also improved input validation for BigDecimal"
"Updated Grammar for matching JsonArray to be left-associative rather than right-associative. Gson can now parse arrays of size over 11MB instead of 80KB which was the prior limit. Thanks for the tip, kenotron."
Local hash table abstraction was added.
revert buffer size and add back rowFlushBoundary
"Created builder java classes for Suggest and SuggestRefresh - New SuggestRequestBuilder and SuggestRefreshRequestBuilder classes - Refactoring of all request and response classes - The term, field, similarity and size fields are not part of the query source anymore, but own fields"
Created a SqlType which was a better external abstraction of the SQL Types integers.  Much easier implementations now.
"bind the contentType, size and name of the fileItem"
HIVE-14367 : Estimated size for constant nulls is 0 (Ashutosh Chauhan via Jesus Camacho Rodriguez)
changed properties initialization order: properties are parsed in main entry point. Added init window size to default properties.
[issue:0002523] prepare decoupling of SWMM & ETA: Model Manager updated
"[HER-1827] Have Frontier report include top X longest queues * Histotable.java     expose static method useful for frequency-reporting * TopNSet.java, TopNSet.java     improve handling of case where updates may decrease frequency counts     add convenience methods for common needs * WorkQueueFrontier.java     replace single longestActiveQueue with largestQueues TopNSet, of configurable size     make max-queues-to-report-per-category configurable     "
adding valiation to Jaxb. Replacing strings with statics. correcting the composition of the specicmeasures xml
[cleanup] Big cleanup on Extension Manager API * add javadoc * improve codestyle Only three remaining classes not fully following checkstyle (mostly fanout complexity issues)
Fixed group checking for users. Now it's checking inheritance too.
Decreased complexity
ctf: Reduce complexity of CTFTrace#openStreamInput
UI:  - new page 'Settings'  - new widget for displaying settings grouped into sections with check dependencies between parameters  - new toolbar for buttons (removed YUI buttons)  - updated Bootstrap from v2.3.2 to v3.0.0  - support for popup notification messages in widgets  - fixed errors during resizing of layout  - decreased font size to 12px for all elements on page
Moved file system abstraction classes to new package.
Uses toolbar for help icon + fixed image size of 200x150
"Revert ""[MIFOS-4052] removed original loan schedule and fees inheritance"""
=- created new abstraction IDegreeModuleToEvaluate: represents A DegreeModule to enrol or an enrolment in one CurriculumModule. - EnrolmentContext has A list of IDegreeModuleToEvaluate instead of DegreeModuleToEnrol
The size of a CDockable can now be locked while its SplitDockStation-parent is resized.
DATAMONGO-899 - Polished API of new index creation abstractions.
o Added some more unit tests for all getRelationships methods premutations o Fixed bug in IntArray composing new array when size was 1 and that element    should be removed  
Loosing the coupling
"Scene2d refactoring + more. [added] WidgetGroup, a Group that does Layout. [updated] Layout, added pack, invalidateHierarchy, and validate. [fixed] Group lastTouchedChild. [fixed] Stack layout. [updated] LwjglFrame, setVisible called automatically. [fixed] LwjglCanvas cursor. [fixed] Warnigns, javadocs. [fixed] TextureRegion size float rounding. [updated] TableLayout pref size calculation. [fixed] TextField cursor blink when clicked."
Add record size to the logging statement
"368993 - Label with size hint {0, 0} layouted to {64, 64}"
Use UML activity start and end of coupling topology.
Created abstraction for markers supported views. Refactored ProblemsView
Major refactoring to the server-side bus architecture. Introduced a new layer of abstraction that separates knowledge about the transport and its behavior from the MessageQueue implementation. It also lays the ground-work for abstracting the difference between synchronous and asynchronous IO.
rename decomposition impl namespaces
Try reducing size of MainFrame.java - extracted tree code into new class
Set default tray icon size which caused Tomighty to crash on start under MacOSX 10.6.8 (Lion 10.7) (issue #41)
adjust remove bar size with dip some refactoring (method names / extract)
[removed] pref size fields from Widget. [updated] widgets to compute pref size outside of layout. [added] min and max sizes to Layout.
ISIS-117: Adding more tests to check polymorphism support. Not yet enabled (it would fail!).
BLC-139 - Refactor StructuredContentType - Changed Structured Content to intoduce an abstraction from content type to content template. - Updated annotations on page template and sc type to better display in the admin.
"MAHOUT-939: Add in ability to alter pool size and thread count, mark ASF email classification examples as experimental"
"partial fix for issue378 - memory issues when recycling bitmaps. - bitmaps allocated by the rendertheme are now recycled - bitmaps are only reallocated if the size changes (with read/write lock) - canvas is nulled out and reallocated after recycling bitmaps, see https://code.google.com/p/android/issues/detail?id=8488 This still does not fully address all memory issues that mostly afflict Android versions < 3.0 where bitmaps are allocacted outside the GC controlled storage."
"Much nicer demo with box component, size and align"
Variable data size for nodes and links
Implemented db.getSize() that returns the database's size in bytes.
Refactor ArrayEvent constructors so that a byte array of max size is not created by default.
"JBEHAVE-492: Updated annotation builders to use steps factory by default.  Behaviour controlled by @UsingEmbedder(stepsFactory=[true|false]) flag.  Added CompositeStepsFactory to allow composition of steps factories, as typically used by DI containers."
"major abstraction refactor, log4j, and selfish topology added"
"Script Editor: set tab size to 4 for Python, 8 otherwise by default"
Some better testing of performance and size when using KryoWrapper in Hazelcast.
Added repository field encapsulation
fixing bugs in KolichChecksum and also added max size on copies in the associated stream copiers
 * Modify writer so we write tiles of the same size (cf. spec)  * Modify test accordingly.  * Add controls to avoid division by 0. (close #4764)
Support for sample entities adds unnecessary complexity to domain. Always return null.
"Issue 130, Issue 129: revised compute abstraction to be more resource oriented.  added GET to ant"
Remove Quiescent search to reduce complexity
Renamed InterfaceConvention to InterfaceInheritanceConvention
Refactor LU decomposition results
various stuff including more on composition
DepthOfInheritanceTree
Move towards better mojo inheritance (provided by new plugin)
"updates to ObjectIdentifier API, and addition of an ObjectIdentifierMint which will be responsible for ensuring that ObjectIdentifiers are created properly, and also with the job of insulating the user from the DAO abstraction where necessary.  There is also improved generalisation of identifier resolution so that a single call to IdentifierFactory.resolve() will attempt to generate a DSpaceIdentifier from the given string using a number of methods.  Pass to this canonical forms, or url segments, and it will attempt to generate a valid object identifier."
Expanded linear/decomposition package to use more interfaces and breaking up the implementations. Removed HessenbergDecomposition as its own class.
=- accounted for changed inheritance - Renamed action method more stringent
"if idle pool reaches threshold, pool size is incremented"
[CORE-WEBUI] Image was to big in web ui. Refactoring all downloading system to download only once images and get them it correct size (not too big).
Decomposition and moving RESTful-like bot tests + template of new RESTful-like bot test added
XRENDERING-192: Reduce xdom+xml/current markup size First set of improvements: * no element for null parameter * shorter block element (<document>) * shorter serialization of simple type unique parameters (<word>word</word>)
"add log4j, validate size of file"
Added some tests for Eigen Decomposition
Fix quality flaw: reduce complexity by method
"Various fixes including refactoring CF console to define console stream content in a new abstraction, handling errors for each to prevent failures in any one streaming operation to affect other log streaming. This refactoring will also be used to stream staging logs to the console on application start up. Fixed various timing issues, cleaned up code with unnecessary operations, fixed 400 Bad Request error when checking for app instance stats. Fixed issue where login failure was not correctly being detected as the exceptions were wrapped in a CoreException. Also fixed error where console output stream were not being closed when an application was stopped."
Fix argument size @bug W-2935948@
Single port partitioned operator abstraction.
Implements file size limit and cooldown for image download
"In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761)."
Fixing size and toByteArray methods in the AndResultSet.
[ANA-76] Testing SV decomposition more thoroughly
An enhancement is made for smart cache. In orignal implement one smart cache will cache a specified amount rows in memory. The enhancement make one smart cache cache rows using a specified size memory.
=- Remove unneeded code - improve precision of classpath hash (was previously only converting the Long values for date and size to A byte)
"Decoupling from HttpTester, Introducing InProcResponse"
HBASE-16451 Procedure v2 - Test WAL protobuf entry size limit
Better hsearch inheritance tests
TEIID-1676 TEIID-1667 changing base aggregate planning to use an symbolic planning form.  beginnings of window function support.  fix for cardinality dependent aggregate decomposition
"Collapsed the SMACK/Neo4j abstraction, InvocationRequests now have database and other stuff as direct attributes."
"core,webadmin: Enable virtual drive size extension"
Added a more robust conversion aspect to the abstraction layer.
give the chance to tune RAM buffer size + some tuning docs
SONAR-249 decrease complexity
Added setters allowing to change the step size control parameters of adaptive step size ODE integrators
CLOUDSTACK-9298: Add @MappedSuperClass support for persistence inheritance
* Abstract our custom action bar implementation to be a standalone widget. This affords us the ability to use it for both the action bar and an action mode at the same time. It also would allow someone to use the widget without fully utilizing the automatic action bar abstraction. * Rework themes to mimic those of the Android 3.0+ native themes except as Theme.Sherlock and Theme.Sherlock.Light. These automatically inherit from the appropriate parent themes based on platform.
rewrote encapsulation parser
"Testcase that verifies the basic inheritance we have for @LocalClient.  Subclasses are not scanned for annotations, but subclasses can call 'context.bind(""inject"", this)' witout issues.  The meta-data of the parent class will be found and its injection will occur on the subclass."
TEZ-597. Broadcast Input should use the compressed size when creating an On-Disk IFile reader. (sseth)
Added Behavioural patterns for IA. Had to refactor Actions. Fixed a bug in SkyDomeRenderTask where no size was given when loading uniforms. Other minor fixes.
resolved inline background color and table size on nested table
Exploratory work developing the fetch engine. Fixed inheritance relationship between keys and entities in map interfaces.
Working on drivers for Plink's MAP and PED formats. Added a helper function to count the number of trailing newline characters at the end of a file to correctly get the number of elements. Restructured into packages. Introduced class 'Biallele' for the data types. Applied inheritance to data types to avoid duplicate variables.
"-Finished abstraction of destination path singleton-Cleaned up BroadcastEventProcessor singleton references (getInstance() calls still laying around)-Made some changes on set methods in notifd"
RTFACT-1544 - DB size growth when unique snapshots enabled No more threshold and using SQL query instead of XPath
Added a max size to ExtendViewport.
DATAMONGO-1326 - Support field inheritance for $lookup aggregation operator.
Added provider abstraction
Remove hard-coded size of 8 from boards Board size now defined at construction time
JC: Restructured the code to use a common method for opening the file parsing. Have a much more informative message when the file size does not match the expected based on the internal description
Progressing on the refactor.  Added new abstractions and continuing to work on the resolver piece.
a new archive format which is optimized for huge size file
Refactored StringToOpenTypeConverter in order to reduce complexity.
Fix mobile popups size and position
IDE-653: added infrastructure components to support <import> element in BeansConfig classes; Eclipse based implementation of the ResourceLoader interface and corresponding ResourceLoader as well as several Resource abstractions
Reduced fetch size. Original fetch size causing SQLWarning exception with timesten driver.
"Bit the bullet and implemented invocation service groups so that our various MetaSOY clients (Swiftly, World, and soon Admin Dashboard) don't have to know about a bunch of unrelated crap. Fricking complexity++, grumble."
"HIVE-14172 : force evict blocks by size to handle memory fragmentation (Sergey Shelukhin, reviewed by Gopal V)"
fixed layout when members dont have some size specified.
More work on abstraction
decoupling from arg processing
J-577: Improved error message + increased the minimal heap size for Tomcat of shutdown hook leak test.
renamed DesignForInheritanceCheck to DesignForExtensionCheck
"Measured size of various value indexes, and first pass on a text index"
Fix #3855 SnpEff annotator assumes resultfile is same order and size as input
DRILL-2178: Update outgoing record batch size and allocation in PartitionSender.
"[ARQ-193] Create auxillary OSGi test bundle Add TestClass abstraction. ClassEvent uses TestClass internally Add Context parameter to DeploymentPackager Add Context parameter to ApplicationArchiveGenerator, ApplicationArchiveProcessor"
fixed (for real right now???) the size and scroll behaviour of showing raw sparql response in codemirror
"Fix for 167396, inheritance relations in PDOM."
New abstraction layer: messages.
ItEr20S07CUIntroducionAvanceUnidadeTraballoItEr19S12: Extracting methods so the same level of abstraction is achieved.
Javadoc and inheritance cleanup.
Separate allocate and load methods. rename setRecordCount to setValueCount add setGroupAndValueCount to RepeatedVectors. add a number of marker/cross-inheritance interfaces.
[MIFOS-4052] removed original loan schedule and fees inheritance
Multiple fixes/enhancements for file/archive handling: Adds support for 7z archives; adds support for ZIP archives with unsupported data descriptor; fixes size for folders (files+subfolder count) in Files listing; fixes missing hasParent flag for archive entries; don't set default min-height for .blockPage class to avoid misplaced Close button.
HTTPCLIENT-1253: RequestBuilder to support request parameters that can be transmitted either in the request body or in the request URI depending on composition of the request
"completed implementation of EigenDecompositionImpl. The implementation is now based on the very fast and accurate dqd/dqds algorithm. It is faster than Jama for all dimensions and speed gain increases with dimensions. The gain is about 30% below dimension 100, about 50% around dimension 250 and about 65% for dimensions around 700. It is also possible to compute only eigenvalues (and hence saving computation of eigenvectors, thus even increasing the speed gain). JIRA: MATH-220"
"fixed problem with ""unknown"" file size (or rather tweaked), also slightly cosmetically updated browse.html"
Changes for 346768: [Table] Support markup for rich text in table items Render size for <img> elementto avoid flickering
Reduce complexity (checkstyle)
client io Test Executor Pool Size Low Simulating A high amount of listeners and Async Opps
Put the PDOM back to per project. Increased the Chunk size in the database to 16K so that less handles are created on Windows.
Moves the auto panelization dialogs into their own files to reduce the length and complexity of JobPanel. See #501.
Bugfix WOLips view category name. Reduced complexity for FileFromTemplateCreator.
some cleanup and mergig for #122 also long as resquest size added
"move cache reads and writes to the worker thread, since they can be expensive. Also, increase pool size to 3, and decrease retry time to 1 second."
Added JMX support for introspecting the on-disk size of the store files. Also changed the name of the management package.
add - channel flow control according to event size unit test and optimization
Some tests returns large message (e.g. a query returning 250000 entries which requires a message size of 1090944467 bytes). The QuickMath.nextPowerOfTwo(initialCapacity); overflows the integer max value.
"show new metric ""max heap size after full gc"" (max live object size)"
Improved abstraction of command line handling
Refactoring of selection classes : - use generics instead of CollectionMap to have something more readable - save memory by initializing lists and sets with size 1 - fix bug 2792806
"Multiple categories on tests, category inheritance, production classes in production package."
File metrics and some trivial assesment based on extended cyclomatic complexity
Remove coupling of unit tests on european timezone
more decoupling for Mains
JBRULES-1812 adding rule inheritance for core
revised the abstraction. I feel better now.
"SONAR-1845, SONAR-1931: Create a new Squid rules to check class and method complexity"
=- convert to maven project - switch to mbax’ NMS call abstraction implementation
=- Implemented BuiltinAtomicType and reorganized the inheritance hierarchy.   this change disambiguates the meaning of ConcreteType.
=- cleaned up inheritance of message pages (all inherit from ERD2WMessagePage) - Added utility to create branch delegate dictionary - fixed error message for mandatory to-one
=- move hibernate config files to conf/ - introduce more abstraction in social connection classes - move some tests from integration to unit level
Refactored JpaTestHelper and removed inheritance of this class
"JBIDE-17156 Palette wizards of HTML category should not have 'Add js/css' checkbox Inheritance of Palette wizard is changed so that super class has only functionalyty common for all widgets, while specific of jQuery and HTML is moved to subclasses."
"Fixes for inheritance related bugs, refactoring"
Still decoupling the media channel from RTP connection
Refactored to reduce complexity.
"Patch from Stephan Mühlstrasser released under the EPL   * inheritance of standard editorpreferences   * user-editable preferences     * Currently you can switch on and off the bracket matching, and change the tab width"
Propagate size of input streams for ceylon/ceylon-compiler#2297: Print progress during compilation
Signed-off-by: zhou <zhoucong07@gmail.com>complete using a number and timer to record the number whose frequency of occuration is more than half of size of array.
merge 178/patch.  True abstraction of Transport to allow implemenation by Apache HTTP client
"License application, decoupling of provisioning."
checkServerState and timeOut improved max Size in Server Changed to 28GB TextMD completed
Add FlatShape abstraction
Some more changes to support GUI size for high resolutions.
Vast simplification of size handling. Deprecates Graphics.setSize().
Decrease two methods complexity
Change maven toolabstraction test.
Fixing size and toByteArray methods in the AndResultSet.
"TED#29525 The fix is to not update chart model bound size in design time, and defer this to runtime only. Now size change in designer won't update chart model, so this operation won't flatten chart model from library to report design any more."
o super model construction moved into the project builder so that all pure inheritance can be handled therein. Then the only thing we're left with is the mixins
Reduced binary size of map.get/contains/entryview operations
Fixed bug connected to method size limit in Java (64kb) - classmap was too long
Making the appender's max wirte batch size configurable.
Adding complexity analysis to tests
Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.
MEDIUM: Merge of branch pamela2 Brought back: * Multiple inheritance * Deletion * Embedding (simple and complex) * Improved pasting points * Added more exceptions * Replaced constructors with initializers * Added various flags such as    * deleted    * serializing    * deserializing * Added modify notification handling * ...
"- Major refactoring to reduce code size and have at least halfway reasonable structure. - Added ""Bounce"" action - Fixed refuseNewSessions bug"
Refactored inheritance.
=- Implemented BuiltinAtomicType and reorganized the inheritance hierarchy.   this change disambiguates the meaning of ConcreteType.
"https://jira.jboss.org/browse/JBIDE-6287 , initialization of the page with facelet's <ui:composition> tag has been corrected."
Attempt to reduce call stack size for large BinaryExpression (#1727)
workaround the remoting window size negotiation for now
"HSEARCH-408 Improve execution speed of functional tests: disabled some performance-only tests, reduced size of data generated in some bigger functional tests."
cleaned up inheritance hierarchy of Proxies. all ProxyPushSuppliers have a common baseclass now.
 * Modify writer so we write tiles of the same size (cf. spec)  * Modify test accordingly.  * Add controls to avoid division by 0. (close #4764)
PoolManager: Extend magic feature to take file size into account
ISPN-7906 Infinispan Query DSL does not handle inheritance of properties/fields correctly
Reduced method complexity in soap endpoint and message callbacks Fixed mime header handling in SOAP response message
Common pattern illustrated and appropriate levels of abstraction now in place. Time to decide packaging
Fixed text in TableScanner to properly display in a Label instead of a TextPane. Added setSelectedCamera to CameraPanel. Refactored CameraView to store scaled and unscaled selections. Increases accuracy and reduces complexity. Removed calibration mode from the CameraView popup menu. This is now done in the CameraConfigurationWizard. Started work on calibration mode in camera wizard.
Working draft of the abstraction of HttpClient transport.
"Added samples (but not averaging -- this is still missing), drawing of average LCP and time depending on alphabet size (avg lcp)."
Fixed issue 156.  Added support for serializing an object field (or array elements) as per its actual type. Refactored inheritance related tests into its own test class. Added regression tests for issue 156.
"MAHOUT-294: - added argMap local to AbstractJob to allow option accessing abstraction - added hasOption(), getOption() and optionKey() to AbstractJob to encapsulate all -- prepending - revised all clustering components to use hasOption()/getOption() - added MahoutTestCase.optKey() to use optionKey() to encapsulate all -- prepending - decided not to continue with public addOptions() approach in earlier patch - removed all public OPTION_KEY constants in DefaultOptionsCreator but made      respective OPTION constants public - revised all clustering tests to use optKey - made interClusterDensity, intraClusterDensity and separation() public in CDbwEvaluator - all unit tests run"
#35 onSubmitValidator - fixed inheritance to get rid of cdi ambiguous
NEW: added two new system properties used to control N1 tile size (see beam.config): - beam.envisat.tileWidth - beam.envisat.tileHeight
[KARAF-2983] Support window size change signals in Terminal
[CLEANUP] Refactor SubClassConvention to SuperClassInheritanceConvention
Simpler inheritance model
"Feature #5893 : migrate org.silverpeas.cache package (lib-core, web-core and war-core) - first step SilverTrace refactoring in order to get an empty behavior for integration tests - migrating o forgotten batch around notification (by implementing Initialization interface) - fixing some injections with qualifiers - removing from Quota the JDBC persistence implementation in order to keep only the one of JPA - adding the clone feature to AbstractIdentifiableEntity abstraction - adding the Singleton annotation to some Services, Managers and Repositories implementations"
Refactor transactions abstraction to have a transaction local context.
"get the web-runner working again, context issuess, Jbehave composition issues"
Leverage Lifecycle abstraction to simplify test case.
Removed abstraction layers from SeekingIterators which makes them easier to understand and much faster
"Font size estimation added, first implementation of computeSize for Label, Button, and Text."
"[MOD] INDEXSPLITSIZE, FTINDEXSPLITSIZE: fixed size for splitting index"
moved supporting abstractions for server from classic to core
Rewrite tests for disposer method inheritance
406005 Added support for dynamic size complex rules and created ModifyTextComplexRule
"Big rocks: - added BlockAccountIterator.   ~ TODO: for now it has hardcoded constant of size 30 for block size, this may be a candidate for configuration property -- check the adapter code) - AccountUtil#getAllAccounts handles the iteration over all accounts at once.  - Group attributes search TODO"
add support for Views Component tree to ComplexityMeasuresStep
compositional work related to the feed sources (archive and otherwise) - also seperated out archival logic into an archiver class
Add inline skin and improve model/view decoupling
Reformulate CalibrationMerge customizability using inheritance rather than composition
Reset Recorder state when uri processing is finished (had been seeing cases where a url's entry in crawl.log would sometimes have nonzero size value if the url was erroring out and RecordingOutputStream.open() was never called)
"MAHOUT-294: - added argMap local to AbstractJob to allow option accessing abstraction - added hasOption(), getOption() and optionKey() to AbstractJob to encapsulate all -- prepending - revised all clustering components to use hasOption()/getOption() - added MahoutTestCase.optKey() to use optionKey() to encapsulate all -- prepending - decided not to continue with public addOptions() approach in earlier patch - removed all public OPTION_KEY constants in DefaultOptionsCreator but made      respective OPTION constants public - revised all clustering tests to use optKey - made interClusterDensity, intraClusterDensity and separation() public in CDbwEvaluator - all unit tests run"
Change protection levels; use inheritance hierarchy better.
MIFOS-4305: extract out abstract domain and organization elements in first steps to removing audit service coupling betweeen questionaire and appdomain
(1) New UI appearance. (2) Added new event system that improves decoupling.
Improve encapsulation of NameService artifacts.
adjusted terremark tests to ensure disks work; updated minimum size to 25GB
"OK.  Complete change of direction.  Use inheritance instead of composition to provide different evolutionary algorithms.  This is more backwards-compatible with 0.6.2, and I think it's cleaner."
Refactor into multi-module project. Drop Registry abstraction. Revert license back to LGPL.
Add method to estimate in-memory size of QuantileDigest
"fixed creating edges from knn, size method for iterable element"
added inheritance
HIVE-12574: windowing function returns incorrect result when the window size is larger than the partition size (reviewed by Jimmy Xiang)
ASSIGNED - bug 292183: [wikiText editor] setting of font size is not honored https://bugs.eclipse.org/bugs/show_bug.cgi?id=292183
"Revert ""replace test inheritance by @Rule..."""
changed caching in code changes analyzer to Spring cache abstraction
Raw protocol test fix: corrected invalid message size which should be less than header size.
Fixed an issue that prevented the HA management bean from being loaded. Fidex an issue that prevented the discovery of how to connect to the management beans of an instance in a HA cluster. Added an abstraction for running test services in a sub process.
Added some logic to support size on index hits
"AsyncWriter: introduce size limit on Write Queue, fix memory leak. See #275"
Init abstraction for compression algorithms
Allow NIOFileHandle's buffer size to be passed through from RAIS
[200853] Enhancements focused on inheritance
Fold weak ProcessContext abstraction back into GrinderProcess.
NOJIRA Extending CSP abstraction.
Added a maximum body response size to Jsoup.Connection
"fixes to version detection and location management, so that Kafka Integration tests pass (and test cluster size 2)"
- You can now pass in an ActorLogic array of size 1 into intersects and it will be filled with the ActorLogic that is intersecting the ray (if there is one)
"enabling servlet inheritance, fixing bug where spring would throw when the container re-started, and adding startup logging to DwrController"
"Fixed Subtypes2 so that vertices are added to the inheritance graph on the fly as queries are performed. (This can be done with no loss of precision.) Now it seems to work, at least for code that calls one of the Hierarchy.isSubtype() methods."
"MIFOSAC-12: Added a customer abstraction to allow launching the details for client, groups and centers."
Refinning HttpServiceProxy abstraction.
Fix Bugzilla ? Bug 279050 [Automation]Image size in HTML should keep identical with PDF
added SiteResource abstraction for js and css
Optimized font parameter generation in text size determination
Updated to use larger thread size for tasks (#1636 et al)
Abstraction cleanup
" - Added some of the intial infrastucture needed to be able to use that DataManager to do index file recovery.  - ObjectMarshaller now avoids doing byte[] allocations.  - We now store the data item's size in the index file so that when we load data from the data file using a     DataItem object, the data payload can be read in 1 io operation, previously an extra io was need to find    out the size of the payload."
WELD-1111 Inheritance of member-level metadata for generic types - missing substitution of actual type arguments
Moved file system abstraction classes to new package.
adjust remove bar size with dip
fixed positioning of details view when mapview size changes
request reporters to their own package + page size and quick search are in one row now
"refractor catalog domain objects to allow inheritance, add adminCatalog + checks"
"Updates FMJ to r11. This revision uses an adaptive jitter buffer (for audio streams), which changes size according to the number of packets arriving too late. Passes the net.java.sip.communicator.impl.neomedia.adaptive_jitter_buffer.* properties to the FMJ Registry. Changes the mechanism through which the number of discarded packets is obtained in MediaStreamStatsImpl, now using a FMJ controls. Shows more information about discarded packets and the adaptive jitter buffer in the ""call info"" window."
PLAN 4549: sif text inputs abstraction
Added skeleton ForwardLinkedList. Test classes now follow collection inheritance hierarchy.
#390 - ChangeLog - Add inheritance hierarchy check for @ChangeLog
#418 abstract json with generics and inheritance
updating builders to support copy constructors - refined atom interface inheritance to better support intended design
HBASE-17338 Treat Cell data size under global memstore heap size only when that Cell can not be copied to MSLAB.
* Fixed wrong equals value for SimpleProbe in PropertyBindingSupport. * Fixed cyclomatic complexity in PropertyBindingSupport. * Cleanup of PropertyBindingSupport. * Cleanup of tests for PropertyBindingSupport.
"Changed size field, it's methods and all uses to arraySize instead since thats what it is. Also made the test code better organized, clearer and more complete. Deleted some unwanted printlns"
class that populates a predetermined size array with the cumulative count
[SPARK-9452] [SQL] Support records larger than page size in UnsafeExternalSorter
Remove leak abstraction of Flags into rules.
"MODE-1462 - Updated logging: - moved all logging classes to common.logging instead of common.util - added logging factory  & logger for pure Log4j support - changed logging dependencies scope from <compile> to <provided> - added a logger abstraction in modeshape-jcr-api and an implementation in modeshape-jcr which should be used for extensions - updated Sequencer and TextExtractor base classes so that upon creation, they are provided with the extension logger"
Moved responsibility for sorting to parameters object and improved encapsulation.
Intermediate commit of new bubble assembly graph traversal algorithm for the HaplotypeCaller. Adding functionality for a path from an assembly graph to calculate its own cigar string from each of the bubbles instead of doing a massive Smith-Waterman alignment between the path's full base composition and the reference.
Further refactorings for modularity and decoupling
CLOUDSTACK-8121. Data disk properties are not updated upon Creation/Deletion of VM snapshots. Update the path and size of data volumes after snapshot creation/deletion by correctly trimming only the snapshot postfix of a disk.
BLC-460 - Updated OrderService and related controllers and domain to support adding a Product with options to the cart.  (e.g. adding a Product of type shirt with options for size and color).
Updates so far to use the abstraction layer.
HV-92 Added group inheritance and added some more tests.
"* Stop using width to determine the size of the panel, shadow or offset. If the panel can go on any part of the screen, this size will be sometimes a width, in other cases a height."
"Active region walkers can now see the reads in a buffer around thier active reigons. This buffer size is specified as a walker annotation. Intervals are internally extended by this buffer size so that the extra reads make their way through the traversal engine but the walker author only needs to see the original interval. Also, several corner case bug fixes in active region traversal."
Use inheritance for collections classes
SONARPHP-642 Migrate complexity-related rules
"Fixing project-loading to process inheritance in the correct direction, and finishing support for custom profile activators...also moving /project/build/extensions handling out to a separate extension scanner component, for later reuse elsewhere."
Clear widget packed state after text size recalculation
"DF: Some minor bugfixes (ancestor instead of anchestor...). Common: Some abstraction concerning FDockable and children, allows clients to add their own specialisations. Common: New concept of ""working area"" (not yet fully operationable)."
Renamed package and added file size limit for uploads
"Fix a problem with branch-node serialization, size calc wrong. Now builds bigger tries, although not yet 20 meg one (still of by a few bytes)"
Rewritten big part of OFileClassic to write in append only avoiding to rely to the header to store data size/ file size.  Now OFileClassic doesn't allocate more space anymore. The file size is the data size!
"XCOMMONS-1293: Body Filter fails to wrap in paragraph when there are tailing new lines * Fixed "" CyclomaticComplexity: Cyclomatic Complexity is 14 (max allowed is 10)."" from previous commit"
"Massive rewrite part 1: Inheritance between checks, less entanglement between components, introduce ""NoCheatPlayer"" class for easier access to data and configuration"
Remove inheritance for editor panel
"Common,B,JideBoxLayout,Fixed so that JideBoxLayout#isAlwaysLayout() returns default value as true to always layout the container even when the minimum size is not meeted at all,,no Common,B,JideBoxLayout,Fixed so that the previous layout will be cleared when the minimum size of container is resized to a too small size when JideBoxLayout#isAlwaysLayout() returns false,,no"
made cache size configurable; added automatic (partial) warm up for Server
[ANA-76] Tests for commons SV decomposition result container
Work on improved IO abstraction layer.
Refactor table ANALYSIS_REPORTS because of MySQL packet size limitation
Extracting Backoff from RetryPolicy to better reflect abstractions and ease configuration
Add testcase for inheritance of properties with the same name
added GenericID and UIDBasedID; renamed HierarchicalObjectID to HierObjectID and updated inheritance of HierObjectID and ObjectVersionID
get module inheritance working
Bug 388281 - [compiler][null] inheritance of null annotations as an option
Add wildfly-clustering-marshalling-spi module for marshalling abstractions. Extract Marshallability interface from MarshallingContext.
nurse rostering input converter: log problem size and no null lists + rename shiftpattern to pattern
0.5h Hopefully show inheritance properly
webadmin: Client storage abstraction
Code cleanup: reducing code complexity
Fix shell test harness - more complexity... yay
Testing for Polymorphism
"Added abstraction to switch streams to the ones within the console, and restore back at shutdown."
bug 176175 - make VM setting inheritance optional
Reduced cyclomatic complexity in KeyUtils.
Backport HDFS-4200 from trunk: Reduce the size of synchronized sections in PacketResponder.
Small refactoring to reduce cyclomatic complexity of CheckStyleTask.execute().
Fix TAB creation with real image size and properties file for CRS def
 - fix for textExtent to take results computed at the client side into account  - introduce markupExtent to measure the size of markup on the client
DDF-3144 Fix removeAll command not deleting all metacards when batchSize exceeds catalog page size (#2161)
"TEIID-164 TEIID-352 removing complexity from the JDBC connector.  targetting a scenario where only the translator, connector, and the capabilities should need to be overriden.  This is an intermediate check-in.  Identity management for connectors will be merged with the base api."
"- replaced compiler hint ""Selectivity"" by ""AvgRecordsEmittedPerStubCall"" - adapted size estimations to new compiler hint - adapted JSONGenerator to new compiler hint - Adapted examples to new compiler hint"
CLOSED - issue SEAMSOCIAL-13: Loose the coupling with Scribe-Java Library by using Injection  https://issues.jboss.org/browse/SEAMSOCIAL-13
Add a layer of abstraction to support multiple fec types (#384)
Refactored to use FileSystemAbstraction (where there's now a EphemeralFileSystem) and proper StringLogger lifecycle
Added some logic to support size on index hits
"· Advanced synchronization improvements: 	- Blended icons modified. 	- Buttons' size changed 	- Import / Export modes improved"
"added setting of send/recv buffer in TCP, made frag buffer size determination static in AUTOCONF"
"Refactored the message type mechanism.  Prior to this change, message types were managed as enums.  However, because we want to use the Chime framework as a general purpose service framework, we separated the Chime domain messages from the core messaging classes in a previous commit.  This exposed a problem with the enums because enums don't support inheritance in Java.  In order to manage a combined set of message types it was necessary to abandon the use of enums for message type and move to using integers."
DRILL-856: Reduce code-generation size for MergingReceiver
Bug 364108: Exponential complexity parsing code with missing closing braces.
web: TotpAuthenticator: secret key size back to default as there might be persistence model changes needed. new method to specify secret key length added.
WAL max size limit was restored. Free space detection bug was fixed.
UI:  - new page 'Summary' of account  - added editable field 'API Key' on account page  - new widget for displaying models using templates  - added trigger button for text field  - added support of size synchronization for forms and fields  - ability override title of the form panel  - added API for REST services  - some styles moved to file for import (import.vars.less)
"Refactor org.wildfly.clustering.spi, org.wildfly.clustering.ejb.spi, and org.wildfly.clustering.web.spi to leverage Builder<T> abstraction."
"DDF-1219 Collapsing, normalizing, and refactoring unit tests. There are more opportunities for refactoring, but this represents approximately a 15% reduction in class size and removes much of the duplicate code."
Addresses issue #11 where a general refactor is needed to improve the cohesion of the creation of property value mergers.
"ROO-3311: Provide option for Spring Roo managed XML configuration for Services, Controllers, GWT Locators, etc. ROO-3230: Add method level security to Spring Roo services ROO-3211: Modify the inheritance chain of activities and views in order to increase flexibility. ROO-3208: setEntityPickerValues method not being added to View interface in EditActivityWrapper ROO-3204: Use existing renderers in mobile list views rather than defining new ones ROO-3179: Better organize the scaffolded views in a GWT application ROO-3178: If a user adds a field to an unmanaged edit view, do not add it to the managed edit view. ROO-3177: For GWT plugin, separate requests into a managed and unmanaged interfaces"
#314: Inheritance annotation bug 
HSEARCH-2581 Add an abstraction layer over ES request creation
Calculate insert size from positions. Only import insertSize from sam if the value if not zero.
Replace inheritance with delegation for #138
"Reworked implementation. I was unhappy with the complexity of the previous one. Now, there's a simpler master implementation DistributedAtomicValue that is the basis for the others. Adding new versions should be simpler as well."
Add some GUI abstractions to allow for more flexible API
variables renaming; processor loose coupling
revised cache abstraction - removed generics from Cache/CacheManager (they add no value since it's an SPI not API) + update docs and tests + renamed ConcurrentCacheFactoryBean to ConcurrentMapCacheFactoryBean
Multimap EntrySet Values and Size operations
More complexity measurement cleanups from Jason Bennett; thanks Jason!
add block size when create file
Refs #3694: Updating Network View WIDTH/HEIGHT when the RootLayout manager updates the content pane size rather than listening to component resized events.
Issue 56: Support for the maximum allowed size of a single uploaded file officially
saving tings.  need to get rid of this InheritanceType.JOINED garbage.
JBRULES-1875 Load Composition XML files for multiple resources JBRULES-1874 Create Resource Framework
cleaning up naming and sorting abstractions
KS-436:Lack of size unit of many attachments when viewing Entry
Huge decomposition of all web services bot tests
Update of call hierarchy complexity check
rename size to samplesCount
more inheritance testing
"Position the platform capability details dialog relative to it's parent, and provide better formatting of size values"
fixed icon color on tab editor dialog moved reply count to left of retweets count fixed drag handle in account manager try to fix wrong profile image/preview media changed some text adjusting profile image size fixed account popup style on compose dialog trying to fix api version suffix
#34 : Refactoring RiverService with abstraction level - package refactoring
basic framework for physical plan.  abstraction of graph classes.
"Fix Bug 210278 partial Added initial support for chart in xtab. Now chart in xtab can preview, with some size issues to be fixed later."
Changed metadata format to include size of compressed blocks
Refactor everything to get rid of the DomainGroupVersion abstraction
Fix quality flaw: reduce complexity
Test read-only collection with size annotation attached to a field
@Configuration parsing fully relies on Spring's MetadataReader abstraction now
ConnectionSource abstraction layer to allow custom transactions management
"MATH-887 First steps to enhance encapsulation (goal is to remove the ""protected"" fields): used new API (MATH-874). Replaced explicit loops with matrix operations. Disabled a unit test that does not pass anymore."
[xcode] Extracting source and sink abstractions
Fix memory issues with Es6ToEs3ClassSideInheritance.java.
add many more Dshini operations - finer grained operation decomposition
Changes to Tokenizer creation and abstraction. Separated sampling jobs. other minor changes
Issue #713. Migrating field mode_of_inheritance to global_mode_of_inheritance (PatientClass). Renamed migrator class. Changed NumberProperty to StringProperty.
nice batch chunk size handling
Reduce the size of PackWriter's ObjectToPack instances
Added missing input stream check and the block reader no longer returns the magic number and block size bytes
"More abstraction on the notifd singletons... head will be broke until this is complete-David"
TEIID-2210 refinements to the object translator. decoupling the translator logic from the connection logic.  this temporarily breaks the functionality
store dialogs at the location and with the size the user has given them
worked on support for inheritance
ParamSetter abstraction  @Body contentType
"WYRL: ok, the rewrite complexity is now starting to do something vaguely useful."
Rename factory methods for composition data type definition to 'create'
Committed Markus's patch to fix bug 329915: Save size of quick assist proposals popup
* lucene index provider is aware of ephemeral mode and uses RAMDirectory in such a case * index.db and lucene-store.db now uses FileSystemAbstraction and are hence in-memory when ephemeral
work in progress on entity context inheritance
Allow the scale to be configured based on the size of the canvas.
SPARQLClient chooses GET or POST depending on query size (currently the limit hardcoded at 8KB)
"XQuery: (Index-)Range Queries, Path/FLWOR rewritings, Skeleton Access for size estimations, ..."
SONAR-3257 use max size when pageSize<=0
"Configurable chunk size via ha.com_chunk_size for communication chunks between server and client. Also reduced default chunk size to 2M from 16M. A chunk size of at most 16M is still possible to configure. Made read timeout for the ""copy store"" request twice that of the normal read timout to be more resilient to slow network or bogged down master."
"Refactored DomXmlMessageValidator * Reduced Cyclomatic Complexity (3 Sonar warnings eliminated) * Added some Unit-Tests to backup refactoring * Discovered (and fixed) Bug: when an element contained validation matchers on attribute and(!) element value, the validation for attribute was never performed"
 - fixed linked events moving wrong event  - fixed moving a boundary boxed event causing it to resize when it actually hit the boundary dates  - same for resizing  - hitting ESC when doing a resize/drag will now cancel that resize/drag and move it back to where the drag/resize started - memory optimizations - speed improvements - virtual vertical area with no canvas size limitation - customizable horizontal scrollbars - header date clicking + event firing - scrollbar update fixes - tons more
SONAR-2149 Resource filters are ignored in complexity distributions of Java projects
"added setting of send/recv buffer in TCP, made frag buffer size determination static in AUTOCONF"
SONAR-4923 List inheritance profiles now uses Java facade
decomposition of attribute in fields
3D Viewer: Make the rotation step size adjustable.
OGM-389 Establishing common abstraction of embedded and document-based associations
Add option to limit batch size based on duration:
Add tests and support for deployment type inheritance
- Summary: fix bug 123202: Outline of chart area is not displayed completely in preview of chart builder. - Bugzilla Bug (s) Resolved: 123202 - Description: enlarged image buffer size to fit in the outline - Tests Description  :
"SONAR-3900 Add new metrics ""complexity in classes"" and ""complexity in methods"" to compute ""complexity/class"" and ""complexity/method"""
Reduced map operation inheritance tree.
HIVE-1642 Convert join queries to map-join based on size of table/row (Liyin Tang via namit)
TOMEE-1212 reading thread and queue size from context and creating a local executorservice if needed + flushing tasks before quitting
"Remove Client, Request, Response, TypedInput, and TypedOutput abstractions."
HIVE-7119: Extended ACL's should be inherited if warehouse perm inheritance enabled (Szehon via Xuefu)
Cleaned up errors and warnings reported by PMD. Warnings for class size are suppressed so classes map to the file format specification. Only complexity warnings are left which will be fixed in due course where appropriate.
- use image size if < 150px - subclass for manipulated image uri possible
HBASE-16747 Track memstore data size and heap overhead separately.
"AtlasProperties refactoring stage 2:  - atlas properties storage is abstracted by interface - storage implementations now include db-backed, old-style properties file-backed and composition of the above - storages list is configured through beans context - EF ignore options split to separate methods"
Determine size of theming images and pass them to client Bug 284801: Pass image sizes to client https://bugs.eclipse.org/bugs/show_bug.cgi?id=284801
"Fixed size of pre-created input maps in MapPutAllTest. Split up timeStep methods instead of property ""usePutAll"" in MapPutAllTest."
traits = multiple inheritance
"Fixed bug that Container.compareStorageContainerCompatibility() is done by each instance of Container, for example CellContainer has to check if the cell size is the same."
Refactor some abstractions to make HadoopDomainCompactor locality optimization code cleaner.
restructure tests in domains-toolabstraction-maven
Use inheritance for preset classes like a good OOP boy should
[BZ 748483] Make dbsetup sequence id cache size configurable. Here the fallback size is the legacy value of 10 when unspecified.
"Changed MisoSceneModel so that it knows about the view width and height. It no longer stores base tiles that are not visable in the view, in fact it stores the base tiles in an array almost half the size as the fully expanded scene array, and this new smaller array is used everywhere: when saving the scene, serializing it to the user, or saving it in the database. We must now use the getBaseTile() and setBaseTile() methods to access the base tiles because they are stored in this compressed format. Also removed the fringe layer completely from the MisoSceneModel."
"Bug 244865 – Support for Step Into Selection First Implementation: * Non-stop as well as All-stop debugging * Function / Method name validation, arguments size validation (no arguments signature yet) * Ctrl-F5 as short key (consistent with JDT) * Hyper link support with Ctrl-Shift click * Junit Test (Services part) Change-Id: I58903b4b6b7f9fd39a827f5297ad23ac3f96186d Reviewed-on: https://git.eclipse.org/r/11305 Reviewed-by: Marc-Andre Laperle <marc-andre.laperle@ericsson.com> IP-Clean: Marc-Andre Laperle <marc-andre.laperle@ericsson.com> Tested-by: Marc-Andre Laperle <marc-andre.laperle@ericsson.com>"
"JBEHAVE-329: Reverted to Brian Repko's original implementation, as it give more fine-grained and extensible control of inheritance behaviour of array values."
Better encapsulation for AbstractClientSession.
Added datastore-api module for abstraction
0 snap size now works fine.
Migrate to updated DB structure to adhere to key size limits common to DBs
fix failing RecoverExpiredMessagesTest - remove duplicate ref to secedualler task in jdbc pa inheritance and fix persistence adapter ref in test
Store upgrade modifications to work with FileSystemAbstraction instead of File directly. Made some store upgrade tests use EphemeralFileSystemAbstraction for faster execution.
Refactored/simplified ExecuteSQLQueryAction * reduced LOC/Cyclomatic complexity * removed (undocumented) double retry handling * restructured code
Use delegation rather than inheritance to decouple JLine
SCRUM-742 - DefaultInheritanceContentDecorator uses the inheritance configuration from the area definition - ConfiguredInheritance allows turning inheritance off for nodes and properties separately and configuring comparator and predicate for inherited components
fixes to CQL filter composition
=+ Renamed length to size on hash ops
 - initial abstraction and construction of error estimating process
"enhanced the journal so that it supports using its underlying bytes object without any wrapping, or using the structs abstraction;  thus giving the option of extra speed vs simpler maintenance"
Allow modules to depend on Published components from other modules through the importModule() statement. Created a way to test composition scripts in modules without a physical module.
bug-fix inheritance role attribute setting
"improved element abstraction, updated pom"
TEZ-2234. Add API for statistics information - allow vertex managers to get output size per source vertex (bikas)
Support size based pagination for fixed layout reports.
Docs BeanManager lookup abstraction
NXP-14278: refactor to remove unneeded abstractions
"abstraction++ pas fini, mais je commit avant qu'on travail en double"
chore(engine): rename batch size to batch total jobs
"Complete project restructure in order to support multiple versions using Abstraction with maven, can now support multiple NMS versions from 1.8 and above. Support for 1.9.4 and 1.10 have been added previous versions will be added upon request. Release 0.15.0"
promoted the method up the inheritance chain.
o Added some more unit tests for all getRelationships methods premutations o Fixed bug in IntArray composing new array when size was 1 and that element    should be removed  
added an abstraction to control the pruning of a tree.
[ADD] WebDAV: added modification date and size for files and folders
"* com.vividsolutions.jump.workbench.ui.FontChooser 	* sample text i18n -> ui.FontChooser.sampletext 	* possibilty to set the font size in the dialog introduced 		* The GUI code was already present in jbinit(), but the components 		  was not finaly added to the dialog. 		* Added a new showDialog() and constructor with a flag for showing 		  the fontsize components or not."
Migrate complexity metric to Syntax Tree
more inheritance testing
add support to specify font size for blankblocktext
SONAR-1722: Rename ActiveRule.overrides to AcriveRule.overridden SONAR-2052: Support inheritance of quality profiles in backup of global configuration
"Gideon : Implemented a smarter way to do the matching of alternate nonterminals for soft syntactic constraint decoding. As it turns out, naive matching based on looping over all child non-terminals in a children table from the Trie, is just too expensive for reasonable size grammars. In fact the best would be split the Trie in two parts: one for children that are non-terminals and one for children that are terminals. This would be the most general solution. This is an expensive solution only in that is requires a thorough refactoring of the rule table code."
Sorts now by correlation coefficient and if it is equal by size of overlapping area
Class inheritance allowing GUI module to inherit command-line arguments from non-GUI application.
0.9c - Multiple inheritance fixed
even compressed latlon array does not help for german size osm
"Added NPathComplexity, ClassDataAbstractionCoupling, BooleanExpressionComplexity and ClassFanOutComplexity checks contributed by Simon Harris (requests 750757, 750758, 750760 and 750759). IsEqualsMethod() moved from CovariantEqualsCheck to ChecUtils."
[OPEN-HUDSON-6227] Allowing view path not to be the same as view tag Refactoring : include most cleartool commands under ClearTool abstraction. Removed most of specific implementations of ClearTool to centralize in CleartoolExec
"SAK-1910, warn if file size too big"
Fix path size for Windows build...
Polymorphism pushed all the way into the keys.
OPS: eliminate some unnecessary inheritance
SCRUM-661 - added constraint on only inheriting area nodes - inheritance is now by default disabled
Remove the Value abstraction in the request
ISPN-1980 Distributed Queries problem when results size could be greater than HsQuery.maxResults
"[MOD] XQuery, limit size of debugging output."
Bug 103863 - Support encapsulation in SWT layout mechanism
Allow NIOFileHandle's buffer size to be passed through from RAIS
[CXF-3879] Allow controlling the maximum size of incoming attachments. Patch from Sam Meder applied.
Use the Property abstraction in the implementation of get/set property.
fixed media size json fixed user list crashes media timeline supports load more
CLOUDSTACK-8121. Data disk properties are not updated upon Creation/Deletion of VM snapshots. Update the path and size of data volumes after snapshot creation/deletion by correctly trimming only the snapshot postfix of a disk.
refined size constraints for pruning of similarity candidate pairs
"minidmx updates, make output size configurable"
"XWIKI-9309: Also search in attachments when type is DOCUMENT * Index attachment author, date and size * Make sure we can sort attachment results by file name, author, date and size * Duplicate attachment data on document index rows (using multiValued fields, so the relation between various attachment meta data is lost -- we won't know that a file size corresponds to a file name) * Add media type, author, date and size facets for attachments. * Refactor (and improve) DocumentSolrMetadataExtractorTest"
Allow existing bolt/spouts to receive signals (without inheritance) Align with storm 0.7.4
ISPN-2287 Introduce DistributedTask abstraction enhancement for distributed executors
"added tests for ""graded"" complexity reports"
Add inheritance to project dashboard loading.
add QRDecomposition interface
"Add size(Object) method to find the size of various collection-like objects bug 27909, from Steven Melzer"
"removed mult and add value functions and created a single function called op-value. this function takes an operator like +, -, *, div, mod and operates on hte values of a list, element, or map. also, added a very useful function called ctx-count() which returns the size of the current path context --- very good for modulating operations by that size. Added test cases and updated the documentation appropriately. The rest of today will be doing the add/remove vertices/edges documentation and cleaning up text here and there. Plan for a 0.1-alpha release on Christmas."
[CXF-5902] Set default IV size in to the typical block size in bits
fixes based on Sonar reports added more inheritance related tests
inheritance bug (try 3)
Cleaned most of the checkstyle errors on complexity but this thing definitely needs to be rewritten
reading size improved
Config / impl decoupling cont'd
Change package composition.
Huge decomposition of all web services bot tests
 * FIX: cache size stat name
It was added changed in the model -> association classes refactorized -> includes new associations in the model -> it has an inheritance from IResourceModel 
"Tweak, batch size control on command-line"
"Several improvements to new indel genotyper (more to come soon): a) Turns out previous change of centering haplotype around indel was a bad idea. Context to the left of indel is important but not as important as right one, because by definition all alleles start at the same location, so haplotype is the same to the left of indel regardless of allele. So, go back to having a constant size window to the left of event. b) Expand reference context so we can test larger haplotypes. c) Optimize computation of read likelihoods by doing them in linear array instead of in a matrix - no difference in biallelic sites but could be significantly faster in multiallelic sites. d) Bug fix: read alignment wasn't being computed correctly if, a) we were at an insertion, b) read started right at the insertion, c) read CIGAR didn't include insertion - more of these corner conditions are lurking, so a revamped computation of how reads align to candidate haplotypes is in the works. e) Add debug option not to use prior haplotype likelihoods. f) Don't hard-code NA12878 for genotyping, now sample name is a required input argument. g) Bug fix: if there are no reads covering a candidate indel event, just output NO_CALL (didn't notice this in HiSeq, but in P1 data it happens all the time). I need to add a confidence threshold for calling later on."
Use new transaction abstraction from ToHUtils. Some command refactoring.
"Updated Grammar for matching JsonArray to be left-associative rather than right-associative. Gson can now parse arrays of size over 11MB instead of 80KB which was the prior limit. Thanks for the tip, kenotron."
More work on abstraction
[MECLIPSE-501] Made project configuration/import more robust by decoupling from plugin resolution
More work on Look & Feel and maximum heap size support.
Made reactor pool size configurable per memcachedclient object to set different pool size per client object
create ThresholdGroup abstraction to make configuration more clear -- reviewed by mhuot
Support Junit4 in MifosMockStrutsTestCase: remove extend and use composition
ISPN-1889 Use a ConcurrentMapFactory abstraction when constructing concurrent maps
Fixed an issue that prevented the HA management bean from being loaded. Fidex an issue that prevented the discovery of how to connect to the management beans of an instance in a HA cluster. Added an abstraction for running test services in a sub process.
reworked  design of dagger modules to eliminate module inheritance
Refactored the bootstrapper to use a proper Model and inheritance/dependency chains so repositories defined in models are used for metadata too. Previously they got lost because of all the cloning.
Control: Internal frames start now at maximum size and they resize with MainGui (as long as their size is not restored). Solves the problem that the tool could not be used at half screen size.  
Fix scope inheritance
"Eliminated views of location, size and bounds. They would be crazy expensive to keep up to date for shapes like Path and they're probably not that useful. Added instead methods to obtain said values by copying the data into a supplied object, which allows the caller to avoid garbage generation when desired. Also finished up quad and cubic curves."
"[CXF-5309] Updating the system test to test the annotation inheritance, pacth from Andriy Redko applied"
"file size tracking backported from 3.0, checksum verification re-enabled #7457"
RESOLVED - bug 275722: [rest] REST abstraction for ECF https://bugs.eclipse.org/bugs/show_bug.cgi?id=275722
"Add AbstractOutStream as the abstraction of FileOutStream, so we could simply code of payload writer in common"
"Create ""doc"" package for classes related to in-memory document model. Move old implementations of doc classes out of util and json packages into doc package. Drop unnecessary and/or experimental methods from these classes. Refactor Whence interface to use new document abstractions."
Simplify ajax call composition.
"Introduce 'Volume' as abstraction over raw storage (file, memory, disk partition). This introduces flexibility on low level storage level."
Make all navigation into drop down menus on mobile - better use of space and fewer screen size issues
Making query result size precheck less strict. (#9164)
Move filesystem abstraction from server to common
Added annotations for AminoAcidComposition.java and Element.java. Simplified MolecularWeight.xml and ElementMass.xml.
Removed complexity.
param size et max
"Colours, price, sale sorted. Size not incorporated for skus as loads following selection of colour"
"Moved Filter management components to new 'mgt' package to cleanly distinguish between frequently-accessed end-user filter support classes and those for framework development.  Refactored IniWebConfiguration to use the new components, utilizing a cleaner 'composition over inheritance' implementation strategy.   Cleaned up various JavaDoc."
Add title panel to ToolbarDocStation. This panel will contain DockTitles. Correction of layout management so that : 1. Toolbars have always mimimal size to display inside components 2. Panel insets are take into account 3. Correction of several alignment and resize bugs
Will use composition...
move old composition stuff away
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
"Lag detection in seperate thread, bugfix for blockbreak direction check and code refactoring to reduce complexity"
Splitted AbstractReplicatedRecordStore to multiple classes for better encapsulation of the different concerns
enable fluent assertions on size of Maps (as suggested in https://github.com/joel-costigliola/assertj-assertions-generator/issues/67)
.probleme file size error after SOAP Attachment invoke
Added variable evolutionary step size to improve annealing evaluation in each step.
merged the decomposition package back to the linear package. This will allow later improvements as decomposition algorithms will be able to see implementation details when more efficient matrices implementations (for example based on blas) are added
Reimplement the function composition operator 'o' due to several problems of the previous implementation
Update Integer size issue + Add Long
[added] Sprite setSize. [changed] Squeezed 2 fps out of ParticleEmitter. [changed] Added TwlRenderer method for when the screen size changes.
"More factoring, focusing behavior and working on cohesion."
added an extra level of inheritance for testing jaxrs
Implemented SONARPLUGINS-1351: Use jdepend compatible report for storing metrics generated with PHP Depend - saving complexity metrics from summary xml report
Coloc 2: Handle mask offset and size expansion in separate methods
"DATACMNS-251 - Introduced generic abstraction to determine ""is new"" state of entities."
Improved file driver with greater encapsulation. Updated GUI XML driaver. Addedn and used recursive filename matching.
RESOLVED - bug 265410: [Discovery] Reorder test inheritance to fix setUp/tearDown bugs https://bugs.eclipse.org/bugs/show_bug.cgi?id=265410
another abstraction in ReadInput to help readablility
OpenShift abstraction improved and minor test stabilization
"Part way through adding polymorphism, trying to have ItemManager handle all item types"
cleaned up inheritance hierarchy of Proxies. all ProxyPushSuppliers have a common baseclass now.
refactor batch chunk size handling code
72136 Correct the algorithm to calculate transitent document size in javaserver side
added an InstallTask abstraction so we can use it to resolve profiles / bundles or copy/change files from inside a profile
Reduced NPath Complexity of HostAdressPicker (CheckStyle issue).
HIVE-16392 : Remove hive.warehouse.subdir.inherit.perms and all permissions inheritance logic (Sahil Takiar via Ashutosh Chauhan)
Move shell abstraction into scan service package where it is used
"Analyse - Decomposition View: Extended with a Statistics panel, which shows the numbers ofpackages, classes and lines of code; for Java and C#. Lines of code is the full number of lines, including blanc lines and comments."
"I hate Java. I hate everything about the Java ecosystem. I have moved this project to Maven with no small amount of difficutly. Honestly most of the pom.xml file is just magic to me. I understand parts , but like most things in java I have no idea how its doing most of what its doing. Its a large cryptic XML document with very little human readable meaning. I mean Makefiles were considered arcaic, however you can find a dozen or so simple introductions on how to construct a Makefile that doesn't depend on magic to build your project. Not so with Maven. The only official Documentation is a 100+ line document that has no coorliation to what is actually happening to build your file. Take for example the fact that i know have a whole target folder that has lots of stuff in it. At no place in my pom.xml did I say create a target folder, nor did I say run javac. The closest I came to either of those was set my ""source"" tag to 1.5 ( I only knew to do this because Bukkit does it ). Furthermore the comand to compile the project into a jar ( again no mention of a jar file in the pom.xml ) is to issue a mvn install command. That clearly makes sense. mvn build anyone mvn package, nope mvn install. Its like java heads have a fetish for complexity."
InternalLockService Extracted. Classes should not depend on final impl classes as it creates tight coupling and makes testing hard.
[#LIB-15] Support Device Extensions by composition alternatively to inheritance
cell size becomes 1x1
CAY-2242 Vertical Inheritance: Cannot Insert Record With Multiple Flattened Relationships
Bug 103863 - Support encapsulation in SWT layout mechanism
Block inheritance by default on per-branch permissions.
refactoring methods to reduce complexity
#JC-388 AvatarControlller: added unit tests for general error and invalid image size cases.
Added JMX support for introspecting the on-disk size of the store files. Also changed the name of the management package.
DATADOC-63 - Added TypeMapper abstraction to customize how type information is written to a DBObject and retrieved from it.
"Multiple categories on tests, category inheritance, production classes in production package."
Coupling between object
Restoring logics without size fields caching
WAL max size limit was restored. Free space detection bug was fixed. (cherry picked from commit b23efd9)
Added support for hierarchical model inheritance.
Final modifications to implement new event model that eliminates many couplings.
Improved Attributes Management using Composition instead of Inheritance
"[#3481] Help link on the bottom of the page not working [#3527] Lazy init exception when viewing Cherry Pick Request [#3520] Show compound name column in the study annotation viewer [#3528] Add a total Lab Cherry Picks column to the CherryPickRequestSearchResults [#3529] Server crash on export of library images to xls format [#3511] ""Medicinal Chemist User"" Facility Usage Role should be changed to ""Medicinal Chemistry User"" [#3531] Facility User Role ""QPRC User"" is incorrect [#3510] Increase the size of the confidentiality notice on the login page [#3478] Modifications for #3478 - PropertyPathDataFetcher based Search results sort null values higher than non-null values (in PostgreSQL)"
Remove User/Item abstractions. Preference values are now floats. Lots of API changes to reflect and rationalize these changes. Replace Preference[] with PreferenceArray implementations for memory efficiency.
"Started refactoring Media Channels by decoupling RTP, RTCP, ICE and DTLS components from the RTP Connection"
fix eomodeler sql gen bugs for: when you only select a single single table inheritance entity (bring in the parents and children) drop tables produces multiple entries for single table inheritance allows null is set for single table inheritance attributes that aren't inherited 
Use the 'Source' abstraction in the Parser
"#589 - ElasticSearch, Transaction - rename DocStoreMode and batch size methods"
"EST-838: new index module, decoupling Indexable from Lease"
work on composition for indexing
1.9-RC update Fixes issue 313.    - Map max size not enforced.
The FieldsetPanels option and page size are now created by AbstractListForm.
"JSP refactoring (backlog.jsp, project.jsp) A visual indication on the backlog of which features are ""must haves"" Rename the ""Stop"" feature to be ""Blocked"" Headings for size and importance columns on backlog Notes with quotation marks are not displayed correctly A column without WIP limits should mouse over with no WIP limit not WIP limit: -1"
make static methods to attempt to decouple inheritance
"COMMONS-219 : fix bug, size image etc"
reducing the test set size 10x for speed
2644350 - Patch fixes two bugs; Map behaviour with inheritance; Considering full interface-superclass hierarchy instead of direct interfaces;
improved programs for getting size of read bytes
"Add cache folder to InFileObjetPersisters. Customizable, tests and inheritance. Issue #103 and issue #98."
DB abstraction; Added ConversionService approach; Corrected unit tests
Changes to use the Datasource Abstraction libraries and to move Content Specs to their own database tables.
[ISPN-59] (Add unit test that verifies number of written bytes) Implemented more efficient marshalling framework based on JBoss Marshaller where size of payloads are reduced and faster code path is used.
HBASE-15787 Change the flush related heuristics to work with offheap size configured (Ram)
Refactor code for better cohesion
Fixed bug 1055930 - CouplingBetweenObjectsRule no longer throws a NPE on interfaces
Bugfixes and more Bukkit abstraction
TEZ-558. Optionally send broadcast output in the DataMovementEvent if the size of the data is small. (sseth)
Short the length of the field_type in order to reduce the size of the document.
fixes #4568. Nearcache eviction will run again if cache size is not below under max size in first run.
Full support for X_Elemental injection of HtmlTemplate inheritance. 
"Create abstraction for definition references so it can be used by both ComponentDefRef and ModuleDefRef. (DefinitionReferenceImpl, BaseDefRefHandler)"
ROO-1251: Method naming conventions provided by Json addon need to be adjusted to take inheritance relationships into account
fixed bug 201861 loop in inheritance caused stack overflow.
abstraction
Reduced coupling by extracting an interface from the StateFlowGraph
CDITCK-390 - Extend InterceptorBindingInheritanceTest
Reverted to relying on ParseProgressMonitor for maintaining initial chunk counts.  Reduced read chunk size to 2M to reduce likelihood of blowing out chunk size due to decompression.
HBASE-5746 HFileDataBlockEncoderImpl uses wrong header size when reading HFiles with no checksums (0.96)
"Fixed size calculation bug in LongerShortString, test to match Work around a similar bug in ShortArray, needs more work Fixed size calculation bug in WriteTransaction determining PropertyRecord suitability for changed property, test to match Assertions for certain sensitive paths in PropertyBlock/Record Some more tests Minor formatting changes"
added function for getting last message size named getLastMessageSize in MessagePackUnpacker class
Code review tweaks: Event inheritance-based triggering protected over private Renamed and repackaged event related classes Comments
increasing default index page size to 100; default counter page size to 1000
Validate/Define: One InheritanceConvention rule instead of two. Conversion included in 'open workspace process' from old workspaces to new format.
Cleaned up abstraction.
introduction of relative_v0_randomization attribute in TRAFFIC_COMPOSITION for distributing the desired speed randomly. CAs are casted to integer. 
core: AddDiskCommandTest storage domain size mocking
Fixed size update problem in Controls Demo TextSizeTab.
rename for JSFApiAbstraction to JsfApiAbstraction for consistency
inheritance for make life easier during navigation tests
reducing complexity by refactoring
Refactored service integration tests to use inheritance. (v1 TK-09243)
Abstraction and work on new data sourcing.
"HADOOP-11296. Nfs3FileAttributes should not change the values of rdev, nlink and size in the constructor. Contributed by Brandon Li."
Double Inventory Access From Chests Native Double Inventory Class Fixed Packet Size Calculations More Widget Changes Latest MCP HD Texture Support for MCP
Added additional model abstraction to allow a progress button's task to be exchanged during runtime.
"Implemented between in LuceneSerializer. Fixed phrase queries (like query ""foo bar"" is transformed to ""+*foo* +*bar*"", this is as close as I could get result-wise). Improved LuceneSerialize encapsulation by splitting into methods. Updated tests in SimpleTest."
Inline method for decoupling. Not used anywhere else yet.
JCLOUDS-458: Added Blobstore Abstraction
Small changes around composition over inheritance.
=+image Sharing !Fix anchor size bug with zoom
=+ Renamed length to size on list contract
=-test case improved -some refactoring for MarkupInheritanceExample
[PLAT-2500] Dynamic composition of market data providers
* make size cachable * set size-cache to false * add tests with caching size
"CLOUDSTACK-6740: Direct agent command throttling improvements List of changes: 1. Created a separate thread pool for handling cron and ping tasks. The size of the pool is based on direct.agent.pool.size. The existing direct agent pool will run all commands other than cron and ping. 2. For normal tasks (generated as part of user/admin API calls), if throttle limit is reached then tasks get queued up for subsequent execution once threads are available. 3. For cron and ping tasks (internally generated by MS like ping, VM sync etc.), if throttle limit is reached then these gets rejected. Since these are internally generated these can be rejected without any issues."
Class side inheritance by explicitly copying inherited members. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69661887
First version of inheritance in translations classes generated
"Modified the ""event"" abstraction. There are now three pre-defined types of events: domain events, application events and system events. Event listeners deal with all three, aggregates only with domain events."
major refactor of nearly all plugins. inheritance broken out and replaced with composition. NAryOperation is no longer a plugin but just a helper class.
"Tune the heuristic that stops optimization loops based on a size threshold, so it can fire more often. Speeds up optimized builds up to 11%, with code size increase up to 0.14%."
Set localWorkSize to provided work size from opencl Added stats output warmup period
worked on mssql dialect refactored Template usage in SerializerBase added inheritance tests
refactored html element hierarchy and make some abstraction
"- Fixed issue 549   https://jersey.dev.java.net/issues/show_bug.cgi?id=549   Implicit HEAD method support was not re-using any resource method-specific   filters on the GET method from which the HEAD method was derived from. - Fixed issue 547   https://jersey.dev.java.net/issues/show_bug.cgi?id=547   The GZIPContentEncodingFilter works correctly with the Client API and   HttpURLConnection when a request entity is sent for which the size is known   in advance, for example a File or byte[]. - Fixed issue 506   https://jersey.dev.java.net/issues/show_bug.cgi?id=506   Fixed regression. Servlet url patterns of the form         <url-pattern>*.xxx</url-pattern>   now function as was the case for Jersey 1.0.3.1."
"[#2212] ""code size too large"" in generated SchemaImpl, when the number of tables exceeds 15k - Regenerated H2 schema"
"created array class object on heap has 4 bytes for class location, 4 bytes for size (if it is an array) and then 5 bytes for each field each value on stack / heap has 5 bytes, 4 bytes are for integer, last byte is to identify pointer (1) or int (0)"
Issue #1728 Request Queue Size via REST
Add javadoc to Torpedo and decoupling functions methods from Torpedo
"Some test edits for release notes, but especially experimenting with MaxComputerTest: can MaxCore be written in terms of the Computer abstraction?"
Began initial 'composition over inheritance' support for configuration.  None of the additions are used in existing code yet - they are there as placeholders only at the moment to be used later when refactoring existing components (e.g. IniWebConfiguration)
Set the size for Icons.Loader ImageLayer's.
bobo-contrib:  Allow for a max Index Size on geo only index
HBASE-11527 Cluster free memory limit check should consider L2 block cache size also when L2 cache is onheap. (Anoop)
"Changed the instance Size to support floating-point type of # of cores (ex, 6.5 cores). Propogated the change to template builder and related ComputeService usages."
"SAK-8884 Added created-by, creation-time, modified-by, modification-time, access-url, size and mime-type to revise-properties dialog. Added subheads in properties template. Added mimetype audio/mpg to image service.  "
Track AST size in PerformanceTracker.
Changed names from VLAN to Encapsulation
"pass through mapping, clean ups, size calculation"
reworking injection point composition
added SQL expression handling methids as simple sql strings are not good enough when using inheritance.
135: Add functionality to filter out variants that are incompatible with inheritance 
TEIID-500 adding support for insert into a virtual table with a query expression.  this implementation should be simplified to use make insert planning rather than select into as the dominant abstraction.
SONAR-6017 Add query and page size fields to issues tags search (for manual selection)
Convert to a fixed size FIFO cache to avoid potential DDOS situations when running in a common infrastructure.
Refactor SVD decomposition results
Remove User/Item abstractions. Preference values are now floats. Lots of API changes to reflect and rationalize these changes. Replace Preference[] with PreferenceArray implementations for memory efficiency.
ISPN-2018 Provide a per-type buffer size predictor
pushing these methods up in the inheritance hierarchy to make logs accessible for all Computer derived classes.
core: CommonVmPoolCommandTestAbstract size mocking
jcache Max size test
RosterGroup abstraction. Better group handling: roster group events
ROO-3831 Fixed composition relationship handle
Reduced complexity in MazeGen. Added documentation in MazeGen.
Conslidated inheritance checking
Bug 137315 - [Dialogs] Doubleclickable area to restore dialog size is often very small
RTFACT-1544 - DB size growth when unique snapshots enabled Trying XPath query and threshold did not work :(
Add min segments size for locations
fixes #4568. Nearcache eviction will run again if cache size is not below under max size in first run.
SONARPHP-613 Improve ClassCouplingCheck
"Eliminated AbstractConnection by inlining it into TransportConnection.  The synchronization complexity between the two was making my head spin.  Now that they are consolidated, we can try to simply them a little more."
expose maximum 1st level cache size in ImageLoader
CAY-741 Indexing entities with inheritance across datamaps
Trac #99: Use new interface ILinkable as abstraction for items that can be linked to.
"cleaned up the Analytics Tab, steps are now in their own external files, instead of internal classes; better decomposition"
Fixed bug on change file size reported by Anton.
Refactored SingularValueDecomposition to match up with the rest of the package.
tweaking abstractions and the API surface
"revised cache abstraction - removed AbstractDelegatingCache (a cache is not a map, no need to offer a template) + renamed ConcurrentCache to ConcurrentCacheMap"
"Instead of computing explicit inverse, use a ""solver"" pattern. It's mathematically equivalent but may be faster and more accurate in the context of a QR decomposition."
"The total number of users in a group counts users that are in several subgroups only once. This count is now centralized into one method Admin#getAllSubUsersNumber(groupId) that invokes the GroupManager#groupManager.getTotalUserCountInGroup(domainId, groupId) method when the groupId is specified (otherwise it invokes the UserManager#getUserNumber(domainDriverManager) method). In the case only some users whose the account isn't in a given state must be taken into account, the method Admin#searchUsers(UserDetailsSearchCriteria) should be used instead. The groups that are returned by Admin#searchGroups(GroupsSearchCriteria) take already into account of this contrain for the total users number. In the other side, the number of direct users in a group is directly computed from the size of the users in the group (the users are set by GroupManager when returning one or more groups groupId), there is no need to expose anymore methods to set this number of users; the call is now performed by invoking directly Group#getNbUsers()."
Make materialized collections use the size of the materialized file in determining how many reducers to use
Cache value size slightly faster on many core machines
"Refactored configuration system to support a new WindupConfigurationLoader abstraction. This allows extensions to provide their own WindupConfigurationLoader. Currently there are two of these, JavaWindupConfigurationProviderLoader and GroovyWindupConfigurationProviderLoader."
XWIKI-5171: Problem resizing images in wysiwyg mode only with IE7 * Apply image changes directly on the edited image. * Select the edited image with priority over the previous selected image in the image selector wizard step. * Remove styles associated with previous alignment when changing image alignment. * Change image size read priority: style attribute > width/height attribute > width/height property. * Add vertical-align CSS property to Style class.
Bug 221087 - [ui] Size dialog seems to create a new plan
renamed example class Table to BasicTable. added new exception HomMissingEntityAnnotationException. validateSingleTableInheritance fixed for base class as abstract. brought example classes in line with latest code
Moved import and export functionality from abstraction layer/package to task layer/package
Major refactoring on Cache. Use inheritance rather than wrappers.
a new version of kamekaze with updated PForDeltaWithBase(PForDelta core) and PForDeltaDocIdSet (compression of a list) and PForDeltaAndDocIdSet(DAAT) The speed is faster and the compressed size is smaller especially when the lists are long. More tests are needed.
get rid of A before abstraction.. not very useful and most of the time used for Abstract classes
Refactored DOMHelper class to reduce complexity
created top-level 'mgt' package for SecurityManager interface and implementations; moved Properties realm to a 'text' subpackage and created intermediate parent class for cleaner abstraction
jetty-9 work in progress.  developing ServerConnection abstraction
MIFOS-4305: remove savings and configuration module and create appdomain module in prep for decoupling application module
"cleanup in metadata project, shortend various class names and made use of property reference, resulting in better encapsulation and cleaner interfaces"
"SHIRO-395: Consolidated Publisher and SubscriberRegistry interfaces into a single EventBus interface.  The separate interfaces were causing a lot of unnecessary complexity if you had a component that need to both publish and subscribe.  The new EventBus interface more easily/cleanly satisfies 3 usage scenarios in a single component (publish, subscribe and publish+subscribe).  All related test cases have 100% class, method and line coverage."
Add support for class inheritance to the annotation SPI (#125)
Allow to access the payload size of the StreamSourceFrameChannel when possible. Also rearrange constructur args to make more sense
HIVE-12309 : TableScan should colStats when available for better data size estimate (Ashutosh Chauhan via Prasanth J)
added a Bytes abstraction that works for both byte arrays and memory that is offheap
"New SecurityAccess, replace and improve AccessLevel to support many more rights (up to 64). Improved AuthorizationSettler to better support implied rights, tie resolution and inheritance override policies. Clean the cache when a new Right is registered to prevent corrupted cache situation. Retrieve group using references, skipping the need for resolution. Still not support local group in multiwiki."
smaller save file size thanks to some kryo classes to efficiently write primitives
"Distinguished between clazz inheritance, interface inheritance, and interface implementation. Good refactoring in TypeDependencyExtractor class. Added first unit test for type dependencies. Writing other tests should be easy now"
"Optimize inheritance resolution. Add option for ""opaque inheritance"": true = old behavior, which is the default."
ARQ-2128 Window size is set only when dimensions are defined
HV-755 Creating subpackages for tests and adding a new test for inheritance
Ticket #2917 - made default page size (i.e. the number of genes returned per page) consistent across web and api queries. Corrected API docs accordingly.
  - Add a secondary key to the sort order used when looking for compatible      MessageBodyWriters such that writers whose declared generic type is closer      in terms of inheritance are sorted earlier than those whose declared generic      type is further.
OPENEJB-1887 ServiceProvider inheritance
"Change class inheritance, add serialVersionUID, improve default constructors."
lowered complexity and added todo
Ticket #8: Implement a logging interceptor for incoming JMS messages  * Upgraded to snapshot version of JBoss AS 6.0: Fixes problem with @EJB annotation not working in many situations.  * Started implementing own minimal message processing and routing framework to get rid of the complexity introduced by Camel. Further work on this framework has been put on hold for the time being since by now Camel works just fine.  * Finished implementing Camel message processors for intercepting all incoming JMS messages and logging them to the database.
Moved Clean to the new Schema abstraction
- Expanding ByteArrayDataOutputStream more conservatively (https://issues.jboss.org/browse/JGRP-2124) - Changed Address.size() -> serializedSize() (extending SizeStreamable) - ByteArrayDataOutputStream has not the correct size for all SizeStreamable classes
Reduce coupling between server controller and registrations. only the handler must know about registrations. + code cleanup
Concept of successor / predecessor report items added - this eases the complexity of report item mapping and solves #73
"Added more to the abstraction layer, finishing up events."
ISPN-7066 Drop default cache inheritance
Added abstraction to create desktopPane (part of SwingDocking patch: RCP-561)
Make the interpreter display type and size of an evaluation's result. Leverage this possibility for the Acceleo language interpreter.
Move blowup of CompositionTimeToSample.Entry to CompositionTimeToSample
reducing the size of a Jelly
"Revert ""Inner, outer, dot vector product changes. Eigendecomposition failure test case."""
* Added logic to auto select replacement effects. Some changes to counter size and font size handling.
Move bidiagonal decomposition into decompose namespace
Define max size for all caches
[LOG4J2-1740] Rework scheduler for less encapsulation hacks.
reduced size and refactored of countContentSize method.
=- Ability to specify payload size - Better reuse in report generators
Include types specified during inheritance into map of types
ability of setting file size limit
JCLOUDS-951: Remove inheritance in ProfitBrick's AutoValue classes
Fix indexes for physical size population
make download queue persistent introduce size and checksum for downloaded artifacts enabling resume split up into one datasources.xml per datasource introduce 4 KB default buffer size for copying
Changed org.fcrepo.exceptionhandlers to org.fcrepo.exception and altered inheritance of InvalidChecksumException
- refactored document requests code to better reflect inheritance - finished diploma request object implementation (only payment event creation missing) - removed 'notes' field from document request create bean (this field was not being persisted)
Better encapsulation of UI framework elements.
refactored to move logic to nodes rather than startegies as I'd introduced an unecessary abstraction layer.
"Key generator is now a fixed size pool. Defined serialized key generator, that is all you need to define a wallet in a single QR code."
Complexity reducement
split runtime from the core to reduce the dependency size when I don't use compiler at runtime
ModulesMetadataService for component metadata abstraction (#1914)
Remove CacheInvoker abstraction.
wfs datastore package reorganization towards higher cohesion
refactoring and fleshing out intravm connection abstraction
"[feature] Command Line (no profile) Identification of OLE2 and other containers, cleanup and abstractions (work in progress...)"
Fix cache size calculation.
"Bug 245839 [Regression] The chart view of the column area grand total is not in line with the row in Web Viewer [1302] Caused by padding size issue in IE. Fixed by setting 0 padding not only to level cell, but also to measure cell and total cells, so that chart can be align with all cells. Users should re-create chart in xtab to set 0 padding for correct result in IE."
"Move most hierarchy handling into PermissionEntity, reduce a ton of code duplication (and provide better circular inheritance handling)"
Improve documentation of future composition
AuthStore abstraction over users
JCLOUDS-275: Renamed the getter/setter methods for the HD size limits to remove the reference to the Mb storage unit
Further destination abstractions to support Immutant.
"Refactoring, and an initial version of a clean Epoch abstraction, including size deltas."
Decoupling Definitions from Thirft.
"JC: More code re-arrangment. There were problems dealing with data that only represented a single patch. Added special-case handling. Also, a lot of extra checking of the data is now being done to make sure it is the right size and shifted common constructor code into a separate init() method)"
Adding in a small provider framework which adds a little bit more abstraction to the backend wiring code and makes it easier to tweak how the backend is bootstrapped if desired.
Fix bugs in phenome overview.  Sort p-values automatically data points in charts links to individual charts Size of bar charts has been increased on release page
"JS-133: The last change was entirely non-performant by at least 10x on android. In progress and web resource, changed back to int for sizes rather than long. This gives a file size limit of 2G which is vastly larger than what our current modules are. Changed Job to only notify listeners when the percentage changes."
"Add support for ""graded"" complexity reports"
"archive-commons: Lots of work on ZipNumCluster. Switching to SeekableLineReader from Stream as the abstraction layer. The ZipNumStreamingLoader loads one block at a time, by using new SeekableLineReader.seekWithMaxRead() which allows the subsequen readLine() calls to read up to a limit (using LimitInputStream for File IO, and a *bounded* http range request for HTTP) Also support for gzip wrapping -- this effective implements the functionality of ziplines block loaders w/o"
Refactoring out complexity
"Bug 264042 - [ui] Persist wizard size for ""Install new software..."""
Fix quality flaw: use constant and reduce complexity
Added a optional size argument on the third line. Format WxH ex: 2x3 or W&H ex: 1 Changed Detection Methods
New abstract operations added. OperationContainer is removed. Everything is now included in the AbstractOperation class. So there is more control over the operation and an abstraction layer less. 
Preview: used node label size factor to determine the effective size of a preview node label.
Feature #5616 - improving WYSIWYG image size management: - refactoring the WysiwygContentTransformer to get more flexibility - taking into account the missed cases - taking into account an impact on the mail content transformation - fixing problems of transforming image URL with wrong sizes - improving the performances - adding a new useful and amazing tool: StringDataExtractor - adding a new processor for SilverpeasFile in order to handle Attachment Url Link - moving the Attachment URL processing from the save to the load operation
SONAR-1845: Create a new Sonar rule to check method complexity
Fixed the lookup to walk up the complete inheritance hierarchy first before going to the parent
"further tests and fixes related to failover, this time transactions and topics. prefetch and maxPageSize are relevant in the transacted. With redeliveries the prefetch needs to be less than half the transaction size and the maxPageSize needs to exceed the transaction span. more tests in AMQ-2149|https://issues.apache.org/activemq/browse/AMQ-2149 and some amendments to the fixes for that issue"
"Issue 183: Adds support for detecting multiple barcodes, and simplifies ResultPoint abstraction"
setInheritanceSpec() to getInheritanceSpec()
Fixed bug where application in stop mode remains stopped even when started later. Refactored non-persisted deployment configuration into separate abstraction. Added missing console output when pushing application.
[#LIB-15] Support Device Extensions by composition alternatively to inheritance
XWIKI-1324 Implement space rights inheritance with a setting in xwiki.cfg
[DROOLS-64] Traits do not comply with type inheritance on modify
factor out common save method and introduce DAO inheritance for statistics DAOs
"ARQ-1972 Add mimetypes, header buffer size & realm configuration"
XWIKI-5454: ImagePlugin size reduction improvements * Applied patch from Ludovic with a few changes * Refactored the image plugin and applied code style ** Replace most of the deprecated calls ** Detect the supported mime types at runtime ** Separate the code that processes the images (the code that uses awt and imageio)
Breakdown logic to several method to meets the metrics of McCabe Cyclomatic Complexity
"Moved unused code to limbo. Upgraded support-tools: checkstyle, pmd and findbugs to most recent. Addressed over 100 issues reported by findbugs and checkstyle. Resulted in major refactoring of GBFFilter. Net result is that code size is significantly smaller."
https://issues.apache.org/jira/browse/AMQ-498 - make max frame size part of wire format negotiation
Supported polymorphism in iterators.
Improve queue size limit tests
"[Bug 756100 - RFE: use timestamp and file size during drift detection scans] Worked in review feedback. - consolidated removed and cantRead entry logic - fixed up some comments - clear collections after they are used to possibly help out gc Decided to still keep around the ""bucket"" collections and assemble the snapshot and delta entry lists using the buckets. It just seemed more clear to me."
extracted common code of aspects better composition tracing (not finished yet!) version 0.0.3 now
Modeled composition roles between interaction units
setters for max message size in client factory
"Added Stemmer for Porter stemming algorithm, added settings class, added word cloud font size calculation function"
Allow SegmentMetadataQuery to skip cardinality and size calculations
"* Refactored apache client out of com.heroku.api.command. Apache client is used primarily in BasicAuthConnectionProvider and BasicAuthConnection as a transport mechanism. Connections are the primary abstraction that contain a transport. If need be, the transport can be decoupledif we need the flexibility. For now, we only have one implementation of a connection and don't need the decoupling. * Reorganized code into more appropriate packages.   * Using com.heroku.api.http http related information (e.g. headers). This is not intended for transport -- use connection, or some other package, for transports.   * Using com.heroku.api.exception for any custom exceptions.   * Using com.heroku.api.util for utilities * Made CommandConfig immutable * Added a static method in HttpUtil for encoding name=value parameters in HTTP requests. It's currently used in Command implementations. * Added HttpHeader, which should be used by Command implementations for providing header information."
Regenerated the low level bindings with latest JNAerator : now using Size class instead of NativeLong for size_t (for issue #8)
"http://bugs.sakaiproject.org/jira/browse/EVALSYS-689 Very tricky change in the copying code which actually improves efficiency by reducing the number of DB operations but increasing the code complexity, this will keep extra things from being created during template copies"
More fixes for #340838 (Update ConnectHandler to perform half closes properly): reverted inheritance from AbstractConnection and writing buffered data before shutting down output.
Decomposition and moving RESTful-like bot tests + template of new RESTful-like bot test added
"Reformatting and renaming, addressing a few items raised by static analysis.  Also avoid creating and immediate resizing of EWAHCompressedBitmap on construction if size is known."
Analyse Reconstruct: Reuse improved within inheritance structure. Scanniello improved: it won't create only one layer.
Another attempt at resolving issues with circular inheritance
Moved responsibility for panel creation & composition away from Workbench and into PanelManager
Updated model to reduce complexity
Cleaning up the inheritance hierarchy from the previous commit.
"DRILL-336: Modified the netty direct memory manager to:    1) Efficiently reduce (""trim"") the size of a memory buffer, releasing the extra memory back to the memory manager.    2) Opportunistically allocate larger buffers if it can be done efficiently.    3) Raise a warning exception if resizing a buffer copies more than 1 page of data.    4) Added Javadocs and some in-code comments.    5) Created a Junit test to verify basic functionality."
"RUBY-5 Added ParticipantCode parser and unit tests, Modified the other fixed size barcode parsers"
Enhance decoupling and simplification of mapping between Service Qualifier and concrete class for service
fix column size reporting
Refactoring media channel setup for inbound calls. Reducing code complexity.
big refactoring for abstraction to support ant and maven
"Updated pom.xml removing last snapshot, improved scaffolding abstraction (still major work in progress)"
updating crs from update product and changing pixel size unit depending on crs
#322 - RawSql fetch object with inheritance
Mitigate the impact of require list expansion on code size by filtering the expanded dependencies using the expanded dependencies of the layer.
Refactoring towards 'RunTargetType' abstraction
"new activation manager, and Book inheritance tidy up"
"Added fix for CustomConverter -- was too restrictive when checking the source type; anything which can be cast to the source type should work Updated type names in ConverterFactory, DefaultConverterFactory, and ConverterKey to reflect 'type' instead of 'class' Added note to DefaultMapperFactory calling out that mappedConverters is no longer being used, and that converters are being ignored when it comes to super-type resolution. Added update to MapperFacadeImpl to avoid 'normalizing' source type if there is a converter or by-reference mapping for it; this fixes a bug where the originally passed sourceType was not being used when checking for converters, causing some registered converters to be missed. Added ConverterInheritanceTestCase to confirm the above fix/update. Added a fix to Type where super-type of interfaces was not being resolved to 'Object' as expected, causing NPE."
Refactor UnderStoreBlockInStream to use composition
Refactored ListHandler to reduce complexity.
Bug 124520 - [FieldAssist] API - Applications should be able to install a reserved decoration size and commonly used decorations
Refactored titan-core to use custom Buffer interfaces for better abstraction and thread safety instead of ByteBuffer.
DATACMNS-589 - Integrated RepositoryInvoker abstraction from Spring Data REST.
Changes to use the Datasource Abstraction libraries and to move Content Specs to their own database tables.
more abstraction
Fix bug SERENGETI-1731 'VM's memory size must be devisible by 4'.
- help opens an URL - feedback URL contains now the StringTemplate version - don't change LAF if pop-up index didn't change when applying preferences - remember the last break event selected (debugger) - go to end button in debugger now run the debugger until the terminate event - debugger/interpreter panels are made visible when running the debugger or interpreter even if the split pane is collapsed - control-k emacs keybinding now behave as expected - new Console (can be displayed using the Window menu) - editor correctly update the text when tab size is changed in the preferences - editor content is reloaded automatically if file is modified by an external editor (only when editor window is reactivated)
"- new editor font and size preferences - new compiler preferences (javac or jikes) - changed the default font of the editor to ""Courier New"" (better appearance on Windows) - removed ANTLR 3 path from Build & Debug dialog box: it is taken from the current class path - redirected the output of the compiler and launcher to ANTLRWorks standard err/output device - fixed a bug were the syntax diagram would not be updated on Mac OS 10.4, Linux and Windows (validate) - fixed a bug which would prevent drag and drop of rules to work under Windows/Linux - fixed a bug which would prevent ANTLRWorks to correctly compile under Windows - fixed a bug which would prevent ANTLRWorks to correctly launch the remote parser under Windows - fixed a bug which would prevent undo/redo to work under Windows/Linux (permanent focus owner)"
[Model Abstraction] : isolate Java To Ceylon proxies to ease troubleshouting the roundtrip Java 2 Ceylon compilation. It now builds successfully (not debugged though)
Decoupling/injection is getting sexy
Preview: used edge label size factor to determine the effective size of a preview edge label.
"more abstractions, tweaks and doc improvements for the wizard component"
"Bug 388281 - [compiler][null] inheritance of null annotations as an option - comment 28: consider inherited annotation inside method body, too"
web: TotpAuthenticator: Added new method to specify image size in generated barcode url. web: TotpAuthenticator: Incremented secret size to 20 bytes as 10 are to unsecure.
Pool: Make pool size less static
Finalize decoupling of producer parts from concrete JAX-RS implementation
SGF-660 - Spring Cache Abstraction annotations do not trigger CQ.
[MSC-99] Listener inheritance
JBRULES-2835: renamed and implemented new abstraction
code refactored in order to improve the abstraction
"Implemented test timeouting. Hooks are not timeouted. I don't like the complexity of this code, but I have no simpler solution for now."
"Removed the whole encoder/decoder abstraction for string enumeration, which wasn't ehlping"
CAMEL-951: Aggregator EIP improvements: added unit test. easier configuration of aggregator collection. added out batch size option to batch processor. AggregatorCollection is now an interface to let end-users provide their own implementation. Polished javadoc.
(#25) Move  Document to a new package Rewrite computeConfiguration to lower complexity
Added FedoraObject abstraction for use with ObjectService
Fixed handling of properties in DefaultRepositorySystemSession - Made get*Properties() provide read-only views - Made copy constructor clone incoming maps to avoid unintended data coupling with input session
"enhanced filesystem/zip file abstraction: InputSources can behave like directories as java.io.File can, knowing about their parent and chilren added PathInputSource implementation which behaves like a virtual directory for a list of other InputSources added more tests for API stub generation and the import from classpath via zip/jar files: for all itest classes stubs are generated and later imported added -classpath and removed -enableguessing* switches from jooc ant task"
Use the markup of the base container when trying to resolve the doctype. This way the functionality works for markup inheritance.
Better abstractions by bringing in Groovy
Issue 280: added size parser that parses the compute service size from the ovf descriptor of a vApp template
Bugzilla#307470 Refactor code by adding canExpand method in IChartType to check if each chart type can expand size according to category number.
Fixed out of memory problems for very large result sets. These were caused by PostgreSQL not using cursor-based result sets. Auto commit needs to be off and fetch size must be set. See http://jdbc.postgresql.org/documentation/81/query.html for more details.
implemented IniFile abstraction for uniform handling of .ini and .reg files
Serenified multiple interfaces inheritance tests
"Extractors take a size parm now. Size is gradually increased for every invocation of a given TheoryParameterGenerator. Subsequent features will allow maxSize, and size will be proportioned correctly for invocations of an extractor based on number of invocations and maxSize."
"refactor, size of key (catalognumber)"
"[ADD] Commands, Add: check directory size before adding documents"
HSEARCH-2764 Set the minim bulk size to 1 for stream work orchestration
RF-10442: Re-factored the EDT state to minimize the coupling between the state and renderer
"Towards cleaner enumerable properties of Jangaroo objects: Invoke super class constructor using Function#call, not by attaching the super class constructor as a member (super$<inheritance-level>). Last remaining ""artificial"" enumerable property of primitive Jangaroo objects: ""constructor"", as it is overwritten to point to the right constructor function. Unfortunately, only in the default Function#prototype, the ""constructor"" property is non-enumerable."
World-inheritance implemented. Some major refactoring work done.
Trac #129: JaCoCo core calculates cyclomatic complexity.
"Fix test for TIKA-1502 - re-order the MediaTypeRegistry logic for getting the super type, so that if an explicit inheritance has been defined between one parametered type and another, that inheritance is used in preference to ""drop all parameters"""
zip by size not number of files
"TEST - Added assertElementExists() and assertElementNoExists(). TEST - Added assertNoTextNodes() - identified bug in jdo/<inheritance> generation. TEST - Added more assertions to the unit tests for jpox-jdo-mapping. BUG FIX - jdo/<inheritance> element broke jdo/<class objectid-class> if abstract superClass BUG FIX - mdo/<association stash.part=""true""> should not determine jpox/<collectoin dependent-element=""""> usage. BUG FIX - mdo/<field jpox.value-strategy=""""> value is now verified. BUG FIX - mdo/<field jpox.value-strategy=""off""> now allows you to turn off the generation of the jdo/<field value-strategy=""""> attribute."
Passing sparse tdcomplex decomposition tests.
Report total size as -1 when unknown
Removed complexity (closes #1522430)
utils: polish message size calculation
"Add more attributes (point main and halo colors, text size and color)."
Add Sum aggregator and Arithmetics abstraction
HIVE-1806 Merge per dynamic partition based on size of each dynamic partition (Ning Zhang via namit)
Add DocumentLoader abstraction to enable clean routing of solr documents to destinations that are not instances of SolrServer. For example to MR writeable output destinations.
"Allow to configure compression (tested), block size and bloomfilter (untested) for the tables upon initial creation."
Correct context inheritance to correctly call cache clearing events
"EST-74, EST-76: clock service, decoupling lease from agreement"
Abstraction of the dspatchers
TIKA-639: Maximum pool size for ForkParser
new AbstractBaseTheme and BaseSeries; introducing base font concept for Theme; new method for setting sum size in pie charts
Minor refactoring of TestData to reduce coupling.
"Attempt to fix JBLOGGING-44 by decoupling Logger instances from the LoggerNode tree, at the price of eliminating duplicate logger folding."
"Data subject handling DataSubject now only has one method, getData Added DataValue as extra level of abstraction to avoid messy boiler-plate code Only one data event now - RetrieveDataEvent Removed world from data retrieving, not all data subjects have a world, and it can be handled implementation side. Signed-off-by: Windwaker <wjcrouse913@aim.com>"
Checkstyle: reduce complexity
moved the decomposition algorithms in a subpackage of the linear package
"SONARPLUGINS-31 Scan PHP project refactoring Php Depend to calculate only measures on files scope and to not calculate ""complex"" measure as comments ratio, complexity per class, and complexity per method added jobs to calculate measures on dir and project scope added jobs to calulate comments ratio, complexity per class, and complexity per method measures"
"#166 store resultstring in memory (if size is not too large), so users may change the output format without needing to run the query again"
fix(qa/perftest): tune heap size & config
Work in progress for MarkupInheritanceExample
"[updated] AssetManager, removed exception printStackTrace. [fixed] TextureRegion returning the wrong size due to float rounding. Should really cache the damn sizes... [added] MathUtils.clamp. [updated] Button sizing, constructor, setting style. [fixed] FlickScrollPane layout. [added] Scaling class separate from scene2d, updated Image. [fixed] TableLayout debug lines, finally. [updated] TableLayout, cache pref and min sizes better."
"* Added fine grained size() tests for Node/Relationship and friends * Reinstated GCR as the default cache, now that all known bugs are fixed * Renamed Array cache to GC resistant cache after consensus on that name * Changed size to always calculate worst case size. * Added (reluctanty) a registeredSize on EntityWithSize which requires more memory, but solves a concurrency issue which made cache size diverge over time * Correct size() calculations for all objects and some tests for size diverge bug * Manual cache section updated with cache name change and minor changes."
First pass at fixed ensemble size support
"Use inheritance, like a good OOP boy should"
readded inheritance of skilltrees
"Inner, outer, dot vector product changes. Eigendecomposition failure test case."
Refactored the HA test classes:  * Test cases are now better isolated. Failure in one case should not affect others.  * All tests that execute code in multiple processes now use the SubProcess abstraction.    * This provides better tracability for (failing) test cases by giving access to stdout/stderr of all subprocesses.    * Each line of output is identified by the name of the testcase and the pid of the subprocesses.  * Removed most Thread.sleep() calls from the test code.  * Added a log4j.xml file in the test resources to get tracability of failures in ZooKeeper. Also refactored HAGDb (in MasterServer) to fail early if unable to bind its communication port.
Issue #1666 common abstraction of paginated storage was extracted.
ported some composition generation code 
OFC-118 Prefer polymorphism over conditional branches
"The DirectoryCopier was relying on deprecated FileFilterUtils methods. While changing, introduced a new static wrapper to prevent the tight coupling of static methods, making the test a little nicer."
URL Encoded keys. Retry logic/logging for no value on object (404). Enhanced Summary output. Queue size can now be specified on command line.
Refactored complexity out of HttpFields
Made the drag handle slightly less ugly Set a minimum size for the fastview bar when docked on the bottom
=- display: size argument is now optional. - synth: Added wireless support.
"Follow-up for 169860, fix regression in type hierarchy, inheritance via typedefs"
[IDE Abstraction] : Now use the abstracted `ResourceVirtualFile` objects 
Do away with the unnecessary complexity of a builder class for ExceptionalReport.
Fix handling circular inheritance for options
TEIID-1750 fixing a bug with positional filestore writes and fixing size indexing.
first version of new processor engine managing as well inheritance of type definition with version
completed initial stateful bolt abstractions
Fixed output size bug; added simple plan assembler; clean up
compact buffers.  better trace logging.  limit buffer size on send.  Only deal with ip v4 addresses for the moment - deal.
Added JMX support for introspecting the on-disk size of the store files. Also changed the name of the management package.
Adding some abstractions for 'registration'
Reduce coupling between packages
Refactored code for better inheritance. UPDATE YOUR LOCAL VERSION!
"[updated] scene2d widgets again. In addition to setting their size in the constructor, they also automatically call invalidateHierarchy when mutators are called that affect the widget size. invalidateHierarchy now calls pack, so widget sizes are automatically updated even when not using Table."
Allows to define page size for repository lists.
use disk size instead of download size
EST-1029: completes decoupling of invoice from lease and leaseinvoicing
fix realtime module + cleaner metadata abstraction
SONARJS-548 Fix FunctionComplexity check
bumped work result size back to 0xFF Tweaking graceful shutdown Fixed bug with waiting for gpu event before checking buffer for result
Simplified code by eliminating unnecessary inheritance.
Merged LUDecomposition and LUDecompositionImpl (see MATH-662).
Expose composition definition through content type feed resource's entity
Fixed initial size and resize issues that came with the merge of hal/uf-97
Improvements to vertical inheritance modeling in entity modeler.
Add hidden settings for setting the size for the on-ground bounding box for moving (creativefly+survivalfly) and nofall checks. [Using a bigger default one for nofall reduces false positives a lot.]
Allow the max scale size to be set on load.
"Fix for ticket:359 -- if we use piecewise reading and there  is a datagram bigger than what we normally expect, increase the buffer size to the actual datagram duration. Backed by test in TimelineTests."
Create ProxyConnectorProvider abstraction to allow customization of proxy connector selection.  Needed to fix JBPAPP-8466.
"Added ordering to application console output, such that staging logs always appear first, and after staging content is received, remaining log files are scheduled. Added API to print messages to the console. Removed obsolete abstractions for console output. Added server name to the console header to identify which server the application is deployed to."
[refactor] limit cache size and make it an LRU cache
reduce document size by merge some streams to core stream.
removed present constraint required constraint enhanced make it possible to determine for the message translator to separate required from present required constraints can now check Maps required now uses isEmpty instead of size on collection + tests
"Refactoring in AbstractService.class of vmeContainRelevantText(Vme, String); decreased complexity."
Add remaining features to support the abstraction
SB-713:  LayoutProviders draft implementation using Path abstraction
"ReadBackedPhasing now uses a SortedVCFWriter to simplify, and has the ability to merge phased SNPs into MNPs on the fly [turned off by default]; MergeSegregatingPolymorphismsWalker can also do this as a post-processing step; Integration tests for MergeSegregatingPolymorphismsWalker were also added"
Bug 417559 - Enhanced debug hover doesn't remember its size when expanded
HIVE-4068 Size of aggregation buffer which uses non-primitive type is not estimated correctly (Navis)
Decrease the complexity of isRuleSetEqual
HSEARCH-218 [add indexAll( Class type ) to rebuild indexes from all data] Adding batch backend and coupling the batch API to the new backend.
The FieldsetPanels option and page size are now created by AbstractListForm.
show size of the record which is produced by serializers
CAY-1923 Optimize BatchTranslator - use fixed size array of BatchParameterBinding
Support text block abstraction
PLANNER-401: PR comments: Fixed inheritance and defaulting of subSingleCount
pmd: plsql - added unit test for NPathComplexity and a initial PLSQL parser test
changed contract tests to inheritance is more explicit Added test to check what happens when no server endpoint exists
Fix complexity issue in tag sync method
reformatted attribute formatters : implemented clean builder inheritance and builder narrowing
=- fix serialization/deserialization for sparse vs normal - minor performance enhancements to unsigned int comparator - reduce max size of sparse array
https://jira.jboss.org/browse/JBIDE-6333 : Add text caption for resizer actions - Label showing new size 'W x H' is added.
Fix generic test classes inheritance strategy Use applicationContext.xml instead of application name specific context file Simplify packages
MONDRIAN: Feature (#1824609) - Support for Aggregating Distinct Count Measures over list of tuples. Limitation: Has a hard limit of list size <= 100. Further optimization is possible by eliminating a tuple if the list already has another tuple that has all its members at parent level
"Uses skip list to sort entries before adding them to entry log file, to improve ledger read performance. Memory arena is used to allocate skip list entries, to avoid GC impact. A single-threaded scheduler is used to flush skip list to buffered entry log file channel, once configured data size limit is reached. Sync thread is notified as well to flush file buffers. Compaction uses Skip list, to  merge entries together as well as remove duplicate entries. This change also fix an existing issue of old entry logs being removed w/o forcing new entry logs flushed."
New implementation using prototype-based inheritance.
Removed unused coupling from TasksList to TasksSystem. This is getting better and better
o Strengthened IT for MNG-1999 to test further inheritance scenario
"JERSEY-2786: Memory leak with shutdown hooks, caused by configuration inheritance  + added reproducer test case and a test for the client lifecycle listener  + shutdown hook storage does not keep garbage any more  + client runtime cleans up resources once garbage collected"
Enhance the parser about the id allocation and refactor the code in inheritance system.
Some fine tuning to enlarged and popup view. Deck editor card size is saved now. Some minor changes.
Get taxonomic decomposition normalization to work. WARNING: Classification new takes a long (!) time. Started working on concurrent loading/normalization.
dcache-restful-api: move admin collector service abstractions to dcache module
Save size in all append methods
RESOLVED 293299: [design][fancy][business] Define a minimum size for stacks https://bugs.eclipse.org/bugs/show_bug.cgi?id=293299
EntityDescriptor inheritance support + do not duplicate VariableDescriptor per variable of an entity classes and its subclass
[MNG-1856] fix inheritance of the distribution management section and add tests
Optimising message size and squashing nasty bugs
"Introduce Builder<T> abstraction for building services.  Convert AsynchronousService, InjectedValueSevice and BinderServiceBuilder to Builder implementations."
Improve decoupling and coverage
"FCREPO-64: Datastream SIZE attribute not fully implemented - size now computed for ""M"" when datastreams are modified, SIZE written to FOXML and desearialized when reading - will need some kind of rebuild tool for pre-existing M datastream versions"
SONAR-5007 - Validated tests for ActiveRule inheritance
Actions to split text to size and post as activity+comments or comments (B-11815)
Some Improvements for Connectors Modules. TODO: Create an abstraction for Servers Queue
"ARQ-1695 Integrated Spacelift into Drone: downloading, extracting and running processes There where intoduced new abstractions: ExternalBinary = represents a binary from an external source (eg.: web-driver or selenium server jar) ExternalBinarySource = represents a an external source a binary could be retrieved from (eg: google storage for selenium bits and chrome webDriver) BinaryHandler = Class that handles all necessary stuff around binaries (setting and getting properties, downloading, extracting, running, etc...)"
[PLAT-1673] Created OpenGamma cholesky decomposition.
array read fix - size of the result
HPPC-126: a PoC at a more intelligent signature parser based on syntax tree decomposition.
"AtlasProperties refactoring stage 2:  - atlas properties storage is abstracted by interface - storage implementations now include db-backed, old-style properties file-backed and composition of the above - storages list is configured through beans context - EF ignore options split to separate methods"
codegen: Improved model building: Now inheritance is handled
"Revert ""- Decoupling entry points to avoid module dependencies"""
"MAHOUT-665 remove unused cache classes, move least-k next to its point of use, remove unused cache size setter"
"Adding a custom serialization option, when the space overhead of java serialization is significant compared to the BF size itself (i.e. for small BFs) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=28310115"
YARN-1659. Defined the ApplicationTimelineStore store as an abstraction for implementing different storage impls for storing timeline information. Contributed by Billie Rinaldi. svn merge --ignore-ancestry -c 1564037 ../../trunk/
Fixed setting of default max size in EvictionConfig
Simplify inheritance lookup
Issue #432 Limit queue size in ByteBufferPools
"refractor catalog domain objects to allow inheritance, add adminCatalog + checks"
Pendant menu is now a component.  Add z step size spinner to jog panel
Removed double[][] solve(double[][]) from CholeskyDecompositionImpl.Solver
"Updated batik rendering code, now renders directly to native size using batik 1.7 and tweaks"
"HIVE-186. Refactor code to use a single graph, nodeprocessor, dispatcher and rule abstraction. (Ashish Thusoo via zshao)"
Bug 417392 - Grid size & color
"org.eclipse.cdt.core 	Added some trace statements to CompleteParseASTFactory.   	Cleaned up usage of Enum.getValue() wrt encapsulation of enumerator value.   	Refactored CompleteParseASTFactory for correctness and abstraction.  	Added preliminary IProblem support to CompleteParseASTFactory.   	Added (commented out unfortunately) assertions into CompleteParseASTFactory.  	Updated IASTUsingDeclaration to return an Iterator for declarations mapped rather than just a single declaration.  "
Bug 302289: File size limit for files to be indexed.
Some more path manipulation abstractions.
"[#LIB-10] Audit Logger module [#LIB-11] Persist Audit Logger Configuration [#LIB-13] specify Network Protocol by additional connection attribute ""Protocol"" [#LIB-15] Support Device Extensions by composition alternatively to inheritance"
inheritance test implemented
Add accessors for InheritanceMap and remove public access
Added documentation and proper error routing and improved encapsulation
"Introduced a level of abstraction to make it easier to write tests for other platforms, started writing HA-test with three windows machines."
refactored method to reduce complexity
Allow cache size adjustment.
Remove HostTransport abstraction in lieu of emitting data
"HSEARCH-1727 Restore original package name for SearchFactory, break inheritance link with SearchFactoryIntegrator"
"=-Added new IntegerListIterator based on accelerated ascending compositions. -Added working acc. ascending compositions, plus A constrained version. -MassDeviation calculator, functionality not ready -Added new GeneralIsomersGetterForCarbonsAndDoubleBondsPerChain."
Add option to inform ByteArrayBuffer not to automatically round up the buffer size to nearest power of 2
Composed takeTurn and fixed test Added a discussion about fixing tests due to tight coupling
[MSC-129] removing deprecated ServiceListener.Inheritance
Decomposition and moving RESTful-like bot tests + template of new RESTful-like bot test added
"Cleanup of pack/layout/updateMinimum calls.  Components can be packed now.  Removed pack(int,int) - should use setMinimum on contents to dictate appropriate pack size.  Can still use setContentSize if specific size needed. UIHud now requires a Canvas to construct, cleaning up the ambiguous use of Camera.getCurrent and making it easier to use a hud size. Cleaned up examples to use nicer flow."
"MODE-2529 Removes the ""cacheTtlSeconds"" setting and replaces it with a ""cacheable"" flag This also cleans up some of the code for https://issues.jboss.org/browse/MODE-1712 as most of those abstractions weren't really required."
"Some data model and API changes. (work in progress) - remove enumeration BundleDeploymentAction in favor of free text actions   in the audits and increase the field size to 512.  This field will act   as the action/summary to be displayed for each audit. Additional detail   will be in the auditMessage field. - remove the ability to schedule a single resource deployment. This is an   API change, not a change to the data model. - Remove the NO_CHANGE deployment status. SUCCESS will be used in its   place, when necessary.  Add WARN status for WARN level auditing."
Do away with the unnecessary complexity of a builder class for ExceptionalReport.
SECOAUTH-135: fix inheritance for provider impls
[DROOLS-64] Traits do not comply with type inheritance on modify
"Deprecate access latency, retention policy and file size in StorageInfo"
=- Summary: Scale window size is not fixed
Issue #1626 Durable component abstraction was extracted. SBTree changes are logged in WAL.
ISPN-5345 Allow eviction for based on approximation of size compared to element count
PLF-4326 : Verify the size of the space\'s informations toolbar
"Adding more context information to existing exceptions, cleaning up construction in exceptions, and adjusting the inheritance hierarchy for exceptions to make them make a little more sense for error reporting. Also, adding improved (but not complete, yet) reporting for BuildFailureExceptions and ProjectBuildingExceptions, with some tests to make sure pertinent information is in the output."
rename tests in toolabstraction/maven (and adjust testbeans)
Refactored.  Set size to 2^30+1 for byte[] test. Set netbeans size to -J-Xms4096m -J-Xmx5120m.
add max size and charset for log
API cleanup. Also use MemorySize instead of numbers for defining memory block size (like memory or space allocation).
Refactored EphemeralFileSystemAbstraction.
Removed ability to change the HPACK decoder header table size setting.
Refactored image classes to separate responsibilities and reduce complexity.
